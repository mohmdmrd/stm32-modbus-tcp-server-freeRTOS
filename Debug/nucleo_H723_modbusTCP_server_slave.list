
nucleo_H723_modbusTCP_server_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017278  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000037a8  08017548  08017548  00018548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801acf0  0801acf0  0001bcf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801acf8  0801acf8  0001bcf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801acfc  0801acfc  0001bcfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000090  24000000  0801ad00  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00008118  24000090  0801ad90  0001c090  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240081a8  0801ad90  0001c1a8  2**0
                  ALLOC
  9 .lwip_sec     00004a83  30000000  30000000  0001d000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0001c090  2**0
                  CONTENTS, READONLY
 11 .debug_info   00034bfd  00000000  00000000  0001c0be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00007e03  00000000  00000000  00050cbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000025d8  00000000  00000000  00058ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001dc9  00000000  00000000  0005b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00013a46  00000000  00000000  0005ce61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003ac28  00000000  00000000  000708a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016a9cc  00000000  00000000  000ab4cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00215e9b  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000a4c8  00000000  00000000  00215ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000005a  00000000  00000000  002203a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000090 	.word	0x24000090
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08017530 	.word	0x08017530

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000094 	.word	0x24000094
 800030c:	08017530 	.word	0x08017530

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80003b6:	f000 f995 	bl	80006e4 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003ba:	4b44      	ldr	r3, [pc, #272]	@ (80004cc <main+0x11c>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d11b      	bne.n	80003fe <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003c6:	f3bf 8f4f 	dsb	sy
}
 80003ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003cc:	f3bf 8f6f 	isb	sy
}
 80003d0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003d2:	4b3e      	ldr	r3, [pc, #248]	@ (80004cc <main+0x11c>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003da:	f3bf 8f4f 	dsb	sy
}
 80003de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003e0:	f3bf 8f6f 	isb	sy
}
 80003e4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003e6:	4b39      	ldr	r3, [pc, #228]	@ (80004cc <main+0x11c>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	4a38      	ldr	r2, [pc, #224]	@ (80004cc <main+0x11c>)
 80003ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003f0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003f2:	f3bf 8f4f 	dsb	sy
}
 80003f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003f8:	f3bf 8f6f 	isb	sy
}
 80003fc:	e000      	b.n	8000400 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003fe:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000400:	4b32      	ldr	r3, [pc, #200]	@ (80004cc <main+0x11c>)
 8000402:	695b      	ldr	r3, [r3, #20]
 8000404:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000408:	2b00      	cmp	r3, #0
 800040a:	d138      	bne.n	800047e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800040c:	4b2f      	ldr	r3, [pc, #188]	@ (80004cc <main+0x11c>)
 800040e:	2200      	movs	r2, #0
 8000410:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000414:	f3bf 8f4f 	dsb	sy
}
 8000418:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800041a:	4b2c      	ldr	r3, [pc, #176]	@ (80004cc <main+0x11c>)
 800041c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000420:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	0b5b      	lsrs	r3, r3, #13
 8000426:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800042a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	08db      	lsrs	r3, r3, #3
 8000430:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000434:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000436:	68bb      	ldr	r3, [r7, #8]
 8000438:	015a      	lsls	r2, r3, #5
 800043a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800043e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000440:	687a      	ldr	r2, [r7, #4]
 8000442:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000444:	4921      	ldr	r1, [pc, #132]	@ (80004cc <main+0x11c>)
 8000446:	4313      	orrs	r3, r2
 8000448:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	1e5a      	subs	r2, r3, #1
 8000450:	607a      	str	r2, [r7, #4]
 8000452:	2b00      	cmp	r3, #0
 8000454:	d1ef      	bne.n	8000436 <main+0x86>
    } while(sets-- != 0U);
 8000456:	68bb      	ldr	r3, [r7, #8]
 8000458:	1e5a      	subs	r2, r3, #1
 800045a:	60ba      	str	r2, [r7, #8]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d1e5      	bne.n	800042c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000460:	f3bf 8f4f 	dsb	sy
}
 8000464:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000466:	4b19      	ldr	r3, [pc, #100]	@ (80004cc <main+0x11c>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	4a18      	ldr	r2, [pc, #96]	@ (80004cc <main+0x11c>)
 800046c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000470:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000472:	f3bf 8f4f 	dsb	sy
}
 8000476:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000478:	f3bf 8f6f 	isb	sy
}
 800047c:	e000      	b.n	8000480 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800047e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000480:	f000 ff50 	bl	8001324 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000484:	f000 f82e 	bl	80004e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000488:	f000 f89c 	bl	80005c4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  myModbus.u16Port=502;//port Address
 800048c:	4b10      	ldr	r3, [pc, #64]	@ (80004d0 <main+0x120>)
 800048e:	f44f 72fb 	mov.w	r2, #502	@ 0x1f6
 8000492:	80da      	strh	r2, [r3, #6]
  myModbus.u8slaveID=0x01;//slave Address for modbus
 8000494:	4b0e      	ldr	r3, [pc, #56]	@ (80004d0 <main+0x120>)
 8000496:	2201      	movs	r2, #1
 8000498:	721a      	strb	r2, [r3, #8]
  myModbus.u16reg=ModbusData;//buffer register
 800049a:	4b0d      	ldr	r3, [pc, #52]	@ (80004d0 <main+0x120>)
 800049c:	4a0d      	ldr	r2, [pc, #52]	@ (80004d4 <main+0x124>)
 800049e:	601a      	str	r2, [r3, #0]
  myModbus.u16regsize= sizeof(ModbusData)/sizeof(ModbusData[0]);//get buffer size
 80004a0:	4b0b      	ldr	r3, [pc, #44]	@ (80004d0 <main+0x120>)
 80004a2:	2228      	movs	r2, #40	@ 0x28
 80004a4:	809a      	strh	r2, [r3, #4]

  HAL_Delay(1000);//must used
 80004a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004aa:	f000 ff97 	bl	80013dc <HAL_Delay>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004ae:	f005 f9a3 	bl	80057f8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004b2:	4a09      	ldr	r2, [pc, #36]	@ (80004d8 <main+0x128>)
 80004b4:	2100      	movs	r1, #0
 80004b6:	4809      	ldr	r0, [pc, #36]	@ (80004dc <main+0x12c>)
 80004b8:	f005 f9fd 	bl	80058b6 <osThreadNew>
 80004bc:	4603      	mov	r3, r0
 80004be:	4a08      	ldr	r2, [pc, #32]	@ (80004e0 <main+0x130>)
 80004c0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004c2:	f005 f9bd 	bl	8005840 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004c6:	bf00      	nop
 80004c8:	e7fd      	b.n	80004c6 <main+0x116>
 80004ca:	bf00      	nop
 80004cc:	e000ed00 	.word	0xe000ed00
 80004d0:	240000b0 	.word	0x240000b0
 80004d4:	240000bc 	.word	0x240000bc
 80004d8:	0801aaac 	.word	0x0801aaac
 80004dc:	080006c5 	.word	0x080006c5
 80004e0:	240000ac 	.word	0x240000ac

080004e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b09c      	sub	sp, #112	@ 0x70
 80004e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004ee:	224c      	movs	r2, #76	@ 0x4c
 80004f0:	2100      	movs	r1, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f016 f921 	bl	801673a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	2220      	movs	r2, #32
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f016 f91b 	bl	801673a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000504:	2002      	movs	r0, #2
 8000506:	f003 f823 	bl	8003550 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800050a:	2300      	movs	r3, #0
 800050c:	603b      	str	r3, [r7, #0]
 800050e:	4b2c      	ldr	r3, [pc, #176]	@ (80005c0 <SystemClock_Config+0xdc>)
 8000510:	699b      	ldr	r3, [r3, #24]
 8000512:	4a2b      	ldr	r2, [pc, #172]	@ (80005c0 <SystemClock_Config+0xdc>)
 8000514:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000518:	6193      	str	r3, [r2, #24]
 800051a:	4b29      	ldr	r3, [pc, #164]	@ (80005c0 <SystemClock_Config+0xdc>)
 800051c:	699b      	ldr	r3, [r3, #24]
 800051e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000522:	603b      	str	r3, [r7, #0]
 8000524:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000526:	bf00      	nop
 8000528:	4b25      	ldr	r3, [pc, #148]	@ (80005c0 <SystemClock_Config+0xdc>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000530:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000534:	d1f8      	bne.n	8000528 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000536:	2302      	movs	r3, #2
 8000538:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800053a:	2301      	movs	r3, #1
 800053c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800053e:	2340      	movs	r3, #64	@ 0x40
 8000540:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000542:	2302      	movs	r3, #2
 8000544:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000546:	2300      	movs	r3, #0
 8000548:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800054a:	2304      	movs	r3, #4
 800054c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 34;
 800054e:	2322      	movs	r3, #34	@ 0x22
 8000550:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000552:	2301      	movs	r3, #1
 8000554:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000556:	2302      	movs	r3, #2
 8000558:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800055a:	2302      	movs	r3, #2
 800055c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800055e:	230c      	movs	r3, #12
 8000560:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000562:	2300      	movs	r3, #0
 8000564:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000566:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800056a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000570:	4618      	mov	r0, r3
 8000572:	f003 f827 	bl	80035c4 <HAL_RCC_OscConfig>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800057c:	f000 f918 	bl	80007b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000580:	233f      	movs	r3, #63	@ 0x3f
 8000582:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000584:	2303      	movs	r3, #3
 8000586:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800058c:	2308      	movs	r3, #8
 800058e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000590:	2340      	movs	r3, #64	@ 0x40
 8000592:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000594:	2340      	movs	r3, #64	@ 0x40
 8000596:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000598:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800059c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800059e:	2340      	movs	r3, #64	@ 0x40
 80005a0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	2103      	movs	r1, #3
 80005a6:	4618      	mov	r0, r3
 80005a8:	f003 fbe6 	bl	8003d78 <HAL_RCC_ClockConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80005b2:	f000 f8fd 	bl	80007b0 <Error_Handler>
  }
}
 80005b6:	bf00      	nop
 80005b8:	3770      	adds	r7, #112	@ 0x70
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	58024800 	.word	0x58024800

080005c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08c      	sub	sp, #48	@ 0x30
 80005c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	f107 031c 	add.w	r3, r7, #28
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005da:	4b38      	ldr	r3, [pc, #224]	@ (80006bc <MX_GPIO_Init+0xf8>)
 80005dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005e0:	4a36      	ldr	r2, [pc, #216]	@ (80006bc <MX_GPIO_Init+0xf8>)
 80005e2:	f043 0320 	orr.w	r3, r3, #32
 80005e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005ea:	4b34      	ldr	r3, [pc, #208]	@ (80006bc <MX_GPIO_Init+0xf8>)
 80005ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005f0:	f003 0320 	and.w	r3, r3, #32
 80005f4:	61bb      	str	r3, [r7, #24]
 80005f6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005f8:	4b30      	ldr	r3, [pc, #192]	@ (80006bc <MX_GPIO_Init+0xf8>)
 80005fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005fe:	4a2f      	ldr	r2, [pc, #188]	@ (80006bc <MX_GPIO_Init+0xf8>)
 8000600:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000604:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000608:	4b2c      	ldr	r3, [pc, #176]	@ (80006bc <MX_GPIO_Init+0xf8>)
 800060a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800060e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000612:	617b      	str	r3, [r7, #20]
 8000614:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000616:	4b29      	ldr	r3, [pc, #164]	@ (80006bc <MX_GPIO_Init+0xf8>)
 8000618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800061c:	4a27      	ldr	r2, [pc, #156]	@ (80006bc <MX_GPIO_Init+0xf8>)
 800061e:	f043 0304 	orr.w	r3, r3, #4
 8000622:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000626:	4b25      	ldr	r3, [pc, #148]	@ (80006bc <MX_GPIO_Init+0xf8>)
 8000628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800062c:	f003 0304 	and.w	r3, r3, #4
 8000630:	613b      	str	r3, [r7, #16]
 8000632:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000634:	4b21      	ldr	r3, [pc, #132]	@ (80006bc <MX_GPIO_Init+0xf8>)
 8000636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800063a:	4a20      	ldr	r2, [pc, #128]	@ (80006bc <MX_GPIO_Init+0xf8>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000644:	4b1d      	ldr	r3, [pc, #116]	@ (80006bc <MX_GPIO_Init+0xf8>)
 8000646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000652:	4b1a      	ldr	r3, [pc, #104]	@ (80006bc <MX_GPIO_Init+0xf8>)
 8000654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000658:	4a18      	ldr	r2, [pc, #96]	@ (80006bc <MX_GPIO_Init+0xf8>)
 800065a:	f043 0302 	orr.w	r3, r3, #2
 800065e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000662:	4b16      	ldr	r3, [pc, #88]	@ (80006bc <MX_GPIO_Init+0xf8>)
 8000664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000668:	f003 0302 	and.w	r3, r3, #2
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000670:	4b12      	ldr	r3, [pc, #72]	@ (80006bc <MX_GPIO_Init+0xf8>)
 8000672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000676:	4a11      	ldr	r2, [pc, #68]	@ (80006bc <MX_GPIO_Init+0xf8>)
 8000678:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800067c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000680:	4b0e      	ldr	r3, [pc, #56]	@ (80006bc <MX_GPIO_Init+0xf8>)
 8000682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	2101      	movs	r1, #1
 8000692:	480b      	ldr	r0, [pc, #44]	@ (80006c0 <MX_GPIO_Init+0xfc>)
 8000694:	f002 ff42 	bl	800351c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000698:	2301      	movs	r3, #1
 800069a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069c:	2301      	movs	r3, #1
 800069e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a4:	2300      	movs	r3, #0
 80006a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006a8:	f107 031c 	add.w	r3, r7, #28
 80006ac:	4619      	mov	r1, r3
 80006ae:	4804      	ldr	r0, [pc, #16]	@ (80006c0 <MX_GPIO_Init+0xfc>)
 80006b0:	f002 fd8c 	bl	80031cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006b4:	bf00      	nop
 80006b6:	3730      	adds	r7, #48	@ 0x30
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	58024400 	.word	0x58024400
 80006c0:	58021400 	.word	0x58021400

080006c4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80006cc:	f004 f9ee 	bl	8004aac <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  tcpserver_init(&myModbus);
 80006d0:	4803      	ldr	r0, [pc, #12]	@ (80006e0 <StartDefaultTask+0x1c>)
 80006d2:	f000 fb77 	bl	8000dc4 <tcpserver_init>
  /* Infinite loop */
  for(;;)
  {
    HAL_Delay(1);
 80006d6:	2001      	movs	r0, #1
 80006d8:	f000 fe80 	bl	80013dc <HAL_Delay>
 80006dc:	e7fb      	b.n	80006d6 <StartDefaultTask+0x12>
 80006de:	bf00      	nop
 80006e0:	240000b0 	.word	0x240000b0

080006e4 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80006ea:	463b      	mov	r3, r7
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80006f6:	f000 ff89 	bl	800160c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80006fa:	2301      	movs	r3, #1
 80006fc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80006fe:	2300      	movs	r3, #0
 8000700:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000706:	231f      	movs	r3, #31
 8000708:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800070a:	2387      	movs	r3, #135	@ 0x87
 800070c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800070e:	2300      	movs	r3, #0
 8000710:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000712:	2300      	movs	r3, #0
 8000714:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000716:	2301      	movs	r3, #1
 8000718:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800071a:	2301      	movs	r3, #1
 800071c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800071e:	2300      	movs	r3, #0
 8000720:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000722:	2300      	movs	r3, #0
 8000724:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000726:	463b      	mov	r3, r7
 8000728:	4618      	mov	r0, r3
 800072a:	f000 ffa7 	bl	800167c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800072e:	2301      	movs	r3, #1
 8000730:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8000732:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8000736:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000738:	2307      	movs	r3, #7
 800073a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800073c:	2300      	movs	r3, #0
 800073e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000740:	2303      	movs	r3, #3
 8000742:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000744:	2300      	movs	r3, #0
 8000746:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000748:	2300      	movs	r3, #0
 800074a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800074c:	2301      	movs	r3, #1
 800074e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000750:	463b      	mov	r3, r7
 8000752:	4618      	mov	r0, r3
 8000754:	f000 ff92 	bl	800167c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000758:	2302      	movs	r3, #2
 800075a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30004000;
 800075c:	4b0a      	ldr	r3, [pc, #40]	@ (8000788 <MPU_Config+0xa4>)
 800075e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000760:	230d      	movs	r3, #13
 8000762:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000764:	2301      	movs	r3, #1
 8000766:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000768:	2301      	movs	r3, #1
 800076a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800076c:	2300      	movs	r3, #0
 800076e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000770:	463b      	mov	r3, r7
 8000772:	4618      	mov	r0, r3
 8000774:	f000 ff82 	bl	800167c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000778:	2004      	movs	r0, #4
 800077a:	f000 ff5f 	bl	800163c <HAL_MPU_Enable>

}
 800077e:	bf00      	nop
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	30004000 	.word	0x30004000

0800078c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a04      	ldr	r2, [pc, #16]	@ (80007ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d101      	bne.n	80007a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800079e:	f000 fdfd 	bl	800139c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40001000 	.word	0x40001000

080007b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80007b4:	b672      	cpsid	i
}
 80007b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <Error_Handler+0x8>

080007bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c2:	4b0c      	ldr	r3, [pc, #48]	@ (80007f4 <HAL_MspInit+0x38>)
 80007c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80007c8:	4a0a      	ldr	r2, [pc, #40]	@ (80007f4 <HAL_MspInit+0x38>)
 80007ca:	f043 0302 	orr.w	r3, r3, #2
 80007ce:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80007d2:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <HAL_MspInit+0x38>)
 80007d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80007d8:	f003 0302 	and.w	r3, r3, #2
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007e0:	2200      	movs	r2, #0
 80007e2:	210f      	movs	r1, #15
 80007e4:	f06f 0001 	mvn.w	r0, #1
 80007e8:	f000 fee8 	bl	80015bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	58024400 	.word	0x58024400

080007f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b090      	sub	sp, #64	@ 0x40
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2b0f      	cmp	r3, #15
 8000804:	d827      	bhi.n	8000856 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000806:	2200      	movs	r2, #0
 8000808:	6879      	ldr	r1, [r7, #4]
 800080a:	2036      	movs	r0, #54	@ 0x36
 800080c:	f000 fed6 	bl	80015bc <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000810:	2036      	movs	r0, #54	@ 0x36
 8000812:	f000 feed 	bl	80015f0 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000816:	4a29      	ldr	r2, [pc, #164]	@ (80008bc <HAL_InitTick+0xc4>)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800081c:	4b28      	ldr	r3, [pc, #160]	@ (80008c0 <HAL_InitTick+0xc8>)
 800081e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000822:	4a27      	ldr	r2, [pc, #156]	@ (80008c0 <HAL_InitTick+0xc8>)
 8000824:	f043 0310 	orr.w	r3, r3, #16
 8000828:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800082c:	4b24      	ldr	r3, [pc, #144]	@ (80008c0 <HAL_InitTick+0xc8>)
 800082e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000832:	f003 0310 	and.w	r3, r3, #16
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800083a:	f107 0210 	add.w	r2, r7, #16
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	4611      	mov	r1, r2
 8000844:	4618      	mov	r0, r3
 8000846:	f003 fe0d 	bl	8004464 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800084a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800084c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800084e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000850:	2b00      	cmp	r3, #0
 8000852:	d106      	bne.n	8000862 <HAL_InitTick+0x6a>
 8000854:	e001      	b.n	800085a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000856:	2301      	movs	r3, #1
 8000858:	e02b      	b.n	80008b2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800085a:	f003 fded 	bl	8004438 <HAL_RCC_GetPCLK1Freq>
 800085e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000860:	e004      	b.n	800086c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000862:	f003 fde9 	bl	8004438 <HAL_RCC_GetPCLK1Freq>
 8000866:	4603      	mov	r3, r0
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800086c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800086e:	4a15      	ldr	r2, [pc, #84]	@ (80008c4 <HAL_InitTick+0xcc>)
 8000870:	fba2 2303 	umull	r2, r3, r2, r3
 8000874:	0c9b      	lsrs	r3, r3, #18
 8000876:	3b01      	subs	r3, #1
 8000878:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800087a:	4b13      	ldr	r3, [pc, #76]	@ (80008c8 <HAL_InitTick+0xd0>)
 800087c:	4a13      	ldr	r2, [pc, #76]	@ (80008cc <HAL_InitTick+0xd4>)
 800087e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000880:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <HAL_InitTick+0xd0>)
 8000882:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000886:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000888:	4a0f      	ldr	r2, [pc, #60]	@ (80008c8 <HAL_InitTick+0xd0>)
 800088a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800088c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800088e:	4b0e      	ldr	r3, [pc, #56]	@ (80008c8 <HAL_InitTick+0xd0>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000894:	4b0c      	ldr	r3, [pc, #48]	@ (80008c8 <HAL_InitTick+0xd0>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800089a:	480b      	ldr	r0, [pc, #44]	@ (80008c8 <HAL_InitTick+0xd0>)
 800089c:	f003 fe24 	bl	80044e8 <HAL_TIM_Base_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d104      	bne.n	80008b0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80008a6:	4808      	ldr	r0, [pc, #32]	@ (80008c8 <HAL_InitTick+0xd0>)
 80008a8:	f003 fe80 	bl	80045ac <HAL_TIM_Base_Start_IT>
 80008ac:	4603      	mov	r3, r0
 80008ae:	e000      	b.n	80008b2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80008b0:	2301      	movs	r3, #1
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3740      	adds	r7, #64	@ 0x40
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	24000008 	.word	0x24000008
 80008c0:	58024400 	.word	0x58024400
 80008c4:	431bde83 	.word	0x431bde83
 80008c8:	2400010c 	.word	0x2400010c
 80008cc:	40001000 	.word	0x40001000

080008d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <NMI_Handler+0x4>

080008d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <HardFault_Handler+0x4>

080008e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <MemManage_Handler+0x4>

080008e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <BusFault_Handler+0x4>

080008f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <UsageFault_Handler+0x4>

080008f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
	...

08000908 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800090c:	4802      	ldr	r0, [pc, #8]	@ (8000918 <TIM6_DAC_IRQHandler+0x10>)
 800090e:	f003 fed3 	bl	80046b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	2400010c 	.word	0x2400010c

0800091c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000920:	4802      	ldr	r0, [pc, #8]	@ (800092c <ETH_IRQHandler+0x10>)
 8000922:	f001 fabf 	bl	8001ea4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	240002cc 	.word	0x240002cc

08000930 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  return 1;
 8000934:	2301      	movs	r3, #1
}
 8000936:	4618      	mov	r0, r3
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <_kill>:

int _kill(int pid, int sig)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800094a:	4b05      	ldr	r3, [pc, #20]	@ (8000960 <_kill+0x20>)
 800094c:	2216      	movs	r2, #22
 800094e:	601a      	str	r2, [r3, #0]
  return -1;
 8000950:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000954:	4618      	mov	r0, r3
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	24008198 	.word	0x24008198

08000964 <_exit>:

void _exit (int status)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800096c:	f04f 31ff 	mov.w	r1, #4294967295
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f7ff ffe5 	bl	8000940 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000976:	bf00      	nop
 8000978:	e7fd      	b.n	8000976 <_exit+0x12>

0800097a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b086      	sub	sp, #24
 800097e:	af00      	add	r7, sp, #0
 8000980:	60f8      	str	r0, [r7, #12]
 8000982:	60b9      	str	r1, [r7, #8]
 8000984:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]
 800098a:	e00a      	b.n	80009a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800098c:	f3af 8000 	nop.w
 8000990:	4601      	mov	r1, r0
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	1c5a      	adds	r2, r3, #1
 8000996:	60ba      	str	r2, [r7, #8]
 8000998:	b2ca      	uxtb	r2, r1
 800099a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	3301      	adds	r3, #1
 80009a0:	617b      	str	r3, [r7, #20]
 80009a2:	697a      	ldr	r2, [r7, #20]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	429a      	cmp	r2, r3
 80009a8:	dbf0      	blt.n	800098c <_read+0x12>
  }

  return len;
 80009aa:	687b      	ldr	r3, [r7, #4]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3718      	adds	r7, #24
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	e009      	b.n	80009da <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	1c5a      	adds	r2, r3, #1
 80009ca:	60ba      	str	r2, [r7, #8]
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	3301      	adds	r3, #1
 80009d8:	617b      	str	r3, [r7, #20]
 80009da:	697a      	ldr	r2, [r7, #20]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	429a      	cmp	r2, r3
 80009e0:	dbf1      	blt.n	80009c6 <_write+0x12>
  }
  return len;
 80009e2:	687b      	ldr	r3, [r7, #4]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3718      	adds	r7, #24
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <_close>:

int _close(int file)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a14:	605a      	str	r2, [r3, #4]
  return 0;
 8000a16:	2300      	movs	r3, #0
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <_isatty>:

int _isatty(int file)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a2c:	2301      	movs	r3, #1
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr

08000a3a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	b085      	sub	sp, #20
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	60f8      	str	r0, [r7, #12]
 8000a42:	60b9      	str	r1, [r7, #8]
 8000a44:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a46:	2300      	movs	r3, #0
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3714      	adds	r7, #20
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b087      	sub	sp, #28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a5c:	4a14      	ldr	r2, [pc, #80]	@ (8000ab0 <_sbrk+0x5c>)
 8000a5e:	4b15      	ldr	r3, [pc, #84]	@ (8000ab4 <_sbrk+0x60>)
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a68:	4b13      	ldr	r3, [pc, #76]	@ (8000ab8 <_sbrk+0x64>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d102      	bne.n	8000a76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a70:	4b11      	ldr	r3, [pc, #68]	@ (8000ab8 <_sbrk+0x64>)
 8000a72:	4a12      	ldr	r2, [pc, #72]	@ (8000abc <_sbrk+0x68>)
 8000a74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a76:	4b10      	ldr	r3, [pc, #64]	@ (8000ab8 <_sbrk+0x64>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d205      	bcs.n	8000a90 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000a84:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac0 <_sbrk+0x6c>)
 8000a86:	220c      	movs	r2, #12
 8000a88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8e:	e009      	b.n	8000aa4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a90:	4b09      	ldr	r3, [pc, #36]	@ (8000ab8 <_sbrk+0x64>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a96:	4b08      	ldr	r3, [pc, #32]	@ (8000ab8 <_sbrk+0x64>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	4a06      	ldr	r2, [pc, #24]	@ (8000ab8 <_sbrk+0x64>)
 8000aa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	371c      	adds	r7, #28
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	24050000 	.word	0x24050000
 8000ab4:	00000400 	.word	0x00000400
 8000ab8:	24000158 	.word	0x24000158
 8000abc:	240081a8 	.word	0x240081a8
 8000ac0:	24008198 	.word	0x24008198

08000ac4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ac8:	4b32      	ldr	r3, [pc, #200]	@ (8000b94 <SystemInit+0xd0>)
 8000aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ace:	4a31      	ldr	r2, [pc, #196]	@ (8000b94 <SystemInit+0xd0>)
 8000ad0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ad4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ad8:	4b2f      	ldr	r3, [pc, #188]	@ (8000b98 <SystemInit+0xd4>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f003 030f 	and.w	r3, r3, #15
 8000ae0:	2b06      	cmp	r3, #6
 8000ae2:	d807      	bhi.n	8000af4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ae4:	4b2c      	ldr	r3, [pc, #176]	@ (8000b98 <SystemInit+0xd4>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f023 030f 	bic.w	r3, r3, #15
 8000aec:	4a2a      	ldr	r2, [pc, #168]	@ (8000b98 <SystemInit+0xd4>)
 8000aee:	f043 0307 	orr.w	r3, r3, #7
 8000af2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000af4:	4b29      	ldr	r3, [pc, #164]	@ (8000b9c <SystemInit+0xd8>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a28      	ldr	r2, [pc, #160]	@ (8000b9c <SystemInit+0xd8>)
 8000afa:	f043 0301 	orr.w	r3, r3, #1
 8000afe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b00:	4b26      	ldr	r3, [pc, #152]	@ (8000b9c <SystemInit+0xd8>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b06:	4b25      	ldr	r3, [pc, #148]	@ (8000b9c <SystemInit+0xd8>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	4924      	ldr	r1, [pc, #144]	@ (8000b9c <SystemInit+0xd8>)
 8000b0c:	4b24      	ldr	r3, [pc, #144]	@ (8000ba0 <SystemInit+0xdc>)
 8000b0e:	4013      	ands	r3, r2
 8000b10:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b12:	4b21      	ldr	r3, [pc, #132]	@ (8000b98 <SystemInit+0xd4>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f003 0308 	and.w	r3, r3, #8
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d007      	beq.n	8000b2e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000b98 <SystemInit+0xd4>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f023 030f 	bic.w	r3, r3, #15
 8000b26:	4a1c      	ldr	r2, [pc, #112]	@ (8000b98 <SystemInit+0xd4>)
 8000b28:	f043 0307 	orr.w	r3, r3, #7
 8000b2c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b2e:	4b1b      	ldr	r3, [pc, #108]	@ (8000b9c <SystemInit+0xd8>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b34:	4b19      	ldr	r3, [pc, #100]	@ (8000b9c <SystemInit+0xd8>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b3a:	4b18      	ldr	r3, [pc, #96]	@ (8000b9c <SystemInit+0xd8>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b40:	4b16      	ldr	r3, [pc, #88]	@ (8000b9c <SystemInit+0xd8>)
 8000b42:	4a18      	ldr	r2, [pc, #96]	@ (8000ba4 <SystemInit+0xe0>)
 8000b44:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b46:	4b15      	ldr	r3, [pc, #84]	@ (8000b9c <SystemInit+0xd8>)
 8000b48:	4a17      	ldr	r2, [pc, #92]	@ (8000ba8 <SystemInit+0xe4>)
 8000b4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b4c:	4b13      	ldr	r3, [pc, #76]	@ (8000b9c <SystemInit+0xd8>)
 8000b4e:	4a17      	ldr	r2, [pc, #92]	@ (8000bac <SystemInit+0xe8>)
 8000b50:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b52:	4b12      	ldr	r3, [pc, #72]	@ (8000b9c <SystemInit+0xd8>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b58:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <SystemInit+0xd8>)
 8000b5a:	4a14      	ldr	r2, [pc, #80]	@ (8000bac <SystemInit+0xe8>)
 8000b5c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b9c <SystemInit+0xd8>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b64:	4b0d      	ldr	r3, [pc, #52]	@ (8000b9c <SystemInit+0xd8>)
 8000b66:	4a11      	ldr	r2, [pc, #68]	@ (8000bac <SystemInit+0xe8>)
 8000b68:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b9c <SystemInit+0xd8>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b70:	4b0a      	ldr	r3, [pc, #40]	@ (8000b9c <SystemInit+0xd8>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a09      	ldr	r2, [pc, #36]	@ (8000b9c <SystemInit+0xd8>)
 8000b76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b7a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b7c:	4b07      	ldr	r3, [pc, #28]	@ (8000b9c <SystemInit+0xd8>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b82:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb0 <SystemInit+0xec>)
 8000b84:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000b88:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000ed00 	.word	0xe000ed00
 8000b98:	52002000 	.word	0x52002000
 8000b9c:	58024400 	.word	0x58024400
 8000ba0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ba4:	02020200 	.word	0x02020200
 8000ba8:	01ff0000 	.word	0x01ff0000
 8000bac:	01010280 	.word	0x01010280
 8000bb0:	52004000 	.word	0x52004000

08000bb4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	@ (8000be0 <ExitRun0Mode+0x2c>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	4a08      	ldr	r2, [pc, #32]	@ (8000be0 <ExitRun0Mode+0x2c>)
 8000bbe:	f043 0302 	orr.w	r3, r3, #2
 8000bc2:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000bc4:	bf00      	nop
 8000bc6:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <ExitRun0Mode+0x2c>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d0f9      	beq.n	8000bc6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000bd2:	bf00      	nop
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	58024800 	.word	0x58024800

08000be4 <tcp_thread>:
//////////////////////////Function


//a task for init server and wait for massage
static void tcp_thread(void *arg)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

    err_t err, accept_err;

    conn = netconn_new(NETCONN_TCP);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2100      	movs	r1, #0
 8000bf0:	2010      	movs	r0, #16
 8000bf2:	f008 f84f 	bl	8008c94 <netconn_new_with_proto_and_callback>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	4a40      	ldr	r2, [pc, #256]	@ (8000cfc <tcp_thread+0x118>)
 8000bfa:	6013      	str	r3, [r2, #0]
    if (conn != NULL)
 8000bfc:	4b3f      	ldr	r3, [pc, #252]	@ (8000cfc <tcp_thread+0x118>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d076      	beq.n	8000cf2 <tcp_thread+0x10e>
    {
        err = netconn_bind(conn, IP_ADDR_ANY, modbus.u16Port);
 8000c04:	4b3d      	ldr	r3, [pc, #244]	@ (8000cfc <tcp_thread+0x118>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a3d      	ldr	r2, [pc, #244]	@ (8000d00 <tcp_thread+0x11c>)
 8000c0a:	88d2      	ldrh	r2, [r2, #6]
 8000c0c:	493d      	ldr	r1, [pc, #244]	@ (8000d04 <tcp_thread+0x120>)
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f008 f8fc 	bl	8008e0c <netconn_bind>
 8000c14:	4603      	mov	r3, r0
 8000c16:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_OK)
 8000c18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d160      	bne.n	8000ce2 <tcp_thread+0xfe>
        {
            netconn_listen(conn);
 8000c20:	4b36      	ldr	r3, [pc, #216]	@ (8000cfc <tcp_thread+0x118>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	21ff      	movs	r1, #255	@ 0xff
 8000c26:	4618      	mov	r0, r3
 8000c28:	f008 f928 	bl	8008e7c <netconn_listen_with_backlog>

            while (1)
            {

                accept_err = netconn_accept(conn, &clientconn);
 8000c2c:	4b33      	ldr	r3, [pc, #204]	@ (8000cfc <tcp_thread+0x118>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4935      	ldr	r1, [pc, #212]	@ (8000d08 <tcp_thread+0x124>)
 8000c32:	4618      	mov	r0, r3
 8000c34:	f008 f94e 	bl	8008ed4 <netconn_accept>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	73bb      	strb	r3, [r7, #14]
                if (accept_err == ERR_OK && clientconn != NULL)
 8000c3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d1f3      	bne.n	8000c2c <tcp_thread+0x48>
 8000c44:	4b30      	ldr	r3, [pc, #192]	@ (8000d08 <tcp_thread+0x124>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d0ef      	beq.n	8000c2c <tcp_thread+0x48>
                {

                    while (netconn_recv(clientconn, &buf) == ERR_OK)
 8000c4c:	e035      	b.n	8000cba <tcp_thread+0xd6>
                    {
                        addr = netbuf_fromaddr(buf);
 8000c4e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d0c <tcp_thread+0x128>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	3308      	adds	r3, #8
 8000c54:	4a2e      	ldr	r2, [pc, #184]	@ (8000d10 <tcp_thread+0x12c>)
 8000c56:	6013      	str	r3, [r2, #0]
                        port = netbuf_fromport(buf);
 8000c58:	4b2c      	ldr	r3, [pc, #176]	@ (8000d0c <tcp_thread+0x128>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	899a      	ldrh	r2, [r3, #12]
 8000c5e:	4b2d      	ldr	r3, [pc, #180]	@ (8000d14 <tcp_thread+0x130>)
 8000c60:	801a      	strh	r2, [r3, #0]

                        do
                        {
                        	memset (msgc, '\0', sizeof(smsgc));  // clear the buffer
 8000c62:	2264      	movs	r2, #100	@ 0x64
 8000c64:	2100      	movs	r1, #0
 8000c66:	482c      	ldr	r0, [pc, #176]	@ (8000d18 <tcp_thread+0x134>)
 8000c68:	f015 fd67 	bl	801673a <memset>
                        	memset (smsgc, '\0', sizeof(smsgc));  // clear the buffer
 8000c6c:	2264      	movs	r2, #100	@ 0x64
 8000c6e:	2100      	movs	r1, #0
 8000c70:	482a      	ldr	r0, [pc, #168]	@ (8000d1c <tcp_thread+0x138>)
 8000c72:	f015 fd62 	bl	801673a <memset>

                            copyString(msgc, (char *)buf->p->payload, buf->p->len > sizeof(msgc) ? sizeof(msgc) : buf->p->len);
 8000c76:	4b25      	ldr	r3, [pc, #148]	@ (8000d0c <tcp_thread+0x128>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	6859      	ldr	r1, [r3, #4]
 8000c7e:	4b23      	ldr	r3, [pc, #140]	@ (8000d0c <tcp_thread+0x128>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	895b      	ldrh	r3, [r3, #10]
 8000c86:	2b64      	cmp	r3, #100	@ 0x64
 8000c88:	bf28      	it	cs
 8000c8a:	2364      	movcs	r3, #100	@ 0x64
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	461a      	mov	r2, r3
 8000c90:	4821      	ldr	r0, [pc, #132]	@ (8000d18 <tcp_thread+0x134>)
 8000c92:	f000 f8b3 	bl	8000dfc <copyString>

                            modbus_parse(clientconn);
 8000c96:	4b1c      	ldr	r3, [pc, #112]	@ (8000d08 <tcp_thread+0x124>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 f840 	bl	8000d20 <modbus_parse>
                        }
                        while (netbuf_next(buf) > 0);
 8000ca0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d0c <tcp_thread+0x128>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f00a f919 	bl	800aedc <netbuf_next>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	dcd8      	bgt.n	8000c62 <tcp_thread+0x7e>

                        netbuf_delete(buf);
 8000cb0:	4b16      	ldr	r3, [pc, #88]	@ (8000d0c <tcp_thread+0x128>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f00a f8f1 	bl	800ae9c <netbuf_delete>
                    while (netconn_recv(clientconn, &buf) == ERR_OK)
 8000cba:	4b13      	ldr	r3, [pc, #76]	@ (8000d08 <tcp_thread+0x124>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4913      	ldr	r1, [pc, #76]	@ (8000d0c <tcp_thread+0x128>)
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f008 fb2b 	bl	800931c <netconn_recv>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d0c0      	beq.n	8000c4e <tcp_thread+0x6a>
                    }

                    netconn_close(clientconn);
 8000ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8000d08 <tcp_thread+0x124>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f008 fcb3 	bl	800963c <netconn_close>
                    netconn_delete(clientconn);
 8000cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d08 <tcp_thread+0x124>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f008 f87a 	bl	8008dd4 <netconn_delete>
                accept_err = netconn_accept(conn, &clientconn);
 8000ce0:	e7a4      	b.n	8000c2c <tcp_thread+0x48>
                }
            }
        }
        else
        {
            netconn_delete(conn);
 8000ce2:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <tcp_thread+0x118>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f008 f874 	bl	8008dd4 <netconn_delete>
            conn = NULL;
 8000cec:	4b03      	ldr	r3, [pc, #12]	@ (8000cfc <tcp_thread+0x118>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
        }
    }
}
 8000cf2:	bf00      	nop
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	2400015c 	.word	0x2400015c
 8000d00:	24000234 	.word	0x24000234
 8000d04:	0801ac00 	.word	0x0801ac00
 8000d08:	24000244 	.word	0x24000244
 8000d0c:	24000160 	.word	0x24000160
 8000d10:	24000164 	.word	0x24000164
 8000d14:	24000168 	.word	0x24000168
 8000d18:	2400016c 	.word	0x2400016c
 8000d1c:	240001d0 	.word	0x240001d0

08000d20 <modbus_parse>:



//parse data from master(client)
static void modbus_parse(struct netconn *client)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af02      	add	r7, sp, #8
 8000d26:	6078      	str	r0, [r7, #4]
    if (msgc[2] == 0 && msgc[3] == 0 && msgc[6] == modbus.u8slaveID)
 8000d28:	4b22      	ldr	r3, [pc, #136]	@ (8000db4 <modbus_parse+0x94>)
 8000d2a:	789b      	ldrb	r3, [r3, #2]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d13d      	bne.n	8000dac <modbus_parse+0x8c>
 8000d30:	4b20      	ldr	r3, [pc, #128]	@ (8000db4 <modbus_parse+0x94>)
 8000d32:	78db      	ldrb	r3, [r3, #3]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d139      	bne.n	8000dac <modbus_parse+0x8c>
 8000d38:	4b1e      	ldr	r3, [pc, #120]	@ (8000db4 <modbus_parse+0x94>)
 8000d3a:	799a      	ldrb	r2, [r3, #6]
 8000d3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000db8 <modbus_parse+0x98>)
 8000d3e:	7a1b      	ldrb	r3, [r3, #8]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d133      	bne.n	8000dac <modbus_parse+0x8c>
    {
        for (uint8_t i = 0; i < 4; i++)
 8000d44:	2300      	movs	r3, #0
 8000d46:	73fb      	strb	r3, [r7, #15]
 8000d48:	e008      	b.n	8000d5c <modbus_parse+0x3c>
        {
            smsgc[i] = msgc[i];
 8000d4a:	7bfa      	ldrb	r2, [r7, #15]
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
 8000d4e:	4919      	ldr	r1, [pc, #100]	@ (8000db4 <modbus_parse+0x94>)
 8000d50:	5c89      	ldrb	r1, [r1, r2]
 8000d52:	4a1a      	ldr	r2, [pc, #104]	@ (8000dbc <modbus_parse+0x9c>)
 8000d54:	54d1      	strb	r1, [r2, r3]
        for (uint8_t i = 0; i < 4; i++)
 8000d56:	7bfb      	ldrb	r3, [r7, #15]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	73fb      	strb	r3, [r7, #15]
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
 8000d5e:	2b03      	cmp	r3, #3
 8000d60:	d9f3      	bls.n	8000d4a <modbus_parse+0x2a>
        }

        switch (msgc[7])
 8000d62:	4b14      	ldr	r3, [pc, #80]	@ (8000db4 <modbus_parse+0x94>)
 8000d64:	79db      	ldrb	r3, [r3, #7]
 8000d66:	2b10      	cmp	r3, #16
 8000d68:	d00f      	beq.n	8000d8a <modbus_parse+0x6a>
 8000d6a:	2b10      	cmp	r3, #16
 8000d6c:	dc10      	bgt.n	8000d90 <modbus_parse+0x70>
 8000d6e:	2b04      	cmp	r3, #4
 8000d70:	dc02      	bgt.n	8000d78 <modbus_parse+0x58>
 8000d72:	2b03      	cmp	r3, #3
 8000d74:	da03      	bge.n	8000d7e <modbus_parse+0x5e>
 8000d76:	e00b      	b.n	8000d90 <modbus_parse+0x70>
 8000d78:	2b06      	cmp	r3, #6
 8000d7a:	d003      	beq.n	8000d84 <modbus_parse+0x64>
 8000d7c:	e008      	b.n	8000d90 <modbus_parse+0x70>
        {
            case MB_FC_READ_INPUT_REGISTER:
            case MB_FC_READ_REGISTERS:
                readInputRegs();
 8000d7e:	f000 f85d 	bl	8000e3c <readInputRegs>
                break;
 8000d82:	e009      	b.n	8000d98 <modbus_parse+0x78>

            case MB_FC_WRITE_REGISTER:
                writeInputReg();
 8000d84:	f000 f8fa 	bl	8000f7c <writeInputReg>
                break;
 8000d88:	e006      	b.n	8000d98 <modbus_parse+0x78>

            case MB_FC_WRITE_MULTIPLE_REGISTERS:
                writeInputMultiRegs();
 8000d8a:	f000 f92d 	bl	8000fe8 <writeInputMultiRegs>
                break;
 8000d8e:	e003      	b.n	8000d98 <modbus_parse+0x78>

            default:
                eror_handler(ERR_Illegal_Function);
 8000d90:	2001      	movs	r0, #1
 8000d92:	f000 f8c9 	bl	8000f28 <eror_handler>
                break;
 8000d96:	bf00      	nop
        }

        netconn_write(client, smsgc, length_send, NETCONN_COPY);
 8000d98:	4b09      	ldr	r3, [pc, #36]	@ (8000dc0 <modbus_parse+0xa0>)
 8000d9a:	881b      	ldrh	r3, [r3, #0]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	2300      	movs	r3, #0
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	2301      	movs	r3, #1
 8000da4:	4905      	ldr	r1, [pc, #20]	@ (8000dbc <modbus_parse+0x9c>)
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f008 fb32 	bl	8009410 <netconn_write_partly>
    }
}
 8000dac:	bf00      	nop
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	2400016c 	.word	0x2400016c
 8000db8:	24000234 	.word	0x24000234
 8000dbc:	240001d0 	.word	0x240001d0
 8000dc0:	24000240 	.word	0x24000240

08000dc4 <tcpserver_init>:


//make tcp task
void tcpserver_init(modbus_t* usermodbus)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af02      	add	r7, sp, #8
 8000dca:	6078      	str	r0, [r7, #4]
    modbus = *usermodbus;
 8000dcc:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <tcpserver_init+0x2c>)
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000dd2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    sys_thread_new("tcp_thread", tcp_thread, NULL, DEFAULT_THREAD_STACKSIZE, osPriorityNormal);
 8000dd6:	2318      	movs	r3, #24
 8000dd8:	9300      	str	r3, [sp, #0]
 8000dda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dde:	2200      	movs	r2, #0
 8000de0:	4904      	ldr	r1, [pc, #16]	@ (8000df4 <tcpserver_init+0x30>)
 8000de2:	4805      	ldr	r0, [pc, #20]	@ (8000df8 <tcpserver_init+0x34>)
 8000de4:	f015 fb06 	bl	80163f4 <sys_thread_new>
}
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	24000234 	.word	0x24000234
 8000df4:	08000be5 	.word	0x08000be5
 8000df8:	08017554 	.word	0x08017554

08000dfc <copyString>:


static void copyString(char* dest, char* src, unsigned num)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b087      	sub	sp, #28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
    for (unsigned i = 0; i < num; ++i)
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
 8000e0c:	e00a      	b.n	8000e24 <copyString+0x28>
    {
        dest[i] = src[i];
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	441a      	add	r2, r3
 8000e14:	68f9      	ldr	r1, [r7, #12]
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	440b      	add	r3, r1
 8000e1a:	7812      	ldrb	r2, [r2, #0]
 8000e1c:	701a      	strb	r2, [r3, #0]
    for (unsigned i = 0; i < num; ++i)
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	3301      	adds	r3, #1
 8000e22:	617b      	str	r3, [r7, #20]
 8000e24:	697a      	ldr	r2, [r7, #20]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d3f0      	bcc.n	8000e0e <copyString+0x12>
    }
}
 8000e2c:	bf00      	nop
 8000e2e:	bf00      	nop
 8000e30:	371c      	adds	r7, #28
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
	...

08000e3c <readInputRegs>:

//0x03 and 0x04 Function code
static void readInputRegs()
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
    uint16_t count = (msgc[10] << 8) + msgc[11];
 8000e42:	4b35      	ldr	r3, [pc, #212]	@ (8000f18 <readInputRegs+0xdc>)
 8000e44:	7a9b      	ldrb	r3, [r3, #10]
 8000e46:	021b      	lsls	r3, r3, #8
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	4a33      	ldr	r2, [pc, #204]	@ (8000f18 <readInputRegs+0xdc>)
 8000e4c:	7ad2      	ldrb	r2, [r2, #11]
 8000e4e:	4413      	add	r3, r2
 8000e50:	80bb      	strh	r3, [r7, #4]
    uint16_t start_address = (msgc[8] << 8) + msgc[9];
 8000e52:	4b31      	ldr	r3, [pc, #196]	@ (8000f18 <readInputRegs+0xdc>)
 8000e54:	7a1b      	ldrb	r3, [r3, #8]
 8000e56:	021b      	lsls	r3, r3, #8
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	4a2f      	ldr	r2, [pc, #188]	@ (8000f18 <readInputRegs+0xdc>)
 8000e5c:	7a52      	ldrb	r2, [r2, #9]
 8000e5e:	4413      	add	r3, r2
 8000e60:	807b      	strh	r3, [r7, #2]

    if (start_address + count > modbus.u16regsize)
 8000e62:	887a      	ldrh	r2, [r7, #2]
 8000e64:	88bb      	ldrh	r3, [r7, #4]
 8000e66:	4413      	add	r3, r2
 8000e68:	4a2c      	ldr	r2, [pc, #176]	@ (8000f1c <readInputRegs+0xe0>)
 8000e6a:	8892      	ldrh	r2, [r2, #4]
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	dd03      	ble.n	8000e78 <readInputRegs+0x3c>
    {
        eror_handler(ERR_Illegal_Data_Address);
 8000e70:	2002      	movs	r0, #2
 8000e72:	f000 f859 	bl	8000f28 <eror_handler>
        return;
 8000e76:	e04b      	b.n	8000f10 <readInputRegs+0xd4>
    }

    smsgc[4] = ((3 + count * 2) >> 8);
 8000e78:	88bb      	ldrh	r3, [r7, #4]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	3303      	adds	r3, #3
 8000e7e:	121b      	asrs	r3, r3, #8
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	4b27      	ldr	r3, [pc, #156]	@ (8000f20 <readInputRegs+0xe4>)
 8000e84:	711a      	strb	r2, [r3, #4]
    smsgc[5] = ((3 + count * 2) & 0xFF);
 8000e86:	88bb      	ldrh	r3, [r7, #4]
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	3303      	adds	r3, #3
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4b23      	ldr	r3, [pc, #140]	@ (8000f20 <readInputRegs+0xe4>)
 8000e94:	715a      	strb	r2, [r3, #5]
    smsgc[6] = modbus.u8slaveID;
 8000e96:	4b21      	ldr	r3, [pc, #132]	@ (8000f1c <readInputRegs+0xe0>)
 8000e98:	7a1a      	ldrb	r2, [r3, #8]
 8000e9a:	4b21      	ldr	r3, [pc, #132]	@ (8000f20 <readInputRegs+0xe4>)
 8000e9c:	719a      	strb	r2, [r3, #6]
    smsgc[7] = msgc[7];
 8000e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8000f18 <readInputRegs+0xdc>)
 8000ea0:	79da      	ldrb	r2, [r3, #7]
 8000ea2:	4b1f      	ldr	r3, [pc, #124]	@ (8000f20 <readInputRegs+0xe4>)
 8000ea4:	71da      	strb	r2, [r3, #7]
    smsgc[8] = count * 2;
 8000ea6:	88bb      	ldrh	r3, [r7, #4]
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4b1c      	ldr	r3, [pc, #112]	@ (8000f20 <readInputRegs+0xe4>)
 8000eb0:	721a      	strb	r2, [r3, #8]

    for (uint8_t i = 0; i < count; i++)
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	71fb      	strb	r3, [r7, #7]
 8000eb6:	e020      	b.n	8000efa <readInputRegs+0xbe>
    {
        smsgc[9 + i * 2] = modbus.u16reg[start_address + i] >> 8;
 8000eb8:	4b18      	ldr	r3, [pc, #96]	@ (8000f1c <readInputRegs+0xe0>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	8879      	ldrh	r1, [r7, #2]
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	440b      	add	r3, r1
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	4413      	add	r3, r2
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	0a1b      	lsrs	r3, r3, #8
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	3309      	adds	r3, #9
 8000ed2:	b2d1      	uxtb	r1, r2
 8000ed4:	4a12      	ldr	r2, [pc, #72]	@ (8000f20 <readInputRegs+0xe4>)
 8000ed6:	54d1      	strb	r1, [r2, r3]
        smsgc[10 + i * 2] = modbus.u16reg[start_address + i] & 0xFF;
 8000ed8:	4b10      	ldr	r3, [pc, #64]	@ (8000f1c <readInputRegs+0xe0>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	8879      	ldrh	r1, [r7, #2]
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	440b      	add	r3, r1
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	4413      	add	r3, r2
 8000ee6:	881a      	ldrh	r2, [r3, #0]
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	3305      	adds	r3, #5
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	b2d1      	uxtb	r1, r2
 8000ef0:	4a0b      	ldr	r2, [pc, #44]	@ (8000f20 <readInputRegs+0xe4>)
 8000ef2:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < count; i++)
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	71fb      	strb	r3, [r7, #7]
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	88ba      	ldrh	r2, [r7, #4]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d8d9      	bhi.n	8000eb8 <readInputRegs+0x7c>
    }

    length_send = 9 + smsgc[8];
 8000f04:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <readInputRegs+0xe4>)
 8000f06:	7a1b      	ldrb	r3, [r3, #8]
 8000f08:	3309      	adds	r3, #9
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	4b05      	ldr	r3, [pc, #20]	@ (8000f24 <readInputRegs+0xe8>)
 8000f0e:	801a      	strh	r2, [r3, #0]
}
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	2400016c 	.word	0x2400016c
 8000f1c:	24000234 	.word	0x24000234
 8000f20:	240001d0 	.word	0x240001d0
 8000f24:	24000240 	.word	0x24000240

08000f28 <eror_handler>:

//error response
static void eror_handler(uint8_t Exception_code)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
    smsgc[4] = 0;
 8000f32:	4b0e      	ldr	r3, [pc, #56]	@ (8000f6c <eror_handler+0x44>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	711a      	strb	r2, [r3, #4]
    smsgc[5] = 3;
 8000f38:	4b0c      	ldr	r3, [pc, #48]	@ (8000f6c <eror_handler+0x44>)
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	715a      	strb	r2, [r3, #5]
    smsgc[6] = modbus.u8slaveID;
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f70 <eror_handler+0x48>)
 8000f40:	7a1a      	ldrb	r2, [r3, #8]
 8000f42:	4b0a      	ldr	r3, [pc, #40]	@ (8000f6c <eror_handler+0x44>)
 8000f44:	719a      	strb	r2, [r3, #6]
    smsgc[7] = 0x80 + msgc[7];
 8000f46:	4b0b      	ldr	r3, [pc, #44]	@ (8000f74 <eror_handler+0x4c>)
 8000f48:	79db      	ldrb	r3, [r3, #7]
 8000f4a:	3b80      	subs	r3, #128	@ 0x80
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	4b07      	ldr	r3, [pc, #28]	@ (8000f6c <eror_handler+0x44>)
 8000f50:	71da      	strb	r2, [r3, #7]
    smsgc[8] = Exception_code;
 8000f52:	4a06      	ldr	r2, [pc, #24]	@ (8000f6c <eror_handler+0x44>)
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	7213      	strb	r3, [r2, #8]
    length_send = 9;
 8000f58:	4b07      	ldr	r3, [pc, #28]	@ (8000f78 <eror_handler+0x50>)
 8000f5a:	2209      	movs	r2, #9
 8000f5c:	801a      	strh	r2, [r3, #0]
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	240001d0 	.word	0x240001d0
 8000f70:	24000234 	.word	0x24000234
 8000f74:	2400016c 	.word	0x2400016c
 8000f78:	24000240 	.word	0x24000240

08000f7c <writeInputReg>:


//0x06 Function code
static void writeInputReg()
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
    uint16_t start_address = (msgc[8] << 8) + msgc[9];
 8000f82:	4b15      	ldr	r3, [pc, #84]	@ (8000fd8 <writeInputReg+0x5c>)
 8000f84:	7a1b      	ldrb	r3, [r3, #8]
 8000f86:	021b      	lsls	r3, r3, #8
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	4a13      	ldr	r2, [pc, #76]	@ (8000fd8 <writeInputReg+0x5c>)
 8000f8c:	7a52      	ldrb	r2, [r2, #9]
 8000f8e:	4413      	add	r3, r2
 8000f90:	80fb      	strh	r3, [r7, #6]
    if (start_address >= modbus.u16regsize)
 8000f92:	4b12      	ldr	r3, [pc, #72]	@ (8000fdc <writeInputReg+0x60>)
 8000f94:	889b      	ldrh	r3, [r3, #4]
 8000f96:	88fa      	ldrh	r2, [r7, #6]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d303      	bcc.n	8000fa4 <writeInputReg+0x28>
    {
        eror_handler(ERR_Illegal_Data_Address);
 8000f9c:	2002      	movs	r0, #2
 8000f9e:	f7ff ffc3 	bl	8000f28 <eror_handler>
        return;
 8000fa2:	e016      	b.n	8000fd2 <writeInputReg+0x56>
    }
    modbus.u16reg[start_address] = (msgc[10] << 8) + msgc[11];
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd8 <writeInputReg+0x5c>)
 8000fa6:	7a9b      	ldrb	r3, [r3, #10]
 8000fa8:	021b      	lsls	r3, r3, #8
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd8 <writeInputReg+0x5c>)
 8000fae:	7adb      	ldrb	r3, [r3, #11]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fdc <writeInputReg+0x60>)
 8000fb4:	6819      	ldr	r1, [r3, #0]
 8000fb6:	88fb      	ldrh	r3, [r7, #6]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	440b      	add	r3, r1
 8000fbc:	4402      	add	r2, r0
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	801a      	strh	r2, [r3, #0]
    copyString(smsgc, msgc, 12);
 8000fc2:	220c      	movs	r2, #12
 8000fc4:	4904      	ldr	r1, [pc, #16]	@ (8000fd8 <writeInputReg+0x5c>)
 8000fc6:	4806      	ldr	r0, [pc, #24]	@ (8000fe0 <writeInputReg+0x64>)
 8000fc8:	f7ff ff18 	bl	8000dfc <copyString>
    length_send = 12;
 8000fcc:	4b05      	ldr	r3, [pc, #20]	@ (8000fe4 <writeInputReg+0x68>)
 8000fce:	220c      	movs	r2, #12
 8000fd0:	801a      	strh	r2, [r3, #0]
}
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	2400016c 	.word	0x2400016c
 8000fdc:	24000234 	.word	0x24000234
 8000fe0:	240001d0 	.word	0x240001d0
 8000fe4:	24000240 	.word	0x24000240

08000fe8 <writeInputMultiRegs>:


//0x10 Function code
static void writeInputMultiRegs()
{
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
    uint16_t start_address = (msgc[8] << 8) + msgc[9];
 8000fee:	4b30      	ldr	r3, [pc, #192]	@ (80010b0 <writeInputMultiRegs+0xc8>)
 8000ff0:	7a1b      	ldrb	r3, [r3, #8]
 8000ff2:	021b      	lsls	r3, r3, #8
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	4a2e      	ldr	r2, [pc, #184]	@ (80010b0 <writeInputMultiRegs+0xc8>)
 8000ff8:	7a52      	ldrb	r2, [r2, #9]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	80bb      	strh	r3, [r7, #4]
    uint16_t count = (msgc[10] << 8) + msgc[11];
 8000ffe:	4b2c      	ldr	r3, [pc, #176]	@ (80010b0 <writeInputMultiRegs+0xc8>)
 8001000:	7a9b      	ldrb	r3, [r3, #10]
 8001002:	021b      	lsls	r3, r3, #8
 8001004:	b29b      	uxth	r3, r3
 8001006:	4a2a      	ldr	r2, [pc, #168]	@ (80010b0 <writeInputMultiRegs+0xc8>)
 8001008:	7ad2      	ldrb	r2, [r2, #11]
 800100a:	4413      	add	r3, r2
 800100c:	807b      	strh	r3, [r7, #2]

    if (start_address + count > modbus.u16regsize)
 800100e:	88ba      	ldrh	r2, [r7, #4]
 8001010:	887b      	ldrh	r3, [r7, #2]
 8001012:	4413      	add	r3, r2
 8001014:	4a27      	ldr	r2, [pc, #156]	@ (80010b4 <writeInputMultiRegs+0xcc>)
 8001016:	8892      	ldrh	r2, [r2, #4]
 8001018:	4293      	cmp	r3, r2
 800101a:	dd03      	ble.n	8001024 <writeInputMultiRegs+0x3c>
    {
        eror_handler(ERR_Illegal_Data_Address);
 800101c:	2002      	movs	r0, #2
 800101e:	f7ff ff83 	bl	8000f28 <eror_handler>
        return;
 8001022:	e042      	b.n	80010aa <writeInputMultiRegs+0xc2>
    }

    for (uint8_t i = 0; i < count; i++)
 8001024:	2300      	movs	r3, #0
 8001026:	71fb      	strb	r3, [r7, #7]
 8001028:	e019      	b.n	800105e <writeInputMultiRegs+0x76>
    {
        modbus.u16reg[start_address + i] = (msgc[13 + i * 2] << 8) + msgc[14 + i * 2];
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	330d      	adds	r3, #13
 8001030:	4a1f      	ldr	r2, [pc, #124]	@ (80010b0 <writeInputMultiRegs+0xc8>)
 8001032:	5cd3      	ldrb	r3, [r2, r3]
 8001034:	021b      	lsls	r3, r3, #8
 8001036:	b29a      	uxth	r2, r3
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	3307      	adds	r3, #7
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	491c      	ldr	r1, [pc, #112]	@ (80010b0 <writeInputMultiRegs+0xc8>)
 8001040:	5ccb      	ldrb	r3, [r1, r3]
 8001042:	461c      	mov	r4, r3
 8001044:	4b1b      	ldr	r3, [pc, #108]	@ (80010b4 <writeInputMultiRegs+0xcc>)
 8001046:	6819      	ldr	r1, [r3, #0]
 8001048:	88b8      	ldrh	r0, [r7, #4]
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	4403      	add	r3, r0
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	440b      	add	r3, r1
 8001052:	4422      	add	r2, r4
 8001054:	b292      	uxth	r2, r2
 8001056:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++)
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	3301      	adds	r3, #1
 800105c:	71fb      	strb	r3, [r7, #7]
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	b29b      	uxth	r3, r3
 8001062:	887a      	ldrh	r2, [r7, #2]
 8001064:	429a      	cmp	r2, r3
 8001066:	d8e0      	bhi.n	800102a <writeInputMultiRegs+0x42>
    }

    smsgc[4] = 0;
 8001068:	4b13      	ldr	r3, [pc, #76]	@ (80010b8 <writeInputMultiRegs+0xd0>)
 800106a:	2200      	movs	r2, #0
 800106c:	711a      	strb	r2, [r3, #4]
    smsgc[5] = 6;
 800106e:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <writeInputMultiRegs+0xd0>)
 8001070:	2206      	movs	r2, #6
 8001072:	715a      	strb	r2, [r3, #5]
    smsgc[6] = modbus.u8slaveID;
 8001074:	4b0f      	ldr	r3, [pc, #60]	@ (80010b4 <writeInputMultiRegs+0xcc>)
 8001076:	7a1a      	ldrb	r2, [r3, #8]
 8001078:	4b0f      	ldr	r3, [pc, #60]	@ (80010b8 <writeInputMultiRegs+0xd0>)
 800107a:	719a      	strb	r2, [r3, #6]
    smsgc[7] = msgc[7];
 800107c:	4b0c      	ldr	r3, [pc, #48]	@ (80010b0 <writeInputMultiRegs+0xc8>)
 800107e:	79da      	ldrb	r2, [r3, #7]
 8001080:	4b0d      	ldr	r3, [pc, #52]	@ (80010b8 <writeInputMultiRegs+0xd0>)
 8001082:	71da      	strb	r2, [r3, #7]
    smsgc[8] = msgc[8];
 8001084:	4b0a      	ldr	r3, [pc, #40]	@ (80010b0 <writeInputMultiRegs+0xc8>)
 8001086:	7a1a      	ldrb	r2, [r3, #8]
 8001088:	4b0b      	ldr	r3, [pc, #44]	@ (80010b8 <writeInputMultiRegs+0xd0>)
 800108a:	721a      	strb	r2, [r3, #8]
    smsgc[9] = msgc[9];
 800108c:	4b08      	ldr	r3, [pc, #32]	@ (80010b0 <writeInputMultiRegs+0xc8>)
 800108e:	7a5a      	ldrb	r2, [r3, #9]
 8001090:	4b09      	ldr	r3, [pc, #36]	@ (80010b8 <writeInputMultiRegs+0xd0>)
 8001092:	725a      	strb	r2, [r3, #9]
    smsgc[10] = msgc[10];
 8001094:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <writeInputMultiRegs+0xc8>)
 8001096:	7a9a      	ldrb	r2, [r3, #10]
 8001098:	4b07      	ldr	r3, [pc, #28]	@ (80010b8 <writeInputMultiRegs+0xd0>)
 800109a:	729a      	strb	r2, [r3, #10]
    smsgc[11] = msgc[11];
 800109c:	4b04      	ldr	r3, [pc, #16]	@ (80010b0 <writeInputMultiRegs+0xc8>)
 800109e:	7ada      	ldrb	r2, [r3, #11]
 80010a0:	4b05      	ldr	r3, [pc, #20]	@ (80010b8 <writeInputMultiRegs+0xd0>)
 80010a2:	72da      	strb	r2, [r3, #11]

    length_send = 12;
 80010a4:	4b05      	ldr	r3, [pc, #20]	@ (80010bc <writeInputMultiRegs+0xd4>)
 80010a6:	220c      	movs	r2, #12
 80010a8:	801a      	strh	r2, [r3, #0]
}
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd90      	pop	{r4, r7, pc}
 80010b0:	2400016c 	.word	0x2400016c
 80010b4:	24000234 	.word	0x24000234
 80010b8:	240001d0 	.word	0x240001d0
 80010bc:	24000240 	.word	0x24000240

080010c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010c0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80010fc <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80010c4:	f7ff fd76 	bl	8000bb4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010c8:	f7ff fcfc 	bl	8000ac4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010cc:	480c      	ldr	r0, [pc, #48]	@ (8001100 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010ce:	490d      	ldr	r1, [pc, #52]	@ (8001104 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001108 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d4:	e002      	b.n	80010dc <LoopCopyDataInit>

080010d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010da:	3304      	adds	r3, #4

080010dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e0:	d3f9      	bcc.n	80010d6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e2:	4a0a      	ldr	r2, [pc, #40]	@ (800110c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001110 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e8:	e001      	b.n	80010ee <LoopFillZerobss>

080010ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ec:	3204      	adds	r2, #4

080010ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f0:	d3fb      	bcc.n	80010ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010f2:	f015 fbc7 	bl	8016884 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010f6:	f7ff f95b 	bl	80003b0 <main>
  bx  lr
 80010fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010fc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001100:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001104:	24000090 	.word	0x24000090
  ldr r2, =_sidata
 8001108:	0801ad00 	.word	0x0801ad00
  ldr r2, =_sbss
 800110c:	24000090 	.word	0x24000090
  ldr r4, =_ebss
 8001110:	240081a8 	.word	0x240081a8

08001114 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001114:	e7fe      	b.n	8001114 <ADC3_IRQHandler>

08001116 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001116:	b480      	push	{r7}
 8001118:	b083      	sub	sp, #12
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
 800111e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d00b      	beq.n	800113e <LAN8742_RegisterBusIO+0x28>
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d007      	beq.n	800113e <LAN8742_RegisterBusIO+0x28>
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <LAN8742_RegisterBusIO+0x28>
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	691b      	ldr	r3, [r3, #16]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d102      	bne.n	8001144 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800113e:	f04f 33ff 	mov.w	r3, #4294967295
 8001142:	e014      	b.n	800116e <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685a      	ldr	r2, [r3, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	68da      	ldr	r2, [r3, #12]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	689a      	ldr	r2, [r3, #8]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	691a      	ldr	r2, [r3, #16]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800117a:	b580      	push	{r7, lr}
 800117c:	b086      	sub	sp, #24
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d139      	bne.n	800120a <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d002      	beq.n	80011a4 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2220      	movs	r2, #32
 80011a8:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
 80011ae:	e01c      	b.n	80011ea <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	695b      	ldr	r3, [r3, #20]
 80011b4:	f107 020c 	add.w	r2, r7, #12
 80011b8:	2112      	movs	r1, #18
 80011ba:	6978      	ldr	r0, [r7, #20]
 80011bc:	4798      	blx	r3
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	da03      	bge.n	80011cc <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80011c4:	f06f 0304 	mvn.w	r3, #4
 80011c8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80011ca:	e00b      	b.n	80011e4 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f003 031f 	and.w	r3, r3, #31
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d105      	bne.n	80011e4 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	697a      	ldr	r2, [r7, #20]
 80011dc:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
         break;
 80011e2:	e005      	b.n	80011f0 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	3301      	adds	r3, #1
 80011e8:	617b      	str	r3, [r7, #20]
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	2b1f      	cmp	r3, #31
 80011ee:	d9df      	bls.n	80011b0 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b1f      	cmp	r3, #31
 80011f6:	d902      	bls.n	80011fe <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80011f8:	f06f 0302 	mvn.w	r3, #2
 80011fc:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d102      	bne.n	800120a <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2201      	movs	r2, #1
 8001208:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 800120a:	693b      	ldr	r3, [r7, #16]
 }
 800120c:	4618      	mov	r0, r3
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	695b      	ldr	r3, [r3, #20]
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	6810      	ldr	r0, [r2, #0]
 8001228:	f107 020c 	add.w	r2, r7, #12
 800122c:	2101      	movs	r1, #1
 800122e:	4798      	blx	r3
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	da02      	bge.n	800123c <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001236:	f06f 0304 	mvn.w	r3, #4
 800123a:	e06e      	b.n	800131a <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	6810      	ldr	r0, [r2, #0]
 8001244:	f107 020c 	add.w	r2, r7, #12
 8001248:	2101      	movs	r1, #1
 800124a:	4798      	blx	r3
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	da02      	bge.n	8001258 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001252:	f06f 0304 	mvn.w	r3, #4
 8001256:	e060      	b.n	800131a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f003 0304 	and.w	r3, r3, #4
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001262:	2301      	movs	r3, #1
 8001264:	e059      	b.n	800131a <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	6810      	ldr	r0, [r2, #0]
 800126e:	f107 020c 	add.w	r2, r7, #12
 8001272:	2100      	movs	r1, #0
 8001274:	4798      	blx	r3
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	da02      	bge.n	8001282 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800127c:	f06f 0304 	mvn.w	r3, #4
 8001280:	e04b      	b.n	800131a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d11b      	bne.n	80012c4 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d006      	beq.n	80012a4 <LAN8742_GetLinkState+0x90>
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80012a0:	2302      	movs	r3, #2
 80012a2:	e03a      	b.n	800131a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e033      	b.n	800131a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80012bc:	2304      	movs	r3, #4
 80012be:	e02c      	b.n	800131a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80012c0:	2305      	movs	r3, #5
 80012c2:	e02a      	b.n	800131a <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	6810      	ldr	r0, [r2, #0]
 80012cc:	f107 020c 	add.w	r2, r7, #12
 80012d0:	211f      	movs	r1, #31
 80012d2:	4798      	blx	r3
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	da02      	bge.n	80012e0 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80012da:	f06f 0304 	mvn.w	r3, #4
 80012de:	e01c      	b.n	800131a <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80012ea:	2306      	movs	r3, #6
 80012ec:	e015      	b.n	800131a <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f003 031c 	and.w	r3, r3, #28
 80012f4:	2b18      	cmp	r3, #24
 80012f6:	d101      	bne.n	80012fc <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80012f8:	2302      	movs	r3, #2
 80012fa:	e00e      	b.n	800131a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f003 031c 	and.w	r3, r3, #28
 8001302:	2b08      	cmp	r3, #8
 8001304:	d101      	bne.n	800130a <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001306:	2303      	movs	r3, #3
 8001308:	e007      	b.n	800131a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	f003 031c 	and.w	r3, r3, #28
 8001310:	2b14      	cmp	r3, #20
 8001312:	d101      	bne.n	8001318 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001314:	2304      	movs	r3, #4
 8001316:	e000      	b.n	800131a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001318:	2305      	movs	r3, #5
    }
  }
}
 800131a:	4618      	mov	r0, r3
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800132a:	2003      	movs	r0, #3
 800132c:	f000 f93b 	bl	80015a6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001330:	f002 fed8 	bl	80040e4 <HAL_RCC_GetSysClockFreq>
 8001334:	4602      	mov	r2, r0
 8001336:	4b15      	ldr	r3, [pc, #84]	@ (800138c <HAL_Init+0x68>)
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	0a1b      	lsrs	r3, r3, #8
 800133c:	f003 030f 	and.w	r3, r3, #15
 8001340:	4913      	ldr	r1, [pc, #76]	@ (8001390 <HAL_Init+0x6c>)
 8001342:	5ccb      	ldrb	r3, [r1, r3]
 8001344:	f003 031f 	and.w	r3, r3, #31
 8001348:	fa22 f303 	lsr.w	r3, r2, r3
 800134c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800134e:	4b0f      	ldr	r3, [pc, #60]	@ (800138c <HAL_Init+0x68>)
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	4a0e      	ldr	r2, [pc, #56]	@ (8001390 <HAL_Init+0x6c>)
 8001358:	5cd3      	ldrb	r3, [r2, r3]
 800135a:	f003 031f 	and.w	r3, r3, #31
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	fa22 f303 	lsr.w	r3, r2, r3
 8001364:	4a0b      	ldr	r2, [pc, #44]	@ (8001394 <HAL_Init+0x70>)
 8001366:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001368:	4a0b      	ldr	r2, [pc, #44]	@ (8001398 <HAL_Init+0x74>)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800136e:	200f      	movs	r0, #15
 8001370:	f7ff fa42 	bl	80007f8 <HAL_InitTick>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e002      	b.n	8001384 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800137e:	f7ff fa1d 	bl	80007bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	58024400 	.word	0x58024400
 8001390:	0801aad0 	.word	0x0801aad0
 8001394:	24000004 	.word	0x24000004
 8001398:	24000000 	.word	0x24000000

0800139c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013a0:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <HAL_IncTick+0x20>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <HAL_IncTick+0x24>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4413      	add	r3, r2
 80013ac:	4a04      	ldr	r2, [pc, #16]	@ (80013c0 <HAL_IncTick+0x24>)
 80013ae:	6013      	str	r3, [r2, #0]
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	2400000c 	.word	0x2400000c
 80013c0:	24000248 	.word	0x24000248

080013c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  return uwTick;
 80013c8:	4b03      	ldr	r3, [pc, #12]	@ (80013d8 <HAL_GetTick+0x14>)
 80013ca:	681b      	ldr	r3, [r3, #0]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	24000248 	.word	0x24000248

080013dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013e4:	f7ff ffee 	bl	80013c4 <HAL_GetTick>
 80013e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f4:	d005      	beq.n	8001402 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001420 <HAL_Delay+0x44>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	461a      	mov	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	4413      	add	r3, r2
 8001400:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001402:	bf00      	nop
 8001404:	f7ff ffde 	bl	80013c4 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	429a      	cmp	r2, r3
 8001412:	d8f7      	bhi.n	8001404 <HAL_Delay+0x28>
  {
  }
}
 8001414:	bf00      	nop
 8001416:	bf00      	nop
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	2400000c 	.word	0x2400000c

08001424 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800142c:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001434:	4904      	ldr	r1, [pc, #16]	@ (8001448 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4313      	orrs	r3, r2
 800143a:	604b      	str	r3, [r1, #4]
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	58000400 	.word	0x58000400

0800144c <__NVIC_SetPriorityGrouping>:
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800145c:	4b0b      	ldr	r3, [pc, #44]	@ (800148c <__NVIC_SetPriorityGrouping+0x40>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001468:	4013      	ands	r3, r2
 800146a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001474:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <__NVIC_SetPriorityGrouping+0x44>)
 8001476:	4313      	orrs	r3, r2
 8001478:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800147a:	4a04      	ldr	r2, [pc, #16]	@ (800148c <__NVIC_SetPriorityGrouping+0x40>)
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	60d3      	str	r3, [r2, #12]
}
 8001480:	bf00      	nop
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	e000ed00 	.word	0xe000ed00
 8001490:	05fa0000 	.word	0x05fa0000

08001494 <__NVIC_GetPriorityGrouping>:
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001498:	4b04      	ldr	r3, [pc, #16]	@ (80014ac <__NVIC_GetPriorityGrouping+0x18>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	0a1b      	lsrs	r3, r3, #8
 800149e:	f003 0307 	and.w	r3, r3, #7
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <__NVIC_EnableIRQ>:
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	db0b      	blt.n	80014da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014c2:	88fb      	ldrh	r3, [r7, #6]
 80014c4:	f003 021f 	and.w	r2, r3, #31
 80014c8:	4907      	ldr	r1, [pc, #28]	@ (80014e8 <__NVIC_EnableIRQ+0x38>)
 80014ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ce:	095b      	lsrs	r3, r3, #5
 80014d0:	2001      	movs	r0, #1
 80014d2:	fa00 f202 	lsl.w	r2, r0, r2
 80014d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000e100 	.word	0xe000e100

080014ec <__NVIC_SetPriority>:
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	6039      	str	r1, [r7, #0]
 80014f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	db0a      	blt.n	8001516 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	b2da      	uxtb	r2, r3
 8001504:	490c      	ldr	r1, [pc, #48]	@ (8001538 <__NVIC_SetPriority+0x4c>)
 8001506:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800150a:	0112      	lsls	r2, r2, #4
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	440b      	add	r3, r1
 8001510:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001514:	e00a      	b.n	800152c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4908      	ldr	r1, [pc, #32]	@ (800153c <__NVIC_SetPriority+0x50>)
 800151c:	88fb      	ldrh	r3, [r7, #6]
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	3b04      	subs	r3, #4
 8001524:	0112      	lsls	r2, r2, #4
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	440b      	add	r3, r1
 800152a:	761a      	strb	r2, [r3, #24]
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000e100 	.word	0xe000e100
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <NVIC_EncodePriority>:
{
 8001540:	b480      	push	{r7}
 8001542:	b089      	sub	sp, #36	@ 0x24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f1c3 0307 	rsb	r3, r3, #7
 800155a:	2b04      	cmp	r3, #4
 800155c:	bf28      	it	cs
 800155e:	2304      	movcs	r3, #4
 8001560:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3304      	adds	r3, #4
 8001566:	2b06      	cmp	r3, #6
 8001568:	d902      	bls.n	8001570 <NVIC_EncodePriority+0x30>
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3b03      	subs	r3, #3
 800156e:	e000      	b.n	8001572 <NVIC_EncodePriority+0x32>
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	f04f 32ff 	mov.w	r2, #4294967295
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43da      	mvns	r2, r3
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	401a      	ands	r2, r3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001588:	f04f 31ff 	mov.w	r1, #4294967295
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	fa01 f303 	lsl.w	r3, r1, r3
 8001592:	43d9      	mvns	r1, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	4313      	orrs	r3, r2
}
 800159a:	4618      	mov	r0, r3
 800159c:	3724      	adds	r7, #36	@ 0x24
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff ff4c 	bl	800144c <__NVIC_SetPriorityGrouping>
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
 80015c8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015ca:	f7ff ff63 	bl	8001494 <__NVIC_GetPriorityGrouping>
 80015ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	68b9      	ldr	r1, [r7, #8]
 80015d4:	6978      	ldr	r0, [r7, #20]
 80015d6:	f7ff ffb3 	bl	8001540 <NVIC_EncodePriority>
 80015da:	4602      	mov	r2, r0
 80015dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015e0:	4611      	mov	r1, r2
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff ff82 	bl	80014ec <__NVIC_SetPriority>
}
 80015e8:	bf00      	nop
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff ff56 	bl	80014b0 <__NVIC_EnableIRQ>
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001610:	f3bf 8f5f 	dmb	sy
}
 8001614:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001616:	4b07      	ldr	r3, [pc, #28]	@ (8001634 <HAL_MPU_Disable+0x28>)
 8001618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800161a:	4a06      	ldr	r2, [pc, #24]	@ (8001634 <HAL_MPU_Disable+0x28>)
 800161c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001620:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001622:	4b05      	ldr	r3, [pc, #20]	@ (8001638 <HAL_MPU_Disable+0x2c>)
 8001624:	2200      	movs	r2, #0
 8001626:	605a      	str	r2, [r3, #4]
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	e000ed00 	.word	0xe000ed00
 8001638:	e000ed90 	.word	0xe000ed90

0800163c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001644:	4a0b      	ldr	r2, [pc, #44]	@ (8001674 <HAL_MPU_Enable+0x38>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800164e:	4b0a      	ldr	r3, [pc, #40]	@ (8001678 <HAL_MPU_Enable+0x3c>)
 8001650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001652:	4a09      	ldr	r2, [pc, #36]	@ (8001678 <HAL_MPU_Enable+0x3c>)
 8001654:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001658:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800165a:	f3bf 8f4f 	dsb	sy
}
 800165e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001660:	f3bf 8f6f 	isb	sy
}
 8001664:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	e000ed90 	.word	0xe000ed90
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	785a      	ldrb	r2, [r3, #1]
 8001688:	4b1b      	ldr	r3, [pc, #108]	@ (80016f8 <HAL_MPU_ConfigRegion+0x7c>)
 800168a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800168c:	4b1a      	ldr	r3, [pc, #104]	@ (80016f8 <HAL_MPU_ConfigRegion+0x7c>)
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	4a19      	ldr	r2, [pc, #100]	@ (80016f8 <HAL_MPU_ConfigRegion+0x7c>)
 8001692:	f023 0301 	bic.w	r3, r3, #1
 8001696:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001698:	4a17      	ldr	r2, [pc, #92]	@ (80016f8 <HAL_MPU_ConfigRegion+0x7c>)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	7b1b      	ldrb	r3, [r3, #12]
 80016a4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	7adb      	ldrb	r3, [r3, #11]
 80016aa:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	7a9b      	ldrb	r3, [r3, #10]
 80016b2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80016b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	7b5b      	ldrb	r3, [r3, #13]
 80016ba:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80016bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	7b9b      	ldrb	r3, [r3, #14]
 80016c2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80016c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	7bdb      	ldrb	r3, [r3, #15]
 80016ca:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80016cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	7a5b      	ldrb	r3, [r3, #9]
 80016d2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80016d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	7a1b      	ldrb	r3, [r3, #8]
 80016da:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80016dc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	7812      	ldrb	r2, [r2, #0]
 80016e2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016e4:	4a04      	ldr	r2, [pc, #16]	@ (80016f8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80016e6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016e8:	6113      	str	r3, [r2, #16]
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	e000ed90 	.word	0xe000ed90

080016fc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e0e3      	b.n	80018d6 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001714:	2b00      	cmp	r3, #0
 8001716:	d106      	bne.n	8001726 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2220      	movs	r2, #32
 800171c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f003 fdcf 	bl	80052c4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001726:	4b6e      	ldr	r3, [pc, #440]	@ (80018e0 <HAL_ETH_Init+0x1e4>)
 8001728:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800172c:	4a6c      	ldr	r2, [pc, #432]	@ (80018e0 <HAL_ETH_Init+0x1e4>)
 800172e:	f043 0302 	orr.w	r3, r3, #2
 8001732:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001736:	4b6a      	ldr	r3, [pc, #424]	@ (80018e0 <HAL_ETH_Init+0x1e4>)
 8001738:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	7a1b      	ldrb	r3, [r3, #8]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d103      	bne.n	8001754 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800174c:	2000      	movs	r0, #0
 800174e:	f7ff fe69 	bl	8001424 <HAL_SYSCFG_ETHInterfaceSelect>
 8001752:	e003      	b.n	800175c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001754:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001758:	f7ff fe64 	bl	8001424 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800175c:	4b61      	ldr	r3, [pc, #388]	@ (80018e4 <HAL_ETH_Init+0x1e8>)
 800175e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6812      	ldr	r2, [r2, #0]
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001776:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001778:	f7ff fe24 	bl	80013c4 <HAL_GetTick>
 800177c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800177e:	e011      	b.n	80017a4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001780:	f7ff fe20 	bl	80013c4 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800178e:	d909      	bls.n	80017a4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2204      	movs	r2, #4
 8001794:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	22e0      	movs	r2, #224	@ 0xe0
 800179c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e098      	b.n	80018d6 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1e4      	bne.n	8001780 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 ff1c 	bl	80025f4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80017bc:	f002 fe0c 	bl	80043d8 <HAL_RCC_GetHCLKFreq>
 80017c0:	4603      	mov	r3, r0
 80017c2:	4a49      	ldr	r2, [pc, #292]	@ (80018e8 <HAL_ETH_Init+0x1ec>)
 80017c4:	fba2 2303 	umull	r2, r3, r2, r3
 80017c8:	0c9a      	lsrs	r2, r3, #18
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	3a01      	subs	r2, #1
 80017d0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f001 f919 	bl	8002a0c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017e2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80017e6:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6812      	ldr	r2, [r2, #0]
 80017ee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80017f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80017f6:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	f003 0303 	and.w	r3, r3, #3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d009      	beq.n	800181a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2201      	movs	r2, #1
 800180a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	22e0      	movs	r2, #224	@ 0xe0
 8001812:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e05d      	b.n	80018d6 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001822:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001826:	4b31      	ldr	r3, [pc, #196]	@ (80018ec <HAL_ETH_Init+0x1f0>)
 8001828:	4013      	ands	r3, r2
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	6952      	ldr	r2, [r2, #20]
 800182e:	0051      	lsls	r1, r2, #1
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	6812      	ldr	r2, [r2, #0]
 8001834:	430b      	orrs	r3, r1
 8001836:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800183a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f001 f981 	bl	8002b46 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f001 f9c7 	bl	8002bd8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	3305      	adds	r3, #5
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	021a      	lsls	r2, r3, #8
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	3304      	adds	r3, #4
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	4619      	mov	r1, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	3303      	adds	r3, #3
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	061a      	lsls	r2, r3, #24
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	3302      	adds	r3, #2
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	041b      	lsls	r3, r3, #16
 800187c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	3301      	adds	r3, #1
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001888:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001896:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001898:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b11      	ldr	r3, [pc, #68]	@ (80018f0 <HAL_ETH_Init+0x1f4>)
 80018aa:	430b      	orrs	r3, r1
 80018ac:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b0d      	ldr	r3, [pc, #52]	@ (80018f4 <HAL_ETH_Init+0x1f8>)
 80018be:	430b      	orrs	r3, r1
 80018c0:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2210      	movs	r2, #16
 80018d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	58024400 	.word	0x58024400
 80018e4:	58000400 	.word	0x58000400
 80018e8:	431bde83 	.word	0x431bde83
 80018ec:	ffff8001 	.word	0xffff8001
 80018f0:	0c020060 	.word	0x0c020060
 80018f4:	0c20c000 	.word	0x0c20c000

080018f8 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001906:	2b10      	cmp	r3, #16
 8001908:	d165      	bne.n	80019d6 <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2220      	movs	r2, #32
 800190e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2201      	movs	r2, #1
 8001916:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2204      	movs	r2, #4
 800191c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 f9e4 	bl	8001cec <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800192c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800193c:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001948:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	6812      	ldr	r2, [r2, #0]
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001958:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001964:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6812      	ldr	r2, [r2, #0]
 800196c:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8001970:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001974:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f042 0201 	orr.w	r2, r2, #1
 8001988:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f042 0202 	orr.w	r2, r2, #2
 800199a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f042 0201 	orr.w	r2, r2, #1
 80019aa:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019b4:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 80019c0:	430b      	orrs	r3, r1
 80019c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80019c6:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2240      	movs	r2, #64	@ 0x40
 80019ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 80019d2:	2300      	movs	r3, #0
 80019d4:	e000      	b.n	80019d8 <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
  }
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80019ee:	2b40      	cmp	r3, #64	@ 0x40
 80019f0:	d165      	bne.n	8001abe <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2220      	movs	r2, #32
 80019f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a02:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	4b30      	ldr	r3, [pc, #192]	@ (8001acc <HAL_ETH_Stop_IT+0xec>)
 8001a0c:	400b      	ands	r3, r1
 8001a0e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a12:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a1e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6812      	ldr	r2, [r2, #0]
 8001a26:	f023 0301 	bic.w	r3, r3, #1
 8001a2a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a2e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a3a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	6812      	ldr	r2, [r2, #0]
 8001a42:	f023 0301 	bic.w	r3, r3, #1
 8001a46:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a4a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 0201 	bic.w	r2, r2, #1
 8001a5c:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f042 0201 	orr.w	r2, r2, #1
 8001a6e:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 0202 	bic.w	r2, r2, #2
 8001a80:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	e00e      	b.n	8001aa6 <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	3212      	adds	r2, #18
 8001a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a92:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2b03      	cmp	r3, #3
 8001aaa:	d9ed      	bls.n	8001a88 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2210      	movs	r2, #16
 8001ab6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001aba:	2300      	movs	r3, #0
 8001abc:	e000      	b.n	8001ac0 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
  }
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	ffff2f3e 	.word	0xffff2f3e

08001ad0 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d109      	bne.n	8001af4 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ae6:	f043 0201 	orr.w	r2, r3, #1
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e03a      	b.n	8001b6a <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001afa:	2b40      	cmp	r3, #64	@ 0x40
 8001afc:	d134      	bne.n	8001b68 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001b06:	2201      	movs	r2, #1
 8001b08:	6839      	ldr	r1, [r7, #0]
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f001 f8c2 	bl	8002c94 <ETH_Prepare_Tx_Descriptors>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d009      	beq.n	8001b2a <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b1c:	f043 0202 	orr.w	r2, r3, #2
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e01f      	b.n	8001b6a <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8001b2a:	f3bf 8f4f 	dsb	sy
}
 8001b2e:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b34:	1c5a      	adds	r2, r3, #1
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b3e:	2b03      	cmp	r3, #3
 8001b40:	d904      	bls.n	8001b4c <HAL_ETH_Transmit_IT+0x7c>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b46:	1f1a      	subs	r2, r3, #4
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3106      	adds	r1, #6
 8001b58:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b5c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b60:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 8001b64:	2300      	movs	r3, #0
 8001b66:	e000      	b.n	8001b6a <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
  }
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b088      	sub	sp, #32
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d109      	bne.n	8001b9e <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b90:	f043 0201 	orr.w	r2, r3, #1
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e0a2      	b.n	8001ce4 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ba4:	2b40      	cmp	r3, #64	@ 0x40
 8001ba6:	d001      	beq.n	8001bac <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e09b      	b.n	8001ce4 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bb0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69fa      	ldr	r2, [r7, #28]
 8001bb6:	3212      	adds	r2, #18
 8001bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bbc:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bc2:	f1c3 0304 	rsb	r3, r3, #4
 8001bc6:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001bc8:	e064      	b.n	8001c94 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d007      	beq.n	8001be6 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d103      	bne.n	8001bfa <HAL_ETH_ReadData+0x88>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d03a      	beq.n	8001c70 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d005      	beq.n	8001c12 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d005      	beq.n	8001c3a <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	68da      	ldr	r2, [r3, #12]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001c36:	2301      	movs	r3, #1
 8001c38:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	f003 fd1a 	bl	8005688 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c58:	1c5a      	adds	r2, r3, #1
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	441a      	add	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	3301      	adds	r3, #1
 8001c74:	61fb      	str	r3, [r7, #28]
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	2b03      	cmp	r3, #3
 8001c7a:	d902      	bls.n	8001c82 <HAL_ETH_ReadData+0x110>
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	3b04      	subs	r3, #4
 8001c80:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69fa      	ldr	r2, [r7, #28]
 8001c86:	3212      	adds	r2, #18
 8001c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c8c:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	3301      	adds	r3, #1
 8001c92:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	db06      	blt.n	8001caa <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d202      	bcs.n	8001caa <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 8001ca4:	7cfb      	ldrb	r3, [r7, #19]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d08f      	beq.n	8001bca <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	441a      	add	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d002      	beq.n	8001cc4 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 f814 	bl	8001cec <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	69fa      	ldr	r2, [r7, #28]
 8001cc8:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001cca:	7cfb      	ldrb	r3, [r7, #19]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d108      	bne.n	8001ce2 <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	e000      	b.n	8001ce4 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3720      	adds	r7, #32
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b088      	sub	sp, #32
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d00:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69fa      	ldr	r2, [r7, #28]
 8001d06:	3212      	adds	r2, #18
 8001d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d0c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d12:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001d14:	e038      	b.n	8001d88 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d112      	bne.n	8001d44 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001d1e:	f107 0308 	add.w	r3, r7, #8
 8001d22:	4618      	mov	r0, r3
 8001d24:	f003 fc80 	bl	8005628 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d102      	bne.n	8001d34 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	74fb      	strb	r3, [r7, #19]
 8001d32:	e007      	b.n	8001d44 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	461a      	mov	r2, r3
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8001d44:	7cfb      	ldrb	r3, [r7, #19]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d01e      	beq.n	8001d88 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d004      	beq.n	8001d5c <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	e003      	b.n	8001d64 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 8001d62:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	3301      	adds	r3, #1
 8001d68:	61fb      	str	r3, [r7, #28]
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	2b03      	cmp	r3, #3
 8001d6e:	d902      	bls.n	8001d76 <ETH_UpdateDescriptor+0x8a>
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	3b04      	subs	r3, #4
 8001d74:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69fa      	ldr	r2, [r7, #28]
 8001d7a:	3212      	adds	r2, #18
 8001d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d80:	617b      	str	r3, [r7, #20]
      desccount--;
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	3b01      	subs	r3, #1
 8001d86:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d002      	beq.n	8001d94 <ETH_UpdateDescriptor+0xa8>
 8001d8e:	7cfb      	ldrb	r3, [r7, #19]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1c0      	bne.n	8001d16 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d01b      	beq.n	8001dd6 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3303      	adds	r3, #3
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001da8:	f3bf 8f5f 	dmb	sy
}
 8001dac:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6919      	ldr	r1, [r3, #16]
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	4613      	mov	r3, r2
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	4413      	add	r3, r2
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	18ca      	adds	r2, r1, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dc6:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69fa      	ldr	r2, [r7, #28]
 8001dce:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001dd6:	bf00      	nop
 8001dd8:	3720      	adds	r7, #32
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b086      	sub	sp, #24
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	3318      	adds	r3, #24
 8001dea:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df0:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df6:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001dfc:	e047      	b.n	8001e8e <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	3b01      	subs	r3, #1
 8001e06:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001e08:	68ba      	ldr	r2, [r7, #8]
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4413      	add	r3, r2
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d10a      	bne.n	8001e2e <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	d902      	bls.n	8001e2a <HAL_ETH_ReleaseTxPacket+0x4c>
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	3b04      	subs	r3, #4
 8001e28:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001e2e:	7bbb      	ldrb	r3, [r7, #14]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d02c      	beq.n	8001e8e <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68d9      	ldr	r1, [r3, #12]
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4413      	add	r3, r2
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	440b      	add	r3, r1
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	db1f      	blt.n	8001e8a <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	3304      	adds	r3, #4
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f003 fc7e 	bl	8005758 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001e5c:	68ba      	ldr	r2, [r7, #8]
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	3304      	adds	r3, #4
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	2200      	movs	r2, #0
 8001e68:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	2b03      	cmp	r3, #3
 8001e74:	d902      	bls.n	8001e7c <HAL_ETH_ReleaseTxPacket+0x9e>
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	3b04      	subs	r3, #4
 8001e7a:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001e88:	e001      	b.n	8001e8e <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d002      	beq.n	8001e9a <HAL_ETH_ReleaseTxPacket+0xbc>
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1b1      	bne.n	8001dfe <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001eb4:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ebe:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001ec2:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ecc:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001ed0:	60fb      	str	r3, [r7, #12]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 8001ed2:	4b6d      	ldr	r3, [pc, #436]	@ (8002088 <HAL_ETH_IRQHandler+0x1e4>)
 8001ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed6:	60bb      	str	r3, [r7, #8]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d010      	beq.n	8001f04 <HAL_ETH_IRQHandler+0x60>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00b      	beq.n	8001f04 <HAL_ETH_IRQHandler+0x60>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	f248 0340 	movw	r3, #32832	@ 0x8040
 8001efa:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f002 ff20 	bl	8004d44 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d010      	beq.n	8001f30 <HAL_ETH_IRQHandler+0x8c>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d00b      	beq.n	8001f30 <HAL_ETH_IRQHandler+0x8c>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f20:	461a      	mov	r2, r3
 8001f22:	f248 0301 	movw	r3, #32769	@ 0x8001
 8001f26:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f002 ff1a 	bl	8004d64 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d047      	beq.n	8001fca <HAL_ETH_IRQHandler+0x126>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d042      	beq.n	8001fca <HAL_ETH_IRQHandler+0x126>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f4a:	f043 0208 	orr.w	r2, r3, #8
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d01e      	beq.n	8001f9c <HAL_ETH_IRQHandler+0xf8>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f66:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8001f6a:	f241 1302 	movw	r3, #4354	@ 0x1102
 8001f6e:	4013      	ands	r3, r2
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f7e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	6812      	ldr	r2, [r2, #0]
 8001f86:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001f8a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f8e:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	22e0      	movs	r2, #224	@ 0xe0
 8001f96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001f9a:	e013      	b.n	8001fc4 <HAL_ETH_IRQHandler+0x120>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fa4:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001fa8:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fba:	461a      	mov	r2, r3
 8001fbc:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8001fc0:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f002 fedd 	bl	8004d84 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d104      	bne.n	8001fde <HAL_ETH_IRQHandler+0x13a>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d019      	beq.n	8002012 <HAL_ETH_IRQHandler+0x16e>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fe4:	f043 0210 	orr.w	r2, r3, #16
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	22e0      	movs	r2, #224	@ 0xe0
 8002000:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f002 febd 	bl	8004d84 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f003 0310 	and.w	r3, r3, #16
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00f      	beq.n	800203c <HAL_ETH_IRQHandler+0x198>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002024:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f82c 	bl	800208c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f003 0320 	and.w	r3, r3, #32
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00f      	beq.n	8002066 <HAL_ETH_IRQHandler+0x1c2>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800204e:	f003 020f 	and.w	r2, r3, #15
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 f821 	bl	80020a0 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* DUAL_CORE not defined */
  /* check ETH WAKEUP exti flag */
  if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d006      	beq.n	800207e <HAL_ETH_IRQHandler+0x1da>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002070:	4b05      	ldr	r3, [pc, #20]	@ (8002088 <HAL_ETH_IRQHandler+0x1e4>)
 8002072:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002076:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 f81b 	bl	80020b4 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 800207e:	bf00      	nop
 8002080:	3718      	adds	r7, #24
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	58000080 	.word	0x58000080

0800208c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
 80020d4:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e03e      	b.n	8002168 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80020f2:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	055b      	lsls	r3, r3, #21
 80020fe:	4313      	orrs	r3, r2
 8002100:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	041b      	lsls	r3, r3, #16
 800210c:	4313      	orrs	r3, r2
 800210e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f043 030c 	orr.w	r3, r3, #12
 8002116:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 800212a:	f7ff f94b 	bl	80013c4 <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002130:	e009      	b.n	8002146 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8002132:	f7ff f947 	bl	80013c4 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002140:	d901      	bls.n	8002146 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e010      	b.n	8002168 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1ed      	bne.n	8002132 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800215e:	b29b      	uxth	r3, r3
 8002160:	461a      	mov	r2, r3
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
 800217c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e03c      	b.n	800220c <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800219a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	055b      	lsls	r3, r3, #21
 80021a6:	4313      	orrs	r3, r2
 80021a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	041b      	lsls	r3, r3, #16
 80021b4:	4313      	orrs	r3, r2
 80021b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	f023 030c 	bic.w	r3, r3, #12
 80021be:	f043 0304 	orr.w	r3, r3, #4
 80021c2:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	4b10      	ldr	r3, [pc, #64]	@ (8002214 <HAL_ETH_WritePHYRegister+0xa4>)
 80021d2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80021d6:	4a0f      	ldr	r2, [pc, #60]	@ (8002214 <HAL_ETH_WritePHYRegister+0xa4>)
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 80021de:	f7ff f8f1 	bl	80013c4 <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80021e4:	e009      	b.n	80021fa <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80021e6:	f7ff f8ed 	bl	80013c4 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021f4:	d901      	bls.n	80021fa <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e008      	b.n	800220c <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1ed      	bne.n	80021e6 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40028000 	.word	0x40028000

08002218 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e1c3      	b.n	80025b4 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 020c 	and.w	r2, r3, #12
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0310 	and.w	r3, r3, #16
 8002244:	2b00      	cmp	r3, #0
 8002246:	bf14      	ite	ne
 8002248:	2301      	movne	r3, #1
 800224a:	2300      	moveq	r3, #0
 800224c:	b2db      	uxtb	r3, r3
 800224e:	461a      	mov	r2, r3
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800226e:	2b00      	cmp	r3, #0
 8002270:	bf0c      	ite	eq
 8002272:	2301      	moveq	r3, #1
 8002274:	2300      	movne	r3, #0
 8002276:	b2db      	uxtb	r3, r3
 8002278:	461a      	mov	r2, r3
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 800228a:	2b00      	cmp	r3, #0
 800228c:	bf14      	ite	ne
 800228e:	2301      	movne	r3, #1
 8002290:	2300      	moveq	r3, #0
 8002292:	b2db      	uxtb	r3, r3
 8002294:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	bf0c      	ite	eq
 80022a8:	2301      	moveq	r3, #1
 80022aa:	2300      	movne	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80022ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022be:	2b00      	cmp	r3, #0
 80022c0:	bf14      	ite	ne
 80022c2:	2301      	movne	r3, #1
 80022c4:	2300      	moveq	r3, #0
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	bf14      	ite	ne
 80022dc:	2301      	movne	r3, #1
 80022de:	2300      	moveq	r3, #0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	461a      	mov	r2, r3
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800230e:	2b00      	cmp	r3, #0
 8002310:	bf14      	ite	ne
 8002312:	2301      	movne	r3, #1
 8002314:	2300      	moveq	r3, #0
 8002316:	b2db      	uxtb	r3, r3
 8002318:	461a      	mov	r2, r3
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002328:	2b00      	cmp	r3, #0
 800232a:	bf0c      	ite	eq
 800232c:	2301      	moveq	r3, #1
 800232e:	2300      	movne	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	461a      	mov	r2, r3
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002342:	2b00      	cmp	r3, #0
 8002344:	bf0c      	ite	eq
 8002346:	2301      	moveq	r3, #1
 8002348:	2300      	movne	r3, #0
 800234a:	b2db      	uxtb	r3, r3
 800234c:	461a      	mov	r2, r3
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800235c:	2b00      	cmp	r3, #0
 800235e:	bf14      	ite	ne
 8002360:	2301      	movne	r3, #1
 8002362:	2300      	moveq	r3, #0
 8002364:	b2db      	uxtb	r3, r3
 8002366:	461a      	mov	r2, r3
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002376:	2b00      	cmp	r3, #0
 8002378:	bf14      	ite	ne
 800237a:	2301      	movne	r3, #1
 800237c:	2300      	moveq	r3, #0
 800237e:	b2db      	uxtb	r3, r3
 8002380:	461a      	mov	r2, r3
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002390:	2b00      	cmp	r3, #0
 8002392:	bf14      	ite	ne
 8002394:	2301      	movne	r3, #1
 8002396:	2300      	moveq	r3, #0
 8002398:	b2db      	uxtb	r3, r3
 800239a:	461a      	mov	r2, r3
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80023a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	bf14      	ite	ne
 80023ae:	2301      	movne	r3, #1
 80023b0:	2300      	moveq	r3, #0
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	bf14      	ite	ne
 80023d6:	2301      	movne	r3, #1
 80023d8:	2300      	moveq	r3, #0
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	461a      	mov	r2, r3
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002408:	2b00      	cmp	r3, #0
 800240a:	bf0c      	ite	eq
 800240c:	2301      	moveq	r3, #1
 800240e:	2300      	movne	r3, #0
 8002410:	b2db      	uxtb	r3, r3
 8002412:	461a      	mov	r2, r3
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002424:	2b00      	cmp	r3, #0
 8002426:	bf14      	ite	ne
 8002428:	2301      	movne	r3, #1
 800242a:	2300      	moveq	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	461a      	mov	r2, r3
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 800243c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002440:	2b00      	cmp	r3, #0
 8002442:	bf14      	ite	ne
 8002444:	2301      	movne	r3, #1
 8002446:	2300      	moveq	r3, #0
 8002448:	b2db      	uxtb	r3, r3
 800244a:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 800245c:	2b00      	cmp	r3, #0
 800245e:	bf14      	ite	ne
 8002460:	2301      	movne	r3, #1
 8002462:	2300      	moveq	r3, #0
 8002464:	b2db      	uxtb	r3, r3
 8002466:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	0e5b      	lsrs	r3, r3, #25
 8002476:	f003 021f 	and.w	r2, r3, #31
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002488:	2b00      	cmp	r3, #0
 800248a:	bf14      	ite	ne
 800248c:	2301      	movne	r3, #1
 800248e:	2300      	moveq	r3, #0
 8002490:	b2db      	uxtb	r3, r3
 8002492:	461a      	mov	r2, r3
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	f003 020f 	and.w	r2, r3, #15
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	bf14      	ite	ne
 80024b6:	2301      	movne	r3, #1
 80024b8:	2300      	moveq	r3, #0
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	461a      	mov	r2, r3
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	bf0c      	ite	eq
 80024d2:	2301      	moveq	r3, #1
 80024d4:	2300      	movne	r3, #0
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	461a      	mov	r2, r3
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024e6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024f4:	0c1b      	lsrs	r3, r3, #16
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b00      	cmp	r3, #0
 800250a:	bf14      	ite	ne
 800250c:	2301      	movne	r3, #1
 800250e:	2300      	moveq	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	461a      	mov	r2, r3
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002522:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8002526:	2b00      	cmp	r3, #0
 8002528:	bf14      	ite	ne
 800252a:	2301      	movne	r3, #1
 800252c:	2300      	moveq	r3, #0
 800252e:	b2db      	uxtb	r3, r3
 8002530:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002540:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002550:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002560:	f003 0308 	and.w	r3, r3, #8
 8002564:	2b00      	cmp	r3, #0
 8002566:	bf14      	ite	ne
 8002568:	2301      	movne	r3, #1
 800256a:	2300      	moveq	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800257e:	f003 0310 	and.w	r3, r3, #16
 8002582:	2b00      	cmp	r3, #0
 8002584:	bf14      	ite	ne
 8002586:	2301      	movne	r3, #1
 8002588:	2300      	moveq	r3, #0
 800258a:	b2db      	uxtb	r3, r3
 800258c:	461a      	mov	r2, r3
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 800259c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	bf0c      	ite	eq
 80025a4:	2301      	moveq	r3, #1
 80025a6:	2300      	movne	r3, #0
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e00b      	b.n	80025ec <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025da:	2b10      	cmp	r3, #16
 80025dc:	d105      	bne.n	80025ea <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80025de:	6839      	ldr	r1, [r7, #0]
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 f871 	bl	80026c8 <ETH_SetMACConfig>

    return HAL_OK;
 80025e6:	2300      	movs	r3, #0
 80025e8:	e000      	b.n	80025ec <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
  }
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002604:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800260c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800260e:	f001 fee3 	bl	80043d8 <HAL_RCC_GetHCLKFreq>
 8002612:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	4a1a      	ldr	r2, [pc, #104]	@ (8002680 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d804      	bhi.n	8002626 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	e022      	b.n	800266c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	4a16      	ldr	r2, [pc, #88]	@ (8002684 <HAL_ETH_SetMDIOClockRange+0x90>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d204      	bcs.n	8002638 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	e019      	b.n	800266c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	4a13      	ldr	r2, [pc, #76]	@ (8002688 <HAL_ETH_SetMDIOClockRange+0x94>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d915      	bls.n	800266c <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	4a12      	ldr	r2, [pc, #72]	@ (800268c <HAL_ETH_SetMDIOClockRange+0x98>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d804      	bhi.n	8002652 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	e00c      	b.n	800266c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	4a0e      	ldr	r2, [pc, #56]	@ (8002690 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d804      	bhi.n	8002664 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	e003      	b.n	800266c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800266a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8002676:	bf00      	nop
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	02160ebf 	.word	0x02160ebf
 8002684:	03938700 	.word	0x03938700
 8002688:	05f5e0ff 	.word	0x05f5e0ff
 800268c:	08f0d17f 	.word	0x08f0d17f
 8002690:	0ee6b27f 	.word	0x0ee6b27f

08002694 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 80026bc:	4618      	mov	r0, r3
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80026da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	791b      	ldrb	r3, [r3, #4]
 80026e0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80026e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	7b1b      	ldrb	r3, [r3, #12]
 80026e8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80026ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	7b5b      	ldrb	r3, [r3, #13]
 80026f0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80026f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	7b9b      	ldrb	r3, [r3, #14]
 80026f8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80026fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	7bdb      	ldrb	r3, [r3, #15]
 8002700:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002702:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	7c12      	ldrb	r2, [r2, #16]
 8002708:	2a00      	cmp	r2, #0
 800270a:	d102      	bne.n	8002712 <ETH_SetMACConfig+0x4a>
 800270c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002710:	e000      	b.n	8002714 <ETH_SetMACConfig+0x4c>
 8002712:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002714:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	7c52      	ldrb	r2, [r2, #17]
 800271a:	2a00      	cmp	r2, #0
 800271c:	d102      	bne.n	8002724 <ETH_SetMACConfig+0x5c>
 800271e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002722:	e000      	b.n	8002726 <ETH_SetMACConfig+0x5e>
 8002724:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002726:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	7c9b      	ldrb	r3, [r3, #18]
 800272c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800272e:	431a      	orrs	r2, r3
               macconf->Speed |
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002734:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800273a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	7f1b      	ldrb	r3, [r3, #28]
 8002740:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002742:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	7f5b      	ldrb	r3, [r3, #29]
 8002748:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800274a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	7f92      	ldrb	r2, [r2, #30]
 8002750:	2a00      	cmp	r2, #0
 8002752:	d102      	bne.n	800275a <ETH_SetMACConfig+0x92>
 8002754:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002758:	e000      	b.n	800275c <ETH_SetMACConfig+0x94>
 800275a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800275c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	7fdb      	ldrb	r3, [r3, #31]
 8002762:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002764:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	f892 2020 	ldrb.w	r2, [r2, #32]
 800276c:	2a00      	cmp	r2, #0
 800276e:	d102      	bne.n	8002776 <ETH_SetMACConfig+0xae>
 8002770:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002774:	e000      	b.n	8002778 <ETH_SetMACConfig+0xb0>
 8002776:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002778:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800277e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002786:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002788:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800278e:	4313      	orrs	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	4b56      	ldr	r3, [pc, #344]	@ (80028f4 <ETH_SetMACConfig+0x22c>)
 800279a:	4013      	ands	r3, r2
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6812      	ldr	r2, [r2, #0]
 80027a0:	68f9      	ldr	r1, [r7, #12]
 80027a2:	430b      	orrs	r3, r1
 80027a4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027aa:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80027b2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80027b4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80027bc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80027be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80027c6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80027c8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80027d0:	2a00      	cmp	r2, #0
 80027d2:	d102      	bne.n	80027da <ETH_SetMACConfig+0x112>
 80027d4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80027d8:	e000      	b.n	80027dc <ETH_SetMACConfig+0x114>
 80027da:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80027dc:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80027e2:	4313      	orrs	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	4b42      	ldr	r3, [pc, #264]	@ (80028f8 <ETH_SetMACConfig+0x230>)
 80027ee:	4013      	ands	r3, r2
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6812      	ldr	r2, [r2, #0]
 80027f4:	68f9      	ldr	r1, [r7, #12]
 80027f6:	430b      	orrs	r3, r1
 80027f8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002800:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002806:	4313      	orrs	r3, r2
 8002808:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68da      	ldr	r2, [r3, #12]
 8002810:	4b3a      	ldr	r3, [pc, #232]	@ (80028fc <ETH_SetMACConfig+0x234>)
 8002812:	4013      	ands	r3, r2
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6812      	ldr	r2, [r2, #0]
 8002818:	68f9      	ldr	r1, [r7, #12]
 800281a:	430b      	orrs	r3, r1
 800281c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002824:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800282a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002832:	2a00      	cmp	r2, #0
 8002834:	d101      	bne.n	800283a <ETH_SetMACConfig+0x172>
 8002836:	2280      	movs	r2, #128	@ 0x80
 8002838:	e000      	b.n	800283c <ETH_SetMACConfig+0x174>
 800283a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800283c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002842:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002844:	4313      	orrs	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800284e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8002852:	4013      	ands	r3, r2
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6812      	ldr	r2, [r2, #0]
 8002858:	68f9      	ldr	r1, [r7, #12]
 800285a:	430b      	orrs	r3, r1
 800285c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8002864:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800286c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800286e:	4313      	orrs	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800287a:	f023 0103 	bic.w	r1, r3, #3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	430a      	orrs	r2, r1
 8002886:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002892:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	430a      	orrs	r2, r1
 80028a0:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80028ae:	2a00      	cmp	r2, #0
 80028b0:	d101      	bne.n	80028b6 <ETH_SetMACConfig+0x1ee>
 80028b2:	2240      	movs	r2, #64	@ 0x40
 80028b4:	e000      	b.n	80028b8 <ETH_SetMACConfig+0x1f0>
 80028b6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80028b8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80028c0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80028c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80028ca:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80028cc:	4313      	orrs	r3, r2
 80028ce:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80028d8:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80028e8:	bf00      	nop
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	00048083 	.word	0x00048083
 80028f8:	c0f88000 	.word	0xc0f88000
 80028fc:	fffffef0 	.word	0xfffffef0

08002900 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	4b38      	ldr	r3, [pc, #224]	@ (80029f8 <ETH_SetDMAConfig+0xf8>)
 8002916:	4013      	ands	r3, r2
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	6811      	ldr	r1, [r2, #0]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6812      	ldr	r2, [r2, #0]
 8002920:	430b      	orrs	r3, r1
 8002922:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002926:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	791b      	ldrb	r3, [r3, #4]
 800292c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002932:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	7b1b      	ldrb	r3, [r3, #12]
 8002938:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800293a:	4313      	orrs	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	4b2c      	ldr	r3, [pc, #176]	@ (80029fc <ETH_SetDMAConfig+0xfc>)
 800294a:	4013      	ands	r3, r2
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	6812      	ldr	r2, [r2, #0]
 8002950:	68f9      	ldr	r1, [r7, #12]
 8002952:	430b      	orrs	r3, r1
 8002954:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002958:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	7b5b      	ldrb	r3, [r3, #13]
 800295e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002964:	4313      	orrs	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002970:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002974:	4b22      	ldr	r3, [pc, #136]	@ (8002a00 <ETH_SetDMAConfig+0x100>)
 8002976:	4013      	ands	r3, r2
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	6812      	ldr	r2, [r2, #0]
 800297c:	68f9      	ldr	r1, [r7, #12]
 800297e:	430b      	orrs	r3, r1
 8002980:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002984:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	7d1b      	ldrb	r3, [r3, #20]
 8002990:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002992:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	7f5b      	ldrb	r3, [r3, #29]
 8002998:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800299a:	4313      	orrs	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029a6:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80029aa:	4b16      	ldr	r3, [pc, #88]	@ (8002a04 <ETH_SetDMAConfig+0x104>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6812      	ldr	r2, [r2, #0]
 80029b2:	68f9      	ldr	r1, [r7, #12]
 80029b4:	430b      	orrs	r3, r1
 80029b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80029ba:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	7f1b      	ldrb	r3, [r3, #28]
 80029c2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80029c8:	4313      	orrs	r3, r2
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029d4:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80029d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002a08 <ETH_SetDMAConfig+0x108>)
 80029da:	4013      	ands	r3, r2
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6812      	ldr	r2, [r2, #0]
 80029e0:	68f9      	ldr	r1, [r7, #12]
 80029e2:	430b      	orrs	r3, r1
 80029e4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80029e8:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80029ec:	bf00      	nop
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	ffff87fd 	.word	0xffff87fd
 80029fc:	ffff2ffe 	.word	0xffff2ffe
 8002a00:	fffec000 	.word	0xfffec000
 8002a04:	ffc0efef 	.word	0xffc0efef
 8002a08:	7fc0ffff 	.word	0x7fc0ffff

08002a0c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b0a4      	sub	sp, #144	@ 0x90
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002a14:	2301      	movs	r3, #1
 8002a16:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002a24:	2300      	movs	r3, #0
 8002a26:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002a30:	2301      	movs	r3, #1
 8002a32:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002a36:	2301      	movs	r3, #1
 8002a38:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002a42:	2301      	movs	r3, #1
 8002a44:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002a48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a4c:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002a64:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8002a68:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002a70:	2300      	movs	r3, #0
 8002a72:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8002a74:	2301      	movs	r3, #1
 8002a76:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002a80:	2300      	movs	r3, #0
 8002a82:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002a86:	2300      	movs	r3, #0
 8002a88:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002a92:	2300      	movs	r3, #0
 8002a94:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002aa4:	2320      	movs	r3, #32
 8002aa6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002ab6:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002abc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002ac0:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002ada:	2300      	movs	r3, #0
 8002adc:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002aea:	2301      	movs	r3, #1
 8002aec:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002af0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002af4:	4619      	mov	r1, r3
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7ff fde6 	bl	80026c8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002afc:	2301      	movs	r3, #1
 8002afe:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002b00:	2301      	movs	r3, #1
 8002b02:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002b04:	2300      	movs	r3, #0
 8002b06:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002b12:	2300      	movs	r3, #0
 8002b14:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002b16:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002b1a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002b20:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002b24:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002b26:	2300      	movs	r3, #0
 8002b28:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002b2c:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8002b30:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002b32:	f107 0308 	add.w	r3, r7, #8
 8002b36:	4619      	mov	r1, r3
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f7ff fee1 	bl	8002900 <ETH_SetDMAConfig>
}
 8002b3e:	bf00      	nop
 8002b40:	3790      	adds	r7, #144	@ 0x90
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b085      	sub	sp, #20
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	e01d      	b.n	8002b90 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68d9      	ldr	r1, [r3, #12]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	4413      	add	r3, r2
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	440b      	add	r3, r1
 8002b64:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2200      	movs	r2, #0
 8002b76:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002b7e:	68b9      	ldr	r1, [r7, #8]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	3206      	adds	r2, #6
 8002b86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2b03      	cmp	r3, #3
 8002b94:	d9de      	bls.n	8002b54 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68da      	ldr	r2, [r3, #12]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bb8:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68da      	ldr	r2, [r3, #12]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bc8:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8002bcc:	bf00      	nop
 8002bce:	3714      	adds	r7, #20
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002be0:	2300      	movs	r3, #0
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	e023      	b.n	8002c2e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6919      	ldr	r1, [r3, #16]
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	4613      	mov	r3, r2
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	4413      	add	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	440b      	add	r3, r1
 8002bf6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2200      	movs	r2, #0
 8002c02:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2200      	movs	r2, #0
 8002c08:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	2200      	movs	r2, #0
 8002c14:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002c1c:	68b9      	ldr	r1, [r7, #8]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	3212      	adds	r2, #18
 8002c24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2b03      	cmp	r3, #3
 8002c32:	d9d8      	bls.n	8002be6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	691a      	ldr	r2, [r3, #16]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c6e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c82:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8002c86:	bf00      	nop
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
	...

08002c94 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b091      	sub	sp, #68	@ 0x44
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	3318      	adds	r3, #24
 8002ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cbe:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002cd2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002cd6:	d007      	beq.n	8002ce8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002cd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cdc:	3304      	adds	r3, #4
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002ce8:	2302      	movs	r3, #2
 8002cea:	e266      	b.n	80031ba <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d044      	beq.n	8002d82 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	4b75      	ldr	r3, [pc, #468]	@ (8002ed4 <ETH_Prepare_Tx_Descriptors+0x240>)
 8002cfe:	4013      	ands	r3, r2
 8002d00:	68ba      	ldr	r2, [r7, #8]
 8002d02:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d04:	431a      	orrs	r2, r3
 8002d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d08:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d14:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002d24:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d027      	beq.n	8002d82 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d3c:	041b      	lsls	r3, r3, #16
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d42:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d4e:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d60:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002d70:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002d80:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0310 	and.w	r3, r3, #16
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00e      	beq.n	8002dac <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	4b51      	ldr	r3, [pc, #324]	@ (8002ed8 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002d94:	4013      	ands	r3, r2
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	6992      	ldr	r2, [r2, #24]
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d9e:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8002da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002daa:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d105      	bne.n	8002dc4 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0310 	and.w	r3, r3, #16
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d036      	beq.n	8002e32 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dce:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002dd0:	f3bf 8f5f 	dmb	sy
}
 8002dd4:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de0:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002de2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002de4:	3301      	adds	r3, #1
 8002de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002de8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dea:	2b03      	cmp	r3, #3
 8002dec:	d902      	bls.n	8002df4 <ETH_Prepare_Tx_Descriptors+0x160>
 8002dee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002df0:	3b04      	subs	r3, #4
 8002df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dfc:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 8002dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e00:	3301      	adds	r3, #1
 8002e02:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002e0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e10:	d10f      	bne.n	8002e32 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e14:	6a3a      	ldr	r2, [r7, #32]
 8002e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e1a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8002e1c:	f3bf 8f5f 	dmb	sy
}
 8002e20:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e2c:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002e2e:	2302      	movs	r3, #2
 8002e30:	e1c3      	b.n	80031ba <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e34:	3301      	adds	r3, #1
 8002e36:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e40:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e44:	689a      	ldr	r2, [r3, #8]
 8002e46:	4b24      	ldr	r3, [pc, #144]	@ (8002ed8 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002e48:	4013      	ands	r3, r2
 8002e4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e4c:	6852      	ldr	r2, [r2, #4]
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e52:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8002e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d012      	beq.n	8002e82 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8002e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	461a      	mov	r2, r3
 8002e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e6a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	4b1a      	ldr	r3, [pc, #104]	@ (8002edc <ETH_Prepare_Tx_Descriptors+0x248>)
 8002e72:	4013      	ands	r3, r2
 8002e74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e76:	6852      	ldr	r2, [r2, #4]
 8002e78:	0412      	lsls	r2, r2, #16
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	e008      	b.n	8002e94 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e84:	2200      	movs	r2, #0
 8002e86:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	4b13      	ldr	r3, [pc, #76]	@ (8002edc <ETH_Prepare_Tx_Descriptors+0x248>)
 8002e8e:	4013      	ands	r3, r2
 8002e90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e92:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0310 	and.w	r3, r3, #16
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d021      	beq.n	8002ee4 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	04db      	lsls	r3, r3, #19
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb2:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	4b09      	ldr	r3, [pc, #36]	@ (8002ee0 <ETH_Prepare_Tx_Descriptors+0x24c>)
 8002eba:	4013      	ands	r3, r2
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	69d2      	ldr	r2, [r2, #28]
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec4:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed0:	60da      	str	r2, [r3, #12]
 8002ed2:	e02e      	b.n	8002f32 <ETH_Prepare_Tx_Descriptors+0x29e>
 8002ed4:	ffff0000 	.word	0xffff0000
 8002ed8:	ffffc000 	.word	0xffffc000
 8002edc:	c000ffff 	.word	0xc000ffff
 8002ee0:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee6:	68da      	ldr	r2, [r3, #12]
 8002ee8:	4b7b      	ldr	r3, [pc, #492]	@ (80030d8 <ETH_Prepare_Tx_Descriptors+0x444>)
 8002eea:	4013      	ands	r3, r2
 8002eec:	68ba      	ldr	r2, [r7, #8]
 8002eee:	6852      	ldr	r2, [r2, #4]
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef4:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d008      	beq.n	8002f14 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f12:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0320 	and.w	r3, r3, #32
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d008      	beq.n	8002f32 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f30:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0304 	and.w	r3, r3, #4
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d008      	beq.n	8002f50 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f4e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f5a:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f66:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002f68:	f3bf 8f5f 	dmb	sy
}
 8002f6c:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f78:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 80da 	beq.w	800313c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	431a      	orrs	r2, r3
 8002f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f98:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002f9a:	e0cf      	b.n	800313c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa6:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002fa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002faa:	3301      	adds	r3, #1
 8002fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fb0:	2b03      	cmp	r3, #3
 8002fb2:	d902      	bls.n	8002fba <ETH_Prepare_Tx_Descriptors+0x326>
 8002fb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fb6:	3b04      	subs	r3, #4
 8002fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fc2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fce:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002fd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002fdc:	d007      	beq.n	8002fee <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002fde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fe2:	3304      	adds	r3, #4
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4413      	add	r3, r2
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d029      	beq.n	8003042 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8002fee:	6a3b      	ldr	r3, [r7, #32]
 8002ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ffa:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003000:	e019      	b.n	8003036 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8003002:	f3bf 8f5f 	dmb	sy
}
 8003006:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003012:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003014:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003016:	3301      	adds	r3, #1
 8003018:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800301a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800301c:	2b03      	cmp	r3, #3
 800301e:	d902      	bls.n	8003026 <ETH_Prepare_Tx_Descriptors+0x392>
 8003020:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003022:	3b04      	subs	r3, #4
 8003024:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003028:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800302a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800302e:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003032:	3301      	adds	r3, #1
 8003034:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003036:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800303a:	429a      	cmp	r2, r3
 800303c:	d3e1      	bcc.n	8003002 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 800303e:	2302      	movs	r3, #2
 8003040:	e0bb      	b.n	80031ba <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 8003042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003044:	3301      	adds	r3, #1
 8003046:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800304e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	461a      	mov	r2, r3
 8003054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003056:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	4b1f      	ldr	r3, [pc, #124]	@ (80030dc <ETH_Prepare_Tx_Descriptors+0x448>)
 800305e:	4013      	ands	r3, r2
 8003060:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003062:	6852      	ldr	r2, [r2, #4]
 8003064:	431a      	orrs	r2, r3
 8003066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003068:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 800306a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d012      	beq.n	8003098 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8003072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003080:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003084:	689a      	ldr	r2, [r3, #8]
 8003086:	4b16      	ldr	r3, [pc, #88]	@ (80030e0 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8003088:	4013      	ands	r3, r2
 800308a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800308c:	6852      	ldr	r2, [r2, #4]
 800308e:	0412      	lsls	r2, r2, #16
 8003090:	431a      	orrs	r2, r3
 8003092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003094:	609a      	str	r2, [r3, #8]
 8003096:	e008      	b.n	80030aa <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800309a:	2200      	movs	r2, #0
 800309c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800309e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a0:	689a      	ldr	r2, [r3, #8]
 80030a2:	4b0f      	ldr	r3, [pc, #60]	@ (80030e0 <ETH_Prepare_Tx_Descriptors+0x44c>)
 80030a4:	4013      	ands	r3, r2
 80030a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030a8:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0310 	and.w	r3, r3, #16
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d018      	beq.n	80030e8 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80030b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b8:	68da      	ldr	r2, [r3, #12]
 80030ba:	4b0a      	ldr	r3, [pc, #40]	@ (80030e4 <ETH_Prepare_Tx_Descriptors+0x450>)
 80030bc:	4013      	ands	r3, r2
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	69d2      	ldr	r2, [r2, #28]
 80030c2:	431a      	orrs	r2, r3
 80030c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c6:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80030c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80030d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030d2:	60da      	str	r2, [r3, #12]
 80030d4:	e020      	b.n	8003118 <ETH_Prepare_Tx_Descriptors+0x484>
 80030d6:	bf00      	nop
 80030d8:	ffff8000 	.word	0xffff8000
 80030dc:	ffffc000 	.word	0xffffc000
 80030e0:	c000ffff 	.word	0xc000ffff
 80030e4:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80030e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	4b36      	ldr	r3, [pc, #216]	@ (80031c8 <ETH_Prepare_Tx_Descriptors+0x534>)
 80030ee:	4013      	ands	r3, r2
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	6852      	ldr	r2, [r2, #4]
 80030f4:	431a      	orrs	r2, r3
 80030f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f8:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d008      	beq.n	8003118 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	431a      	orrs	r2, r3
 8003114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003116:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8003118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800311a:	3301      	adds	r3, #1
 800311c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 800311e:	f3bf 8f5f 	dmb	sy
}
 8003122:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800312c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800312e:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800313a:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 800313c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	2b00      	cmp	r3, #0
 8003142:	f47f af2b 	bne.w	8002f9c <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d006      	beq.n	800315a <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800314c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003156:	609a      	str	r2, [r3, #8]
 8003158:	e005      	b.n	8003166 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800315a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003164:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800316e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003170:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003174:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003176:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003178:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800317a:	3304      	adds	r3, #4
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003184:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003186:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003188:	f3ef 8310 	mrs	r3, PRIMASK
 800318c:	613b      	str	r3, [r7, #16]
  return(result);
 800318e:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8003190:	61fb      	str	r3, [r7, #28]
 8003192:	2301      	movs	r3, #1
 8003194:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f383 8810 	msr	PRIMASK, r3
}
 800319c:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800319e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a4:	4413      	add	r3, r2
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	f383 8810 	msr	PRIMASK, r3
}
 80031b6:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3744      	adds	r7, #68	@ 0x44
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	ffff8000 	.word	0xffff8000

080031cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b089      	sub	sp, #36	@ 0x24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80031d6:	2300      	movs	r3, #0
 80031d8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80031da:	4b86      	ldr	r3, [pc, #536]	@ (80033f4 <HAL_GPIO_Init+0x228>)
 80031dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80031de:	e18c      	b.n	80034fa <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	2101      	movs	r1, #1
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	fa01 f303 	lsl.w	r3, r1, r3
 80031ec:	4013      	ands	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 817e 	beq.w	80034f4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f003 0303 	and.w	r3, r3, #3
 8003200:	2b01      	cmp	r3, #1
 8003202:	d005      	beq.n	8003210 <HAL_GPIO_Init+0x44>
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f003 0303 	and.w	r3, r3, #3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d130      	bne.n	8003272 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	2203      	movs	r2, #3
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	43db      	mvns	r3, r3
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	4013      	ands	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	4313      	orrs	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003246:	2201      	movs	r2, #1
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	43db      	mvns	r3, r3
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	4013      	ands	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	091b      	lsrs	r3, r3, #4
 800325c:	f003 0201 	and.w	r2, r3, #1
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	4313      	orrs	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	2b03      	cmp	r3, #3
 800327c:	d017      	beq.n	80032ae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	2203      	movs	r2, #3
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	43db      	mvns	r3, r3
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	4013      	ands	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f003 0303 	and.w	r3, r3, #3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d123      	bne.n	8003302 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	08da      	lsrs	r2, r3, #3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	3208      	adds	r2, #8
 80032c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	220f      	movs	r2, #15
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	43db      	mvns	r3, r3
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	4013      	ands	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	691a      	ldr	r2, [r3, #16]
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	08da      	lsrs	r2, r3, #3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3208      	adds	r2, #8
 80032fc:	69b9      	ldr	r1, [r7, #24]
 80032fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	2203      	movs	r2, #3
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	43db      	mvns	r3, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4013      	ands	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f003 0203 	and.w	r2, r3, #3
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4313      	orrs	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 80d8 	beq.w	80034f4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003344:	4b2c      	ldr	r3, [pc, #176]	@ (80033f8 <HAL_GPIO_Init+0x22c>)
 8003346:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800334a:	4a2b      	ldr	r2, [pc, #172]	@ (80033f8 <HAL_GPIO_Init+0x22c>)
 800334c:	f043 0302 	orr.w	r3, r3, #2
 8003350:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003354:	4b28      	ldr	r3, [pc, #160]	@ (80033f8 <HAL_GPIO_Init+0x22c>)
 8003356:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003362:	4a26      	ldr	r2, [pc, #152]	@ (80033fc <HAL_GPIO_Init+0x230>)
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	089b      	lsrs	r3, r3, #2
 8003368:	3302      	adds	r3, #2
 800336a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800336e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	220f      	movs	r2, #15
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	43db      	mvns	r3, r3
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	4013      	ands	r3, r2
 8003384:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a1d      	ldr	r2, [pc, #116]	@ (8003400 <HAL_GPIO_Init+0x234>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d04a      	beq.n	8003424 <HAL_GPIO_Init+0x258>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a1c      	ldr	r2, [pc, #112]	@ (8003404 <HAL_GPIO_Init+0x238>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d02b      	beq.n	80033ee <HAL_GPIO_Init+0x222>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a1b      	ldr	r2, [pc, #108]	@ (8003408 <HAL_GPIO_Init+0x23c>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d025      	beq.n	80033ea <HAL_GPIO_Init+0x21e>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a1a      	ldr	r2, [pc, #104]	@ (800340c <HAL_GPIO_Init+0x240>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d01f      	beq.n	80033e6 <HAL_GPIO_Init+0x21a>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a19      	ldr	r2, [pc, #100]	@ (8003410 <HAL_GPIO_Init+0x244>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d019      	beq.n	80033e2 <HAL_GPIO_Init+0x216>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a18      	ldr	r2, [pc, #96]	@ (8003414 <HAL_GPIO_Init+0x248>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d013      	beq.n	80033de <HAL_GPIO_Init+0x212>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a17      	ldr	r2, [pc, #92]	@ (8003418 <HAL_GPIO_Init+0x24c>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d00d      	beq.n	80033da <HAL_GPIO_Init+0x20e>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a16      	ldr	r2, [pc, #88]	@ (800341c <HAL_GPIO_Init+0x250>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d007      	beq.n	80033d6 <HAL_GPIO_Init+0x20a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a15      	ldr	r2, [pc, #84]	@ (8003420 <HAL_GPIO_Init+0x254>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d101      	bne.n	80033d2 <HAL_GPIO_Init+0x206>
 80033ce:	2309      	movs	r3, #9
 80033d0:	e029      	b.n	8003426 <HAL_GPIO_Init+0x25a>
 80033d2:	230a      	movs	r3, #10
 80033d4:	e027      	b.n	8003426 <HAL_GPIO_Init+0x25a>
 80033d6:	2307      	movs	r3, #7
 80033d8:	e025      	b.n	8003426 <HAL_GPIO_Init+0x25a>
 80033da:	2306      	movs	r3, #6
 80033dc:	e023      	b.n	8003426 <HAL_GPIO_Init+0x25a>
 80033de:	2305      	movs	r3, #5
 80033e0:	e021      	b.n	8003426 <HAL_GPIO_Init+0x25a>
 80033e2:	2304      	movs	r3, #4
 80033e4:	e01f      	b.n	8003426 <HAL_GPIO_Init+0x25a>
 80033e6:	2303      	movs	r3, #3
 80033e8:	e01d      	b.n	8003426 <HAL_GPIO_Init+0x25a>
 80033ea:	2302      	movs	r3, #2
 80033ec:	e01b      	b.n	8003426 <HAL_GPIO_Init+0x25a>
 80033ee:	2301      	movs	r3, #1
 80033f0:	e019      	b.n	8003426 <HAL_GPIO_Init+0x25a>
 80033f2:	bf00      	nop
 80033f4:	58000080 	.word	0x58000080
 80033f8:	58024400 	.word	0x58024400
 80033fc:	58000400 	.word	0x58000400
 8003400:	58020000 	.word	0x58020000
 8003404:	58020400 	.word	0x58020400
 8003408:	58020800 	.word	0x58020800
 800340c:	58020c00 	.word	0x58020c00
 8003410:	58021000 	.word	0x58021000
 8003414:	58021400 	.word	0x58021400
 8003418:	58021800 	.word	0x58021800
 800341c:	58021c00 	.word	0x58021c00
 8003420:	58022400 	.word	0x58022400
 8003424:	2300      	movs	r3, #0
 8003426:	69fa      	ldr	r2, [r7, #28]
 8003428:	f002 0203 	and.w	r2, r2, #3
 800342c:	0092      	lsls	r2, r2, #2
 800342e:	4093      	lsls	r3, r2
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4313      	orrs	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003436:	4938      	ldr	r1, [pc, #224]	@ (8003518 <HAL_GPIO_Init+0x34c>)
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	089b      	lsrs	r3, r3, #2
 800343c:	3302      	adds	r3, #2
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003444:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	43db      	mvns	r3, r3
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4013      	ands	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	4313      	orrs	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800346a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003472:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	43db      	mvns	r3, r3
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4013      	ands	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	4313      	orrs	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003498:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	43db      	mvns	r3, r3
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4013      	ands	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	43db      	mvns	r3, r3
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	4013      	ands	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	3301      	adds	r3, #1
 80034f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	fa22 f303 	lsr.w	r3, r2, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	f47f ae6b 	bne.w	80031e0 <HAL_GPIO_Init+0x14>
  }
}
 800350a:	bf00      	nop
 800350c:	bf00      	nop
 800350e:	3724      	adds	r7, #36	@ 0x24
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	58000400 	.word	0x58000400

0800351c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	807b      	strh	r3, [r7, #2]
 8003528:	4613      	mov	r3, r2
 800352a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800352c:	787b      	ldrb	r3, [r7, #1]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003532:	887a      	ldrh	r2, [r7, #2]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003538:	e003      	b.n	8003542 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800353a:	887b      	ldrh	r3, [r7, #2]
 800353c:	041a      	lsls	r2, r3, #16
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	619a      	str	r2, [r3, #24]
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
	...

08003550 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003558:	4b19      	ldr	r3, [pc, #100]	@ (80035c0 <HAL_PWREx_ConfigSupply+0x70>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b04      	cmp	r3, #4
 8003562:	d00a      	beq.n	800357a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003564:	4b16      	ldr	r3, [pc, #88]	@ (80035c0 <HAL_PWREx_ConfigSupply+0x70>)
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	429a      	cmp	r2, r3
 8003570:	d001      	beq.n	8003576 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e01f      	b.n	80035b6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	e01d      	b.n	80035b6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800357a:	4b11      	ldr	r3, [pc, #68]	@ (80035c0 <HAL_PWREx_ConfigSupply+0x70>)
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	f023 0207 	bic.w	r2, r3, #7
 8003582:	490f      	ldr	r1, [pc, #60]	@ (80035c0 <HAL_PWREx_ConfigSupply+0x70>)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4313      	orrs	r3, r2
 8003588:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800358a:	f7fd ff1b 	bl	80013c4 <HAL_GetTick>
 800358e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003590:	e009      	b.n	80035a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003592:	f7fd ff17 	bl	80013c4 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80035a0:	d901      	bls.n	80035a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e007      	b.n	80035b6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80035a6:	4b06      	ldr	r3, [pc, #24]	@ (80035c0 <HAL_PWREx_ConfigSupply+0x70>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035b2:	d1ee      	bne.n	8003592 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	58024800 	.word	0x58024800

080035c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b08c      	sub	sp, #48	@ 0x30
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e3c8      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 8087 	beq.w	80036f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035e4:	4b88      	ldr	r3, [pc, #544]	@ (8003808 <HAL_RCC_OscConfig+0x244>)
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80035ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80035ee:	4b86      	ldr	r3, [pc, #536]	@ (8003808 <HAL_RCC_OscConfig+0x244>)
 80035f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80035f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035f6:	2b10      	cmp	r3, #16
 80035f8:	d007      	beq.n	800360a <HAL_RCC_OscConfig+0x46>
 80035fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035fc:	2b18      	cmp	r3, #24
 80035fe:	d110      	bne.n	8003622 <HAL_RCC_OscConfig+0x5e>
 8003600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003602:	f003 0303 	and.w	r3, r3, #3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d10b      	bne.n	8003622 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800360a:	4b7f      	ldr	r3, [pc, #508]	@ (8003808 <HAL_RCC_OscConfig+0x244>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d06c      	beq.n	80036f0 <HAL_RCC_OscConfig+0x12c>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d168      	bne.n	80036f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e3a2      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800362a:	d106      	bne.n	800363a <HAL_RCC_OscConfig+0x76>
 800362c:	4b76      	ldr	r3, [pc, #472]	@ (8003808 <HAL_RCC_OscConfig+0x244>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a75      	ldr	r2, [pc, #468]	@ (8003808 <HAL_RCC_OscConfig+0x244>)
 8003632:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003636:	6013      	str	r3, [r2, #0]
 8003638:	e02e      	b.n	8003698 <HAL_RCC_OscConfig+0xd4>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10c      	bne.n	800365c <HAL_RCC_OscConfig+0x98>
 8003642:	4b71      	ldr	r3, [pc, #452]	@ (8003808 <HAL_RCC_OscConfig+0x244>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a70      	ldr	r2, [pc, #448]	@ (8003808 <HAL_RCC_OscConfig+0x244>)
 8003648:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800364c:	6013      	str	r3, [r2, #0]
 800364e:	4b6e      	ldr	r3, [pc, #440]	@ (8003808 <HAL_RCC_OscConfig+0x244>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a6d      	ldr	r2, [pc, #436]	@ (8003808 <HAL_RCC_OscConfig+0x244>)
 8003654:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	e01d      	b.n	8003698 <HAL_RCC_OscConfig+0xd4>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003664:	d10c      	bne.n	8003680 <HAL_RCC_OscConfig+0xbc>
 8003666:	4b68      	ldr	r3, [pc, #416]	@ (8003808 <HAL_RCC_OscConfig+0x244>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a67      	ldr	r2, [pc, #412]	@ (8003808 <HAL_RCC_OscConfig+0x244>)
 800366c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	4b65      	ldr	r3, [pc, #404]	@ (8003808 <HAL_RCC_OscConfig+0x244>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a64      	ldr	r2, [pc, #400]	@ (8003808 <HAL_RCC_OscConfig+0x244>)
 8003678:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	e00b      	b.n	8003698 <HAL_RCC_OscConfig+0xd4>
 8003680:	4b61      	ldr	r3, [pc, #388]	@ (8003808 <HAL_RCC_OscConfig+0x244>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a60      	ldr	r2, [pc, #384]	@ (8003808 <HAL_RCC_OscConfig+0x244>)
 8003686:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800368a:	6013      	str	r3, [r2, #0]
 800368c:	4b5e      	ldr	r3, [pc, #376]	@ (8003808 <HAL_RCC_OscConfig+0x244>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a5d      	ldr	r2, [pc, #372]	@ (8003808 <HAL_RCC_OscConfig+0x244>)
 8003692:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003696:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d013      	beq.n	80036c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a0:	f7fd fe90 	bl	80013c4 <HAL_GetTick>
 80036a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036a8:	f7fd fe8c 	bl	80013c4 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b64      	cmp	r3, #100	@ 0x64
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e356      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036ba:	4b53      	ldr	r3, [pc, #332]	@ (8003808 <HAL_RCC_OscConfig+0x244>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0f0      	beq.n	80036a8 <HAL_RCC_OscConfig+0xe4>
 80036c6:	e014      	b.n	80036f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c8:	f7fd fe7c 	bl	80013c4 <HAL_GetTick>
 80036cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036d0:	f7fd fe78 	bl	80013c4 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b64      	cmp	r3, #100	@ 0x64
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e342      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80036e2:	4b49      	ldr	r3, [pc, #292]	@ (8003808 <HAL_RCC_OscConfig+0x244>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f0      	bne.n	80036d0 <HAL_RCC_OscConfig+0x10c>
 80036ee:	e000      	b.n	80036f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 808c 	beq.w	8003818 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003700:	4b41      	ldr	r3, [pc, #260]	@ (8003808 <HAL_RCC_OscConfig+0x244>)
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003708:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800370a:	4b3f      	ldr	r3, [pc, #252]	@ (8003808 <HAL_RCC_OscConfig+0x244>)
 800370c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800370e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d007      	beq.n	8003726 <HAL_RCC_OscConfig+0x162>
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	2b18      	cmp	r3, #24
 800371a:	d137      	bne.n	800378c <HAL_RCC_OscConfig+0x1c8>
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	f003 0303 	and.w	r3, r3, #3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d132      	bne.n	800378c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003726:	4b38      	ldr	r3, [pc, #224]	@ (8003808 <HAL_RCC_OscConfig+0x244>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	2b00      	cmp	r3, #0
 8003730:	d005      	beq.n	800373e <HAL_RCC_OscConfig+0x17a>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e314      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800373e:	4b32      	ldr	r3, [pc, #200]	@ (8003808 <HAL_RCC_OscConfig+0x244>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f023 0219 	bic.w	r2, r3, #25
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	492f      	ldr	r1, [pc, #188]	@ (8003808 <HAL_RCC_OscConfig+0x244>)
 800374c:	4313      	orrs	r3, r2
 800374e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003750:	f7fd fe38 	bl	80013c4 <HAL_GetTick>
 8003754:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003758:	f7fd fe34 	bl	80013c4 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e2fe      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800376a:	4b27      	ldr	r3, [pc, #156]	@ (8003808 <HAL_RCC_OscConfig+0x244>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0304 	and.w	r3, r3, #4
 8003772:	2b00      	cmp	r3, #0
 8003774:	d0f0      	beq.n	8003758 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003776:	4b24      	ldr	r3, [pc, #144]	@ (8003808 <HAL_RCC_OscConfig+0x244>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	061b      	lsls	r3, r3, #24
 8003784:	4920      	ldr	r1, [pc, #128]	@ (8003808 <HAL_RCC_OscConfig+0x244>)
 8003786:	4313      	orrs	r3, r2
 8003788:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800378a:	e045      	b.n	8003818 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d026      	beq.n	80037e2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003794:	4b1c      	ldr	r3, [pc, #112]	@ (8003808 <HAL_RCC_OscConfig+0x244>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f023 0219 	bic.w	r2, r3, #25
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	4919      	ldr	r1, [pc, #100]	@ (8003808 <HAL_RCC_OscConfig+0x244>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a6:	f7fd fe0d 	bl	80013c4 <HAL_GetTick>
 80037aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037ac:	e008      	b.n	80037c0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ae:	f7fd fe09 	bl	80013c4 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e2d3      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037c0:	4b11      	ldr	r3, [pc, #68]	@ (8003808 <HAL_RCC_OscConfig+0x244>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0304 	and.w	r3, r3, #4
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0f0      	beq.n	80037ae <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037cc:	4b0e      	ldr	r3, [pc, #56]	@ (8003808 <HAL_RCC_OscConfig+0x244>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	061b      	lsls	r3, r3, #24
 80037da:	490b      	ldr	r1, [pc, #44]	@ (8003808 <HAL_RCC_OscConfig+0x244>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	604b      	str	r3, [r1, #4]
 80037e0:	e01a      	b.n	8003818 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037e2:	4b09      	ldr	r3, [pc, #36]	@ (8003808 <HAL_RCC_OscConfig+0x244>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a08      	ldr	r2, [pc, #32]	@ (8003808 <HAL_RCC_OscConfig+0x244>)
 80037e8:	f023 0301 	bic.w	r3, r3, #1
 80037ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ee:	f7fd fde9 	bl	80013c4 <HAL_GetTick>
 80037f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80037f4:	e00a      	b.n	800380c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037f6:	f7fd fde5 	bl	80013c4 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d903      	bls.n	800380c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e2af      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a4>
 8003808:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800380c:	4b96      	ldr	r3, [pc, #600]	@ (8003a68 <HAL_RCC_OscConfig+0x4a4>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0304 	and.w	r3, r3, #4
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1ee      	bne.n	80037f6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0310 	and.w	r3, r3, #16
 8003820:	2b00      	cmp	r3, #0
 8003822:	d06a      	beq.n	80038fa <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003824:	4b90      	ldr	r3, [pc, #576]	@ (8003a68 <HAL_RCC_OscConfig+0x4a4>)
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800382c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800382e:	4b8e      	ldr	r3, [pc, #568]	@ (8003a68 <HAL_RCC_OscConfig+0x4a4>)
 8003830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003832:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	2b08      	cmp	r3, #8
 8003838:	d007      	beq.n	800384a <HAL_RCC_OscConfig+0x286>
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	2b18      	cmp	r3, #24
 800383e:	d11b      	bne.n	8003878 <HAL_RCC_OscConfig+0x2b4>
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	2b01      	cmp	r3, #1
 8003848:	d116      	bne.n	8003878 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800384a:	4b87      	ldr	r3, [pc, #540]	@ (8003a68 <HAL_RCC_OscConfig+0x4a4>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003852:	2b00      	cmp	r3, #0
 8003854:	d005      	beq.n	8003862 <HAL_RCC_OscConfig+0x29e>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	2b80      	cmp	r3, #128	@ 0x80
 800385c:	d001      	beq.n	8003862 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e282      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003862:	4b81      	ldr	r3, [pc, #516]	@ (8003a68 <HAL_RCC_OscConfig+0x4a4>)
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	061b      	lsls	r3, r3, #24
 8003870:	497d      	ldr	r1, [pc, #500]	@ (8003a68 <HAL_RCC_OscConfig+0x4a4>)
 8003872:	4313      	orrs	r3, r2
 8003874:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003876:	e040      	b.n	80038fa <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d023      	beq.n	80038c8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003880:	4b79      	ldr	r3, [pc, #484]	@ (8003a68 <HAL_RCC_OscConfig+0x4a4>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a78      	ldr	r2, [pc, #480]	@ (8003a68 <HAL_RCC_OscConfig+0x4a4>)
 8003886:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800388a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388c:	f7fd fd9a 	bl	80013c4 <HAL_GetTick>
 8003890:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003894:	f7fd fd96 	bl	80013c4 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e260      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038a6:	4b70      	ldr	r3, [pc, #448]	@ (8003a68 <HAL_RCC_OscConfig+0x4a4>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0f0      	beq.n	8003894 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038b2:	4b6d      	ldr	r3, [pc, #436]	@ (8003a68 <HAL_RCC_OscConfig+0x4a4>)
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	061b      	lsls	r3, r3, #24
 80038c0:	4969      	ldr	r1, [pc, #420]	@ (8003a68 <HAL_RCC_OscConfig+0x4a4>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	60cb      	str	r3, [r1, #12]
 80038c6:	e018      	b.n	80038fa <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80038c8:	4b67      	ldr	r3, [pc, #412]	@ (8003a68 <HAL_RCC_OscConfig+0x4a4>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a66      	ldr	r2, [pc, #408]	@ (8003a68 <HAL_RCC_OscConfig+0x4a4>)
 80038ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d4:	f7fd fd76 	bl	80013c4 <HAL_GetTick>
 80038d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80038dc:	f7fd fd72 	bl	80013c4 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e23c      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80038ee:	4b5e      	ldr	r3, [pc, #376]	@ (8003a68 <HAL_RCC_OscConfig+0x4a4>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f0      	bne.n	80038dc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	2b00      	cmp	r3, #0
 8003904:	d036      	beq.n	8003974 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d019      	beq.n	8003942 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800390e:	4b56      	ldr	r3, [pc, #344]	@ (8003a68 <HAL_RCC_OscConfig+0x4a4>)
 8003910:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003912:	4a55      	ldr	r2, [pc, #340]	@ (8003a68 <HAL_RCC_OscConfig+0x4a4>)
 8003914:	f043 0301 	orr.w	r3, r3, #1
 8003918:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800391a:	f7fd fd53 	bl	80013c4 <HAL_GetTick>
 800391e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003920:	e008      	b.n	8003934 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003922:	f7fd fd4f 	bl	80013c4 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e219      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003934:	4b4c      	ldr	r3, [pc, #304]	@ (8003a68 <HAL_RCC_OscConfig+0x4a4>)
 8003936:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0f0      	beq.n	8003922 <HAL_RCC_OscConfig+0x35e>
 8003940:	e018      	b.n	8003974 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003942:	4b49      	ldr	r3, [pc, #292]	@ (8003a68 <HAL_RCC_OscConfig+0x4a4>)
 8003944:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003946:	4a48      	ldr	r2, [pc, #288]	@ (8003a68 <HAL_RCC_OscConfig+0x4a4>)
 8003948:	f023 0301 	bic.w	r3, r3, #1
 800394c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394e:	f7fd fd39 	bl	80013c4 <HAL_GetTick>
 8003952:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003954:	e008      	b.n	8003968 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003956:	f7fd fd35 	bl	80013c4 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e1ff      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003968:	4b3f      	ldr	r3, [pc, #252]	@ (8003a68 <HAL_RCC_OscConfig+0x4a4>)
 800396a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1f0      	bne.n	8003956 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0320 	and.w	r3, r3, #32
 800397c:	2b00      	cmp	r3, #0
 800397e:	d036      	beq.n	80039ee <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d019      	beq.n	80039bc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003988:	4b37      	ldr	r3, [pc, #220]	@ (8003a68 <HAL_RCC_OscConfig+0x4a4>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a36      	ldr	r2, [pc, #216]	@ (8003a68 <HAL_RCC_OscConfig+0x4a4>)
 800398e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003992:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003994:	f7fd fd16 	bl	80013c4 <HAL_GetTick>
 8003998:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800399c:	f7fd fd12 	bl	80013c4 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e1dc      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80039ae:	4b2e      	ldr	r3, [pc, #184]	@ (8003a68 <HAL_RCC_OscConfig+0x4a4>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0f0      	beq.n	800399c <HAL_RCC_OscConfig+0x3d8>
 80039ba:	e018      	b.n	80039ee <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80039bc:	4b2a      	ldr	r3, [pc, #168]	@ (8003a68 <HAL_RCC_OscConfig+0x4a4>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a29      	ldr	r2, [pc, #164]	@ (8003a68 <HAL_RCC_OscConfig+0x4a4>)
 80039c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80039c6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80039c8:	f7fd fcfc 	bl	80013c4 <HAL_GetTick>
 80039cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80039ce:	e008      	b.n	80039e2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039d0:	f7fd fcf8 	bl	80013c4 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e1c2      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80039e2:	4b21      	ldr	r3, [pc, #132]	@ (8003a68 <HAL_RCC_OscConfig+0x4a4>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1f0      	bne.n	80039d0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0304 	and.w	r3, r3, #4
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 8086 	beq.w	8003b08 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80039fc:	4b1b      	ldr	r3, [pc, #108]	@ (8003a6c <HAL_RCC_OscConfig+0x4a8>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a1a      	ldr	r2, [pc, #104]	@ (8003a6c <HAL_RCC_OscConfig+0x4a8>)
 8003a02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a08:	f7fd fcdc 	bl	80013c4 <HAL_GetTick>
 8003a0c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a10:	f7fd fcd8 	bl	80013c4 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b64      	cmp	r3, #100	@ 0x64
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e1a2      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a22:	4b12      	ldr	r3, [pc, #72]	@ (8003a6c <HAL_RCC_OscConfig+0x4a8>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0f0      	beq.n	8003a10 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d106      	bne.n	8003a44 <HAL_RCC_OscConfig+0x480>
 8003a36:	4b0c      	ldr	r3, [pc, #48]	@ (8003a68 <HAL_RCC_OscConfig+0x4a4>)
 8003a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a3a:	4a0b      	ldr	r2, [pc, #44]	@ (8003a68 <HAL_RCC_OscConfig+0x4a4>)
 8003a3c:	f043 0301 	orr.w	r3, r3, #1
 8003a40:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a42:	e032      	b.n	8003aaa <HAL_RCC_OscConfig+0x4e6>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d111      	bne.n	8003a70 <HAL_RCC_OscConfig+0x4ac>
 8003a4c:	4b06      	ldr	r3, [pc, #24]	@ (8003a68 <HAL_RCC_OscConfig+0x4a4>)
 8003a4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a50:	4a05      	ldr	r2, [pc, #20]	@ (8003a68 <HAL_RCC_OscConfig+0x4a4>)
 8003a52:	f023 0301 	bic.w	r3, r3, #1
 8003a56:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a58:	4b03      	ldr	r3, [pc, #12]	@ (8003a68 <HAL_RCC_OscConfig+0x4a4>)
 8003a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a5c:	4a02      	ldr	r2, [pc, #8]	@ (8003a68 <HAL_RCC_OscConfig+0x4a4>)
 8003a5e:	f023 0304 	bic.w	r3, r3, #4
 8003a62:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a64:	e021      	b.n	8003aaa <HAL_RCC_OscConfig+0x4e6>
 8003a66:	bf00      	nop
 8003a68:	58024400 	.word	0x58024400
 8003a6c:	58024800 	.word	0x58024800
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	2b05      	cmp	r3, #5
 8003a76:	d10c      	bne.n	8003a92 <HAL_RCC_OscConfig+0x4ce>
 8003a78:	4b83      	ldr	r3, [pc, #524]	@ (8003c88 <HAL_RCC_OscConfig+0x6c4>)
 8003a7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a7c:	4a82      	ldr	r2, [pc, #520]	@ (8003c88 <HAL_RCC_OscConfig+0x6c4>)
 8003a7e:	f043 0304 	orr.w	r3, r3, #4
 8003a82:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a84:	4b80      	ldr	r3, [pc, #512]	@ (8003c88 <HAL_RCC_OscConfig+0x6c4>)
 8003a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a88:	4a7f      	ldr	r2, [pc, #508]	@ (8003c88 <HAL_RCC_OscConfig+0x6c4>)
 8003a8a:	f043 0301 	orr.w	r3, r3, #1
 8003a8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a90:	e00b      	b.n	8003aaa <HAL_RCC_OscConfig+0x4e6>
 8003a92:	4b7d      	ldr	r3, [pc, #500]	@ (8003c88 <HAL_RCC_OscConfig+0x6c4>)
 8003a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a96:	4a7c      	ldr	r2, [pc, #496]	@ (8003c88 <HAL_RCC_OscConfig+0x6c4>)
 8003a98:	f023 0301 	bic.w	r3, r3, #1
 8003a9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a9e:	4b7a      	ldr	r3, [pc, #488]	@ (8003c88 <HAL_RCC_OscConfig+0x6c4>)
 8003aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa2:	4a79      	ldr	r2, [pc, #484]	@ (8003c88 <HAL_RCC_OscConfig+0x6c4>)
 8003aa4:	f023 0304 	bic.w	r3, r3, #4
 8003aa8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d015      	beq.n	8003ade <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab2:	f7fd fc87 	bl	80013c4 <HAL_GetTick>
 8003ab6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ab8:	e00a      	b.n	8003ad0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aba:	f7fd fc83 	bl	80013c4 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e14b      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ad0:	4b6d      	ldr	r3, [pc, #436]	@ (8003c88 <HAL_RCC_OscConfig+0x6c4>)
 8003ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0ee      	beq.n	8003aba <HAL_RCC_OscConfig+0x4f6>
 8003adc:	e014      	b.n	8003b08 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ade:	f7fd fc71 	bl	80013c4 <HAL_GetTick>
 8003ae2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ae4:	e00a      	b.n	8003afc <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae6:	f7fd fc6d 	bl	80013c4 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e135      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003afc:	4b62      	ldr	r3, [pc, #392]	@ (8003c88 <HAL_RCC_OscConfig+0x6c4>)
 8003afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1ee      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 812a 	beq.w	8003d66 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003b12:	4b5d      	ldr	r3, [pc, #372]	@ (8003c88 <HAL_RCC_OscConfig+0x6c4>)
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b1a:	2b18      	cmp	r3, #24
 8003b1c:	f000 80ba 	beq.w	8003c94 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	f040 8095 	bne.w	8003c54 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b2a:	4b57      	ldr	r3, [pc, #348]	@ (8003c88 <HAL_RCC_OscConfig+0x6c4>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a56      	ldr	r2, [pc, #344]	@ (8003c88 <HAL_RCC_OscConfig+0x6c4>)
 8003b30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b36:	f7fd fc45 	bl	80013c4 <HAL_GetTick>
 8003b3a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b3c:	e008      	b.n	8003b50 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b3e:	f7fd fc41 	bl	80013c4 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e10b      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b50:	4b4d      	ldr	r3, [pc, #308]	@ (8003c88 <HAL_RCC_OscConfig+0x6c4>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1f0      	bne.n	8003b3e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b5c:	4b4a      	ldr	r3, [pc, #296]	@ (8003c88 <HAL_RCC_OscConfig+0x6c4>)
 8003b5e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b60:	4b4a      	ldr	r3, [pc, #296]	@ (8003c8c <HAL_RCC_OscConfig+0x6c8>)
 8003b62:	4013      	ands	r3, r2
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003b6c:	0112      	lsls	r2, r2, #4
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	4945      	ldr	r1, [pc, #276]	@ (8003c88 <HAL_RCC_OscConfig+0x6c4>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	628b      	str	r3, [r1, #40]	@ 0x28
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b84:	3b01      	subs	r3, #1
 8003b86:	025b      	lsls	r3, r3, #9
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b90:	3b01      	subs	r3, #1
 8003b92:	041b      	lsls	r3, r3, #16
 8003b94:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	061b      	lsls	r3, r3, #24
 8003ba2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003ba6:	4938      	ldr	r1, [pc, #224]	@ (8003c88 <HAL_RCC_OscConfig+0x6c4>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003bac:	4b36      	ldr	r3, [pc, #216]	@ (8003c88 <HAL_RCC_OscConfig+0x6c4>)
 8003bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb0:	4a35      	ldr	r2, [pc, #212]	@ (8003c88 <HAL_RCC_OscConfig+0x6c4>)
 8003bb2:	f023 0301 	bic.w	r3, r3, #1
 8003bb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003bb8:	4b33      	ldr	r3, [pc, #204]	@ (8003c88 <HAL_RCC_OscConfig+0x6c4>)
 8003bba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bbc:	4b34      	ldr	r3, [pc, #208]	@ (8003c90 <HAL_RCC_OscConfig+0x6cc>)
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003bc4:	00d2      	lsls	r2, r2, #3
 8003bc6:	4930      	ldr	r1, [pc, #192]	@ (8003c88 <HAL_RCC_OscConfig+0x6c4>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003bcc:	4b2e      	ldr	r3, [pc, #184]	@ (8003c88 <HAL_RCC_OscConfig+0x6c4>)
 8003bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd0:	f023 020c 	bic.w	r2, r3, #12
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd8:	492b      	ldr	r1, [pc, #172]	@ (8003c88 <HAL_RCC_OscConfig+0x6c4>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003bde:	4b2a      	ldr	r3, [pc, #168]	@ (8003c88 <HAL_RCC_OscConfig+0x6c4>)
 8003be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be2:	f023 0202 	bic.w	r2, r3, #2
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bea:	4927      	ldr	r1, [pc, #156]	@ (8003c88 <HAL_RCC_OscConfig+0x6c4>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003bf0:	4b25      	ldr	r3, [pc, #148]	@ (8003c88 <HAL_RCC_OscConfig+0x6c4>)
 8003bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf4:	4a24      	ldr	r2, [pc, #144]	@ (8003c88 <HAL_RCC_OscConfig+0x6c4>)
 8003bf6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bfc:	4b22      	ldr	r3, [pc, #136]	@ (8003c88 <HAL_RCC_OscConfig+0x6c4>)
 8003bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c00:	4a21      	ldr	r2, [pc, #132]	@ (8003c88 <HAL_RCC_OscConfig+0x6c4>)
 8003c02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003c08:	4b1f      	ldr	r3, [pc, #124]	@ (8003c88 <HAL_RCC_OscConfig+0x6c4>)
 8003c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0c:	4a1e      	ldr	r2, [pc, #120]	@ (8003c88 <HAL_RCC_OscConfig+0x6c4>)
 8003c0e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003c14:	4b1c      	ldr	r3, [pc, #112]	@ (8003c88 <HAL_RCC_OscConfig+0x6c4>)
 8003c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c18:	4a1b      	ldr	r2, [pc, #108]	@ (8003c88 <HAL_RCC_OscConfig+0x6c4>)
 8003c1a:	f043 0301 	orr.w	r3, r3, #1
 8003c1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c20:	4b19      	ldr	r3, [pc, #100]	@ (8003c88 <HAL_RCC_OscConfig+0x6c4>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a18      	ldr	r2, [pc, #96]	@ (8003c88 <HAL_RCC_OscConfig+0x6c4>)
 8003c26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2c:	f7fd fbca 	bl	80013c4 <HAL_GetTick>
 8003c30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c34:	f7fd fbc6 	bl	80013c4 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e090      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c46:	4b10      	ldr	r3, [pc, #64]	@ (8003c88 <HAL_RCC_OscConfig+0x6c4>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0f0      	beq.n	8003c34 <HAL_RCC_OscConfig+0x670>
 8003c52:	e088      	b.n	8003d66 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c54:	4b0c      	ldr	r3, [pc, #48]	@ (8003c88 <HAL_RCC_OscConfig+0x6c4>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a0b      	ldr	r2, [pc, #44]	@ (8003c88 <HAL_RCC_OscConfig+0x6c4>)
 8003c5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c60:	f7fd fbb0 	bl	80013c4 <HAL_GetTick>
 8003c64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c66:	e008      	b.n	8003c7a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c68:	f7fd fbac 	bl	80013c4 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e076      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c7a:	4b03      	ldr	r3, [pc, #12]	@ (8003c88 <HAL_RCC_OscConfig+0x6c4>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1f0      	bne.n	8003c68 <HAL_RCC_OscConfig+0x6a4>
 8003c86:	e06e      	b.n	8003d66 <HAL_RCC_OscConfig+0x7a2>
 8003c88:	58024400 	.word	0x58024400
 8003c8c:	fffffc0c 	.word	0xfffffc0c
 8003c90:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003c94:	4b36      	ldr	r3, [pc, #216]	@ (8003d70 <HAL_RCC_OscConfig+0x7ac>)
 8003c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c98:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003c9a:	4b35      	ldr	r3, [pc, #212]	@ (8003d70 <HAL_RCC_OscConfig+0x7ac>)
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d031      	beq.n	8003d0c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	f003 0203 	and.w	r2, r3, #3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d12a      	bne.n	8003d0c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	091b      	lsrs	r3, r3, #4
 8003cba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d122      	bne.n	8003d0c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d11a      	bne.n	8003d0c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	0a5b      	lsrs	r3, r3, #9
 8003cda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ce2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d111      	bne.n	8003d0c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	0c1b      	lsrs	r3, r3, #16
 8003cec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cf4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d108      	bne.n	8003d0c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	0e1b      	lsrs	r3, r3, #24
 8003cfe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d06:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d001      	beq.n	8003d10 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e02b      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003d10:	4b17      	ldr	r3, [pc, #92]	@ (8003d70 <HAL_RCC_OscConfig+0x7ac>)
 8003d12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d14:	08db      	lsrs	r3, r3, #3
 8003d16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d1a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d01f      	beq.n	8003d66 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003d26:	4b12      	ldr	r3, [pc, #72]	@ (8003d70 <HAL_RCC_OscConfig+0x7ac>)
 8003d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2a:	4a11      	ldr	r2, [pc, #68]	@ (8003d70 <HAL_RCC_OscConfig+0x7ac>)
 8003d2c:	f023 0301 	bic.w	r3, r3, #1
 8003d30:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d32:	f7fd fb47 	bl	80013c4 <HAL_GetTick>
 8003d36:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003d38:	bf00      	nop
 8003d3a:	f7fd fb43 	bl	80013c4 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d0f9      	beq.n	8003d3a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d46:	4b0a      	ldr	r3, [pc, #40]	@ (8003d70 <HAL_RCC_OscConfig+0x7ac>)
 8003d48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003d74 <HAL_RCC_OscConfig+0x7b0>)
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003d52:	00d2      	lsls	r2, r2, #3
 8003d54:	4906      	ldr	r1, [pc, #24]	@ (8003d70 <HAL_RCC_OscConfig+0x7ac>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003d5a:	4b05      	ldr	r3, [pc, #20]	@ (8003d70 <HAL_RCC_OscConfig+0x7ac>)
 8003d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d5e:	4a04      	ldr	r2, [pc, #16]	@ (8003d70 <HAL_RCC_OscConfig+0x7ac>)
 8003d60:	f043 0301 	orr.w	r3, r3, #1
 8003d64:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3730      	adds	r7, #48	@ 0x30
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	58024400 	.word	0x58024400
 8003d74:	ffff0007 	.word	0xffff0007

08003d78 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e19c      	b.n	80040c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d8c:	4b8a      	ldr	r3, [pc, #552]	@ (8003fb8 <HAL_RCC_ClockConfig+0x240>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 030f 	and.w	r3, r3, #15
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d910      	bls.n	8003dbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d9a:	4b87      	ldr	r3, [pc, #540]	@ (8003fb8 <HAL_RCC_ClockConfig+0x240>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f023 020f 	bic.w	r2, r3, #15
 8003da2:	4985      	ldr	r1, [pc, #532]	@ (8003fb8 <HAL_RCC_ClockConfig+0x240>)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003daa:	4b83      	ldr	r3, [pc, #524]	@ (8003fb8 <HAL_RCC_ClockConfig+0x240>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d001      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e184      	b.n	80040c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d010      	beq.n	8003dea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	691a      	ldr	r2, [r3, #16]
 8003dcc:	4b7b      	ldr	r3, [pc, #492]	@ (8003fbc <HAL_RCC_ClockConfig+0x244>)
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d908      	bls.n	8003dea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003dd8:	4b78      	ldr	r3, [pc, #480]	@ (8003fbc <HAL_RCC_ClockConfig+0x244>)
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	4975      	ldr	r1, [pc, #468]	@ (8003fbc <HAL_RCC_ClockConfig+0x244>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0308 	and.w	r3, r3, #8
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d010      	beq.n	8003e18 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	695a      	ldr	r2, [r3, #20]
 8003dfa:	4b70      	ldr	r3, [pc, #448]	@ (8003fbc <HAL_RCC_ClockConfig+0x244>)
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d908      	bls.n	8003e18 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003e06:	4b6d      	ldr	r3, [pc, #436]	@ (8003fbc <HAL_RCC_ClockConfig+0x244>)
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	496a      	ldr	r1, [pc, #424]	@ (8003fbc <HAL_RCC_ClockConfig+0x244>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0310 	and.w	r3, r3, #16
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d010      	beq.n	8003e46 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	699a      	ldr	r2, [r3, #24]
 8003e28:	4b64      	ldr	r3, [pc, #400]	@ (8003fbc <HAL_RCC_ClockConfig+0x244>)
 8003e2a:	69db      	ldr	r3, [r3, #28]
 8003e2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d908      	bls.n	8003e46 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e34:	4b61      	ldr	r3, [pc, #388]	@ (8003fbc <HAL_RCC_ClockConfig+0x244>)
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	495e      	ldr	r1, [pc, #376]	@ (8003fbc <HAL_RCC_ClockConfig+0x244>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0320 	and.w	r3, r3, #32
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d010      	beq.n	8003e74 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	69da      	ldr	r2, [r3, #28]
 8003e56:	4b59      	ldr	r3, [pc, #356]	@ (8003fbc <HAL_RCC_ClockConfig+0x244>)
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d908      	bls.n	8003e74 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003e62:	4b56      	ldr	r3, [pc, #344]	@ (8003fbc <HAL_RCC_ClockConfig+0x244>)
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	4953      	ldr	r1, [pc, #332]	@ (8003fbc <HAL_RCC_ClockConfig+0x244>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d010      	beq.n	8003ea2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68da      	ldr	r2, [r3, #12]
 8003e84:	4b4d      	ldr	r3, [pc, #308]	@ (8003fbc <HAL_RCC_ClockConfig+0x244>)
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	f003 030f 	and.w	r3, r3, #15
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d908      	bls.n	8003ea2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e90:	4b4a      	ldr	r3, [pc, #296]	@ (8003fbc <HAL_RCC_ClockConfig+0x244>)
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	f023 020f 	bic.w	r2, r3, #15
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	4947      	ldr	r1, [pc, #284]	@ (8003fbc <HAL_RCC_ClockConfig+0x244>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d055      	beq.n	8003f5a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003eae:	4b43      	ldr	r3, [pc, #268]	@ (8003fbc <HAL_RCC_ClockConfig+0x244>)
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	4940      	ldr	r1, [pc, #256]	@ (8003fbc <HAL_RCC_ClockConfig+0x244>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d107      	bne.n	8003ed8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ec8:	4b3c      	ldr	r3, [pc, #240]	@ (8003fbc <HAL_RCC_ClockConfig+0x244>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d121      	bne.n	8003f18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e0f6      	b.n	80040c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	2b03      	cmp	r3, #3
 8003ede:	d107      	bne.n	8003ef0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ee0:	4b36      	ldr	r3, [pc, #216]	@ (8003fbc <HAL_RCC_ClockConfig+0x244>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d115      	bne.n	8003f18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e0ea      	b.n	80040c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d107      	bne.n	8003f08 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ef8:	4b30      	ldr	r3, [pc, #192]	@ (8003fbc <HAL_RCC_ClockConfig+0x244>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d109      	bne.n	8003f18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e0de      	b.n	80040c6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f08:	4b2c      	ldr	r3, [pc, #176]	@ (8003fbc <HAL_RCC_ClockConfig+0x244>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e0d6      	b.n	80040c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f18:	4b28      	ldr	r3, [pc, #160]	@ (8003fbc <HAL_RCC_ClockConfig+0x244>)
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	f023 0207 	bic.w	r2, r3, #7
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	4925      	ldr	r1, [pc, #148]	@ (8003fbc <HAL_RCC_ClockConfig+0x244>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f2a:	f7fd fa4b 	bl	80013c4 <HAL_GetTick>
 8003f2e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f30:	e00a      	b.n	8003f48 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f32:	f7fd fa47 	bl	80013c4 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e0be      	b.n	80040c6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f48:	4b1c      	ldr	r3, [pc, #112]	@ (8003fbc <HAL_RCC_ClockConfig+0x244>)
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	00db      	lsls	r3, r3, #3
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d1eb      	bne.n	8003f32 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d010      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68da      	ldr	r2, [r3, #12]
 8003f6a:	4b14      	ldr	r3, [pc, #80]	@ (8003fbc <HAL_RCC_ClockConfig+0x244>)
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	f003 030f 	and.w	r3, r3, #15
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d208      	bcs.n	8003f88 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f76:	4b11      	ldr	r3, [pc, #68]	@ (8003fbc <HAL_RCC_ClockConfig+0x244>)
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	f023 020f 	bic.w	r2, r3, #15
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	490e      	ldr	r1, [pc, #56]	@ (8003fbc <HAL_RCC_ClockConfig+0x244>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f88:	4b0b      	ldr	r3, [pc, #44]	@ (8003fb8 <HAL_RCC_ClockConfig+0x240>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 030f 	and.w	r3, r3, #15
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d214      	bcs.n	8003fc0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f96:	4b08      	ldr	r3, [pc, #32]	@ (8003fb8 <HAL_RCC_ClockConfig+0x240>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f023 020f 	bic.w	r2, r3, #15
 8003f9e:	4906      	ldr	r1, [pc, #24]	@ (8003fb8 <HAL_RCC_ClockConfig+0x240>)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa6:	4b04      	ldr	r3, [pc, #16]	@ (8003fb8 <HAL_RCC_ClockConfig+0x240>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 030f 	and.w	r3, r3, #15
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d005      	beq.n	8003fc0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e086      	b.n	80040c6 <HAL_RCC_ClockConfig+0x34e>
 8003fb8:	52002000 	.word	0x52002000
 8003fbc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d010      	beq.n	8003fee <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	691a      	ldr	r2, [r3, #16]
 8003fd0:	4b3f      	ldr	r3, [pc, #252]	@ (80040d0 <HAL_RCC_ClockConfig+0x358>)
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d208      	bcs.n	8003fee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003fdc:	4b3c      	ldr	r3, [pc, #240]	@ (80040d0 <HAL_RCC_ClockConfig+0x358>)
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	4939      	ldr	r1, [pc, #228]	@ (80040d0 <HAL_RCC_ClockConfig+0x358>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0308 	and.w	r3, r3, #8
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d010      	beq.n	800401c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	695a      	ldr	r2, [r3, #20]
 8003ffe:	4b34      	ldr	r3, [pc, #208]	@ (80040d0 <HAL_RCC_ClockConfig+0x358>)
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004006:	429a      	cmp	r2, r3
 8004008:	d208      	bcs.n	800401c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800400a:	4b31      	ldr	r3, [pc, #196]	@ (80040d0 <HAL_RCC_ClockConfig+0x358>)
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	492e      	ldr	r1, [pc, #184]	@ (80040d0 <HAL_RCC_ClockConfig+0x358>)
 8004018:	4313      	orrs	r3, r2
 800401a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0310 	and.w	r3, r3, #16
 8004024:	2b00      	cmp	r3, #0
 8004026:	d010      	beq.n	800404a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	699a      	ldr	r2, [r3, #24]
 800402c:	4b28      	ldr	r3, [pc, #160]	@ (80040d0 <HAL_RCC_ClockConfig+0x358>)
 800402e:	69db      	ldr	r3, [r3, #28]
 8004030:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004034:	429a      	cmp	r2, r3
 8004036:	d208      	bcs.n	800404a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004038:	4b25      	ldr	r3, [pc, #148]	@ (80040d0 <HAL_RCC_ClockConfig+0x358>)
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	4922      	ldr	r1, [pc, #136]	@ (80040d0 <HAL_RCC_ClockConfig+0x358>)
 8004046:	4313      	orrs	r3, r2
 8004048:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0320 	and.w	r3, r3, #32
 8004052:	2b00      	cmp	r3, #0
 8004054:	d010      	beq.n	8004078 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	69da      	ldr	r2, [r3, #28]
 800405a:	4b1d      	ldr	r3, [pc, #116]	@ (80040d0 <HAL_RCC_ClockConfig+0x358>)
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004062:	429a      	cmp	r2, r3
 8004064:	d208      	bcs.n	8004078 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004066:	4b1a      	ldr	r3, [pc, #104]	@ (80040d0 <HAL_RCC_ClockConfig+0x358>)
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	4917      	ldr	r1, [pc, #92]	@ (80040d0 <HAL_RCC_ClockConfig+0x358>)
 8004074:	4313      	orrs	r3, r2
 8004076:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004078:	f000 f834 	bl	80040e4 <HAL_RCC_GetSysClockFreq>
 800407c:	4602      	mov	r2, r0
 800407e:	4b14      	ldr	r3, [pc, #80]	@ (80040d0 <HAL_RCC_ClockConfig+0x358>)
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	0a1b      	lsrs	r3, r3, #8
 8004084:	f003 030f 	and.w	r3, r3, #15
 8004088:	4912      	ldr	r1, [pc, #72]	@ (80040d4 <HAL_RCC_ClockConfig+0x35c>)
 800408a:	5ccb      	ldrb	r3, [r1, r3]
 800408c:	f003 031f 	and.w	r3, r3, #31
 8004090:	fa22 f303 	lsr.w	r3, r2, r3
 8004094:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004096:	4b0e      	ldr	r3, [pc, #56]	@ (80040d0 <HAL_RCC_ClockConfig+0x358>)
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	f003 030f 	and.w	r3, r3, #15
 800409e:	4a0d      	ldr	r2, [pc, #52]	@ (80040d4 <HAL_RCC_ClockConfig+0x35c>)
 80040a0:	5cd3      	ldrb	r3, [r2, r3]
 80040a2:	f003 031f 	and.w	r3, r3, #31
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	fa22 f303 	lsr.w	r3, r2, r3
 80040ac:	4a0a      	ldr	r2, [pc, #40]	@ (80040d8 <HAL_RCC_ClockConfig+0x360>)
 80040ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80040b0:	4a0a      	ldr	r2, [pc, #40]	@ (80040dc <HAL_RCC_ClockConfig+0x364>)
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80040b6:	4b0a      	ldr	r3, [pc, #40]	@ (80040e0 <HAL_RCC_ClockConfig+0x368>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fc fb9c 	bl	80007f8 <HAL_InitTick>
 80040c0:	4603      	mov	r3, r0
 80040c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80040c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3718      	adds	r7, #24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	58024400 	.word	0x58024400
 80040d4:	0801aad0 	.word	0x0801aad0
 80040d8:	24000004 	.word	0x24000004
 80040dc:	24000000 	.word	0x24000000
 80040e0:	24000008 	.word	0x24000008

080040e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b089      	sub	sp, #36	@ 0x24
 80040e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040ea:	4bb3      	ldr	r3, [pc, #716]	@ (80043b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040f2:	2b18      	cmp	r3, #24
 80040f4:	f200 8155 	bhi.w	80043a2 <HAL_RCC_GetSysClockFreq+0x2be>
 80040f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004100 <HAL_RCC_GetSysClockFreq+0x1c>)
 80040fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fe:	bf00      	nop
 8004100:	08004165 	.word	0x08004165
 8004104:	080043a3 	.word	0x080043a3
 8004108:	080043a3 	.word	0x080043a3
 800410c:	080043a3 	.word	0x080043a3
 8004110:	080043a3 	.word	0x080043a3
 8004114:	080043a3 	.word	0x080043a3
 8004118:	080043a3 	.word	0x080043a3
 800411c:	080043a3 	.word	0x080043a3
 8004120:	0800418b 	.word	0x0800418b
 8004124:	080043a3 	.word	0x080043a3
 8004128:	080043a3 	.word	0x080043a3
 800412c:	080043a3 	.word	0x080043a3
 8004130:	080043a3 	.word	0x080043a3
 8004134:	080043a3 	.word	0x080043a3
 8004138:	080043a3 	.word	0x080043a3
 800413c:	080043a3 	.word	0x080043a3
 8004140:	08004191 	.word	0x08004191
 8004144:	080043a3 	.word	0x080043a3
 8004148:	080043a3 	.word	0x080043a3
 800414c:	080043a3 	.word	0x080043a3
 8004150:	080043a3 	.word	0x080043a3
 8004154:	080043a3 	.word	0x080043a3
 8004158:	080043a3 	.word	0x080043a3
 800415c:	080043a3 	.word	0x080043a3
 8004160:	08004197 	.word	0x08004197
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004164:	4b94      	ldr	r3, [pc, #592]	@ (80043b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0320 	and.w	r3, r3, #32
 800416c:	2b00      	cmp	r3, #0
 800416e:	d009      	beq.n	8004184 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004170:	4b91      	ldr	r3, [pc, #580]	@ (80043b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	08db      	lsrs	r3, r3, #3
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	4a90      	ldr	r2, [pc, #576]	@ (80043bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800417c:	fa22 f303 	lsr.w	r3, r2, r3
 8004180:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004182:	e111      	b.n	80043a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004184:	4b8d      	ldr	r3, [pc, #564]	@ (80043bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004186:	61bb      	str	r3, [r7, #24]
      break;
 8004188:	e10e      	b.n	80043a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800418a:	4b8d      	ldr	r3, [pc, #564]	@ (80043c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800418c:	61bb      	str	r3, [r7, #24]
      break;
 800418e:	e10b      	b.n	80043a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004190:	4b8c      	ldr	r3, [pc, #560]	@ (80043c4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004192:	61bb      	str	r3, [r7, #24]
      break;
 8004194:	e108      	b.n	80043a8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004196:	4b88      	ldr	r3, [pc, #544]	@ (80043b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800419a:	f003 0303 	and.w	r3, r3, #3
 800419e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80041a0:	4b85      	ldr	r3, [pc, #532]	@ (80043b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a4:	091b      	lsrs	r3, r3, #4
 80041a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041aa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80041ac:	4b82      	ldr	r3, [pc, #520]	@ (80043b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80041b6:	4b80      	ldr	r3, [pc, #512]	@ (80043b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041ba:	08db      	lsrs	r3, r3, #3
 80041bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	fb02 f303 	mul.w	r3, r2, r3
 80041c6:	ee07 3a90 	vmov	s15, r3
 80041ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ce:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 80e1 	beq.w	800439c <HAL_RCC_GetSysClockFreq+0x2b8>
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	2b02      	cmp	r3, #2
 80041de:	f000 8083 	beq.w	80042e8 <HAL_RCC_GetSysClockFreq+0x204>
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	f200 80a1 	bhi.w	800432c <HAL_RCC_GetSysClockFreq+0x248>
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d003      	beq.n	80041f8 <HAL_RCC_GetSysClockFreq+0x114>
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d056      	beq.n	80042a4 <HAL_RCC_GetSysClockFreq+0x1c0>
 80041f6:	e099      	b.n	800432c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041f8:	4b6f      	ldr	r3, [pc, #444]	@ (80043b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0320 	and.w	r3, r3, #32
 8004200:	2b00      	cmp	r3, #0
 8004202:	d02d      	beq.n	8004260 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004204:	4b6c      	ldr	r3, [pc, #432]	@ (80043b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	08db      	lsrs	r3, r3, #3
 800420a:	f003 0303 	and.w	r3, r3, #3
 800420e:	4a6b      	ldr	r2, [pc, #428]	@ (80043bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004210:	fa22 f303 	lsr.w	r3, r2, r3
 8004214:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	ee07 3a90 	vmov	s15, r3
 800421c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	ee07 3a90 	vmov	s15, r3
 8004226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800422a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800422e:	4b62      	ldr	r3, [pc, #392]	@ (80043b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004236:	ee07 3a90 	vmov	s15, r3
 800423a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800423e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004242:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80043c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800424a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800424e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800425a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800425e:	e087      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	ee07 3a90 	vmov	s15, r3
 8004266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800426a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80043cc <HAL_RCC_GetSysClockFreq+0x2e8>
 800426e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004272:	4b51      	ldr	r3, [pc, #324]	@ (80043b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800427a:	ee07 3a90 	vmov	s15, r3
 800427e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004282:	ed97 6a02 	vldr	s12, [r7, #8]
 8004286:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80043c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800428a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800428e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004292:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800429a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800429e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80042a2:	e065      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	ee07 3a90 	vmov	s15, r3
 80042aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ae:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80043d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80042b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042b6:	4b40      	ldr	r3, [pc, #256]	@ (80043b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042be:	ee07 3a90 	vmov	s15, r3
 80042c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80042ca:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80043c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80042ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80042e6:	e043      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	ee07 3a90 	vmov	s15, r3
 80042ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042f2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80043d4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80042f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042fa:	4b2f      	ldr	r3, [pc, #188]	@ (80043b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004302:	ee07 3a90 	vmov	s15, r3
 8004306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800430a:	ed97 6a02 	vldr	s12, [r7, #8]
 800430e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80043c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800431a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800431e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004326:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800432a:	e021      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	ee07 3a90 	vmov	s15, r3
 8004332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004336:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80043d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800433a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800433e:	4b1e      	ldr	r3, [pc, #120]	@ (80043b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004346:	ee07 3a90 	vmov	s15, r3
 800434a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800434e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004352:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80043c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800435a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800435e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800436a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800436e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004370:	4b11      	ldr	r3, [pc, #68]	@ (80043b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004374:	0a5b      	lsrs	r3, r3, #9
 8004376:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800437a:	3301      	adds	r3, #1
 800437c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	ee07 3a90 	vmov	s15, r3
 8004384:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004388:	edd7 6a07 	vldr	s13, [r7, #28]
 800438c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004390:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004394:	ee17 3a90 	vmov	r3, s15
 8004398:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800439a:	e005      	b.n	80043a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800439c:	2300      	movs	r3, #0
 800439e:	61bb      	str	r3, [r7, #24]
      break;
 80043a0:	e002      	b.n	80043a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80043a2:	4b07      	ldr	r3, [pc, #28]	@ (80043c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80043a4:	61bb      	str	r3, [r7, #24]
      break;
 80043a6:	bf00      	nop
  }

  return sysclockfreq;
 80043a8:	69bb      	ldr	r3, [r7, #24]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3724      	adds	r7, #36	@ 0x24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	58024400 	.word	0x58024400
 80043bc:	03d09000 	.word	0x03d09000
 80043c0:	003d0900 	.word	0x003d0900
 80043c4:	017d7840 	.word	0x017d7840
 80043c8:	46000000 	.word	0x46000000
 80043cc:	4c742400 	.word	0x4c742400
 80043d0:	4a742400 	.word	0x4a742400
 80043d4:	4bbebc20 	.word	0x4bbebc20

080043d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80043de:	f7ff fe81 	bl	80040e4 <HAL_RCC_GetSysClockFreq>
 80043e2:	4602      	mov	r2, r0
 80043e4:	4b10      	ldr	r3, [pc, #64]	@ (8004428 <HAL_RCC_GetHCLKFreq+0x50>)
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	0a1b      	lsrs	r3, r3, #8
 80043ea:	f003 030f 	and.w	r3, r3, #15
 80043ee:	490f      	ldr	r1, [pc, #60]	@ (800442c <HAL_RCC_GetHCLKFreq+0x54>)
 80043f0:	5ccb      	ldrb	r3, [r1, r3]
 80043f2:	f003 031f 	and.w	r3, r3, #31
 80043f6:	fa22 f303 	lsr.w	r3, r2, r3
 80043fa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004428 <HAL_RCC_GetHCLKFreq+0x50>)
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	f003 030f 	and.w	r3, r3, #15
 8004404:	4a09      	ldr	r2, [pc, #36]	@ (800442c <HAL_RCC_GetHCLKFreq+0x54>)
 8004406:	5cd3      	ldrb	r3, [r2, r3]
 8004408:	f003 031f 	and.w	r3, r3, #31
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	fa22 f303 	lsr.w	r3, r2, r3
 8004412:	4a07      	ldr	r2, [pc, #28]	@ (8004430 <HAL_RCC_GetHCLKFreq+0x58>)
 8004414:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004416:	4a07      	ldr	r2, [pc, #28]	@ (8004434 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800441c:	4b04      	ldr	r3, [pc, #16]	@ (8004430 <HAL_RCC_GetHCLKFreq+0x58>)
 800441e:	681b      	ldr	r3, [r3, #0]
}
 8004420:	4618      	mov	r0, r3
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	58024400 	.word	0x58024400
 800442c:	0801aad0 	.word	0x0801aad0
 8004430:	24000004 	.word	0x24000004
 8004434:	24000000 	.word	0x24000000

08004438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800443c:	f7ff ffcc 	bl	80043d8 <HAL_RCC_GetHCLKFreq>
 8004440:	4602      	mov	r2, r0
 8004442:	4b06      	ldr	r3, [pc, #24]	@ (800445c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	091b      	lsrs	r3, r3, #4
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	4904      	ldr	r1, [pc, #16]	@ (8004460 <HAL_RCC_GetPCLK1Freq+0x28>)
 800444e:	5ccb      	ldrb	r3, [r1, r3]
 8004450:	f003 031f 	and.w	r3, r3, #31
 8004454:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004458:	4618      	mov	r0, r3
 800445a:	bd80      	pop	{r7, pc}
 800445c:	58024400 	.word	0x58024400
 8004460:	0801aad0 	.word	0x0801aad0

08004464 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	223f      	movs	r2, #63	@ 0x3f
 8004472:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004474:	4b1a      	ldr	r3, [pc, #104]	@ (80044e0 <HAL_RCC_GetClockConfig+0x7c>)
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	f003 0207 	and.w	r2, r3, #7
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004480:	4b17      	ldr	r3, [pc, #92]	@ (80044e0 <HAL_RCC_GetClockConfig+0x7c>)
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800448c:	4b14      	ldr	r3, [pc, #80]	@ (80044e0 <HAL_RCC_GetClockConfig+0x7c>)
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	f003 020f 	and.w	r2, r3, #15
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004498:	4b11      	ldr	r3, [pc, #68]	@ (80044e0 <HAL_RCC_GetClockConfig+0x7c>)
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80044a4:	4b0e      	ldr	r3, [pc, #56]	@ (80044e0 <HAL_RCC_GetClockConfig+0x7c>)
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80044b0:	4b0b      	ldr	r3, [pc, #44]	@ (80044e0 <HAL_RCC_GetClockConfig+0x7c>)
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80044bc:	4b08      	ldr	r3, [pc, #32]	@ (80044e0 <HAL_RCC_GetClockConfig+0x7c>)
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80044c8:	4b06      	ldr	r3, [pc, #24]	@ (80044e4 <HAL_RCC_GetClockConfig+0x80>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 020f 	and.w	r2, r3, #15
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	601a      	str	r2, [r3, #0]
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr
 80044e0:	58024400 	.word	0x58024400
 80044e4:	52002000 	.word	0x52002000

080044e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e049      	b.n	800458e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d106      	bne.n	8004514 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f841 	bl	8004596 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2202      	movs	r2, #2
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	3304      	adds	r3, #4
 8004524:	4619      	mov	r1, r3
 8004526:	4610      	mov	r0, r2
 8004528:	f000 f9f6 	bl	8004918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004596:	b480      	push	{r7}
 8004598:	b083      	sub	sp, #12
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800459e:	bf00      	nop
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
	...

080045ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d001      	beq.n	80045c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e05e      	b.n	8004682 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2202      	movs	r2, #2
 80045c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0201 	orr.w	r2, r2, #1
 80045da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a2b      	ldr	r2, [pc, #172]	@ (8004690 <HAL_TIM_Base_Start_IT+0xe4>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d02c      	beq.n	8004640 <HAL_TIM_Base_Start_IT+0x94>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045ee:	d027      	beq.n	8004640 <HAL_TIM_Base_Start_IT+0x94>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a27      	ldr	r2, [pc, #156]	@ (8004694 <HAL_TIM_Base_Start_IT+0xe8>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d022      	beq.n	8004640 <HAL_TIM_Base_Start_IT+0x94>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a26      	ldr	r2, [pc, #152]	@ (8004698 <HAL_TIM_Base_Start_IT+0xec>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d01d      	beq.n	8004640 <HAL_TIM_Base_Start_IT+0x94>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a24      	ldr	r2, [pc, #144]	@ (800469c <HAL_TIM_Base_Start_IT+0xf0>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d018      	beq.n	8004640 <HAL_TIM_Base_Start_IT+0x94>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a23      	ldr	r2, [pc, #140]	@ (80046a0 <HAL_TIM_Base_Start_IT+0xf4>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d013      	beq.n	8004640 <HAL_TIM_Base_Start_IT+0x94>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a21      	ldr	r2, [pc, #132]	@ (80046a4 <HAL_TIM_Base_Start_IT+0xf8>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d00e      	beq.n	8004640 <HAL_TIM_Base_Start_IT+0x94>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a20      	ldr	r2, [pc, #128]	@ (80046a8 <HAL_TIM_Base_Start_IT+0xfc>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d009      	beq.n	8004640 <HAL_TIM_Base_Start_IT+0x94>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a1e      	ldr	r2, [pc, #120]	@ (80046ac <HAL_TIM_Base_Start_IT+0x100>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d004      	beq.n	8004640 <HAL_TIM_Base_Start_IT+0x94>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a1d      	ldr	r2, [pc, #116]	@ (80046b0 <HAL_TIM_Base_Start_IT+0x104>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d115      	bne.n	800466c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689a      	ldr	r2, [r3, #8]
 8004646:	4b1b      	ldr	r3, [pc, #108]	@ (80046b4 <HAL_TIM_Base_Start_IT+0x108>)
 8004648:	4013      	ands	r3, r2
 800464a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2b06      	cmp	r3, #6
 8004650:	d015      	beq.n	800467e <HAL_TIM_Base_Start_IT+0xd2>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004658:	d011      	beq.n	800467e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f042 0201 	orr.w	r2, r2, #1
 8004668:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800466a:	e008      	b.n	800467e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f042 0201 	orr.w	r2, r2, #1
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	e000      	b.n	8004680 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800467e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	40010000 	.word	0x40010000
 8004694:	40000400 	.word	0x40000400
 8004698:	40000800 	.word	0x40000800
 800469c:	40000c00 	.word	0x40000c00
 80046a0:	40010400 	.word	0x40010400
 80046a4:	40001800 	.word	0x40001800
 80046a8:	40014000 	.word	0x40014000
 80046ac:	4000e000 	.word	0x4000e000
 80046b0:	4000e400 	.word	0x4000e400
 80046b4:	00010007 	.word	0x00010007

080046b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d020      	beq.n	800471c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d01b      	beq.n	800471c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f06f 0202 	mvn.w	r2, #2
 80046ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f8e9 	bl	80048da <HAL_TIM_IC_CaptureCallback>
 8004708:	e005      	b.n	8004716 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f8db 	bl	80048c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f8ec 	bl	80048ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	f003 0304 	and.w	r3, r3, #4
 8004722:	2b00      	cmp	r3, #0
 8004724:	d020      	beq.n	8004768 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b00      	cmp	r3, #0
 800472e:	d01b      	beq.n	8004768 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f06f 0204 	mvn.w	r2, #4
 8004738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2202      	movs	r2, #2
 800473e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f8c3 	bl	80048da <HAL_TIM_IC_CaptureCallback>
 8004754:	e005      	b.n	8004762 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f8b5 	bl	80048c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 f8c6 	bl	80048ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	f003 0308 	and.w	r3, r3, #8
 800476e:	2b00      	cmp	r3, #0
 8004770:	d020      	beq.n	80047b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f003 0308 	and.w	r3, r3, #8
 8004778:	2b00      	cmp	r3, #0
 800477a:	d01b      	beq.n	80047b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f06f 0208 	mvn.w	r2, #8
 8004784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2204      	movs	r2, #4
 800478a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	f003 0303 	and.w	r3, r3, #3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f89d 	bl	80048da <HAL_TIM_IC_CaptureCallback>
 80047a0:	e005      	b.n	80047ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f88f 	bl	80048c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 f8a0 	bl	80048ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	f003 0310 	and.w	r3, r3, #16
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d020      	beq.n	8004800 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f003 0310 	and.w	r3, r3, #16
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d01b      	beq.n	8004800 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f06f 0210 	mvn.w	r2, #16
 80047d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2208      	movs	r2, #8
 80047d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f877 	bl	80048da <HAL_TIM_IC_CaptureCallback>
 80047ec:	e005      	b.n	80047fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f869 	bl	80048c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 f87a 	bl	80048ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00c      	beq.n	8004824 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	2b00      	cmp	r3, #0
 8004812:	d007      	beq.n	8004824 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f06f 0201 	mvn.w	r2, #1
 800481c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7fb ffb4 	bl	800078c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800482a:	2b00      	cmp	r3, #0
 800482c:	d104      	bne.n	8004838 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00c      	beq.n	8004852 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800483e:	2b00      	cmp	r3, #0
 8004840:	d007      	beq.n	8004852 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800484a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 f919 	bl	8004a84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00c      	beq.n	8004876 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004862:	2b00      	cmp	r3, #0
 8004864:	d007      	beq.n	8004876 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800486e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 f911 	bl	8004a98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00c      	beq.n	800489a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004886:	2b00      	cmp	r3, #0
 8004888:	d007      	beq.n	800489a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 f834 	bl	8004902 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	f003 0320 	and.w	r3, r3, #32
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00c      	beq.n	80048be <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f003 0320 	and.w	r3, r3, #32
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d007      	beq.n	80048be <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f06f 0220 	mvn.w	r2, #32
 80048b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f8d9 	bl	8004a70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048be:	bf00      	nop
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b083      	sub	sp, #12
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048e2:	bf00      	nop
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004902:	b480      	push	{r7}
 8004904:	b083      	sub	sp, #12
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800490a:	bf00      	nop
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
	...

08004918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a47      	ldr	r2, [pc, #284]	@ (8004a48 <TIM_Base_SetConfig+0x130>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d013      	beq.n	8004958 <TIM_Base_SetConfig+0x40>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004936:	d00f      	beq.n	8004958 <TIM_Base_SetConfig+0x40>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a44      	ldr	r2, [pc, #272]	@ (8004a4c <TIM_Base_SetConfig+0x134>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d00b      	beq.n	8004958 <TIM_Base_SetConfig+0x40>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a43      	ldr	r2, [pc, #268]	@ (8004a50 <TIM_Base_SetConfig+0x138>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d007      	beq.n	8004958 <TIM_Base_SetConfig+0x40>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a42      	ldr	r2, [pc, #264]	@ (8004a54 <TIM_Base_SetConfig+0x13c>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d003      	beq.n	8004958 <TIM_Base_SetConfig+0x40>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a41      	ldr	r2, [pc, #260]	@ (8004a58 <TIM_Base_SetConfig+0x140>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d108      	bne.n	800496a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800495e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	4313      	orrs	r3, r2
 8004968:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a36      	ldr	r2, [pc, #216]	@ (8004a48 <TIM_Base_SetConfig+0x130>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d027      	beq.n	80049c2 <TIM_Base_SetConfig+0xaa>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004978:	d023      	beq.n	80049c2 <TIM_Base_SetConfig+0xaa>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a33      	ldr	r2, [pc, #204]	@ (8004a4c <TIM_Base_SetConfig+0x134>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d01f      	beq.n	80049c2 <TIM_Base_SetConfig+0xaa>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a32      	ldr	r2, [pc, #200]	@ (8004a50 <TIM_Base_SetConfig+0x138>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d01b      	beq.n	80049c2 <TIM_Base_SetConfig+0xaa>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a31      	ldr	r2, [pc, #196]	@ (8004a54 <TIM_Base_SetConfig+0x13c>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d017      	beq.n	80049c2 <TIM_Base_SetConfig+0xaa>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a30      	ldr	r2, [pc, #192]	@ (8004a58 <TIM_Base_SetConfig+0x140>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d013      	beq.n	80049c2 <TIM_Base_SetConfig+0xaa>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a2f      	ldr	r2, [pc, #188]	@ (8004a5c <TIM_Base_SetConfig+0x144>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d00f      	beq.n	80049c2 <TIM_Base_SetConfig+0xaa>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a2e      	ldr	r2, [pc, #184]	@ (8004a60 <TIM_Base_SetConfig+0x148>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d00b      	beq.n	80049c2 <TIM_Base_SetConfig+0xaa>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a2d      	ldr	r2, [pc, #180]	@ (8004a64 <TIM_Base_SetConfig+0x14c>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d007      	beq.n	80049c2 <TIM_Base_SetConfig+0xaa>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a2c      	ldr	r2, [pc, #176]	@ (8004a68 <TIM_Base_SetConfig+0x150>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d003      	beq.n	80049c2 <TIM_Base_SetConfig+0xaa>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a2b      	ldr	r2, [pc, #172]	@ (8004a6c <TIM_Base_SetConfig+0x154>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d108      	bne.n	80049d4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	4313      	orrs	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	689a      	ldr	r2, [r3, #8]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a14      	ldr	r2, [pc, #80]	@ (8004a48 <TIM_Base_SetConfig+0x130>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d00f      	beq.n	8004a1a <TIM_Base_SetConfig+0x102>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a16      	ldr	r2, [pc, #88]	@ (8004a58 <TIM_Base_SetConfig+0x140>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d00b      	beq.n	8004a1a <TIM_Base_SetConfig+0x102>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a15      	ldr	r2, [pc, #84]	@ (8004a5c <TIM_Base_SetConfig+0x144>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d007      	beq.n	8004a1a <TIM_Base_SetConfig+0x102>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a14      	ldr	r2, [pc, #80]	@ (8004a60 <TIM_Base_SetConfig+0x148>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d003      	beq.n	8004a1a <TIM_Base_SetConfig+0x102>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a13      	ldr	r2, [pc, #76]	@ (8004a64 <TIM_Base_SetConfig+0x14c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d103      	bne.n	8004a22 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	691a      	ldr	r2, [r3, #16]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f043 0204 	orr.w	r2, r3, #4
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	601a      	str	r2, [r3, #0]
}
 8004a3a:	bf00      	nop
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	40010000 	.word	0x40010000
 8004a4c:	40000400 	.word	0x40000400
 8004a50:	40000800 	.word	0x40000800
 8004a54:	40000c00 	.word	0x40000c00
 8004a58:	40010400 	.word	0x40010400
 8004a5c:	40014000 	.word	0x40014000
 8004a60:	40014400 	.word	0x40014400
 8004a64:	40014800 	.word	0x40014800
 8004a68:	4000e000 	.word	0x4000e000
 8004a6c:	4000e400 	.word	0x4000e400

08004a70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004ab2:	4b92      	ldr	r3, [pc, #584]	@ (8004cfc <MX_LWIP_Init+0x250>)
 8004ab4:	22c0      	movs	r2, #192	@ 0xc0
 8004ab6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004ab8:	4b90      	ldr	r3, [pc, #576]	@ (8004cfc <MX_LWIP_Init+0x250>)
 8004aba:	22a8      	movs	r2, #168	@ 0xa8
 8004abc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8004abe:	4b8f      	ldr	r3, [pc, #572]	@ (8004cfc <MX_LWIP_Init+0x250>)
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 151;
 8004ac4:	4b8d      	ldr	r3, [pc, #564]	@ (8004cfc <MX_LWIP_Init+0x250>)
 8004ac6:	2297      	movs	r2, #151	@ 0x97
 8004ac8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004aca:	4b8d      	ldr	r3, [pc, #564]	@ (8004d00 <MX_LWIP_Init+0x254>)
 8004acc:	22ff      	movs	r2, #255	@ 0xff
 8004ace:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004ad0:	4b8b      	ldr	r3, [pc, #556]	@ (8004d00 <MX_LWIP_Init+0x254>)
 8004ad2:	22ff      	movs	r2, #255	@ 0xff
 8004ad4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004ad6:	4b8a      	ldr	r3, [pc, #552]	@ (8004d00 <MX_LWIP_Init+0x254>)
 8004ad8:	22ff      	movs	r2, #255	@ 0xff
 8004ada:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004adc:	4b88      	ldr	r3, [pc, #544]	@ (8004d00 <MX_LWIP_Init+0x254>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004ae2:	4b88      	ldr	r3, [pc, #544]	@ (8004d04 <MX_LWIP_Init+0x258>)
 8004ae4:	22c0      	movs	r2, #192	@ 0xc0
 8004ae6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004ae8:	4b86      	ldr	r3, [pc, #536]	@ (8004d04 <MX_LWIP_Init+0x258>)
 8004aea:	22a8      	movs	r2, #168	@ 0xa8
 8004aec:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8004aee:	4b85      	ldr	r3, [pc, #532]	@ (8004d04 <MX_LWIP_Init+0x258>)
 8004af0:	2201      	movs	r2, #1
 8004af2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004af4:	4b83      	ldr	r3, [pc, #524]	@ (8004d04 <MX_LWIP_Init+0x258>)
 8004af6:	2201      	movs	r2, #1
 8004af8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004afa:	2100      	movs	r1, #0
 8004afc:	2000      	movs	r0, #0
 8004afe:	f006 fb8b 	bl	800b218 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004b02:	4b7e      	ldr	r3, [pc, #504]	@ (8004cfc <MX_LWIP_Init+0x250>)
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	061a      	lsls	r2, r3, #24
 8004b08:	4b7c      	ldr	r3, [pc, #496]	@ (8004cfc <MX_LWIP_Init+0x250>)
 8004b0a:	785b      	ldrb	r3, [r3, #1]
 8004b0c:	041b      	lsls	r3, r3, #16
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	4b7a      	ldr	r3, [pc, #488]	@ (8004cfc <MX_LWIP_Init+0x250>)
 8004b12:	789b      	ldrb	r3, [r3, #2]
 8004b14:	021b      	lsls	r3, r3, #8
 8004b16:	4313      	orrs	r3, r2
 8004b18:	4a78      	ldr	r2, [pc, #480]	@ (8004cfc <MX_LWIP_Init+0x250>)
 8004b1a:	78d2      	ldrb	r2, [r2, #3]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	061a      	lsls	r2, r3, #24
 8004b20:	4b76      	ldr	r3, [pc, #472]	@ (8004cfc <MX_LWIP_Init+0x250>)
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	0619      	lsls	r1, r3, #24
 8004b26:	4b75      	ldr	r3, [pc, #468]	@ (8004cfc <MX_LWIP_Init+0x250>)
 8004b28:	785b      	ldrb	r3, [r3, #1]
 8004b2a:	041b      	lsls	r3, r3, #16
 8004b2c:	4319      	orrs	r1, r3
 8004b2e:	4b73      	ldr	r3, [pc, #460]	@ (8004cfc <MX_LWIP_Init+0x250>)
 8004b30:	789b      	ldrb	r3, [r3, #2]
 8004b32:	021b      	lsls	r3, r3, #8
 8004b34:	430b      	orrs	r3, r1
 8004b36:	4971      	ldr	r1, [pc, #452]	@ (8004cfc <MX_LWIP_Init+0x250>)
 8004b38:	78c9      	ldrb	r1, [r1, #3]
 8004b3a:	430b      	orrs	r3, r1
 8004b3c:	021b      	lsls	r3, r3, #8
 8004b3e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004b42:	431a      	orrs	r2, r3
 8004b44:	4b6d      	ldr	r3, [pc, #436]	@ (8004cfc <MX_LWIP_Init+0x250>)
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	0619      	lsls	r1, r3, #24
 8004b4a:	4b6c      	ldr	r3, [pc, #432]	@ (8004cfc <MX_LWIP_Init+0x250>)
 8004b4c:	785b      	ldrb	r3, [r3, #1]
 8004b4e:	041b      	lsls	r3, r3, #16
 8004b50:	4319      	orrs	r1, r3
 8004b52:	4b6a      	ldr	r3, [pc, #424]	@ (8004cfc <MX_LWIP_Init+0x250>)
 8004b54:	789b      	ldrb	r3, [r3, #2]
 8004b56:	021b      	lsls	r3, r3, #8
 8004b58:	430b      	orrs	r3, r1
 8004b5a:	4968      	ldr	r1, [pc, #416]	@ (8004cfc <MX_LWIP_Init+0x250>)
 8004b5c:	78c9      	ldrb	r1, [r1, #3]
 8004b5e:	430b      	orrs	r3, r1
 8004b60:	0a1b      	lsrs	r3, r3, #8
 8004b62:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004b66:	431a      	orrs	r2, r3
 8004b68:	4b64      	ldr	r3, [pc, #400]	@ (8004cfc <MX_LWIP_Init+0x250>)
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	0619      	lsls	r1, r3, #24
 8004b6e:	4b63      	ldr	r3, [pc, #396]	@ (8004cfc <MX_LWIP_Init+0x250>)
 8004b70:	785b      	ldrb	r3, [r3, #1]
 8004b72:	041b      	lsls	r3, r3, #16
 8004b74:	4319      	orrs	r1, r3
 8004b76:	4b61      	ldr	r3, [pc, #388]	@ (8004cfc <MX_LWIP_Init+0x250>)
 8004b78:	789b      	ldrb	r3, [r3, #2]
 8004b7a:	021b      	lsls	r3, r3, #8
 8004b7c:	430b      	orrs	r3, r1
 8004b7e:	495f      	ldr	r1, [pc, #380]	@ (8004cfc <MX_LWIP_Init+0x250>)
 8004b80:	78c9      	ldrb	r1, [r1, #3]
 8004b82:	430b      	orrs	r3, r1
 8004b84:	0e1b      	lsrs	r3, r3, #24
 8004b86:	4313      	orrs	r3, r2
 8004b88:	4a5f      	ldr	r2, [pc, #380]	@ (8004d08 <MX_LWIP_Init+0x25c>)
 8004b8a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004b8c:	4b5c      	ldr	r3, [pc, #368]	@ (8004d00 <MX_LWIP_Init+0x254>)
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	061a      	lsls	r2, r3, #24
 8004b92:	4b5b      	ldr	r3, [pc, #364]	@ (8004d00 <MX_LWIP_Init+0x254>)
 8004b94:	785b      	ldrb	r3, [r3, #1]
 8004b96:	041b      	lsls	r3, r3, #16
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	4b59      	ldr	r3, [pc, #356]	@ (8004d00 <MX_LWIP_Init+0x254>)
 8004b9c:	789b      	ldrb	r3, [r3, #2]
 8004b9e:	021b      	lsls	r3, r3, #8
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	4a57      	ldr	r2, [pc, #348]	@ (8004d00 <MX_LWIP_Init+0x254>)
 8004ba4:	78d2      	ldrb	r2, [r2, #3]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	061a      	lsls	r2, r3, #24
 8004baa:	4b55      	ldr	r3, [pc, #340]	@ (8004d00 <MX_LWIP_Init+0x254>)
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	0619      	lsls	r1, r3, #24
 8004bb0:	4b53      	ldr	r3, [pc, #332]	@ (8004d00 <MX_LWIP_Init+0x254>)
 8004bb2:	785b      	ldrb	r3, [r3, #1]
 8004bb4:	041b      	lsls	r3, r3, #16
 8004bb6:	4319      	orrs	r1, r3
 8004bb8:	4b51      	ldr	r3, [pc, #324]	@ (8004d00 <MX_LWIP_Init+0x254>)
 8004bba:	789b      	ldrb	r3, [r3, #2]
 8004bbc:	021b      	lsls	r3, r3, #8
 8004bbe:	430b      	orrs	r3, r1
 8004bc0:	494f      	ldr	r1, [pc, #316]	@ (8004d00 <MX_LWIP_Init+0x254>)
 8004bc2:	78c9      	ldrb	r1, [r1, #3]
 8004bc4:	430b      	orrs	r3, r1
 8004bc6:	021b      	lsls	r3, r3, #8
 8004bc8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004bcc:	431a      	orrs	r2, r3
 8004bce:	4b4c      	ldr	r3, [pc, #304]	@ (8004d00 <MX_LWIP_Init+0x254>)
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	0619      	lsls	r1, r3, #24
 8004bd4:	4b4a      	ldr	r3, [pc, #296]	@ (8004d00 <MX_LWIP_Init+0x254>)
 8004bd6:	785b      	ldrb	r3, [r3, #1]
 8004bd8:	041b      	lsls	r3, r3, #16
 8004bda:	4319      	orrs	r1, r3
 8004bdc:	4b48      	ldr	r3, [pc, #288]	@ (8004d00 <MX_LWIP_Init+0x254>)
 8004bde:	789b      	ldrb	r3, [r3, #2]
 8004be0:	021b      	lsls	r3, r3, #8
 8004be2:	430b      	orrs	r3, r1
 8004be4:	4946      	ldr	r1, [pc, #280]	@ (8004d00 <MX_LWIP_Init+0x254>)
 8004be6:	78c9      	ldrb	r1, [r1, #3]
 8004be8:	430b      	orrs	r3, r1
 8004bea:	0a1b      	lsrs	r3, r3, #8
 8004bec:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	4b43      	ldr	r3, [pc, #268]	@ (8004d00 <MX_LWIP_Init+0x254>)
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	0619      	lsls	r1, r3, #24
 8004bf8:	4b41      	ldr	r3, [pc, #260]	@ (8004d00 <MX_LWIP_Init+0x254>)
 8004bfa:	785b      	ldrb	r3, [r3, #1]
 8004bfc:	041b      	lsls	r3, r3, #16
 8004bfe:	4319      	orrs	r1, r3
 8004c00:	4b3f      	ldr	r3, [pc, #252]	@ (8004d00 <MX_LWIP_Init+0x254>)
 8004c02:	789b      	ldrb	r3, [r3, #2]
 8004c04:	021b      	lsls	r3, r3, #8
 8004c06:	430b      	orrs	r3, r1
 8004c08:	493d      	ldr	r1, [pc, #244]	@ (8004d00 <MX_LWIP_Init+0x254>)
 8004c0a:	78c9      	ldrb	r1, [r1, #3]
 8004c0c:	430b      	orrs	r3, r1
 8004c0e:	0e1b      	lsrs	r3, r3, #24
 8004c10:	4313      	orrs	r3, r2
 8004c12:	4a3e      	ldr	r2, [pc, #248]	@ (8004d0c <MX_LWIP_Init+0x260>)
 8004c14:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004c16:	4b3b      	ldr	r3, [pc, #236]	@ (8004d04 <MX_LWIP_Init+0x258>)
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	061a      	lsls	r2, r3, #24
 8004c1c:	4b39      	ldr	r3, [pc, #228]	@ (8004d04 <MX_LWIP_Init+0x258>)
 8004c1e:	785b      	ldrb	r3, [r3, #1]
 8004c20:	041b      	lsls	r3, r3, #16
 8004c22:	431a      	orrs	r2, r3
 8004c24:	4b37      	ldr	r3, [pc, #220]	@ (8004d04 <MX_LWIP_Init+0x258>)
 8004c26:	789b      	ldrb	r3, [r3, #2]
 8004c28:	021b      	lsls	r3, r3, #8
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	4a35      	ldr	r2, [pc, #212]	@ (8004d04 <MX_LWIP_Init+0x258>)
 8004c2e:	78d2      	ldrb	r2, [r2, #3]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	061a      	lsls	r2, r3, #24
 8004c34:	4b33      	ldr	r3, [pc, #204]	@ (8004d04 <MX_LWIP_Init+0x258>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	0619      	lsls	r1, r3, #24
 8004c3a:	4b32      	ldr	r3, [pc, #200]	@ (8004d04 <MX_LWIP_Init+0x258>)
 8004c3c:	785b      	ldrb	r3, [r3, #1]
 8004c3e:	041b      	lsls	r3, r3, #16
 8004c40:	4319      	orrs	r1, r3
 8004c42:	4b30      	ldr	r3, [pc, #192]	@ (8004d04 <MX_LWIP_Init+0x258>)
 8004c44:	789b      	ldrb	r3, [r3, #2]
 8004c46:	021b      	lsls	r3, r3, #8
 8004c48:	430b      	orrs	r3, r1
 8004c4a:	492e      	ldr	r1, [pc, #184]	@ (8004d04 <MX_LWIP_Init+0x258>)
 8004c4c:	78c9      	ldrb	r1, [r1, #3]
 8004c4e:	430b      	orrs	r3, r1
 8004c50:	021b      	lsls	r3, r3, #8
 8004c52:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004c56:	431a      	orrs	r2, r3
 8004c58:	4b2a      	ldr	r3, [pc, #168]	@ (8004d04 <MX_LWIP_Init+0x258>)
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	0619      	lsls	r1, r3, #24
 8004c5e:	4b29      	ldr	r3, [pc, #164]	@ (8004d04 <MX_LWIP_Init+0x258>)
 8004c60:	785b      	ldrb	r3, [r3, #1]
 8004c62:	041b      	lsls	r3, r3, #16
 8004c64:	4319      	orrs	r1, r3
 8004c66:	4b27      	ldr	r3, [pc, #156]	@ (8004d04 <MX_LWIP_Init+0x258>)
 8004c68:	789b      	ldrb	r3, [r3, #2]
 8004c6a:	021b      	lsls	r3, r3, #8
 8004c6c:	430b      	orrs	r3, r1
 8004c6e:	4925      	ldr	r1, [pc, #148]	@ (8004d04 <MX_LWIP_Init+0x258>)
 8004c70:	78c9      	ldrb	r1, [r1, #3]
 8004c72:	430b      	orrs	r3, r1
 8004c74:	0a1b      	lsrs	r3, r3, #8
 8004c76:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	4b21      	ldr	r3, [pc, #132]	@ (8004d04 <MX_LWIP_Init+0x258>)
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	0619      	lsls	r1, r3, #24
 8004c82:	4b20      	ldr	r3, [pc, #128]	@ (8004d04 <MX_LWIP_Init+0x258>)
 8004c84:	785b      	ldrb	r3, [r3, #1]
 8004c86:	041b      	lsls	r3, r3, #16
 8004c88:	4319      	orrs	r1, r3
 8004c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8004d04 <MX_LWIP_Init+0x258>)
 8004c8c:	789b      	ldrb	r3, [r3, #2]
 8004c8e:	021b      	lsls	r3, r3, #8
 8004c90:	430b      	orrs	r3, r1
 8004c92:	491c      	ldr	r1, [pc, #112]	@ (8004d04 <MX_LWIP_Init+0x258>)
 8004c94:	78c9      	ldrb	r1, [r1, #3]
 8004c96:	430b      	orrs	r3, r1
 8004c98:	0e1b      	lsrs	r3, r3, #24
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	4a1c      	ldr	r2, [pc, #112]	@ (8004d10 <MX_LWIP_Init+0x264>)
 8004c9e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004ca0:	4b1c      	ldr	r3, [pc, #112]	@ (8004d14 <MX_LWIP_Init+0x268>)
 8004ca2:	9302      	str	r3, [sp, #8]
 8004ca4:	4b1c      	ldr	r3, [pc, #112]	@ (8004d18 <MX_LWIP_Init+0x26c>)
 8004ca6:	9301      	str	r3, [sp, #4]
 8004ca8:	2300      	movs	r3, #0
 8004caa:	9300      	str	r3, [sp, #0]
 8004cac:	4b18      	ldr	r3, [pc, #96]	@ (8004d10 <MX_LWIP_Init+0x264>)
 8004cae:	4a17      	ldr	r2, [pc, #92]	@ (8004d0c <MX_LWIP_Init+0x260>)
 8004cb0:	4915      	ldr	r1, [pc, #84]	@ (8004d08 <MX_LWIP_Init+0x25c>)
 8004cb2:	481a      	ldr	r0, [pc, #104]	@ (8004d1c <MX_LWIP_Init+0x270>)
 8004cb4:	f007 f932 	bl	800bf1c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004cb8:	4818      	ldr	r0, [pc, #96]	@ (8004d1c <MX_LWIP_Init+0x270>)
 8004cba:	f007 fae1 	bl	800c280 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8004cbe:	4817      	ldr	r0, [pc, #92]	@ (8004d1c <MX_LWIP_Init+0x270>)
 8004cc0:	f007 faee 	bl	800c2a0 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004cc4:	4916      	ldr	r1, [pc, #88]	@ (8004d20 <MX_LWIP_Init+0x274>)
 8004cc6:	4815      	ldr	r0, [pc, #84]	@ (8004d1c <MX_LWIP_Init+0x270>)
 8004cc8:	f007 fbec 	bl	800c4a4 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004ccc:	2224      	movs	r2, #36	@ 0x24
 8004cce:	2100      	movs	r1, #0
 8004cd0:	4814      	ldr	r0, [pc, #80]	@ (8004d24 <MX_LWIP_Init+0x278>)
 8004cd2:	f011 fd32 	bl	801673a <memset>
  attributes.name = "EthLink";
 8004cd6:	4b13      	ldr	r3, [pc, #76]	@ (8004d24 <MX_LWIP_Init+0x278>)
 8004cd8:	4a13      	ldr	r2, [pc, #76]	@ (8004d28 <MX_LWIP_Init+0x27c>)
 8004cda:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004cdc:	4b11      	ldr	r3, [pc, #68]	@ (8004d24 <MX_LWIP_Init+0x278>)
 8004cde:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004ce2:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8004ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8004d24 <MX_LWIP_Init+0x278>)
 8004ce6:	2210      	movs	r2, #16
 8004ce8:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8004cea:	4a0e      	ldr	r2, [pc, #56]	@ (8004d24 <MX_LWIP_Init+0x278>)
 8004cec:	490b      	ldr	r1, [pc, #44]	@ (8004d1c <MX_LWIP_Init+0x270>)
 8004cee:	480f      	ldr	r0, [pc, #60]	@ (8004d2c <MX_LWIP_Init+0x280>)
 8004cf0:	f000 fde1 	bl	80058b6 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004cf4:	bf00      	nop
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	2400028c 	.word	0x2400028c
 8004d00:	24000290 	.word	0x24000290
 8004d04:	24000294 	.word	0x24000294
 8004d08:	24000280 	.word	0x24000280
 8004d0c:	24000284 	.word	0x24000284
 8004d10:	24000288 	.word	0x24000288
 8004d14:	0800b129 	.word	0x0800b129
 8004d18:	08005219 	.word	0x08005219
 8004d1c:	2400024c 	.word	0x2400024c
 8004d20:	08004d31 	.word	0x08004d31
 8004d24:	24000298 	.word	0x24000298
 8004d28:	08017560 	.word	0x08017560
 8004d2c:	0800550d 	.word	0x0800550d

08004d30 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8004d4c:	4b04      	ldr	r3, [pc, #16]	@ (8004d60 <HAL_ETH_RxCpltCallback+0x1c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f001 f847 	bl	8005de4 <osSemaphoreRelease>
}
 8004d56:	bf00      	nop
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	240002c4 	.word	0x240002c4

08004d64 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8004d6c:	4b04      	ldr	r3, [pc, #16]	@ (8004d80 <HAL_ETH_TxCpltCallback+0x1c>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f001 f837 	bl	8005de4 <osSemaphoreRelease>
}
 8004d76:	bf00      	nop
 8004d78:	3708      	adds	r7, #8
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	240002c8 	.word	0x240002c8

08004d84 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f7fd fc8e 	bl	80026ae <HAL_ETH_GetDMAError>
 8004d92:	4603      	mov	r3, r0
 8004d94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d98:	2b80      	cmp	r3, #128	@ 0x80
 8004d9a:	d104      	bne.n	8004da6 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8004d9c:	4b04      	ldr	r3, [pc, #16]	@ (8004db0 <HAL_ETH_ErrorCallback+0x2c>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f001 f81f 	bl	8005de4 <osSemaphoreRelease>
  }
}
 8004da6:	bf00      	nop
 8004da8:	3708      	adds	r7, #8
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	240002c4 	.word	0x240002c4

08004db4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b0aa      	sub	sp, #168	@ 0xa8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8004dce:	f107 0310 	add.w	r3, r7, #16
 8004dd2:	2264      	movs	r2, #100	@ 0x64
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f011 fcaf 	bl	801673a <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004ddc:	4b89      	ldr	r3, [pc, #548]	@ (8005004 <low_level_init+0x250>)
 8004dde:	4a8a      	ldr	r2, [pc, #552]	@ (8005008 <low_level_init+0x254>)
 8004de0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004de2:	2300      	movs	r3, #0
 8004de4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004de6:	2380      	movs	r3, #128	@ 0x80
 8004de8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004dea:	23e1      	movs	r3, #225	@ 0xe1
 8004dec:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004dee:	2300      	movs	r3, #0
 8004df0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004df2:	2300      	movs	r3, #0
 8004df4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004df6:	2300      	movs	r3, #0
 8004df8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004dfa:	4a82      	ldr	r2, [pc, #520]	@ (8005004 <low_level_init+0x250>)
 8004dfc:	f107 0308 	add.w	r3, r7, #8
 8004e00:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004e02:	4b80      	ldr	r3, [pc, #512]	@ (8005004 <low_level_init+0x250>)
 8004e04:	2201      	movs	r2, #1
 8004e06:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004e08:	4b7e      	ldr	r3, [pc, #504]	@ (8005004 <low_level_init+0x250>)
 8004e0a:	4a80      	ldr	r2, [pc, #512]	@ (800500c <low_level_init+0x258>)
 8004e0c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004e0e:	4b7d      	ldr	r3, [pc, #500]	@ (8005004 <low_level_init+0x250>)
 8004e10:	4a7f      	ldr	r2, [pc, #508]	@ (8005010 <low_level_init+0x25c>)
 8004e12:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004e14:	4b7b      	ldr	r3, [pc, #492]	@ (8005004 <low_level_init+0x250>)
 8004e16:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8004e1a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004e1c:	4879      	ldr	r0, [pc, #484]	@ (8005004 <low_level_init+0x250>)
 8004e1e:	f7fc fc6d 	bl	80016fc <HAL_ETH_Init>
 8004e22:	4603      	mov	r3, r0
 8004e24:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004e28:	2238      	movs	r2, #56	@ 0x38
 8004e2a:	2100      	movs	r1, #0
 8004e2c:	4879      	ldr	r0, [pc, #484]	@ (8005014 <low_level_init+0x260>)
 8004e2e:	f011 fc84 	bl	801673a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004e32:	4b78      	ldr	r3, [pc, #480]	@ (8005014 <low_level_init+0x260>)
 8004e34:	2221      	movs	r2, #33	@ 0x21
 8004e36:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004e38:	4b76      	ldr	r3, [pc, #472]	@ (8005014 <low_level_init+0x260>)
 8004e3a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004e3e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004e40:	4b74      	ldr	r3, [pc, #464]	@ (8005014 <low_level_init+0x260>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004e46:	4874      	ldr	r0, [pc, #464]	@ (8005018 <low_level_init+0x264>)
 8004e48:	f006 ff22 	bl	800bc90 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2206      	movs	r2, #6
 8004e50:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004e54:	4b6b      	ldr	r3, [pc, #428]	@ (8005004 <low_level_init+0x250>)
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	781a      	ldrb	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004e60:	4b68      	ldr	r3, [pc, #416]	@ (8005004 <low_level_init+0x250>)
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	785a      	ldrb	r2, [r3, #1]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004e6c:	4b65      	ldr	r3, [pc, #404]	@ (8005004 <low_level_init+0x250>)
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	789a      	ldrb	r2, [r3, #2]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004e78:	4b62      	ldr	r3, [pc, #392]	@ (8005004 <low_level_init+0x250>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	78da      	ldrb	r2, [r3, #3]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004e84:	4b5f      	ldr	r3, [pc, #380]	@ (8005004 <low_level_init+0x250>)
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	791a      	ldrb	r2, [r3, #4]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004e90:	4b5c      	ldr	r3, [pc, #368]	@ (8005004 <low_level_init+0x250>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	795a      	ldrb	r2, [r3, #5]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004ea2:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004eaa:	f043 030a 	orr.w	r3, r3, #10
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	2100      	movs	r1, #0
 8004eba:	2001      	movs	r0, #1
 8004ebc:	f000 feb6 	bl	8005c2c <osSemaphoreNew>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	4a56      	ldr	r2, [pc, #344]	@ (800501c <low_level_init+0x268>)
 8004ec4:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	2100      	movs	r1, #0
 8004eca:	2001      	movs	r0, #1
 8004ecc:	f000 feae 	bl	8005c2c <osSemaphoreNew>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	4a53      	ldr	r2, [pc, #332]	@ (8005020 <low_level_init+0x26c>)
 8004ed4:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004ed6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8004eda:	2224      	movs	r2, #36	@ 0x24
 8004edc:	2100      	movs	r1, #0
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f011 fc2b 	bl	801673a <memset>
  attributes.name = "EthIf";
 8004ee4:	4b4f      	ldr	r3, [pc, #316]	@ (8005024 <low_level_init+0x270>)
 8004ee6:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004ee8:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8004eec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 8004ef0:	2330      	movs	r3, #48	@ 0x30
 8004ef2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8004ef6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8004efa:	461a      	mov	r2, r3
 8004efc:	6879      	ldr	r1, [r7, #4]
 8004efe:	484a      	ldr	r0, [pc, #296]	@ (8005028 <low_level_init+0x274>)
 8004f00:	f000 fcd9 	bl	80058b6 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004f04:	4949      	ldr	r1, [pc, #292]	@ (800502c <low_level_init+0x278>)
 8004f06:	484a      	ldr	r0, [pc, #296]	@ (8005030 <low_level_init+0x27c>)
 8004f08:	f7fc f905 	bl	8001116 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8004f0c:	4848      	ldr	r0, [pc, #288]	@ (8005030 <low_level_init+0x27c>)
 8004f0e:	f7fc f934 	bl	800117a <LAN8742_Init>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d006      	beq.n	8004f26 <low_level_init+0x172>
  {
    netif_set_link_down(netif);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f007 fa93 	bl	800c444 <netif_set_link_down>
    netif_set_down(netif);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f007 fa2a 	bl	800c378 <netif_set_down>
 8004f24:	e06b      	b.n	8004ffe <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8004f26:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d165      	bne.n	8004ffa <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004f2e:	4840      	ldr	r0, [pc, #256]	@ (8005030 <low_level_init+0x27c>)
 8004f30:	f7fc f970 	bl	8001214 <LAN8742_GetLinkState>
 8004f34:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8004f38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	dc06      	bgt.n	8004f4e <low_level_init+0x19a>
    {
      netif_set_link_down(netif);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f007 fa7f 	bl	800c444 <netif_set_link_down>
      netif_set_down(netif);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f007 fa16 	bl	800c378 <netif_set_down>
 8004f4c:	e057      	b.n	8004ffe <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 8004f4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f52:	3b02      	subs	r3, #2
 8004f54:	2b03      	cmp	r3, #3
 8004f56:	d82b      	bhi.n	8004fb0 <low_level_init+0x1fc>
 8004f58:	a201      	add	r2, pc, #4	@ (adr r2, 8004f60 <low_level_init+0x1ac>)
 8004f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5e:	bf00      	nop
 8004f60:	08004f71 	.word	0x08004f71
 8004f64:	08004f83 	.word	0x08004f83
 8004f68:	08004f93 	.word	0x08004f93
 8004f6c:	08004fa3 	.word	0x08004fa3
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8004f70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004f74:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8004f78:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004f7c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8004f80:	e01f      	b.n	8004fc2 <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8004f82:	2300      	movs	r3, #0
 8004f84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8004f88:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004f8c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8004f90:	e017      	b.n	8004fc2 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8004f92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004f96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8004fa0:	e00f      	b.n	8004fc2 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8004fae:	e008      	b.n	8004fc2 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8004fb0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004fb4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8004fb8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004fbc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8004fc0:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004fc2:	f107 0310 	add.w	r3, r7, #16
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	480e      	ldr	r0, [pc, #56]	@ (8005004 <low_level_init+0x250>)
 8004fca:	f7fd f925 	bl	8002218 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8004fce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 8004fd4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004fd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004fda:	f107 0310 	add.w	r3, r7, #16
 8004fde:	4619      	mov	r1, r3
 8004fe0:	4808      	ldr	r0, [pc, #32]	@ (8005004 <low_level_init+0x250>)
 8004fe2:	f7fd faed 	bl	80025c0 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 8004fe6:	4807      	ldr	r0, [pc, #28]	@ (8005004 <low_level_init+0x250>)
 8004fe8:	f7fc fc86 	bl	80018f8 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f007 f957 	bl	800c2a0 <netif_set_up>
    netif_set_link_up(netif);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f007 f9f2 	bl	800c3dc <netif_set_link_up>
 8004ff8:	e001      	b.n	8004ffe <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 8004ffa:	f7fb fbd9 	bl	80007b0 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004ffe:	37a8      	adds	r7, #168	@ 0xa8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	240002cc 	.word	0x240002cc
 8005008:	40028000 	.word	0x40028000
 800500c:	30000080 	.word	0x30000080
 8005010:	30000000 	.word	0x30000000
 8005014:	2400037c 	.word	0x2400037c
 8005018:	0801aae0 	.word	0x0801aae0
 800501c:	240002c4 	.word	0x240002c4
 8005020:	240002c8 	.word	0x240002c8
 8005024:	08017568 	.word	0x08017568
 8005028:	080051c5 	.word	0x080051c5
 800502c:	24000010 	.word	0x24000010
 8005030:	240003b4 	.word	0x240003b4

08005034 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b092      	sub	sp, #72	@ 0x48
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800503e:	2300      	movs	r3, #0
 8005040:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8005042:	2300      	movs	r3, #0
 8005044:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8005046:	2300      	movs	r3, #0
 8005048:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800504c:	f107 030c 	add.w	r3, r7, #12
 8005050:	2230      	movs	r2, #48	@ 0x30
 8005052:	2100      	movs	r1, #0
 8005054:	4618      	mov	r0, r3
 8005056:	f011 fb70 	bl	801673a <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800505a:	f107 030c 	add.w	r3, r7, #12
 800505e:	2230      	movs	r2, #48	@ 0x30
 8005060:	2100      	movs	r1, #0
 8005062:	4618      	mov	r0, r3
 8005064:	f011 fb69 	bl	801673a <memset>

  for(q = p; q != NULL; q = q->next)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	643b      	str	r3, [r7, #64]	@ 0x40
 800506c:	e045      	b.n	80050fa <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800506e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005070:	2b03      	cmp	r3, #3
 8005072:	d902      	bls.n	800507a <low_level_output+0x46>
      return ERR_IF;
 8005074:	f06f 030b 	mvn.w	r3, #11
 8005078:	e07f      	b.n	800517a <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800507a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800507c:	6859      	ldr	r1, [r3, #4]
 800507e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005080:	4613      	mov	r3, r2
 8005082:	005b      	lsls	r3, r3, #1
 8005084:	4413      	add	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	3348      	adds	r3, #72	@ 0x48
 800508a:	443b      	add	r3, r7
 800508c:	3b3c      	subs	r3, #60	@ 0x3c
 800508e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005090:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005092:	895b      	ldrh	r3, [r3, #10]
 8005094:	4619      	mov	r1, r3
 8005096:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005098:	4613      	mov	r3, r2
 800509a:	005b      	lsls	r3, r3, #1
 800509c:	4413      	add	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	3348      	adds	r3, #72	@ 0x48
 80050a2:	443b      	add	r3, r7
 80050a4:	3b38      	subs	r3, #56	@ 0x38
 80050a6:	6019      	str	r1, [r3, #0]

    if(i>0)
 80050a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d011      	beq.n	80050d2 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80050ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050b0:	1e5a      	subs	r2, r3, #1
 80050b2:	f107 000c 	add.w	r0, r7, #12
 80050b6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80050b8:	460b      	mov	r3, r1
 80050ba:	005b      	lsls	r3, r3, #1
 80050bc:	440b      	add	r3, r1
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	18c1      	adds	r1, r0, r3
 80050c2:	4613      	mov	r3, r2
 80050c4:	005b      	lsls	r3, r3, #1
 80050c6:	4413      	add	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	3348      	adds	r3, #72	@ 0x48
 80050cc:	443b      	add	r3, r7
 80050ce:	3b34      	subs	r3, #52	@ 0x34
 80050d0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80050d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d109      	bne.n	80050ee <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80050da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050dc:	4613      	mov	r3, r2
 80050de:	005b      	lsls	r3, r3, #1
 80050e0:	4413      	add	r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	3348      	adds	r3, #72	@ 0x48
 80050e6:	443b      	add	r3, r7
 80050e8:	3b34      	subs	r3, #52	@ 0x34
 80050ea:	2200      	movs	r2, #0
 80050ec:	601a      	str	r2, [r3, #0]
    }

    i++;
 80050ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050f0:	3301      	adds	r3, #1
 80050f2:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 80050f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80050fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1b6      	bne.n	800506e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	891b      	ldrh	r3, [r3, #8]
 8005104:	461a      	mov	r2, r3
 8005106:	4b1f      	ldr	r3, [pc, #124]	@ (8005184 <low_level_output+0x150>)
 8005108:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800510a:	4a1e      	ldr	r2, [pc, #120]	@ (8005184 <low_level_output+0x150>)
 800510c:	f107 030c 	add.w	r3, r7, #12
 8005110:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005112:	4a1c      	ldr	r2, [pc, #112]	@ (8005184 <low_level_output+0x150>)
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8005118:	6838      	ldr	r0, [r7, #0]
 800511a:	f007 fe17 	bl	800cd4c <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800511e:	4919      	ldr	r1, [pc, #100]	@ (8005184 <low_level_output+0x150>)
 8005120:	4819      	ldr	r0, [pc, #100]	@ (8005188 <low_level_output+0x154>)
 8005122:	f7fc fcd5 	bl	8001ad0 <HAL_ETH_Transmit_IT>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d103      	bne.n	8005134 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800512c:	2300      	movs	r3, #0
 800512e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8005132:	e01b      	b.n	800516c <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8005134:	4814      	ldr	r0, [pc, #80]	@ (8005188 <low_level_output+0x154>)
 8005136:	f7fd faad 	bl	8002694 <HAL_ETH_GetError>
 800513a:	4603      	mov	r3, r0
 800513c:	f003 0302 	and.w	r3, r3, #2
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00d      	beq.n	8005160 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8005144:	4b11      	ldr	r3, [pc, #68]	@ (800518c <low_level_output+0x158>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800514c:	4618      	mov	r0, r3
 800514e:	f000 fdf7 	bl	8005d40 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 8005152:	480d      	ldr	r0, [pc, #52]	@ (8005188 <low_level_output+0x154>)
 8005154:	f7fc fe43 	bl	8001dde <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8005158:	23fe      	movs	r3, #254	@ 0xfe
 800515a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800515e:	e005      	b.n	800516c <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8005160:	6838      	ldr	r0, [r7, #0]
 8005162:	f007 fd4d 	bl	800cc00 <pbuf_free>
        errval =  ERR_IF;
 8005166:	23f4      	movs	r3, #244	@ 0xf4
 8005168:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800516c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8005170:	f113 0f02 	cmn.w	r3, #2
 8005174:	d0d3      	beq.n	800511e <low_level_output+0xea>

  return errval;
 8005176:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800517a:	4618      	mov	r0, r3
 800517c:	3748      	adds	r7, #72	@ 0x48
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	2400037c 	.word	0x2400037c
 8005188:	240002cc 	.word	0x240002cc
 800518c:	240002c8 	.word	0x240002c8

08005190 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005198:	2300      	movs	r3, #0
 800519a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800519c:	4b07      	ldr	r3, [pc, #28]	@ (80051bc <low_level_input+0x2c>)
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d105      	bne.n	80051b0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80051a4:	f107 030c 	add.w	r3, r7, #12
 80051a8:	4619      	mov	r1, r3
 80051aa:	4805      	ldr	r0, [pc, #20]	@ (80051c0 <low_level_input+0x30>)
 80051ac:	f7fc fce1 	bl	8001b72 <HAL_ETH_ReadData>
  }

  return p;
 80051b0:	68fb      	ldr	r3, [r7, #12]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	240002c0 	.word	0x240002c0
 80051c0:	240002cc 	.word	0x240002cc

080051c4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80051cc:	2300      	movs	r3, #0
 80051ce:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80051d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005214 <ethernetif_input+0x50>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f04f 31ff 	mov.w	r1, #4294967295
 80051dc:	4618      	mov	r0, r3
 80051de:	f000 fdaf 	bl	8005d40 <osSemaphoreAcquire>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1f5      	bne.n	80051d4 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80051e8:	68b8      	ldr	r0, [r7, #8]
 80051ea:	f7ff ffd1 	bl	8005190 <low_level_input>
 80051ee:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00a      	beq.n	800520c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	68b9      	ldr	r1, [r7, #8]
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	4798      	blx	r3
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d002      	beq.n	800520c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f007 fcfa 	bl	800cc00 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1ea      	bne.n	80051e8 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005212:	e7df      	b.n	80051d4 <ethernetif_input+0x10>
 8005214:	240002c4 	.word	0x240002c4

08005218 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d106      	bne.n	8005234 <ethernetif_init+0x1c>
 8005226:	4b0e      	ldr	r3, [pc, #56]	@ (8005260 <ethernetif_init+0x48>)
 8005228:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800522c:	490d      	ldr	r1, [pc, #52]	@ (8005264 <ethernetif_init+0x4c>)
 800522e:	480e      	ldr	r0, [pc, #56]	@ (8005268 <ethernetif_init+0x50>)
 8005230:	f011 fa1e 	bl	8016670 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2273      	movs	r2, #115	@ 0x73
 8005238:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2274      	movs	r2, #116	@ 0x74
 8005240:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a09      	ldr	r2, [pc, #36]	@ (800526c <ethernetif_init+0x54>)
 8005248:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a08      	ldr	r2, [pc, #32]	@ (8005270 <ethernetif_init+0x58>)
 800524e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f7ff fdaf 	bl	8004db4 <low_level_init>

  return ERR_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	08017570 	.word	0x08017570
 8005264:	0801758c 	.word	0x0801758c
 8005268:	0801759c 	.word	0x0801759c
 800526c:	080143c5 	.word	0x080143c5
 8005270:	08005035 	.word	0x08005035

08005274 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005280:	68f9      	ldr	r1, [r7, #12]
 8005282:	4809      	ldr	r0, [pc, #36]	@ (80052a8 <pbuf_free_custom+0x34>)
 8005284:	f006 fdf4 	bl	800be70 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005288:	4b08      	ldr	r3, [pc, #32]	@ (80052ac <pbuf_free_custom+0x38>)
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d107      	bne.n	80052a0 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005290:	4b06      	ldr	r3, [pc, #24]	@ (80052ac <pbuf_free_custom+0x38>)
 8005292:	2200      	movs	r2, #0
 8005294:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8005296:	4b06      	ldr	r3, [pc, #24]	@ (80052b0 <pbuf_free_custom+0x3c>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4618      	mov	r0, r3
 800529c:	f000 fda2 	bl	8005de4 <osSemaphoreRelease>
  }
}
 80052a0:	bf00      	nop
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	0801aae0 	.word	0x0801aae0
 80052ac:	240002c0 	.word	0x240002c0
 80052b0:	240002c4 	.word	0x240002c4

080052b4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80052b8:	f7fc f884 	bl	80013c4 <HAL_GetTick>
 80052bc:	4603      	mov	r3, r0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	bd80      	pop	{r7, pc}
	...

080052c4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b08e      	sub	sp, #56	@ 0x38
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80052d0:	2200      	movs	r2, #0
 80052d2:	601a      	str	r2, [r3, #0]
 80052d4:	605a      	str	r2, [r3, #4]
 80052d6:	609a      	str	r2, [r3, #8]
 80052d8:	60da      	str	r2, [r3, #12]
 80052da:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a5d      	ldr	r2, [pc, #372]	@ (8005458 <HAL_ETH_MspInit+0x194>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	f040 80b3 	bne.w	800544e <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80052e8:	4b5c      	ldr	r3, [pc, #368]	@ (800545c <HAL_ETH_MspInit+0x198>)
 80052ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80052ee:	4a5b      	ldr	r2, [pc, #364]	@ (800545c <HAL_ETH_MspInit+0x198>)
 80052f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052f4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80052f8:	4b58      	ldr	r3, [pc, #352]	@ (800545c <HAL_ETH_MspInit+0x198>)
 80052fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80052fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005302:	623b      	str	r3, [r7, #32]
 8005304:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8005306:	4b55      	ldr	r3, [pc, #340]	@ (800545c <HAL_ETH_MspInit+0x198>)
 8005308:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800530c:	4a53      	ldr	r2, [pc, #332]	@ (800545c <HAL_ETH_MspInit+0x198>)
 800530e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005312:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005316:	4b51      	ldr	r3, [pc, #324]	@ (800545c <HAL_ETH_MspInit+0x198>)
 8005318:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800531c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005320:	61fb      	str	r3, [r7, #28]
 8005322:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8005324:	4b4d      	ldr	r3, [pc, #308]	@ (800545c <HAL_ETH_MspInit+0x198>)
 8005326:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800532a:	4a4c      	ldr	r2, [pc, #304]	@ (800545c <HAL_ETH_MspInit+0x198>)
 800532c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005330:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005334:	4b49      	ldr	r3, [pc, #292]	@ (800545c <HAL_ETH_MspInit+0x198>)
 8005336:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800533a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800533e:	61bb      	str	r3, [r7, #24]
 8005340:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005342:	4b46      	ldr	r3, [pc, #280]	@ (800545c <HAL_ETH_MspInit+0x198>)
 8005344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005348:	4a44      	ldr	r2, [pc, #272]	@ (800545c <HAL_ETH_MspInit+0x198>)
 800534a:	f043 0304 	orr.w	r3, r3, #4
 800534e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005352:	4b42      	ldr	r3, [pc, #264]	@ (800545c <HAL_ETH_MspInit+0x198>)
 8005354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	617b      	str	r3, [r7, #20]
 800535e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005360:	4b3e      	ldr	r3, [pc, #248]	@ (800545c <HAL_ETH_MspInit+0x198>)
 8005362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005366:	4a3d      	ldr	r2, [pc, #244]	@ (800545c <HAL_ETH_MspInit+0x198>)
 8005368:	f043 0301 	orr.w	r3, r3, #1
 800536c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005370:	4b3a      	ldr	r3, [pc, #232]	@ (800545c <HAL_ETH_MspInit+0x198>)
 8005372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	613b      	str	r3, [r7, #16]
 800537c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800537e:	4b37      	ldr	r3, [pc, #220]	@ (800545c <HAL_ETH_MspInit+0x198>)
 8005380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005384:	4a35      	ldr	r2, [pc, #212]	@ (800545c <HAL_ETH_MspInit+0x198>)
 8005386:	f043 0302 	orr.w	r3, r3, #2
 800538a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800538e:	4b33      	ldr	r3, [pc, #204]	@ (800545c <HAL_ETH_MspInit+0x198>)
 8005390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005394:	f003 0302 	and.w	r3, r3, #2
 8005398:	60fb      	str	r3, [r7, #12]
 800539a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800539c:	4b2f      	ldr	r3, [pc, #188]	@ (800545c <HAL_ETH_MspInit+0x198>)
 800539e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053a2:	4a2e      	ldr	r2, [pc, #184]	@ (800545c <HAL_ETH_MspInit+0x198>)
 80053a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80053ac:	4b2b      	ldr	r3, [pc, #172]	@ (800545c <HAL_ETH_MspInit+0x198>)
 80053ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053b6:	60bb      	str	r3, [r7, #8]
 80053b8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80053ba:	2332      	movs	r3, #50	@ 0x32
 80053bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053be:	2302      	movs	r3, #2
 80053c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053c2:	2300      	movs	r3, #0
 80053c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053c6:	2303      	movs	r3, #3
 80053c8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80053ca:	230b      	movs	r3, #11
 80053cc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80053d2:	4619      	mov	r1, r3
 80053d4:	4822      	ldr	r0, [pc, #136]	@ (8005460 <HAL_ETH_MspInit+0x19c>)
 80053d6:	f7fd fef9 	bl	80031cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80053da:	2386      	movs	r3, #134	@ 0x86
 80053dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053de:	2302      	movs	r3, #2
 80053e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053e2:	2300      	movs	r3, #0
 80053e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053e6:	2303      	movs	r3, #3
 80053e8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80053ea:	230b      	movs	r3, #11
 80053ec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80053f2:	4619      	mov	r1, r3
 80053f4:	481b      	ldr	r0, [pc, #108]	@ (8005464 <HAL_ETH_MspInit+0x1a0>)
 80053f6:	f7fd fee9 	bl	80031cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80053fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80053fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005400:	2302      	movs	r3, #2
 8005402:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005404:	2300      	movs	r3, #0
 8005406:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005408:	2303      	movs	r3, #3
 800540a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800540c:	230b      	movs	r3, #11
 800540e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005410:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005414:	4619      	mov	r1, r3
 8005416:	4814      	ldr	r0, [pc, #80]	@ (8005468 <HAL_ETH_MspInit+0x1a4>)
 8005418:	f7fd fed8 	bl	80031cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800541c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8005420:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005422:	2302      	movs	r3, #2
 8005424:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005426:	2300      	movs	r3, #0
 8005428:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800542a:	2303      	movs	r3, #3
 800542c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800542e:	230b      	movs	r3, #11
 8005430:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005432:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005436:	4619      	mov	r1, r3
 8005438:	480c      	ldr	r0, [pc, #48]	@ (800546c <HAL_ETH_MspInit+0x1a8>)
 800543a:	f7fd fec7 	bl	80031cc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 15, 0);
 800543e:	2200      	movs	r2, #0
 8005440:	210f      	movs	r1, #15
 8005442:	203d      	movs	r0, #61	@ 0x3d
 8005444:	f7fc f8ba 	bl	80015bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005448:	203d      	movs	r0, #61	@ 0x3d
 800544a:	f7fc f8d1 	bl	80015f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800544e:	bf00      	nop
 8005450:	3738      	adds	r7, #56	@ 0x38
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	40028000 	.word	0x40028000
 800545c:	58024400 	.word	0x58024400
 8005460:	58020800 	.word	0x58020800
 8005464:	58020000 	.word	0x58020000
 8005468:	58020400 	.word	0x58020400
 800546c:	58021800 	.word	0x58021800

08005470 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005474:	4802      	ldr	r0, [pc, #8]	@ (8005480 <ETH_PHY_IO_Init+0x10>)
 8005476:	f7fd f8bd 	bl	80025f4 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	bd80      	pop	{r7, pc}
 8005480:	240002cc 	.word	0x240002cc

08005484 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005484:	b480      	push	{r7}
 8005486:	af00      	add	r7, sp, #0
  return 0;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	68f9      	ldr	r1, [r7, #12]
 80054a6:	4807      	ldr	r0, [pc, #28]	@ (80054c4 <ETH_PHY_IO_ReadReg+0x30>)
 80054a8:	f7fc fe0e 	bl	80020c8 <HAL_ETH_ReadPHYRegister>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d002      	beq.n	80054b8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80054b2:	f04f 33ff 	mov.w	r3, #4294967295
 80054b6:	e000      	b.n	80054ba <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	240002cc 	.word	0x240002cc

080054c8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68ba      	ldr	r2, [r7, #8]
 80054d8:	68f9      	ldr	r1, [r7, #12]
 80054da:	4807      	ldr	r0, [pc, #28]	@ (80054f8 <ETH_PHY_IO_WriteReg+0x30>)
 80054dc:	f7fc fe48 	bl	8002170 <HAL_ETH_WritePHYRegister>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d002      	beq.n	80054ec <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80054e6:	f04f 33ff 	mov.w	r3, #4294967295
 80054ea:	e000      	b.n	80054ee <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	240002cc 	.word	0x240002cc

080054fc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005500:	f7fb ff60 	bl	80013c4 <HAL_GetTick>
 8005504:	4603      	mov	r3, r0
}
 8005506:	4618      	mov	r0, r3
 8005508:	bd80      	pop	{r7, pc}
	...

0800550c <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b0a0      	sub	sp, #128	@ 0x80
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005514:	f107 0308 	add.w	r3, r7, #8
 8005518:	2264      	movs	r2, #100	@ 0x64
 800551a:	2100      	movs	r1, #0
 800551c:	4618      	mov	r0, r3
 800551e:	f011 f90c 	bl	801673a <memset>
  int32_t PHYLinkState = 0;
 8005522:	2300      	movs	r3, #0
 8005524:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8005526:	2300      	movs	r3, #0
 8005528:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800552a:	2300      	movs	r3, #0
 800552c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800552e:	2300      	movs	r3, #0
 8005530:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005536:	483a      	ldr	r0, [pc, #232]	@ (8005620 <ethernet_link_thread+0x114>)
 8005538:	f7fb fe6c 	bl	8001214 <LAN8742_GetLinkState>
 800553c:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800553e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005540:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005544:	089b      	lsrs	r3, r3, #2
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00c      	beq.n	800556a <ethernet_link_thread+0x5e>
 8005550:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005552:	2b01      	cmp	r3, #1
 8005554:	dc09      	bgt.n	800556a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8005556:	4833      	ldr	r0, [pc, #204]	@ (8005624 <ethernet_link_thread+0x118>)
 8005558:	f7fc fa42 	bl	80019e0 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800555c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800555e:	f006 ff0b 	bl	800c378 <netif_set_down>
    netif_set_link_down(netif);
 8005562:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005564:	f006 ff6e 	bl	800c444 <netif_set_link_down>
 8005568:	e055      	b.n	8005616 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800556a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800556c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005570:	f003 0304 	and.w	r3, r3, #4
 8005574:	2b00      	cmp	r3, #0
 8005576:	d14e      	bne.n	8005616 <ethernet_link_thread+0x10a>
 8005578:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800557a:	2b01      	cmp	r3, #1
 800557c:	dd4b      	ble.n	8005616 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800557e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005580:	3b02      	subs	r3, #2
 8005582:	2b03      	cmp	r3, #3
 8005584:	d82a      	bhi.n	80055dc <ethernet_link_thread+0xd0>
 8005586:	a201      	add	r2, pc, #4	@ (adr r2, 800558c <ethernet_link_thread+0x80>)
 8005588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558c:	0800559d 	.word	0x0800559d
 8005590:	080055af 	.word	0x080055af
 8005594:	080055bf 	.word	0x080055bf
 8005598:	080055cf 	.word	0x080055cf
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800559c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80055a0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80055a2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80055a6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80055a8:	2301      	movs	r3, #1
 80055aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80055ac:	e017      	b.n	80055de <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80055ae:	2300      	movs	r3, #0
 80055b0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80055b2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80055b6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80055b8:	2301      	movs	r3, #1
 80055ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80055bc:	e00f      	b.n	80055de <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80055be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80055c2:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80055c4:	2300      	movs	r3, #0
 80055c6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80055c8:	2301      	movs	r3, #1
 80055ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80055cc:	e007      	b.n	80055de <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80055ce:	2300      	movs	r3, #0
 80055d0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80055d2:	2300      	movs	r3, #0
 80055d4:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80055d6:	2301      	movs	r3, #1
 80055d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80055da:	e000      	b.n	80055de <ethernet_link_thread+0xd2>
    default:
      break;
 80055dc:	bf00      	nop
    }

    if(linkchanged)
 80055de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d018      	beq.n	8005616 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80055e4:	f107 0308 	add.w	r3, r7, #8
 80055e8:	4619      	mov	r1, r3
 80055ea:	480e      	ldr	r0, [pc, #56]	@ (8005624 <ethernet_link_thread+0x118>)
 80055ec:	f7fc fe14 	bl	8002218 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80055f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055f2:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80055f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055f6:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80055f8:	f107 0308 	add.w	r3, r7, #8
 80055fc:	4619      	mov	r1, r3
 80055fe:	4809      	ldr	r0, [pc, #36]	@ (8005624 <ethernet_link_thread+0x118>)
 8005600:	f7fc ffde 	bl	80025c0 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8005604:	4807      	ldr	r0, [pc, #28]	@ (8005624 <ethernet_link_thread+0x118>)
 8005606:	f7fc f977 	bl	80018f8 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800560a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800560c:	f006 fe48 	bl	800c2a0 <netif_set_up>
      netif_set_link_up(netif);
 8005610:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005612:	f006 fee3 	bl	800c3dc <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8005616:	2064      	movs	r0, #100	@ 0x64
 8005618:	f000 f9df 	bl	80059da <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800561c:	e78b      	b.n	8005536 <ethernet_link_thread+0x2a>
 800561e:	bf00      	nop
 8005620:	240003b4 	.word	0x240003b4
 8005624:	240002cc 	.word	0x240002cc

08005628 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af02      	add	r7, sp, #8
 800562e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005630:	4812      	ldr	r0, [pc, #72]	@ (800567c <HAL_ETH_RxAllocateCallback+0x54>)
 8005632:	f006 fba9 	bl	800bd88 <memp_malloc_pool>
 8005636:	60f8      	str	r0, [r7, #12]
  if (p)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d014      	beq.n	8005668 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f103 0220 	add.w	r2, r3, #32
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	4a0d      	ldr	r2, [pc, #52]	@ (8005680 <HAL_ETH_RxAllocateCallback+0x58>)
 800564c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005656:	9201      	str	r2, [sp, #4]
 8005658:	9300      	str	r3, [sp, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2241      	movs	r2, #65	@ 0x41
 800565e:	2100      	movs	r1, #0
 8005660:	2000      	movs	r0, #0
 8005662:	f007 f913 	bl	800c88c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005666:	e005      	b.n	8005674 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005668:	4b06      	ldr	r3, [pc, #24]	@ (8005684 <HAL_ETH_RxAllocateCallback+0x5c>)
 800566a:	2201      	movs	r2, #1
 800566c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	601a      	str	r2, [r3, #0]
}
 8005674:	bf00      	nop
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	0801aae0 	.word	0x0801aae0
 8005680:	08005275 	.word	0x08005275
 8005684:	240002c0 	.word	0x240002c0

08005688 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005688:	b480      	push	{r7}
 800568a:	b08d      	sub	sp, #52	@ 0x34
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
 8005694:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 800569e:	2300      	movs	r3, #0
 80056a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	3b20      	subs	r3, #32
 80056a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 80056a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056aa:	2200      	movs	r2, #0
 80056ac:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80056ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056b0:	2200      	movs	r2, #0
 80056b2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80056b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056b6:	887a      	ldrh	r2, [r7, #2]
 80056b8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80056ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d103      	bne.n	80056ca <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80056c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056c6:	601a      	str	r2, [r3, #0]
 80056c8:	e003      	b.n	80056d2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80056ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056d0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80056d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056d6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80056d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056de:	e009      	b.n	80056f4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80056e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056e2:	891a      	ldrh	r2, [r3, #8]
 80056e4:	887b      	ldrh	r3, [r7, #2]
 80056e6:	4413      	add	r3, r2
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ec:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80056ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1f2      	bne.n	80056e0 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80056fa:	887b      	ldrh	r3, [r7, #2]
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	623a      	str	r2, [r7, #32]
 8005700:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	2b00      	cmp	r3, #0
 8005706:	dd1d      	ble.n	8005744 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	f003 021f 	and.w	r2, r3, #31
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	4413      	add	r3, r2
 8005712:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005718:	f3bf 8f4f 	dsb	sy
}
 800571c:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800571e:	4a0d      	ldr	r2, [pc, #52]	@ (8005754 <HAL_ETH_RxLinkCallback+0xcc>)
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	3320      	adds	r3, #32
 800572a:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	3b20      	subs	r3, #32
 8005730:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	2b00      	cmp	r3, #0
 8005736:	dcf2      	bgt.n	800571e <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8005738:	f3bf 8f4f 	dsb	sy
}
 800573c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800573e:	f3bf 8f6f 	isb	sy
}
 8005742:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8005744:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005746:	bf00      	nop
 8005748:	3734      	adds	r7, #52	@ 0x34
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	e000ed00 	.word	0xe000ed00

08005758 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f007 fa4d 	bl	800cc00 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8005766:	bf00      	nop
 8005768:	3708      	adds	r7, #8
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
	...

08005770 <__NVIC_SetPriority>:
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	4603      	mov	r3, r0
 8005778:	6039      	str	r1, [r7, #0]
 800577a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800577c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005780:	2b00      	cmp	r3, #0
 8005782:	db0a      	blt.n	800579a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	b2da      	uxtb	r2, r3
 8005788:	490c      	ldr	r1, [pc, #48]	@ (80057bc <__NVIC_SetPriority+0x4c>)
 800578a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800578e:	0112      	lsls	r2, r2, #4
 8005790:	b2d2      	uxtb	r2, r2
 8005792:	440b      	add	r3, r1
 8005794:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005798:	e00a      	b.n	80057b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	b2da      	uxtb	r2, r3
 800579e:	4908      	ldr	r1, [pc, #32]	@ (80057c0 <__NVIC_SetPriority+0x50>)
 80057a0:	88fb      	ldrh	r3, [r7, #6]
 80057a2:	f003 030f 	and.w	r3, r3, #15
 80057a6:	3b04      	subs	r3, #4
 80057a8:	0112      	lsls	r2, r2, #4
 80057aa:	b2d2      	uxtb	r2, r2
 80057ac:	440b      	add	r3, r1
 80057ae:	761a      	strb	r2, [r3, #24]
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr
 80057bc:	e000e100 	.word	0xe000e100
 80057c0:	e000ed00 	.word	0xe000ed00

080057c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80057c4:	b580      	push	{r7, lr}
 80057c6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80057c8:	4b05      	ldr	r3, [pc, #20]	@ (80057e0 <SysTick_Handler+0x1c>)
 80057ca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80057cc:	f002 fa52 	bl	8007c74 <xTaskGetSchedulerState>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d001      	beq.n	80057da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80057d6:	f003 f83f 	bl	8008858 <xPortSysTickHandler>
  }
}
 80057da:	bf00      	nop
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	e000e010 	.word	0xe000e010

080057e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80057e4:	b580      	push	{r7, lr}
 80057e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80057e8:	2100      	movs	r1, #0
 80057ea:	f06f 0004 	mvn.w	r0, #4
 80057ee:	f7ff ffbf 	bl	8005770 <__NVIC_SetPriority>
#endif
}
 80057f2:	bf00      	nop
 80057f4:	bd80      	pop	{r7, pc}
	...

080057f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057fe:	f3ef 8305 	mrs	r3, IPSR
 8005802:	603b      	str	r3, [r7, #0]
  return(result);
 8005804:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800580a:	f06f 0305 	mvn.w	r3, #5
 800580e:	607b      	str	r3, [r7, #4]
 8005810:	e00c      	b.n	800582c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005812:	4b0a      	ldr	r3, [pc, #40]	@ (800583c <osKernelInitialize+0x44>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d105      	bne.n	8005826 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800581a:	4b08      	ldr	r3, [pc, #32]	@ (800583c <osKernelInitialize+0x44>)
 800581c:	2201      	movs	r2, #1
 800581e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005820:	2300      	movs	r3, #0
 8005822:	607b      	str	r3, [r7, #4]
 8005824:	e002      	b.n	800582c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005826:	f04f 33ff 	mov.w	r3, #4294967295
 800582a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800582c:	687b      	ldr	r3, [r7, #4]
}
 800582e:	4618      	mov	r0, r3
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	240003d4 	.word	0x240003d4

08005840 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005846:	f3ef 8305 	mrs	r3, IPSR
 800584a:	603b      	str	r3, [r7, #0]
  return(result);
 800584c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005852:	f06f 0305 	mvn.w	r3, #5
 8005856:	607b      	str	r3, [r7, #4]
 8005858:	e010      	b.n	800587c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800585a:	4b0b      	ldr	r3, [pc, #44]	@ (8005888 <osKernelStart+0x48>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d109      	bne.n	8005876 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005862:	f7ff ffbf 	bl	80057e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005866:	4b08      	ldr	r3, [pc, #32]	@ (8005888 <osKernelStart+0x48>)
 8005868:	2202      	movs	r2, #2
 800586a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800586c:	f001 fe14 	bl	8007498 <vTaskStartScheduler>
      stat = osOK;
 8005870:	2300      	movs	r3, #0
 8005872:	607b      	str	r3, [r7, #4]
 8005874:	e002      	b.n	800587c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005876:	f04f 33ff 	mov.w	r3, #4294967295
 800587a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800587c:	687b      	ldr	r3, [r7, #4]
}
 800587e:	4618      	mov	r0, r3
 8005880:	3708      	adds	r7, #8
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	240003d4 	.word	0x240003d4

0800588c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005892:	f3ef 8305 	mrs	r3, IPSR
 8005896:	603b      	str	r3, [r7, #0]
  return(result);
 8005898:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800589e:	f001 ff09 	bl	80076b4 <xTaskGetTickCountFromISR>
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	e002      	b.n	80058ac <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80058a6:	f001 fef5 	bl	8007694 <xTaskGetTickCount>
 80058aa:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80058ac:	687b      	ldr	r3, [r7, #4]
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3708      	adds	r7, #8
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b08e      	sub	sp, #56	@ 0x38
 80058ba:	af04      	add	r7, sp, #16
 80058bc:	60f8      	str	r0, [r7, #12]
 80058be:	60b9      	str	r1, [r7, #8]
 80058c0:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80058c2:	2300      	movs	r3, #0
 80058c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058c6:	f3ef 8305 	mrs	r3, IPSR
 80058ca:	617b      	str	r3, [r7, #20]
  return(result);
 80058cc:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d17e      	bne.n	80059d0 <osThreadNew+0x11a>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d07b      	beq.n	80059d0 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80058d8:	2380      	movs	r3, #128	@ 0x80
 80058da:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80058dc:	2318      	movs	r3, #24
 80058de:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80058e0:	2300      	movs	r3, #0
 80058e2:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80058e4:	f04f 33ff 	mov.w	r3, #4294967295
 80058e8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d045      	beq.n	800597c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d002      	beq.n	80058fe <osThreadNew+0x48>
        name = attr->name;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d002      	beq.n	800590c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d008      	beq.n	8005924 <osThreadNew+0x6e>
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	2b38      	cmp	r3, #56	@ 0x38
 8005916:	d805      	bhi.n	8005924 <osThreadNew+0x6e>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <osThreadNew+0x72>
        return (NULL);
 8005924:	2300      	movs	r3, #0
 8005926:	e054      	b.n	80059d2 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	695b      	ldr	r3, [r3, #20]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d003      	beq.n	8005938 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	089b      	lsrs	r3, r3, #2
 8005936:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00e      	beq.n	800595e <osThreadNew+0xa8>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	2ba7      	cmp	r3, #167	@ 0xa7
 8005946:	d90a      	bls.n	800595e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800594c:	2b00      	cmp	r3, #0
 800594e:	d006      	beq.n	800595e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d002      	beq.n	800595e <osThreadNew+0xa8>
        mem = 1;
 8005958:	2301      	movs	r3, #1
 800595a:	61bb      	str	r3, [r7, #24]
 800595c:	e010      	b.n	8005980 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10c      	bne.n	8005980 <osThreadNew+0xca>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d108      	bne.n	8005980 <osThreadNew+0xca>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d104      	bne.n	8005980 <osThreadNew+0xca>
          mem = 0;
 8005976:	2300      	movs	r3, #0
 8005978:	61bb      	str	r3, [r7, #24]
 800597a:	e001      	b.n	8005980 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800597c:	2300      	movs	r3, #0
 800597e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d110      	bne.n	80059a8 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800598e:	9202      	str	r2, [sp, #8]
 8005990:	9301      	str	r3, [sp, #4]
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	6a3a      	ldr	r2, [r7, #32]
 800599a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f001 fbd3 	bl	8007148 <xTaskCreateStatic>
 80059a2:	4603      	mov	r3, r0
 80059a4:	613b      	str	r3, [r7, #16]
 80059a6:	e013      	b.n	80059d0 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d110      	bne.n	80059d0 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80059ae:	6a3b      	ldr	r3, [r7, #32]
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	f107 0310 	add.w	r3, r7, #16
 80059b6:	9301      	str	r3, [sp, #4]
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	9300      	str	r3, [sp, #0]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f001 fbf5 	bl	80071b0 <xTaskCreate>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d001      	beq.n	80059d0 <osThreadNew+0x11a>
            hTask = NULL;
 80059cc:	2300      	movs	r3, #0
 80059ce:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80059d0:	693b      	ldr	r3, [r7, #16]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3728      	adds	r7, #40	@ 0x28
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80059da:	b580      	push	{r7, lr}
 80059dc:	b084      	sub	sp, #16
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059e2:	f3ef 8305 	mrs	r3, IPSR
 80059e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80059e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d003      	beq.n	80059f6 <osDelay+0x1c>
    stat = osErrorISR;
 80059ee:	f06f 0305 	mvn.w	r3, #5
 80059f2:	60fb      	str	r3, [r7, #12]
 80059f4:	e007      	b.n	8005a06 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f001 fd21 	bl	8007448 <vTaskDelay>
    }
  }

  return (stat);
 8005a06:	68fb      	ldr	r3, [r7, #12]
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b088      	sub	sp, #32
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a1c:	f3ef 8305 	mrs	r3, IPSR
 8005a20:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a22:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d174      	bne.n	8005b12 <osMutexNew+0x102>
    if (attr != NULL) {
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d003      	beq.n	8005a36 <osMutexNew+0x26>
      type = attr->attr_bits;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	61bb      	str	r3, [r7, #24]
 8005a34:	e001      	b.n	8005a3a <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005a36:	2300      	movs	r3, #0
 8005a38:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	f003 0301 	and.w	r3, r3, #1
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d002      	beq.n	8005a4a <osMutexNew+0x3a>
      rmtx = 1U;
 8005a44:	2301      	movs	r3, #1
 8005a46:	617b      	str	r3, [r7, #20]
 8005a48:	e001      	b.n	8005a4e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	f003 0308 	and.w	r3, r3, #8
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d15c      	bne.n	8005b12 <osMutexNew+0x102>
      mem = -1;
 8005a58:	f04f 33ff 	mov.w	r3, #4294967295
 8005a5c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d015      	beq.n	8005a90 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d006      	beq.n	8005a7a <osMutexNew+0x6a>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	2b4f      	cmp	r3, #79	@ 0x4f
 8005a72:	d902      	bls.n	8005a7a <osMutexNew+0x6a>
          mem = 1;
 8005a74:	2301      	movs	r3, #1
 8005a76:	613b      	str	r3, [r7, #16]
 8005a78:	e00c      	b.n	8005a94 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d108      	bne.n	8005a94 <osMutexNew+0x84>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d104      	bne.n	8005a94 <osMutexNew+0x84>
            mem = 0;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	613b      	str	r3, [r7, #16]
 8005a8e:	e001      	b.n	8005a94 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005a90:	2300      	movs	r3, #0
 8005a92:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d112      	bne.n	8005ac0 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d007      	beq.n	8005ab0 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	2004      	movs	r0, #4
 8005aa8:	f000 fd6a 	bl	8006580 <xQueueCreateMutexStatic>
 8005aac:	61f8      	str	r0, [r7, #28]
 8005aae:	e016      	b.n	8005ade <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	2001      	movs	r0, #1
 8005ab8:	f000 fd62 	bl	8006580 <xQueueCreateMutexStatic>
 8005abc:	61f8      	str	r0, [r7, #28]
 8005abe:	e00e      	b.n	8005ade <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d10b      	bne.n	8005ade <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d004      	beq.n	8005ad6 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005acc:	2004      	movs	r0, #4
 8005ace:	f000 fd3f 	bl	8006550 <xQueueCreateMutex>
 8005ad2:	61f8      	str	r0, [r7, #28]
 8005ad4:	e003      	b.n	8005ade <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005ad6:	2001      	movs	r0, #1
 8005ad8:	f000 fd3a 	bl	8006550 <xQueueCreateMutex>
 8005adc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00c      	beq.n	8005afe <osMutexNew+0xee>
        if (attr != NULL) {
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d003      	beq.n	8005af2 <osMutexNew+0xe2>
          name = attr->name;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	60fb      	str	r3, [r7, #12]
 8005af0:	e001      	b.n	8005af6 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005af2:	2300      	movs	r3, #0
 8005af4:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005af6:	68f9      	ldr	r1, [r7, #12]
 8005af8:	69f8      	ldr	r0, [r7, #28]
 8005afa:	f001 fa9d 	bl	8007038 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d006      	beq.n	8005b12 <osMutexNew+0x102>
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d003      	beq.n	8005b12 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	f043 0301 	orr.w	r3, r3, #1
 8005b10:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005b12:	69fb      	ldr	r3, [r7, #28]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3720      	adds	r7, #32
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f023 0301 	bic.w	r3, r3, #1
 8005b2c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005b36:	2300      	movs	r3, #0
 8005b38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b3a:	f3ef 8305 	mrs	r3, IPSR
 8005b3e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b40:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d003      	beq.n	8005b4e <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005b46:	f06f 0305 	mvn.w	r3, #5
 8005b4a:	617b      	str	r3, [r7, #20]
 8005b4c:	e02c      	b.n	8005ba8 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d103      	bne.n	8005b5c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005b54:	f06f 0303 	mvn.w	r3, #3
 8005b58:	617b      	str	r3, [r7, #20]
 8005b5a:	e025      	b.n	8005ba8 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d011      	beq.n	8005b86 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005b62:	6839      	ldr	r1, [r7, #0]
 8005b64:	6938      	ldr	r0, [r7, #16]
 8005b66:	f000 fd4c 	bl	8006602 <xQueueTakeMutexRecursive>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d01b      	beq.n	8005ba8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d003      	beq.n	8005b7e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005b76:	f06f 0301 	mvn.w	r3, #1
 8005b7a:	617b      	str	r3, [r7, #20]
 8005b7c:	e014      	b.n	8005ba8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005b7e:	f06f 0302 	mvn.w	r3, #2
 8005b82:	617b      	str	r3, [r7, #20]
 8005b84:	e010      	b.n	8005ba8 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005b86:	6839      	ldr	r1, [r7, #0]
 8005b88:	6938      	ldr	r0, [r7, #16]
 8005b8a:	f000 ffc9 	bl	8006b20 <xQueueSemaphoreTake>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d009      	beq.n	8005ba8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005b9a:	f06f 0301 	mvn.w	r3, #1
 8005b9e:	617b      	str	r3, [r7, #20]
 8005ba0:	e002      	b.n	8005ba8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005ba2:	f06f 0302 	mvn.w	r3, #2
 8005ba6:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005ba8:	697b      	ldr	r3, [r7, #20]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3718      	adds	r7, #24
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b086      	sub	sp, #24
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f023 0301 	bic.w	r3, r3, #1
 8005bc0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bce:	f3ef 8305 	mrs	r3, IPSR
 8005bd2:	60bb      	str	r3, [r7, #8]
  return(result);
 8005bd4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <osMutexRelease+0x30>
    stat = osErrorISR;
 8005bda:	f06f 0305 	mvn.w	r3, #5
 8005bde:	617b      	str	r3, [r7, #20]
 8005be0:	e01f      	b.n	8005c22 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d103      	bne.n	8005bf0 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005be8:	f06f 0303 	mvn.w	r3, #3
 8005bec:	617b      	str	r3, [r7, #20]
 8005bee:	e018      	b.n	8005c22 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d009      	beq.n	8005c0a <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005bf6:	6938      	ldr	r0, [r7, #16]
 8005bf8:	f000 fcdd 	bl	80065b6 <xQueueGiveMutexRecursive>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d00f      	beq.n	8005c22 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005c02:	f06f 0302 	mvn.w	r3, #2
 8005c06:	617b      	str	r3, [r7, #20]
 8005c08:	e00b      	b.n	8005c22 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	2100      	movs	r1, #0
 8005c10:	6938      	ldr	r0, [r7, #16]
 8005c12:	f000 fd4f 	bl	80066b4 <xQueueGenericSend>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d002      	beq.n	8005c22 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005c1c:	f06f 0302 	mvn.w	r3, #2
 8005c20:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005c22:	697b      	ldr	r3, [r7, #20]
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3718      	adds	r7, #24
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b08a      	sub	sp, #40	@ 0x28
 8005c30:	af02      	add	r7, sp, #8
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c3c:	f3ef 8305 	mrs	r3, IPSR
 8005c40:	613b      	str	r3, [r7, #16]
  return(result);
 8005c42:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d175      	bne.n	8005d34 <osSemaphoreNew+0x108>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d072      	beq.n	8005d34 <osSemaphoreNew+0x108>
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d86e      	bhi.n	8005d34 <osSemaphoreNew+0x108>
    mem = -1;
 8005c56:	f04f 33ff 	mov.w	r3, #4294967295
 8005c5a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d015      	beq.n	8005c8e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d006      	beq.n	8005c78 <osSemaphoreNew+0x4c>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	2b4f      	cmp	r3, #79	@ 0x4f
 8005c70:	d902      	bls.n	8005c78 <osSemaphoreNew+0x4c>
        mem = 1;
 8005c72:	2301      	movs	r3, #1
 8005c74:	61bb      	str	r3, [r7, #24]
 8005c76:	e00c      	b.n	8005c92 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d108      	bne.n	8005c92 <osSemaphoreNew+0x66>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d104      	bne.n	8005c92 <osSemaphoreNew+0x66>
          mem = 0;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	61bb      	str	r3, [r7, #24]
 8005c8c:	e001      	b.n	8005c92 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c98:	d04c      	beq.n	8005d34 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d128      	bne.n	8005cf2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d10a      	bne.n	8005cbc <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	2203      	movs	r2, #3
 8005cac:	9200      	str	r2, [sp, #0]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	2001      	movs	r0, #1
 8005cb4:	f000 fbb6 	bl	8006424 <xQueueGenericCreateStatic>
 8005cb8:	61f8      	str	r0, [r7, #28]
 8005cba:	e005      	b.n	8005cc8 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005cbc:	2203      	movs	r2, #3
 8005cbe:	2100      	movs	r1, #0
 8005cc0:	2001      	movs	r0, #1
 8005cc2:	f000 fbdc 	bl	800647e <xQueueGenericCreate>
 8005cc6:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d022      	beq.n	8005d14 <osSemaphoreNew+0xe8>
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d01f      	beq.n	8005d14 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	2100      	movs	r1, #0
 8005cda:	69f8      	ldr	r0, [r7, #28]
 8005cdc:	f000 fcea 	bl	80066b4 <xQueueGenericSend>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d016      	beq.n	8005d14 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005ce6:	69f8      	ldr	r0, [r7, #28]
 8005ce8:	f001 f869 	bl	8006dbe <vQueueDelete>
            hSemaphore = NULL;
 8005cec:	2300      	movs	r3, #0
 8005cee:	61fb      	str	r3, [r7, #28]
 8005cf0:	e010      	b.n	8005d14 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d108      	bne.n	8005d0a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	68b9      	ldr	r1, [r7, #8]
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f000 fca6 	bl	8006652 <xQueueCreateCountingSemaphoreStatic>
 8005d06:	61f8      	str	r0, [r7, #28]
 8005d08:	e004      	b.n	8005d14 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005d0a:	68b9      	ldr	r1, [r7, #8]
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f000 fcba 	bl	8006686 <xQueueCreateCountingSemaphore>
 8005d12:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00c      	beq.n	8005d34 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d003      	beq.n	8005d28 <osSemaphoreNew+0xfc>
          name = attr->name;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	617b      	str	r3, [r7, #20]
 8005d26:	e001      	b.n	8005d2c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005d2c:	6979      	ldr	r1, [r7, #20]
 8005d2e:	69f8      	ldr	r0, [r7, #28]
 8005d30:	f001 f982 	bl	8007038 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005d34:	69fb      	ldr	r3, [r7, #28]
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3720      	adds	r7, #32
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
	...

08005d40 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b086      	sub	sp, #24
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d103      	bne.n	8005d60 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005d58:	f06f 0303 	mvn.w	r3, #3
 8005d5c:	617b      	str	r3, [r7, #20]
 8005d5e:	e039      	b.n	8005dd4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d60:	f3ef 8305 	mrs	r3, IPSR
 8005d64:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d66:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d022      	beq.n	8005db2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005d72:	f06f 0303 	mvn.w	r3, #3
 8005d76:	617b      	str	r3, [r7, #20]
 8005d78:	e02c      	b.n	8005dd4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005d7e:	f107 0308 	add.w	r3, r7, #8
 8005d82:	461a      	mov	r2, r3
 8005d84:	2100      	movs	r1, #0
 8005d86:	6938      	ldr	r0, [r7, #16]
 8005d88:	f000 ff9a 	bl	8006cc0 <xQueueReceiveFromISR>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d003      	beq.n	8005d9a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005d92:	f06f 0302 	mvn.w	r3, #2
 8005d96:	617b      	str	r3, [r7, #20]
 8005d98:	e01c      	b.n	8005dd4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d019      	beq.n	8005dd4 <osSemaphoreAcquire+0x94>
 8005da0:	4b0f      	ldr	r3, [pc, #60]	@ (8005de0 <osSemaphoreAcquire+0xa0>)
 8005da2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005da6:	601a      	str	r2, [r3, #0]
 8005da8:	f3bf 8f4f 	dsb	sy
 8005dac:	f3bf 8f6f 	isb	sy
 8005db0:	e010      	b.n	8005dd4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005db2:	6839      	ldr	r1, [r7, #0]
 8005db4:	6938      	ldr	r0, [r7, #16]
 8005db6:	f000 feb3 	bl	8006b20 <xQueueSemaphoreTake>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d009      	beq.n	8005dd4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d003      	beq.n	8005dce <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005dc6:	f06f 0301 	mvn.w	r3, #1
 8005dca:	617b      	str	r3, [r7, #20]
 8005dcc:	e002      	b.n	8005dd4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005dce:	f06f 0302 	mvn.w	r3, #2
 8005dd2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005dd4:	697b      	ldr	r3, [r7, #20]
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3718      	adds	r7, #24
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	e000ed04 	.word	0xe000ed04

08005de4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b086      	sub	sp, #24
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005df0:	2300      	movs	r3, #0
 8005df2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d103      	bne.n	8005e02 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005dfa:	f06f 0303 	mvn.w	r3, #3
 8005dfe:	617b      	str	r3, [r7, #20]
 8005e00:	e02c      	b.n	8005e5c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e02:	f3ef 8305 	mrs	r3, IPSR
 8005e06:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e08:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d01a      	beq.n	8005e44 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005e12:	f107 0308 	add.w	r3, r7, #8
 8005e16:	4619      	mov	r1, r3
 8005e18:	6938      	ldr	r0, [r7, #16]
 8005e1a:	f000 fd74 	bl	8006906 <xQueueGiveFromISR>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d003      	beq.n	8005e2c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005e24:	f06f 0302 	mvn.w	r3, #2
 8005e28:	617b      	str	r3, [r7, #20]
 8005e2a:	e017      	b.n	8005e5c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d014      	beq.n	8005e5c <osSemaphoreRelease+0x78>
 8005e32:	4b0d      	ldr	r3, [pc, #52]	@ (8005e68 <osSemaphoreRelease+0x84>)
 8005e34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e38:	601a      	str	r2, [r3, #0]
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	f3bf 8f6f 	isb	sy
 8005e42:	e00b      	b.n	8005e5c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005e44:	2300      	movs	r3, #0
 8005e46:	2200      	movs	r2, #0
 8005e48:	2100      	movs	r1, #0
 8005e4a:	6938      	ldr	r0, [r7, #16]
 8005e4c:	f000 fc32 	bl	80066b4 <xQueueGenericSend>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d002      	beq.n	8005e5c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005e56:	f06f 0302 	mvn.w	r3, #2
 8005e5a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005e5c:	697b      	ldr	r3, [r7, #20]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3718      	adds	r7, #24
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	e000ed04 	.word	0xe000ed04

08005e6c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b086      	sub	sp, #24
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e78:	f3ef 8305 	mrs	r3, IPSR
 8005e7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d003      	beq.n	8005e8c <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8005e84:	f06f 0305 	mvn.w	r3, #5
 8005e88:	617b      	str	r3, [r7, #20]
 8005e8a:	e00e      	b.n	8005eaa <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d103      	bne.n	8005e9a <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8005e92:	f06f 0303 	mvn.w	r3, #3
 8005e96:	617b      	str	r3, [r7, #20]
 8005e98:	e007      	b.n	8005eaa <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8005e9a:	6938      	ldr	r0, [r7, #16]
 8005e9c:	f001 f8f6 	bl	800708c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8005ea4:	6938      	ldr	r0, [r7, #16]
 8005ea6:	f000 ff8a 	bl	8006dbe <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8005eaa:	697b      	ldr	r3, [r7, #20]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3718      	adds	r7, #24
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b08a      	sub	sp, #40	@ 0x28
 8005eb8:	af02      	add	r7, sp, #8
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ec4:	f3ef 8305 	mrs	r3, IPSR
 8005ec8:	613b      	str	r3, [r7, #16]
  return(result);
 8005eca:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d15f      	bne.n	8005f90 <osMessageQueueNew+0xdc>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d05c      	beq.n	8005f90 <osMessageQueueNew+0xdc>
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d059      	beq.n	8005f90 <osMessageQueueNew+0xdc>
    mem = -1;
 8005edc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ee0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d029      	beq.n	8005f3c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d012      	beq.n	8005f16 <osMessageQueueNew+0x62>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	2b4f      	cmp	r3, #79	@ 0x4f
 8005ef6:	d90e      	bls.n	8005f16 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00a      	beq.n	8005f16 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	695a      	ldr	r2, [r3, #20]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	68b9      	ldr	r1, [r7, #8]
 8005f08:	fb01 f303 	mul.w	r3, r1, r3
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d302      	bcc.n	8005f16 <osMessageQueueNew+0x62>
        mem = 1;
 8005f10:	2301      	movs	r3, #1
 8005f12:	61bb      	str	r3, [r7, #24]
 8005f14:	e014      	b.n	8005f40 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d110      	bne.n	8005f40 <osMessageQueueNew+0x8c>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10c      	bne.n	8005f40 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d108      	bne.n	8005f40 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d104      	bne.n	8005f40 <osMessageQueueNew+0x8c>
          mem = 0;
 8005f36:	2300      	movs	r3, #0
 8005f38:	61bb      	str	r3, [r7, #24]
 8005f3a:	e001      	b.n	8005f40 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d10b      	bne.n	8005f5e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	691a      	ldr	r2, [r3, #16]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	2100      	movs	r1, #0
 8005f50:	9100      	str	r1, [sp, #0]
 8005f52:	68b9      	ldr	r1, [r7, #8]
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f000 fa65 	bl	8006424 <xQueueGenericCreateStatic>
 8005f5a:	61f8      	str	r0, [r7, #28]
 8005f5c:	e008      	b.n	8005f70 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d105      	bne.n	8005f70 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005f64:	2200      	movs	r2, #0
 8005f66:	68b9      	ldr	r1, [r7, #8]
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f000 fa88 	bl	800647e <xQueueGenericCreate>
 8005f6e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00c      	beq.n	8005f90 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d003      	beq.n	8005f84 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	617b      	str	r3, [r7, #20]
 8005f82:	e001      	b.n	8005f88 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005f84:	2300      	movs	r3, #0
 8005f86:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005f88:	6979      	ldr	r1, [r7, #20]
 8005f8a:	69f8      	ldr	r0, [r7, #28]
 8005f8c:	f001 f854 	bl	8007038 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005f90:	69fb      	ldr	r3, [r7, #28]
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3720      	adds	r7, #32
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
	...

08005f9c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b088      	sub	sp, #32
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	603b      	str	r3, [r7, #0]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fb4:	f3ef 8305 	mrs	r3, IPSR
 8005fb8:	617b      	str	r3, [r7, #20]
  return(result);
 8005fba:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d028      	beq.n	8006012 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d005      	beq.n	8005fd2 <osMessageQueuePut+0x36>
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d002      	beq.n	8005fd2 <osMessageQueuePut+0x36>
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d003      	beq.n	8005fda <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005fd2:	f06f 0303 	mvn.w	r3, #3
 8005fd6:	61fb      	str	r3, [r7, #28]
 8005fd8:	e038      	b.n	800604c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005fde:	f107 0210 	add.w	r2, r7, #16
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	68b9      	ldr	r1, [r7, #8]
 8005fe6:	69b8      	ldr	r0, [r7, #24]
 8005fe8:	f000 fc22 	bl	8006830 <xQueueGenericSendFromISR>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d003      	beq.n	8005ffa <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005ff2:	f06f 0302 	mvn.w	r3, #2
 8005ff6:	61fb      	str	r3, [r7, #28]
 8005ff8:	e028      	b.n	800604c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d025      	beq.n	800604c <osMessageQueuePut+0xb0>
 8006000:	4b15      	ldr	r3, [pc, #84]	@ (8006058 <osMessageQueuePut+0xbc>)
 8006002:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006006:	601a      	str	r2, [r3, #0]
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	f3bf 8f6f 	isb	sy
 8006010:	e01c      	b.n	800604c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d002      	beq.n	800601e <osMessageQueuePut+0x82>
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d103      	bne.n	8006026 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800601e:	f06f 0303 	mvn.w	r3, #3
 8006022:	61fb      	str	r3, [r7, #28]
 8006024:	e012      	b.n	800604c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006026:	2300      	movs	r3, #0
 8006028:	683a      	ldr	r2, [r7, #0]
 800602a:	68b9      	ldr	r1, [r7, #8]
 800602c:	69b8      	ldr	r0, [r7, #24]
 800602e:	f000 fb41 	bl	80066b4 <xQueueGenericSend>
 8006032:	4603      	mov	r3, r0
 8006034:	2b01      	cmp	r3, #1
 8006036:	d009      	beq.n	800604c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d003      	beq.n	8006046 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800603e:	f06f 0301 	mvn.w	r3, #1
 8006042:	61fb      	str	r3, [r7, #28]
 8006044:	e002      	b.n	800604c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006046:	f06f 0302 	mvn.w	r3, #2
 800604a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800604c:	69fb      	ldr	r3, [r7, #28]
}
 800604e:	4618      	mov	r0, r3
 8006050:	3720      	adds	r7, #32
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	e000ed04 	.word	0xe000ed04

0800605c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800605c:	b580      	push	{r7, lr}
 800605e:	b088      	sub	sp, #32
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
 8006068:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800606e:	2300      	movs	r3, #0
 8006070:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006072:	f3ef 8305 	mrs	r3, IPSR
 8006076:	617b      	str	r3, [r7, #20]
  return(result);
 8006078:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800607a:	2b00      	cmp	r3, #0
 800607c:	d028      	beq.n	80060d0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d005      	beq.n	8006090 <osMessageQueueGet+0x34>
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d002      	beq.n	8006090 <osMessageQueueGet+0x34>
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d003      	beq.n	8006098 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006090:	f06f 0303 	mvn.w	r3, #3
 8006094:	61fb      	str	r3, [r7, #28]
 8006096:	e037      	b.n	8006108 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006098:	2300      	movs	r3, #0
 800609a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800609c:	f107 0310 	add.w	r3, r7, #16
 80060a0:	461a      	mov	r2, r3
 80060a2:	68b9      	ldr	r1, [r7, #8]
 80060a4:	69b8      	ldr	r0, [r7, #24]
 80060a6:	f000 fe0b 	bl	8006cc0 <xQueueReceiveFromISR>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d003      	beq.n	80060b8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80060b0:	f06f 0302 	mvn.w	r3, #2
 80060b4:	61fb      	str	r3, [r7, #28]
 80060b6:	e027      	b.n	8006108 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d024      	beq.n	8006108 <osMessageQueueGet+0xac>
 80060be:	4b15      	ldr	r3, [pc, #84]	@ (8006114 <osMessageQueueGet+0xb8>)
 80060c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060c4:	601a      	str	r2, [r3, #0]
 80060c6:	f3bf 8f4f 	dsb	sy
 80060ca:	f3bf 8f6f 	isb	sy
 80060ce:	e01b      	b.n	8006108 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d002      	beq.n	80060dc <osMessageQueueGet+0x80>
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d103      	bne.n	80060e4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80060dc:	f06f 0303 	mvn.w	r3, #3
 80060e0:	61fb      	str	r3, [r7, #28]
 80060e2:	e011      	b.n	8006108 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80060e4:	683a      	ldr	r2, [r7, #0]
 80060e6:	68b9      	ldr	r1, [r7, #8]
 80060e8:	69b8      	ldr	r0, [r7, #24]
 80060ea:	f000 fc69 	bl	80069c0 <xQueueReceive>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d009      	beq.n	8006108 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80060fa:	f06f 0301 	mvn.w	r3, #1
 80060fe:	61fb      	str	r3, [r7, #28]
 8006100:	e002      	b.n	8006108 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006102:	f06f 0302 	mvn.w	r3, #2
 8006106:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006108:	69fb      	ldr	r3, [r7, #28]
}
 800610a:	4618      	mov	r0, r3
 800610c:	3720      	adds	r7, #32
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	e000ed04 	.word	0xe000ed04

08006118 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8006118:	b580      	push	{r7, lr}
 800611a:	b086      	sub	sp, #24
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d102      	bne.n	8006130 <osMessageQueueGetCount+0x18>
    count = 0U;
 800612a:	2300      	movs	r3, #0
 800612c:	617b      	str	r3, [r7, #20]
 800612e:	e00e      	b.n	800614e <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006130:	f3ef 8305 	mrs	r3, IPSR
 8006134:	60fb      	str	r3, [r7, #12]
  return(result);
 8006136:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006138:	2b00      	cmp	r3, #0
 800613a:	d004      	beq.n	8006146 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800613c:	6938      	ldr	r0, [r7, #16]
 800613e:	f000 fe2e 	bl	8006d9e <uxQueueMessagesWaitingFromISR>
 8006142:	6178      	str	r0, [r7, #20]
 8006144:	e003      	b.n	800614e <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8006146:	6938      	ldr	r0, [r7, #16]
 8006148:	f000 fe19 	bl	8006d7e <uxQueueMessagesWaiting>
 800614c:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800614e:	697b      	ldr	r3, [r7, #20]
}
 8006150:	4618      	mov	r0, r3
 8006152:	3718      	adds	r7, #24
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006164:	f3ef 8305 	mrs	r3, IPSR
 8006168:	60fb      	str	r3, [r7, #12]
  return(result);
 800616a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800616c:	2b00      	cmp	r3, #0
 800616e:	d003      	beq.n	8006178 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 8006170:	f06f 0305 	mvn.w	r3, #5
 8006174:	617b      	str	r3, [r7, #20]
 8006176:	e00e      	b.n	8006196 <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d103      	bne.n	8006186 <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 800617e:	f06f 0303 	mvn.w	r3, #3
 8006182:	617b      	str	r3, [r7, #20]
 8006184:	e007      	b.n	8006196 <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8006186:	6938      	ldr	r0, [r7, #16]
 8006188:	f000 ff80 	bl	800708c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800618c:	2300      	movs	r3, #0
 800618e:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 8006190:	6938      	ldr	r0, [r7, #16]
 8006192:	f000 fe14 	bl	8006dbe <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8006196:	697b      	ldr	r3, [r7, #20]
}
 8006198:	4618      	mov	r0, r3
 800619a:	3718      	adds	r7, #24
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	4a07      	ldr	r2, [pc, #28]	@ (80061cc <vApplicationGetIdleTaskMemory+0x2c>)
 80061b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	4a06      	ldr	r2, [pc, #24]	@ (80061d0 <vApplicationGetIdleTaskMemory+0x30>)
 80061b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2280      	movs	r2, #128	@ 0x80
 80061bc:	601a      	str	r2, [r3, #0]
}
 80061be:	bf00      	nop
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	240003d8 	.word	0x240003d8
 80061d0:	24000480 	.word	0x24000480

080061d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	4a07      	ldr	r2, [pc, #28]	@ (8006200 <vApplicationGetTimerTaskMemory+0x2c>)
 80061e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	4a06      	ldr	r2, [pc, #24]	@ (8006204 <vApplicationGetTimerTaskMemory+0x30>)
 80061ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80061f2:	601a      	str	r2, [r3, #0]
}
 80061f4:	bf00      	nop
 80061f6:	3714      	adds	r7, #20
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	24000680 	.word	0x24000680
 8006204:	24000728 	.word	0x24000728

08006208 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f103 0208 	add.w	r2, r3, #8
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f04f 32ff 	mov.w	r2, #4294967295
 8006220:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f103 0208 	add.w	r2, r3, #8
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f103 0208 	add.w	r2, r3, #8
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006256:	bf00      	nop
 8006258:	370c      	adds	r7, #12
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006262:	b480      	push	{r7}
 8006264:	b085      	sub	sp, #20
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
 800626a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	689a      	ldr	r2, [r3, #8]
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	683a      	ldr	r2, [r7, #0]
 8006286:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	683a      	ldr	r2, [r7, #0]
 800628c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	1c5a      	adds	r2, r3, #1
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	601a      	str	r2, [r3, #0]
}
 800629e:	bf00      	nop
 80062a0:	3714      	adds	r7, #20
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80062aa:	b480      	push	{r7}
 80062ac:	b085      	sub	sp, #20
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
 80062b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c0:	d103      	bne.n	80062ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	60fb      	str	r3, [r7, #12]
 80062c8:	e00c      	b.n	80062e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	3308      	adds	r3, #8
 80062ce:	60fb      	str	r3, [r7, #12]
 80062d0:	e002      	b.n	80062d8 <vListInsert+0x2e>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	60fb      	str	r3, [r7, #12]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d2f6      	bcs.n	80062d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	685a      	ldr	r2, [r3, #4]
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	683a      	ldr	r2, [r7, #0]
 80062f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	683a      	ldr	r2, [r7, #0]
 80062fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	1c5a      	adds	r2, r3, #1
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	601a      	str	r2, [r3, #0]
}
 8006310:	bf00      	nop
 8006312:	3714      	adds	r7, #20
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	6892      	ldr	r2, [r2, #8]
 8006332:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	6852      	ldr	r2, [r2, #4]
 800633c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	429a      	cmp	r2, r3
 8006346:	d103      	bne.n	8006350 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689a      	ldr	r2, [r3, #8]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	1e5a      	subs	r2, r3, #1
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
}
 8006364:	4618      	mov	r0, r3
 8006366:	3714      	adds	r7, #20
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 800637e:	f002 f9f7 	bl	8008770 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800638a:	68f9      	ldr	r1, [r7, #12]
 800638c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800638e:	fb01 f303 	mul.w	r3, r1, r3
 8006392:	441a      	add	r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063ae:	3b01      	subs	r3, #1
 80063b0:	68f9      	ldr	r1, [r7, #12]
 80063b2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80063b4:	fb01 f303 	mul.w	r3, r1, r3
 80063b8:	441a      	add	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	22ff      	movs	r2, #255	@ 0xff
 80063c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	22ff      	movs	r2, #255	@ 0xff
 80063ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d114      	bne.n	80063fe <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d01a      	beq.n	8006412 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	3310      	adds	r3, #16
 80063e0:	4618      	mov	r0, r3
 80063e2:	f001 faaf 	bl	8007944 <xTaskRemoveFromEventList>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d012      	beq.n	8006412 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80063ec:	4b0c      	ldr	r3, [pc, #48]	@ (8006420 <xQueueGenericReset+0xb0>)
 80063ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063f2:	601a      	str	r2, [r3, #0]
 80063f4:	f3bf 8f4f 	dsb	sy
 80063f8:	f3bf 8f6f 	isb	sy
 80063fc:	e009      	b.n	8006412 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	3310      	adds	r3, #16
 8006402:	4618      	mov	r0, r3
 8006404:	f7ff ff00 	bl	8006208 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	3324      	adds	r3, #36	@ 0x24
 800640c:	4618      	mov	r0, r3
 800640e:	f7ff fefb 	bl	8006208 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006412:	f002 f9cf 	bl	80087b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006416:	2301      	movs	r3, #1
}
 8006418:	4618      	mov	r0, r3
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	e000ed04 	.word	0xe000ed04

08006424 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006424:	b580      	push	{r7, lr}
 8006426:	b088      	sub	sp, #32
 8006428:	af02      	add	r7, sp, #8
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	607a      	str	r2, [r7, #4]
 8006430:	603b      	str	r3, [r7, #0]
		supplied. */
		configASSERT( pxStaticQueue != NULL );

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d001      	beq.n	800643c <xQueueGenericCreateStatic+0x18>
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	2b00      	cmp	r3, #0
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <xQueueGenericCreateStatic+0x22>
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	2b00      	cmp	r3, #0
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006446:	2350      	movs	r3, #80	@ 0x50
 8006448:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800644a:	693b      	ldr	r3, [r7, #16]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800644c:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00d      	beq.n	8006474 <xQueueGenericCreateStatic+0x50>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006460:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	9300      	str	r3, [sp, #0]
 8006468:	4613      	mov	r3, r2
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	68b9      	ldr	r1, [r7, #8]
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f000 f831 	bl	80064d6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006474:	697b      	ldr	r3, [r7, #20]
	}
 8006476:	4618      	mov	r0, r3
 8006478:	3718      	adds	r7, #24
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800647e:	b580      	push	{r7, lr}
 8006480:	b08a      	sub	sp, #40	@ 0x28
 8006482:	af02      	add	r7, sp, #8
 8006484:	60f8      	str	r0, [r7, #12]
 8006486:	60b9      	str	r1, [r7, #8]
 8006488:	4613      	mov	r3, r2
 800648a:	71fb      	strb	r3, [r7, #7]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	fb02 f303 	mul.w	r3, r2, r3
 8006494:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	3350      	adds	r3, #80	@ 0x50
 800649a:	4618      	mov	r0, r3
 800649c:	f002 fa46 	bl	800892c <pvPortMalloc>
 80064a0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d011      	beq.n	80064cc <xQueueGenericCreate+0x4e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	3350      	adds	r3, #80	@ 0x50
 80064b0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80064ba:	79fa      	ldrb	r2, [r7, #7]
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	4613      	mov	r3, r2
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	68b9      	ldr	r1, [r7, #8]
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f000 f805 	bl	80064d6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80064cc:	69bb      	ldr	r3, [r7, #24]
	}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3720      	adds	r7, #32
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b084      	sub	sp, #16
 80064da:	af00      	add	r7, sp, #0
 80064dc:	60f8      	str	r0, [r7, #12]
 80064de:	60b9      	str	r1, [r7, #8]
 80064e0:	607a      	str	r2, [r7, #4]
 80064e2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d103      	bne.n	80064f2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	69ba      	ldr	r2, [r7, #24]
 80064ee:	601a      	str	r2, [r3, #0]
 80064f0:	e002      	b.n	80064f8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006504:	2101      	movs	r1, #1
 8006506:	69b8      	ldr	r0, [r7, #24]
 8006508:	f7ff ff32 	bl	8006370 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	78fa      	ldrb	r2, [r7, #3]
 8006510:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006514:	bf00      	nop
 8006516:	3710      	adds	r7, #16
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00e      	beq.n	8006548 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800653c:	2300      	movs	r3, #0
 800653e:	2200      	movs	r2, #0
 8006540:	2100      	movs	r1, #0
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 f8b6 	bl	80066b4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006548:	bf00      	nop
 800654a:	3708      	adds	r7, #8
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
 8006556:	4603      	mov	r3, r0
 8006558:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800655a:	2301      	movs	r3, #1
 800655c:	617b      	str	r3, [r7, #20]
 800655e:	2300      	movs	r3, #0
 8006560:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006562:	79fb      	ldrb	r3, [r7, #7]
 8006564:	461a      	mov	r2, r3
 8006566:	6939      	ldr	r1, [r7, #16]
 8006568:	6978      	ldr	r0, [r7, #20]
 800656a:	f7ff ff88 	bl	800647e <xQueueGenericCreate>
 800656e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f7ff ffd3 	bl	800651c <prvInitialiseMutex>

		return xNewQueue;
 8006576:	68fb      	ldr	r3, [r7, #12]
	}
 8006578:	4618      	mov	r0, r3
 800657a:	3718      	adds	r7, #24
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006580:	b580      	push	{r7, lr}
 8006582:	b088      	sub	sp, #32
 8006584:	af02      	add	r7, sp, #8
 8006586:	4603      	mov	r3, r0
 8006588:	6039      	str	r1, [r7, #0]
 800658a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800658c:	2301      	movs	r3, #1
 800658e:	617b      	str	r3, [r7, #20]
 8006590:	2300      	movs	r3, #0
 8006592:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006594:	79fb      	ldrb	r3, [r7, #7]
 8006596:	9300      	str	r3, [sp, #0]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	2200      	movs	r2, #0
 800659c:	6939      	ldr	r1, [r7, #16]
 800659e:	6978      	ldr	r0, [r7, #20]
 80065a0:	f7ff ff40 	bl	8006424 <xQueueGenericCreateStatic>
 80065a4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f7ff ffb8 	bl	800651c <prvInitialiseMutex>

		return xNewQueue;
 80065ac:	68fb      	ldr	r3, [r7, #12]
	}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3718      	adds	r7, #24
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80065b6:	b590      	push	{r4, r7, lr}
 80065b8:	b085      	sub	sp, #20
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	60bb      	str	r3, [r7, #8]
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	689c      	ldr	r4, [r3, #8]
 80065c6:	f001 fb45 	bl	8007c54 <xTaskGetCurrentTaskHandle>
 80065ca:	4603      	mov	r3, r0
 80065cc:	429c      	cmp	r4, r3
 80065ce:	d111      	bne.n	80065f4 <xQueueGiveMutexRecursive+0x3e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	1e5a      	subs	r2, r3, #1
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d105      	bne.n	80065ee <xQueueGiveMutexRecursive+0x38>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80065e2:	2300      	movs	r3, #0
 80065e4:	2200      	movs	r2, #0
 80065e6:	2100      	movs	r1, #0
 80065e8:	68b8      	ldr	r0, [r7, #8]
 80065ea:	f000 f863 	bl	80066b4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80065ee:	2301      	movs	r3, #1
 80065f0:	60fb      	str	r3, [r7, #12]
 80065f2:	e001      	b.n	80065f8 <xQueueGiveMutexRecursive+0x42>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80065f4:	2300      	movs	r3, #0
 80065f6:	60fb      	str	r3, [r7, #12]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80065f8:	68fb      	ldr	r3, [r7, #12]
	}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3714      	adds	r7, #20
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd90      	pop	{r4, r7, pc}

08006602 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006602:	b590      	push	{r4, r7, lr}
 8006604:	b085      	sub	sp, #20
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
 800660a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	60bb      	str	r3, [r7, #8]
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	689c      	ldr	r4, [r3, #8]
 8006614:	f001 fb1e 	bl	8007c54 <xTaskGetCurrentTaskHandle>
 8006618:	4603      	mov	r3, r0
 800661a:	429c      	cmp	r4, r3
 800661c:	d107      	bne.n	800662e <xQueueTakeMutexRecursive+0x2c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	1c5a      	adds	r2, r3, #1
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006628:	2301      	movs	r3, #1
 800662a:	60fb      	str	r3, [r7, #12]
 800662c:	e00c      	b.n	8006648 <xQueueTakeMutexRecursive+0x46>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800662e:	6839      	ldr	r1, [r7, #0]
 8006630:	68b8      	ldr	r0, [r7, #8]
 8006632:	f000 fa75 	bl	8006b20 <xQueueSemaphoreTake>
 8006636:	60f8      	str	r0, [r7, #12]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d004      	beq.n	8006648 <xQueueTakeMutexRecursive+0x46>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	1c5a      	adds	r2, r3, #1
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006648:	68fb      	ldr	r3, [r7, #12]
	}
 800664a:	4618      	mov	r0, r3
 800664c:	3714      	adds	r7, #20
 800664e:	46bd      	mov	sp, r7
 8006650:	bd90      	pop	{r4, r7, pc}

08006652 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006652:	b580      	push	{r7, lr}
 8006654:	b088      	sub	sp, #32
 8006656:	af02      	add	r7, sp, #8
 8006658:	60f8      	str	r0, [r7, #12]
 800665a:	60b9      	str	r1, [r7, #8]
 800665c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800665e:	2302      	movs	r3, #2
 8006660:	9300      	str	r3, [sp, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	2100      	movs	r1, #0
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f7ff fedb 	bl	8006424 <xQueueGenericCreateStatic>
 800666e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d002      	beq.n	800667c <xQueueCreateCountingSemaphoreStatic+0x2a>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	68ba      	ldr	r2, [r7, #8]
 800667a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800667c:	697b      	ldr	r3, [r7, #20]
	}
 800667e:	4618      	mov	r0, r3
 8006680:	3718      	adds	r7, #24
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006686:	b580      	push	{r7, lr}
 8006688:	b084      	sub	sp, #16
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
 800668e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006690:	2202      	movs	r2, #2
 8006692:	2100      	movs	r1, #0
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f7ff fef2 	bl	800647e <xQueueGenericCreate>
 800669a:	60f8      	str	r0, [r7, #12]

		if( xHandle != NULL )
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d002      	beq.n	80066a8 <xQueueCreateCountingSemaphore+0x22>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	683a      	ldr	r2, [r7, #0]
 80066a6:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80066a8:	68fb      	ldr	r3, [r7, #12]
	}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
	...

080066b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b08a      	sub	sp, #40	@ 0x28
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]
 80066c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80066c2:	2300      	movs	r3, #0
 80066c4:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d102      	bne.n	80066d6 <xQueueGenericSend+0x22>
 80066d0:	6a3b      	ldr	r3, [r7, #32]
 80066d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066d4:	2b00      	cmp	r3, #0
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d102      	bne.n	80066e2 <xQueueGenericSend+0x2e>
 80066dc:	6a3b      	ldr	r3, [r7, #32]
 80066de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066e0:	2b01      	cmp	r3, #1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066e2:	f001 fac7 	bl	8007c74 <xTaskGetSchedulerState>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d101      	bne.n	80066f0 <xQueueGenericSend+0x3c>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2b00      	cmp	r3, #0
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80066f0:	f002 f83e 	bl	8008770 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80066f4:	6a3b      	ldr	r3, [r7, #32]
 80066f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066f8:	6a3b      	ldr	r3, [r7, #32]
 80066fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d302      	bcc.n	8006706 <xQueueGenericSend+0x52>
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	2b02      	cmp	r3, #2
 8006704:	d129      	bne.n	800675a <xQueueGenericSend+0xa6>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006706:	683a      	ldr	r2, [r7, #0]
 8006708:	68b9      	ldr	r1, [r7, #8]
 800670a:	6a38      	ldr	r0, [r7, #32]
 800670c:	f000 fb84 	bl	8006e18 <prvCopyDataToQueue>
 8006710:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006712:	6a3b      	ldr	r3, [r7, #32]
 8006714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006716:	2b00      	cmp	r3, #0
 8006718:	d010      	beq.n	800673c <xQueueGenericSend+0x88>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800671a:	6a3b      	ldr	r3, [r7, #32]
 800671c:	3324      	adds	r3, #36	@ 0x24
 800671e:	4618      	mov	r0, r3
 8006720:	f001 f910 	bl	8007944 <xTaskRemoveFromEventList>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d013      	beq.n	8006752 <xQueueGenericSend+0x9e>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800672a:	4b40      	ldr	r3, [pc, #256]	@ (800682c <xQueueGenericSend+0x178>)
 800672c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006730:	601a      	str	r2, [r3, #0]
 8006732:	f3bf 8f4f 	dsb	sy
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	e00a      	b.n	8006752 <xQueueGenericSend+0x9e>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d007      	beq.n	8006752 <xQueueGenericSend+0x9e>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006742:	4b3a      	ldr	r3, [pc, #232]	@ (800682c <xQueueGenericSend+0x178>)
 8006744:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006748:	601a      	str	r2, [r3, #0]
 800674a:	f3bf 8f4f 	dsb	sy
 800674e:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006752:	f002 f82f 	bl	80087b4 <vPortExitCritical>
				return pdPASS;
 8006756:	2301      	movs	r3, #1
 8006758:	e063      	b.n	8006822 <xQueueGenericSend+0x16e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d103      	bne.n	8006768 <xQueueGenericSend+0xb4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006760:	f002 f828 	bl	80087b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006764:	2300      	movs	r3, #0
 8006766:	e05c      	b.n	8006822 <xQueueGenericSend+0x16e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676a:	2b00      	cmp	r3, #0
 800676c:	d106      	bne.n	800677c <xQueueGenericSend+0xc8>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800676e:	f107 0314 	add.w	r3, r7, #20
 8006772:	4618      	mov	r0, r3
 8006774:	f001 f93c 	bl	80079f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006778:	2301      	movs	r3, #1
 800677a:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800677c:	f002 f81a 	bl	80087b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006780:	f000 feea 	bl	8007558 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006784:	f001 fff4 	bl	8008770 <vPortEnterCritical>
 8006788:	6a3b      	ldr	r3, [r7, #32]
 800678a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800678e:	b25b      	sxtb	r3, r3
 8006790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006794:	d103      	bne.n	800679e <xQueueGenericSend+0xea>
 8006796:	6a3b      	ldr	r3, [r7, #32]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800679e:	6a3b      	ldr	r3, [r7, #32]
 80067a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067a4:	b25b      	sxtb	r3, r3
 80067a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067aa:	d103      	bne.n	80067b4 <xQueueGenericSend+0x100>
 80067ac:	6a3b      	ldr	r3, [r7, #32]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80067b4:	f001 fffe 	bl	80087b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067b8:	1d3a      	adds	r2, r7, #4
 80067ba:	f107 0314 	add.w	r3, r7, #20
 80067be:	4611      	mov	r1, r2
 80067c0:	4618      	mov	r0, r3
 80067c2:	f001 f92b 	bl	8007a1c <xTaskCheckForTimeOut>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d124      	bne.n	8006816 <xQueueGenericSend+0x162>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80067cc:	6a38      	ldr	r0, [r7, #32]
 80067ce:	f000 fc1b 	bl	8007008 <prvIsQueueFull>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d018      	beq.n	800680a <xQueueGenericSend+0x156>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80067d8:	6a3b      	ldr	r3, [r7, #32]
 80067da:	3310      	adds	r3, #16
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	4611      	mov	r1, r2
 80067e0:	4618      	mov	r0, r3
 80067e2:	f001 f87b 	bl	80078dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80067e6:	6a38      	ldr	r0, [r7, #32]
 80067e8:	f000 fba6 	bl	8006f38 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80067ec:	f000 fec2 	bl	8007574 <xTaskResumeAll>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f47f af7c 	bne.w	80066f0 <xQueueGenericSend+0x3c>
				{
					portYIELD_WITHIN_API();
 80067f8:	4b0c      	ldr	r3, [pc, #48]	@ (800682c <xQueueGenericSend+0x178>)
 80067fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067fe:	601a      	str	r2, [r3, #0]
 8006800:	f3bf 8f4f 	dsb	sy
 8006804:	f3bf 8f6f 	isb	sy
 8006808:	e772      	b.n	80066f0 <xQueueGenericSend+0x3c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800680a:	6a38      	ldr	r0, [r7, #32]
 800680c:	f000 fb94 	bl	8006f38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006810:	f000 feb0 	bl	8007574 <xTaskResumeAll>
 8006814:	e76c      	b.n	80066f0 <xQueueGenericSend+0x3c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006816:	6a38      	ldr	r0, [r7, #32]
 8006818:	f000 fb8e 	bl	8006f38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800681c:	f000 feaa 	bl	8007574 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006820:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006822:	4618      	mov	r0, r3
 8006824:	3728      	adds	r7, #40	@ 0x28
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	e000ed04 	.word	0xe000ed04

08006830 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b08c      	sub	sp, #48	@ 0x30
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	607a      	str	r2, [r7, #4]
 800683c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	62bb      	str	r3, [r7, #40]	@ 0x28

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d102      	bne.n	800684e <xQueueGenericSendFromISR+0x1e>
 8006848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800684a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800684c:	2b00      	cmp	r3, #0
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	2b02      	cmp	r3, #2
 8006852:	d102      	bne.n	800685a <xQueueGenericSendFromISR+0x2a>
 8006854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006858:	2b01      	cmp	r3, #1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800685a:	f002 f84d 	bl	80088f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800685e:	f3ef 8211 	mrs	r2, BASEPRI
 8006862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006866:	f383 8811 	msr	BASEPRI, r3
 800686a:	f3bf 8f6f 	isb	sy
 800686e:	f3bf 8f4f 	dsb	sy
 8006872:	61ba      	str	r2, [r7, #24]
 8006874:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006876:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006878:	627b      	str	r3, [r7, #36]	@ 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800687a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800687c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800687e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006882:	429a      	cmp	r2, r3
 8006884:	d302      	bcc.n	800688c <xQueueGenericSendFromISR+0x5c>
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	2b02      	cmp	r3, #2
 800688a:	d12f      	bne.n	80068ec <xQueueGenericSendFromISR+0xbc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800688c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800688e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006892:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800689a:	61fb      	str	r3, [r7, #28]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800689c:	683a      	ldr	r2, [r7, #0]
 800689e:	68b9      	ldr	r1, [r7, #8]
 80068a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068a2:	f000 fab9 	bl	8006e18 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80068a6:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80068aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ae:	d112      	bne.n	80068d6 <xQueueGenericSendFromISR+0xa6>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d016      	beq.n	80068e6 <xQueueGenericSendFromISR+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ba:	3324      	adds	r3, #36	@ 0x24
 80068bc:	4618      	mov	r0, r3
 80068be:	f001 f841 	bl	8007944 <xTaskRemoveFromEventList>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d00e      	beq.n	80068e6 <xQueueGenericSendFromISR+0xb6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00b      	beq.n	80068e6 <xQueueGenericSendFromISR+0xb6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2201      	movs	r2, #1
 80068d2:	601a      	str	r2, [r3, #0]
 80068d4:	e007      	b.n	80068e6 <xQueueGenericSendFromISR+0xb6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80068d6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80068da:	3301      	adds	r3, #1
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	b25a      	sxtb	r2, r3
 80068e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80068e6:	2301      	movs	r3, #1
 80068e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
 80068ea:	e001      	b.n	80068f0 <xQueueGenericSendFromISR+0xc0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80068ec:	2300      	movs	r3, #0
 80068ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80068fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80068fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3730      	adds	r7, #48	@ 0x30
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b08a      	sub	sp, #40	@ 0x28
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	623b      	str	r3, [r7, #32]
	configASSERT( pxQueue->uxItemSize == 0 );

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006914:	6a3b      	ldr	r3, [r7, #32]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d102      	bne.n	8006922 <xQueueGiveFromISR+0x1c>
 800691c:	6a3b      	ldr	r3, [r7, #32]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	2b00      	cmp	r3, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006922:	f001 ffe9 	bl	80088f8 <vPortValidateInterruptPriority>
	__asm volatile
 8006926:	f3ef 8211 	mrs	r2, BASEPRI
 800692a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800692e:	f383 8811 	msr	BASEPRI, r3
 8006932:	f3bf 8f6f 	isb	sy
 8006936:	f3bf 8f4f 	dsb	sy
 800693a:	613a      	str	r2, [r7, #16]
 800693c:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 800693e:	693b      	ldr	r3, [r7, #16]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006940:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006942:	6a3b      	ldr	r3, [r7, #32]
 8006944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006946:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006948:	6a3b      	ldr	r3, [r7, #32]
 800694a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800694c:	69ba      	ldr	r2, [r7, #24]
 800694e:	429a      	cmp	r2, r3
 8006950:	d229      	bcs.n	80069a6 <xQueueGiveFromISR+0xa0>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006952:	6a3b      	ldr	r3, [r7, #32]
 8006954:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006958:	75fb      	strb	r3, [r7, #23]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	1c5a      	adds	r2, r3, #1
 800695e:	6a3b      	ldr	r3, [r7, #32]
 8006960:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006962:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800696a:	d112      	bne.n	8006992 <xQueueGiveFromISR+0x8c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800696c:	6a3b      	ldr	r3, [r7, #32]
 800696e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006970:	2b00      	cmp	r3, #0
 8006972:	d015      	beq.n	80069a0 <xQueueGiveFromISR+0x9a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006974:	6a3b      	ldr	r3, [r7, #32]
 8006976:	3324      	adds	r3, #36	@ 0x24
 8006978:	4618      	mov	r0, r3
 800697a:	f000 ffe3 	bl	8007944 <xTaskRemoveFromEventList>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00d      	beq.n	80069a0 <xQueueGiveFromISR+0x9a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00a      	beq.n	80069a0 <xQueueGiveFromISR+0x9a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	2201      	movs	r2, #1
 800698e:	601a      	str	r2, [r3, #0]
 8006990:	e006      	b.n	80069a0 <xQueueGiveFromISR+0x9a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006992:	7dfb      	ldrb	r3, [r7, #23]
 8006994:	3301      	adds	r3, #1
 8006996:	b2db      	uxtb	r3, r3
 8006998:	b25a      	sxtb	r2, r3
 800699a:	6a3b      	ldr	r3, [r7, #32]
 800699c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80069a0:	2301      	movs	r3, #1
 80069a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80069a4:	e001      	b.n	80069aa <xQueueGiveFromISR+0xa4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80069a6:	2300      	movs	r3, #0
 80069a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	60bb      	str	r3, [r7, #8]
	__asm volatile
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	f383 8811 	msr	BASEPRI, r3
}
 80069b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80069b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3728      	adds	r7, #40	@ 0x28
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b08a      	sub	sp, #40	@ 0x28
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80069cc:	2300      	movs	r3, #0
 80069ce:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	623b      	str	r3, [r7, #32]
	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d102      	bne.n	80069e0 <xQueueReceive+0x20>
 80069da:	6a3b      	ldr	r3, [r7, #32]
 80069dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069de:	2b00      	cmp	r3, #0

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069e0:	f001 f948 	bl	8007c74 <xTaskGetSchedulerState>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d101      	bne.n	80069ee <xQueueReceive+0x2e>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2b00      	cmp	r3, #0
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069ee:	f001 febf 	bl	8008770 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069f2:	6a3b      	ldr	r3, [r7, #32]
 80069f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069f6:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d01f      	beq.n	8006a3e <xQueueReceive+0x7e>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80069fe:	68b9      	ldr	r1, [r7, #8]
 8006a00:	6a38      	ldr	r0, [r7, #32]
 8006a02:	f000 fa73 	bl	8006eec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	1e5a      	subs	r2, r3, #1
 8006a0a:	6a3b      	ldr	r3, [r7, #32]
 8006a0c:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a0e:	6a3b      	ldr	r3, [r7, #32]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00f      	beq.n	8006a36 <xQueueReceive+0x76>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a16:	6a3b      	ldr	r3, [r7, #32]
 8006a18:	3310      	adds	r3, #16
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f000 ff92 	bl	8007944 <xTaskRemoveFromEventList>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d007      	beq.n	8006a36 <xQueueReceive+0x76>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a26:	4b3d      	ldr	r3, [pc, #244]	@ (8006b1c <xQueueReceive+0x15c>)
 8006a28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a2c:	601a      	str	r2, [r3, #0]
 8006a2e:	f3bf 8f4f 	dsb	sy
 8006a32:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a36:	f001 febd 	bl	80087b4 <vPortExitCritical>
				return pdPASS;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e069      	b.n	8006b12 <xQueueReceive+0x152>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d103      	bne.n	8006a4c <xQueueReceive+0x8c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a44:	f001 feb6 	bl	80087b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	e062      	b.n	8006b12 <xQueueReceive+0x152>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d106      	bne.n	8006a60 <xQueueReceive+0xa0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a52:	f107 0314 	add.w	r3, r7, #20
 8006a56:	4618      	mov	r0, r3
 8006a58:	f000 ffca 	bl	80079f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a60:	f001 fea8 	bl	80087b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a64:	f000 fd78 	bl	8007558 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a68:	f001 fe82 	bl	8008770 <vPortEnterCritical>
 8006a6c:	6a3b      	ldr	r3, [r7, #32]
 8006a6e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a72:	b25b      	sxtb	r3, r3
 8006a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a78:	d103      	bne.n	8006a82 <xQueueReceive+0xc2>
 8006a7a:	6a3b      	ldr	r3, [r7, #32]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a82:	6a3b      	ldr	r3, [r7, #32]
 8006a84:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a88:	b25b      	sxtb	r3, r3
 8006a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a8e:	d103      	bne.n	8006a98 <xQueueReceive+0xd8>
 8006a90:	6a3b      	ldr	r3, [r7, #32]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a98:	f001 fe8c 	bl	80087b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a9c:	1d3a      	adds	r2, r7, #4
 8006a9e:	f107 0314 	add.w	r3, r7, #20
 8006aa2:	4611      	mov	r1, r2
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f000 ffb9 	bl	8007a1c <xTaskCheckForTimeOut>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d123      	bne.n	8006af8 <xQueueReceive+0x138>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ab0:	6a38      	ldr	r0, [r7, #32]
 8006ab2:	f000 fa93 	bl	8006fdc <prvIsQueueEmpty>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d017      	beq.n	8006aec <xQueueReceive+0x12c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006abc:	6a3b      	ldr	r3, [r7, #32]
 8006abe:	3324      	adds	r3, #36	@ 0x24
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	4611      	mov	r1, r2
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f000 ff09 	bl	80078dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006aca:	6a38      	ldr	r0, [r7, #32]
 8006acc:	f000 fa34 	bl	8006f38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ad0:	f000 fd50 	bl	8007574 <xTaskResumeAll>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d189      	bne.n	80069ee <xQueueReceive+0x2e>
				{
					portYIELD_WITHIN_API();
 8006ada:	4b10      	ldr	r3, [pc, #64]	@ (8006b1c <xQueueReceive+0x15c>)
 8006adc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ae0:	601a      	str	r2, [r3, #0]
 8006ae2:	f3bf 8f4f 	dsb	sy
 8006ae6:	f3bf 8f6f 	isb	sy
 8006aea:	e780      	b.n	80069ee <xQueueReceive+0x2e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006aec:	6a38      	ldr	r0, [r7, #32]
 8006aee:	f000 fa23 	bl	8006f38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006af2:	f000 fd3f 	bl	8007574 <xTaskResumeAll>
 8006af6:	e77a      	b.n	80069ee <xQueueReceive+0x2e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006af8:	6a38      	ldr	r0, [r7, #32]
 8006afa:	f000 fa1d 	bl	8006f38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006afe:	f000 fd39 	bl	8007574 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b02:	6a38      	ldr	r0, [r7, #32]
 8006b04:	f000 fa6a 	bl	8006fdc <prvIsQueueEmpty>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f43f af6f 	beq.w	80069ee <xQueueReceive+0x2e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b10:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3728      	adds	r7, #40	@ 0x28
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	e000ed04 	.word	0xe000ed04

08006b20 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b08a      	sub	sp, #40	@ 0x28
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006b32:	2300      	movs	r3, #0
 8006b34:	623b      	str	r3, [r7, #32]
	configASSERT( pxQueue->uxItemSize == 0 );

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b36:	f001 f89d 	bl	8007c74 <xTaskGetSchedulerState>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d101      	bne.n	8006b44 <xQueueSemaphoreTake+0x24>
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	2b00      	cmp	r3, #0
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b44:	f001 fe14 	bl	8008770 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b4c:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d024      	beq.n	8006b9e <xQueueSemaphoreTake+0x7e>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	1e5a      	subs	r2, r3, #1
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d104      	bne.n	8006b6e <xQueueSemaphoreTake+0x4e>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006b64:	f001 f9c0 	bl	8007ee8 <pvTaskIncrementMutexHeldCount>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00f      	beq.n	8006b96 <xQueueSemaphoreTake+0x76>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	3310      	adds	r3, #16
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f000 fee2 	bl	8007944 <xTaskRemoveFromEventList>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d007      	beq.n	8006b96 <xQueueSemaphoreTake+0x76>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006b86:	4b4d      	ldr	r3, [pc, #308]	@ (8006cbc <xQueueSemaphoreTake+0x19c>)
 8006b88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b8c:	601a      	str	r2, [r3, #0]
 8006b8e:	f3bf 8f4f 	dsb	sy
 8006b92:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006b96:	f001 fe0d 	bl	80087b4 <vPortExitCritical>
				return pdPASS;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e089      	b.n	8006cb2 <xQueueSemaphoreTake+0x192>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d103      	bne.n	8006bac <xQueueSemaphoreTake+0x8c>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006ba4:	f001 fe06 	bl	80087b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	e082      	b.n	8006cb2 <xQueueSemaphoreTake+0x192>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d106      	bne.n	8006bc0 <xQueueSemaphoreTake+0xa0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006bb2:	f107 030c 	add.w	r3, r7, #12
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f000 ff1a 	bl	80079f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006bc0:	f001 fdf8 	bl	80087b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bc4:	f000 fcc8 	bl	8007558 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bc8:	f001 fdd2 	bl	8008770 <vPortEnterCritical>
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006bd2:	b25b      	sxtb	r3, r3
 8006bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd8:	d103      	bne.n	8006be2 <xQueueSemaphoreTake+0xc2>
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006be8:	b25b      	sxtb	r3, r3
 8006bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bee:	d103      	bne.n	8006bf8 <xQueueSemaphoreTake+0xd8>
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006bf8:	f001 fddc 	bl	80087b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006bfc:	463a      	mov	r2, r7
 8006bfe:	f107 030c 	add.w	r3, r7, #12
 8006c02:	4611      	mov	r1, r2
 8006c04:	4618      	mov	r0, r3
 8006c06:	f000 ff09 	bl	8007a1c <xTaskCheckForTimeOut>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d132      	bne.n	8006c76 <xQueueSemaphoreTake+0x156>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c10:	69f8      	ldr	r0, [r7, #28]
 8006c12:	f000 f9e3 	bl	8006fdc <prvIsQueueEmpty>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d026      	beq.n	8006c6a <xQueueSemaphoreTake+0x14a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d109      	bne.n	8006c38 <xQueueSemaphoreTake+0x118>
					{
						taskENTER_CRITICAL();
 8006c24:	f001 fda4 	bl	8008770 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f001 f83f 	bl	8007cb0 <xTaskPriorityInherit>
 8006c32:	6238      	str	r0, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8006c34:	f001 fdbe 	bl	80087b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	3324      	adds	r3, #36	@ 0x24
 8006c3c:	683a      	ldr	r2, [r7, #0]
 8006c3e:	4611      	mov	r1, r2
 8006c40:	4618      	mov	r0, r3
 8006c42:	f000 fe4b 	bl	80078dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c46:	69f8      	ldr	r0, [r7, #28]
 8006c48:	f000 f976 	bl	8006f38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c4c:	f000 fc92 	bl	8007574 <xTaskResumeAll>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f47f af76 	bne.w	8006b44 <xQueueSemaphoreTake+0x24>
				{
					portYIELD_WITHIN_API();
 8006c58:	4b18      	ldr	r3, [pc, #96]	@ (8006cbc <xQueueSemaphoreTake+0x19c>)
 8006c5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c5e:	601a      	str	r2, [r3, #0]
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	f3bf 8f6f 	isb	sy
 8006c68:	e76c      	b.n	8006b44 <xQueueSemaphoreTake+0x24>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006c6a:	69f8      	ldr	r0, [r7, #28]
 8006c6c:	f000 f964 	bl	8006f38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c70:	f000 fc80 	bl	8007574 <xTaskResumeAll>
 8006c74:	e766      	b.n	8006b44 <xQueueSemaphoreTake+0x24>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006c76:	69f8      	ldr	r0, [r7, #28]
 8006c78:	f000 f95e 	bl	8006f38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c7c:	f000 fc7a 	bl	8007574 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c80:	69f8      	ldr	r0, [r7, #28]
 8006c82:	f000 f9ab 	bl	8006fdc <prvIsQueueEmpty>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f43f af5b 	beq.w	8006b44 <xQueueSemaphoreTake+0x24>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006c8e:	6a3b      	ldr	r3, [r7, #32]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00d      	beq.n	8006cb0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006c94:	f001 fd6c 	bl	8008770 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006c98:	69f8      	ldr	r0, [r7, #28]
 8006c9a:	f000 f8a5 	bl	8006de8 <prvGetDisinheritPriorityAfterTimeout>
 8006c9e:	6178      	str	r0, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	6979      	ldr	r1, [r7, #20]
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f001 f8ba 	bl	8007e20 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006cac:	f001 fd82 	bl	80087b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006cb0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3728      	adds	r7, #40	@ 0x28
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	e000ed04 	.word	0xe000ed04

08006cc0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b08c      	sub	sp, #48	@ 0x30
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	62bb      	str	r3, [r7, #40]	@ 0x28

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d102      	bne.n	8006cdc <xQueueReceiveFromISR+0x1c>
 8006cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cda:	2b00      	cmp	r3, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006cdc:	f001 fe0c 	bl	80088f8 <vPortValidateInterruptPriority>
	__asm volatile
 8006ce0:	f3ef 8211 	mrs	r2, BASEPRI
 8006ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce8:	f383 8811 	msr	BASEPRI, r3
 8006cec:	f3bf 8f6f 	isb	sy
 8006cf0:	f3bf 8f4f 	dsb	sy
 8006cf4:	61ba      	str	r2, [r7, #24]
 8006cf6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006cf8:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006cfa:	627b      	str	r3, [r7, #36]	@ 0x24
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d00:	623b      	str	r3, [r7, #32]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d02:	6a3b      	ldr	r3, [r7, #32]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d02d      	beq.n	8006d64 <xQueueReceiveFromISR+0xa4>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d0a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006d0e:	77fb      	strb	r3, [r7, #31]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006d10:	68b9      	ldr	r1, [r7, #8]
 8006d12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d14:	f000 f8ea 	bl	8006eec <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006d18:	6a3b      	ldr	r3, [r7, #32]
 8006d1a:	1e5a      	subs	r2, r3, #1
 8006d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d1e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006d20:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d28:	d112      	bne.n	8006d50 <xQueueReceiveFromISR+0x90>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d015      	beq.n	8006d5e <xQueueReceiveFromISR+0x9e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d34:	3310      	adds	r3, #16
 8006d36:	4618      	mov	r0, r3
 8006d38:	f000 fe04 	bl	8007944 <xTaskRemoveFromEventList>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00d      	beq.n	8006d5e <xQueueReceiveFromISR+0x9e>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00a      	beq.n	8006d5e <xQueueReceiveFromISR+0x9e>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	601a      	str	r2, [r3, #0]
 8006d4e:	e006      	b.n	8006d5e <xQueueReceiveFromISR+0x9e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006d50:	7ffb      	ldrb	r3, [r7, #31]
 8006d52:	3301      	adds	r3, #1
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	b25a      	sxtb	r2, r3
 8006d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d62:	e001      	b.n	8006d68 <xQueueReceiveFromISR+0xa8>
		}
		else
		{
			xReturn = pdFAIL;
 8006d64:	2300      	movs	r3, #0
 8006d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6a:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	f383 8811 	msr	BASEPRI, r3
}
 8006d72:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3730      	adds	r7, #48	@ 0x30
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b084      	sub	sp, #16
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
 8006d86:	f001 fcf3 	bl	8008770 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d8e:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006d90:	f001 fd10 	bl	80087b4 <vPortExitCritical>

	return uxReturn;
 8006d94:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006d96:	4618      	mov	r0, r3
 8006d98:	3710      	adds	r7, #16
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b085      	sub	sp, #20
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
	uxReturn = pxQueue->uxMessagesWaiting;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dae:	60bb      	str	r3, [r7, #8]

	return uxReturn;
 8006db0:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006db2:	4618      	mov	r0, r3
 8006db4:	3714      	adds	r7, #20
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr

08006dbe <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b084      	sub	sp, #16
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	60fb      	str	r3, [r7, #12]
	configASSERT( pxQueue );
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f000 f95e 	bl	800708c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d102      	bne.n	8006de0 <vQueueDelete+0x22>
		{
			vPortFree( pxQueue );
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	f001 fe40 	bl	8008a60 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006de0:	bf00      	nop
 8006de2:	3710      	adds	r7, #16
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d006      	beq.n	8006e06 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006e02:	60fb      	str	r3, [r7, #12]
 8006e04:	e001      	b.n	8006e0a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006e06:	2300      	movs	r3, #0
 8006e08:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
	}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3714      	adds	r7, #20
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b086      	sub	sp, #24
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006e24:	2300      	movs	r3, #0
 8006e26:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e2c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10d      	bne.n	8006e52 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d14d      	bne.n	8006eda <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	4618      	mov	r0, r3
 8006e44:	f000 ff9c 	bl	8007d80 <xTaskPriorityDisinherit>
 8006e48:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	609a      	str	r2, [r3, #8]
 8006e50:	e043      	b.n	8006eda <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d119      	bne.n	8006e8c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6858      	ldr	r0, [r3, #4]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e60:	461a      	mov	r2, r3
 8006e62:	68b9      	ldr	r1, [r7, #8]
 8006e64:	f00f fd35 	bl	80168d2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	685a      	ldr	r2, [r3, #4]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e70:	441a      	add	r2, r3
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	685a      	ldr	r2, [r3, #4]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d32b      	bcc.n	8006eda <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	605a      	str	r2, [r3, #4]
 8006e8a:	e026      	b.n	8006eda <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	68d8      	ldr	r0, [r3, #12]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e94:	461a      	mov	r2, r3
 8006e96:	68b9      	ldr	r1, [r7, #8]
 8006e98:	f00f fd1b 	bl	80168d2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	68da      	ldr	r2, [r3, #12]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ea4:	425b      	negs	r3, r3
 8006ea6:	441a      	add	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	68da      	ldr	r2, [r3, #12]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d207      	bcs.n	8006ec8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	689a      	ldr	r2, [r3, #8]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ec0:	425b      	negs	r3, r3
 8006ec2:	441a      	add	r2, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d105      	bne.n	8006eda <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d002      	beq.n	8006eda <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	1c5a      	adds	r2, r3, #1
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006ee2:	697b      	ldr	r3, [r7, #20]
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3718      	adds	r7, #24
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d018      	beq.n	8006f30 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	68da      	ldr	r2, [r3, #12]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f06:	441a      	add	r2, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	68da      	ldr	r2, [r3, #12]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d303      	bcc.n	8006f20 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	68d9      	ldr	r1, [r3, #12]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f28:	461a      	mov	r2, r3
 8006f2a:	6838      	ldr	r0, [r7, #0]
 8006f2c:	f00f fcd1 	bl	80168d2 <memcpy>
	}
}
 8006f30:	bf00      	nop
 8006f32:	3708      	adds	r7, #8
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006f40:	f001 fc16 	bl	8008770 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f4a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f4c:	e011      	b.n	8006f72 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d012      	beq.n	8006f7c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	3324      	adds	r3, #36	@ 0x24
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f000 fcf2 	bl	8007944 <xTaskRemoveFromEventList>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d001      	beq.n	8006f6a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006f66:	f000 fd9f 	bl	8007aa8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006f6a:	7bfb      	ldrb	r3, [r7, #15]
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	dce9      	bgt.n	8006f4e <prvUnlockQueue+0x16>
 8006f7a:	e000      	b.n	8006f7e <prvUnlockQueue+0x46>
					break;
 8006f7c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	22ff      	movs	r2, #255	@ 0xff
 8006f82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006f86:	f001 fc15 	bl	80087b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006f8a:	f001 fbf1 	bl	8008770 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f94:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f96:	e011      	b.n	8006fbc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d012      	beq.n	8006fc6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	3310      	adds	r3, #16
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f000 fccd 	bl	8007944 <xTaskRemoveFromEventList>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d001      	beq.n	8006fb4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006fb0:	f000 fd7a 	bl	8007aa8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006fb4:	7bbb      	ldrb	r3, [r7, #14]
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006fbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	dce9      	bgt.n	8006f98 <prvUnlockQueue+0x60>
 8006fc4:	e000      	b.n	8006fc8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006fc6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	22ff      	movs	r2, #255	@ 0xff
 8006fcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006fd0:	f001 fbf0 	bl	80087b4 <vPortExitCritical>
}
 8006fd4:	bf00      	nop
 8006fd6:	3710      	adds	r7, #16
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006fe4:	f001 fbc4 	bl	8008770 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d102      	bne.n	8006ff6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	60fb      	str	r3, [r7, #12]
 8006ff4:	e001      	b.n	8006ffa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ffa:	f001 fbdb 	bl	80087b4 <vPortExitCritical>

	return xReturn;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
}
 8007000:	4618      	mov	r0, r3
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007010:	f001 fbae 	bl	8008770 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800701c:	429a      	cmp	r2, r3
 800701e:	d102      	bne.n	8007026 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007020:	2301      	movs	r3, #1
 8007022:	60fb      	str	r3, [r7, #12]
 8007024:	e001      	b.n	800702a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007026:	2300      	movs	r3, #0
 8007028:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800702a:	f001 fbc3 	bl	80087b4 <vPortExitCritical>

	return xReturn;
 800702e:	68fb      	ldr	r3, [r7, #12]
}
 8007030:	4618      	mov	r0, r3
 8007032:	3710      	adds	r7, #16
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007042:	2300      	movs	r3, #0
 8007044:	60fb      	str	r3, [r7, #12]
 8007046:	e014      	b.n	8007072 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007048:	4a0f      	ldr	r2, [pc, #60]	@ (8007088 <vQueueAddToRegistry+0x50>)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d10b      	bne.n	800706c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007054:	490c      	ldr	r1, [pc, #48]	@ (8007088 <vQueueAddToRegistry+0x50>)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	683a      	ldr	r2, [r7, #0]
 800705a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800705e:	4a0a      	ldr	r2, [pc, #40]	@ (8007088 <vQueueAddToRegistry+0x50>)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	00db      	lsls	r3, r3, #3
 8007064:	4413      	add	r3, r2
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800706a:	e006      	b.n	800707a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	3301      	adds	r3, #1
 8007070:	60fb      	str	r3, [r7, #12]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2b0b      	cmp	r3, #11
 8007076:	d9e7      	bls.n	8007048 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007078:	bf00      	nop
 800707a:	bf00      	nop
 800707c:	3714      	adds	r7, #20
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop
 8007088:	24000b28 	.word	0x24000b28

0800708c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800708c:	b480      	push	{r7}
 800708e:	b085      	sub	sp, #20
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007094:	2300      	movs	r3, #0
 8007096:	60fb      	str	r3, [r7, #12]
 8007098:	e016      	b.n	80070c8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800709a:	4a10      	ldr	r2, [pc, #64]	@ (80070dc <vQueueUnregisterQueue+0x50>)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	00db      	lsls	r3, r3, #3
 80070a0:	4413      	add	r3, r2
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d10b      	bne.n	80070c2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80070aa:	4a0c      	ldr	r2, [pc, #48]	@ (80070dc <vQueueUnregisterQueue+0x50>)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2100      	movs	r1, #0
 80070b0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80070b4:	4a09      	ldr	r2, [pc, #36]	@ (80070dc <vQueueUnregisterQueue+0x50>)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	00db      	lsls	r3, r3, #3
 80070ba:	4413      	add	r3, r2
 80070bc:	2200      	movs	r2, #0
 80070be:	605a      	str	r2, [r3, #4]
				break;
 80070c0:	e006      	b.n	80070d0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	3301      	adds	r3, #1
 80070c6:	60fb      	str	r3, [r7, #12]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2b0b      	cmp	r3, #11
 80070cc:	d9e5      	bls.n	800709a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80070ce:	bf00      	nop
 80070d0:	bf00      	nop
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr
 80070dc:	24000b28 	.word	0x24000b28

080070e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b086      	sub	sp, #24
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80070f0:	f001 fb3e 	bl	8008770 <vPortEnterCritical>
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80070fa:	b25b      	sxtb	r3, r3
 80070fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007100:	d103      	bne.n	800710a <vQueueWaitForMessageRestricted+0x2a>
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	2200      	movs	r2, #0
 8007106:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007110:	b25b      	sxtb	r3, r3
 8007112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007116:	d103      	bne.n	8007120 <vQueueWaitForMessageRestricted+0x40>
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	2200      	movs	r2, #0
 800711c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007120:	f001 fb48 	bl	80087b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007128:	2b00      	cmp	r3, #0
 800712a:	d106      	bne.n	800713a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	3324      	adds	r3, #36	@ 0x24
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	68b9      	ldr	r1, [r7, #8]
 8007134:	4618      	mov	r0, r3
 8007136:	f000 fbe7 	bl	8007908 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800713a:	6978      	ldr	r0, [r7, #20]
 800713c:	f7ff fefc 	bl	8006f38 <prvUnlockQueue>
	}
 8007140:	bf00      	nop
 8007142:	3718      	adds	r7, #24
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007148:	b580      	push	{r7, lr}
 800714a:	b08c      	sub	sp, #48	@ 0x30
 800714c:	af04      	add	r7, sp, #16
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	607a      	str	r2, [r7, #4]
 8007154:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007156:	23a8      	movs	r3, #168	@ 0xa8
 8007158:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800715a:	697b      	ldr	r3, [r7, #20]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800715c:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800715e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007160:	2b00      	cmp	r3, #0
 8007162:	d01e      	beq.n	80071a2 <xTaskCreateStatic+0x5a>
 8007164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007166:	2b00      	cmp	r3, #0
 8007168:	d01b      	beq.n	80071a2 <xTaskCreateStatic+0x5a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800716a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800716c:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007172:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	2202      	movs	r2, #2
 8007178:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800717c:	2300      	movs	r3, #0
 800717e:	9303      	str	r3, [sp, #12]
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	9302      	str	r3, [sp, #8]
 8007184:	f107 0318 	add.w	r3, r7, #24
 8007188:	9301      	str	r3, [sp, #4]
 800718a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800718c:	9300      	str	r3, [sp, #0]
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	68b9      	ldr	r1, [r7, #8]
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f000 f851 	bl	800723c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800719a:	69f8      	ldr	r0, [r7, #28]
 800719c:	f000 f8e4 	bl	8007368 <prvAddNewTaskToReadyList>
 80071a0:	e001      	b.n	80071a6 <xTaskCreateStatic+0x5e>
		}
		else
		{
			xReturn = NULL;
 80071a2:	2300      	movs	r3, #0
 80071a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80071a6:	69bb      	ldr	r3, [r7, #24]
	}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3720      	adds	r7, #32
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b08c      	sub	sp, #48	@ 0x30
 80071b4:	af04      	add	r7, sp, #16
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	603b      	str	r3, [r7, #0]
 80071bc:	4613      	mov	r3, r2
 80071be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80071c0:	88fb      	ldrh	r3, [r7, #6]
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	4618      	mov	r0, r3
 80071c6:	f001 fbb1 	bl	800892c <pvPortMalloc>
 80071ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00e      	beq.n	80071f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80071d2:	20a8      	movs	r0, #168	@ 0xa8
 80071d4:	f001 fbaa 	bl	800892c <pvPortMalloc>
 80071d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d003      	beq.n	80071e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	697a      	ldr	r2, [r7, #20]
 80071e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80071e6:	e005      	b.n	80071f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80071e8:	6978      	ldr	r0, [r7, #20]
 80071ea:	f001 fc39 	bl	8008a60 <vPortFree>
 80071ee:	e001      	b.n	80071f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80071f0:	2300      	movs	r3, #0
 80071f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d017      	beq.n	800722a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007202:	88fa      	ldrh	r2, [r7, #6]
 8007204:	2300      	movs	r3, #0
 8007206:	9303      	str	r3, [sp, #12]
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	9302      	str	r3, [sp, #8]
 800720c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800720e:	9301      	str	r3, [sp, #4]
 8007210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007212:	9300      	str	r3, [sp, #0]
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	68b9      	ldr	r1, [r7, #8]
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f000 f80f 	bl	800723c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800721e:	69f8      	ldr	r0, [r7, #28]
 8007220:	f000 f8a2 	bl	8007368 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007224:	2301      	movs	r3, #1
 8007226:	61bb      	str	r3, [r7, #24]
 8007228:	e002      	b.n	8007230 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800722a:	f04f 33ff 	mov.w	r3, #4294967295
 800722e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007230:	69bb      	ldr	r3, [r7, #24]
	}
 8007232:	4618      	mov	r0, r3
 8007234:	3720      	adds	r7, #32
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
	...

0800723c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b086      	sub	sp, #24
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	607a      	str	r2, [r7, #4]
 8007248:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800724a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800724c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	461a      	mov	r2, r3
 8007254:	21a5      	movs	r1, #165	@ 0xa5
 8007256:	f00f fa70 	bl	801673a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800725a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800725c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800725e:	6879      	ldr	r1, [r7, #4]
 8007260:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8007264:	440b      	add	r3, r1
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	4413      	add	r3, r2
 800726a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	f023 0307 	bic.w	r3, r3, #7
 8007272:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d01f      	beq.n	80072ba <prvInitialiseNewTask+0x7e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800727a:	2300      	movs	r3, #0
 800727c:	617b      	str	r3, [r7, #20]
 800727e:	e012      	b.n	80072a6 <prvInitialiseNewTask+0x6a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007280:	68ba      	ldr	r2, [r7, #8]
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	4413      	add	r3, r2
 8007286:	7819      	ldrb	r1, [r3, #0]
 8007288:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	4413      	add	r3, r2
 800728e:	3334      	adds	r3, #52	@ 0x34
 8007290:	460a      	mov	r2, r1
 8007292:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007294:	68ba      	ldr	r2, [r7, #8]
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	4413      	add	r3, r2
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d006      	beq.n	80072ae <prvInitialiseNewTask+0x72>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	3301      	adds	r3, #1
 80072a4:	617b      	str	r3, [r7, #20]
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	2b0f      	cmp	r3, #15
 80072aa:	d9e9      	bls.n	8007280 <prvInitialiseNewTask+0x44>
 80072ac:	e000      	b.n	80072b0 <prvInitialiseNewTask+0x74>
			{
				break;
 80072ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80072b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80072b8:	e003      	b.n	80072c2 <prvInitialiseNewTask+0x86>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80072ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80072c2:	6a3b      	ldr	r3, [r7, #32]
 80072c4:	2b37      	cmp	r3, #55	@ 0x37
 80072c6:	d901      	bls.n	80072cc <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80072c8:	2337      	movs	r3, #55	@ 0x37
 80072ca:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80072cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ce:	6a3a      	ldr	r2, [r7, #32]
 80072d0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80072d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d4:	6a3a      	ldr	r2, [r7, #32]
 80072d6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80072d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072da:	2200      	movs	r2, #0
 80072dc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80072de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072e0:	3304      	adds	r3, #4
 80072e2:	4618      	mov	r0, r3
 80072e4:	f7fe ffb0 	bl	8006248 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80072e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ea:	3318      	adds	r3, #24
 80072ec:	4618      	mov	r0, r3
 80072ee:	f7fe ffab 	bl	8006248 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80072f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072f8:	6a3b      	ldr	r3, [r7, #32]
 80072fa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80072fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007300:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007304:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007306:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800730a:	2200      	movs	r2, #0
 800730c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007312:	2200      	movs	r2, #0
 8007314:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800731a:	3354      	adds	r3, #84	@ 0x54
 800731c:	224c      	movs	r2, #76	@ 0x4c
 800731e:	2100      	movs	r1, #0
 8007320:	4618      	mov	r0, r3
 8007322:	f00f fa0a 	bl	801673a <memset>
 8007326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007328:	4a0c      	ldr	r2, [pc, #48]	@ (800735c <prvInitialiseNewTask+0x120>)
 800732a:	659a      	str	r2, [r3, #88]	@ 0x58
 800732c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800732e:	4a0c      	ldr	r2, [pc, #48]	@ (8007360 <prvInitialiseNewTask+0x124>)
 8007330:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007334:	4a0b      	ldr	r2, [pc, #44]	@ (8007364 <prvInitialiseNewTask+0x128>)
 8007336:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007338:	683a      	ldr	r2, [r7, #0]
 800733a:	68f9      	ldr	r1, [r7, #12]
 800733c:	6938      	ldr	r0, [r7, #16]
 800733e:	f001 f92d 	bl	800859c <pxPortInitialiseStack>
 8007342:	4602      	mov	r2, r0
 8007344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007346:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800734a:	2b00      	cmp	r3, #0
 800734c:	d002      	beq.n	8007354 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800734e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007350:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007352:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007354:	bf00      	nop
 8007356:	3718      	adds	r7, #24
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}
 800735c:	2400805c 	.word	0x2400805c
 8007360:	240080c4 	.word	0x240080c4
 8007364:	2400812c 	.word	0x2400812c

08007368 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007370:	f001 f9fe 	bl	8008770 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007374:	4b2d      	ldr	r3, [pc, #180]	@ (800742c <prvAddNewTaskToReadyList+0xc4>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	3301      	adds	r3, #1
 800737a:	4a2c      	ldr	r2, [pc, #176]	@ (800742c <prvAddNewTaskToReadyList+0xc4>)
 800737c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800737e:	4b2c      	ldr	r3, [pc, #176]	@ (8007430 <prvAddNewTaskToReadyList+0xc8>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d109      	bne.n	800739a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007386:	4a2a      	ldr	r2, [pc, #168]	@ (8007430 <prvAddNewTaskToReadyList+0xc8>)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800738c:	4b27      	ldr	r3, [pc, #156]	@ (800742c <prvAddNewTaskToReadyList+0xc4>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2b01      	cmp	r3, #1
 8007392:	d110      	bne.n	80073b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007394:	f000 fbac 	bl	8007af0 <prvInitialiseTaskLists>
 8007398:	e00d      	b.n	80073b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800739a:	4b26      	ldr	r3, [pc, #152]	@ (8007434 <prvAddNewTaskToReadyList+0xcc>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d109      	bne.n	80073b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80073a2:	4b23      	ldr	r3, [pc, #140]	@ (8007430 <prvAddNewTaskToReadyList+0xc8>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d802      	bhi.n	80073b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80073b0:	4a1f      	ldr	r2, [pc, #124]	@ (8007430 <prvAddNewTaskToReadyList+0xc8>)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80073b6:	4b20      	ldr	r3, [pc, #128]	@ (8007438 <prvAddNewTaskToReadyList+0xd0>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	3301      	adds	r3, #1
 80073bc:	4a1e      	ldr	r2, [pc, #120]	@ (8007438 <prvAddNewTaskToReadyList+0xd0>)
 80073be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80073c0:	4b1d      	ldr	r3, [pc, #116]	@ (8007438 <prvAddNewTaskToReadyList+0xd0>)
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073cc:	4b1b      	ldr	r3, [pc, #108]	@ (800743c <prvAddNewTaskToReadyList+0xd4>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d903      	bls.n	80073dc <prvAddNewTaskToReadyList+0x74>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d8:	4a18      	ldr	r2, [pc, #96]	@ (800743c <prvAddNewTaskToReadyList+0xd4>)
 80073da:	6013      	str	r3, [r2, #0]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073e0:	4613      	mov	r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	4413      	add	r3, r2
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	4a15      	ldr	r2, [pc, #84]	@ (8007440 <prvAddNewTaskToReadyList+0xd8>)
 80073ea:	441a      	add	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	3304      	adds	r3, #4
 80073f0:	4619      	mov	r1, r3
 80073f2:	4610      	mov	r0, r2
 80073f4:	f7fe ff35 	bl	8006262 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80073f8:	f001 f9dc 	bl	80087b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80073fc:	4b0d      	ldr	r3, [pc, #52]	@ (8007434 <prvAddNewTaskToReadyList+0xcc>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00e      	beq.n	8007422 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007404:	4b0a      	ldr	r3, [pc, #40]	@ (8007430 <prvAddNewTaskToReadyList+0xc8>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800740e:	429a      	cmp	r2, r3
 8007410:	d207      	bcs.n	8007422 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007412:	4b0c      	ldr	r3, [pc, #48]	@ (8007444 <prvAddNewTaskToReadyList+0xdc>)
 8007414:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007418:	601a      	str	r2, [r3, #0]
 800741a:	f3bf 8f4f 	dsb	sy
 800741e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007422:	bf00      	nop
 8007424:	3708      	adds	r7, #8
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	2400105c 	.word	0x2400105c
 8007430:	24000b88 	.word	0x24000b88
 8007434:	24001068 	.word	0x24001068
 8007438:	24001078 	.word	0x24001078
 800743c:	24001064 	.word	0x24001064
 8007440:	24000b8c 	.word	0x24000b8c
 8007444:	e000ed04 	.word	0xe000ed04

08007448 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007450:	2300      	movs	r3, #0
 8007452:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00a      	beq.n	8007470 <vTaskDelay+0x28>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800745a:	4b0d      	ldr	r3, [pc, #52]	@ (8007490 <vTaskDelay+0x48>)
 800745c:	681b      	ldr	r3, [r3, #0]
			vTaskSuspendAll();
 800745e:	f000 f87b 	bl	8007558 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007462:	2100      	movs	r1, #0
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 fd53 	bl	8007f10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800746a:	f000 f883 	bl	8007574 <xTaskResumeAll>
 800746e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d107      	bne.n	8007486 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8007476:	4b07      	ldr	r3, [pc, #28]	@ (8007494 <vTaskDelay+0x4c>)
 8007478:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800747c:	601a      	str	r2, [r3, #0]
 800747e:	f3bf 8f4f 	dsb	sy
 8007482:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007486:	bf00      	nop
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	24001084 	.word	0x24001084
 8007494:	e000ed04 	.word	0xe000ed04

08007498 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b08a      	sub	sp, #40	@ 0x28
 800749c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800749e:	2300      	movs	r3, #0
 80074a0:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80074a2:	2300      	movs	r3, #0
 80074a4:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80074a6:	1d3a      	adds	r2, r7, #4
 80074a8:	f107 0108 	add.w	r1, r7, #8
 80074ac:	f107 030c 	add.w	r3, r7, #12
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7fe fe75 	bl	80061a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80074b6:	6879      	ldr	r1, [r7, #4]
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	9202      	str	r2, [sp, #8]
 80074be:	9301      	str	r3, [sp, #4]
 80074c0:	2300      	movs	r3, #0
 80074c2:	9300      	str	r3, [sp, #0]
 80074c4:	2300      	movs	r3, #0
 80074c6:	460a      	mov	r2, r1
 80074c8:	491b      	ldr	r1, [pc, #108]	@ (8007538 <vTaskStartScheduler+0xa0>)
 80074ca:	481c      	ldr	r0, [pc, #112]	@ (800753c <vTaskStartScheduler+0xa4>)
 80074cc:	f7ff fe3c 	bl	8007148 <xTaskCreateStatic>
 80074d0:	4603      	mov	r3, r0
 80074d2:	4a1b      	ldr	r2, [pc, #108]	@ (8007540 <vTaskStartScheduler+0xa8>)
 80074d4:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80074d6:	4b1a      	ldr	r3, [pc, #104]	@ (8007540 <vTaskStartScheduler+0xa8>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d002      	beq.n	80074e4 <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
 80074de:	2301      	movs	r3, #1
 80074e0:	617b      	str	r3, [r7, #20]
 80074e2:	e001      	b.n	80074e8 <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
 80074e4:	2300      	movs	r3, #0
 80074e6:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d102      	bne.n	80074f4 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 80074ee:	f000 fd63 	bl	8007fb8 <xTimerCreateTimerTask>
 80074f2:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d11a      	bne.n	8007530 <vTaskStartScheduler+0x98>
	__asm volatile
 80074fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074fe:	f383 8811 	msr	BASEPRI, r3
 8007502:	f3bf 8f6f 	isb	sy
 8007506:	f3bf 8f4f 	dsb	sy
 800750a:	613b      	str	r3, [r7, #16]
}
 800750c:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800750e:	4b0d      	ldr	r3, [pc, #52]	@ (8007544 <vTaskStartScheduler+0xac>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	3354      	adds	r3, #84	@ 0x54
 8007514:	4a0c      	ldr	r2, [pc, #48]	@ (8007548 <vTaskStartScheduler+0xb0>)
 8007516:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007518:	4b0c      	ldr	r3, [pc, #48]	@ (800754c <vTaskStartScheduler+0xb4>)
 800751a:	f04f 32ff 	mov.w	r2, #4294967295
 800751e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007520:	4b0b      	ldr	r3, [pc, #44]	@ (8007550 <vTaskStartScheduler+0xb8>)
 8007522:	2201      	movs	r2, #1
 8007524:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007526:	4b0b      	ldr	r3, [pc, #44]	@ (8007554 <vTaskStartScheduler+0xbc>)
 8007528:	2200      	movs	r2, #0
 800752a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800752c:	f001 f8b0 	bl	8008690 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007530:	bf00      	nop
 8007532:	3718      	adds	r7, #24
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	080175c4 	.word	0x080175c4
 800753c:	08007ac1 	.word	0x08007ac1
 8007540:	24001080 	.word	0x24001080
 8007544:	24000b88 	.word	0x24000b88
 8007548:	24000040 	.word	0x24000040
 800754c:	2400107c 	.word	0x2400107c
 8007550:	24001068 	.word	0x24001068
 8007554:	24001060 	.word	0x24001060

08007558 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007558:	b480      	push	{r7}
 800755a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800755c:	4b04      	ldr	r3, [pc, #16]	@ (8007570 <vTaskSuspendAll+0x18>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	3301      	adds	r3, #1
 8007562:	4a03      	ldr	r2, [pc, #12]	@ (8007570 <vTaskSuspendAll+0x18>)
 8007564:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007566:	bf00      	nop
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr
 8007570:	24001084 	.word	0x24001084

08007574 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800757a:	2300      	movs	r3, #0
 800757c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800757e:	2300      	movs	r3, #0
 8007580:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007582:	4b3b      	ldr	r3, [pc, #236]	@ (8007670 <xTaskResumeAll+0xfc>)
 8007584:	681b      	ldr	r3, [r3, #0]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007586:	f001 f8f3 	bl	8008770 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800758a:	4b39      	ldr	r3, [pc, #228]	@ (8007670 <xTaskResumeAll+0xfc>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	3b01      	subs	r3, #1
 8007590:	4a37      	ldr	r2, [pc, #220]	@ (8007670 <xTaskResumeAll+0xfc>)
 8007592:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007594:	4b36      	ldr	r3, [pc, #216]	@ (8007670 <xTaskResumeAll+0xfc>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d162      	bne.n	8007662 <xTaskResumeAll+0xee>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800759c:	4b35      	ldr	r3, [pc, #212]	@ (8007674 <xTaskResumeAll+0x100>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d05e      	beq.n	8007662 <xTaskResumeAll+0xee>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075a4:	e02f      	b.n	8007606 <xTaskResumeAll+0x92>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075a6:	4b34      	ldr	r3, [pc, #208]	@ (8007678 <xTaskResumeAll+0x104>)
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	3318      	adds	r3, #24
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7fe feb2 	bl	800631c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	3304      	adds	r3, #4
 80075bc:	4618      	mov	r0, r3
 80075be:	f7fe fead 	bl	800631c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075c6:	4b2d      	ldr	r3, [pc, #180]	@ (800767c <xTaskResumeAll+0x108>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d903      	bls.n	80075d6 <xTaskResumeAll+0x62>
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d2:	4a2a      	ldr	r2, [pc, #168]	@ (800767c <xTaskResumeAll+0x108>)
 80075d4:	6013      	str	r3, [r2, #0]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075da:	4613      	mov	r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4413      	add	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	4a27      	ldr	r2, [pc, #156]	@ (8007680 <xTaskResumeAll+0x10c>)
 80075e4:	441a      	add	r2, r3
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	3304      	adds	r3, #4
 80075ea:	4619      	mov	r1, r3
 80075ec:	4610      	mov	r0, r2
 80075ee:	f7fe fe38 	bl	8006262 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075f6:	4b23      	ldr	r3, [pc, #140]	@ (8007684 <xTaskResumeAll+0x110>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d302      	bcc.n	8007606 <xTaskResumeAll+0x92>
					{
						xYieldPending = pdTRUE;
 8007600:	4b21      	ldr	r3, [pc, #132]	@ (8007688 <xTaskResumeAll+0x114>)
 8007602:	2201      	movs	r2, #1
 8007604:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007606:	4b1c      	ldr	r3, [pc, #112]	@ (8007678 <xTaskResumeAll+0x104>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1cb      	bne.n	80075a6 <xTaskResumeAll+0x32>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d001      	beq.n	8007618 <xTaskResumeAll+0xa4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007614:	f000 fafe 	bl	8007c14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007618:	4b1c      	ldr	r3, [pc, #112]	@ (800768c <xTaskResumeAll+0x118>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d010      	beq.n	8007646 <xTaskResumeAll+0xd2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007624:	f000 f858 	bl	80076d8 <xTaskIncrementTick>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d002      	beq.n	8007634 <xTaskResumeAll+0xc0>
							{
								xYieldPending = pdTRUE;
 800762e:	4b16      	ldr	r3, [pc, #88]	@ (8007688 <xTaskResumeAll+0x114>)
 8007630:	2201      	movs	r2, #1
 8007632:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	3b01      	subs	r3, #1
 8007638:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1f1      	bne.n	8007624 <xTaskResumeAll+0xb0>

						xPendedTicks = 0;
 8007640:	4b12      	ldr	r3, [pc, #72]	@ (800768c <xTaskResumeAll+0x118>)
 8007642:	2200      	movs	r2, #0
 8007644:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007646:	4b10      	ldr	r3, [pc, #64]	@ (8007688 <xTaskResumeAll+0x114>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d009      	beq.n	8007662 <xTaskResumeAll+0xee>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800764e:	2301      	movs	r3, #1
 8007650:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007652:	4b0f      	ldr	r3, [pc, #60]	@ (8007690 <xTaskResumeAll+0x11c>)
 8007654:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007658:	601a      	str	r2, [r3, #0]
 800765a:	f3bf 8f4f 	dsb	sy
 800765e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007662:	f001 f8a7 	bl	80087b4 <vPortExitCritical>

	return xAlreadyYielded;
 8007666:	68bb      	ldr	r3, [r7, #8]
}
 8007668:	4618      	mov	r0, r3
 800766a:	3710      	adds	r7, #16
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	24001084 	.word	0x24001084
 8007674:	2400105c 	.word	0x2400105c
 8007678:	2400101c 	.word	0x2400101c
 800767c:	24001064 	.word	0x24001064
 8007680:	24000b8c 	.word	0x24000b8c
 8007684:	24000b88 	.word	0x24000b88
 8007688:	24001070 	.word	0x24001070
 800768c:	2400106c 	.word	0x2400106c
 8007690:	e000ed04 	.word	0xe000ed04

08007694 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800769a:	4b05      	ldr	r3, [pc, #20]	@ (80076b0 <xTaskGetTickCount+0x1c>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80076a0:	687b      	ldr	r3, [r7, #4]
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	370c      	adds	r7, #12
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	24001060 	.word	0x24001060

080076b4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076ba:	f001 f91d 	bl	80088f8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80076be:	2300      	movs	r3, #0
 80076c0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80076c2:	4b04      	ldr	r3, [pc, #16]	@ (80076d4 <xTaskGetTickCountFromISR+0x20>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80076c8:	683b      	ldr	r3, [r7, #0]
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3708      	adds	r7, #8
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	24001060 	.word	0x24001060

080076d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b086      	sub	sp, #24
 80076dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80076de:	2300      	movs	r3, #0
 80076e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076e2:	4b48      	ldr	r3, [pc, #288]	@ (8007804 <xTaskIncrementTick+0x12c>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	f040 8082 	bne.w	80077f0 <xTaskIncrementTick+0x118>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80076ec:	4b46      	ldr	r3, [pc, #280]	@ (8007808 <xTaskIncrementTick+0x130>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	3301      	adds	r3, #1
 80076f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80076f4:	4a44      	ldr	r2, [pc, #272]	@ (8007808 <xTaskIncrementTick+0x130>)
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d113      	bne.n	8007728 <xTaskIncrementTick+0x50>
		{
			taskSWITCH_DELAYED_LISTS();
 8007700:	4b42      	ldr	r3, [pc, #264]	@ (800780c <xTaskIncrementTick+0x134>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4b41      	ldr	r3, [pc, #260]	@ (800780c <xTaskIncrementTick+0x134>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	60fb      	str	r3, [r7, #12]
 800770c:	4b40      	ldr	r3, [pc, #256]	@ (8007810 <xTaskIncrementTick+0x138>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a3e      	ldr	r2, [pc, #248]	@ (800780c <xTaskIncrementTick+0x134>)
 8007712:	6013      	str	r3, [r2, #0]
 8007714:	4a3e      	ldr	r2, [pc, #248]	@ (8007810 <xTaskIncrementTick+0x138>)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	6013      	str	r3, [r2, #0]
 800771a:	4b3e      	ldr	r3, [pc, #248]	@ (8007814 <xTaskIncrementTick+0x13c>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	3301      	adds	r3, #1
 8007720:	4a3c      	ldr	r2, [pc, #240]	@ (8007814 <xTaskIncrementTick+0x13c>)
 8007722:	6013      	str	r3, [r2, #0]
 8007724:	f000 fa76 	bl	8007c14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007728:	4b3b      	ldr	r3, [pc, #236]	@ (8007818 <xTaskIncrementTick+0x140>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	693a      	ldr	r2, [r7, #16]
 800772e:	429a      	cmp	r2, r3
 8007730:	d349      	bcc.n	80077c6 <xTaskIncrementTick+0xee>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007732:	4b36      	ldr	r3, [pc, #216]	@ (800780c <xTaskIncrementTick+0x134>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d104      	bne.n	8007746 <xTaskIncrementTick+0x6e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800773c:	4b36      	ldr	r3, [pc, #216]	@ (8007818 <xTaskIncrementTick+0x140>)
 800773e:	f04f 32ff 	mov.w	r2, #4294967295
 8007742:	601a      	str	r2, [r3, #0]
					break;
 8007744:	e03f      	b.n	80077c6 <xTaskIncrementTick+0xee>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007746:	4b31      	ldr	r3, [pc, #196]	@ (800780c <xTaskIncrementTick+0x134>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007756:	693a      	ldr	r2, [r7, #16]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	429a      	cmp	r2, r3
 800775c:	d203      	bcs.n	8007766 <xTaskIncrementTick+0x8e>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800775e:	4a2e      	ldr	r2, [pc, #184]	@ (8007818 <xTaskIncrementTick+0x140>)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007764:	e02f      	b.n	80077c6 <xTaskIncrementTick+0xee>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	3304      	adds	r3, #4
 800776a:	4618      	mov	r0, r3
 800776c:	f7fe fdd6 	bl	800631c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007774:	2b00      	cmp	r3, #0
 8007776:	d004      	beq.n	8007782 <xTaskIncrementTick+0xaa>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	3318      	adds	r3, #24
 800777c:	4618      	mov	r0, r3
 800777e:	f7fe fdcd 	bl	800631c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007786:	4b25      	ldr	r3, [pc, #148]	@ (800781c <xTaskIncrementTick+0x144>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	429a      	cmp	r2, r3
 800778c:	d903      	bls.n	8007796 <xTaskIncrementTick+0xbe>
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007792:	4a22      	ldr	r2, [pc, #136]	@ (800781c <xTaskIncrementTick+0x144>)
 8007794:	6013      	str	r3, [r2, #0]
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800779a:	4613      	mov	r3, r2
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	4413      	add	r3, r2
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	4a1f      	ldr	r2, [pc, #124]	@ (8007820 <xTaskIncrementTick+0x148>)
 80077a4:	441a      	add	r2, r3
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	3304      	adds	r3, #4
 80077aa:	4619      	mov	r1, r3
 80077ac:	4610      	mov	r0, r2
 80077ae:	f7fe fd58 	bl	8006262 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077b6:	4b1b      	ldr	r3, [pc, #108]	@ (8007824 <xTaskIncrementTick+0x14c>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077bc:	429a      	cmp	r2, r3
 80077be:	d3b8      	bcc.n	8007732 <xTaskIncrementTick+0x5a>
						{
							xSwitchRequired = pdTRUE;
 80077c0:	2301      	movs	r3, #1
 80077c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077c4:	e7b5      	b.n	8007732 <xTaskIncrementTick+0x5a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80077c6:	4b17      	ldr	r3, [pc, #92]	@ (8007824 <xTaskIncrementTick+0x14c>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077cc:	4914      	ldr	r1, [pc, #80]	@ (8007820 <xTaskIncrementTick+0x148>)
 80077ce:	4613      	mov	r3, r2
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	4413      	add	r3, r2
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	440b      	add	r3, r1
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d901      	bls.n	80077e2 <xTaskIncrementTick+0x10a>
			{
				xSwitchRequired = pdTRUE;
 80077de:	2301      	movs	r3, #1
 80077e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80077e2:	4b11      	ldr	r3, [pc, #68]	@ (8007828 <xTaskIncrementTick+0x150>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d007      	beq.n	80077fa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80077ea:	2301      	movs	r3, #1
 80077ec:	617b      	str	r3, [r7, #20]
 80077ee:	e004      	b.n	80077fa <xTaskIncrementTick+0x122>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80077f0:	4b0e      	ldr	r3, [pc, #56]	@ (800782c <xTaskIncrementTick+0x154>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	3301      	adds	r3, #1
 80077f6:	4a0d      	ldr	r2, [pc, #52]	@ (800782c <xTaskIncrementTick+0x154>)
 80077f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80077fa:	697b      	ldr	r3, [r7, #20]
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3718      	adds	r7, #24
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}
 8007804:	24001084 	.word	0x24001084
 8007808:	24001060 	.word	0x24001060
 800780c:	24001014 	.word	0x24001014
 8007810:	24001018 	.word	0x24001018
 8007814:	24001074 	.word	0x24001074
 8007818:	2400107c 	.word	0x2400107c
 800781c:	24001064 	.word	0x24001064
 8007820:	24000b8c 	.word	0x24000b8c
 8007824:	24000b88 	.word	0x24000b88
 8007828:	24001070 	.word	0x24001070
 800782c:	2400106c 	.word	0x2400106c

08007830 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007836:	4b23      	ldr	r3, [pc, #140]	@ (80078c4 <vTaskSwitchContext+0x94>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d003      	beq.n	8007846 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800783e:	4b22      	ldr	r3, [pc, #136]	@ (80078c8 <vTaskSwitchContext+0x98>)
 8007840:	2201      	movs	r2, #1
 8007842:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007844:	e038      	b.n	80078b8 <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 8007846:	4b20      	ldr	r3, [pc, #128]	@ (80078c8 <vTaskSwitchContext+0x98>)
 8007848:	2200      	movs	r2, #0
 800784a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800784c:	4b1f      	ldr	r3, [pc, #124]	@ (80078cc <vTaskSwitchContext+0x9c>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	607b      	str	r3, [r7, #4]
 8007852:	e002      	b.n	800785a <vTaskSwitchContext+0x2a>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	3b01      	subs	r3, #1
 8007858:	607b      	str	r3, [r7, #4]
 800785a:	491d      	ldr	r1, [pc, #116]	@ (80078d0 <vTaskSwitchContext+0xa0>)
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	4613      	mov	r3, r2
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	4413      	add	r3, r2
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	440b      	add	r3, r1
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d0f2      	beq.n	8007854 <vTaskSwitchContext+0x24>
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	4613      	mov	r3, r2
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	4413      	add	r3, r2
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	4a15      	ldr	r2, [pc, #84]	@ (80078d0 <vTaskSwitchContext+0xa0>)
 800787a:	4413      	add	r3, r2
 800787c:	603b      	str	r3, [r7, #0]
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	685a      	ldr	r2, [r3, #4]
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	605a      	str	r2, [r3, #4]
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	3308      	adds	r3, #8
 8007890:	429a      	cmp	r2, r3
 8007892:	d104      	bne.n	800789e <vTaskSwitchContext+0x6e>
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	685a      	ldr	r2, [r3, #4]
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	605a      	str	r2, [r3, #4]
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	4a0b      	ldr	r2, [pc, #44]	@ (80078d4 <vTaskSwitchContext+0xa4>)
 80078a6:	6013      	str	r3, [r2, #0]
 80078a8:	4a08      	ldr	r2, [pc, #32]	@ (80078cc <vTaskSwitchContext+0x9c>)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80078ae:	4b09      	ldr	r3, [pc, #36]	@ (80078d4 <vTaskSwitchContext+0xa4>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	3354      	adds	r3, #84	@ 0x54
 80078b4:	4a08      	ldr	r2, [pc, #32]	@ (80078d8 <vTaskSwitchContext+0xa8>)
 80078b6:	6013      	str	r3, [r2, #0]
}
 80078b8:	bf00      	nop
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr
 80078c4:	24001084 	.word	0x24001084
 80078c8:	24001070 	.word	0x24001070
 80078cc:	24001064 	.word	0x24001064
 80078d0:	24000b8c 	.word	0x24000b8c
 80078d4:	24000b88 	.word	0x24000b88
 80078d8:	24000040 	.word	0x24000040

080078dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80078e6:	4b07      	ldr	r3, [pc, #28]	@ (8007904 <vTaskPlaceOnEventList+0x28>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	3318      	adds	r3, #24
 80078ec:	4619      	mov	r1, r3
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f7fe fcdb 	bl	80062aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80078f4:	2101      	movs	r1, #1
 80078f6:	6838      	ldr	r0, [r7, #0]
 80078f8:	f000 fb0a 	bl	8007f10 <prvAddCurrentTaskToDelayedList>
}
 80078fc:	bf00      	nop
 80078fe:	3708      	adds	r7, #8
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	24000b88 	.word	0x24000b88

08007908 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	607a      	str	r2, [r7, #4]

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007914:	4b0a      	ldr	r3, [pc, #40]	@ (8007940 <vTaskPlaceOnEventListRestricted+0x38>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	3318      	adds	r3, #24
 800791a:	4619      	mov	r1, r3
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	f7fe fca0 	bl	8006262 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d002      	beq.n	800792e <vTaskPlaceOnEventListRestricted+0x26>
		{
			xTicksToWait = portMAX_DELAY;
 8007928:	f04f 33ff 	mov.w	r3, #4294967295
 800792c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800792e:	6879      	ldr	r1, [r7, #4]
 8007930:	68b8      	ldr	r0, [r7, #8]
 8007932:	f000 faed 	bl	8007f10 <prvAddCurrentTaskToDelayedList>
	}
 8007936:	bf00      	nop
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	24000b88 	.word	0x24000b88

08007944 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	3318      	adds	r3, #24
 8007958:	4618      	mov	r0, r3
 800795a:	f7fe fcdf 	bl	800631c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800795e:	4b1e      	ldr	r3, [pc, #120]	@ (80079d8 <xTaskRemoveFromEventList+0x94>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d11d      	bne.n	80079a2 <xTaskRemoveFromEventList+0x5e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	3304      	adds	r3, #4
 800796a:	4618      	mov	r0, r3
 800796c:	f7fe fcd6 	bl	800631c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007974:	4b19      	ldr	r3, [pc, #100]	@ (80079dc <xTaskRemoveFromEventList+0x98>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	429a      	cmp	r2, r3
 800797a:	d903      	bls.n	8007984 <xTaskRemoveFromEventList+0x40>
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007980:	4a16      	ldr	r2, [pc, #88]	@ (80079dc <xTaskRemoveFromEventList+0x98>)
 8007982:	6013      	str	r3, [r2, #0]
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007988:	4613      	mov	r3, r2
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	4413      	add	r3, r2
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	4a13      	ldr	r2, [pc, #76]	@ (80079e0 <xTaskRemoveFromEventList+0x9c>)
 8007992:	441a      	add	r2, r3
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	3304      	adds	r3, #4
 8007998:	4619      	mov	r1, r3
 800799a:	4610      	mov	r0, r2
 800799c:	f7fe fc61 	bl	8006262 <vListInsertEnd>
 80079a0:	e005      	b.n	80079ae <xTaskRemoveFromEventList+0x6a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	3318      	adds	r3, #24
 80079a6:	4619      	mov	r1, r3
 80079a8:	480e      	ldr	r0, [pc, #56]	@ (80079e4 <xTaskRemoveFromEventList+0xa0>)
 80079aa:	f7fe fc5a 	bl	8006262 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079b2:	4b0d      	ldr	r3, [pc, #52]	@ (80079e8 <xTaskRemoveFromEventList+0xa4>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d905      	bls.n	80079c8 <xTaskRemoveFromEventList+0x84>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80079bc:	2301      	movs	r3, #1
 80079be:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80079c0:	4b0a      	ldr	r3, [pc, #40]	@ (80079ec <xTaskRemoveFromEventList+0xa8>)
 80079c2:	2201      	movs	r2, #1
 80079c4:	601a      	str	r2, [r3, #0]
 80079c6:	e001      	b.n	80079cc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		xReturn = pdFALSE;
 80079c8:	2300      	movs	r3, #0
 80079ca:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80079cc:	68fb      	ldr	r3, [r7, #12]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	24001084 	.word	0x24001084
 80079dc:	24001064 	.word	0x24001064
 80079e0:	24000b8c 	.word	0x24000b8c
 80079e4:	2400101c 	.word	0x2400101c
 80079e8:	24000b88 	.word	0x24000b88
 80079ec:	24001070 	.word	0x24001070

080079f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80079f8:	4b06      	ldr	r3, [pc, #24]	@ (8007a14 <vTaskInternalSetTimeOutState+0x24>)
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007a00:	4b05      	ldr	r3, [pc, #20]	@ (8007a18 <vTaskInternalSetTimeOutState+0x28>)
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	605a      	str	r2, [r3, #4]
}
 8007a08:	bf00      	nop
 8007a0a:	370c      	adds	r7, #12
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr
 8007a14:	24001074 	.word	0x24001074
 8007a18:	24001060 	.word	0x24001060

08007a1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b086      	sub	sp, #24
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 8007a26:	f000 fea3 	bl	8008770 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8007aa0 <xTaskCheckForTimeOut+0x84>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	693a      	ldr	r2, [r7, #16]
 8007a36:	1ad3      	subs	r3, r2, r3
 8007a38:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a42:	d102      	bne.n	8007a4a <xTaskCheckForTimeOut+0x2e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007a44:	2300      	movs	r3, #0
 8007a46:	617b      	str	r3, [r7, #20]
 8007a48:	e023      	b.n	8007a92 <xTaskCheckForTimeOut+0x76>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	4b15      	ldr	r3, [pc, #84]	@ (8007aa4 <xTaskCheckForTimeOut+0x88>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d007      	beq.n	8007a66 <xTaskCheckForTimeOut+0x4a>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	693a      	ldr	r2, [r7, #16]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d302      	bcc.n	8007a66 <xTaskCheckForTimeOut+0x4a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007a60:	2301      	movs	r3, #1
 8007a62:	617b      	str	r3, [r7, #20]
 8007a64:	e015      	b.n	8007a92 <xTaskCheckForTimeOut+0x76>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d20b      	bcs.n	8007a88 <xTaskCheckForTimeOut+0x6c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	1ad2      	subs	r2, r2, r3
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f7ff ffb7 	bl	80079f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a82:	2300      	movs	r3, #0
 8007a84:	617b      	str	r3, [r7, #20]
 8007a86:	e004      	b.n	8007a92 <xTaskCheckForTimeOut+0x76>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8007a92:	f000 fe8f 	bl	80087b4 <vPortExitCritical>

	return xReturn;
 8007a96:	697b      	ldr	r3, [r7, #20]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3718      	adds	r7, #24
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	24001060 	.word	0x24001060
 8007aa4:	24001074 	.word	0x24001074

08007aa8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007aac:	4b03      	ldr	r3, [pc, #12]	@ (8007abc <vTaskMissedYield+0x14>)
 8007aae:	2201      	movs	r2, #1
 8007ab0:	601a      	str	r2, [r3, #0]
}
 8007ab2:	bf00      	nop
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr
 8007abc:	24001070 	.word	0x24001070

08007ac0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ac8:	f000 f852 	bl	8007b70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007acc:	4b06      	ldr	r3, [pc, #24]	@ (8007ae8 <prvIdleTask+0x28>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d9f9      	bls.n	8007ac8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007ad4:	4b05      	ldr	r3, [pc, #20]	@ (8007aec <prvIdleTask+0x2c>)
 8007ad6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ada:	601a      	str	r2, [r3, #0]
 8007adc:	f3bf 8f4f 	dsb	sy
 8007ae0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007ae4:	e7f0      	b.n	8007ac8 <prvIdleTask+0x8>
 8007ae6:	bf00      	nop
 8007ae8:	24000b8c 	.word	0x24000b8c
 8007aec:	e000ed04 	.word	0xe000ed04

08007af0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007af6:	2300      	movs	r3, #0
 8007af8:	607b      	str	r3, [r7, #4]
 8007afa:	e00c      	b.n	8007b16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	4613      	mov	r3, r2
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	4413      	add	r3, r2
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	4a12      	ldr	r2, [pc, #72]	@ (8007b50 <prvInitialiseTaskLists+0x60>)
 8007b08:	4413      	add	r3, r2
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7fe fb7c 	bl	8006208 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	3301      	adds	r3, #1
 8007b14:	607b      	str	r3, [r7, #4]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2b37      	cmp	r3, #55	@ 0x37
 8007b1a:	d9ef      	bls.n	8007afc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007b1c:	480d      	ldr	r0, [pc, #52]	@ (8007b54 <prvInitialiseTaskLists+0x64>)
 8007b1e:	f7fe fb73 	bl	8006208 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007b22:	480d      	ldr	r0, [pc, #52]	@ (8007b58 <prvInitialiseTaskLists+0x68>)
 8007b24:	f7fe fb70 	bl	8006208 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007b28:	480c      	ldr	r0, [pc, #48]	@ (8007b5c <prvInitialiseTaskLists+0x6c>)
 8007b2a:	f7fe fb6d 	bl	8006208 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007b2e:	480c      	ldr	r0, [pc, #48]	@ (8007b60 <prvInitialiseTaskLists+0x70>)
 8007b30:	f7fe fb6a 	bl	8006208 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b34:	480b      	ldr	r0, [pc, #44]	@ (8007b64 <prvInitialiseTaskLists+0x74>)
 8007b36:	f7fe fb67 	bl	8006208 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8007b68 <prvInitialiseTaskLists+0x78>)
 8007b3c:	4a05      	ldr	r2, [pc, #20]	@ (8007b54 <prvInitialiseTaskLists+0x64>)
 8007b3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b40:	4b0a      	ldr	r3, [pc, #40]	@ (8007b6c <prvInitialiseTaskLists+0x7c>)
 8007b42:	4a05      	ldr	r2, [pc, #20]	@ (8007b58 <prvInitialiseTaskLists+0x68>)
 8007b44:	601a      	str	r2, [r3, #0]
}
 8007b46:	bf00      	nop
 8007b48:	3708      	adds	r7, #8
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	24000b8c 	.word	0x24000b8c
 8007b54:	24000fec 	.word	0x24000fec
 8007b58:	24001000 	.word	0x24001000
 8007b5c:	2400101c 	.word	0x2400101c
 8007b60:	24001030 	.word	0x24001030
 8007b64:	24001048 	.word	0x24001048
 8007b68:	24001014 	.word	0x24001014
 8007b6c:	24001018 	.word	0x24001018

08007b70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b76:	e019      	b.n	8007bac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b78:	f000 fdfa 	bl	8008770 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b7c:	4b10      	ldr	r3, [pc, #64]	@ (8007bc0 <prvCheckTasksWaitingTermination+0x50>)
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	3304      	adds	r3, #4
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f7fe fbc7 	bl	800631c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8007bc4 <prvCheckTasksWaitingTermination+0x54>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	3b01      	subs	r3, #1
 8007b94:	4a0b      	ldr	r2, [pc, #44]	@ (8007bc4 <prvCheckTasksWaitingTermination+0x54>)
 8007b96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b98:	4b0b      	ldr	r3, [pc, #44]	@ (8007bc8 <prvCheckTasksWaitingTermination+0x58>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	3b01      	subs	r3, #1
 8007b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8007bc8 <prvCheckTasksWaitingTermination+0x58>)
 8007ba0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007ba2:	f000 fe07 	bl	80087b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 f810 	bl	8007bcc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007bac:	4b06      	ldr	r3, [pc, #24]	@ (8007bc8 <prvCheckTasksWaitingTermination+0x58>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d1e1      	bne.n	8007b78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007bb4:	bf00      	nop
 8007bb6:	bf00      	nop
 8007bb8:	3708      	adds	r7, #8
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	24001030 	.word	0x24001030
 8007bc4:	2400105c 	.word	0x2400105c
 8007bc8:	24001044 	.word	0x24001044

08007bcc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	3354      	adds	r3, #84	@ 0x54
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f00e fdc7 	bl	801676c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d108      	bne.n	8007bfa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bec:	4618      	mov	r0, r3
 8007bee:	f000 ff37 	bl	8008a60 <vPortFree>
				vPortFree( pxTCB );
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 ff34 	bl	8008a60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007bf8:	e007      	b.n	8007c0a <prvDeleteTCB+0x3e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d102      	bne.n	8007c0a <prvDeleteTCB+0x3e>
				vPortFree( pxTCB );
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 ff2b 	bl	8008a60 <vPortFree>
	}
 8007c0a:	bf00      	nop
 8007c0c:	3708      	adds	r7, #8
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
	...

08007c14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8007c4c <prvResetNextTaskUnblockTime+0x38>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d104      	bne.n	8007c2e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c24:	4b0a      	ldr	r3, [pc, #40]	@ (8007c50 <prvResetNextTaskUnblockTime+0x3c>)
 8007c26:	f04f 32ff 	mov.w	r2, #4294967295
 8007c2a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007c2c:	e008      	b.n	8007c40 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c2e:	4b07      	ldr	r3, [pc, #28]	@ (8007c4c <prvResetNextTaskUnblockTime+0x38>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	4a04      	ldr	r2, [pc, #16]	@ (8007c50 <prvResetNextTaskUnblockTime+0x3c>)
 8007c3e:	6013      	str	r3, [r2, #0]
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr
 8007c4c:	24001014 	.word	0x24001014
 8007c50:	2400107c 	.word	0x2400107c

08007c54 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007c5a:	4b05      	ldr	r3, [pc, #20]	@ (8007c70 <xTaskGetCurrentTaskHandle+0x1c>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007c60:	687b      	ldr	r3, [r7, #4]
	}
 8007c62:	4618      	mov	r0, r3
 8007c64:	370c      	adds	r7, #12
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr
 8007c6e:	bf00      	nop
 8007c70:	24000b88 	.word	0x24000b88

08007c74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8007ca8 <xTaskGetSchedulerState+0x34>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d102      	bne.n	8007c88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c82:	2301      	movs	r3, #1
 8007c84:	607b      	str	r3, [r7, #4]
 8007c86:	e008      	b.n	8007c9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c88:	4b08      	ldr	r3, [pc, #32]	@ (8007cac <xTaskGetSchedulerState+0x38>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d102      	bne.n	8007c96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c90:	2302      	movs	r3, #2
 8007c92:	607b      	str	r3, [r7, #4]
 8007c94:	e001      	b.n	8007c9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c96:	2300      	movs	r3, #0
 8007c98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c9a:	687b      	ldr	r3, [r7, #4]
	}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr
 8007ca8:	24001068 	.word	0x24001068
 8007cac:	24001084 	.word	0x24001084

08007cb0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d051      	beq.n	8007d6a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cca:	4b2a      	ldr	r3, [pc, #168]	@ (8007d74 <xTaskPriorityInherit+0xc4>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d241      	bcs.n	8007d58 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	699b      	ldr	r3, [r3, #24]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	db06      	blt.n	8007cea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cdc:	4b25      	ldr	r3, [pc, #148]	@ (8007d74 <xTaskPriorityInherit+0xc4>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	6959      	ldr	r1, [r3, #20]
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	4413      	add	r3, r2
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	4a1f      	ldr	r2, [pc, #124]	@ (8007d78 <xTaskPriorityInherit+0xc8>)
 8007cfc:	4413      	add	r3, r2
 8007cfe:	4299      	cmp	r1, r3
 8007d00:	d122      	bne.n	8007d48 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	3304      	adds	r3, #4
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7fe fb08 	bl	800631c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007d0c:	4b19      	ldr	r3, [pc, #100]	@ (8007d74 <xTaskPriorityInherit+0xc4>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d1a:	4b18      	ldr	r3, [pc, #96]	@ (8007d7c <xTaskPriorityInherit+0xcc>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d903      	bls.n	8007d2a <xTaskPriorityInherit+0x7a>
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d26:	4a15      	ldr	r2, [pc, #84]	@ (8007d7c <xTaskPriorityInherit+0xcc>)
 8007d28:	6013      	str	r3, [r2, #0]
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d2e:	4613      	mov	r3, r2
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	4413      	add	r3, r2
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	4a10      	ldr	r2, [pc, #64]	@ (8007d78 <xTaskPriorityInherit+0xc8>)
 8007d38:	441a      	add	r2, r3
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	3304      	adds	r3, #4
 8007d3e:	4619      	mov	r1, r3
 8007d40:	4610      	mov	r0, r2
 8007d42:	f7fe fa8e 	bl	8006262 <vListInsertEnd>
 8007d46:	e004      	b.n	8007d52 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007d48:	4b0a      	ldr	r3, [pc, #40]	@ (8007d74 <xTaskPriorityInherit+0xc4>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007d52:	2301      	movs	r3, #1
 8007d54:	60fb      	str	r3, [r7, #12]
 8007d56:	e008      	b.n	8007d6a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007d5c:	4b05      	ldr	r3, [pc, #20]	@ (8007d74 <xTaskPriorityInherit+0xc4>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d201      	bcs.n	8007d6a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007d66:	2301      	movs	r3, #1
 8007d68:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
	}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3710      	adds	r7, #16
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	24000b88 	.word	0x24000b88
 8007d78:	24000b8c 	.word	0x24000b8c
 8007d7c:	24001064 	.word	0x24001064

08007d80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d039      	beq.n	8007e0a <xTaskPriorityDisinherit+0x8a>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007d96:	4b1f      	ldr	r3, [pc, #124]	@ (8007e14 <xTaskPriorityDisinherit+0x94>)
 8007d98:	681b      	ldr	r3, [r3, #0]
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d9e:	1e5a      	subs	r2, r3, #1
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d02c      	beq.n	8007e0a <xTaskPriorityDisinherit+0x8a>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d128      	bne.n	8007e0a <xTaskPriorityDisinherit+0x8a>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	3304      	adds	r3, #4
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7fe faad 	bl	800631c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dce:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dda:	4b0f      	ldr	r3, [pc, #60]	@ (8007e18 <xTaskPriorityDisinherit+0x98>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d903      	bls.n	8007dea <xTaskPriorityDisinherit+0x6a>
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007de6:	4a0c      	ldr	r2, [pc, #48]	@ (8007e18 <xTaskPriorityDisinherit+0x98>)
 8007de8:	6013      	str	r3, [r2, #0]
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dee:	4613      	mov	r3, r2
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	4413      	add	r3, r2
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	4a09      	ldr	r2, [pc, #36]	@ (8007e1c <xTaskPriorityDisinherit+0x9c>)
 8007df8:	441a      	add	r2, r3
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	3304      	adds	r3, #4
 8007dfe:	4619      	mov	r1, r3
 8007e00:	4610      	mov	r0, r2
 8007e02:	f7fe fa2e 	bl	8006262 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007e06:	2301      	movs	r3, #1
 8007e08:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
	}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3710      	adds	r7, #16
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	24000b88 	.word	0x24000b88
 8007e18:	24001064 	.word	0x24001064
 8007e1c:	24000b8c 	.word	0x24000b8c

08007e20 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b086      	sub	sp, #24
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d04d      	beq.n	8007ed4 <vTaskPriorityDisinheritAfterTimeout+0xb4>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e3c:	683a      	ldr	r2, [r7, #0]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d902      	bls.n	8007e48 <vTaskPriorityDisinheritAfterTimeout+0x28>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	617b      	str	r3, [r7, #20]
 8007e46:	e002      	b.n	8007e4e <vTaskPriorityDisinheritAfterTimeout+0x2e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e4c:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e52:	697a      	ldr	r2, [r7, #20]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d03d      	beq.n	8007ed4 <vTaskPriorityDisinheritAfterTimeout+0xb4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d138      	bne.n	8007ed4 <vTaskPriorityDisinheritAfterTimeout+0xb4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007e62:	4b1e      	ldr	r3, [pc, #120]	@ (8007edc <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 8007e64:	681b      	ldr	r3, [r3, #0]

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e6a:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	697a      	ldr	r2, [r7, #20]
 8007e70:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	699b      	ldr	r3, [r3, #24]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	db04      	blt.n	8007e84 <vTaskPriorityDisinheritAfterTimeout+0x64>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	6959      	ldr	r1, [r3, #20]
 8007e88:	68ba      	ldr	r2, [r7, #8]
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	4413      	add	r3, r2
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	4a13      	ldr	r2, [pc, #76]	@ (8007ee0 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 8007e94:	4413      	add	r3, r2
 8007e96:	4299      	cmp	r1, r3
 8007e98:	d11c      	bne.n	8007ed4 <vTaskPriorityDisinheritAfterTimeout+0xb4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	3304      	adds	r3, #4
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7fe fa3c 	bl	800631c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8007ee4 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d903      	bls.n	8007eb8 <vTaskPriorityDisinheritAfterTimeout+0x98>
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eb4:	4a0b      	ldr	r2, [pc, #44]	@ (8007ee4 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 8007eb6:	6013      	str	r3, [r2, #0]
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ebc:	4613      	mov	r3, r2
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	4413      	add	r3, r2
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	4a06      	ldr	r2, [pc, #24]	@ (8007ee0 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 8007ec6:	441a      	add	r2, r3
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	3304      	adds	r3, #4
 8007ecc:	4619      	mov	r1, r3
 8007ece:	4610      	mov	r0, r2
 8007ed0:	f7fe f9c7 	bl	8006262 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007ed4:	bf00      	nop
 8007ed6:	3718      	adds	r7, #24
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	24000b88 	.word	0x24000b88
 8007ee0:	24000b8c 	.word	0x24000b8c
 8007ee4:	24001064 	.word	0x24001064

08007ee8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007ee8:	b480      	push	{r7}
 8007eea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007eec:	4b07      	ldr	r3, [pc, #28]	@ (8007f0c <pvTaskIncrementMutexHeldCount+0x24>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d004      	beq.n	8007efe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007ef4:	4b05      	ldr	r3, [pc, #20]	@ (8007f0c <pvTaskIncrementMutexHeldCount+0x24>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007efa:	3201      	adds	r2, #1
 8007efc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007efe:	4b03      	ldr	r3, [pc, #12]	@ (8007f0c <pvTaskIncrementMutexHeldCount+0x24>)
 8007f00:	681b      	ldr	r3, [r3, #0]
	}
 8007f02:	4618      	mov	r0, r3
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr
 8007f0c:	24000b88 	.word	0x24000b88

08007f10 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007f1a:	4b21      	ldr	r3, [pc, #132]	@ (8007fa0 <prvAddCurrentTaskToDelayedList+0x90>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f20:	4b20      	ldr	r3, [pc, #128]	@ (8007fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	3304      	adds	r3, #4
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7fe f9f8 	bl	800631c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f32:	d10a      	bne.n	8007f4a <prvAddCurrentTaskToDelayedList+0x3a>
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d007      	beq.n	8007f4a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8007fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	3304      	adds	r3, #4
 8007f40:	4619      	mov	r1, r3
 8007f42:	4819      	ldr	r0, [pc, #100]	@ (8007fa8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007f44:	f7fe f98d 	bl	8006262 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007f48:	e026      	b.n	8007f98 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	4413      	add	r3, r2
 8007f50:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007f52:	4b14      	ldr	r3, [pc, #80]	@ (8007fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68ba      	ldr	r2, [r7, #8]
 8007f58:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d209      	bcs.n	8007f76 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f62:	4b12      	ldr	r3, [pc, #72]	@ (8007fac <prvAddCurrentTaskToDelayedList+0x9c>)
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	4b0f      	ldr	r3, [pc, #60]	@ (8007fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	3304      	adds	r3, #4
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	4610      	mov	r0, r2
 8007f70:	f7fe f99b 	bl	80062aa <vListInsert>
}
 8007f74:	e010      	b.n	8007f98 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f76:	4b0e      	ldr	r3, [pc, #56]	@ (8007fb0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8007fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	3304      	adds	r3, #4
 8007f80:	4619      	mov	r1, r3
 8007f82:	4610      	mov	r0, r2
 8007f84:	f7fe f991 	bl	80062aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007f88:	4b0a      	ldr	r3, [pc, #40]	@ (8007fb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d202      	bcs.n	8007f98 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007f92:	4a08      	ldr	r2, [pc, #32]	@ (8007fb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	6013      	str	r3, [r2, #0]
}
 8007f98:	bf00      	nop
 8007f9a:	3710      	adds	r7, #16
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}
 8007fa0:	24001060 	.word	0x24001060
 8007fa4:	24000b88 	.word	0x24000b88
 8007fa8:	24001048 	.word	0x24001048
 8007fac:	24001018 	.word	0x24001018
 8007fb0:	24001014 	.word	0x24001014
 8007fb4:	2400107c 	.word	0x2400107c

08007fb8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b088      	sub	sp, #32
 8007fbc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007fc2:	f000 faab 	bl	800851c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007fc6:	4b15      	ldr	r3, [pc, #84]	@ (800801c <xTimerCreateTimerTask+0x64>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d020      	beq.n	8008010 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007fd6:	463a      	mov	r2, r7
 8007fd8:	1d39      	adds	r1, r7, #4
 8007fda:	f107 0308 	add.w	r3, r7, #8
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7fe f8f8 	bl	80061d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007fe4:	6839      	ldr	r1, [r7, #0]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	68ba      	ldr	r2, [r7, #8]
 8007fea:	9202      	str	r2, [sp, #8]
 8007fec:	9301      	str	r3, [sp, #4]
 8007fee:	2302      	movs	r3, #2
 8007ff0:	9300      	str	r3, [sp, #0]
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	460a      	mov	r2, r1
 8007ff6:	490a      	ldr	r1, [pc, #40]	@ (8008020 <xTimerCreateTimerTask+0x68>)
 8007ff8:	480a      	ldr	r0, [pc, #40]	@ (8008024 <xTimerCreateTimerTask+0x6c>)
 8007ffa:	f7ff f8a5 	bl	8007148 <xTaskCreateStatic>
 8007ffe:	4603      	mov	r3, r0
 8008000:	4a09      	ldr	r2, [pc, #36]	@ (8008028 <xTimerCreateTimerTask+0x70>)
 8008002:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008004:	4b08      	ldr	r3, [pc, #32]	@ (8008028 <xTimerCreateTimerTask+0x70>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d001      	beq.n	8008010 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800800c:	2301      	movs	r3, #1
 800800e:	60fb      	str	r3, [r7, #12]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
 8008010:	68fb      	ldr	r3, [r7, #12]
}
 8008012:	4618      	mov	r0, r3
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	240010b8 	.word	0x240010b8
 8008020:	080175cc 	.word	0x080175cc
 8008024:	0800812d 	.word	0x0800812d
 8008028:	240010bc 	.word	0x240010bc

0800802c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b08a      	sub	sp, #40	@ 0x28
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	607a      	str	r2, [r7, #4]
 8008038:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800803a:	2300      	movs	r3, #0
 800803c:	627b      	str	r3, [r7, #36]	@ 0x24

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800803e:	4b1a      	ldr	r3, [pc, #104]	@ (80080a8 <xTimerGenericCommand+0x7c>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d02a      	beq.n	800809c <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	2b05      	cmp	r3, #5
 8008056:	dc18      	bgt.n	800808a <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008058:	f7ff fe0c 	bl	8007c74 <xTaskGetSchedulerState>
 800805c:	4603      	mov	r3, r0
 800805e:	2b02      	cmp	r3, #2
 8008060:	d109      	bne.n	8008076 <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008062:	4b11      	ldr	r3, [pc, #68]	@ (80080a8 <xTimerGenericCommand+0x7c>)
 8008064:	6818      	ldr	r0, [r3, #0]
 8008066:	f107 0114 	add.w	r1, r7, #20
 800806a:	2300      	movs	r3, #0
 800806c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800806e:	f7fe fb21 	bl	80066b4 <xQueueGenericSend>
 8008072:	6278      	str	r0, [r7, #36]	@ 0x24
 8008074:	e012      	b.n	800809c <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008076:	4b0c      	ldr	r3, [pc, #48]	@ (80080a8 <xTimerGenericCommand+0x7c>)
 8008078:	6818      	ldr	r0, [r3, #0]
 800807a:	f107 0114 	add.w	r1, r7, #20
 800807e:	2300      	movs	r3, #0
 8008080:	2200      	movs	r2, #0
 8008082:	f7fe fb17 	bl	80066b4 <xQueueGenericSend>
 8008086:	6278      	str	r0, [r7, #36]	@ 0x24
 8008088:	e008      	b.n	800809c <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800808a:	4b07      	ldr	r3, [pc, #28]	@ (80080a8 <xTimerGenericCommand+0x7c>)
 800808c:	6818      	ldr	r0, [r3, #0]
 800808e:	f107 0114 	add.w	r1, r7, #20
 8008092:	2300      	movs	r3, #0
 8008094:	683a      	ldr	r2, [r7, #0]
 8008096:	f7fe fbcb 	bl	8006830 <xQueueGenericSendFromISR>
 800809a:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800809c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3728      	adds	r7, #40	@ 0x28
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	240010b8 	.word	0x240010b8

080080ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b086      	sub	sp, #24
 80080b0:	af02      	add	r7, sp, #8
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080b6:	4b1c      	ldr	r3, [pc, #112]	@ (8008128 <prvProcessExpiredTimer+0x7c>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	3304      	adds	r3, #4
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7fe f929 	bl	800631c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80080d0:	f003 0304 	and.w	r3, r3, #4
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d015      	beq.n	8008104 <prvProcessExpiredTimer+0x58>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	699a      	ldr	r2, [r3, #24]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	18d1      	adds	r1, r2, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	683a      	ldr	r2, [r7, #0]
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f000 f8c7 	bl	8008278 <prvInsertTimerInActiveList>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d012      	beq.n	8008116 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80080f0:	2300      	movs	r3, #0
 80080f2:	9300      	str	r3, [sp, #0]
 80080f4:	2300      	movs	r3, #0
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	2100      	movs	r1, #0
 80080fa:	68f8      	ldr	r0, [r7, #12]
 80080fc:	f7ff ff96 	bl	800802c <xTimerGenericCommand>
 8008100:	60b8      	str	r0, [r7, #8]
 8008102:	e008      	b.n	8008116 <prvProcessExpiredTimer+0x6a>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800810a:	f023 0301 	bic.w	r3, r3, #1
 800810e:	b2da      	uxtb	r2, r3
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	6a1b      	ldr	r3, [r3, #32]
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	4798      	blx	r3
}
 800811e:	bf00      	nop
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	240010b0 	.word	0x240010b0

0800812c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008134:	f107 0308 	add.w	r3, r7, #8
 8008138:	4618      	mov	r0, r3
 800813a:	f000 f859 	bl	80081f0 <prvGetNextExpireTime>
 800813e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	4619      	mov	r1, r3
 8008144:	68f8      	ldr	r0, [r7, #12]
 8008146:	f000 f805 	bl	8008154 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800814a:	f000 f8d7 	bl	80082fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800814e:	bf00      	nop
 8008150:	e7f0      	b.n	8008134 <prvTimerTask+0x8>
	...

08008154 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800815e:	f7ff f9fb 	bl	8007558 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008162:	f107 0308 	add.w	r3, r7, #8
 8008166:	4618      	mov	r0, r3
 8008168:	f000 f866 	bl	8008238 <prvSampleTimeNow>
 800816c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d130      	bne.n	80081d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d10a      	bne.n	8008190 <prvProcessTimerOrBlockTask+0x3c>
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	429a      	cmp	r2, r3
 8008180:	d806      	bhi.n	8008190 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008182:	f7ff f9f7 	bl	8007574 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008186:	68f9      	ldr	r1, [r7, #12]
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f7ff ff8f 	bl	80080ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800818e:	e024      	b.n	80081da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d008      	beq.n	80081a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008196:	4b13      	ldr	r3, [pc, #76]	@ (80081e4 <prvProcessTimerOrBlockTask+0x90>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d101      	bne.n	80081a4 <prvProcessTimerOrBlockTask+0x50>
 80081a0:	2301      	movs	r3, #1
 80081a2:	e000      	b.n	80081a6 <prvProcessTimerOrBlockTask+0x52>
 80081a4:	2300      	movs	r3, #0
 80081a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80081a8:	4b0f      	ldr	r3, [pc, #60]	@ (80081e8 <prvProcessTimerOrBlockTask+0x94>)
 80081aa:	6818      	ldr	r0, [r3, #0]
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	683a      	ldr	r2, [r7, #0]
 80081b4:	4619      	mov	r1, r3
 80081b6:	f7fe ff93 	bl	80070e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80081ba:	f7ff f9db 	bl	8007574 <xTaskResumeAll>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d10a      	bne.n	80081da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80081c4:	4b09      	ldr	r3, [pc, #36]	@ (80081ec <prvProcessTimerOrBlockTask+0x98>)
 80081c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081ca:	601a      	str	r2, [r3, #0]
 80081cc:	f3bf 8f4f 	dsb	sy
 80081d0:	f3bf 8f6f 	isb	sy
}
 80081d4:	e001      	b.n	80081da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80081d6:	f7ff f9cd 	bl	8007574 <xTaskResumeAll>
}
 80081da:	bf00      	nop
 80081dc:	3710      	adds	r7, #16
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop
 80081e4:	240010b4 	.word	0x240010b4
 80081e8:	240010b8 	.word	0x240010b8
 80081ec:	e000ed04 	.word	0xe000ed04

080081f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80081f8:	4b0e      	ldr	r3, [pc, #56]	@ (8008234 <prvGetNextExpireTime+0x44>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d101      	bne.n	8008206 <prvGetNextExpireTime+0x16>
 8008202:	2201      	movs	r2, #1
 8008204:	e000      	b.n	8008208 <prvGetNextExpireTime+0x18>
 8008206:	2200      	movs	r2, #0
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d105      	bne.n	8008220 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008214:	4b07      	ldr	r3, [pc, #28]	@ (8008234 <prvGetNextExpireTime+0x44>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	60fb      	str	r3, [r7, #12]
 800821e:	e001      	b.n	8008224 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008220:	2300      	movs	r3, #0
 8008222:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008224:	68fb      	ldr	r3, [r7, #12]
}
 8008226:	4618      	mov	r0, r3
 8008228:	3714      	adds	r7, #20
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr
 8008232:	bf00      	nop
 8008234:	240010b0 	.word	0x240010b0

08008238 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008240:	f7ff fa28 	bl	8007694 <xTaskGetTickCount>
 8008244:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008246:	4b0b      	ldr	r3, [pc, #44]	@ (8008274 <prvSampleTimeNow+0x3c>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	68fa      	ldr	r2, [r7, #12]
 800824c:	429a      	cmp	r2, r3
 800824e:	d205      	bcs.n	800825c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008250:	f000 f90e 	bl	8008470 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	601a      	str	r2, [r3, #0]
 800825a:	e002      	b.n	8008262 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008262:	4a04      	ldr	r2, [pc, #16]	@ (8008274 <prvSampleTimeNow+0x3c>)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008268:	68fb      	ldr	r3, [r7, #12]
}
 800826a:	4618      	mov	r0, r3
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	240010c0 	.word	0x240010c0

08008278 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b086      	sub	sp, #24
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	607a      	str	r2, [r7, #4]
 8008284:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008286:	2300      	movs	r3, #0
 8008288:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	68ba      	ldr	r2, [r7, #8]
 800828e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	68fa      	ldr	r2, [r7, #12]
 8008294:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008296:	68ba      	ldr	r2, [r7, #8]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	429a      	cmp	r2, r3
 800829c:	d812      	bhi.n	80082c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	1ad2      	subs	r2, r2, r3
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	699b      	ldr	r3, [r3, #24]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d302      	bcc.n	80082b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80082ac:	2301      	movs	r3, #1
 80082ae:	617b      	str	r3, [r7, #20]
 80082b0:	e01b      	b.n	80082ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80082b2:	4b10      	ldr	r3, [pc, #64]	@ (80082f4 <prvInsertTimerInActiveList+0x7c>)
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	3304      	adds	r3, #4
 80082ba:	4619      	mov	r1, r3
 80082bc:	4610      	mov	r0, r2
 80082be:	f7fd fff4 	bl	80062aa <vListInsert>
 80082c2:	e012      	b.n	80082ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d206      	bcs.n	80082da <prvInsertTimerInActiveList+0x62>
 80082cc:	68ba      	ldr	r2, [r7, #8]
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d302      	bcc.n	80082da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80082d4:	2301      	movs	r3, #1
 80082d6:	617b      	str	r3, [r7, #20]
 80082d8:	e007      	b.n	80082ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80082da:	4b07      	ldr	r3, [pc, #28]	@ (80082f8 <prvInsertTimerInActiveList+0x80>)
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	3304      	adds	r3, #4
 80082e2:	4619      	mov	r1, r3
 80082e4:	4610      	mov	r0, r2
 80082e6:	f7fd ffe0 	bl	80062aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 80082ea:	697b      	ldr	r3, [r7, #20]
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3718      	adds	r7, #24
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	240010b4 	.word	0x240010b4
 80082f8:	240010b0 	.word	0x240010b0

080082fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b08c      	sub	sp, #48	@ 0x30
 8008300:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008302:	e0a2      	b.n	800844a <prvProcessReceivedCommands+0x14e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	2b00      	cmp	r3, #0
 8008308:	da0b      	bge.n	8008322 <prvProcessReceivedCommands+0x26>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800830a:	f107 0308 	add.w	r3, r7, #8
 800830e:	3304      	adds	r3, #4
 8008310:	627b      	str	r3, [r7, #36]	@ 0x24
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008318:	6850      	ldr	r0, [r2, #4]
 800831a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800831c:	6892      	ldr	r2, [r2, #8]
 800831e:	4611      	mov	r1, r2
 8008320:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	2b00      	cmp	r3, #0
 8008326:	f2c0 8090 	blt.w	800844a <prvProcessReceivedCommands+0x14e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800832e:	6a3b      	ldr	r3, [r7, #32]
 8008330:	695b      	ldr	r3, [r3, #20]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d004      	beq.n	8008340 <prvProcessReceivedCommands+0x44>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008336:	6a3b      	ldr	r3, [r7, #32]
 8008338:	3304      	adds	r3, #4
 800833a:	4618      	mov	r0, r3
 800833c:	f7fd ffee 	bl	800631c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008340:	1d3b      	adds	r3, r7, #4
 8008342:	4618      	mov	r0, r3
 8008344:	f7ff ff78 	bl	8008238 <prvSampleTimeNow>
 8008348:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	2b09      	cmp	r3, #9
 800834e:	d879      	bhi.n	8008444 <prvProcessReceivedCommands+0x148>
 8008350:	a201      	add	r2, pc, #4	@ (adr r2, 8008358 <prvProcessReceivedCommands+0x5c>)
 8008352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008356:	bf00      	nop
 8008358:	08008381 	.word	0x08008381
 800835c:	08008381 	.word	0x08008381
 8008360:	08008381 	.word	0x08008381
 8008364:	080083db 	.word	0x080083db
 8008368:	080083ef 	.word	0x080083ef
 800836c:	0800841b 	.word	0x0800841b
 8008370:	08008381 	.word	0x08008381
 8008374:	08008381 	.word	0x08008381
 8008378:	080083db 	.word	0x080083db
 800837c:	080083ef 	.word	0x080083ef
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008380:	6a3b      	ldr	r3, [r7, #32]
 8008382:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008386:	f043 0301 	orr.w	r3, r3, #1
 800838a:	b2da      	uxtb	r2, r3
 800838c:	6a3b      	ldr	r3, [r7, #32]
 800838e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	6a3b      	ldr	r3, [r7, #32]
 8008396:	699b      	ldr	r3, [r3, #24]
 8008398:	18d1      	adds	r1, r2, r3
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	69fa      	ldr	r2, [r7, #28]
 800839e:	6a38      	ldr	r0, [r7, #32]
 80083a0:	f7ff ff6a 	bl	8008278 <prvInsertTimerInActiveList>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d04e      	beq.n	8008448 <prvProcessReceivedCommands+0x14c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80083aa:	6a3b      	ldr	r3, [r7, #32]
 80083ac:	6a1b      	ldr	r3, [r3, #32]
 80083ae:	6a38      	ldr	r0, [r7, #32]
 80083b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80083b2:	6a3b      	ldr	r3, [r7, #32]
 80083b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083b8:	f003 0304 	and.w	r3, r3, #4
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d043      	beq.n	8008448 <prvProcessReceivedCommands+0x14c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80083c0:	68fa      	ldr	r2, [r7, #12]
 80083c2:	6a3b      	ldr	r3, [r7, #32]
 80083c4:	699b      	ldr	r3, [r3, #24]
 80083c6:	441a      	add	r2, r3
 80083c8:	2300      	movs	r3, #0
 80083ca:	9300      	str	r3, [sp, #0]
 80083cc:	2300      	movs	r3, #0
 80083ce:	2100      	movs	r1, #0
 80083d0:	6a38      	ldr	r0, [r7, #32]
 80083d2:	f7ff fe2b 	bl	800802c <xTimerGenericCommand>
 80083d6:	61b8      	str	r0, [r7, #24]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 80083d8:	e036      	b.n	8008448 <prvProcessReceivedCommands+0x14c>

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80083da:	6a3b      	ldr	r3, [r7, #32]
 80083dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083e0:	f023 0301 	bic.w	r3, r3, #1
 80083e4:	b2da      	uxtb	r2, r3
 80083e6:	6a3b      	ldr	r3, [r7, #32]
 80083e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80083ec:	e02d      	b.n	800844a <prvProcessReceivedCommands+0x14e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80083ee:	6a3b      	ldr	r3, [r7, #32]
 80083f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083f4:	f043 0301 	orr.w	r3, r3, #1
 80083f8:	b2da      	uxtb	r2, r3
 80083fa:	6a3b      	ldr	r3, [r7, #32]
 80083fc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	6a3b      	ldr	r3, [r7, #32]
 8008404:	619a      	str	r2, [r3, #24]
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008406:	6a3b      	ldr	r3, [r7, #32]
 8008408:	699a      	ldr	r2, [r3, #24]
 800840a:	69fb      	ldr	r3, [r7, #28]
 800840c:	18d1      	adds	r1, r2, r3
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	69fa      	ldr	r2, [r7, #28]
 8008412:	6a38      	ldr	r0, [r7, #32]
 8008414:	f7ff ff30 	bl	8008278 <prvInsertTimerInActiveList>
					break;
 8008418:	e017      	b.n	800844a <prvProcessReceivedCommands+0x14e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800841a:	6a3b      	ldr	r3, [r7, #32]
 800841c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008420:	f003 0302 	and.w	r3, r3, #2
 8008424:	2b00      	cmp	r3, #0
 8008426:	d103      	bne.n	8008430 <prvProcessReceivedCommands+0x134>
						{
							vPortFree( pxTimer );
 8008428:	6a38      	ldr	r0, [r7, #32]
 800842a:	f000 fb19 	bl	8008a60 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800842e:	e00c      	b.n	800844a <prvProcessReceivedCommands+0x14e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008430:	6a3b      	ldr	r3, [r7, #32]
 8008432:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008436:	f023 0301 	bic.w	r3, r3, #1
 800843a:	b2da      	uxtb	r2, r3
 800843c:	6a3b      	ldr	r3, [r7, #32]
 800843e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008442:	e002      	b.n	800844a <prvProcessReceivedCommands+0x14e>

				default	:
					/* Don't expect to get here. */
					break;
 8008444:	bf00      	nop
 8008446:	e000      	b.n	800844a <prvProcessReceivedCommands+0x14e>
					break;
 8008448:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800844a:	4b08      	ldr	r3, [pc, #32]	@ (800846c <prvProcessReceivedCommands+0x170>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f107 0108 	add.w	r1, r7, #8
 8008452:	2200      	movs	r2, #0
 8008454:	4618      	mov	r0, r3
 8008456:	f7fe fab3 	bl	80069c0 <xQueueReceive>
 800845a:	4603      	mov	r3, r0
 800845c:	2b00      	cmp	r3, #0
 800845e:	f47f af51 	bne.w	8008304 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008462:	bf00      	nop
 8008464:	bf00      	nop
 8008466:	3728      	adds	r7, #40	@ 0x28
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	240010b8 	.word	0x240010b8

08008470 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b088      	sub	sp, #32
 8008474:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008476:	e03a      	b.n	80084ee <prvSwitchTimerLists+0x7e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008478:	4b26      	ldr	r3, [pc, #152]	@ (8008514 <prvSwitchTimerLists+0xa4>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008482:	4b24      	ldr	r3, [pc, #144]	@ (8008514 <prvSwitchTimerLists+0xa4>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	3304      	adds	r3, #4
 8008490:	4618      	mov	r0, r3
 8008492:	f7fd ff43 	bl	800631c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	6a1b      	ldr	r3, [r3, #32]
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084a4:	f003 0304 	and.w	r3, r3, #4
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d020      	beq.n	80084ee <prvSwitchTimerLists+0x7e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	699b      	ldr	r3, [r3, #24]
 80084b0:	693a      	ldr	r2, [r7, #16]
 80084b2:	4413      	add	r3, r2
 80084b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80084b6:	68ba      	ldr	r2, [r7, #8]
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d90e      	bls.n	80084dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	68ba      	ldr	r2, [r7, #8]
 80084c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80084ca:	4b12      	ldr	r3, [pc, #72]	@ (8008514 <prvSwitchTimerLists+0xa4>)
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	3304      	adds	r3, #4
 80084d2:	4619      	mov	r1, r3
 80084d4:	4610      	mov	r0, r2
 80084d6:	f7fd fee8 	bl	80062aa <vListInsert>
 80084da:	e008      	b.n	80084ee <prvSwitchTimerLists+0x7e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80084dc:	2300      	movs	r3, #0
 80084de:	9300      	str	r3, [sp, #0]
 80084e0:	2300      	movs	r3, #0
 80084e2:	693a      	ldr	r2, [r7, #16]
 80084e4:	2100      	movs	r1, #0
 80084e6:	68f8      	ldr	r0, [r7, #12]
 80084e8:	f7ff fda0 	bl	800802c <xTimerGenericCommand>
 80084ec:	6078      	str	r0, [r7, #4]
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80084ee:	4b09      	ldr	r3, [pc, #36]	@ (8008514 <prvSwitchTimerLists+0xa4>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d1bf      	bne.n	8008478 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80084f8:	4b06      	ldr	r3, [pc, #24]	@ (8008514 <prvSwitchTimerLists+0xa4>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80084fe:	4b06      	ldr	r3, [pc, #24]	@ (8008518 <prvSwitchTimerLists+0xa8>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a04      	ldr	r2, [pc, #16]	@ (8008514 <prvSwitchTimerLists+0xa4>)
 8008504:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008506:	4a04      	ldr	r2, [pc, #16]	@ (8008518 <prvSwitchTimerLists+0xa8>)
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	6013      	str	r3, [r2, #0]
}
 800850c:	bf00      	nop
 800850e:	3718      	adds	r7, #24
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}
 8008514:	240010b0 	.word	0x240010b0
 8008518:	240010b4 	.word	0x240010b4

0800851c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b082      	sub	sp, #8
 8008520:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008522:	f000 f925 	bl	8008770 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008526:	4b15      	ldr	r3, [pc, #84]	@ (800857c <prvCheckForValidListAndQueue+0x60>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d120      	bne.n	8008570 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800852e:	4814      	ldr	r0, [pc, #80]	@ (8008580 <prvCheckForValidListAndQueue+0x64>)
 8008530:	f7fd fe6a 	bl	8006208 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008534:	4813      	ldr	r0, [pc, #76]	@ (8008584 <prvCheckForValidListAndQueue+0x68>)
 8008536:	f7fd fe67 	bl	8006208 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800853a:	4b13      	ldr	r3, [pc, #76]	@ (8008588 <prvCheckForValidListAndQueue+0x6c>)
 800853c:	4a10      	ldr	r2, [pc, #64]	@ (8008580 <prvCheckForValidListAndQueue+0x64>)
 800853e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008540:	4b12      	ldr	r3, [pc, #72]	@ (800858c <prvCheckForValidListAndQueue+0x70>)
 8008542:	4a10      	ldr	r2, [pc, #64]	@ (8008584 <prvCheckForValidListAndQueue+0x68>)
 8008544:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008546:	2300      	movs	r3, #0
 8008548:	9300      	str	r3, [sp, #0]
 800854a:	4b11      	ldr	r3, [pc, #68]	@ (8008590 <prvCheckForValidListAndQueue+0x74>)
 800854c:	4a11      	ldr	r2, [pc, #68]	@ (8008594 <prvCheckForValidListAndQueue+0x78>)
 800854e:	2110      	movs	r1, #16
 8008550:	200a      	movs	r0, #10
 8008552:	f7fd ff67 	bl	8006424 <xQueueGenericCreateStatic>
 8008556:	4603      	mov	r3, r0
 8008558:	4a08      	ldr	r2, [pc, #32]	@ (800857c <prvCheckForValidListAndQueue+0x60>)
 800855a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800855c:	4b07      	ldr	r3, [pc, #28]	@ (800857c <prvCheckForValidListAndQueue+0x60>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d005      	beq.n	8008570 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008564:	4b05      	ldr	r3, [pc, #20]	@ (800857c <prvCheckForValidListAndQueue+0x60>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	490b      	ldr	r1, [pc, #44]	@ (8008598 <prvCheckForValidListAndQueue+0x7c>)
 800856a:	4618      	mov	r0, r3
 800856c:	f7fe fd64 	bl	8007038 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008570:	f000 f920 	bl	80087b4 <vPortExitCritical>
}
 8008574:	bf00      	nop
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	240010b8 	.word	0x240010b8
 8008580:	24001088 	.word	0x24001088
 8008584:	2400109c 	.word	0x2400109c
 8008588:	240010b0 	.word	0x240010b0
 800858c:	240010b4 	.word	0x240010b4
 8008590:	24001164 	.word	0x24001164
 8008594:	240010c4 	.word	0x240010c4
 8008598:	080175d4 	.word	0x080175d4

0800859c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800859c:	b480      	push	{r7}
 800859e:	b085      	sub	sp, #20
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	3b04      	subs	r3, #4
 80085ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80085b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	3b04      	subs	r3, #4
 80085ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	f023 0201 	bic.w	r2, r3, #1
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	3b04      	subs	r3, #4
 80085ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80085cc:	4a0c      	ldr	r2, [pc, #48]	@ (8008600 <pxPortInitialiseStack+0x64>)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	3b14      	subs	r3, #20
 80085d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	3b04      	subs	r3, #4
 80085e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f06f 0202 	mvn.w	r2, #2
 80085ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	3b20      	subs	r3, #32
 80085f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80085f2:	68fb      	ldr	r3, [r7, #12]
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3714      	adds	r7, #20
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr
 8008600:	08008605 	.word	0x08008605

08008604 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800860a:	2300      	movs	r3, #0
 800860c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800860e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008612:	f383 8811 	msr	BASEPRI, r3
 8008616:	f3bf 8f6f 	isb	sy
 800861a:	f3bf 8f4f 	dsb	sy
 800861e:	607b      	str	r3, [r7, #4]
}
 8008620:	bf00      	nop

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008622:	bf00      	nop
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d0fc      	beq.n	8008624 <prvTaskExitError+0x20>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800862a:	bf00      	nop
 800862c:	bf00      	nop
 800862e:	370c      	adds	r7, #12
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr
	...

08008640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008640:	4b07      	ldr	r3, [pc, #28]	@ (8008660 <pxCurrentTCBConst2>)
 8008642:	6819      	ldr	r1, [r3, #0]
 8008644:	6808      	ldr	r0, [r1, #0]
 8008646:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800864a:	f380 8809 	msr	PSP, r0
 800864e:	f3bf 8f6f 	isb	sy
 8008652:	f04f 0000 	mov.w	r0, #0
 8008656:	f380 8811 	msr	BASEPRI, r0
 800865a:	4770      	bx	lr
 800865c:	f3af 8000 	nop.w

08008660 <pxCurrentTCBConst2>:
 8008660:	24000b88 	.word	0x24000b88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008664:	bf00      	nop
 8008666:	bf00      	nop

08008668 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008668:	4808      	ldr	r0, [pc, #32]	@ (800868c <prvPortStartFirstTask+0x24>)
 800866a:	6800      	ldr	r0, [r0, #0]
 800866c:	6800      	ldr	r0, [r0, #0]
 800866e:	f380 8808 	msr	MSP, r0
 8008672:	f04f 0000 	mov.w	r0, #0
 8008676:	f380 8814 	msr	CONTROL, r0
 800867a:	b662      	cpsie	i
 800867c:	b661      	cpsie	f
 800867e:	f3bf 8f4f 	dsb	sy
 8008682:	f3bf 8f6f 	isb	sy
 8008686:	df00      	svc	0
 8008688:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800868a:	bf00      	nop
 800868c:	e000ed08 	.word	0xe000ed08

08008690 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b084      	sub	sp, #16
 8008694:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008696:	4b2f      	ldr	r3, [pc, #188]	@ (8008754 <xPortStartScheduler+0xc4>)
 8008698:	681b      	ldr	r3, [r3, #0]
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800869a:	4b2e      	ldr	r3, [pc, #184]	@ (8008754 <xPortStartScheduler+0xc4>)
 800869c:	681b      	ldr	r3, [r3, #0]

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800869e:	4b2e      	ldr	r3, [pc, #184]	@ (8008758 <xPortStartScheduler+0xc8>)
 80086a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	22ff      	movs	r2, #255	@ 0xff
 80086ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80086b8:	79fb      	ldrb	r3, [r7, #7]
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80086c0:	b2da      	uxtb	r2, r3
 80086c2:	4b26      	ldr	r3, [pc, #152]	@ (800875c <xPortStartScheduler+0xcc>)
 80086c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80086c6:	4b26      	ldr	r3, [pc, #152]	@ (8008760 <xPortStartScheduler+0xd0>)
 80086c8:	2207      	movs	r2, #7
 80086ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086cc:	e009      	b.n	80086e2 <xPortStartScheduler+0x52>
		{
			ulMaxPRIGROUPValue--;
 80086ce:	4b24      	ldr	r3, [pc, #144]	@ (8008760 <xPortStartScheduler+0xd0>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	3b01      	subs	r3, #1
 80086d4:	4a22      	ldr	r2, [pc, #136]	@ (8008760 <xPortStartScheduler+0xd0>)
 80086d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80086d8:	79fb      	ldrb	r3, [r7, #7]
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	005b      	lsls	r3, r3, #1
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086e2:	79fb      	ldrb	r3, [r7, #7]
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086ea:	2b80      	cmp	r3, #128	@ 0x80
 80086ec:	d0ef      	beq.n	80086ce <xPortStartScheduler+0x3e>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80086ee:	4b1c      	ldr	r3, [pc, #112]	@ (8008760 <xPortStartScheduler+0xd0>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	021b      	lsls	r3, r3, #8
 80086f4:	4a1a      	ldr	r2, [pc, #104]	@ (8008760 <xPortStartScheduler+0xd0>)
 80086f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80086f8:	4b19      	ldr	r3, [pc, #100]	@ (8008760 <xPortStartScheduler+0xd0>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008700:	4a17      	ldr	r2, [pc, #92]	@ (8008760 <xPortStartScheduler+0xd0>)
 8008702:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	b2da      	uxtb	r2, r3
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800870c:	4b15      	ldr	r3, [pc, #84]	@ (8008764 <xPortStartScheduler+0xd4>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a14      	ldr	r2, [pc, #80]	@ (8008764 <xPortStartScheduler+0xd4>)
 8008712:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008716:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008718:	4b12      	ldr	r3, [pc, #72]	@ (8008764 <xPortStartScheduler+0xd4>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a11      	ldr	r2, [pc, #68]	@ (8008764 <xPortStartScheduler+0xd4>)
 800871e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008722:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008724:	f000 f8ba 	bl	800889c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008728:	4b0f      	ldr	r3, [pc, #60]	@ (8008768 <xPortStartScheduler+0xd8>)
 800872a:	2200      	movs	r2, #0
 800872c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800872e:	f000 f8d9 	bl	80088e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008732:	4b0e      	ldr	r3, [pc, #56]	@ (800876c <xPortStartScheduler+0xdc>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a0d      	ldr	r2, [pc, #52]	@ (800876c <xPortStartScheduler+0xdc>)
 8008738:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800873c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800873e:	f7ff ff93 	bl	8008668 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008742:	f7ff f875 	bl	8007830 <vTaskSwitchContext>
	prvTaskExitError();
 8008746:	f7ff ff5d 	bl	8008604 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}
 8008754:	e000ed00 	.word	0xe000ed00
 8008758:	e000e400 	.word	0xe000e400
 800875c:	240011b4 	.word	0x240011b4
 8008760:	240011b8 	.word	0x240011b8
 8008764:	e000ed20 	.word	0xe000ed20
 8008768:	24000024 	.word	0x24000024
 800876c:	e000ef34 	.word	0xe000ef34

08008770 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
	__asm volatile
 8008776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800877a:	f383 8811 	msr	BASEPRI, r3
 800877e:	f3bf 8f6f 	isb	sy
 8008782:	f3bf 8f4f 	dsb	sy
 8008786:	607b      	str	r3, [r7, #4]
}
 8008788:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800878a:	4b08      	ldr	r3, [pc, #32]	@ (80087ac <vPortEnterCritical+0x3c>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	3301      	adds	r3, #1
 8008790:	4a06      	ldr	r2, [pc, #24]	@ (80087ac <vPortEnterCritical+0x3c>)
 8008792:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008794:	4b05      	ldr	r3, [pc, #20]	@ (80087ac <vPortEnterCritical+0x3c>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2b01      	cmp	r3, #1
 800879a:	d101      	bne.n	80087a0 <vPortEnterCritical+0x30>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800879c:	4b04      	ldr	r3, [pc, #16]	@ (80087b0 <vPortEnterCritical+0x40>)
 800879e:	681b      	ldr	r3, [r3, #0]
	}
}
 80087a0:	bf00      	nop
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr
 80087ac:	24000024 	.word	0x24000024
 80087b0:	e000ed04 	.word	0xe000ed04

080087b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 80087ba:	4b0a      	ldr	r3, [pc, #40]	@ (80087e4 <vPortExitCritical+0x30>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	3b01      	subs	r3, #1
 80087c0:	4a08      	ldr	r2, [pc, #32]	@ (80087e4 <vPortExitCritical+0x30>)
 80087c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80087c4:	4b07      	ldr	r3, [pc, #28]	@ (80087e4 <vPortExitCritical+0x30>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d105      	bne.n	80087d8 <vPortExitCritical+0x24>
 80087cc:	2300      	movs	r3, #0
 80087ce:	607b      	str	r3, [r7, #4]
	__asm volatile
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f383 8811 	msr	BASEPRI, r3
}
 80087d6:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80087d8:	bf00      	nop
 80087da:	370c      	adds	r7, #12
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr
 80087e4:	24000024 	.word	0x24000024
	...

080087f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80087f0:	f3ef 8009 	mrs	r0, PSP
 80087f4:	f3bf 8f6f 	isb	sy
 80087f8:	4b15      	ldr	r3, [pc, #84]	@ (8008850 <pxCurrentTCBConst>)
 80087fa:	681a      	ldr	r2, [r3, #0]
 80087fc:	f01e 0f10 	tst.w	lr, #16
 8008800:	bf08      	it	eq
 8008802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800880a:	6010      	str	r0, [r2, #0]
 800880c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008810:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008814:	f380 8811 	msr	BASEPRI, r0
 8008818:	f3bf 8f4f 	dsb	sy
 800881c:	f3bf 8f6f 	isb	sy
 8008820:	f7ff f806 	bl	8007830 <vTaskSwitchContext>
 8008824:	f04f 0000 	mov.w	r0, #0
 8008828:	f380 8811 	msr	BASEPRI, r0
 800882c:	bc09      	pop	{r0, r3}
 800882e:	6819      	ldr	r1, [r3, #0]
 8008830:	6808      	ldr	r0, [r1, #0]
 8008832:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008836:	f01e 0f10 	tst.w	lr, #16
 800883a:	bf08      	it	eq
 800883c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008840:	f380 8809 	msr	PSP, r0
 8008844:	f3bf 8f6f 	isb	sy
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop
 800884c:	f3af 8000 	nop.w

08008850 <pxCurrentTCBConst>:
 8008850:	24000b88 	.word	0x24000b88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008854:	bf00      	nop
 8008856:	bf00      	nop

08008858 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
	__asm volatile
 800885e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008862:	f383 8811 	msr	BASEPRI, r3
 8008866:	f3bf 8f6f 	isb	sy
 800886a:	f3bf 8f4f 	dsb	sy
 800886e:	607b      	str	r3, [r7, #4]
}
 8008870:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008872:	f7fe ff31 	bl	80076d8 <xTaskIncrementTick>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d003      	beq.n	8008884 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800887c:	4b06      	ldr	r3, [pc, #24]	@ (8008898 <xPortSysTickHandler+0x40>)
 800887e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008882:	601a      	str	r2, [r3, #0]
 8008884:	2300      	movs	r3, #0
 8008886:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	f383 8811 	msr	BASEPRI, r3
}
 800888e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008890:	bf00      	nop
 8008892:	3708      	adds	r7, #8
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	e000ed04 	.word	0xe000ed04

0800889c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800889c:	b480      	push	{r7}
 800889e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80088a0:	4b0b      	ldr	r3, [pc, #44]	@ (80088d0 <vPortSetupTimerInterrupt+0x34>)
 80088a2:	2200      	movs	r2, #0
 80088a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80088a6:	4b0b      	ldr	r3, [pc, #44]	@ (80088d4 <vPortSetupTimerInterrupt+0x38>)
 80088a8:	2200      	movs	r2, #0
 80088aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80088ac:	4b0a      	ldr	r3, [pc, #40]	@ (80088d8 <vPortSetupTimerInterrupt+0x3c>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a0a      	ldr	r2, [pc, #40]	@ (80088dc <vPortSetupTimerInterrupt+0x40>)
 80088b2:	fba2 2303 	umull	r2, r3, r2, r3
 80088b6:	099b      	lsrs	r3, r3, #6
 80088b8:	4a09      	ldr	r2, [pc, #36]	@ (80088e0 <vPortSetupTimerInterrupt+0x44>)
 80088ba:	3b01      	subs	r3, #1
 80088bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80088be:	4b04      	ldr	r3, [pc, #16]	@ (80088d0 <vPortSetupTimerInterrupt+0x34>)
 80088c0:	2207      	movs	r2, #7
 80088c2:	601a      	str	r2, [r3, #0]
}
 80088c4:	bf00      	nop
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	e000e010 	.word	0xe000e010
 80088d4:	e000e018 	.word	0xe000e018
 80088d8:	24000000 	.word	0x24000000
 80088dc:	10624dd3 	.word	0x10624dd3
 80088e0:	e000e014 	.word	0xe000e014

080088e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80088e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80088f4 <vPortEnableVFP+0x10>
 80088e8:	6801      	ldr	r1, [r0, #0]
 80088ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80088ee:	6001      	str	r1, [r0, #0]
 80088f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80088f2:	bf00      	nop
 80088f4:	e000ed88 	.word	0xe000ed88

080088f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80088fe:	f3ef 8305 	mrs	r3, IPSR
 8008902:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2b0f      	cmp	r3, #15
 8008908:	d904      	bls.n	8008914 <vPortValidateInterruptPriority+0x1c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800890a:	4a06      	ldr	r2, [pc, #24]	@ (8008924 <vPortValidateInterruptPriority+0x2c>)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	4413      	add	r3, r2
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	70fb      	strb	r3, [r7, #3]
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008914:	4b04      	ldr	r3, [pc, #16]	@ (8008928 <vPortValidateInterruptPriority+0x30>)
 8008916:	681b      	ldr	r3, [r3, #0]
	}
 8008918:	bf00      	nop
 800891a:	370c      	adds	r7, #12
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr
 8008924:	e000e3f0 	.word	0xe000e3f0
 8008928:	e000ed0c 	.word	0xe000ed0c

0800892c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b086      	sub	sp, #24
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008934:	2300      	movs	r3, #0
 8008936:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8008938:	f7fe fe0e 	bl	8007558 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800893c:	4b42      	ldr	r3, [pc, #264]	@ (8008a48 <pvPortMalloc+0x11c>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d101      	bne.n	8008948 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008944:	f000 f8cc 	bl	8008ae0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008948:	4b40      	ldr	r3, [pc, #256]	@ (8008a4c <pvPortMalloc+0x120>)
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	4013      	ands	r3, r2
 8008950:	2b00      	cmp	r3, #0
 8008952:	d172      	bne.n	8008a3a <pvPortMalloc+0x10e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00d      	beq.n	8008976 <pvPortMalloc+0x4a>
			{
				xWantedSize += xHeapStructSize;
 800895a:	2208      	movs	r2, #8
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	4413      	add	r3, r2
 8008960:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f003 0307 	and.w	r3, r3, #7
 8008968:	2b00      	cmp	r3, #0
 800896a:	d004      	beq.n	8008976 <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f023 0307 	bic.w	r3, r3, #7
 8008972:	3308      	adds	r3, #8
 8008974:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d05e      	beq.n	8008a3a <pvPortMalloc+0x10e>
 800897c:	4b34      	ldr	r3, [pc, #208]	@ (8008a50 <pvPortMalloc+0x124>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	429a      	cmp	r2, r3
 8008984:	d859      	bhi.n	8008a3a <pvPortMalloc+0x10e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008986:	4b33      	ldr	r3, [pc, #204]	@ (8008a54 <pvPortMalloc+0x128>)
 8008988:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800898a:	4b32      	ldr	r3, [pc, #200]	@ (8008a54 <pvPortMalloc+0x128>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008990:	e004      	b.n	800899c <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d903      	bls.n	80089ae <pvPortMalloc+0x82>
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d1f1      	bne.n	8008992 <pvPortMalloc+0x66>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80089ae:	4b26      	ldr	r3, [pc, #152]	@ (8008a48 <pvPortMalloc+0x11c>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	697a      	ldr	r2, [r7, #20]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d040      	beq.n	8008a3a <pvPortMalloc+0x10e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	2208      	movs	r2, #8
 80089be:	4413      	add	r3, r2
 80089c0:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	685a      	ldr	r2, [r3, #4]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	1ad2      	subs	r2, r2, r3
 80089d2:	2308      	movs	r3, #8
 80089d4:	005b      	lsls	r3, r3, #1
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d90f      	bls.n	80089fa <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80089da:	697a      	ldr	r2, [r7, #20]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	4413      	add	r3, r2
 80089e0:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	685a      	ldr	r2, [r3, #4]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	1ad2      	subs	r2, r2, r3
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80089f4:	68b8      	ldr	r0, [r7, #8]
 80089f6:	f000 f8d5 	bl	8008ba4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80089fa:	4b15      	ldr	r3, [pc, #84]	@ (8008a50 <pvPortMalloc+0x124>)
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	1ad3      	subs	r3, r2, r3
 8008a04:	4a12      	ldr	r2, [pc, #72]	@ (8008a50 <pvPortMalloc+0x124>)
 8008a06:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a08:	4b11      	ldr	r3, [pc, #68]	@ (8008a50 <pvPortMalloc+0x124>)
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	4b12      	ldr	r3, [pc, #72]	@ (8008a58 <pvPortMalloc+0x12c>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d203      	bcs.n	8008a1c <pvPortMalloc+0xf0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a14:	4b0e      	ldr	r3, [pc, #56]	@ (8008a50 <pvPortMalloc+0x124>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a0f      	ldr	r2, [pc, #60]	@ (8008a58 <pvPortMalloc+0x12c>)
 8008a1a:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	685a      	ldr	r2, [r3, #4]
 8008a20:	4b0a      	ldr	r3, [pc, #40]	@ (8008a4c <pvPortMalloc+0x120>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	431a      	orrs	r2, r3
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008a30:	4b0a      	ldr	r3, [pc, #40]	@ (8008a5c <pvPortMalloc+0x130>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	3301      	adds	r3, #1
 8008a36:	4a09      	ldr	r2, [pc, #36]	@ (8008a5c <pvPortMalloc+0x130>)
 8008a38:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a3a:	f7fe fd9b 	bl	8007574 <xTaskResumeAll>
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3718      	adds	r7, #24
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	24004dc4 	.word	0x24004dc4
 8008a4c:	24004dd8 	.word	0x24004dd8
 8008a50:	24004dc8 	.word	0x24004dc8
 8008a54:	24004dbc 	.word	0x24004dbc
 8008a58:	24004dcc 	.word	0x24004dcc
 8008a5c:	24004dd0 	.word	0x24004dd0

08008a60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d02c      	beq.n	8008acc <vPortFree+0x6c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008a72:	2308      	movs	r3, #8
 8008a74:	425b      	negs	r3, r3
 8008a76:	68fa      	ldr	r2, [r7, #12]
 8008a78:	4413      	add	r3, r2
 8008a7a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	685a      	ldr	r2, [r3, #4]
 8008a84:	4b13      	ldr	r3, [pc, #76]	@ (8008ad4 <vPortFree+0x74>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4013      	ands	r3, r2
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d01e      	beq.n	8008acc <vPortFree+0x6c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d11a      	bne.n	8008acc <vPortFree+0x6c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	685a      	ldr	r2, [r3, #4]
 8008a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8008ad4 <vPortFree+0x74>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	43db      	mvns	r3, r3
 8008aa0:	401a      	ands	r2, r3
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008aa6:	f7fe fd57 	bl	8007558 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	685a      	ldr	r2, [r3, #4]
 8008aae:	4b0a      	ldr	r3, [pc, #40]	@ (8008ad8 <vPortFree+0x78>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	4a08      	ldr	r2, [pc, #32]	@ (8008ad8 <vPortFree+0x78>)
 8008ab6:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008ab8:	68b8      	ldr	r0, [r7, #8]
 8008aba:	f000 f873 	bl	8008ba4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008abe:	4b07      	ldr	r3, [pc, #28]	@ (8008adc <vPortFree+0x7c>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	4a05      	ldr	r2, [pc, #20]	@ (8008adc <vPortFree+0x7c>)
 8008ac6:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008ac8:	f7fe fd54 	bl	8007574 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008acc:	bf00      	nop
 8008ace:	3710      	adds	r7, #16
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	24004dd8 	.word	0x24004dd8
 8008ad8:	24004dc8 	.word	0x24004dc8
 8008adc:	24004dd4 	.word	0x24004dd4

08008ae0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008ae6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008aea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008aec:	4b27      	ldr	r3, [pc, #156]	@ (8008b8c <prvHeapInit+0xac>)
 8008aee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f003 0307 	and.w	r3, r3, #7
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d00c      	beq.n	8008b14 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	3307      	adds	r3, #7
 8008afe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f023 0307 	bic.w	r3, r3, #7
 8008b06:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b08:	68ba      	ldr	r2, [r7, #8]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	1ad3      	subs	r3, r2, r3
 8008b0e:	4a1f      	ldr	r2, [pc, #124]	@ (8008b8c <prvHeapInit+0xac>)
 8008b10:	4413      	add	r3, r2
 8008b12:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b18:	4a1d      	ldr	r2, [pc, #116]	@ (8008b90 <prvHeapInit+0xb0>)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b1e:	4b1c      	ldr	r3, [pc, #112]	@ (8008b90 <prvHeapInit+0xb0>)
 8008b20:	2200      	movs	r2, #0
 8008b22:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	68ba      	ldr	r2, [r7, #8]
 8008b28:	4413      	add	r3, r2
 8008b2a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008b2c:	2208      	movs	r2, #8
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	1a9b      	subs	r3, r3, r2
 8008b32:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f023 0307 	bic.w	r3, r3, #7
 8008b3a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	4a15      	ldr	r2, [pc, #84]	@ (8008b94 <prvHeapInit+0xb4>)
 8008b40:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008b42:	4b14      	ldr	r3, [pc, #80]	@ (8008b94 <prvHeapInit+0xb4>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	2200      	movs	r2, #0
 8008b48:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008b4a:	4b12      	ldr	r3, [pc, #72]	@ (8008b94 <prvHeapInit+0xb4>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	68fa      	ldr	r2, [r7, #12]
 8008b5a:	1ad2      	subs	r2, r2, r3
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008b60:	4b0c      	ldr	r3, [pc, #48]	@ (8008b94 <prvHeapInit+0xb4>)
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	4a0a      	ldr	r2, [pc, #40]	@ (8008b98 <prvHeapInit+0xb8>)
 8008b6e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	4a09      	ldr	r2, [pc, #36]	@ (8008b9c <prvHeapInit+0xbc>)
 8008b76:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008b78:	4b09      	ldr	r3, [pc, #36]	@ (8008ba0 <prvHeapInit+0xc0>)
 8008b7a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008b7e:	601a      	str	r2, [r3, #0]
}
 8008b80:	bf00      	nop
 8008b82:	3714      	adds	r7, #20
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr
 8008b8c:	240011bc 	.word	0x240011bc
 8008b90:	24004dbc 	.word	0x24004dbc
 8008b94:	24004dc4 	.word	0x24004dc4
 8008b98:	24004dcc 	.word	0x24004dcc
 8008b9c:	24004dc8 	.word	0x24004dc8
 8008ba0:	24004dd8 	.word	0x24004dd8

08008ba4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b085      	sub	sp, #20
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008bac:	4b28      	ldr	r3, [pc, #160]	@ (8008c50 <prvInsertBlockIntoFreeList+0xac>)
 8008bae:	60fb      	str	r3, [r7, #12]
 8008bb0:	e002      	b.n	8008bb8 <prvInsertBlockIntoFreeList+0x14>
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	60fb      	str	r3, [r7, #12]
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d8f7      	bhi.n	8008bb2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	68ba      	ldr	r2, [r7, #8]
 8008bcc:	4413      	add	r3, r2
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d108      	bne.n	8008be6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	685a      	ldr	r2, [r3, #4]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	441a      	add	r2, r3
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	68ba      	ldr	r2, [r7, #8]
 8008bf0:	441a      	add	r2, r3
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d118      	bne.n	8008c2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	4b15      	ldr	r3, [pc, #84]	@ (8008c54 <prvInsertBlockIntoFreeList+0xb0>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d00d      	beq.n	8008c22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	685a      	ldr	r2, [r3, #4]
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	441a      	add	r2, r3
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	601a      	str	r2, [r3, #0]
 8008c20:	e008      	b.n	8008c34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c22:	4b0c      	ldr	r3, [pc, #48]	@ (8008c54 <prvInsertBlockIntoFreeList+0xb0>)
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	601a      	str	r2, [r3, #0]
 8008c2a:	e003      	b.n	8008c34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008c34:	68fa      	ldr	r2, [r7, #12]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d002      	beq.n	8008c42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c42:	bf00      	nop
 8008c44:	3714      	adds	r7, #20
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr
 8008c4e:	bf00      	nop
 8008c50:	24004dbc 	.word	0x24004dbc
 8008c54:	24004dc4 	.word	0x24004dc4

08008c58 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	330c      	adds	r3, #12
 8008c68:	461a      	mov	r2, r3
 8008c6a:	6839      	ldr	r1, [r7, #0]
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f002 fabd 	bl	800b1ec <tcpip_send_msg_wait_sem>
 8008c72:	4603      	mov	r3, r0
 8008c74:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8008c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d103      	bne.n	8008c86 <netconn_apimsg+0x2e>
    return apimsg->err;
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008c84:	e001      	b.n	8008c8a <netconn_apimsg+0x32>
  }
  return err;
 8008c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
	...

08008c94 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b08e      	sub	sp, #56	@ 0x38
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	603a      	str	r2, [r7, #0]
 8008c9e:	71fb      	strb	r3, [r7, #7]
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8008ca4:	79fb      	ldrb	r3, [r7, #7]
 8008ca6:	6839      	ldr	r1, [r7, #0]
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f001 f94f 	bl	8009f4c <netconn_alloc>
 8008cae:	6378      	str	r0, [r7, #52]	@ 0x34
  if (conn != NULL) {
 8008cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d054      	beq.n	8008d60 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8008cb6:	79bb      	ldrb	r3, [r7, #6]
 8008cb8:	753b      	strb	r3, [r7, #20]
    API_MSG_VAR_REF(msg).conn = conn;
 8008cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cbc:	60fb      	str	r3, [r7, #12]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8008cbe:	f107 030c 	add.w	r3, r7, #12
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	4829      	ldr	r0, [pc, #164]	@ (8008d6c <netconn_new_with_proto_and_callback+0xd8>)
 8008cc6:	f7ff ffc7 	bl	8008c58 <netconn_apimsg>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (err != ERR_OK) {
 8008cd0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d043      	beq.n	8008d60 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8008cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d005      	beq.n	8008cec <netconn_new_with_proto_and_callback+0x58>
 8008ce0:	4b23      	ldr	r3, [pc, #140]	@ (8008d70 <netconn_new_with_proto_and_callback+0xdc>)
 8008ce2:	22a3      	movs	r2, #163	@ 0xa3
 8008ce4:	4923      	ldr	r1, [pc, #140]	@ (8008d74 <netconn_new_with_proto_and_callback+0xe0>)
 8008ce6:	4824      	ldr	r0, [pc, #144]	@ (8008d78 <netconn_new_with_proto_and_callback+0xe4>)
 8008ce8:	f00d fcc2 	bl	8016670 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8008cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cee:	3310      	adds	r3, #16
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f00d fa95 	bl	8016220 <sys_mbox_valid>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d105      	bne.n	8008d08 <netconn_new_with_proto_and_callback+0x74>
 8008cfc:	4b1c      	ldr	r3, [pc, #112]	@ (8008d70 <netconn_new_with_proto_and_callback+0xdc>)
 8008cfe:	22a4      	movs	r2, #164	@ 0xa4
 8008d00:	491e      	ldr	r1, [pc, #120]	@ (8008d7c <netconn_new_with_proto_and_callback+0xe8>)
 8008d02:	481d      	ldr	r0, [pc, #116]	@ (8008d78 <netconn_new_with_proto_and_callback+0xe4>)
 8008d04:	f00d fcb4 	bl	8016670 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8008d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d0a:	3314      	adds	r3, #20
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f00d fa87 	bl	8016220 <sys_mbox_valid>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d005      	beq.n	8008d24 <netconn_new_with_proto_and_callback+0x90>
 8008d18:	4b15      	ldr	r3, [pc, #84]	@ (8008d70 <netconn_new_with_proto_and_callback+0xdc>)
 8008d1a:	22a6      	movs	r2, #166	@ 0xa6
 8008d1c:	4918      	ldr	r1, [pc, #96]	@ (8008d80 <netconn_new_with_proto_and_callback+0xec>)
 8008d1e:	4816      	ldr	r0, [pc, #88]	@ (8008d78 <netconn_new_with_proto_and_callback+0xe4>)
 8008d20:	f00d fca6 	bl	8016670 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8008d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d26:	330c      	adds	r3, #12
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f00d fb07 	bl	801633c <sys_sem_valid>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d105      	bne.n	8008d40 <netconn_new_with_proto_and_callback+0xac>
 8008d34:	4b0e      	ldr	r3, [pc, #56]	@ (8008d70 <netconn_new_with_proto_and_callback+0xdc>)
 8008d36:	22a9      	movs	r2, #169	@ 0xa9
 8008d38:	4912      	ldr	r1, [pc, #72]	@ (8008d84 <netconn_new_with_proto_and_callback+0xf0>)
 8008d3a:	480f      	ldr	r0, [pc, #60]	@ (8008d78 <netconn_new_with_proto_and_callback+0xe4>)
 8008d3c:	f00d fc98 	bl	8016670 <iprintf>
      sys_sem_free(&conn->op_completed);
 8008d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d42:	330c      	adds	r3, #12
 8008d44:	4618      	mov	r0, r3
 8008d46:	f00d faec 	bl	8016322 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8008d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d4c:	3310      	adds	r3, #16
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f00d f9f2 	bl	8016138 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8008d54:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008d56:	2007      	movs	r0, #7
 8008d58:	f003 f8ae 	bl	800beb8 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	e000      	b.n	8008d62 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8008d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3738      	adds	r7, #56	@ 0x38
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	08009f21 	.word	0x08009f21
 8008d70:	080175dc 	.word	0x080175dc
 8008d74:	08017610 	.word	0x08017610
 8008d78:	08017634 	.word	0x08017634
 8008d7c:	0801765c 	.word	0x0801765c
 8008d80:	08017674 	.word	0x08017674
 8008d84:	08017698 	.word	0x08017698

08008d88 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b08c      	sub	sp, #48	@ 0x30
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d101      	bne.n	8008d9a <netconn_prepare_delete+0x12>
    return ERR_OK;
 8008d96:	2300      	movs	r3, #0
 8008d98:	e016      	b.n	8008dc8 <netconn_prepare_delete+0x40>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	60bb      	str	r3, [r7, #8]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
 8008d9e:	f7fc fa89 	bl	80052b4 <sys_now>
 8008da2:	4603      	mov	r3, r0
 8008da4:	617b      	str	r3, [r7, #20]
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8008da6:	f107 0308 	add.w	r3, r7, #8
 8008daa:	4619      	mov	r1, r3
 8008dac:	4808      	ldr	r0, [pc, #32]	@ (8008dd0 <netconn_prepare_delete+0x48>)
 8008dae:	f7ff ff53 	bl	8008c58 <netconn_apimsg>
 8008db2:	4603      	mov	r3, r0
 8008db4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8008db8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d002      	beq.n	8008dc6 <netconn_prepare_delete+0x3e>
    return err;
 8008dc0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8008dc4:	e000      	b.n	8008dc8 <netconn_prepare_delete+0x40>
  }
  return ERR_OK;
 8008dc6:	2300      	movs	r3, #0
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3730      	adds	r7, #48	@ 0x30
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	0800a4b5 	.word	0x0800a4b5

08008dd4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d101      	bne.n	8008de6 <netconn_delete+0x12>
    return ERR_OK;
 8008de2:	2300      	movs	r3, #0
 8008de4:	e00d      	b.n	8008e02 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f7ff ffce 	bl	8008d88 <netconn_prepare_delete>
 8008dec:	4603      	mov	r3, r0
 8008dee:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8008df0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d102      	bne.n	8008dfe <netconn_delete+0x2a>
    netconn_free(conn);
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f001 f919 	bl	800a030 <netconn_free>
  }
  return err;
 8008dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3710      	adds	r7, #16
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
	...

08008e0c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b08e      	sub	sp, #56	@ 0x38
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	4613      	mov	r3, r2
 8008e18:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d109      	bne.n	8008e34 <netconn_bind+0x28>
 8008e20:	4b11      	ldr	r3, [pc, #68]	@ (8008e68 <netconn_bind+0x5c>)
 8008e22:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8008e26:	4911      	ldr	r1, [pc, #68]	@ (8008e6c <netconn_bind+0x60>)
 8008e28:	4811      	ldr	r0, [pc, #68]	@ (8008e70 <netconn_bind+0x64>)
 8008e2a:	f00d fc21 	bl	8016670 <iprintf>
 8008e2e:	f06f 030f 	mvn.w	r3, #15
 8008e32:	e015      	b.n	8008e60 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d101      	bne.n	8008e3e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8008e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8008e74 <netconn_bind+0x68>)
 8008e3c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008e46:	88fb      	ldrh	r3, [r7, #6]
 8008e48:	83bb      	strh	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8008e4a:	f107 0310 	add.w	r3, r7, #16
 8008e4e:	4619      	mov	r1, r3
 8008e50:	4809      	ldr	r0, [pc, #36]	@ (8008e78 <netconn_bind+0x6c>)
 8008e52:	f7ff ff01 	bl	8008c58 <netconn_apimsg>
 8008e56:	4603      	mov	r3, r0
 8008e58:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8008e5c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3738      	adds	r7, #56	@ 0x38
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	080175dc 	.word	0x080175dc
 8008e6c:	08017714 	.word	0x08017714
 8008e70:	08017634 	.word	0x08017634
 8008e74:	0801ac00 	.word	0x0801ac00
 8008e78:	0800a681 	.word	0x0800a681

08008e7c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b08c      	sub	sp, #48	@ 0x30
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	460b      	mov	r3, r1
 8008e86:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d109      	bne.n	8008ea2 <netconn_listen_with_backlog+0x26>
 8008e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8008ec4 <netconn_listen_with_backlog+0x48>)
 8008e90:	f240 12bb 	movw	r2, #443	@ 0x1bb
 8008e94:	490c      	ldr	r1, [pc, #48]	@ (8008ec8 <netconn_listen_with_backlog+0x4c>)
 8008e96:	480d      	ldr	r0, [pc, #52]	@ (8008ecc <netconn_listen_with_backlog+0x50>)
 8008e98:	f00d fbea 	bl	8016670 <iprintf>
 8008e9c:	f06f 030f 	mvn.w	r3, #15
 8008ea0:	e00c      	b.n	8008ebc <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	60bb      	str	r3, [r7, #8]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8008ea6:	f107 0308 	add.w	r3, r7, #8
 8008eaa:	4619      	mov	r1, r3
 8008eac:	4808      	ldr	r0, [pc, #32]	@ (8008ed0 <netconn_listen_with_backlog+0x54>)
 8008eae:	f7ff fed3 	bl	8008c58 <netconn_apimsg>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008eb8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3730      	adds	r7, #48	@ 0x30
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	080175dc 	.word	0x080175dc
 8008ec8:	08017794 	.word	0x08017794
 8008ecc:	08017634 	.word	0x08017634
 8008ed0:	0800a6f5 	.word	0x0800a6f5

08008ed4 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b086      	sub	sp, #24
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d109      	bne.n	8008ef8 <netconn_accept+0x24>
 8008ee4:	4b42      	ldr	r3, [pc, #264]	@ (8008ff0 <netconn_accept+0x11c>)
 8008ee6:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8008eea:	4942      	ldr	r1, [pc, #264]	@ (8008ff4 <netconn_accept+0x120>)
 8008eec:	4842      	ldr	r0, [pc, #264]	@ (8008ff8 <netconn_accept+0x124>)
 8008eee:	f00d fbbf 	bl	8016670 <iprintf>
 8008ef2:	f06f 030f 	mvn.w	r3, #15
 8008ef6:	e077      	b.n	8008fe8 <netconn_accept+0x114>
  *new_conn = NULL;
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	2200      	movs	r2, #0
 8008efc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d109      	bne.n	8008f18 <netconn_accept+0x44>
 8008f04:	4b3a      	ldr	r3, [pc, #232]	@ (8008ff0 <netconn_accept+0x11c>)
 8008f06:	f240 12e3 	movw	r2, #483	@ 0x1e3
 8008f0a:	493c      	ldr	r1, [pc, #240]	@ (8008ffc <netconn_accept+0x128>)
 8008f0c:	483a      	ldr	r0, [pc, #232]	@ (8008ff8 <netconn_accept+0x124>)
 8008f0e:	f00d fbaf 	bl	8016670 <iprintf>
 8008f12:	f06f 030f 	mvn.w	r3, #15
 8008f16:	e067      	b.n	8008fe8 <netconn_accept+0x114>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 fb9c 	bl	8009656 <netconn_err>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8008f22:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d002      	beq.n	8008f30 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8008f2a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008f2e:	e05b      	b.n	8008fe8 <netconn_accept+0x114>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	3314      	adds	r3, #20
 8008f34:	4618      	mov	r0, r3
 8008f36:	f00d f973 	bl	8016220 <sys_mbox_valid>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d006      	beq.n	8008f4e <netconn_accept+0x7a>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f46:	f003 0301 	and.w	r3, r3, #1
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d002      	beq.n	8008f54 <netconn_accept+0x80>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8008f4e:	f06f 030e 	mvn.w	r3, #14
 8008f52:	e049      	b.n	8008fe8 <netconn_accept+0x114>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f5a:	f003 0302 	and.w	r3, r3, #2
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d00e      	beq.n	8008f80 <netconn_accept+0xac>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	3314      	adds	r3, #20
 8008f66:	f107 020c 	add.w	r2, r7, #12
 8008f6a:	4611      	mov	r1, r2
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f00d f940 	bl	80161f2 <sys_arch_mbox_tryfetch>
 8008f72:	4603      	mov	r3, r0
 8008f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f78:	d113      	bne.n	8008fa2 <netconn_accept+0xce>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8008f7a:	f06f 0306 	mvn.w	r3, #6
 8008f7e:	e033      	b.n	8008fe8 <netconn_accept+0x114>
    }
  } else {
#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f103 0014 	add.w	r0, r3, #20
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	69da      	ldr	r2, [r3, #28]
 8008f8a:	f107 030c 	add.w	r3, r7, #12
 8008f8e:	4619      	mov	r1, r3
 8008f90:	f00d f8fe 	bl	8016190 <sys_arch_mbox_fetch>
 8008f94:	4603      	mov	r3, r0
 8008f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f9a:	d102      	bne.n	8008fa2 <netconn_accept+0xce>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
 8008f9c:	f06f 0302 	mvn.w	r3, #2
 8008fa0:	e022      	b.n	8008fe8 <netconn_accept+0x114>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d005      	beq.n	8008fb6 <netconn_accept+0xe2>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fae:	2200      	movs	r2, #0
 8008fb0:	2101      	movs	r1, #1
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f107 0213 	add.w	r2, r7, #19
 8008fbc:	4611      	mov	r1, r2
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f000 fb9a 	bl	80096f8 <lwip_netconn_is_err_msg>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d002      	beq.n	8008fd0 <netconn_accept+0xfc>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8008fca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008fce:	e00b      	b.n	8008fe8 <netconn_accept+0x114>
  }
  if (accept_ptr == NULL) {
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d102      	bne.n	8008fdc <netconn_accept+0x108>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8008fd6:	f06f 030e 	mvn.w	r3, #14
 8008fda:	e005      	b.n	8008fe8 <netconn_accept+0x114>
  }
  newconn = (struct netconn *)accept_ptr;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	697a      	ldr	r2, [r7, #20]
 8008fe4:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008fe6:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3718      	adds	r7, #24
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	080175dc 	.word	0x080175dc
 8008ff4:	080177b4 	.word	0x080177b4
 8008ff8:	08017634 	.word	0x08017634
 8008ffc:	080177d4 	.word	0x080177d4

08009000 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b088      	sub	sp, #32
 8009004:	af00      	add	r7, sp, #0
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	60b9      	str	r1, [r7, #8]
 800900a:	4613      	mov	r3, r2
 800900c:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800900e:	2300      	movs	r3, #0
 8009010:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d109      	bne.n	800902c <netconn_recv_data+0x2c>
 8009018:	4b5e      	ldr	r3, [pc, #376]	@ (8009194 <netconn_recv_data+0x194>)
 800901a:	f44f 7212 	mov.w	r2, #584	@ 0x248
 800901e:	495e      	ldr	r1, [pc, #376]	@ (8009198 <netconn_recv_data+0x198>)
 8009020:	485e      	ldr	r0, [pc, #376]	@ (800919c <netconn_recv_data+0x19c>)
 8009022:	f00d fb25 	bl	8016670 <iprintf>
 8009026:	f06f 030f 	mvn.w	r3, #15
 800902a:	e0ae      	b.n	800918a <netconn_recv_data+0x18a>
  *new_buf = NULL;
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	2200      	movs	r2, #0
 8009030:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d109      	bne.n	800904c <netconn_recv_data+0x4c>
 8009038:	4b56      	ldr	r3, [pc, #344]	@ (8009194 <netconn_recv_data+0x194>)
 800903a:	f240 224a 	movw	r2, #586	@ 0x24a
 800903e:	4958      	ldr	r1, [pc, #352]	@ (80091a0 <netconn_recv_data+0x1a0>)
 8009040:	4856      	ldr	r0, [pc, #344]	@ (800919c <netconn_recv_data+0x19c>)
 8009042:	f00d fb15 	bl	8016670 <iprintf>
 8009046:	f06f 030f 	mvn.w	r3, #15
 800904a:	e09e      	b.n	800918a <netconn_recv_data+0x18a>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	3310      	adds	r3, #16
 8009050:	4618      	mov	r0, r3
 8009052:	f00d f8e5 	bl	8016220 <sys_mbox_valid>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d10e      	bne.n	800907a <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800905c:	68f8      	ldr	r0, [r7, #12]
 800905e:	f000 fafa 	bl	8009656 <netconn_err>
 8009062:	4603      	mov	r3, r0
 8009064:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8009066:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d002      	beq.n	8009074 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800906e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8009072:	e08a      	b.n	800918a <netconn_recv_data+0x18a>
    }
    return ERR_CONN;
 8009074:	f06f 030a 	mvn.w	r3, #10
 8009078:	e087      	b.n	800918a <netconn_recv_data+0x18a>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009080:	f003 0302 	and.w	r3, r3, #2
 8009084:	2b00      	cmp	r3, #0
 8009086:	d110      	bne.n	80090aa <netconn_recv_data+0xaa>
 8009088:	79fb      	ldrb	r3, [r7, #7]
 800908a:	f003 0304 	and.w	r3, r3, #4
 800908e:	2b00      	cmp	r3, #0
 8009090:	d10b      	bne.n	80090aa <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009098:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800909c:	2b00      	cmp	r3, #0
 800909e:	d104      	bne.n	80090aa <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d024      	beq.n	80090f4 <netconn_recv_data+0xf4>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	3310      	adds	r3, #16
 80090ae:	f107 0218 	add.w	r2, r7, #24
 80090b2:	4611      	mov	r1, r2
 80090b4:	4618      	mov	r0, r3
 80090b6:	f00d f89c 	bl	80161f2 <sys_arch_mbox_tryfetch>
 80090ba:	4603      	mov	r3, r0
 80090bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090c0:	d129      	bne.n	8009116 <netconn_recv_data+0x116>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 80090c2:	68f8      	ldr	r0, [r7, #12]
 80090c4:	f000 fac7 	bl	8009656 <netconn_err>
 80090c8:	4603      	mov	r3, r0
 80090ca:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 80090cc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d002      	beq.n	80090da <netconn_recv_data+0xda>
        /* return pending error */
        return err;
 80090d4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80090d8:	e057      	b.n	800918a <netconn_recv_data+0x18a>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80090e0:	f003 0301 	and.w	r3, r3, #1
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d002      	beq.n	80090ee <netconn_recv_data+0xee>
        return ERR_CONN;
 80090e8:	f06f 030a 	mvn.w	r3, #10
 80090ec:	e04d      	b.n	800918a <netconn_recv_data+0x18a>
      }
      return ERR_WOULDBLOCK;
 80090ee:	f06f 0306 	mvn.w	r3, #6
 80090f2:	e04a      	b.n	800918a <netconn_recv_data+0x18a>
    }
  } else {
#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f103 0010 	add.w	r0, r3, #16
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	69da      	ldr	r2, [r3, #28]
 80090fe:	f107 0318 	add.w	r3, r7, #24
 8009102:	4619      	mov	r1, r3
 8009104:	f00d f844 	bl	8016190 <sys_arch_mbox_fetch>
 8009108:	4603      	mov	r3, r0
 800910a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800910e:	d102      	bne.n	8009116 <netconn_recv_data+0x116>
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
 8009110:	f06f 0302 	mvn.w	r3, #2
 8009114:	e039      	b.n	800918a <netconn_recv_data+0x18a>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800911e:	2b10      	cmp	r3, #16
 8009120:	d117      	bne.n	8009152 <netconn_recv_data+0x152>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	f107 0217 	add.w	r2, r7, #23
 8009128:	4611      	mov	r1, r2
 800912a:	4618      	mov	r0, r3
 800912c:	f000 fae4 	bl	80096f8 <lwip_netconn_is_err_msg>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d009      	beq.n	800914a <netconn_recv_data+0x14a>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8009136:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800913a:	f113 0f0f 	cmn.w	r3, #15
 800913e:	d101      	bne.n	8009144 <netconn_recv_data+0x144>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8009140:	2300      	movs	r3, #0
 8009142:	e022      	b.n	800918a <netconn_recv_data+0x18a>
      }
      return err;
 8009144:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009148:	e01f      	b.n	800918a <netconn_recv_data+0x18a>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800914a:	69bb      	ldr	r3, [r7, #24]
 800914c:	891b      	ldrh	r3, [r3, #8]
 800914e:	83fb      	strh	r3, [r7, #30]
 8009150:	e00d      	b.n	800916e <netconn_recv_data+0x16e>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d106      	bne.n	8009166 <netconn_recv_data+0x166>
 8009158:	4b0e      	ldr	r3, [pc, #56]	@ (8009194 <netconn_recv_data+0x194>)
 800915a:	f240 2291 	movw	r2, #657	@ 0x291
 800915e:	4911      	ldr	r1, [pc, #68]	@ (80091a4 <netconn_recv_data+0x1a4>)
 8009160:	480e      	ldr	r0, [pc, #56]	@ (800919c <netconn_recv_data+0x19c>)
 8009162:	f00d fa85 	bl	8016670 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8009166:	69bb      	ldr	r3, [r7, #24]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	891b      	ldrh	r3, [r3, #8]
 800916c:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009172:	2b00      	cmp	r3, #0
 8009174:	d005      	beq.n	8009182 <netconn_recv_data+0x182>
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800917a:	8bfa      	ldrh	r2, [r7, #30]
 800917c:	2101      	movs	r1, #1
 800917e:	68f8      	ldr	r0, [r7, #12]
 8009180:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8009182:	69ba      	ldr	r2, [r7, #24]
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8009188:	2300      	movs	r3, #0
}
 800918a:	4618      	mov	r0, r3
 800918c:	3720      	adds	r7, #32
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop
 8009194:	080175dc 	.word	0x080175dc
 8009198:	080177f4 	.word	0x080177f4
 800919c:	08017634 	.word	0x08017634
 80091a0:	08017814 	.word	0x08017814
 80091a4:	08017830 	.word	0x08017830

080091a8 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d005      	beq.n	80091c6 <netconn_tcp_recvd_msg+0x1e>
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80091c2:	2b10      	cmp	r3, #16
 80091c4:	d009      	beq.n	80091da <netconn_tcp_recvd_msg+0x32>
 80091c6:	4b0c      	ldr	r3, [pc, #48]	@ (80091f8 <netconn_tcp_recvd_msg+0x50>)
 80091c8:	f240 22a7 	movw	r2, #679	@ 0x2a7
 80091cc:	490b      	ldr	r1, [pc, #44]	@ (80091fc <netconn_tcp_recvd_msg+0x54>)
 80091ce:	480c      	ldr	r0, [pc, #48]	@ (8009200 <netconn_tcp_recvd_msg+0x58>)
 80091d0:	f00d fa4e 	bl	8016670 <iprintf>
 80091d4:	f06f 030f 	mvn.w	r3, #15
 80091d8:	e00a      	b.n	80091f0 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	68fa      	ldr	r2, [r7, #12]
 80091de:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	68ba      	ldr	r2, [r7, #8]
 80091e4:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80091e6:	6879      	ldr	r1, [r7, #4]
 80091e8:	4806      	ldr	r0, [pc, #24]	@ (8009204 <netconn_tcp_recvd_msg+0x5c>)
 80091ea:	f7ff fd35 	bl	8008c58 <netconn_apimsg>
 80091ee:	4603      	mov	r3, r0
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3710      	adds	r7, #16
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}
 80091f8:	080175dc 	.word	0x080175dc
 80091fc:	0801783c 	.word	0x0801783c
 8009200:	08017634 	.word	0x08017634
 8009204:	0800a825 	.word	0x0800a825

08009208 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b090      	sub	sp, #64	@ 0x40
 800920c:	af00      	add	r7, sp, #0
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	60b9      	str	r1, [r7, #8]
 8009212:	4613      	mov	r3, r2
 8009214:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	3310      	adds	r3, #16
 800921a:	4618      	mov	r0, r3
 800921c:	f00d f800 	bl	8016220 <sys_mbox_valid>
 8009220:	4603      	mov	r3, r0
 8009222:	2b00      	cmp	r3, #0
 8009224:	d102      	bne.n	800922c <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8009226:	f06f 030a 	mvn.w	r3, #10
 800922a:	e072      	b.n	8009312 <netconn_recv_data_tcp+0x10a>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009232:	b25b      	sxtb	r3, r3
 8009234:	2b00      	cmp	r3, #0
 8009236:	da09      	bge.n	800924c <netconn_recv_data_tcp+0x44>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800923e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009242:	b2da      	uxtb	r2, r3
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f883 2020 	strb.w	r2, [r3, #32]
    goto handle_fin;
 800924a:	e03b      	b.n	80092c4 <netconn_recv_data_tcp+0xbc>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800924c:	79fb      	ldrb	r3, [r7, #7]
 800924e:	461a      	mov	r2, r3
 8009250:	68b9      	ldr	r1, [r7, #8]
 8009252:	68f8      	ldr	r0, [r7, #12]
 8009254:	f7ff fed4 	bl	8009000 <netconn_recv_data>
 8009258:	4603      	mov	r3, r0
 800925a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 800925e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8009262:	2b00      	cmp	r3, #0
 8009264:	d002      	beq.n	800926c <netconn_recv_data_tcp+0x64>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8009266:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800926a:	e052      	b.n	8009312 <netconn_recv_data_tcp+0x10a>
  }
  buf = *new_buf;
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8009272:	79fb      	ldrb	r3, [r7, #7]
 8009274:	f003 0308 	and.w	r3, r3, #8
 8009278:	2b00      	cmp	r3, #0
 800927a:	d10e      	bne.n	800929a <netconn_recv_data_tcp+0x92>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800927c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800927e:	2b00      	cmp	r3, #0
 8009280:	d002      	beq.n	8009288 <netconn_recv_data_tcp+0x80>
 8009282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009284:	891b      	ldrh	r3, [r3, #8]
 8009286:	e000      	b.n	800928a <netconn_recv_data_tcp+0x82>
 8009288:	2301      	movs	r3, #1
 800928a:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800928c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800928e:	f107 0210 	add.w	r2, r7, #16
 8009292:	4619      	mov	r1, r3
 8009294:	68f8      	ldr	r0, [r7, #12]
 8009296:	f7ff ff87 	bl	80091a8 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800929a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800929c:	2b00      	cmp	r3, #0
 800929e:	d136      	bne.n	800930e <netconn_recv_data_tcp+0x106>
    if (apiflags & NETCONN_NOFIN) {
 80092a0:	79fb      	ldrb	r3, [r7, #7]
 80092a2:	f003 0310 	and.w	r3, r3, #16
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d00b      	beq.n	80092c2 <netconn_recv_data_tcp+0xba>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80092b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80092b4:	b2da      	uxtb	r2, r3
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f883 2020 	strb.w	r2, [r3, #32]
      return ERR_WOULDBLOCK;
 80092bc:	f06f 0306 	mvn.w	r3, #6
 80092c0:	e027      	b.n	8009312 <netconn_recv_data_tcp+0x10a>
    } else {
handle_fin:
 80092c2:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d005      	beq.n	80092d8 <netconn_recv_data_tcp+0xd0>
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092d0:	2200      	movs	r2, #0
 80092d2:	2101      	movs	r1, #1
 80092d4:	68f8      	ldr	r0, [r7, #12]
 80092d6:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d10f      	bne.n	8009300 <netconn_recv_data_tcp+0xf8>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f000 f9b8 	bl	8009656 <netconn_err>
 80092e6:	4603      	mov	r3, r0
 80092e8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 80092ec:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d002      	beq.n	80092fa <netconn_recv_data_tcp+0xf2>
          return err;
 80092f4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80092f8:	e00b      	b.n	8009312 <netconn_recv_data_tcp+0x10a>
        }
        return ERR_RST;
 80092fa:	f06f 030d 	mvn.w	r3, #13
 80092fe:	e008      	b.n	8009312 <netconn_recv_data_tcp+0x10a>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8009300:	2101      	movs	r1, #1
 8009302:	68f8      	ldr	r0, [r7, #12]
 8009304:	f000 f968 	bl	80095d8 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8009308:	f06f 030e 	mvn.w	r3, #14
 800930c:	e001      	b.n	8009312 <netconn_recv_data_tcp+0x10a>
    }
  }
  return err;
 800930e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8009312:	4618      	mov	r0, r3
 8009314:	3740      	adds	r7, #64	@ 0x40
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
	...

0800931c <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b086      	sub	sp, #24
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8009326:	2300      	movs	r3, #0
 8009328:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d109      	bne.n	8009344 <netconn_recv+0x28>
 8009330:	4b32      	ldr	r3, [pc, #200]	@ (80093fc <netconn_recv+0xe0>)
 8009332:	f240 3263 	movw	r2, #867	@ 0x363
 8009336:	4932      	ldr	r1, [pc, #200]	@ (8009400 <netconn_recv+0xe4>)
 8009338:	4832      	ldr	r0, [pc, #200]	@ (8009404 <netconn_recv+0xe8>)
 800933a:	f00d f999 	bl	8016670 <iprintf>
 800933e:	f06f 030f 	mvn.w	r3, #15
 8009342:	e056      	b.n	80093f2 <netconn_recv+0xd6>
  *new_buf = NULL;
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	2200      	movs	r2, #0
 8009348:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d109      	bne.n	8009364 <netconn_recv+0x48>
 8009350:	4b2a      	ldr	r3, [pc, #168]	@ (80093fc <netconn_recv+0xe0>)
 8009352:	f240 3265 	movw	r2, #869	@ 0x365
 8009356:	492c      	ldr	r1, [pc, #176]	@ (8009408 <netconn_recv+0xec>)
 8009358:	482a      	ldr	r0, [pc, #168]	@ (8009404 <netconn_recv+0xe8>)
 800935a:	f00d f989 	bl	8016670 <iprintf>
 800935e:	f06f 030f 	mvn.w	r3, #15
 8009362:	e046      	b.n	80093f2 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800936c:	2b10      	cmp	r3, #16
 800936e:	d13a      	bne.n	80093e6 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8009370:	2300      	movs	r3, #0
 8009372:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009374:	2006      	movs	r0, #6
 8009376:	f002 fd29 	bl	800bdcc <memp_malloc>
 800937a:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d102      	bne.n	8009388 <netconn_recv+0x6c>
      return ERR_MEM;
 8009382:	f04f 33ff 	mov.w	r3, #4294967295
 8009386:	e034      	b.n	80093f2 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8009388:	f107 030c 	add.w	r3, r7, #12
 800938c:	2200      	movs	r2, #0
 800938e:	4619      	mov	r1, r3
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f7ff ff39 	bl	8009208 <netconn_recv_data_tcp>
 8009396:	4603      	mov	r3, r0
 8009398:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800939a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d006      	beq.n	80093b0 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 80093a2:	6979      	ldr	r1, [r7, #20]
 80093a4:	2006      	movs	r0, #6
 80093a6:	f002 fd87 	bl	800beb8 <memp_free>
      return err;
 80093aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80093ae:	e020      	b.n	80093f2 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d106      	bne.n	80093c4 <netconn_recv+0xa8>
 80093b6:	4b11      	ldr	r3, [pc, #68]	@ (80093fc <netconn_recv+0xe0>)
 80093b8:	f240 3279 	movw	r2, #889	@ 0x379
 80093bc:	4913      	ldr	r1, [pc, #76]	@ (800940c <netconn_recv+0xf0>)
 80093be:	4811      	ldr	r0, [pc, #68]	@ (8009404 <netconn_recv+0xe8>)
 80093c0:	f00d f956 	bl	8016670 <iprintf>

    buf->p = p;
 80093c4:	68fa      	ldr	r2, [r7, #12]
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80093ca:	68fa      	ldr	r2, [r7, #12]
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	2200      	movs	r2, #0
 80093d4:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	2200      	movs	r2, #0
 80093da:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	697a      	ldr	r2, [r7, #20]
 80093e0:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 80093e2:	2300      	movs	r3, #0
 80093e4:	e005      	b.n	80093f2 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 80093e6:	2200      	movs	r2, #0
 80093e8:	6839      	ldr	r1, [r7, #0]
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f7ff fe08 	bl	8009000 <netconn_recv_data>
 80093f0:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3718      	adds	r7, #24
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	080175dc 	.word	0x080175dc
 8009400:	080177f4 	.word	0x080177f4
 8009404:	08017634 	.word	0x08017634
 8009408:	08017814 	.word	0x08017814
 800940c:	0801788c 	.word	0x0801788c

08009410 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b088      	sub	sp, #32
 8009414:	af02      	add	r7, sp, #8
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	60b9      	str	r1, [r7, #8]
 800941a:	607a      	str	r2, [r7, #4]
 800941c:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8009426:	78fa      	ldrb	r2, [r7, #3]
 8009428:	f107 0110 	add.w	r1, r7, #16
 800942c:	6a3b      	ldr	r3, [r7, #32]
 800942e:	9300      	str	r3, [sp, #0]
 8009430:	4613      	mov	r3, r2
 8009432:	2201      	movs	r2, #1
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	f000 f805 	bl	8009444 <netconn_write_vectors_partly>
 800943a:	4603      	mov	r3, r0
}
 800943c:	4618      	mov	r0, r3
 800943e:	3718      	adds	r7, #24
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b092      	sub	sp, #72	@ 0x48
 8009448:	af00      	add	r7, sp, #0
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	60b9      	str	r1, [r7, #8]
 800944e:	4611      	mov	r1, r2
 8009450:	461a      	mov	r2, r3
 8009452:	460b      	mov	r3, r1
 8009454:	80fb      	strh	r3, [r7, #6]
 8009456:	4613      	mov	r3, r2
 8009458:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d109      	bne.n	8009474 <netconn_write_vectors_partly+0x30>
 8009460:	4b57      	ldr	r3, [pc, #348]	@ (80095c0 <netconn_write_vectors_partly+0x17c>)
 8009462:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8009466:	4957      	ldr	r1, [pc, #348]	@ (80095c4 <netconn_write_vectors_partly+0x180>)
 8009468:	4857      	ldr	r0, [pc, #348]	@ (80095c8 <netconn_write_vectors_partly+0x184>)
 800946a:	f00d f901 	bl	8016670 <iprintf>
 800946e:	f06f 030f 	mvn.w	r3, #15
 8009472:	e0a1      	b.n	80095b8 <netconn_write_vectors_partly+0x174>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800947c:	2b10      	cmp	r3, #16
 800947e:	d009      	beq.n	8009494 <netconn_write_vectors_partly+0x50>
 8009480:	4b4f      	ldr	r3, [pc, #316]	@ (80095c0 <netconn_write_vectors_partly+0x17c>)
 8009482:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 8009486:	4951      	ldr	r1, [pc, #324]	@ (80095cc <netconn_write_vectors_partly+0x188>)
 8009488:	484f      	ldr	r0, [pc, #316]	@ (80095c8 <netconn_write_vectors_partly+0x184>)
 800948a:	f00d f8f1 	bl	8016670 <iprintf>
 800948e:	f06f 0305 	mvn.w	r3, #5
 8009492:	e091      	b.n	80095b8 <netconn_write_vectors_partly+0x174>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f893 3020 	ldrb.w	r3, [r3, #32]
 800949a:	f003 0302 	and.w	r3, r3, #2
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d104      	bne.n	80094ac <netconn_write_vectors_partly+0x68>
 80094a2:	797b      	ldrb	r3, [r7, #5]
 80094a4:	f003 0304 	and.w	r3, r3, #4
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d001      	beq.n	80094b0 <netconn_write_vectors_partly+0x6c>
 80094ac:	2301      	movs	r3, #1
 80094ae:	e000      	b.n	80094b2 <netconn_write_vectors_partly+0x6e>
 80094b0:	2300      	movs	r3, #0
 80094b2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	699b      	ldr	r3, [r3, #24]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d002      	beq.n	80094c4 <netconn_write_vectors_partly+0x80>
    dontblock = 1;
 80094be:	2301      	movs	r3, #1
 80094c0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 80094c4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d005      	beq.n	80094d8 <netconn_write_vectors_partly+0x94>
 80094cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d102      	bne.n	80094d8 <netconn_write_vectors_partly+0x94>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 80094d2:	f06f 0305 	mvn.w	r3, #5
 80094d6:	e06f      	b.n	80095b8 <netconn_write_vectors_partly+0x174>
  }

  /* sum up the total size */
  size = 0;
 80094d8:	2300      	movs	r3, #0
 80094da:	643b      	str	r3, [r7, #64]	@ 0x40
  for (i = 0; i < vectorcnt; i++) {
 80094dc:	2300      	movs	r3, #0
 80094de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094e0:	e015      	b.n	800950e <netconn_write_vectors_partly+0xca>
    size += vectors[i].len;
 80094e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094e4:	00db      	lsls	r3, r3, #3
 80094e6:	68ba      	ldr	r2, [r7, #8]
 80094e8:	4413      	add	r3, r2
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80094ee:	4413      	add	r3, r2
 80094f0:	643b      	str	r3, [r7, #64]	@ 0x40
    if (size < vectors[i].len) {
 80094f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094f4:	00db      	lsls	r3, r3, #3
 80094f6:	68ba      	ldr	r2, [r7, #8]
 80094f8:	4413      	add	r3, r2
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80094fe:	429a      	cmp	r2, r3
 8009500:	d202      	bcs.n	8009508 <netconn_write_vectors_partly+0xc4>
      /* overflow */
      return ERR_VAL;
 8009502:	f06f 0305 	mvn.w	r3, #5
 8009506:	e057      	b.n	80095b8 <netconn_write_vectors_partly+0x174>
  for (i = 0; i < vectorcnt; i++) {
 8009508:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800950a:	3301      	adds	r3, #1
 800950c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800950e:	88fb      	ldrh	r3, [r7, #6]
 8009510:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009512:	429a      	cmp	r2, r3
 8009514:	dbe5      	blt.n	80094e2 <netconn_write_vectors_partly+0x9e>
    }
  }
  if (size == 0) {
 8009516:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009518:	2b00      	cmp	r3, #0
 800951a:	d101      	bne.n	8009520 <netconn_write_vectors_partly+0xdc>
    return ERR_OK;
 800951c:	2300      	movs	r3, #0
 800951e:	e04b      	b.n	80095b8 <netconn_write_vectors_partly+0x174>
  } else if (size > SSIZE_MAX) {
 8009520:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009522:	2b00      	cmp	r3, #0
 8009524:	da0a      	bge.n	800953c <netconn_write_vectors_partly+0xf8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8009526:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009528:	2b00      	cmp	r3, #0
 800952a:	d102      	bne.n	8009532 <netconn_write_vectors_partly+0xee>
      return ERR_VAL;
 800952c:	f06f 0305 	mvn.w	r3, #5
 8009530:	e042      	b.n	80095b8 <netconn_write_vectors_partly+0x174>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8009532:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8009536:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 8009538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800953a:	643b      	str	r3, [r7, #64]	@ 0x40
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8009544:	88fb      	ldrh	r3, [r7, #6]
 8009546:	83bb      	strh	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8009548:	2300      	movs	r3, #0
 800954a:	623b      	str	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800954c:	797b      	ldrb	r3, [r7, #5]
 800954e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8009552:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009554:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8009556:	2300      	movs	r3, #0
 8009558:	62bb      	str	r3, [r7, #40]	@ 0x28
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	699b      	ldr	r3, [r3, #24]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d004      	beq.n	800956c <netconn_write_vectors_partly+0x128>
    /* get the time we started, which is later compared to
        sys_now() + conn->send_timeout */
    API_MSG_VAR_REF(msg).msg.w.time_started = sys_now();
 8009562:	f7fb fea7 	bl	80052b4 <sys_now>
 8009566:	4603      	mov	r3, r0
 8009568:	633b      	str	r3, [r7, #48]	@ 0x30
 800956a:	e001      	b.n	8009570 <netconn_write_vectors_partly+0x12c>
  } else {
    API_MSG_VAR_REF(msg).msg.w.time_started = 0;
 800956c:	2300      	movs	r3, #0
 800956e:	633b      	str	r3, [r7, #48]	@ 0x30
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8009570:	f107 0310 	add.w	r3, r7, #16
 8009574:	4619      	mov	r1, r3
 8009576:	4816      	ldr	r0, [pc, #88]	@ (80095d0 <netconn_write_vectors_partly+0x18c>)
 8009578:	f7ff fb6e 	bl	8008c58 <netconn_apimsg>
 800957c:	4603      	mov	r3, r0
 800957e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 8009582:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8009586:	2b00      	cmp	r3, #0
 8009588:	d114      	bne.n	80095b4 <netconn_write_vectors_partly+0x170>
    if (bytes_written != NULL) {
 800958a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800958c:	2b00      	cmp	r3, #0
 800958e:	d002      	beq.n	8009596 <netconn_write_vectors_partly+0x152>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8009590:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009592:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009594:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8009596:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800959a:	2b00      	cmp	r3, #0
 800959c:	d10a      	bne.n	80095b4 <netconn_write_vectors_partly+0x170>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800959e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d006      	beq.n	80095b4 <netconn_write_vectors_partly+0x170>
 80095a6:	4b06      	ldr	r3, [pc, #24]	@ (80095c0 <netconn_write_vectors_partly+0x17c>)
 80095a8:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80095ac:	4909      	ldr	r1, [pc, #36]	@ (80095d4 <netconn_write_vectors_partly+0x190>)
 80095ae:	4806      	ldr	r0, [pc, #24]	@ (80095c8 <netconn_write_vectors_partly+0x184>)
 80095b0:	f00d f85e 	bl	8016670 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 80095b4:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3748      	adds	r7, #72	@ 0x48
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}
 80095c0:	080175dc 	.word	0x080175dc
 80095c4:	080178b4 	.word	0x080178b4
 80095c8:	08017634 	.word	0x08017634
 80095cc:	080178d0 	.word	0x080178d0
 80095d0:	0800ac6d 	.word	0x0800ac6d
 80095d4:	080178f4 	.word	0x080178f4

080095d8 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b08c      	sub	sp, #48	@ 0x30
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	460b      	mov	r3, r1
 80095e2:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d109      	bne.n	80095fe <netconn_close_shutdown+0x26>
 80095ea:	4b10      	ldr	r3, [pc, #64]	@ (800962c <netconn_close_shutdown+0x54>)
 80095ec:	f240 4247 	movw	r2, #1095	@ 0x447
 80095f0:	490f      	ldr	r1, [pc, #60]	@ (8009630 <netconn_close_shutdown+0x58>)
 80095f2:	4810      	ldr	r0, [pc, #64]	@ (8009634 <netconn_close_shutdown+0x5c>)
 80095f4:	f00d f83c 	bl	8016670 <iprintf>
 80095f8:	f06f 030f 	mvn.w	r3, #15
 80095fc:	e012      	b.n	8009624 <netconn_close_shutdown+0x4c>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	60bb      	str	r3, [r7, #8]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8009602:	78fb      	ldrb	r3, [r7, #3]
 8009604:	743b      	strb	r3, [r7, #16]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
 8009606:	f7fb fe55 	bl	80052b4 <sys_now>
 800960a:	4603      	mov	r3, r0
 800960c:	617b      	str	r3, [r7, #20]
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800960e:	f107 0308 	add.w	r3, r7, #8
 8009612:	4619      	mov	r1, r3
 8009614:	4808      	ldr	r0, [pc, #32]	@ (8009638 <netconn_close_shutdown+0x60>)
 8009616:	f7ff fb1f 	bl	8008c58 <netconn_apimsg>
 800961a:	4603      	mov	r3, r0
 800961c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009620:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8009624:	4618      	mov	r0, r3
 8009626:	3730      	adds	r7, #48	@ 0x30
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}
 800962c:	080175dc 	.word	0x080175dc
 8009630:	08017918 	.word	0x08017918
 8009634:	08017634 	.word	0x08017634
 8009638:	0800ad85 	.word	0x0800ad85

0800963c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8009644:	2103      	movs	r1, #3
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f7ff ffc6 	bl	80095d8 <netconn_close_shutdown>
 800964c:	4603      	mov	r3, r0
}
 800964e:	4618      	mov	r0, r3
 8009650:	3708      	adds	r7, #8
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}

08009656 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8009656:	b580      	push	{r7, lr}
 8009658:	b084      	sub	sp, #16
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d101      	bne.n	8009668 <netconn_err+0x12>
    return ERR_OK;
 8009664:	2300      	movs	r3, #0
 8009666:	e00d      	b.n	8009684 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8009668:	f00c fee4 	bl	8016434 <sys_arch_protect>
 800966c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	7a1b      	ldrb	r3, [r3, #8]
 8009672:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800967a:	68f8      	ldr	r0, [r7, #12]
 800967c:	f00c fee8 	bl	8016450 <sys_arch_unprotect>
  return err;
 8009680:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009684:	4618      	mov	r0, r3
 8009686:	3710      	adds	r7, #16
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b082      	sub	sp, #8
 8009690:	af00      	add	r7, sp, #0
 8009692:	4603      	mov	r3, r0
 8009694:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8009696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800969a:	f113 0f0d 	cmn.w	r3, #13
 800969e:	d009      	beq.n	80096b4 <lwip_netconn_err_to_msg+0x28>
 80096a0:	f113 0f0d 	cmn.w	r3, #13
 80096a4:	dc0c      	bgt.n	80096c0 <lwip_netconn_err_to_msg+0x34>
 80096a6:	f113 0f0f 	cmn.w	r3, #15
 80096aa:	d007      	beq.n	80096bc <lwip_netconn_err_to_msg+0x30>
 80096ac:	f113 0f0e 	cmn.w	r3, #14
 80096b0:	d002      	beq.n	80096b8 <lwip_netconn_err_to_msg+0x2c>
 80096b2:	e005      	b.n	80096c0 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 80096b4:	4b0a      	ldr	r3, [pc, #40]	@ (80096e0 <lwip_netconn_err_to_msg+0x54>)
 80096b6:	e00e      	b.n	80096d6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 80096b8:	4b0a      	ldr	r3, [pc, #40]	@ (80096e4 <lwip_netconn_err_to_msg+0x58>)
 80096ba:	e00c      	b.n	80096d6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80096bc:	4b0a      	ldr	r3, [pc, #40]	@ (80096e8 <lwip_netconn_err_to_msg+0x5c>)
 80096be:	e00a      	b.n	80096d6 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80096c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d005      	beq.n	80096d4 <lwip_netconn_err_to_msg+0x48>
 80096c8:	4b08      	ldr	r3, [pc, #32]	@ (80096ec <lwip_netconn_err_to_msg+0x60>)
 80096ca:	227d      	movs	r2, #125	@ 0x7d
 80096cc:	4908      	ldr	r1, [pc, #32]	@ (80096f0 <lwip_netconn_err_to_msg+0x64>)
 80096ce:	4809      	ldr	r0, [pc, #36]	@ (80096f4 <lwip_netconn_err_to_msg+0x68>)
 80096d0:	f00c ffce 	bl	8016670 <iprintf>
      return NULL;
 80096d4:	2300      	movs	r3, #0
  }
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3708      	adds	r7, #8
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	bf00      	nop
 80096e0:	0801aaec 	.word	0x0801aaec
 80096e4:	0801aaed 	.word	0x0801aaed
 80096e8:	0801aaee 	.word	0x0801aaee
 80096ec:	08017934 	.word	0x08017934
 80096f0:	08017968 	.word	0x08017968
 80096f4:	08017978 	.word	0x08017978

080096f8 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d105      	bne.n	8009714 <lwip_netconn_is_err_msg+0x1c>
 8009708:	4b12      	ldr	r3, [pc, #72]	@ (8009754 <lwip_netconn_is_err_msg+0x5c>)
 800970a:	2285      	movs	r2, #133	@ 0x85
 800970c:	4912      	ldr	r1, [pc, #72]	@ (8009758 <lwip_netconn_is_err_msg+0x60>)
 800970e:	4813      	ldr	r0, [pc, #76]	@ (800975c <lwip_netconn_is_err_msg+0x64>)
 8009710:	f00c ffae 	bl	8016670 <iprintf>

  if (msg == &netconn_aborted) {
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	4a12      	ldr	r2, [pc, #72]	@ (8009760 <lwip_netconn_is_err_msg+0x68>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d104      	bne.n	8009726 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	22f3      	movs	r2, #243	@ 0xf3
 8009720:	701a      	strb	r2, [r3, #0]
    return 1;
 8009722:	2301      	movs	r3, #1
 8009724:	e012      	b.n	800974c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	4a0e      	ldr	r2, [pc, #56]	@ (8009764 <lwip_netconn_is_err_msg+0x6c>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d104      	bne.n	8009738 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	22f2      	movs	r2, #242	@ 0xf2
 8009732:	701a      	strb	r2, [r3, #0]
    return 1;
 8009734:	2301      	movs	r3, #1
 8009736:	e009      	b.n	800974c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	4a0b      	ldr	r2, [pc, #44]	@ (8009768 <lwip_netconn_is_err_msg+0x70>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d104      	bne.n	800974a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	22f1      	movs	r2, #241	@ 0xf1
 8009744:	701a      	strb	r2, [r3, #0]
    return 1;
 8009746:	2301      	movs	r3, #1
 8009748:	e000      	b.n	800974c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800974a:	2300      	movs	r3, #0
}
 800974c:	4618      	mov	r0, r3
 800974e:	3708      	adds	r7, #8
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}
 8009754:	08017934 	.word	0x08017934
 8009758:	080179a0 	.word	0x080179a0
 800975c:	08017978 	.word	0x08017978
 8009760:	0801aaec 	.word	0x0801aaec
 8009764:	0801aaed 	.word	0x0801aaed
 8009768:	0801aaee 	.word	0x0801aaee

0800976c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b088      	sub	sp, #32
 8009770:	af00      	add	r7, sp, #0
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	607a      	str	r2, [r7, #4]
 8009778:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d105      	bne.n	800978c <recv_udp+0x20>
 8009780:	4b34      	ldr	r3, [pc, #208]	@ (8009854 <recv_udp+0xe8>)
 8009782:	22e5      	movs	r2, #229	@ 0xe5
 8009784:	4934      	ldr	r1, [pc, #208]	@ (8009858 <recv_udp+0xec>)
 8009786:	4835      	ldr	r0, [pc, #212]	@ (800985c <recv_udp+0xf0>)
 8009788:	f00c ff72 	bl	8016670 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d105      	bne.n	800979e <recv_udp+0x32>
 8009792:	4b30      	ldr	r3, [pc, #192]	@ (8009854 <recv_udp+0xe8>)
 8009794:	22e6      	movs	r2, #230	@ 0xe6
 8009796:	4932      	ldr	r1, [pc, #200]	@ (8009860 <recv_udp+0xf4>)
 8009798:	4830      	ldr	r0, [pc, #192]	@ (800985c <recv_udp+0xf0>)
 800979a:	f00c ff69 	bl	8016670 <iprintf>
  conn = (struct netconn *)arg;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80097a2:	69fb      	ldr	r3, [r7, #28]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d103      	bne.n	80097b0 <recv_udp+0x44>
    pbuf_free(p);
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f003 fa29 	bl	800cc00 <pbuf_free>
    return;
 80097ae:	e04d      	b.n	800984c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80097b0:	69fb      	ldr	r3, [r7, #28]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	68ba      	ldr	r2, [r7, #8]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d005      	beq.n	80097c6 <recv_udp+0x5a>
 80097ba:	4b26      	ldr	r3, [pc, #152]	@ (8009854 <recv_udp+0xe8>)
 80097bc:	22ee      	movs	r2, #238	@ 0xee
 80097be:	4929      	ldr	r1, [pc, #164]	@ (8009864 <recv_udp+0xf8>)
 80097c0:	4826      	ldr	r0, [pc, #152]	@ (800985c <recv_udp+0xf0>)
 80097c2:	f00c ff55 	bl	8016670 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80097c6:	69fb      	ldr	r3, [r7, #28]
 80097c8:	3310      	adds	r3, #16
 80097ca:	4618      	mov	r0, r3
 80097cc:	f00c fd28 	bl	8016220 <sys_mbox_valid>
 80097d0:	4603      	mov	r3, r0
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d103      	bne.n	80097de <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f003 fa12 	bl	800cc00 <pbuf_free>
    return;
 80097dc:	e036      	b.n	800984c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80097de:	2006      	movs	r0, #6
 80097e0:	f002 faf4 	bl	800bdcc <memp_malloc>
 80097e4:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 80097e6:	69bb      	ldr	r3, [r7, #24]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d103      	bne.n	80097f4 <recv_udp+0x88>
    pbuf_free(p);
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f003 fa07 	bl	800cc00 <pbuf_free>
    return;
 80097f2:	e02b      	b.n	800984c <recv_udp+0xe0>
  } else {
    buf->p = p;
 80097f4:	69bb      	ldr	r3, [r7, #24]
 80097f6:	687a      	ldr	r2, [r7, #4]
 80097f8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d002      	beq.n	800980c <recv_udp+0xa0>
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	e000      	b.n	800980e <recv_udp+0xa2>
 800980c:	2300      	movs	r3, #0
 800980e:	69ba      	ldr	r2, [r7, #24]
 8009810:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009816:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	891b      	ldrh	r3, [r3, #8]
 800981c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800981e:	69fb      	ldr	r3, [r7, #28]
 8009820:	3310      	adds	r3, #16
 8009822:	69b9      	ldr	r1, [r7, #24]
 8009824:	4618      	mov	r0, r3
 8009826:	f00c fc99 	bl	801615c <sys_mbox_trypost>
 800982a:	4603      	mov	r3, r0
 800982c:	2b00      	cmp	r3, #0
 800982e:	d003      	beq.n	8009838 <recv_udp+0xcc>
    netbuf_delete(buf);
 8009830:	69b8      	ldr	r0, [r7, #24]
 8009832:	f001 fb33 	bl	800ae9c <netbuf_delete>
    return;
 8009836:	e009      	b.n	800984c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009838:	69fb      	ldr	r3, [r7, #28]
 800983a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800983c:	2b00      	cmp	r3, #0
 800983e:	d005      	beq.n	800984c <recv_udp+0xe0>
 8009840:	69fb      	ldr	r3, [r7, #28]
 8009842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009844:	8afa      	ldrh	r2, [r7, #22]
 8009846:	2100      	movs	r1, #0
 8009848:	69f8      	ldr	r0, [r7, #28]
 800984a:	4798      	blx	r3
  }
}
 800984c:	3720      	adds	r7, #32
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	08017934 	.word	0x08017934
 8009858:	080179ac 	.word	0x080179ac
 800985c:	08017978 	.word	0x08017978
 8009860:	080179d0 	.word	0x080179d0
 8009864:	080179f0 	.word	0x080179f0

08009868 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b088      	sub	sp, #32
 800986c:	af00      	add	r7, sp, #0
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	607a      	str	r2, [r7, #4]
 8009874:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d106      	bne.n	800988a <recv_tcp+0x22>
 800987c:	4b36      	ldr	r3, [pc, #216]	@ (8009958 <recv_tcp+0xf0>)
 800987e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8009882:	4936      	ldr	r1, [pc, #216]	@ (800995c <recv_tcp+0xf4>)
 8009884:	4836      	ldr	r0, [pc, #216]	@ (8009960 <recv_tcp+0xf8>)
 8009886:	f00c fef3 	bl	8016670 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d106      	bne.n	800989e <recv_tcp+0x36>
 8009890:	4b31      	ldr	r3, [pc, #196]	@ (8009958 <recv_tcp+0xf0>)
 8009892:	f240 122d 	movw	r2, #301	@ 0x12d
 8009896:	4933      	ldr	r1, [pc, #204]	@ (8009964 <recv_tcp+0xfc>)
 8009898:	4831      	ldr	r0, [pc, #196]	@ (8009960 <recv_tcp+0xf8>)
 800989a:	f00c fee9 	bl	8016670 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800989e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d006      	beq.n	80098b4 <recv_tcp+0x4c>
 80098a6:	4b2c      	ldr	r3, [pc, #176]	@ (8009958 <recv_tcp+0xf0>)
 80098a8:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 80098ac:	492e      	ldr	r1, [pc, #184]	@ (8009968 <recv_tcp+0x100>)
 80098ae:	482c      	ldr	r0, [pc, #176]	@ (8009960 <recv_tcp+0xf8>)
 80098b0:	f00c fede 	bl	8016670 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d102      	bne.n	80098c4 <recv_tcp+0x5c>
    return ERR_VAL;
 80098be:	f06f 0305 	mvn.w	r3, #5
 80098c2:	e045      	b.n	8009950 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	68ba      	ldr	r2, [r7, #8]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d006      	beq.n	80098dc <recv_tcp+0x74>
 80098ce:	4b22      	ldr	r3, [pc, #136]	@ (8009958 <recv_tcp+0xf0>)
 80098d0:	f240 1235 	movw	r2, #309	@ 0x135
 80098d4:	4925      	ldr	r1, [pc, #148]	@ (800996c <recv_tcp+0x104>)
 80098d6:	4822      	ldr	r0, [pc, #136]	@ (8009960 <recv_tcp+0xf8>)
 80098d8:	f00c feca 	bl	8016670 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	3310      	adds	r3, #16
 80098e0:	4618      	mov	r0, r3
 80098e2:	f00c fc9d 	bl	8016220 <sys_mbox_valid>
 80098e6:	4603      	mov	r3, r0
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d10d      	bne.n	8009908 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d008      	beq.n	8009904 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	891b      	ldrh	r3, [r3, #8]
 80098f6:	4619      	mov	r1, r3
 80098f8:	68b8      	ldr	r0, [r7, #8]
 80098fa:	f004 f939 	bl	800db70 <tcp_recved>
      pbuf_free(p);
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f003 f97e 	bl	800cc00 <pbuf_free>
    }
    return ERR_OK;
 8009904:	2300      	movs	r3, #0
 8009906:	e023      	b.n	8009950 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d005      	beq.n	800991a <recv_tcp+0xb2>
    msg = p;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	891b      	ldrh	r3, [r3, #8]
 8009916:	83fb      	strh	r3, [r7, #30]
 8009918:	e003      	b.n	8009922 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800991a:	4b15      	ldr	r3, [pc, #84]	@ (8009970 <recv_tcp+0x108>)
 800991c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800991e:	2300      	movs	r3, #0
 8009920:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	3310      	adds	r3, #16
 8009926:	69b9      	ldr	r1, [r7, #24]
 8009928:	4618      	mov	r0, r3
 800992a:	f00c fc17 	bl	801615c <sys_mbox_trypost>
 800992e:	4603      	mov	r3, r0
 8009930:	2b00      	cmp	r3, #0
 8009932:	d002      	beq.n	800993a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8009934:	f04f 33ff 	mov.w	r3, #4294967295
 8009938:	e00a      	b.n	8009950 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800993e:	2b00      	cmp	r3, #0
 8009940:	d005      	beq.n	800994e <recv_tcp+0xe6>
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009946:	8bfa      	ldrh	r2, [r7, #30]
 8009948:	2100      	movs	r1, #0
 800994a:	6978      	ldr	r0, [r7, #20]
 800994c:	4798      	blx	r3
  }

  return ERR_OK;
 800994e:	2300      	movs	r3, #0
}
 8009950:	4618      	mov	r0, r3
 8009952:	3720      	adds	r7, #32
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}
 8009958:	08017934 	.word	0x08017934
 800995c:	08017a10 	.word	0x08017a10
 8009960:	08017978 	.word	0x08017978
 8009964:	08017a34 	.word	0x08017a34
 8009968:	08017a54 	.word	0x08017a54
 800996c:	08017a6c 	.word	0x08017a6c
 8009970:	0801aaee 	.word	0x0801aaee

08009974 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d106      	bne.n	8009996 <poll_tcp+0x22>
 8009988:	4b23      	ldr	r3, [pc, #140]	@ (8009a18 <poll_tcp+0xa4>)
 800998a:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 800998e:	4923      	ldr	r1, [pc, #140]	@ (8009a1c <poll_tcp+0xa8>)
 8009990:	4823      	ldr	r0, [pc, #140]	@ (8009a20 <poll_tcp+0xac>)
 8009992:	f00c fe6d 	bl	8016670 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	785b      	ldrb	r3, [r3, #1]
 800999a:	2b01      	cmp	r3, #1
 800999c:	d104      	bne.n	80099a8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800999e:	2101      	movs	r1, #1
 80099a0:	68f8      	ldr	r0, [r7, #12]
 80099a2:	f000 ff75 	bl	800a890 <lwip_netconn_do_writemore>
 80099a6:	e007      	b.n	80099b8 <poll_tcp+0x44>
  } else if (conn->state == NETCONN_CLOSE) {
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	785b      	ldrb	r3, [r3, #1]
 80099ac:	2b04      	cmp	r3, #4
 80099ae:	d103      	bne.n	80099b8 <poll_tcp+0x44>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
      conn->current_msg->msg.sd.polls_left--;
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80099b0:	2101      	movs	r1, #1
 80099b2:	68f8      	ldr	r0, [r7, #12]
 80099b4:	f000 fc04 	bl	800a1c0 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80099be:	f003 0310 	and.w	r3, r3, #16
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d023      	beq.n	8009a0e <poll_tcp+0x9a>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d01f      	beq.n	8009a0e <poll_tcp+0x9a>
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80099d6:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 80099da:	d318      	bcc.n	8009a0e <poll_tcp+0x9a>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80099e4:	2b04      	cmp	r3, #4
 80099e6:	d812      	bhi.n	8009a0e <poll_tcp+0x9a>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80099ee:	f023 0310 	bic.w	r3, r3, #16
 80099f2:	b2da      	uxtb	r2, r3
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d005      	beq.n	8009a0e <poll_tcp+0x9a>
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a06:	2200      	movs	r2, #0
 8009a08:	2102      	movs	r1, #2
 8009a0a:	68f8      	ldr	r0, [r7, #12]
 8009a0c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009a0e:	2300      	movs	r3, #0
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3710      	adds	r7, #16
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	08017934 	.word	0x08017934
 8009a1c:	08017a8c 	.word	0x08017a8c
 8009a20:	08017978 	.word	0x08017978

08009a24 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b086      	sub	sp, #24
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	60f8      	str	r0, [r7, #12]
 8009a2c:	60b9      	str	r1, [r7, #8]
 8009a2e:	4613      	mov	r3, r2
 8009a30:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d106      	bne.n	8009a4a <sent_tcp+0x26>
 8009a3c:	4b21      	ldr	r3, [pc, #132]	@ (8009ac4 <sent_tcp+0xa0>)
 8009a3e:	f240 1293 	movw	r2, #403	@ 0x193
 8009a42:	4921      	ldr	r1, [pc, #132]	@ (8009ac8 <sent_tcp+0xa4>)
 8009a44:	4821      	ldr	r0, [pc, #132]	@ (8009acc <sent_tcp+0xa8>)
 8009a46:	f00c fe13 	bl	8016670 <iprintf>

  if (conn) {
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d034      	beq.n	8009aba <sent_tcp+0x96>
    if (conn->state == NETCONN_WRITE) {
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	785b      	ldrb	r3, [r3, #1]
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d104      	bne.n	8009a62 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009a58:	2101      	movs	r1, #1
 8009a5a:	6978      	ldr	r0, [r7, #20]
 8009a5c:	f000 ff18 	bl	800a890 <lwip_netconn_do_writemore>
 8009a60:	e007      	b.n	8009a72 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	785b      	ldrb	r3, [r3, #1]
 8009a66:	2b04      	cmp	r3, #4
 8009a68:	d103      	bne.n	8009a72 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009a6a:	2101      	movs	r1, #1
 8009a6c:	6978      	ldr	r0, [r7, #20]
 8009a6e:	f000 fba7 	bl	800a1c0 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d01f      	beq.n	8009aba <sent_tcp+0x96>
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8009a82:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8009a86:	d318      	bcc.n	8009aba <sent_tcp+0x96>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009a90:	2b04      	cmp	r3, #4
 8009a92:	d812      	bhi.n	8009aba <sent_tcp+0x96>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a9a:	f023 0310 	bic.w	r3, r3, #16
 8009a9e:	b2da      	uxtb	r2, r3
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d005      	beq.n	8009aba <sent_tcp+0x96>
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ab2:	88fa      	ldrh	r2, [r7, #6]
 8009ab4:	2102      	movs	r1, #2
 8009ab6:	6978      	ldr	r0, [r7, #20]
 8009ab8:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009aba:	2300      	movs	r3, #0
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3718      	adds	r7, #24
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	08017934 	.word	0x08017934
 8009ac8:	08017a8c 	.word	0x08017a8c
 8009acc:	08017978 	.word	0x08017978

08009ad0 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b088      	sub	sp, #32
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	460b      	mov	r3, r1
 8009ada:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009ae0:	69fb      	ldr	r3, [r7, #28]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d106      	bne.n	8009af4 <err_tcp+0x24>
 8009ae6:	4b61      	ldr	r3, [pc, #388]	@ (8009c6c <err_tcp+0x19c>)
 8009ae8:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8009aec:	4960      	ldr	r1, [pc, #384]	@ (8009c70 <err_tcp+0x1a0>)
 8009aee:	4861      	ldr	r0, [pc, #388]	@ (8009c74 <err_tcp+0x1a4>)
 8009af0:	f00c fdbe 	bl	8016670 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8009af4:	f00c fc9e 	bl	8016434 <sys_arch_protect>
 8009af8:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8009afa:	69fb      	ldr	r3, [r7, #28]
 8009afc:	2200      	movs	r2, #0
 8009afe:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8009b00:	69fb      	ldr	r3, [r7, #28]
 8009b02:	78fa      	ldrb	r2, [r7, #3]
 8009b04:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8009b06:	69fb      	ldr	r3, [r7, #28]
 8009b08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009b0c:	f043 0301 	orr.w	r3, r3, #1
 8009b10:	b2da      	uxtb	r2, r3
 8009b12:	69fb      	ldr	r3, [r7, #28]
 8009b14:	f883 2020 	strb.w	r2, [r3, #32]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8009b18:	69fb      	ldr	r3, [r7, #28]
 8009b1a:	785b      	ldrb	r3, [r3, #1]
 8009b1c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8009b1e:	69fb      	ldr	r3, [r7, #28]
 8009b20:	2200      	movs	r2, #0
 8009b22:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8009b24:	69b8      	ldr	r0, [r7, #24]
 8009b26:	f00c fc93 	bl	8016450 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009b2a:	69fb      	ldr	r3, [r7, #28]
 8009b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d005      	beq.n	8009b3e <err_tcp+0x6e>
 8009b32:	69fb      	ldr	r3, [r7, #28]
 8009b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b36:	2200      	movs	r2, #0
 8009b38:	2104      	movs	r1, #4
 8009b3a:	69f8      	ldr	r0, [r7, #28]
 8009b3c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009b3e:	69fb      	ldr	r3, [r7, #28]
 8009b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d005      	beq.n	8009b52 <err_tcp+0x82>
 8009b46:	69fb      	ldr	r3, [r7, #28]
 8009b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	2100      	movs	r1, #0
 8009b4e:	69f8      	ldr	r0, [r7, #28]
 8009b50:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009b52:	69fb      	ldr	r3, [r7, #28]
 8009b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d005      	beq.n	8009b66 <err_tcp+0x96>
 8009b5a:	69fb      	ldr	r3, [r7, #28]
 8009b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b5e:	2200      	movs	r2, #0
 8009b60:	2102      	movs	r1, #2
 8009b62:	69f8      	ldr	r0, [r7, #28]
 8009b64:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8009b66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f7ff fd8e 	bl	800968c <lwip_netconn_err_to_msg>
 8009b70:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009b72:	69fb      	ldr	r3, [r7, #28]
 8009b74:	3310      	adds	r3, #16
 8009b76:	4618      	mov	r0, r3
 8009b78:	f00c fb52 	bl	8016220 <sys_mbox_valid>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d005      	beq.n	8009b8e <err_tcp+0xbe>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8009b82:	69fb      	ldr	r3, [r7, #28]
 8009b84:	3310      	adds	r3, #16
 8009b86:	6939      	ldr	r1, [r7, #16]
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f00c fae7 	bl	801615c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8009b8e:	69fb      	ldr	r3, [r7, #28]
 8009b90:	3314      	adds	r3, #20
 8009b92:	4618      	mov	r0, r3
 8009b94:	f00c fb44 	bl	8016220 <sys_mbox_valid>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d005      	beq.n	8009baa <err_tcp+0xda>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8009b9e:	69fb      	ldr	r3, [r7, #28]
 8009ba0:	3314      	adds	r3, #20
 8009ba2:	6939      	ldr	r1, [r7, #16]
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f00c fad9 	bl	801615c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8009baa:	7dfb      	ldrb	r3, [r7, #23]
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d005      	beq.n	8009bbc <err_tcp+0xec>
 8009bb0:	7dfb      	ldrb	r3, [r7, #23]
 8009bb2:	2b04      	cmp	r3, #4
 8009bb4:	d002      	beq.n	8009bbc <err_tcp+0xec>
 8009bb6:	7dfb      	ldrb	r3, [r7, #23]
 8009bb8:	2b03      	cmp	r3, #3
 8009bba:	d146      	bne.n	8009c4a <err_tcp+0x17a>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8009bbc:	69fb      	ldr	r3, [r7, #28]
 8009bbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009bc2:	f003 0304 	and.w	r3, r3, #4
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	bf14      	ite	ne
 8009bca:	2301      	movne	r3, #1
 8009bcc:	2300      	moveq	r3, #0
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8009bd2:	69fb      	ldr	r3, [r7, #28]
 8009bd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009bd8:	f023 0304 	bic.w	r3, r3, #4
 8009bdc:	b2da      	uxtb	r2, r3
 8009bde:	69fb      	ldr	r3, [r7, #28]
 8009be0:	f883 2020 	strb.w	r2, [r3, #32]

    if (!was_nonblocking_connect) {
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d13b      	bne.n	8009c62 <err_tcp+0x192>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009bea:	69fb      	ldr	r3, [r7, #28]
 8009bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d106      	bne.n	8009c00 <err_tcp+0x130>
 8009bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8009c6c <err_tcp+0x19c>)
 8009bf4:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8009bf8:	491f      	ldr	r1, [pc, #124]	@ (8009c78 <err_tcp+0x1a8>)
 8009bfa:	481e      	ldr	r0, [pc, #120]	@ (8009c74 <err_tcp+0x1a4>)
 8009bfc:	f00c fd38 	bl	8016670 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8009c00:	7dfb      	ldrb	r3, [r7, #23]
 8009c02:	2b04      	cmp	r3, #4
 8009c04:	d104      	bne.n	8009c10 <err_tcp+0x140>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8009c06:	69fb      	ldr	r3, [r7, #28]
 8009c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	711a      	strb	r2, [r3, #4]
 8009c0e:	e003      	b.n	8009c18 <err_tcp+0x148>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8009c10:	69fb      	ldr	r3, [r7, #28]
 8009c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c14:	78fa      	ldrb	r2, [r7, #3]
 8009c16:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009c18:	69fb      	ldr	r3, [r7, #28]
 8009c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	330c      	adds	r3, #12
 8009c20:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8009c22:	68b8      	ldr	r0, [r7, #8]
 8009c24:	f00c fb8a 	bl	801633c <sys_sem_valid>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d106      	bne.n	8009c3c <err_tcp+0x16c>
 8009c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8009c6c <err_tcp+0x19c>)
 8009c30:	f240 12ef 	movw	r2, #495	@ 0x1ef
 8009c34:	4911      	ldr	r1, [pc, #68]	@ (8009c7c <err_tcp+0x1ac>)
 8009c36:	480f      	ldr	r0, [pc, #60]	@ (8009c74 <err_tcp+0x1a4>)
 8009c38:	f00c fd1a 	bl	8016670 <iprintf>
      conn->current_msg = NULL;
 8009c3c:	69fb      	ldr	r3, [r7, #28]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	625a      	str	r2, [r3, #36]	@ 0x24
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8009c42:	68b8      	ldr	r0, [r7, #8]
 8009c44:	f00c fb60 	bl	8016308 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8009c48:	e00b      	b.n	8009c62 <err_tcp+0x192>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8009c4a:	69fb      	ldr	r3, [r7, #28]
 8009c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d008      	beq.n	8009c64 <err_tcp+0x194>
 8009c52:	4b06      	ldr	r3, [pc, #24]	@ (8009c6c <err_tcp+0x19c>)
 8009c54:	f240 12f7 	movw	r2, #503	@ 0x1f7
 8009c58:	4909      	ldr	r1, [pc, #36]	@ (8009c80 <err_tcp+0x1b0>)
 8009c5a:	4806      	ldr	r0, [pc, #24]	@ (8009c74 <err_tcp+0x1a4>)
 8009c5c:	f00c fd08 	bl	8016670 <iprintf>
  }
}
 8009c60:	e000      	b.n	8009c64 <err_tcp+0x194>
      (old_state == NETCONN_CONNECT)) {
 8009c62:	bf00      	nop
}
 8009c64:	bf00      	nop
 8009c66:	3720      	adds	r7, #32
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	08017934 	.word	0x08017934
 8009c70:	08017a8c 	.word	0x08017a8c
 8009c74:	08017978 	.word	0x08017978
 8009c78:	08017a9c 	.word	0x08017a9c
 8009c7c:	08017ab8 	.word	0x08017ab8
 8009c80:	08017ad4 	.word	0x08017ad4

08009c84 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b084      	sub	sp, #16
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8009c92:	6879      	ldr	r1, [r7, #4]
 8009c94:	68f8      	ldr	r0, [r7, #12]
 8009c96:	f004 fe33 	bl	800e900 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8009c9a:	490a      	ldr	r1, [pc, #40]	@ (8009cc4 <setup_tcp+0x40>)
 8009c9c:	68f8      	ldr	r0, [r7, #12]
 8009c9e:	f004 fe41 	bl	800e924 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8009ca2:	4909      	ldr	r1, [pc, #36]	@ (8009cc8 <setup_tcp+0x44>)
 8009ca4:	68f8      	ldr	r0, [r7, #12]
 8009ca6:	f004 fe5f 	bl	800e968 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8009caa:	2202      	movs	r2, #2
 8009cac:	4907      	ldr	r1, [pc, #28]	@ (8009ccc <setup_tcp+0x48>)
 8009cae:	68f8      	ldr	r0, [r7, #12]
 8009cb0:	f004 feb6 	bl	800ea20 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8009cb4:	4906      	ldr	r1, [pc, #24]	@ (8009cd0 <setup_tcp+0x4c>)
 8009cb6:	68f8      	ldr	r0, [r7, #12]
 8009cb8:	f004 fe78 	bl	800e9ac <tcp_err>
}
 8009cbc:	bf00      	nop
 8009cbe:	3710      	adds	r7, #16
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}
 8009cc4:	08009869 	.word	0x08009869
 8009cc8:	08009a25 	.word	0x08009a25
 8009ccc:	08009975 	.word	0x08009975
 8009cd0:	08009ad1 	.word	0x08009ad1

08009cd4 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8009cd4:	b590      	push	{r4, r7, lr}
 8009cd6:	b089      	sub	sp, #36	@ 0x24
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	60b9      	str	r1, [r7, #8]
 8009cde:	4613      	mov	r3, r2
 8009ce0:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009ce6:	69fb      	ldr	r3, [r7, #28]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d102      	bne.n	8009cf2 <accept_function+0x1e>
    return ERR_VAL;
 8009cec:	f06f 0305 	mvn.w	r3, #5
 8009cf0:	e0a1      	b.n	8009e36 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8009cf2:	69fb      	ldr	r3, [r7, #28]
 8009cf4:	3314      	adds	r3, #20
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f00c fa92 	bl	8016220 <sys_mbox_valid>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d102      	bne.n	8009d08 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8009d02:	f06f 0305 	mvn.w	r3, #5
 8009d06:	e096      	b.n	8009e36 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d11b      	bne.n	8009d46 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8009d0e:	69fb      	ldr	r3, [r7, #28]
 8009d10:	f103 0414 	add.w	r4, r3, #20
 8009d14:	f06f 000c 	mvn.w	r0, #12
 8009d18:	f7ff fcb8 	bl	800968c <lwip_netconn_err_to_msg>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	4619      	mov	r1, r3
 8009d20:	4620      	mov	r0, r4
 8009d22:	f00c fa1b 	bl	801615c <sys_mbox_trypost>
 8009d26:	4603      	mov	r3, r0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d109      	bne.n	8009d40 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009d2c:	69fb      	ldr	r3, [r7, #28]
 8009d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d005      	beq.n	8009d40 <accept_function+0x6c>
 8009d34:	69fb      	ldr	r3, [r7, #28]
 8009d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d38:	2200      	movs	r2, #0
 8009d3a:	2100      	movs	r1, #0
 8009d3c:	69f8      	ldr	r0, [r7, #28]
 8009d3e:	4798      	blx	r3
    }
    return ERR_VAL;
 8009d40:	f06f 0305 	mvn.w	r3, #5
 8009d44:	e077      	b.n	8009e36 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8009d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d006      	beq.n	8009d5c <accept_function+0x88>
 8009d4e:	4b3c      	ldr	r3, [pc, #240]	@ (8009e40 <accept_function+0x16c>)
 8009d50:	f240 222a 	movw	r2, #554	@ 0x22a
 8009d54:	493b      	ldr	r1, [pc, #236]	@ (8009e44 <accept_function+0x170>)
 8009d56:	483c      	ldr	r0, [pc, #240]	@ (8009e48 <accept_function+0x174>)
 8009d58:	f00c fc8a 	bl	8016670 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	781a      	ldrb	r2, [r3, #0]
 8009d60:	69fb      	ldr	r3, [r7, #28]
 8009d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d64:	4619      	mov	r1, r3
 8009d66:	4610      	mov	r0, r2
 8009d68:	f000 f8f0 	bl	8009f4c <netconn_alloc>
 8009d6c:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8009d6e:	69bb      	ldr	r3, [r7, #24]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d11b      	bne.n	8009dac <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8009d74:	69fb      	ldr	r3, [r7, #28]
 8009d76:	f103 0414 	add.w	r4, r3, #20
 8009d7a:	f06f 000c 	mvn.w	r0, #12
 8009d7e:	f7ff fc85 	bl	800968c <lwip_netconn_err_to_msg>
 8009d82:	4603      	mov	r3, r0
 8009d84:	4619      	mov	r1, r3
 8009d86:	4620      	mov	r0, r4
 8009d88:	f00c f9e8 	bl	801615c <sys_mbox_trypost>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d109      	bne.n	8009da6 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009d92:	69fb      	ldr	r3, [r7, #28]
 8009d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d005      	beq.n	8009da6 <accept_function+0xd2>
 8009d9a:	69fb      	ldr	r3, [r7, #28]
 8009d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d9e:	2200      	movs	r2, #0
 8009da0:	2100      	movs	r1, #0
 8009da2:	69f8      	ldr	r0, [r7, #28]
 8009da4:	4798      	blx	r3
    }
    return ERR_MEM;
 8009da6:	f04f 33ff 	mov.w	r3, #4294967295
 8009daa:	e044      	b.n	8009e36 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8009dac:	69bb      	ldr	r3, [r7, #24]
 8009dae:	68ba      	ldr	r2, [r7, #8]
 8009db0:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8009db2:	69b8      	ldr	r0, [r7, #24]
 8009db4:	f7ff ff66 	bl	8009c84 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8009db8:	69fb      	ldr	r3, [r7, #28]
 8009dba:	3314      	adds	r3, #20
 8009dbc:	69b9      	ldr	r1, [r7, #24]
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f00c f9cc 	bl	801615c <sys_mbox_trypost>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d02a      	beq.n	8009e20 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8009dca:	69bb      	ldr	r3, [r7, #24]
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8009dd0:	2100      	movs	r1, #0
 8009dd2:	6978      	ldr	r0, [r7, #20]
 8009dd4:	f004 fd94 	bl	800e900 <tcp_arg>
    tcp_recv(pcb, NULL);
 8009dd8:	2100      	movs	r1, #0
 8009dda:	6978      	ldr	r0, [r7, #20]
 8009ddc:	f004 fda2 	bl	800e924 <tcp_recv>
    tcp_sent(pcb, NULL);
 8009de0:	2100      	movs	r1, #0
 8009de2:	6978      	ldr	r0, [r7, #20]
 8009de4:	f004 fdc0 	bl	800e968 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8009de8:	2200      	movs	r2, #0
 8009dea:	2100      	movs	r1, #0
 8009dec:	6978      	ldr	r0, [r7, #20]
 8009dee:	f004 fe17 	bl	800ea20 <tcp_poll>
    tcp_err(pcb, NULL);
 8009df2:	2100      	movs	r1, #0
 8009df4:	6978      	ldr	r0, [r7, #20]
 8009df6:	f004 fdd9 	bl	800e9ac <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8009dfa:	69bb      	ldr	r3, [r7, #24]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8009e00:	69bb      	ldr	r3, [r7, #24]
 8009e02:	3310      	adds	r3, #16
 8009e04:	4618      	mov	r0, r3
 8009e06:	f00c f997 	bl	8016138 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8009e0a:	69bb      	ldr	r3, [r7, #24]
 8009e0c:	3310      	adds	r3, #16
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f00c fa17 	bl	8016242 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8009e14:	69b8      	ldr	r0, [r7, #24]
 8009e16:	f000 f90b 	bl	800a030 <netconn_free>
    return ERR_MEM;
 8009e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e1e:	e00a      	b.n	8009e36 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009e20:	69fb      	ldr	r3, [r7, #28]
 8009e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d005      	beq.n	8009e34 <accept_function+0x160>
 8009e28:	69fb      	ldr	r3, [r7, #28]
 8009e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	2100      	movs	r1, #0
 8009e30:	69f8      	ldr	r0, [r7, #28]
 8009e32:	4798      	blx	r3
  }

  return ERR_OK;
 8009e34:	2300      	movs	r3, #0
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3724      	adds	r7, #36	@ 0x24
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd90      	pop	{r4, r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	08017934 	.word	0x08017934
 8009e44:	08017af0 	.word	0x08017af0
 8009e48:	08017978 	.word	0x08017978

08009e4c <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8009e4c:	b590      	push	{r4, r7, lr}
 8009e4e:	b085      	sub	sp, #20
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8009e54:	2300      	movs	r3, #0
 8009e56:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d006      	beq.n	8009e70 <pcb_new+0x24>
 8009e62:	4b2b      	ldr	r3, [pc, #172]	@ (8009f10 <pcb_new+0xc4>)
 8009e64:	f240 2265 	movw	r2, #613	@ 0x265
 8009e68:	492a      	ldr	r1, [pc, #168]	@ (8009f14 <pcb_new+0xc8>)
 8009e6a:	482b      	ldr	r0, [pc, #172]	@ (8009f18 <pcb_new+0xcc>)
 8009e6c:	f00c fc00 	bl	8016670 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009e7a:	2b10      	cmp	r3, #16
 8009e7c:	d022      	beq.n	8009ec4 <pcb_new+0x78>
 8009e7e:	2b20      	cmp	r3, #32
 8009e80:	d133      	bne.n	8009eea <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681c      	ldr	r4, [r3, #0]
 8009e86:	7bfb      	ldrb	r3, [r7, #15]
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f009 fe12 	bl	8013ab2 <udp_new_ip_type>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d02a      	beq.n	8009ef2 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	2b22      	cmp	r3, #34	@ 0x22
 8009ea4:	d104      	bne.n	8009eb0 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	2201      	movs	r2, #1
 8009eae:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	6858      	ldr	r0, [r3, #4]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	461a      	mov	r2, r3
 8009ebc:	4917      	ldr	r1, [pc, #92]	@ (8009f1c <pcb_new+0xd0>)
 8009ebe:	f009 fd7f 	bl	80139c0 <udp_recv>
      }
      break;
 8009ec2:	e016      	b.n	8009ef2 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681c      	ldr	r4, [r3, #0]
 8009ec8:	7bfb      	ldrb	r3, [r7, #15]
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f004 fd0a 	bl	800e8e4 <tcp_new_ip_type>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d00b      	beq.n	8009ef6 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f7ff fece 	bl	8009c84 <setup_tcp>
      }
      break;
 8009ee8:	e005      	b.n	8009ef6 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	22fa      	movs	r2, #250	@ 0xfa
 8009eee:	711a      	strb	r2, [r3, #4]
      return;
 8009ef0:	e00a      	b.n	8009f08 <pcb_new+0xbc>
      break;
 8009ef2:	bf00      	nop
 8009ef4:	e000      	b.n	8009ef8 <pcb_new+0xac>
      break;
 8009ef6:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d102      	bne.n	8009f08 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	22ff      	movs	r2, #255	@ 0xff
 8009f06:	711a      	strb	r2, [r3, #4]
  }
}
 8009f08:	3714      	adds	r7, #20
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd90      	pop	{r4, r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	08017934 	.word	0x08017934
 8009f14:	08017b18 	.word	0x08017b18
 8009f18:	08017978 	.word	0x08017978
 8009f1c:	0800976d 	.word	0x0800976d

08009f20 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d102      	bne.n	8009f42 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8009f3c:	68f8      	ldr	r0, [r7, #12]
 8009f3e:	f7ff ff85 	bl	8009e4c <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8009f42:	bf00      	nop
 8009f44:	3710      	adds	r7, #16
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
	...

08009f4c <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b086      	sub	sp, #24
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	4603      	mov	r3, r0
 8009f54:	6039      	str	r1, [r7, #0]
 8009f56:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8009f5c:	2007      	movs	r0, #7
 8009f5e:	f001 ff35 	bl	800bdcc <memp_malloc>
 8009f62:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d101      	bne.n	8009f6e <netconn_alloc+0x22>
    return NULL;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	e055      	b.n	800a01a <netconn_alloc+0xce>
  }

  conn->pending_err = ERR_OK;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2200      	movs	r2, #0
 8009f72:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	79fa      	ldrb	r2, [r7, #7]
 8009f78:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8009f80:	79fb      	ldrb	r3, [r7, #7]
 8009f82:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009f86:	2b10      	cmp	r3, #16
 8009f88:	d004      	beq.n	8009f94 <netconn_alloc+0x48>
 8009f8a:	2b20      	cmp	r3, #32
 8009f8c:	d105      	bne.n	8009f9a <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8009f8e:	2306      	movs	r3, #6
 8009f90:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8009f92:	e00a      	b.n	8009faa <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8009f94:	2306      	movs	r3, #6
 8009f96:	617b      	str	r3, [r7, #20]
      break;
 8009f98:	e007      	b.n	8009faa <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8009f9a:	4b22      	ldr	r3, [pc, #136]	@ (800a024 <netconn_alloc+0xd8>)
 8009f9c:	f240 22e5 	movw	r2, #741	@ 0x2e5
 8009fa0:	4921      	ldr	r1, [pc, #132]	@ (800a028 <netconn_alloc+0xdc>)
 8009fa2:	4822      	ldr	r0, [pc, #136]	@ (800a02c <netconn_alloc+0xe0>)
 8009fa4:	f00c fb64 	bl	8016670 <iprintf>
      goto free_and_return;
 8009fa8:	e032      	b.n	800a010 <netconn_alloc+0xc4>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	3310      	adds	r3, #16
 8009fae:	6979      	ldr	r1, [r7, #20]
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f00c f8a7 	bl	8016104 <sys_mbox_new>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d128      	bne.n	800a00e <netconn_alloc+0xc2>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	330c      	adds	r3, #12
 8009fc0:	2100      	movs	r1, #0
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f00c f94a 	bl	801625c <sys_sem_new>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d005      	beq.n	8009fda <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	3310      	adds	r3, #16
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f00c f8b0 	bl	8016138 <sys_mbox_free>
    goto free_and_return;
 8009fd8:	e01a      	b.n	800a010 <netconn_alloc+0xc4>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	3314      	adds	r3, #20
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f00c f92f 	bl	8016242 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	683a      	ldr	r2, [r7, #0]
 8009fee:	629a      	str	r2, [r3, #40]	@ 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	625a      	str	r2, [r3, #36]	@ 0x24
#endif /* LWIP_TCP */
#if LWIP_SO_SNDTIMEO
  conn->send_timeout = 0;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2200      	movs	r2, #0
 800a000:	61da      	str	r2, [r3, #28]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	7cfa      	ldrb	r2, [r7, #19]
 800a006:	f883 2020 	strb.w	r2, [r3, #32]
  return conn;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	e005      	b.n	800a01a <netconn_alloc+0xce>
    goto free_and_return;
 800a00e:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800a010:	68f9      	ldr	r1, [r7, #12]
 800a012:	2007      	movs	r0, #7
 800a014:	f001 ff50 	bl	800beb8 <memp_free>
  return NULL;
 800a018:	2300      	movs	r3, #0
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3718      	adds	r7, #24
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
 800a022:	bf00      	nop
 800a024:	08017934 	.word	0x08017934
 800a028:	08017b38 	.word	0x08017b38
 800a02c:	08017978 	.word	0x08017978

0800a030 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d006      	beq.n	800a04e <netconn_free+0x1e>
 800a040:	4b1b      	ldr	r3, [pc, #108]	@ (800a0b0 <netconn_free+0x80>)
 800a042:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800a046:	491b      	ldr	r1, [pc, #108]	@ (800a0b4 <netconn_free+0x84>)
 800a048:	481b      	ldr	r0, [pc, #108]	@ (800a0b8 <netconn_free+0x88>)
 800a04a:	f00c fb11 	bl	8016670 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	3310      	adds	r3, #16
 800a052:	4618      	mov	r0, r3
 800a054:	f00c f8e4 	bl	8016220 <sys_mbox_valid>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d006      	beq.n	800a06c <netconn_free+0x3c>
 800a05e:	4b14      	ldr	r3, [pc, #80]	@ (800a0b0 <netconn_free+0x80>)
 800a060:	f240 3223 	movw	r2, #803	@ 0x323
 800a064:	4915      	ldr	r1, [pc, #84]	@ (800a0bc <netconn_free+0x8c>)
 800a066:	4814      	ldr	r0, [pc, #80]	@ (800a0b8 <netconn_free+0x88>)
 800a068:	f00c fb02 	bl	8016670 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	3314      	adds	r3, #20
 800a070:	4618      	mov	r0, r3
 800a072:	f00c f8d5 	bl	8016220 <sys_mbox_valid>
 800a076:	4603      	mov	r3, r0
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d006      	beq.n	800a08a <netconn_free+0x5a>
 800a07c:	4b0c      	ldr	r3, [pc, #48]	@ (800a0b0 <netconn_free+0x80>)
 800a07e:	f240 3226 	movw	r2, #806	@ 0x326
 800a082:	490f      	ldr	r1, [pc, #60]	@ (800a0c0 <netconn_free+0x90>)
 800a084:	480c      	ldr	r0, [pc, #48]	@ (800a0b8 <netconn_free+0x88>)
 800a086:	f00c faf3 	bl	8016670 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	330c      	adds	r3, #12
 800a08e:	4618      	mov	r0, r3
 800a090:	f00c f947 	bl	8016322 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	330c      	adds	r3, #12
 800a098:	4618      	mov	r0, r3
 800a09a:	f00c f960 	bl	801635e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800a09e:	6879      	ldr	r1, [r7, #4]
 800a0a0:	2007      	movs	r0, #7
 800a0a2:	f001 ff09 	bl	800beb8 <memp_free>
}
 800a0a6:	bf00      	nop
 800a0a8:	3708      	adds	r7, #8
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
 800a0ae:	bf00      	nop
 800a0b0:	08017934 	.word	0x08017934
 800a0b4:	08017b60 	.word	0x08017b60
 800a0b8:	08017978 	.word	0x08017978
 800a0bc:	08017b90 	.word	0x08017b90
 800a0c0:	08017bcc 	.word	0x08017bcc

0800a0c4 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b086      	sub	sp, #24
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	3310      	adds	r3, #16
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f00c f8a5 	bl	8016220 <sys_mbox_valid>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d02f      	beq.n	800a13c <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a0dc:	e018      	b.n	800a110 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a0e6:	2b10      	cmp	r3, #16
 800a0e8:	d10e      	bne.n	800a108 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	f107 020f 	add.w	r2, r7, #15
 800a0f0:	4611      	mov	r1, r2
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7ff fb00 	bl	80096f8 <lwip_netconn_is_err_msg>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d108      	bne.n	800a110 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	4618      	mov	r0, r3
 800a102:	f002 fd7d 	bl	800cc00 <pbuf_free>
 800a106:	e003      	b.n	800a110 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	4618      	mov	r0, r3
 800a10c:	f000 fec6 	bl	800ae9c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	3310      	adds	r3, #16
 800a114:	f107 0210 	add.w	r2, r7, #16
 800a118:	4611      	mov	r1, r2
 800a11a:	4618      	mov	r0, r3
 800a11c:	f00c f869 	bl	80161f2 <sys_arch_mbox_tryfetch>
 800a120:	4603      	mov	r3, r0
 800a122:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a126:	d1da      	bne.n	800a0de <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	3310      	adds	r3, #16
 800a12c:	4618      	mov	r0, r3
 800a12e:	f00c f803 	bl	8016138 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	3310      	adds	r3, #16
 800a136:	4618      	mov	r0, r3
 800a138:	f00c f883 	bl	8016242 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	3314      	adds	r3, #20
 800a140:	4618      	mov	r0, r3
 800a142:	f00c f86d 	bl	8016220 <sys_mbox_valid>
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d034      	beq.n	800a1b6 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a14c:	e01d      	b.n	800a18a <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	f107 020e 	add.w	r2, r7, #14
 800a154:	4611      	mov	r1, r2
 800a156:	4618      	mov	r0, r3
 800a158:	f7ff face 	bl	80096f8 <lwip_netconn_is_err_msg>
 800a15c:	4603      	mov	r3, r0
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d113      	bne.n	800a18a <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800a166:	6978      	ldr	r0, [r7, #20]
 800a168:	f7ff ffac 	bl	800a0c4 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d007      	beq.n	800a184 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	4618      	mov	r0, r3
 800a17a:	f003 fb31 	bl	800d7e0 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	2200      	movs	r2, #0
 800a182:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800a184:	6978      	ldr	r0, [r7, #20]
 800a186:	f7ff ff53 	bl	800a030 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	3314      	adds	r3, #20
 800a18e:	f107 0210 	add.w	r2, r7, #16
 800a192:	4611      	mov	r1, r2
 800a194:	4618      	mov	r0, r3
 800a196:	f00c f82c 	bl	80161f2 <sys_arch_mbox_tryfetch>
 800a19a:	4603      	mov	r3, r0
 800a19c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1a0:	d1d5      	bne.n	800a14e <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	3314      	adds	r3, #20
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f00b ffc6 	bl	8016138 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	3314      	adds	r3, #20
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f00c f846 	bl	8016242 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800a1b6:	bf00      	nop
 800a1b8:	3718      	adds	r7, #24
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
	...

0800a1c0 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b088      	sub	sp, #32
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	777b      	strb	r3, [r7, #29]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d106      	bne.n	800a1e4 <lwip_netconn_do_close_internal+0x24>
 800a1d6:	4b8f      	ldr	r3, [pc, #572]	@ (800a414 <lwip_netconn_do_close_internal+0x254>)
 800a1d8:	f240 32a2 	movw	r2, #930	@ 0x3a2
 800a1dc:	498e      	ldr	r1, [pc, #568]	@ (800a418 <lwip_netconn_do_close_internal+0x258>)
 800a1de:	488f      	ldr	r0, [pc, #572]	@ (800a41c <lwip_netconn_do_close_internal+0x25c>)
 800a1e0:	f00c fa46 	bl	8016670 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a1ec:	2b10      	cmp	r3, #16
 800a1ee:	d006      	beq.n	800a1fe <lwip_netconn_do_close_internal+0x3e>
 800a1f0:	4b88      	ldr	r3, [pc, #544]	@ (800a414 <lwip_netconn_do_close_internal+0x254>)
 800a1f2:	f240 32a3 	movw	r2, #931	@ 0x3a3
 800a1f6:	498a      	ldr	r1, [pc, #552]	@ (800a420 <lwip_netconn_do_close_internal+0x260>)
 800a1f8:	4888      	ldr	r0, [pc, #544]	@ (800a41c <lwip_netconn_do_close_internal+0x25c>)
 800a1fa:	f00c fa39 	bl	8016670 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	785b      	ldrb	r3, [r3, #1]
 800a202:	2b04      	cmp	r3, #4
 800a204:	d006      	beq.n	800a214 <lwip_netconn_do_close_internal+0x54>
 800a206:	4b83      	ldr	r3, [pc, #524]	@ (800a414 <lwip_netconn_do_close_internal+0x254>)
 800a208:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 800a20c:	4985      	ldr	r1, [pc, #532]	@ (800a424 <lwip_netconn_do_close_internal+0x264>)
 800a20e:	4883      	ldr	r0, [pc, #524]	@ (800a41c <lwip_netconn_do_close_internal+0x25c>)
 800a210:	f00c fa2e 	bl	8016670 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d106      	bne.n	800a22a <lwip_netconn_do_close_internal+0x6a>
 800a21c:	4b7d      	ldr	r3, [pc, #500]	@ (800a414 <lwip_netconn_do_close_internal+0x254>)
 800a21e:	f240 32a5 	movw	r2, #933	@ 0x3a5
 800a222:	4981      	ldr	r1, [pc, #516]	@ (800a428 <lwip_netconn_do_close_internal+0x268>)
 800a224:	487d      	ldr	r0, [pc, #500]	@ (800a41c <lwip_netconn_do_close_internal+0x25c>)
 800a226:	f00c fa23 	bl	8016670 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d106      	bne.n	800a240 <lwip_netconn_do_close_internal+0x80>
 800a232:	4b78      	ldr	r3, [pc, #480]	@ (800a414 <lwip_netconn_do_close_internal+0x254>)
 800a234:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800a238:	497c      	ldr	r1, [pc, #496]	@ (800a42c <lwip_netconn_do_close_internal+0x26c>)
 800a23a:	4878      	ldr	r0, [pc, #480]	@ (800a41c <lwip_netconn_do_close_internal+0x25c>)
 800a23c:	f00c fa18 	bl	8016670 <iprintf>

  tpcb = conn->pcb.tcp;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	617b      	str	r3, [r7, #20]
  shut = conn->current_msg->msg.sd.shut;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a24a:	7a1b      	ldrb	r3, [r3, #8]
 800a24c:	74fb      	strb	r3, [r7, #19]
  shut_rx = shut & NETCONN_SHUT_RD;
 800a24e:	7cfb      	ldrb	r3, [r7, #19]
 800a250:	f003 0301 	and.w	r3, r3, #1
 800a254:	74bb      	strb	r3, [r7, #18]
  shut_tx = shut & NETCONN_SHUT_WR;
 800a256:	7cfb      	ldrb	r3, [r7, #19]
 800a258:	f003 0302 	and.w	r3, r3, #2
 800a25c:	747b      	strb	r3, [r7, #17]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800a25e:	7cfb      	ldrb	r3, [r7, #19]
 800a260:	2b03      	cmp	r3, #3
 800a262:	d102      	bne.n	800a26a <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800a264:	2301      	movs	r3, #1
 800a266:	77bb      	strb	r3, [r7, #30]
 800a268:	e01f      	b.n	800a2aa <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800a26a:	7cbb      	ldrb	r3, [r7, #18]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d00e      	beq.n	800a28e <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800a274:	2b05      	cmp	r3, #5
 800a276:	d007      	beq.n	800a288 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800a27c:	2b06      	cmp	r3, #6
 800a27e:	d003      	beq.n	800a288 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800a284:	2b08      	cmp	r3, #8
 800a286:	d102      	bne.n	800a28e <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800a288:	2301      	movs	r3, #1
 800a28a:	77bb      	strb	r3, [r7, #30]
 800a28c:	e00d      	b.n	800a2aa <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800a28e:	7c7b      	ldrb	r3, [r7, #17]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d008      	beq.n	800a2a6 <lwip_netconn_do_close_internal+0xe6>
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	8b5b      	ldrh	r3, [r3, #26]
 800a298:	f003 0310 	and.w	r3, r3, #16
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d002      	beq.n	800a2a6 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	77bb      	strb	r3, [r7, #30]
 800a2a4:	e001      	b.n	800a2aa <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	77bb      	strb	r3, [r7, #30]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800a2aa:	7fbb      	ldrb	r3, [r7, #30]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d003      	beq.n	800a2b8 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800a2b0:	2100      	movs	r1, #0
 800a2b2:	6978      	ldr	r0, [r7, #20]
 800a2b4:	f004 fb24 	bl	800e900 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	7d1b      	ldrb	r3, [r3, #20]
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	d104      	bne.n	800a2ca <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800a2c0:	2100      	movs	r1, #0
 800a2c2:	6978      	ldr	r0, [r7, #20]
 800a2c4:	f004 fb94 	bl	800e9f0 <tcp_accept>
 800a2c8:	e01d      	b.n	800a306 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800a2ca:	7cbb      	ldrb	r3, [r7, #18]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d007      	beq.n	800a2e0 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800a2d0:	2100      	movs	r1, #0
 800a2d2:	6978      	ldr	r0, [r7, #20]
 800a2d4:	f004 fb26 	bl	800e924 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800a2d8:	2100      	movs	r1, #0
 800a2da:	6978      	ldr	r0, [r7, #20]
 800a2dc:	f004 fb88 	bl	800e9f0 <tcp_accept>
    }
    if (shut_tx) {
 800a2e0:	7c7b      	ldrb	r3, [r7, #17]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d003      	beq.n	800a2ee <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800a2e6:	2100      	movs	r1, #0
 800a2e8:	6978      	ldr	r0, [r7, #20]
 800a2ea:	f004 fb3d 	bl	800e968 <tcp_sent>
    }
    if (shut_close) {
 800a2ee:	7fbb      	ldrb	r3, [r7, #30]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d008      	beq.n	800a306 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	2100      	movs	r1, #0
 800a2f8:	6978      	ldr	r0, [r7, #20]
 800a2fa:	f004 fb91 	bl	800ea20 <tcp_poll>
      tcp_err(tpcb, NULL);
 800a2fe:	2100      	movs	r1, #0
 800a300:	6978      	ldr	r0, [r7, #20]
 800a302:	f004 fb53 	bl	800e9ac <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800a306:	7fbb      	ldrb	r3, [r7, #30]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d005      	beq.n	800a318 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800a30c:	6978      	ldr	r0, [r7, #20]
 800a30e:	f003 f921 	bl	800d554 <tcp_close>
 800a312:	4603      	mov	r3, r0
 800a314:	77fb      	strb	r3, [r7, #31]
 800a316:	e007      	b.n	800a328 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800a318:	7cbb      	ldrb	r3, [r7, #18]
 800a31a:	7c7a      	ldrb	r2, [r7, #17]
 800a31c:	4619      	mov	r1, r3
 800a31e:	6978      	ldr	r0, [r7, #20]
 800a320:	f003 f944 	bl	800d5ac <tcp_shutdown>
 800a324:	4603      	mov	r3, r0
 800a326:	77fb      	strb	r3, [r7, #31]
  }
  if (err == ERR_OK) {
 800a328:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d102      	bne.n	800a336 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800a330:	2301      	movs	r3, #1
 800a332:	777b      	strb	r3, [r7, #29]
 800a334:	e026      	b.n	800a384 <lwip_netconn_do_close_internal+0x1c4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800a336:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a33a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a33e:	d11f      	bne.n	800a380 <lwip_netconn_do_close_internal+0x1c0>
         nonblocking netconns, we have to wait since no standard socket application
         is prepared for close failing because of resource shortage.
         Check the timeout: this is kind of an lwip addition to the standard sockets:
         we wait for some time when failing to allocate a segment for the FIN */
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
      s32_t close_timeout = LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT;
 800a340:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800a344:	61bb      	str	r3, [r7, #24]
#if LWIP_SO_SNDTIMEO
      if (conn->send_timeout > 0) {
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	699b      	ldr	r3, [r3, #24]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	dd02      	ble.n	800a354 <lwip_netconn_do_close_internal+0x194>
        close_timeout = conn->send_timeout;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	699b      	ldr	r3, [r3, #24]
 800a352:	61bb      	str	r3, [r7, #24]
      if (conn->linger >= 0) {
        /* use linger timeout (seconds) */
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
 800a354:	f7fa ffae 	bl	80052b4 <sys_now>
 800a358:	4602      	mov	r2, r0
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	1ad3      	subs	r3, r2, r3
 800a362:	461a      	mov	r2, r3
 800a364:	69bb      	ldr	r3, [r7, #24]
 800a366:	4293      	cmp	r3, r2
 800a368:	dc0c      	bgt.n	800a384 <lwip_netconn_do_close_internal+0x1c4>
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800a36a:	2301      	movs	r3, #1
 800a36c:	777b      	strb	r3, [r7, #29]
        if (shut_close) {
 800a36e:	7fbb      	ldrb	r3, [r7, #30]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d007      	beq.n	800a384 <lwip_netconn_do_close_internal+0x1c4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800a374:	6978      	ldr	r0, [r7, #20]
 800a376:	f003 fa33 	bl	800d7e0 <tcp_abort>
          err = ERR_OK;
 800a37a:	2300      	movs	r3, #0
 800a37c:	77fb      	strb	r3, [r7, #31]
 800a37e:	e001      	b.n	800a384 <lwip_netconn_do_close_internal+0x1c4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800a380:	2301      	movs	r3, #1
 800a382:	777b      	strb	r3, [r7, #29]
    }
  }
  if (close_finished) {
 800a384:	7f7b      	ldrb	r3, [r7, #29]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d052      	beq.n	800a430 <lwip_netconn_do_close_internal+0x270>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	330c      	adds	r3, #12
 800a392:	60fb      	str	r3, [r7, #12]
    conn->current_msg->err = err;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a398:	7ffa      	ldrb	r2, [r7, #31]
 800a39a:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	625a      	str	r2, [r3, #36]	@ 0x24
    conn->state = NETCONN_NONE;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800a3a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d129      	bne.n	800a404 <lwip_netconn_do_close_internal+0x244>
      if (shut_close) {
 800a3b0:	7fbb      	ldrb	r3, [r7, #30]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d00c      	beq.n	800a3d0 <lwip_netconn_do_close_internal+0x210>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d005      	beq.n	800a3d0 <lwip_netconn_do_close_internal+0x210>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	2104      	movs	r1, #4
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	4798      	blx	r3
      }
      if (shut_rx) {
 800a3d0:	7cbb      	ldrb	r3, [r7, #18]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d009      	beq.n	800a3ea <lwip_netconn_do_close_internal+0x22a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d005      	beq.n	800a3ea <lwip_netconn_do_close_internal+0x22a>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	2100      	movs	r1, #0
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	4798      	blx	r3
      }
      if (shut_tx) {
 800a3ea:	7c7b      	ldrb	r3, [r7, #17]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d009      	beq.n	800a404 <lwip_netconn_do_close_internal+0x244>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d005      	beq.n	800a404 <lwip_netconn_do_close_internal+0x244>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	2102      	movs	r1, #2
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a404:	78fb      	ldrb	r3, [r7, #3]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d002      	beq.n	800a410 <lwip_netconn_do_close_internal+0x250>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800a40a:	68f8      	ldr	r0, [r7, #12]
 800a40c:	f00b ff7c 	bl	8016308 <sys_sem_signal>
    }
    return ERR_OK;
 800a410:	2300      	movs	r3, #0
 800a412:	e03c      	b.n	800a48e <lwip_netconn_do_close_internal+0x2ce>
 800a414:	08017934 	.word	0x08017934
 800a418:	08017c08 	.word	0x08017c08
 800a41c:	08017978 	.word	0x08017978
 800a420:	08017c18 	.word	0x08017c18
 800a424:	08017c38 	.word	0x08017c38
 800a428:	08017c5c 	.word	0x08017c5c
 800a42c:	08017a9c 	.word	0x08017a9c
  }
  if (!close_finished) {
 800a430:	7f7b      	ldrb	r3, [r7, #29]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d11e      	bne.n	800a474 <lwip_netconn_do_close_internal+0x2b4>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	7d1b      	ldrb	r3, [r3, #20]
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d106      	bne.n	800a44c <lwip_netconn_do_close_internal+0x28c>
 800a43e:	4b16      	ldr	r3, [pc, #88]	@ (800a498 <lwip_netconn_do_close_internal+0x2d8>)
 800a440:	f240 4241 	movw	r2, #1089	@ 0x441
 800a444:	4915      	ldr	r1, [pc, #84]	@ (800a49c <lwip_netconn_do_close_internal+0x2dc>)
 800a446:	4816      	ldr	r0, [pc, #88]	@ (800a4a0 <lwip_netconn_do_close_internal+0x2e0>)
 800a448:	f00c f912 	bl	8016670 <iprintf>
    if (shut_tx) {
 800a44c:	7c7b      	ldrb	r3, [r7, #17]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d003      	beq.n	800a45a <lwip_netconn_do_close_internal+0x29a>
      tcp_sent(tpcb, sent_tcp);
 800a452:	4914      	ldr	r1, [pc, #80]	@ (800a4a4 <lwip_netconn_do_close_internal+0x2e4>)
 800a454:	6978      	ldr	r0, [r7, #20]
 800a456:	f004 fa87 	bl	800e968 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800a45a:	2201      	movs	r2, #1
 800a45c:	4912      	ldr	r1, [pc, #72]	@ (800a4a8 <lwip_netconn_do_close_internal+0x2e8>)
 800a45e:	6978      	ldr	r0, [r7, #20]
 800a460:	f004 fade 	bl	800ea20 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800a464:	4911      	ldr	r1, [pc, #68]	@ (800a4ac <lwip_netconn_do_close_internal+0x2ec>)
 800a466:	6978      	ldr	r0, [r7, #20]
 800a468:	f004 faa0 	bl	800e9ac <tcp_err>
    tcp_arg(tpcb, conn);
 800a46c:	6879      	ldr	r1, [r7, #4]
 800a46e:	6978      	ldr	r0, [r7, #20]
 800a470:	f004 fa46 	bl	800e900 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800a474:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d106      	bne.n	800a48a <lwip_netconn_do_close_internal+0x2ca>
 800a47c:	4b06      	ldr	r3, [pc, #24]	@ (800a498 <lwip_netconn_do_close_internal+0x2d8>)
 800a47e:	f240 424d 	movw	r2, #1101	@ 0x44d
 800a482:	490b      	ldr	r1, [pc, #44]	@ (800a4b0 <lwip_netconn_do_close_internal+0x2f0>)
 800a484:	4806      	ldr	r0, [pc, #24]	@ (800a4a0 <lwip_netconn_do_close_internal+0x2e0>)
 800a486:	f00c f8f3 	bl	8016670 <iprintf>
  return err;
 800a48a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3720      	adds	r7, #32
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
 800a496:	bf00      	nop
 800a498:	08017934 	.word	0x08017934
 800a49c:	08017c70 	.word	0x08017c70
 800a4a0:	08017978 	.word	0x08017978
 800a4a4:	08009a25 	.word	0x08009a25
 800a4a8:	08009975 	.word	0x08009975
 800a4ac:	08009ad1 	.word	0x08009ad1
 800a4b0:	08017c94 	.word	0x08017c94

0800a4b4 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b084      	sub	sp, #16
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	785b      	ldrb	r3, [r3, #1]
 800a4c6:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800a4c8:	7afb      	ldrb	r3, [r7, #11]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d00d      	beq.n	800a4ea <lwip_netconn_do_delconn+0x36>
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a4d8:	2b10      	cmp	r3, #16
 800a4da:	d006      	beq.n	800a4ea <lwip_netconn_do_delconn+0x36>
 800a4dc:	4b61      	ldr	r3, [pc, #388]	@ (800a664 <lwip_netconn_do_delconn+0x1b0>)
 800a4de:	f240 425e 	movw	r2, #1118	@ 0x45e
 800a4e2:	4961      	ldr	r1, [pc, #388]	@ (800a668 <lwip_netconn_do_delconn+0x1b4>)
 800a4e4:	4861      	ldr	r0, [pc, #388]	@ (800a66c <lwip_netconn_do_delconn+0x1b8>)
 800a4e6:	f00c f8c3 	bl	8016670 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800a4ea:	7afb      	ldrb	r3, [r7, #11]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d005      	beq.n	800a4fc <lwip_netconn_do_delconn+0x48>
 800a4f0:	7afb      	ldrb	r3, [r7, #11]
 800a4f2:	2b02      	cmp	r3, #2
 800a4f4:	d002      	beq.n	800a4fc <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800a4f6:	7afb      	ldrb	r3, [r7, #11]
 800a4f8:	2b03      	cmp	r3, #3
 800a4fa:	d10a      	bne.n	800a512 <lwip_netconn_do_delconn+0x5e>
       (state != NETCONN_CONNECT)) ||
 800a4fc:	7afb      	ldrb	r3, [r7, #11]
 800a4fe:	2b03      	cmp	r3, #3
 800a500:	d10b      	bne.n	800a51a <lwip_netconn_do_delconn+0x66>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a50a:	f003 0304 	and.w	r3, r3, #4
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d103      	bne.n	800a51a <lwip_netconn_do_delconn+0x66>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	22fb      	movs	r2, #251	@ 0xfb
 800a516:	711a      	strb	r2, [r3, #4]
 800a518:	e098      	b.n	800a64c <lwip_netconn_do_delconn+0x198>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800a51a:	7afb      	ldrb	r3, [r7, #11]
 800a51c:	2b03      	cmp	r3, #3
 800a51e:	d10e      	bne.n	800a53e <lwip_netconn_do_delconn+0x8a>
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a528:	f003 0304 	and.w	r3, r3, #4
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d106      	bne.n	800a53e <lwip_netconn_do_delconn+0x8a>
 800a530:	4b4c      	ldr	r3, [pc, #304]	@ (800a664 <lwip_netconn_do_delconn+0x1b0>)
 800a532:	f240 427a 	movw	r2, #1146	@ 0x47a
 800a536:	494e      	ldr	r1, [pc, #312]	@ (800a670 <lwip_netconn_do_delconn+0x1bc>)
 800a538:	484c      	ldr	r0, [pc, #304]	@ (800a66c <lwip_netconn_do_delconn+0x1b8>)
 800a53a:	f00c f899 	bl	8016670 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2200      	movs	r2, #0
 800a542:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4618      	mov	r0, r3
 800a54a:	f7ff fdbb 	bl	800a0c4 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d05f      	beq.n	800a618 <lwip_netconn_do_delconn+0x164>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	781b      	ldrb	r3, [r3, #0]
 800a55e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a562:	2b10      	cmp	r3, #16
 800a564:	d00d      	beq.n	800a582 <lwip_netconn_do_delconn+0xce>
 800a566:	2b20      	cmp	r3, #32
 800a568:	d151      	bne.n	800a60e <lwip_netconn_do_delconn+0x15a>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	2200      	movs	r2, #0
 800a572:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	4618      	mov	r0, r3
 800a57c:	f009 fa40 	bl	8013a00 <udp_remove>
          break;
 800a580:	e046      	b.n	800a610 <lwip_netconn_do_delconn+0x15c>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d006      	beq.n	800a59a <lwip_netconn_do_delconn+0xe6>
 800a58c:	4b35      	ldr	r3, [pc, #212]	@ (800a664 <lwip_netconn_do_delconn+0x1b0>)
 800a58e:	f240 4294 	movw	r2, #1172	@ 0x494
 800a592:	4938      	ldr	r1, [pc, #224]	@ (800a674 <lwip_netconn_do_delconn+0x1c0>)
 800a594:	4835      	ldr	r0, [pc, #212]	@ (800a66c <lwip_netconn_do_delconn+0x1b8>)
 800a596:	f00c f86b 	bl	8016670 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	2204      	movs	r2, #4
 800a5a0:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2203      	movs	r2, #3
 800a5a6:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	68fa      	ldr	r2, [r7, #12]
 800a5ae:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	2100      	movs	r1, #0
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f7ff fe02 	bl	800a1c0 <lwip_netconn_do_close_internal>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d04b      	beq.n	800a65a <lwip_netconn_do_delconn+0x1a6>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	785b      	ldrb	r3, [r3, #1]
 800a5c8:	2b04      	cmp	r3, #4
 800a5ca:	d006      	beq.n	800a5da <lwip_netconn_do_delconn+0x126>
 800a5cc:	4b25      	ldr	r3, [pc, #148]	@ (800a664 <lwip_netconn_do_delconn+0x1b0>)
 800a5ce:	f240 429a 	movw	r2, #1178	@ 0x49a
 800a5d2:	4929      	ldr	r1, [pc, #164]	@ (800a678 <lwip_netconn_do_delconn+0x1c4>)
 800a5d4:	4825      	ldr	r0, [pc, #148]	@ (800a66c <lwip_netconn_do_delconn+0x1b8>)
 800a5d6:	f00c f84b 	bl	8016670 <iprintf>
            UNLOCK_TCPIP_CORE();
 800a5da:	4828      	ldr	r0, [pc, #160]	@ (800a67c <lwip_netconn_do_delconn+0x1c8>)
 800a5dc:	f00b fefd 	bl	80163da <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	330c      	adds	r3, #12
 800a5e6:	2100      	movs	r1, #0
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f00b fe5c 	bl	80162a6 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800a5ee:	4823      	ldr	r0, [pc, #140]	@ (800a67c <lwip_netconn_do_delconn+0x1c8>)
 800a5f0:	f00b fee4 	bl	80163bc <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	785b      	ldrb	r3, [r3, #1]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d02d      	beq.n	800a65a <lwip_netconn_do_delconn+0x1a6>
 800a5fe:	4b19      	ldr	r3, [pc, #100]	@ (800a664 <lwip_netconn_do_delconn+0x1b0>)
 800a600:	f240 429e 	movw	r2, #1182	@ 0x49e
 800a604:	491c      	ldr	r1, [pc, #112]	@ (800a678 <lwip_netconn_do_delconn+0x1c4>)
 800a606:	4819      	ldr	r0, [pc, #100]	@ (800a66c <lwip_netconn_do_delconn+0x1b8>)
 800a608:	f00c f832 	bl	8016670 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800a60c:	e025      	b.n	800a65a <lwip_netconn_do_delconn+0x1a6>
#endif /* LWIP_TCP */
        default:
          break;
 800a60e:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	2200      	movs	r2, #0
 800a616:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d007      	beq.n	800a632 <lwip_netconn_do_delconn+0x17e>
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a628:	68fa      	ldr	r2, [r7, #12]
 800a62a:	6810      	ldr	r0, [r2, #0]
 800a62c:	2200      	movs	r2, #0
 800a62e:	2100      	movs	r1, #0
 800a630:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d007      	beq.n	800a64c <lwip_netconn_do_delconn+0x198>
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a642:	68fa      	ldr	r2, [r7, #12]
 800a644:	6810      	ldr	r0, [r2, #0]
 800a646:	2200      	movs	r2, #0
 800a648:	2102      	movs	r1, #2
 800a64a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	330c      	adds	r3, #12
 800a652:	4618      	mov	r0, r3
 800a654:	f00b fe72 	bl	801633c <sys_sem_valid>
 800a658:	e000      	b.n	800a65c <lwip_netconn_do_delconn+0x1a8>
          return;
 800a65a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800a65c:	3710      	adds	r7, #16
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
 800a662:	bf00      	nop
 800a664:	08017934 	.word	0x08017934
 800a668:	08017ca4 	.word	0x08017ca4
 800a66c:	08017978 	.word	0x08017978
 800a670:	08017cb8 	.word	0x08017cb8
 800a674:	08017cd8 	.word	0x08017cd8
 800a678:	08017cf4 	.word	0x08017cf4
 800a67c:	24004de8 	.word	0x24004de8

0800a680 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b084      	sub	sp, #16
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d025      	beq.n	800a6e2 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	781b      	ldrb	r3, [r3, #0]
 800a69c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a6a0:	2b10      	cmp	r3, #16
 800a6a2:	d00e      	beq.n	800a6c2 <lwip_netconn_do_bind+0x42>
 800a6a4:	2b20      	cmp	r3, #32
 800a6a6:	d119      	bne.n	800a6dc <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	6858      	ldr	r0, [r3, #4]
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	6899      	ldr	r1, [r3, #8]
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	899b      	ldrh	r3, [r3, #12]
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	f009 f8fa 	bl	80138b0 <udp_bind>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	73fb      	strb	r3, [r7, #15]
        break;
 800a6c0:	e011      	b.n	800a6e6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	6858      	ldr	r0, [r3, #4]
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	6899      	ldr	r1, [r3, #8]
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	899b      	ldrh	r3, [r3, #12]
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	f003 f891 	bl	800d7f8 <tcp_bind>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	73fb      	strb	r3, [r7, #15]
        break;
 800a6da:	e004      	b.n	800a6e6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800a6dc:	23fa      	movs	r3, #250	@ 0xfa
 800a6de:	73fb      	strb	r3, [r7, #15]
        break;
 800a6e0:	e001      	b.n	800a6e6 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800a6e2:	23fa      	movs	r3, #250	@ 0xfa
 800a6e4:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	7bfa      	ldrb	r2, [r7, #15]
 800a6ea:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a6ec:	bf00      	nop
 800a6ee:	3710      	adds	r7, #16
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b086      	sub	sp, #24
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d07f      	beq.n	800a80a <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	781b      	ldrb	r3, [r3, #0]
 800a710:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a714:	2b10      	cmp	r3, #16
 800a716:	d175      	bne.n	800a804 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	785b      	ldrb	r3, [r3, #1]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d165      	bne.n	800a7ee <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	7d1b      	ldrb	r3, [r3, #20]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d002      	beq.n	800a734 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800a72e:	23fa      	movs	r3, #250	@ 0xfa
 800a730:	72fb      	strb	r3, [r7, #11]
 800a732:	e06c      	b.n	800a80e <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800a734:	23ff      	movs	r3, #255	@ 0xff
 800a736:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	f107 020b 	add.w	r2, r7, #11
 800a742:	7cf9      	ldrb	r1, [r7, #19]
 800a744:	4618      	mov	r0, r3
 800a746:	f003 f90f 	bl	800d968 <tcp_listen_with_backlog_and_err>
 800a74a:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d05d      	beq.n	800a80e <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	3310      	adds	r3, #16
 800a758:	4618      	mov	r0, r3
 800a75a:	f00b fd61 	bl	8016220 <sys_mbox_valid>
 800a75e:	4603      	mov	r3, r0
 800a760:	2b00      	cmp	r3, #0
 800a762:	d00b      	beq.n	800a77c <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	3310      	adds	r3, #16
 800a76a:	4618      	mov	r0, r3
 800a76c:	f00b fce4 	bl	8016138 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	3310      	adds	r3, #16
 800a776:	4618      	mov	r0, r3
 800a778:	f00b fd63 	bl	8016242 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800a77c:	2300      	movs	r3, #0
 800a77e:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	3314      	adds	r3, #20
 800a786:	4618      	mov	r0, r3
 800a788:	f00b fd4a 	bl	8016220 <sys_mbox_valid>
 800a78c:	4603      	mov	r3, r0
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d108      	bne.n	800a7a4 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	3314      	adds	r3, #20
 800a798:	2106      	movs	r1, #6
 800a79a:	4618      	mov	r0, r3
 800a79c:	f00b fcb2 	bl	8016104 <sys_mbox_new>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800a7a4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d118      	bne.n	800a7de <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	2202      	movs	r2, #2
 800a7b2:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	68fa      	ldr	r2, [r7, #12]
 800a7ba:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	685a      	ldr	r2, [r3, #4]
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	4610      	mov	r0, r2
 800a7ca:	f004 f899 	bl	800e900 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	4912      	ldr	r1, [pc, #72]	@ (800a820 <lwip_netconn_do_listen+0x12c>)
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f004 f90a 	bl	800e9f0 <tcp_accept>
 800a7dc:	e017      	b.n	800a80e <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800a7de:	68f8      	ldr	r0, [r7, #12]
 800a7e0:	f002 feb8 	bl	800d554 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	605a      	str	r2, [r3, #4]
 800a7ec:	e00f      	b.n	800a80e <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	785b      	ldrb	r3, [r3, #1]
 800a7f4:	2b02      	cmp	r3, #2
 800a7f6:	d102      	bne.n	800a7fe <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	72fb      	strb	r3, [r7, #11]
 800a7fc:	e007      	b.n	800a80e <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800a7fe:	23f5      	movs	r3, #245	@ 0xf5
 800a800:	72fb      	strb	r3, [r7, #11]
 800a802:	e004      	b.n	800a80e <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800a804:	23f0      	movs	r3, #240	@ 0xf0
 800a806:	72fb      	strb	r3, [r7, #11]
 800a808:	e001      	b.n	800a80e <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800a80a:	23f5      	movs	r3, #245	@ 0xf5
 800a80c:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800a80e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a816:	bf00      	nop
 800a818:	3718      	adds	r7, #24
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}
 800a81e:	bf00      	nop
 800a820:	08009cd5 	.word	0x08009cd5

0800a824 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b086      	sub	sp, #24
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	2200      	movs	r2, #0
 800a834:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d022      	beq.n	800a886 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a84a:	2b10      	cmp	r3, #16
 800a84c:	d11b      	bne.n	800a886 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	689b      	ldr	r3, [r3, #8]
 800a852:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a85a:	d202      	bcs.n	800a862 <lwip_netconn_do_recv+0x3e>
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	b29b      	uxth	r3, r3
 800a860:	e001      	b.n	800a866 <lwip_netconn_do_recv+0x42>
 800a862:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a866:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	89fa      	ldrh	r2, [r7, #14]
 800a870:	4611      	mov	r1, r2
 800a872:	4618      	mov	r0, r3
 800a874:	f003 f97c 	bl	800db70 <tcp_recved>
        remaining -= recved;
 800a878:	89fb      	ldrh	r3, [r7, #14]
 800a87a:	697a      	ldr	r2, [r7, #20]
 800a87c:	1ad3      	subs	r3, r2, r3
 800a87e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d1e6      	bne.n	800a854 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a886:	bf00      	nop
 800a888:	3718      	adds	r7, #24
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
	...

0800a890 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b088      	sub	sp, #32
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	460b      	mov	r3, r1
 800a89a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800a89c:	2300      	movs	r3, #0
 800a89e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d106      	bne.n	800a8b4 <lwip_netconn_do_writemore+0x24>
 800a8a6:	4b70      	ldr	r3, [pc, #448]	@ (800aa68 <lwip_netconn_do_writemore+0x1d8>)
 800a8a8:	f240 6273 	movw	r2, #1651	@ 0x673
 800a8ac:	496f      	ldr	r1, [pc, #444]	@ (800aa6c <lwip_netconn_do_writemore+0x1dc>)
 800a8ae:	4870      	ldr	r0, [pc, #448]	@ (800aa70 <lwip_netconn_do_writemore+0x1e0>)
 800a8b0:	f00b fede 	bl	8016670 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	785b      	ldrb	r3, [r3, #1]
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d006      	beq.n	800a8ca <lwip_netconn_do_writemore+0x3a>
 800a8bc:	4b6a      	ldr	r3, [pc, #424]	@ (800aa68 <lwip_netconn_do_writemore+0x1d8>)
 800a8be:	f240 6274 	movw	r2, #1652	@ 0x674
 800a8c2:	496c      	ldr	r1, [pc, #432]	@ (800aa74 <lwip_netconn_do_writemore+0x1e4>)
 800a8c4:	486a      	ldr	r0, [pc, #424]	@ (800aa70 <lwip_netconn_do_writemore+0x1e0>)
 800a8c6:	f00b fed3 	bl	8016670 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d106      	bne.n	800a8e0 <lwip_netconn_do_writemore+0x50>
 800a8d2:	4b65      	ldr	r3, [pc, #404]	@ (800aa68 <lwip_netconn_do_writemore+0x1d8>)
 800a8d4:	f240 6275 	movw	r2, #1653	@ 0x675
 800a8d8:	4967      	ldr	r1, [pc, #412]	@ (800aa78 <lwip_netconn_do_writemore+0x1e8>)
 800a8da:	4865      	ldr	r0, [pc, #404]	@ (800aa70 <lwip_netconn_do_writemore+0x1e0>)
 800a8dc:	f00b fec8 	bl	8016670 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d106      	bne.n	800a8f6 <lwip_netconn_do_writemore+0x66>
 800a8e8:	4b5f      	ldr	r3, [pc, #380]	@ (800aa68 <lwip_netconn_do_writemore+0x1d8>)
 800a8ea:	f240 6276 	movw	r2, #1654	@ 0x676
 800a8ee:	4963      	ldr	r1, [pc, #396]	@ (800aa7c <lwip_netconn_do_writemore+0x1ec>)
 800a8f0:	485f      	ldr	r0, [pc, #380]	@ (800aa70 <lwip_netconn_do_writemore+0x1e0>)
 800a8f2:	f00b febd 	bl	8016670 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8fa:	699a      	ldr	r2, [r3, #24]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a900:	695b      	ldr	r3, [r3, #20]
 800a902:	429a      	cmp	r2, r3
 800a904:	d306      	bcc.n	800a914 <lwip_netconn_do_writemore+0x84>
 800a906:	4b58      	ldr	r3, [pc, #352]	@ (800aa68 <lwip_netconn_do_writemore+0x1d8>)
 800a908:	f240 6277 	movw	r2, #1655	@ 0x677
 800a90c:	495c      	ldr	r1, [pc, #368]	@ (800aa80 <lwip_netconn_do_writemore+0x1f0>)
 800a90e:	4858      	ldr	r0, [pc, #352]	@ (800aa70 <lwip_netconn_do_writemore+0x1e0>)
 800a910:	f00b feae 	bl	8016670 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a918:	899b      	ldrh	r3, [r3, #12]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d106      	bne.n	800a92c <lwip_netconn_do_writemore+0x9c>
 800a91e:	4b52      	ldr	r3, [pc, #328]	@ (800aa68 <lwip_netconn_do_writemore+0x1d8>)
 800a920:	f240 6279 	movw	r2, #1657	@ 0x679
 800a924:	4957      	ldr	r1, [pc, #348]	@ (800aa84 <lwip_netconn_do_writemore+0x1f4>)
 800a926:	4852      	ldr	r0, [pc, #328]	@ (800aa70 <lwip_netconn_do_writemore+0x1e0>)
 800a928:	f00b fea2 	bl	8016670 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a930:	7f1b      	ldrb	r3, [r3, #28]
 800a932:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a93a:	f003 0302 	and.w	r3, r3, #2
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d104      	bne.n	800a94c <lwip_netconn_do_writemore+0xbc>
 800a942:	7ebb      	ldrb	r3, [r7, #26]
 800a944:	f003 0304 	and.w	r3, r3, #4
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d001      	beq.n	800a950 <lwip_netconn_do_writemore+0xc0>
 800a94c:	2301      	movs	r3, #1
 800a94e:	e000      	b.n	800a952 <lwip_netconn_do_writemore+0xc2>
 800a950:	2300      	movs	r3, #0
 800a952:	763b      	strb	r3, [r7, #24]

#if LWIP_SO_SNDTIMEO
  if ((conn->send_timeout != 0) &&
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	699b      	ldr	r3, [r3, #24]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d018      	beq.n	800a98e <lwip_netconn_do_writemore+0xfe>
      ((s32_t)(sys_now() - conn->current_msg->msg.w.time_started) >= conn->send_timeout)) {
 800a95c:	f7fa fcaa 	bl	80052b4 <sys_now>
 800a960:	4602      	mov	r2, r0
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a966:	6a1b      	ldr	r3, [r3, #32]
 800a968:	1ad3      	subs	r3, r2, r3
 800a96a:	461a      	mov	r2, r3
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	699b      	ldr	r3, [r3, #24]
  if ((conn->send_timeout != 0) &&
 800a970:	429a      	cmp	r2, r3
 800a972:	db0c      	blt.n	800a98e <lwip_netconn_do_writemore+0xfe>
    write_finished = 1;
 800a974:	2301      	movs	r3, #1
 800a976:	76fb      	strb	r3, [r7, #27]
    if (conn->current_msg->msg.w.offset == 0) {
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a97c:	699b      	ldr	r3, [r3, #24]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d102      	bne.n	800a988 <lwip_netconn_do_writemore+0xf8>
      /* nothing has been written */
      err = ERR_WOULDBLOCK;
 800a982:	23f9      	movs	r3, #249	@ 0xf9
 800a984:	77fb      	strb	r3, [r7, #31]
    if (conn->current_msg->msg.w.offset == 0) {
 800a986:	e14f      	b.n	800ac28 <lwip_netconn_do_writemore+0x398>
    } else {
      /* partial write */
      err = ERR_OK;
 800a988:	2300      	movs	r3, #0
 800a98a:	77fb      	strb	r3, [r7, #31]
    if (conn->current_msg->msg.w.offset == 0) {
 800a98c:	e14c      	b.n	800ac28 <lwip_netconn_do_writemore+0x398>
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a992:	689b      	ldr	r3, [r3, #8]
 800a994:	681a      	ldr	r2, [r3, #0]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a99a:	691b      	ldr	r3, [r3, #16]
 800a99c:	4413      	add	r3, r2
 800a99e:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9a4:	689b      	ldr	r3, [r3, #8]
 800a9a6:	685a      	ldr	r2, [r3, #4]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9ac:	691b      	ldr	r3, [r3, #16]
 800a9ae:	1ad3      	subs	r3, r2, r3
 800a9b0:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a9b8:	d307      	bcc.n	800a9ca <lwip_netconn_do_writemore+0x13a>
        len = 0xffff;
 800a9ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a9be:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a9c0:	7ebb      	ldrb	r3, [r7, #26]
 800a9c2:	f043 0302 	orr.w	r3, r3, #2
 800a9c6:	76bb      	strb	r3, [r7, #26]
 800a9c8:	e001      	b.n	800a9ce <lwip_netconn_do_writemore+0x13e>
      } else {
        len = (u16_t)diff;
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800a9d6:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800a9d8:	89fa      	ldrh	r2, [r7, #14]
 800a9da:	8bbb      	ldrh	r3, [r7, #28]
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d216      	bcs.n	800aa0e <lwip_netconn_do_writemore+0x17e>
        /* don't try to write more than sendbuf */
        len = available;
 800a9e0:	89fb      	ldrh	r3, [r7, #14]
 800a9e2:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800a9e4:	7e3b      	ldrb	r3, [r7, #24]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d00d      	beq.n	800aa06 <lwip_netconn_do_writemore+0x176>
          if (!len) {
 800a9ea:	8bbb      	ldrh	r3, [r7, #28]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d10e      	bne.n	800aa0e <lwip_netconn_do_writemore+0x17e>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9f4:	699b      	ldr	r3, [r3, #24]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d102      	bne.n	800aa00 <lwip_netconn_do_writemore+0x170>
 800a9fa:	f06f 0306 	mvn.w	r3, #6
 800a9fe:	e000      	b.n	800aa02 <lwip_netconn_do_writemore+0x172>
 800aa00:	2300      	movs	r3, #0
 800aa02:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800aa04:	e090      	b.n	800ab28 <lwip_netconn_do_writemore+0x298>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800aa06:	7ebb      	ldrb	r3, [r7, #26]
 800aa08:	f043 0302 	orr.w	r3, r3, #2
 800aa0c:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa12:	691a      	ldr	r2, [r3, #16]
 800aa14:	8bbb      	ldrh	r3, [r7, #28]
 800aa16:	441a      	add	r2, r3
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa1c:	689b      	ldr	r3, [r3, #8]
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d906      	bls.n	800aa32 <lwip_netconn_do_writemore+0x1a2>
 800aa24:	4b10      	ldr	r3, [pc, #64]	@ (800aa68 <lwip_netconn_do_writemore+0x1d8>)
 800aa26:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800aa2a:	4917      	ldr	r1, [pc, #92]	@ (800aa88 <lwip_netconn_do_writemore+0x1f8>)
 800aa2c:	4810      	ldr	r0, [pc, #64]	@ (800aa70 <lwip_netconn_do_writemore+0x1e0>)
 800aa2e:	f00b fe1f 	bl	8016670 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800aa32:	8bbb      	ldrh	r3, [r7, #28]
 800aa34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d103      	bne.n	800aa44 <lwip_netconn_do_writemore+0x1b4>
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa42:	d209      	bcs.n	800aa58 <lwip_netconn_do_writemore+0x1c8>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800aa48:	8bba      	ldrh	r2, [r7, #28]
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d11e      	bne.n	800aa8c <lwip_netconn_do_writemore+0x1fc>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa52:	899b      	ldrh	r3, [r3, #12]
 800aa54:	2b01      	cmp	r3, #1
 800aa56:	d919      	bls.n	800aa8c <lwip_netconn_do_writemore+0x1fc>
        write_more = 1;
 800aa58:	2301      	movs	r3, #1
 800aa5a:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800aa5c:	7ebb      	ldrb	r3, [r7, #26]
 800aa5e:	f043 0302 	orr.w	r3, r3, #2
 800aa62:	76bb      	strb	r3, [r7, #26]
 800aa64:	e014      	b.n	800aa90 <lwip_netconn_do_writemore+0x200>
 800aa66:	bf00      	nop
 800aa68:	08017934 	.word	0x08017934
 800aa6c:	08017a8c 	.word	0x08017a8c
 800aa70:	08017978 	.word	0x08017978
 800aa74:	08017d94 	.word	0x08017d94
 800aa78:	08017a9c 	.word	0x08017a9c
 800aa7c:	08017db4 	.word	0x08017db4
 800aa80:	08017dcc 	.word	0x08017dcc
 800aa84:	08017e0c 	.word	0x08017e0c
 800aa88:	08017e34 	.word	0x08017e34
      } else {
        write_more = 0;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6858      	ldr	r0, [r3, #4]
 800aa94:	7ebb      	ldrb	r3, [r7, #26]
 800aa96:	8bba      	ldrh	r2, [r7, #28]
 800aa98:	6979      	ldr	r1, [r7, #20]
 800aa9a:	f006 fe6d 	bl	8011778 <tcp_write>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800aaa2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d12c      	bne.n	800ab04 <lwip_netconn_do_writemore+0x274>
        conn->current_msg->msg.w.offset += len;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaae:	6999      	ldr	r1, [r3, #24]
 800aab0:	8bba      	ldrh	r2, [r7, #28]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aab6:	440a      	add	r2, r1
 800aab8:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aabe:	6919      	ldr	r1, [r3, #16]
 800aac0:	8bba      	ldrh	r2, [r7, #28]
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aac6:	440a      	add	r2, r1
 800aac8:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aace:	691a      	ldr	r2, [r3, #16]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aad4:	689b      	ldr	r3, [r3, #8]
 800aad6:	685b      	ldr	r3, [r3, #4]
 800aad8:	429a      	cmp	r2, r3
 800aada:	d113      	bne.n	800ab04 <lwip_netconn_do_writemore+0x274>
          conn->current_msg->msg.w.vector_cnt--;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aae0:	899a      	ldrh	r2, [r3, #12]
 800aae2:	3a01      	subs	r2, #1
 800aae4:	b292      	uxth	r2, r2
 800aae6:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaec:	899b      	ldrh	r3, [r3, #12]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d008      	beq.n	800ab04 <lwip_netconn_do_writemore+0x274>
            conn->current_msg->msg.w.vector++;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaf6:	689a      	ldr	r2, [r3, #8]
 800aaf8:	3208      	adds	r2, #8
 800aafa:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab00:	2200      	movs	r2, #0
 800ab02:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800ab04:	7e7b      	ldrb	r3, [r7, #25]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d004      	beq.n	800ab14 <lwip_netconn_do_writemore+0x284>
 800ab0a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	f43f af3d 	beq.w	800a98e <lwip_netconn_do_writemore+0xfe>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800ab14:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d004      	beq.n	800ab26 <lwip_netconn_do_writemore+0x296>
 800ab1c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ab20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab24:	d136      	bne.n	800ab94 <lwip_netconn_do_writemore+0x304>
err_mem:
 800ab26:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800ab28:	7e3b      	ldrb	r3, [r7, #24]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d01b      	beq.n	800ab66 <lwip_netconn_do_writemore+0x2d6>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab32:	699a      	ldr	r2, [r3, #24]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab38:	695b      	ldr	r3, [r3, #20]
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d213      	bcs.n	800ab66 <lwip_netconn_do_writemore+0x2d6>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d005      	beq.n	800ab52 <lwip_netconn_do_writemore+0x2c2>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	2103      	movs	r1, #3
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ab58:	f043 0310 	orr.w	r3, r3, #16
 800ab5c:	b2da      	uxtb	r2, r3
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f883 2020 	strb.w	r2, [r3, #32]
 800ab64:	e016      	b.n	800ab94 <lwip_netconn_do_writemore+0x304>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800ab6e:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800ab72:	d305      	bcc.n	800ab80 <lwip_netconn_do_writemore+0x2f0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800ab7c:	2b04      	cmp	r3, #4
 800ab7e:	d909      	bls.n	800ab94 <lwip_netconn_do_writemore+0x304>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d005      	beq.n	800ab94 <lwip_netconn_do_writemore+0x304>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	2103      	movs	r1, #3
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800ab94:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d11d      	bne.n	800abd8 <lwip_netconn_do_writemore+0x348>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aba0:	699a      	ldr	r2, [r3, #24]
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aba6:	695b      	ldr	r3, [r3, #20]
 800aba8:	429a      	cmp	r2, r3
 800abaa:	d002      	beq.n	800abb2 <lwip_netconn_do_writemore+0x322>
 800abac:	7e3b      	ldrb	r3, [r7, #24]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d001      	beq.n	800abb6 <lwip_netconn_do_writemore+0x326>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800abb2:	2301      	movs	r3, #1
 800abb4:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	4618      	mov	r0, r3
 800abbc:	f007 fbc6 	bl	801234c <tcp_output>
 800abc0:	4603      	mov	r3, r0
 800abc2:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800abc4:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800abc8:	f113 0f04 	cmn.w	r3, #4
 800abcc:	d12c      	bne.n	800ac28 <lwip_netconn_do_writemore+0x398>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800abce:	7b3b      	ldrb	r3, [r7, #12]
 800abd0:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800abd2:	2301      	movs	r3, #1
 800abd4:	76fb      	strb	r3, [r7, #27]
 800abd6:	e027      	b.n	800ac28 <lwip_netconn_do_writemore+0x398>
      }
    } else if (err == ERR_MEM) {
 800abd8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800abdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abe0:	d120      	bne.n	800ac24 <lwip_netconn_do_writemore+0x394>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	685b      	ldr	r3, [r3, #4]
 800abe6:	4618      	mov	r0, r3
 800abe8:	f007 fbb0 	bl	801234c <tcp_output>
 800abec:	4603      	mov	r3, r0
 800abee:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800abf0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800abf4:	f113 0f04 	cmn.w	r3, #4
 800abf8:	d104      	bne.n	800ac04 <lwip_netconn_do_writemore+0x374>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800abfa:	7b7b      	ldrb	r3, [r7, #13]
 800abfc:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800abfe:	2301      	movs	r3, #1
 800ac00:	76fb      	strb	r3, [r7, #27]
 800ac02:	e011      	b.n	800ac28 <lwip_netconn_do_writemore+0x398>
      } else if (dontblock) {
 800ac04:	7e3b      	ldrb	r3, [r7, #24]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d00e      	beq.n	800ac28 <lwip_netconn_do_writemore+0x398>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac0e:	699b      	ldr	r3, [r3, #24]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d102      	bne.n	800ac1a <lwip_netconn_do_writemore+0x38a>
 800ac14:	f06f 0306 	mvn.w	r3, #6
 800ac18:	e000      	b.n	800ac1c <lwip_netconn_do_writemore+0x38c>
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	76fb      	strb	r3, [r7, #27]
 800ac22:	e001      	b.n	800ac28 <lwip_netconn_do_writemore+0x398>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800ac24:	2301      	movs	r3, #1
 800ac26:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800ac28:	7efb      	ldrb	r3, [r7, #27]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d015      	beq.n	800ac5a <lwip_netconn_do_writemore+0x3ca>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	330c      	adds	r3, #12
 800ac36:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac3c:	7ffa      	ldrb	r2, [r7, #31]
 800ac3e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2200      	movs	r2, #0
 800ac44:	625a      	str	r2, [r3, #36]	@ 0x24
    conn->state = NETCONN_NONE;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800ac4c:	78fb      	ldrb	r3, [r7, #3]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d006      	beq.n	800ac60 <lwip_netconn_do_writemore+0x3d0>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800ac52:	68b8      	ldr	r0, [r7, #8]
 800ac54:	f00b fb58 	bl	8016308 <sys_sem_signal>
 800ac58:	e002      	b.n	800ac60 <lwip_netconn_do_writemore+0x3d0>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800ac5a:	f04f 33ff 	mov.w	r3, #4294967295
 800ac5e:	e000      	b.n	800ac62 <lwip_netconn_do_writemore+0x3d2>
  }
#endif
  return ERR_OK;
 800ac60:	2300      	movs	r3, #0
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3720      	adds	r7, #32
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
 800ac6a:	bf00      	nop

0800ac6c <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b084      	sub	sp, #16
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f7fe fcea 	bl	8009656 <netconn_err>
 800ac82:	4603      	mov	r3, r0
 800ac84:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800ac86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d166      	bne.n	800ad5c <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	781b      	ldrb	r3, [r3, #0]
 800ac94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ac98:	2b10      	cmp	r3, #16
 800ac9a:	d15d      	bne.n	800ad58 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	785b      	ldrb	r3, [r3, #1]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d002      	beq.n	800acac <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800aca6:	23fb      	movs	r3, #251	@ 0xfb
 800aca8:	73fb      	strb	r3, [r7, #15]
 800acaa:	e057      	b.n	800ad5c <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d04d      	beq.n	800ad52 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	2201      	movs	r2, #1
 800acbc:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d006      	beq.n	800acd6 <lwip_netconn_do_write+0x6a>
 800acc8:	4b28      	ldr	r3, [pc, #160]	@ (800ad6c <lwip_netconn_do_write+0x100>)
 800acca:	f240 7223 	movw	r2, #1827	@ 0x723
 800acce:	4928      	ldr	r1, [pc, #160]	@ (800ad70 <lwip_netconn_do_write+0x104>)
 800acd0:	4828      	ldr	r0, [pc, #160]	@ (800ad74 <lwip_netconn_do_write+0x108>)
 800acd2:	f00b fccd 	bl	8016670 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	695b      	ldr	r3, [r3, #20]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d106      	bne.n	800acec <lwip_netconn_do_write+0x80>
 800acde:	4b23      	ldr	r3, [pc, #140]	@ (800ad6c <lwip_netconn_do_write+0x100>)
 800ace0:	f240 7224 	movw	r2, #1828	@ 0x724
 800ace4:	4924      	ldr	r1, [pc, #144]	@ (800ad78 <lwip_netconn_do_write+0x10c>)
 800ace6:	4823      	ldr	r0, [pc, #140]	@ (800ad74 <lwip_netconn_do_write+0x108>)
 800ace8:	f00b fcc2 	bl	8016670 <iprintf>
        msg->conn->current_msg = msg;
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	68ba      	ldr	r2, [r7, #8]
 800acf2:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	2100      	movs	r1, #0
 800acfa:	4618      	mov	r0, r3
 800acfc:	f7ff fdc8 	bl	800a890 <lwip_netconn_do_writemore>
 800ad00:	4603      	mov	r3, r0
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d02e      	beq.n	800ad64 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	785b      	ldrb	r3, [r3, #1]
 800ad0c:	2b01      	cmp	r3, #1
 800ad0e:	d006      	beq.n	800ad1e <lwip_netconn_do_write+0xb2>
 800ad10:	4b16      	ldr	r3, [pc, #88]	@ (800ad6c <lwip_netconn_do_write+0x100>)
 800ad12:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 800ad16:	4919      	ldr	r1, [pc, #100]	@ (800ad7c <lwip_netconn_do_write+0x110>)
 800ad18:	4816      	ldr	r0, [pc, #88]	@ (800ad74 <lwip_netconn_do_write+0x108>)
 800ad1a:	f00b fca9 	bl	8016670 <iprintf>
          UNLOCK_TCPIP_CORE();
 800ad1e:	4818      	ldr	r0, [pc, #96]	@ (800ad80 <lwip_netconn_do_write+0x114>)
 800ad20:	f00b fb5b 	bl	80163da <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	330c      	adds	r3, #12
 800ad2a:	2100      	movs	r1, #0
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f00b faba 	bl	80162a6 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800ad32:	4813      	ldr	r0, [pc, #76]	@ (800ad80 <lwip_netconn_do_write+0x114>)
 800ad34:	f00b fb42 	bl	80163bc <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	785b      	ldrb	r3, [r3, #1]
 800ad3e:	2b01      	cmp	r3, #1
 800ad40:	d110      	bne.n	800ad64 <lwip_netconn_do_write+0xf8>
 800ad42:	4b0a      	ldr	r3, [pc, #40]	@ (800ad6c <lwip_netconn_do_write+0x100>)
 800ad44:	f240 722c 	movw	r2, #1836	@ 0x72c
 800ad48:	490c      	ldr	r1, [pc, #48]	@ (800ad7c <lwip_netconn_do_write+0x110>)
 800ad4a:	480a      	ldr	r0, [pc, #40]	@ (800ad74 <lwip_netconn_do_write+0x108>)
 800ad4c:	f00b fc90 	bl	8016670 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800ad50:	e008      	b.n	800ad64 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800ad52:	23f5      	movs	r3, #245	@ 0xf5
 800ad54:	73fb      	strb	r3, [r7, #15]
 800ad56:	e001      	b.n	800ad5c <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800ad58:	23fa      	movs	r3, #250	@ 0xfa
 800ad5a:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	7bfa      	ldrb	r2, [r7, #15]
 800ad60:	711a      	strb	r2, [r3, #4]
 800ad62:	e000      	b.n	800ad66 <lwip_netconn_do_write+0xfa>
        return;
 800ad64:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800ad66:	3710      	adds	r7, #16
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}
 800ad6c:	08017934 	.word	0x08017934
 800ad70:	08017cd8 	.word	0x08017cd8
 800ad74:	08017978 	.word	0x08017978
 800ad78:	08017e60 	.word	0x08017e60
 800ad7c:	08017cf4 	.word	0x08017cf4
 800ad80:	24004de8 	.word	0x24004de8

0800ad84 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	785b      	ldrb	r3, [r3, #1]
 800ad96:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	685b      	ldr	r3, [r3, #4]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d069      	beq.n	800ae76 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800adac:	2b10      	cmp	r3, #16
 800adae:	d162      	bne.n	800ae76 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800adb4:	2b03      	cmp	r3, #3
 800adb6:	d002      	beq.n	800adbe <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800adb8:	7afb      	ldrb	r3, [r7, #11]
 800adba:	2b02      	cmp	r3, #2
 800adbc:	d05b      	beq.n	800ae76 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800adbe:	7afb      	ldrb	r3, [r7, #11]
 800adc0:	2b03      	cmp	r3, #3
 800adc2:	d103      	bne.n	800adcc <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	22f5      	movs	r2, #245	@ 0xf5
 800adc8:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800adca:	e059      	b.n	800ae80 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800adcc:	7afb      	ldrb	r3, [r7, #11]
 800adce:	2b01      	cmp	r3, #1
 800add0:	d103      	bne.n	800adda <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	22fb      	movs	r2, #251	@ 0xfb
 800add6:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800add8:	e052      	b.n	800ae80 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	7a1b      	ldrb	r3, [r3, #8]
 800adde:	f003 0301 	and.w	r3, r3, #1
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d004      	beq.n	800adf0 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4618      	mov	r0, r3
 800adec:	f7ff f96a 	bl	800a0c4 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d006      	beq.n	800ae08 <lwip_netconn_do_close+0x84>
 800adfa:	4b23      	ldr	r3, [pc, #140]	@ (800ae88 <lwip_netconn_do_close+0x104>)
 800adfc:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 800ae00:	4922      	ldr	r1, [pc, #136]	@ (800ae8c <lwip_netconn_do_close+0x108>)
 800ae02:	4823      	ldr	r0, [pc, #140]	@ (800ae90 <lwip_netconn_do_close+0x10c>)
 800ae04:	f00b fc34 	bl	8016670 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	2204      	movs	r2, #4
 800ae0e:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	68fa      	ldr	r2, [r7, #12]
 800ae16:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	2100      	movs	r1, #0
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f7ff f9ce 	bl	800a1c0 <lwip_netconn_do_close_internal>
 800ae24:	4603      	mov	r3, r0
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d029      	beq.n	800ae7e <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	785b      	ldrb	r3, [r3, #1]
 800ae30:	2b04      	cmp	r3, #4
 800ae32:	d006      	beq.n	800ae42 <lwip_netconn_do_close+0xbe>
 800ae34:	4b14      	ldr	r3, [pc, #80]	@ (800ae88 <lwip_netconn_do_close+0x104>)
 800ae36:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 800ae3a:	4916      	ldr	r1, [pc, #88]	@ (800ae94 <lwip_netconn_do_close+0x110>)
 800ae3c:	4814      	ldr	r0, [pc, #80]	@ (800ae90 <lwip_netconn_do_close+0x10c>)
 800ae3e:	f00b fc17 	bl	8016670 <iprintf>
        UNLOCK_TCPIP_CORE();
 800ae42:	4815      	ldr	r0, [pc, #84]	@ (800ae98 <lwip_netconn_do_close+0x114>)
 800ae44:	f00b fac9 	bl	80163da <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	330c      	adds	r3, #12
 800ae4e:	2100      	movs	r1, #0
 800ae50:	4618      	mov	r0, r3
 800ae52:	f00b fa28 	bl	80162a6 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800ae56:	4810      	ldr	r0, [pc, #64]	@ (800ae98 <lwip_netconn_do_close+0x114>)
 800ae58:	f00b fab0 	bl	80163bc <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	785b      	ldrb	r3, [r3, #1]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d00b      	beq.n	800ae7e <lwip_netconn_do_close+0xfa>
 800ae66:	4b08      	ldr	r3, [pc, #32]	@ (800ae88 <lwip_netconn_do_close+0x104>)
 800ae68:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800ae6c:	4909      	ldr	r1, [pc, #36]	@ (800ae94 <lwip_netconn_do_close+0x110>)
 800ae6e:	4808      	ldr	r0, [pc, #32]	@ (800ae90 <lwip_netconn_do_close+0x10c>)
 800ae70:	f00b fbfe 	bl	8016670 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800ae74:	e003      	b.n	800ae7e <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	22f5      	movs	r2, #245	@ 0xf5
 800ae7a:	711a      	strb	r2, [r3, #4]
 800ae7c:	e000      	b.n	800ae80 <lwip_netconn_do_close+0xfc>
      return;
 800ae7e:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800ae80:	3710      	adds	r7, #16
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}
 800ae86:	bf00      	nop
 800ae88:	08017934 	.word	0x08017934
 800ae8c:	08017cd8 	.word	0x08017cd8
 800ae90:	08017978 	.word	0x08017978
 800ae94:	08017cf4 	.word	0x08017cf4
 800ae98:	24004de8 	.word	0x24004de8

0800ae9c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b082      	sub	sp, #8
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d013      	beq.n	800aed2 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d00b      	beq.n	800aeca <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f001 fea2 	bl	800cc00 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2200      	movs	r2, #0
 800aec0:	605a      	str	r2, [r3, #4]
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	685a      	ldr	r2, [r3, #4]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800aeca:	6879      	ldr	r1, [r7, #4]
 800aecc:	2006      	movs	r0, #6
 800aece:	f000 fff3 	bl	800beb8 <memp_free>
  }
}
 800aed2:	bf00      	nop
 800aed4:	3708      	adds	r7, #8
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
	...

0800aedc <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b082      	sub	sp, #8
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d108      	bne.n	800aefc <netbuf_next+0x20>
 800aeea:	4b11      	ldr	r3, [pc, #68]	@ (800af30 <netbuf_next+0x54>)
 800aeec:	22e0      	movs	r2, #224	@ 0xe0
 800aeee:	4911      	ldr	r1, [pc, #68]	@ (800af34 <netbuf_next+0x58>)
 800aef0:	4811      	ldr	r0, [pc, #68]	@ (800af38 <netbuf_next+0x5c>)
 800aef2:	f00b fbbd 	bl	8016670 <iprintf>
 800aef6:	f04f 33ff 	mov.w	r3, #4294967295
 800aefa:	e014      	b.n	800af26 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d102      	bne.n	800af0c <netbuf_next+0x30>
    return -1;
 800af06:	f04f 33ff 	mov.w	r3, #4294967295
 800af0a:	e00c      	b.n	800af26 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	681a      	ldr	r2, [r3, #0]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d101      	bne.n	800af24 <netbuf_next+0x48>
    return 1;
 800af20:	2301      	movs	r3, #1
 800af22:	e000      	b.n	800af26 <netbuf_next+0x4a>
  }
  return 0;
 800af24:	2300      	movs	r3, #0
}
 800af26:	4618      	mov	r0, r3
 800af28:	3708      	adds	r7, #8
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	bf00      	nop
 800af30:	08017e8c 	.word	0x08017e8c
 800af34:	08017fec 	.word	0x08017fec
 800af38:	08017edc 	.word	0x08017edc

0800af3c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b084      	sub	sp, #16
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800af46:	f008 fab9 	bl	80134bc <sys_timeouts_sleeptime>
 800af4a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af52:	d10b      	bne.n	800af6c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800af54:	4813      	ldr	r0, [pc, #76]	@ (800afa4 <tcpip_timeouts_mbox_fetch+0x68>)
 800af56:	f00b fa40 	bl	80163da <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800af5a:	2200      	movs	r2, #0
 800af5c:	6839      	ldr	r1, [r7, #0]
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f00b f916 	bl	8016190 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800af64:	480f      	ldr	r0, [pc, #60]	@ (800afa4 <tcpip_timeouts_mbox_fetch+0x68>)
 800af66:	f00b fa29 	bl	80163bc <sys_mutex_lock>
    return;
 800af6a:	e018      	b.n	800af9e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d102      	bne.n	800af78 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800af72:	f008 fa69 	bl	8013448 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800af76:	e7e6      	b.n	800af46 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800af78:	480a      	ldr	r0, [pc, #40]	@ (800afa4 <tcpip_timeouts_mbox_fetch+0x68>)
 800af7a:	f00b fa2e 	bl	80163da <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800af7e:	68fa      	ldr	r2, [r7, #12]
 800af80:	6839      	ldr	r1, [r7, #0]
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f00b f904 	bl	8016190 <sys_arch_mbox_fetch>
 800af88:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800af8a:	4806      	ldr	r0, [pc, #24]	@ (800afa4 <tcpip_timeouts_mbox_fetch+0x68>)
 800af8c:	f00b fa16 	bl	80163bc <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af96:	d102      	bne.n	800af9e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800af98:	f008 fa56 	bl	8013448 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800af9c:	e7d3      	b.n	800af46 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800af9e:	3710      	adds	r7, #16
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}
 800afa4:	24004de8 	.word	0x24004de8

0800afa8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b084      	sub	sp, #16
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800afb0:	4810      	ldr	r0, [pc, #64]	@ (800aff4 <tcpip_thread+0x4c>)
 800afb2:	f00b fa03 	bl	80163bc <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800afb6:	4b10      	ldr	r3, [pc, #64]	@ (800aff8 <tcpip_thread+0x50>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d005      	beq.n	800afca <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800afbe:	4b0e      	ldr	r3, [pc, #56]	@ (800aff8 <tcpip_thread+0x50>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	4a0e      	ldr	r2, [pc, #56]	@ (800affc <tcpip_thread+0x54>)
 800afc4:	6812      	ldr	r2, [r2, #0]
 800afc6:	4610      	mov	r0, r2
 800afc8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800afca:	f107 030c 	add.w	r3, r7, #12
 800afce:	4619      	mov	r1, r3
 800afd0:	480b      	ldr	r0, [pc, #44]	@ (800b000 <tcpip_thread+0x58>)
 800afd2:	f7ff ffb3 	bl	800af3c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d106      	bne.n	800afea <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800afdc:	4b09      	ldr	r3, [pc, #36]	@ (800b004 <tcpip_thread+0x5c>)
 800afde:	2291      	movs	r2, #145	@ 0x91
 800afe0:	4909      	ldr	r1, [pc, #36]	@ (800b008 <tcpip_thread+0x60>)
 800afe2:	480a      	ldr	r0, [pc, #40]	@ (800b00c <tcpip_thread+0x64>)
 800afe4:	f00b fb44 	bl	8016670 <iprintf>
      continue;
 800afe8:	e003      	b.n	800aff2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	4618      	mov	r0, r3
 800afee:	f000 f80f 	bl	800b010 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800aff2:	e7ea      	b.n	800afca <tcpip_thread+0x22>
 800aff4:	24004de8 	.word	0x24004de8
 800aff8:	24004ddc 	.word	0x24004ddc
 800affc:	24004de0 	.word	0x24004de0
 800b000:	24004de4 	.word	0x24004de4
 800b004:	08018024 	.word	0x08018024
 800b008:	08018054 	.word	0x08018054
 800b00c:	08018074 	.word	0x08018074

0800b010 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b082      	sub	sp, #8
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	2b02      	cmp	r3, #2
 800b01e:	d026      	beq.n	800b06e <tcpip_thread_handle_msg+0x5e>
 800b020:	2b02      	cmp	r3, #2
 800b022:	dc2b      	bgt.n	800b07c <tcpip_thread_handle_msg+0x6c>
 800b024:	2b00      	cmp	r3, #0
 800b026:	d002      	beq.n	800b02e <tcpip_thread_handle_msg+0x1e>
 800b028:	2b01      	cmp	r3, #1
 800b02a:	d015      	beq.n	800b058 <tcpip_thread_handle_msg+0x48>
 800b02c:	e026      	b.n	800b07c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	68db      	ldr	r3, [r3, #12]
 800b032:	687a      	ldr	r2, [r7, #4]
 800b034:	6850      	ldr	r0, [r2, #4]
 800b036:	687a      	ldr	r2, [r7, #4]
 800b038:	6892      	ldr	r2, [r2, #8]
 800b03a:	4611      	mov	r1, r2
 800b03c:	4798      	blx	r3
 800b03e:	4603      	mov	r3, r0
 800b040:	2b00      	cmp	r3, #0
 800b042:	d004      	beq.n	800b04e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	685b      	ldr	r3, [r3, #4]
 800b048:	4618      	mov	r0, r3
 800b04a:	f001 fdd9 	bl	800cc00 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b04e:	6879      	ldr	r1, [r7, #4]
 800b050:	2009      	movs	r0, #9
 800b052:	f000 ff31 	bl	800beb8 <memp_free>
      break;
 800b056:	e018      	b.n	800b08a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	687a      	ldr	r2, [r7, #4]
 800b05e:	6892      	ldr	r2, [r2, #8]
 800b060:	4610      	mov	r0, r2
 800b062:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b064:	6879      	ldr	r1, [r7, #4]
 800b066:	2008      	movs	r0, #8
 800b068:	f000 ff26 	bl	800beb8 <memp_free>
      break;
 800b06c:	e00d      	b.n	800b08a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	685b      	ldr	r3, [r3, #4]
 800b072:	687a      	ldr	r2, [r7, #4]
 800b074:	6892      	ldr	r2, [r2, #8]
 800b076:	4610      	mov	r0, r2
 800b078:	4798      	blx	r3
      break;
 800b07a:	e006      	b.n	800b08a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b07c:	4b05      	ldr	r3, [pc, #20]	@ (800b094 <tcpip_thread_handle_msg+0x84>)
 800b07e:	22cf      	movs	r2, #207	@ 0xcf
 800b080:	4905      	ldr	r1, [pc, #20]	@ (800b098 <tcpip_thread_handle_msg+0x88>)
 800b082:	4806      	ldr	r0, [pc, #24]	@ (800b09c <tcpip_thread_handle_msg+0x8c>)
 800b084:	f00b faf4 	bl	8016670 <iprintf>
      break;
 800b088:	bf00      	nop
  }
}
 800b08a:	bf00      	nop
 800b08c:	3708      	adds	r7, #8
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
 800b092:	bf00      	nop
 800b094:	08018024 	.word	0x08018024
 800b098:	08018054 	.word	0x08018054
 800b09c:	08018074 	.word	0x08018074

0800b0a0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b086      	sub	sp, #24
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	60f8      	str	r0, [r7, #12]
 800b0a8:	60b9      	str	r1, [r7, #8]
 800b0aa:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b0ac:	481a      	ldr	r0, [pc, #104]	@ (800b118 <tcpip_inpkt+0x78>)
 800b0ae:	f00b f8b7 	bl	8016220 <sys_mbox_valid>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d105      	bne.n	800b0c4 <tcpip_inpkt+0x24>
 800b0b8:	4b18      	ldr	r3, [pc, #96]	@ (800b11c <tcpip_inpkt+0x7c>)
 800b0ba:	22fc      	movs	r2, #252	@ 0xfc
 800b0bc:	4918      	ldr	r1, [pc, #96]	@ (800b120 <tcpip_inpkt+0x80>)
 800b0be:	4819      	ldr	r0, [pc, #100]	@ (800b124 <tcpip_inpkt+0x84>)
 800b0c0:	f00b fad6 	bl	8016670 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800b0c4:	2009      	movs	r0, #9
 800b0c6:	f000 fe81 	bl	800bdcc <memp_malloc>
 800b0ca:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d102      	bne.n	800b0d8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800b0d2:	f04f 33ff 	mov.w	r3, #4294967295
 800b0d6:	e01a      	b.n	800b10e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	68fa      	ldr	r2, [r7, #12]
 800b0e2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	68ba      	ldr	r2, [r7, #8]
 800b0e8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	687a      	ldr	r2, [r7, #4]
 800b0ee:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b0f0:	6979      	ldr	r1, [r7, #20]
 800b0f2:	4809      	ldr	r0, [pc, #36]	@ (800b118 <tcpip_inpkt+0x78>)
 800b0f4:	f00b f832 	bl	801615c <sys_mbox_trypost>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d006      	beq.n	800b10c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b0fe:	6979      	ldr	r1, [r7, #20]
 800b100:	2009      	movs	r0, #9
 800b102:	f000 fed9 	bl	800beb8 <memp_free>
    return ERR_MEM;
 800b106:	f04f 33ff 	mov.w	r3, #4294967295
 800b10a:	e000      	b.n	800b10e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800b10c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3718      	adds	r7, #24
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}
 800b116:	bf00      	nop
 800b118:	24004de4 	.word	0x24004de4
 800b11c:	08018024 	.word	0x08018024
 800b120:	0801809c 	.word	0x0801809c
 800b124:	08018074 	.word	0x08018074

0800b128 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b082      	sub	sp, #8
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b138:	f003 0318 	and.w	r3, r3, #24
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d006      	beq.n	800b14e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800b140:	4a08      	ldr	r2, [pc, #32]	@ (800b164 <tcpip_input+0x3c>)
 800b142:	6839      	ldr	r1, [r7, #0]
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f7ff ffab 	bl	800b0a0 <tcpip_inpkt>
 800b14a:	4603      	mov	r3, r0
 800b14c:	e005      	b.n	800b15a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800b14e:	4a06      	ldr	r2, [pc, #24]	@ (800b168 <tcpip_input+0x40>)
 800b150:	6839      	ldr	r1, [r7, #0]
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f7ff ffa4 	bl	800b0a0 <tcpip_inpkt>
 800b158:	4603      	mov	r3, r0
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3708      	adds	r7, #8
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
 800b162:	bf00      	nop
 800b164:	08015f59 	.word	0x08015f59
 800b168:	08014e61 	.word	0x08014e61

0800b16c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b084      	sub	sp, #16
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b176:	4819      	ldr	r0, [pc, #100]	@ (800b1dc <tcpip_try_callback+0x70>)
 800b178:	f00b f852 	bl	8016220 <sys_mbox_valid>
 800b17c:	4603      	mov	r3, r0
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d106      	bne.n	800b190 <tcpip_try_callback+0x24>
 800b182:	4b17      	ldr	r3, [pc, #92]	@ (800b1e0 <tcpip_try_callback+0x74>)
 800b184:	f240 125d 	movw	r2, #349	@ 0x15d
 800b188:	4916      	ldr	r1, [pc, #88]	@ (800b1e4 <tcpip_try_callback+0x78>)
 800b18a:	4817      	ldr	r0, [pc, #92]	@ (800b1e8 <tcpip_try_callback+0x7c>)
 800b18c:	f00b fa70 	bl	8016670 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800b190:	2008      	movs	r0, #8
 800b192:	f000 fe1b 	bl	800bdcc <memp_malloc>
 800b196:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d102      	bne.n	800b1a4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800b19e:	f04f 33ff 	mov.w	r3, #4294967295
 800b1a2:	e017      	b.n	800b1d4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	683a      	ldr	r2, [r7, #0]
 800b1b4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b1b6:	68f9      	ldr	r1, [r7, #12]
 800b1b8:	4808      	ldr	r0, [pc, #32]	@ (800b1dc <tcpip_try_callback+0x70>)
 800b1ba:	f00a ffcf 	bl	801615c <sys_mbox_trypost>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d006      	beq.n	800b1d2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800b1c4:	68f9      	ldr	r1, [r7, #12]
 800b1c6:	2008      	movs	r0, #8
 800b1c8:	f000 fe76 	bl	800beb8 <memp_free>
    return ERR_MEM;
 800b1cc:	f04f 33ff 	mov.w	r3, #4294967295
 800b1d0:	e000      	b.n	800b1d4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800b1d2:	2300      	movs	r3, #0
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3710      	adds	r7, #16
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}
 800b1dc:	24004de4 	.word	0x24004de4
 800b1e0:	08018024 	.word	0x08018024
 800b1e4:	0801809c 	.word	0x0801809c
 800b1e8:	08018074 	.word	0x08018074

0800b1ec <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b084      	sub	sp, #16
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	60f8      	str	r0, [r7, #12]
 800b1f4:	60b9      	str	r1, [r7, #8]
 800b1f6:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800b1f8:	4806      	ldr	r0, [pc, #24]	@ (800b214 <tcpip_send_msg_wait_sem+0x28>)
 800b1fa:	f00b f8df 	bl	80163bc <sys_mutex_lock>
  fn(apimsg);
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	68b8      	ldr	r0, [r7, #8]
 800b202:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800b204:	4803      	ldr	r0, [pc, #12]	@ (800b214 <tcpip_send_msg_wait_sem+0x28>)
 800b206:	f00b f8e8 	bl	80163da <sys_mutex_unlock>
  return ERR_OK;
 800b20a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3710      	adds	r7, #16
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}
 800b214:	24004de8 	.word	0x24004de8

0800b218 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b084      	sub	sp, #16
 800b21c:	af02      	add	r7, sp, #8
 800b21e:	6078      	str	r0, [r7, #4]
 800b220:	6039      	str	r1, [r7, #0]
  lwip_init();
 800b222:	f000 f92d 	bl	800b480 <lwip_init>

  tcpip_init_done = initfunc;
 800b226:	4a17      	ldr	r2, [pc, #92]	@ (800b284 <tcpip_init+0x6c>)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800b22c:	4a16      	ldr	r2, [pc, #88]	@ (800b288 <tcpip_init+0x70>)
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b232:	2106      	movs	r1, #6
 800b234:	4815      	ldr	r0, [pc, #84]	@ (800b28c <tcpip_init+0x74>)
 800b236:	f00a ff65 	bl	8016104 <sys_mbox_new>
 800b23a:	4603      	mov	r3, r0
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d006      	beq.n	800b24e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800b240:	4b13      	ldr	r3, [pc, #76]	@ (800b290 <tcpip_init+0x78>)
 800b242:	f240 2261 	movw	r2, #609	@ 0x261
 800b246:	4913      	ldr	r1, [pc, #76]	@ (800b294 <tcpip_init+0x7c>)
 800b248:	4813      	ldr	r0, [pc, #76]	@ (800b298 <tcpip_init+0x80>)
 800b24a:	f00b fa11 	bl	8016670 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800b24e:	4813      	ldr	r0, [pc, #76]	@ (800b29c <tcpip_init+0x84>)
 800b250:	f00b f89e 	bl	8016390 <sys_mutex_new>
 800b254:	4603      	mov	r3, r0
 800b256:	2b00      	cmp	r3, #0
 800b258:	d006      	beq.n	800b268 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800b25a:	4b0d      	ldr	r3, [pc, #52]	@ (800b290 <tcpip_init+0x78>)
 800b25c:	f240 2265 	movw	r2, #613	@ 0x265
 800b260:	490f      	ldr	r1, [pc, #60]	@ (800b2a0 <tcpip_init+0x88>)
 800b262:	480d      	ldr	r0, [pc, #52]	@ (800b298 <tcpip_init+0x80>)
 800b264:	f00b fa04 	bl	8016670 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800b268:	2318      	movs	r3, #24
 800b26a:	9300      	str	r3, [sp, #0]
 800b26c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b270:	2200      	movs	r2, #0
 800b272:	490c      	ldr	r1, [pc, #48]	@ (800b2a4 <tcpip_init+0x8c>)
 800b274:	480c      	ldr	r0, [pc, #48]	@ (800b2a8 <tcpip_init+0x90>)
 800b276:	f00b f8bd 	bl	80163f4 <sys_thread_new>
}
 800b27a:	bf00      	nop
 800b27c:	3708      	adds	r7, #8
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
 800b282:	bf00      	nop
 800b284:	24004ddc 	.word	0x24004ddc
 800b288:	24004de0 	.word	0x24004de0
 800b28c:	24004de4 	.word	0x24004de4
 800b290:	08018024 	.word	0x08018024
 800b294:	080180ac 	.word	0x080180ac
 800b298:	08018074 	.word	0x08018074
 800b29c:	24004de8 	.word	0x24004de8
 800b2a0:	080180d0 	.word	0x080180d0
 800b2a4:	0800afa9 	.word	0x0800afa9
 800b2a8:	080180f4 	.word	0x080180f4

0800b2ac <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b083      	sub	sp, #12
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b2b6:	88fb      	ldrh	r3, [r7, #6]
 800b2b8:	021b      	lsls	r3, r3, #8
 800b2ba:	b21a      	sxth	r2, r3
 800b2bc:	88fb      	ldrh	r3, [r7, #6]
 800b2be:	0a1b      	lsrs	r3, r3, #8
 800b2c0:	b29b      	uxth	r3, r3
 800b2c2:	b21b      	sxth	r3, r3
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	b21b      	sxth	r3, r3
 800b2c8:	b29b      	uxth	r3, r3
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	370c      	adds	r7, #12
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d4:	4770      	bx	lr

0800b2d6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b2d6:	b480      	push	{r7}
 800b2d8:	b083      	sub	sp, #12
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	061a      	lsls	r2, r3, #24
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	021b      	lsls	r3, r3, #8
 800b2e6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b2ea:	431a      	orrs	r2, r3
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	0a1b      	lsrs	r3, r3, #8
 800b2f0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b2f4:	431a      	orrs	r2, r3
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	0e1b      	lsrs	r3, r3, #24
 800b2fa:	4313      	orrs	r3, r2
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	370c      	adds	r7, #12
 800b300:	46bd      	mov	sp, r7
 800b302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b306:	4770      	bx	lr

0800b308 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800b308:	b480      	push	{r7}
 800b30a:	b089      	sub	sp, #36	@ 0x24
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
 800b310:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800b316:	2300      	movs	r3, #0
 800b318:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800b31a:	2300      	movs	r3, #0
 800b31c:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800b31e:	69fb      	ldr	r3, [r7, #28]
 800b320:	f003 0301 	and.w	r3, r3, #1
 800b324:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d00d      	beq.n	800b348 <lwip_standard_chksum+0x40>
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	dd0a      	ble.n	800b348 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800b332:	69fa      	ldr	r2, [r7, #28]
 800b334:	1c53      	adds	r3, r2, #1
 800b336:	61fb      	str	r3, [r7, #28]
 800b338:	f107 030e 	add.w	r3, r7, #14
 800b33c:	3301      	adds	r3, #1
 800b33e:	7812      	ldrb	r2, [r2, #0]
 800b340:	701a      	strb	r2, [r3, #0]
    len--;
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	3b01      	subs	r3, #1
 800b346:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800b348:	69fb      	ldr	r3, [r7, #28]
 800b34a:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800b34c:	e00a      	b.n	800b364 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800b34e:	69bb      	ldr	r3, [r7, #24]
 800b350:	1c9a      	adds	r2, r3, #2
 800b352:	61ba      	str	r2, [r7, #24]
 800b354:	881b      	ldrh	r3, [r3, #0]
 800b356:	461a      	mov	r2, r3
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	4413      	add	r3, r2
 800b35c:	617b      	str	r3, [r7, #20]
    len -= 2;
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	3b02      	subs	r3, #2
 800b362:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	2b01      	cmp	r3, #1
 800b368:	dcf1      	bgt.n	800b34e <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	dd04      	ble.n	800b37a <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800b370:	f107 030e 	add.w	r3, r7, #14
 800b374:	69ba      	ldr	r2, [r7, #24]
 800b376:	7812      	ldrb	r2, [r2, #0]
 800b378:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800b37a:	89fb      	ldrh	r3, [r7, #14]
 800b37c:	461a      	mov	r2, r3
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	4413      	add	r3, r2
 800b382:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	0c1a      	lsrs	r2, r3, #16
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	b29b      	uxth	r3, r3
 800b38c:	4413      	add	r3, r2
 800b38e:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	0c1a      	lsrs	r2, r3, #16
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	b29b      	uxth	r3, r3
 800b398:	4413      	add	r3, r2
 800b39a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d007      	beq.n	800b3b2 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	021b      	lsls	r3, r3, #8
 800b3a6:	b29a      	uxth	r2, r3
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	0a1b      	lsrs	r3, r3, #8
 800b3ac:	b2db      	uxtb	r3, r3
 800b3ae:	4313      	orrs	r3, r2
 800b3b0:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	b29b      	uxth	r3, r3
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3724      	adds	r7, #36	@ 0x24
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr

0800b3c2 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800b3c2:	b580      	push	{r7, lr}
 800b3c4:	b082      	sub	sp, #8
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	6078      	str	r0, [r7, #4]
 800b3ca:	460b      	mov	r3, r1
 800b3cc:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800b3ce:	887b      	ldrh	r3, [r7, #2]
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f7ff ff98 	bl	800b308 <lwip_standard_chksum>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	43db      	mvns	r3, r3
 800b3dc:	b29b      	uxth	r3, r3
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3708      	adds	r7, #8
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}

0800b3e6 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800b3e6:	b580      	push	{r7, lr}
 800b3e8:	b086      	sub	sp, #24
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	613b      	str	r3, [r7, #16]
 800b3fa:	e02b      	b.n	800b454 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	685a      	ldr	r2, [r3, #4]
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	895b      	ldrh	r3, [r3, #10]
 800b404:	4619      	mov	r1, r3
 800b406:	4610      	mov	r0, r2
 800b408:	f7ff ff7e 	bl	800b308 <lwip_standard_chksum>
 800b40c:	4603      	mov	r3, r0
 800b40e:	461a      	mov	r2, r3
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	4413      	add	r3, r2
 800b414:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	0c1a      	lsrs	r2, r3, #16
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	b29b      	uxth	r3, r3
 800b41e:	4413      	add	r3, r2
 800b420:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	895b      	ldrh	r3, [r3, #10]
 800b426:	f003 0301 	and.w	r3, r3, #1
 800b42a:	b29b      	uxth	r3, r3
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d00e      	beq.n	800b44e <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2b00      	cmp	r3, #0
 800b434:	bf0c      	ite	eq
 800b436:	2301      	moveq	r3, #1
 800b438:	2300      	movne	r3, #0
 800b43a:	b2db      	uxtb	r3, r3
 800b43c:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	021b      	lsls	r3, r3, #8
 800b442:	b29a      	uxth	r2, r3
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	0a1b      	lsrs	r3, r3, #8
 800b448:	b2db      	uxtb	r3, r3
 800b44a:	4313      	orrs	r3, r2
 800b44c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	613b      	str	r3, [r7, #16]
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d1d0      	bne.n	800b3fc <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d007      	beq.n	800b470 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	021b      	lsls	r3, r3, #8
 800b464:	b29a      	uxth	r2, r3
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	0a1b      	lsrs	r3, r3, #8
 800b46a:	b2db      	uxtb	r3, r3
 800b46c:	4313      	orrs	r3, r2
 800b46e:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	b29b      	uxth	r3, r3
 800b474:	43db      	mvns	r3, r3
 800b476:	b29b      	uxth	r3, r3
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3718      	adds	r7, #24
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}

0800b480 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b082      	sub	sp, #8
 800b484:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b486:	2300      	movs	r3, #0
 800b488:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b48a:	f00a ff75 	bl	8016378 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b48e:	f000 f8d5 	bl	800b63c <mem_init>
  memp_init();
 800b492:	f000 fc2d 	bl	800bcf0 <memp_init>
  pbuf_init();
  netif_init();
 800b496:	f000 fd39 	bl	800bf0c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b49a:	f008 f847 	bl	801352c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b49e:	f001 fe49 	bl	800d134 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b4a2:	f007 ff89 	bl	80133b8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b4a6:	bf00      	nop
 800b4a8:	3708      	adds	r7, #8
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}
	...

0800b4b0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b083      	sub	sp, #12
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b4ba:	4b05      	ldr	r3, [pc, #20]	@ (800b4d0 <ptr_to_mem+0x20>)
 800b4bc:	681a      	ldr	r2, [r3, #0]
 800b4be:	88fb      	ldrh	r3, [r7, #6]
 800b4c0:	4413      	add	r3, r2
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	370c      	adds	r7, #12
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4cc:	4770      	bx	lr
 800b4ce:	bf00      	nop
 800b4d0:	24004e04 	.word	0x24004e04

0800b4d4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b083      	sub	sp, #12
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b4dc:	4b05      	ldr	r3, [pc, #20]	@ (800b4f4 <mem_to_ptr+0x20>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	687a      	ldr	r2, [r7, #4]
 800b4e2:	1ad3      	subs	r3, r2, r3
 800b4e4:	b29b      	uxth	r3, r3
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	370c      	adds	r7, #12
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f0:	4770      	bx	lr
 800b4f2:	bf00      	nop
 800b4f4:	24004e04 	.word	0x24004e04

0800b4f8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b4f8:	b590      	push	{r4, r7, lr}
 800b4fa:	b085      	sub	sp, #20
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b500:	4b45      	ldr	r3, [pc, #276]	@ (800b618 <plug_holes+0x120>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	687a      	ldr	r2, [r7, #4]
 800b506:	429a      	cmp	r2, r3
 800b508:	d206      	bcs.n	800b518 <plug_holes+0x20>
 800b50a:	4b44      	ldr	r3, [pc, #272]	@ (800b61c <plug_holes+0x124>)
 800b50c:	f240 12df 	movw	r2, #479	@ 0x1df
 800b510:	4943      	ldr	r1, [pc, #268]	@ (800b620 <plug_holes+0x128>)
 800b512:	4844      	ldr	r0, [pc, #272]	@ (800b624 <plug_holes+0x12c>)
 800b514:	f00b f8ac 	bl	8016670 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b518:	4b43      	ldr	r3, [pc, #268]	@ (800b628 <plug_holes+0x130>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	687a      	ldr	r2, [r7, #4]
 800b51e:	429a      	cmp	r2, r3
 800b520:	d306      	bcc.n	800b530 <plug_holes+0x38>
 800b522:	4b3e      	ldr	r3, [pc, #248]	@ (800b61c <plug_holes+0x124>)
 800b524:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800b528:	4940      	ldr	r1, [pc, #256]	@ (800b62c <plug_holes+0x134>)
 800b52a:	483e      	ldr	r0, [pc, #248]	@ (800b624 <plug_holes+0x12c>)
 800b52c:	f00b f8a0 	bl	8016670 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	791b      	ldrb	r3, [r3, #4]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d006      	beq.n	800b546 <plug_holes+0x4e>
 800b538:	4b38      	ldr	r3, [pc, #224]	@ (800b61c <plug_holes+0x124>)
 800b53a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800b53e:	493c      	ldr	r1, [pc, #240]	@ (800b630 <plug_holes+0x138>)
 800b540:	4838      	ldr	r0, [pc, #224]	@ (800b624 <plug_holes+0x12c>)
 800b542:	f00b f895 	bl	8016670 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	881b      	ldrh	r3, [r3, #0]
 800b54a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b54e:	d906      	bls.n	800b55e <plug_holes+0x66>
 800b550:	4b32      	ldr	r3, [pc, #200]	@ (800b61c <plug_holes+0x124>)
 800b552:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800b556:	4937      	ldr	r1, [pc, #220]	@ (800b634 <plug_holes+0x13c>)
 800b558:	4832      	ldr	r0, [pc, #200]	@ (800b624 <plug_holes+0x12c>)
 800b55a:	f00b f889 	bl	8016670 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	881b      	ldrh	r3, [r3, #0]
 800b562:	4618      	mov	r0, r3
 800b564:	f7ff ffa4 	bl	800b4b0 <ptr_to_mem>
 800b568:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b56a:	687a      	ldr	r2, [r7, #4]
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	429a      	cmp	r2, r3
 800b570:	d024      	beq.n	800b5bc <plug_holes+0xc4>
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	791b      	ldrb	r3, [r3, #4]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d120      	bne.n	800b5bc <plug_holes+0xc4>
 800b57a:	4b2b      	ldr	r3, [pc, #172]	@ (800b628 <plug_holes+0x130>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	68fa      	ldr	r2, [r7, #12]
 800b580:	429a      	cmp	r2, r3
 800b582:	d01b      	beq.n	800b5bc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b584:	4b2c      	ldr	r3, [pc, #176]	@ (800b638 <plug_holes+0x140>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	68fa      	ldr	r2, [r7, #12]
 800b58a:	429a      	cmp	r2, r3
 800b58c:	d102      	bne.n	800b594 <plug_holes+0x9c>
      lfree = mem;
 800b58e:	4a2a      	ldr	r2, [pc, #168]	@ (800b638 <plug_holes+0x140>)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	881a      	ldrh	r2, [r3, #0]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	881b      	ldrh	r3, [r3, #0]
 800b5a0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b5a4:	d00a      	beq.n	800b5bc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	881b      	ldrh	r3, [r3, #0]
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f7ff ff80 	bl	800b4b0 <ptr_to_mem>
 800b5b0:	4604      	mov	r4, r0
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f7ff ff8e 	bl	800b4d4 <mem_to_ptr>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	885b      	ldrh	r3, [r3, #2]
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f7ff ff75 	bl	800b4b0 <ptr_to_mem>
 800b5c6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b5c8:	68ba      	ldr	r2, [r7, #8]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d01f      	beq.n	800b610 <plug_holes+0x118>
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	791b      	ldrb	r3, [r3, #4]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d11b      	bne.n	800b610 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b5d8:	4b17      	ldr	r3, [pc, #92]	@ (800b638 <plug_holes+0x140>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	687a      	ldr	r2, [r7, #4]
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	d102      	bne.n	800b5e8 <plug_holes+0xf0>
      lfree = pmem;
 800b5e2:	4a15      	ldr	r2, [pc, #84]	@ (800b638 <plug_holes+0x140>)
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	881a      	ldrh	r2, [r3, #0]
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	881b      	ldrh	r3, [r3, #0]
 800b5f4:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b5f8:	d00a      	beq.n	800b610 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	881b      	ldrh	r3, [r3, #0]
 800b5fe:	4618      	mov	r0, r3
 800b600:	f7ff ff56 	bl	800b4b0 <ptr_to_mem>
 800b604:	4604      	mov	r4, r0
 800b606:	68b8      	ldr	r0, [r7, #8]
 800b608:	f7ff ff64 	bl	800b4d4 <mem_to_ptr>
 800b60c:	4603      	mov	r3, r0
 800b60e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b610:	bf00      	nop
 800b612:	3714      	adds	r7, #20
 800b614:	46bd      	mov	sp, r7
 800b616:	bd90      	pop	{r4, r7, pc}
 800b618:	24004e04 	.word	0x24004e04
 800b61c:	08018104 	.word	0x08018104
 800b620:	08018134 	.word	0x08018134
 800b624:	0801814c 	.word	0x0801814c
 800b628:	24004e08 	.word	0x24004e08
 800b62c:	08018174 	.word	0x08018174
 800b630:	08018190 	.word	0x08018190
 800b634:	080181ac 	.word	0x080181ac
 800b638:	24004e10 	.word	0x24004e10

0800b63c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b082      	sub	sp, #8
 800b640:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b642:	4b1d      	ldr	r3, [pc, #116]	@ (800b6b8 <mem_init+0x7c>)
 800b644:	4a1d      	ldr	r2, [pc, #116]	@ (800b6bc <mem_init+0x80>)
 800b646:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b648:	4b1b      	ldr	r3, [pc, #108]	@ (800b6b8 <mem_init+0x7c>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800b654:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2200      	movs	r2, #0
 800b65a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2200      	movs	r2, #0
 800b660:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b662:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 800b666:	f7ff ff23 	bl	800b4b0 <ptr_to_mem>
 800b66a:	4603      	mov	r3, r0
 800b66c:	4a14      	ldr	r2, [pc, #80]	@ (800b6c0 <mem_init+0x84>)
 800b66e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b670:	4b13      	ldr	r3, [pc, #76]	@ (800b6c0 <mem_init+0x84>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	2201      	movs	r2, #1
 800b676:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b678:	4b11      	ldr	r3, [pc, #68]	@ (800b6c0 <mem_init+0x84>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800b680:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b682:	4b0f      	ldr	r3, [pc, #60]	@ (800b6c0 <mem_init+0x84>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800b68a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b68c:	4b0a      	ldr	r3, [pc, #40]	@ (800b6b8 <mem_init+0x7c>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4a0c      	ldr	r2, [pc, #48]	@ (800b6c4 <mem_init+0x88>)
 800b692:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b694:	480c      	ldr	r0, [pc, #48]	@ (800b6c8 <mem_init+0x8c>)
 800b696:	f00a fe7b 	bl	8016390 <sys_mutex_new>
 800b69a:	4603      	mov	r3, r0
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d006      	beq.n	800b6ae <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b6a0:	4b0a      	ldr	r3, [pc, #40]	@ (800b6cc <mem_init+0x90>)
 800b6a2:	f240 221f 	movw	r2, #543	@ 0x21f
 800b6a6:	490a      	ldr	r1, [pc, #40]	@ (800b6d0 <mem_init+0x94>)
 800b6a8:	480a      	ldr	r0, [pc, #40]	@ (800b6d4 <mem_init+0x98>)
 800b6aa:	f00a ffe1 	bl	8016670 <iprintf>
  }
}
 800b6ae:	bf00      	nop
 800b6b0:	3708      	adds	r7, #8
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	24004e04 	.word	0x24004e04
 800b6bc:	30004000 	.word	0x30004000
 800b6c0:	24004e08 	.word	0x24004e08
 800b6c4:	24004e10 	.word	0x24004e10
 800b6c8:	24004e0c 	.word	0x24004e0c
 800b6cc:	08018104 	.word	0x08018104
 800b6d0:	080181d8 	.word	0x080181d8
 800b6d4:	0801814c 	.word	0x0801814c

0800b6d8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b086      	sub	sp, #24
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f7ff fef7 	bl	800b4d4 <mem_to_ptr>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	881b      	ldrh	r3, [r3, #0]
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7ff fede 	bl	800b4b0 <ptr_to_mem>
 800b6f4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	885b      	ldrh	r3, [r3, #2]
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f7ff fed8 	bl	800b4b0 <ptr_to_mem>
 800b700:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	881b      	ldrh	r3, [r3, #0]
 800b706:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b70a:	d818      	bhi.n	800b73e <mem_link_valid+0x66>
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	885b      	ldrh	r3, [r3, #2]
 800b710:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b714:	d813      	bhi.n	800b73e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b71a:	8afa      	ldrh	r2, [r7, #22]
 800b71c:	429a      	cmp	r2, r3
 800b71e:	d004      	beq.n	800b72a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	881b      	ldrh	r3, [r3, #0]
 800b724:	8afa      	ldrh	r2, [r7, #22]
 800b726:	429a      	cmp	r2, r3
 800b728:	d109      	bne.n	800b73e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b72a:	4b08      	ldr	r3, [pc, #32]	@ (800b74c <mem_link_valid+0x74>)
 800b72c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b72e:	693a      	ldr	r2, [r7, #16]
 800b730:	429a      	cmp	r2, r3
 800b732:	d006      	beq.n	800b742 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	885b      	ldrh	r3, [r3, #2]
 800b738:	8afa      	ldrh	r2, [r7, #22]
 800b73a:	429a      	cmp	r2, r3
 800b73c:	d001      	beq.n	800b742 <mem_link_valid+0x6a>
    return 0;
 800b73e:	2300      	movs	r3, #0
 800b740:	e000      	b.n	800b744 <mem_link_valid+0x6c>
  }
  return 1;
 800b742:	2301      	movs	r3, #1
}
 800b744:	4618      	mov	r0, r3
 800b746:	3718      	adds	r7, #24
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}
 800b74c:	24004e08 	.word	0x24004e08

0800b750 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b088      	sub	sp, #32
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d070      	beq.n	800b840 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f003 0303 	and.w	r3, r3, #3
 800b764:	2b00      	cmp	r3, #0
 800b766:	d00d      	beq.n	800b784 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800b768:	4b37      	ldr	r3, [pc, #220]	@ (800b848 <mem_free+0xf8>)
 800b76a:	f240 2273 	movw	r2, #627	@ 0x273
 800b76e:	4937      	ldr	r1, [pc, #220]	@ (800b84c <mem_free+0xfc>)
 800b770:	4837      	ldr	r0, [pc, #220]	@ (800b850 <mem_free+0x100>)
 800b772:	f00a ff7d 	bl	8016670 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b776:	f00a fe5d 	bl	8016434 <sys_arch_protect>
 800b77a:	60f8      	str	r0, [r7, #12]
 800b77c:	68f8      	ldr	r0, [r7, #12]
 800b77e:	f00a fe67 	bl	8016450 <sys_arch_unprotect>
    return;
 800b782:	e05e      	b.n	800b842 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	3b08      	subs	r3, #8
 800b788:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800b78a:	4b32      	ldr	r3, [pc, #200]	@ (800b854 <mem_free+0x104>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	69fa      	ldr	r2, [r7, #28]
 800b790:	429a      	cmp	r2, r3
 800b792:	d306      	bcc.n	800b7a2 <mem_free+0x52>
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f103 020c 	add.w	r2, r3, #12
 800b79a:	4b2f      	ldr	r3, [pc, #188]	@ (800b858 <mem_free+0x108>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	d90d      	bls.n	800b7be <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800b7a2:	4b29      	ldr	r3, [pc, #164]	@ (800b848 <mem_free+0xf8>)
 800b7a4:	f240 227f 	movw	r2, #639	@ 0x27f
 800b7a8:	492c      	ldr	r1, [pc, #176]	@ (800b85c <mem_free+0x10c>)
 800b7aa:	4829      	ldr	r0, [pc, #164]	@ (800b850 <mem_free+0x100>)
 800b7ac:	f00a ff60 	bl	8016670 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b7b0:	f00a fe40 	bl	8016434 <sys_arch_protect>
 800b7b4:	6138      	str	r0, [r7, #16]
 800b7b6:	6938      	ldr	r0, [r7, #16]
 800b7b8:	f00a fe4a 	bl	8016450 <sys_arch_unprotect>
    return;
 800b7bc:	e041      	b.n	800b842 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b7be:	4828      	ldr	r0, [pc, #160]	@ (800b860 <mem_free+0x110>)
 800b7c0:	f00a fdfc 	bl	80163bc <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800b7c4:	69fb      	ldr	r3, [r7, #28]
 800b7c6:	791b      	ldrb	r3, [r3, #4]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d110      	bne.n	800b7ee <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b7cc:	4b1e      	ldr	r3, [pc, #120]	@ (800b848 <mem_free+0xf8>)
 800b7ce:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800b7d2:	4924      	ldr	r1, [pc, #144]	@ (800b864 <mem_free+0x114>)
 800b7d4:	481e      	ldr	r0, [pc, #120]	@ (800b850 <mem_free+0x100>)
 800b7d6:	f00a ff4b 	bl	8016670 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b7da:	4821      	ldr	r0, [pc, #132]	@ (800b860 <mem_free+0x110>)
 800b7dc:	f00a fdfd 	bl	80163da <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b7e0:	f00a fe28 	bl	8016434 <sys_arch_protect>
 800b7e4:	6178      	str	r0, [r7, #20]
 800b7e6:	6978      	ldr	r0, [r7, #20]
 800b7e8:	f00a fe32 	bl	8016450 <sys_arch_unprotect>
    return;
 800b7ec:	e029      	b.n	800b842 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800b7ee:	69f8      	ldr	r0, [r7, #28]
 800b7f0:	f7ff ff72 	bl	800b6d8 <mem_link_valid>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d110      	bne.n	800b81c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b7fa:	4b13      	ldr	r3, [pc, #76]	@ (800b848 <mem_free+0xf8>)
 800b7fc:	f240 2295 	movw	r2, #661	@ 0x295
 800b800:	4919      	ldr	r1, [pc, #100]	@ (800b868 <mem_free+0x118>)
 800b802:	4813      	ldr	r0, [pc, #76]	@ (800b850 <mem_free+0x100>)
 800b804:	f00a ff34 	bl	8016670 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b808:	4815      	ldr	r0, [pc, #84]	@ (800b860 <mem_free+0x110>)
 800b80a:	f00a fde6 	bl	80163da <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b80e:	f00a fe11 	bl	8016434 <sys_arch_protect>
 800b812:	61b8      	str	r0, [r7, #24]
 800b814:	69b8      	ldr	r0, [r7, #24]
 800b816:	f00a fe1b 	bl	8016450 <sys_arch_unprotect>
    return;
 800b81a:	e012      	b.n	800b842 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800b81c:	69fb      	ldr	r3, [r7, #28]
 800b81e:	2200      	movs	r2, #0
 800b820:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b822:	4b12      	ldr	r3, [pc, #72]	@ (800b86c <mem_free+0x11c>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	69fa      	ldr	r2, [r7, #28]
 800b828:	429a      	cmp	r2, r3
 800b82a:	d202      	bcs.n	800b832 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b82c:	4a0f      	ldr	r2, [pc, #60]	@ (800b86c <mem_free+0x11c>)
 800b82e:	69fb      	ldr	r3, [r7, #28]
 800b830:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b832:	69f8      	ldr	r0, [r7, #28]
 800b834:	f7ff fe60 	bl	800b4f8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b838:	4809      	ldr	r0, [pc, #36]	@ (800b860 <mem_free+0x110>)
 800b83a:	f00a fdce 	bl	80163da <sys_mutex_unlock>
 800b83e:	e000      	b.n	800b842 <mem_free+0xf2>
    return;
 800b840:	bf00      	nop
}
 800b842:	3720      	adds	r7, #32
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}
 800b848:	08018104 	.word	0x08018104
 800b84c:	080181f4 	.word	0x080181f4
 800b850:	0801814c 	.word	0x0801814c
 800b854:	24004e04 	.word	0x24004e04
 800b858:	24004e08 	.word	0x24004e08
 800b85c:	08018218 	.word	0x08018218
 800b860:	24004e0c 	.word	0x24004e0c
 800b864:	08018234 	.word	0x08018234
 800b868:	0801825c 	.word	0x0801825c
 800b86c:	24004e10 	.word	0x24004e10

0800b870 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b088      	sub	sp, #32
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	460b      	mov	r3, r1
 800b87a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b87c:	887b      	ldrh	r3, [r7, #2]
 800b87e:	3303      	adds	r3, #3
 800b880:	b29b      	uxth	r3, r3
 800b882:	f023 0303 	bic.w	r3, r3, #3
 800b886:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800b888:	8bfb      	ldrh	r3, [r7, #30]
 800b88a:	2b0b      	cmp	r3, #11
 800b88c:	d801      	bhi.n	800b892 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b88e:	230c      	movs	r3, #12
 800b890:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b892:	8bfb      	ldrh	r3, [r7, #30]
 800b894:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b898:	d803      	bhi.n	800b8a2 <mem_trim+0x32>
 800b89a:	8bfa      	ldrh	r2, [r7, #30]
 800b89c:	887b      	ldrh	r3, [r7, #2]
 800b89e:	429a      	cmp	r2, r3
 800b8a0:	d201      	bcs.n	800b8a6 <mem_trim+0x36>
    return NULL;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	e0d8      	b.n	800ba58 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b8a6:	4b6e      	ldr	r3, [pc, #440]	@ (800ba60 <mem_trim+0x1f0>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	687a      	ldr	r2, [r7, #4]
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	d304      	bcc.n	800b8ba <mem_trim+0x4a>
 800b8b0:	4b6c      	ldr	r3, [pc, #432]	@ (800ba64 <mem_trim+0x1f4>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	687a      	ldr	r2, [r7, #4]
 800b8b6:	429a      	cmp	r2, r3
 800b8b8:	d306      	bcc.n	800b8c8 <mem_trim+0x58>
 800b8ba:	4b6b      	ldr	r3, [pc, #428]	@ (800ba68 <mem_trim+0x1f8>)
 800b8bc:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800b8c0:	496a      	ldr	r1, [pc, #424]	@ (800ba6c <mem_trim+0x1fc>)
 800b8c2:	486b      	ldr	r0, [pc, #428]	@ (800ba70 <mem_trim+0x200>)
 800b8c4:	f00a fed4 	bl	8016670 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b8c8:	4b65      	ldr	r3, [pc, #404]	@ (800ba60 <mem_trim+0x1f0>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	687a      	ldr	r2, [r7, #4]
 800b8ce:	429a      	cmp	r2, r3
 800b8d0:	d304      	bcc.n	800b8dc <mem_trim+0x6c>
 800b8d2:	4b64      	ldr	r3, [pc, #400]	@ (800ba64 <mem_trim+0x1f4>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	687a      	ldr	r2, [r7, #4]
 800b8d8:	429a      	cmp	r2, r3
 800b8da:	d307      	bcc.n	800b8ec <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b8dc:	f00a fdaa 	bl	8016434 <sys_arch_protect>
 800b8e0:	60b8      	str	r0, [r7, #8]
 800b8e2:	68b8      	ldr	r0, [r7, #8]
 800b8e4:	f00a fdb4 	bl	8016450 <sys_arch_unprotect>
    return rmem;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	e0b5      	b.n	800ba58 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	3b08      	subs	r3, #8
 800b8f0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800b8f2:	69b8      	ldr	r0, [r7, #24]
 800b8f4:	f7ff fdee 	bl	800b4d4 <mem_to_ptr>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b8fc:	69bb      	ldr	r3, [r7, #24]
 800b8fe:	881a      	ldrh	r2, [r3, #0]
 800b900:	8afb      	ldrh	r3, [r7, #22]
 800b902:	1ad3      	subs	r3, r2, r3
 800b904:	b29b      	uxth	r3, r3
 800b906:	3b08      	subs	r3, #8
 800b908:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b90a:	8bfa      	ldrh	r2, [r7, #30]
 800b90c:	8abb      	ldrh	r3, [r7, #20]
 800b90e:	429a      	cmp	r2, r3
 800b910:	d906      	bls.n	800b920 <mem_trim+0xb0>
 800b912:	4b55      	ldr	r3, [pc, #340]	@ (800ba68 <mem_trim+0x1f8>)
 800b914:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800b918:	4956      	ldr	r1, [pc, #344]	@ (800ba74 <mem_trim+0x204>)
 800b91a:	4855      	ldr	r0, [pc, #340]	@ (800ba70 <mem_trim+0x200>)
 800b91c:	f00a fea8 	bl	8016670 <iprintf>
  if (newsize > size) {
 800b920:	8bfa      	ldrh	r2, [r7, #30]
 800b922:	8abb      	ldrh	r3, [r7, #20]
 800b924:	429a      	cmp	r2, r3
 800b926:	d901      	bls.n	800b92c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800b928:	2300      	movs	r3, #0
 800b92a:	e095      	b.n	800ba58 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800b92c:	8bfa      	ldrh	r2, [r7, #30]
 800b92e:	8abb      	ldrh	r3, [r7, #20]
 800b930:	429a      	cmp	r2, r3
 800b932:	d101      	bne.n	800b938 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	e08f      	b.n	800ba58 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b938:	484f      	ldr	r0, [pc, #316]	@ (800ba78 <mem_trim+0x208>)
 800b93a:	f00a fd3f 	bl	80163bc <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800b93e:	69bb      	ldr	r3, [r7, #24]
 800b940:	881b      	ldrh	r3, [r3, #0]
 800b942:	4618      	mov	r0, r3
 800b944:	f7ff fdb4 	bl	800b4b0 <ptr_to_mem>
 800b948:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	791b      	ldrb	r3, [r3, #4]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d13f      	bne.n	800b9d2 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b952:	69bb      	ldr	r3, [r7, #24]
 800b954:	881b      	ldrh	r3, [r3, #0]
 800b956:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b95a:	d106      	bne.n	800b96a <mem_trim+0xfa>
 800b95c:	4b42      	ldr	r3, [pc, #264]	@ (800ba68 <mem_trim+0x1f8>)
 800b95e:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800b962:	4946      	ldr	r1, [pc, #280]	@ (800ba7c <mem_trim+0x20c>)
 800b964:	4842      	ldr	r0, [pc, #264]	@ (800ba70 <mem_trim+0x200>)
 800b966:	f00a fe83 	bl	8016670 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800b96a:	693b      	ldr	r3, [r7, #16]
 800b96c:	881b      	ldrh	r3, [r3, #0]
 800b96e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b970:	8afa      	ldrh	r2, [r7, #22]
 800b972:	8bfb      	ldrh	r3, [r7, #30]
 800b974:	4413      	add	r3, r2
 800b976:	b29b      	uxth	r3, r3
 800b978:	3308      	adds	r3, #8
 800b97a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b97c:	4b40      	ldr	r3, [pc, #256]	@ (800ba80 <mem_trim+0x210>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	693a      	ldr	r2, [r7, #16]
 800b982:	429a      	cmp	r2, r3
 800b984:	d106      	bne.n	800b994 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800b986:	89fb      	ldrh	r3, [r7, #14]
 800b988:	4618      	mov	r0, r3
 800b98a:	f7ff fd91 	bl	800b4b0 <ptr_to_mem>
 800b98e:	4603      	mov	r3, r0
 800b990:	4a3b      	ldr	r2, [pc, #236]	@ (800ba80 <mem_trim+0x210>)
 800b992:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b994:	89fb      	ldrh	r3, [r7, #14]
 800b996:	4618      	mov	r0, r3
 800b998:	f7ff fd8a 	bl	800b4b0 <ptr_to_mem>
 800b99c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	89ba      	ldrh	r2, [r7, #12]
 800b9a8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	8afa      	ldrh	r2, [r7, #22]
 800b9ae:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b9b0:	69bb      	ldr	r3, [r7, #24]
 800b9b2:	89fa      	ldrh	r2, [r7, #14]
 800b9b4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	881b      	ldrh	r3, [r3, #0]
 800b9ba:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b9be:	d047      	beq.n	800ba50 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	881b      	ldrh	r3, [r3, #0]
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f7ff fd73 	bl	800b4b0 <ptr_to_mem>
 800b9ca:	4602      	mov	r2, r0
 800b9cc:	89fb      	ldrh	r3, [r7, #14]
 800b9ce:	8053      	strh	r3, [r2, #2]
 800b9d0:	e03e      	b.n	800ba50 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b9d2:	8bfb      	ldrh	r3, [r7, #30]
 800b9d4:	f103 0214 	add.w	r2, r3, #20
 800b9d8:	8abb      	ldrh	r3, [r7, #20]
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d838      	bhi.n	800ba50 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b9de:	8afa      	ldrh	r2, [r7, #22]
 800b9e0:	8bfb      	ldrh	r3, [r7, #30]
 800b9e2:	4413      	add	r3, r2
 800b9e4:	b29b      	uxth	r3, r3
 800b9e6:	3308      	adds	r3, #8
 800b9e8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b9ea:	69bb      	ldr	r3, [r7, #24]
 800b9ec:	881b      	ldrh	r3, [r3, #0]
 800b9ee:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b9f2:	d106      	bne.n	800ba02 <mem_trim+0x192>
 800b9f4:	4b1c      	ldr	r3, [pc, #112]	@ (800ba68 <mem_trim+0x1f8>)
 800b9f6:	f240 3216 	movw	r2, #790	@ 0x316
 800b9fa:	4920      	ldr	r1, [pc, #128]	@ (800ba7c <mem_trim+0x20c>)
 800b9fc:	481c      	ldr	r0, [pc, #112]	@ (800ba70 <mem_trim+0x200>)
 800b9fe:	f00a fe37 	bl	8016670 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800ba02:	89fb      	ldrh	r3, [r7, #14]
 800ba04:	4618      	mov	r0, r3
 800ba06:	f7ff fd53 	bl	800b4b0 <ptr_to_mem>
 800ba0a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800ba0c:	4b1c      	ldr	r3, [pc, #112]	@ (800ba80 <mem_trim+0x210>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	693a      	ldr	r2, [r7, #16]
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d202      	bcs.n	800ba1c <mem_trim+0x1ac>
      lfree = mem2;
 800ba16:	4a1a      	ldr	r2, [pc, #104]	@ (800ba80 <mem_trim+0x210>)
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800ba22:	69bb      	ldr	r3, [r7, #24]
 800ba24:	881a      	ldrh	r2, [r3, #0]
 800ba26:	693b      	ldr	r3, [r7, #16]
 800ba28:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	8afa      	ldrh	r2, [r7, #22]
 800ba2e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800ba30:	69bb      	ldr	r3, [r7, #24]
 800ba32:	89fa      	ldrh	r2, [r7, #14]
 800ba34:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	881b      	ldrh	r3, [r3, #0]
 800ba3a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800ba3e:	d007      	beq.n	800ba50 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	881b      	ldrh	r3, [r3, #0]
 800ba44:	4618      	mov	r0, r3
 800ba46:	f7ff fd33 	bl	800b4b0 <ptr_to_mem>
 800ba4a:	4602      	mov	r2, r0
 800ba4c:	89fb      	ldrh	r3, [r7, #14]
 800ba4e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ba50:	4809      	ldr	r0, [pc, #36]	@ (800ba78 <mem_trim+0x208>)
 800ba52:	f00a fcc2 	bl	80163da <sys_mutex_unlock>
  return rmem;
 800ba56:	687b      	ldr	r3, [r7, #4]
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3720      	adds	r7, #32
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}
 800ba60:	24004e04 	.word	0x24004e04
 800ba64:	24004e08 	.word	0x24004e08
 800ba68:	08018104 	.word	0x08018104
 800ba6c:	08018290 	.word	0x08018290
 800ba70:	0801814c 	.word	0x0801814c
 800ba74:	080182a8 	.word	0x080182a8
 800ba78:	24004e0c 	.word	0x24004e0c
 800ba7c:	080182c8 	.word	0x080182c8
 800ba80:	24004e10 	.word	0x24004e10

0800ba84 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b088      	sub	sp, #32
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800ba8e:	88fb      	ldrh	r3, [r7, #6]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d101      	bne.n	800ba98 <mem_malloc+0x14>
    return NULL;
 800ba94:	2300      	movs	r3, #0
 800ba96:	e0e2      	b.n	800bc5e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800ba98:	88fb      	ldrh	r3, [r7, #6]
 800ba9a:	3303      	adds	r3, #3
 800ba9c:	b29b      	uxth	r3, r3
 800ba9e:	f023 0303 	bic.w	r3, r3, #3
 800baa2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800baa4:	8bbb      	ldrh	r3, [r7, #28]
 800baa6:	2b0b      	cmp	r3, #11
 800baa8:	d801      	bhi.n	800baae <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800baaa:	230c      	movs	r3, #12
 800baac:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800baae:	8bbb      	ldrh	r3, [r7, #28]
 800bab0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800bab4:	d803      	bhi.n	800babe <mem_malloc+0x3a>
 800bab6:	8bba      	ldrh	r2, [r7, #28]
 800bab8:	88fb      	ldrh	r3, [r7, #6]
 800baba:	429a      	cmp	r2, r3
 800babc:	d201      	bcs.n	800bac2 <mem_malloc+0x3e>
    return NULL;
 800babe:	2300      	movs	r3, #0
 800bac0:	e0cd      	b.n	800bc5e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800bac2:	4869      	ldr	r0, [pc, #420]	@ (800bc68 <mem_malloc+0x1e4>)
 800bac4:	f00a fc7a 	bl	80163bc <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bac8:	4b68      	ldr	r3, [pc, #416]	@ (800bc6c <mem_malloc+0x1e8>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	4618      	mov	r0, r3
 800bace:	f7ff fd01 	bl	800b4d4 <mem_to_ptr>
 800bad2:	4603      	mov	r3, r0
 800bad4:	83fb      	strh	r3, [r7, #30]
 800bad6:	e0b7      	b.n	800bc48 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800bad8:	8bfb      	ldrh	r3, [r7, #30]
 800bada:	4618      	mov	r0, r3
 800badc:	f7ff fce8 	bl	800b4b0 <ptr_to_mem>
 800bae0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	791b      	ldrb	r3, [r3, #4]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	f040 80a7 	bne.w	800bc3a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	881b      	ldrh	r3, [r3, #0]
 800baf0:	461a      	mov	r2, r3
 800baf2:	8bfb      	ldrh	r3, [r7, #30]
 800baf4:	1ad3      	subs	r3, r2, r3
 800baf6:	f1a3 0208 	sub.w	r2, r3, #8
 800bafa:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800bafc:	429a      	cmp	r2, r3
 800bafe:	f0c0 809c 	bcc.w	800bc3a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	881b      	ldrh	r3, [r3, #0]
 800bb06:	461a      	mov	r2, r3
 800bb08:	8bfb      	ldrh	r3, [r7, #30]
 800bb0a:	1ad3      	subs	r3, r2, r3
 800bb0c:	f1a3 0208 	sub.w	r2, r3, #8
 800bb10:	8bbb      	ldrh	r3, [r7, #28]
 800bb12:	3314      	adds	r3, #20
 800bb14:	429a      	cmp	r2, r3
 800bb16:	d333      	bcc.n	800bb80 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800bb18:	8bfa      	ldrh	r2, [r7, #30]
 800bb1a:	8bbb      	ldrh	r3, [r7, #28]
 800bb1c:	4413      	add	r3, r2
 800bb1e:	b29b      	uxth	r3, r3
 800bb20:	3308      	adds	r3, #8
 800bb22:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800bb24:	8a7b      	ldrh	r3, [r7, #18]
 800bb26:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800bb2a:	d106      	bne.n	800bb3a <mem_malloc+0xb6>
 800bb2c:	4b50      	ldr	r3, [pc, #320]	@ (800bc70 <mem_malloc+0x1ec>)
 800bb2e:	f240 3287 	movw	r2, #903	@ 0x387
 800bb32:	4950      	ldr	r1, [pc, #320]	@ (800bc74 <mem_malloc+0x1f0>)
 800bb34:	4850      	ldr	r0, [pc, #320]	@ (800bc78 <mem_malloc+0x1f4>)
 800bb36:	f00a fd9b 	bl	8016670 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800bb3a:	8a7b      	ldrh	r3, [r7, #18]
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f7ff fcb7 	bl	800b4b0 <ptr_to_mem>
 800bb42:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2200      	movs	r2, #0
 800bb48:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	881a      	ldrh	r2, [r3, #0]
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	8bfa      	ldrh	r2, [r7, #30]
 800bb56:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	8a7a      	ldrh	r2, [r7, #18]
 800bb5c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	2201      	movs	r2, #1
 800bb62:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	881b      	ldrh	r3, [r3, #0]
 800bb68:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800bb6c:	d00b      	beq.n	800bb86 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	881b      	ldrh	r3, [r3, #0]
 800bb72:	4618      	mov	r0, r3
 800bb74:	f7ff fc9c 	bl	800b4b0 <ptr_to_mem>
 800bb78:	4602      	mov	r2, r0
 800bb7a:	8a7b      	ldrh	r3, [r7, #18]
 800bb7c:	8053      	strh	r3, [r2, #2]
 800bb7e:	e002      	b.n	800bb86 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	2201      	movs	r2, #1
 800bb84:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800bb86:	4b39      	ldr	r3, [pc, #228]	@ (800bc6c <mem_malloc+0x1e8>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	697a      	ldr	r2, [r7, #20]
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d127      	bne.n	800bbe0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800bb90:	4b36      	ldr	r3, [pc, #216]	@ (800bc6c <mem_malloc+0x1e8>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800bb96:	e005      	b.n	800bba4 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800bb98:	69bb      	ldr	r3, [r7, #24]
 800bb9a:	881b      	ldrh	r3, [r3, #0]
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f7ff fc87 	bl	800b4b0 <ptr_to_mem>
 800bba2:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800bba4:	69bb      	ldr	r3, [r7, #24]
 800bba6:	791b      	ldrb	r3, [r3, #4]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d004      	beq.n	800bbb6 <mem_malloc+0x132>
 800bbac:	4b33      	ldr	r3, [pc, #204]	@ (800bc7c <mem_malloc+0x1f8>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	69ba      	ldr	r2, [r7, #24]
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d1f0      	bne.n	800bb98 <mem_malloc+0x114>
          }
          lfree = cur;
 800bbb6:	4a2d      	ldr	r2, [pc, #180]	@ (800bc6c <mem_malloc+0x1e8>)
 800bbb8:	69bb      	ldr	r3, [r7, #24]
 800bbba:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800bbbc:	4b2b      	ldr	r3, [pc, #172]	@ (800bc6c <mem_malloc+0x1e8>)
 800bbbe:	681a      	ldr	r2, [r3, #0]
 800bbc0:	4b2e      	ldr	r3, [pc, #184]	@ (800bc7c <mem_malloc+0x1f8>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d00b      	beq.n	800bbe0 <mem_malloc+0x15c>
 800bbc8:	4b28      	ldr	r3, [pc, #160]	@ (800bc6c <mem_malloc+0x1e8>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	791b      	ldrb	r3, [r3, #4]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d006      	beq.n	800bbe0 <mem_malloc+0x15c>
 800bbd2:	4b27      	ldr	r3, [pc, #156]	@ (800bc70 <mem_malloc+0x1ec>)
 800bbd4:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800bbd8:	4929      	ldr	r1, [pc, #164]	@ (800bc80 <mem_malloc+0x1fc>)
 800bbda:	4827      	ldr	r0, [pc, #156]	@ (800bc78 <mem_malloc+0x1f4>)
 800bbdc:	f00a fd48 	bl	8016670 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800bbe0:	4821      	ldr	r0, [pc, #132]	@ (800bc68 <mem_malloc+0x1e4>)
 800bbe2:	f00a fbfa 	bl	80163da <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800bbe6:	8bba      	ldrh	r2, [r7, #28]
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	4413      	add	r3, r2
 800bbec:	3308      	adds	r3, #8
 800bbee:	4a23      	ldr	r2, [pc, #140]	@ (800bc7c <mem_malloc+0x1f8>)
 800bbf0:	6812      	ldr	r2, [r2, #0]
 800bbf2:	4293      	cmp	r3, r2
 800bbf4:	d906      	bls.n	800bc04 <mem_malloc+0x180>
 800bbf6:	4b1e      	ldr	r3, [pc, #120]	@ (800bc70 <mem_malloc+0x1ec>)
 800bbf8:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800bbfc:	4921      	ldr	r1, [pc, #132]	@ (800bc84 <mem_malloc+0x200>)
 800bbfe:	481e      	ldr	r0, [pc, #120]	@ (800bc78 <mem_malloc+0x1f4>)
 800bc00:	f00a fd36 	bl	8016670 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	f003 0303 	and.w	r3, r3, #3
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d006      	beq.n	800bc1c <mem_malloc+0x198>
 800bc0e:	4b18      	ldr	r3, [pc, #96]	@ (800bc70 <mem_malloc+0x1ec>)
 800bc10:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800bc14:	491c      	ldr	r1, [pc, #112]	@ (800bc88 <mem_malloc+0x204>)
 800bc16:	4818      	ldr	r0, [pc, #96]	@ (800bc78 <mem_malloc+0x1f4>)
 800bc18:	f00a fd2a 	bl	8016670 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	f003 0303 	and.w	r3, r3, #3
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d006      	beq.n	800bc34 <mem_malloc+0x1b0>
 800bc26:	4b12      	ldr	r3, [pc, #72]	@ (800bc70 <mem_malloc+0x1ec>)
 800bc28:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800bc2c:	4917      	ldr	r1, [pc, #92]	@ (800bc8c <mem_malloc+0x208>)
 800bc2e:	4812      	ldr	r0, [pc, #72]	@ (800bc78 <mem_malloc+0x1f4>)
 800bc30:	f00a fd1e 	bl	8016670 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	3308      	adds	r3, #8
 800bc38:	e011      	b.n	800bc5e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800bc3a:	8bfb      	ldrh	r3, [r7, #30]
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f7ff fc37 	bl	800b4b0 <ptr_to_mem>
 800bc42:	4603      	mov	r3, r0
 800bc44:	881b      	ldrh	r3, [r3, #0]
 800bc46:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bc48:	8bfa      	ldrh	r2, [r7, #30]
 800bc4a:	8bbb      	ldrh	r3, [r7, #28]
 800bc4c:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 800bc50:	429a      	cmp	r2, r3
 800bc52:	f4ff af41 	bcc.w	800bad8 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800bc56:	4804      	ldr	r0, [pc, #16]	@ (800bc68 <mem_malloc+0x1e4>)
 800bc58:	f00a fbbf 	bl	80163da <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800bc5c:	2300      	movs	r3, #0
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	3720      	adds	r7, #32
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}
 800bc66:	bf00      	nop
 800bc68:	24004e0c 	.word	0x24004e0c
 800bc6c:	24004e10 	.word	0x24004e10
 800bc70:	08018104 	.word	0x08018104
 800bc74:	080182c8 	.word	0x080182c8
 800bc78:	0801814c 	.word	0x0801814c
 800bc7c:	24004e08 	.word	0x24004e08
 800bc80:	080182dc 	.word	0x080182dc
 800bc84:	080182f8 	.word	0x080182f8
 800bc88:	08018328 	.word	0x08018328
 800bc8c:	08018358 	.word	0x08018358

0800bc90 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b085      	sub	sp, #20
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	689b      	ldr	r3, [r3, #8]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	3303      	adds	r3, #3
 800bca6:	f023 0303 	bic.w	r3, r3, #3
 800bcaa:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800bcac:	2300      	movs	r3, #0
 800bcae:	60fb      	str	r3, [r7, #12]
 800bcb0:	e011      	b.n	800bcd6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	689b      	ldr	r3, [r3, #8]
 800bcb6:	681a      	ldr	r2, [r3, #0]
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	689b      	ldr	r3, [r3, #8]
 800bcc0:	68ba      	ldr	r2, [r7, #8]
 800bcc2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	881b      	ldrh	r3, [r3, #0]
 800bcc8:	461a      	mov	r2, r3
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	4413      	add	r3, r2
 800bcce:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	3301      	adds	r3, #1
 800bcd4:	60fb      	str	r3, [r7, #12]
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	885b      	ldrh	r3, [r3, #2]
 800bcda:	461a      	mov	r2, r3
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	4293      	cmp	r3, r2
 800bce0:	dbe7      	blt.n	800bcb2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800bce2:	bf00      	nop
 800bce4:	bf00      	nop
 800bce6:	3714      	adds	r7, #20
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr

0800bcf0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b082      	sub	sp, #8
 800bcf4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	80fb      	strh	r3, [r7, #6]
 800bcfa:	e009      	b.n	800bd10 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800bcfc:	88fb      	ldrh	r3, [r7, #6]
 800bcfe:	4a08      	ldr	r2, [pc, #32]	@ (800bd20 <memp_init+0x30>)
 800bd00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd04:	4618      	mov	r0, r3
 800bd06:	f7ff ffc3 	bl	800bc90 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bd0a:	88fb      	ldrh	r3, [r7, #6]
 800bd0c:	3301      	adds	r3, #1
 800bd0e:	80fb      	strh	r3, [r7, #6]
 800bd10:	88fb      	ldrh	r3, [r7, #6]
 800bd12:	2b0c      	cmp	r3, #12
 800bd14:	d9f2      	bls.n	800bcfc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800bd16:	bf00      	nop
 800bd18:	bf00      	nop
 800bd1a:	3708      	adds	r7, #8
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}
 800bd20:	0801ab8c 	.word	0x0801ab8c

0800bd24 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b084      	sub	sp, #16
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800bd2c:	f00a fb82 	bl	8016434 <sys_arch_protect>
 800bd30:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	689b      	ldr	r3, [r3, #8]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d015      	beq.n	800bd6c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	689b      	ldr	r3, [r3, #8]
 800bd44:	68ba      	ldr	r2, [r7, #8]
 800bd46:	6812      	ldr	r2, [r2, #0]
 800bd48:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	f003 0303 	and.w	r3, r3, #3
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d006      	beq.n	800bd62 <do_memp_malloc_pool+0x3e>
 800bd54:	4b09      	ldr	r3, [pc, #36]	@ (800bd7c <do_memp_malloc_pool+0x58>)
 800bd56:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800bd5a:	4909      	ldr	r1, [pc, #36]	@ (800bd80 <do_memp_malloc_pool+0x5c>)
 800bd5c:	4809      	ldr	r0, [pc, #36]	@ (800bd84 <do_memp_malloc_pool+0x60>)
 800bd5e:	f00a fc87 	bl	8016670 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800bd62:	68f8      	ldr	r0, [r7, #12]
 800bd64:	f00a fb74 	bl	8016450 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	e003      	b.n	800bd74 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800bd6c:	68f8      	ldr	r0, [r7, #12]
 800bd6e:	f00a fb6f 	bl	8016450 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800bd72:	2300      	movs	r3, #0
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3710      	adds	r7, #16
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}
 800bd7c:	0801837c 	.word	0x0801837c
 800bd80:	080183ac 	.word	0x080183ac
 800bd84:	080183d0 	.word	0x080183d0

0800bd88 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b082      	sub	sp, #8
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d106      	bne.n	800bda4 <memp_malloc_pool+0x1c>
 800bd96:	4b0a      	ldr	r3, [pc, #40]	@ (800bdc0 <memp_malloc_pool+0x38>)
 800bd98:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800bd9c:	4909      	ldr	r1, [pc, #36]	@ (800bdc4 <memp_malloc_pool+0x3c>)
 800bd9e:	480a      	ldr	r0, [pc, #40]	@ (800bdc8 <memp_malloc_pool+0x40>)
 800bda0:	f00a fc66 	bl	8016670 <iprintf>
  if (desc == NULL) {
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d101      	bne.n	800bdae <memp_malloc_pool+0x26>
    return NULL;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	e003      	b.n	800bdb6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f7ff ffb8 	bl	800bd24 <do_memp_malloc_pool>
 800bdb4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	3708      	adds	r7, #8
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}
 800bdbe:	bf00      	nop
 800bdc0:	0801837c 	.word	0x0801837c
 800bdc4:	080183f8 	.word	0x080183f8
 800bdc8:	080183d0 	.word	0x080183d0

0800bdcc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b084      	sub	sp, #16
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800bdd6:	79fb      	ldrb	r3, [r7, #7]
 800bdd8:	2b0c      	cmp	r3, #12
 800bdda:	d908      	bls.n	800bdee <memp_malloc+0x22>
 800bddc:	4b0a      	ldr	r3, [pc, #40]	@ (800be08 <memp_malloc+0x3c>)
 800bdde:	f240 1257 	movw	r2, #343	@ 0x157
 800bde2:	490a      	ldr	r1, [pc, #40]	@ (800be0c <memp_malloc+0x40>)
 800bde4:	480a      	ldr	r0, [pc, #40]	@ (800be10 <memp_malloc+0x44>)
 800bde6:	f00a fc43 	bl	8016670 <iprintf>
 800bdea:	2300      	movs	r3, #0
 800bdec:	e008      	b.n	800be00 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800bdee:	79fb      	ldrb	r3, [r7, #7]
 800bdf0:	4a08      	ldr	r2, [pc, #32]	@ (800be14 <memp_malloc+0x48>)
 800bdf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f7ff ff94 	bl	800bd24 <do_memp_malloc_pool>
 800bdfc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
}
 800be00:	4618      	mov	r0, r3
 800be02:	3710      	adds	r7, #16
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}
 800be08:	0801837c 	.word	0x0801837c
 800be0c:	0801840c 	.word	0x0801840c
 800be10:	080183d0 	.word	0x080183d0
 800be14:	0801ab8c 	.word	0x0801ab8c

0800be18 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b084      	sub	sp, #16
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
 800be20:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	f003 0303 	and.w	r3, r3, #3
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d006      	beq.n	800be3a <do_memp_free_pool+0x22>
 800be2c:	4b0d      	ldr	r3, [pc, #52]	@ (800be64 <do_memp_free_pool+0x4c>)
 800be2e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800be32:	490d      	ldr	r1, [pc, #52]	@ (800be68 <do_memp_free_pool+0x50>)
 800be34:	480d      	ldr	r0, [pc, #52]	@ (800be6c <do_memp_free_pool+0x54>)
 800be36:	f00a fc1b 	bl	8016670 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800be3e:	f00a faf9 	bl	8016434 <sys_arch_protect>
 800be42:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	689b      	ldr	r3, [r3, #8]
 800be48:	681a      	ldr	r2, [r3, #0]
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	689b      	ldr	r3, [r3, #8]
 800be52:	68fa      	ldr	r2, [r7, #12]
 800be54:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800be56:	68b8      	ldr	r0, [r7, #8]
 800be58:	f00a fafa 	bl	8016450 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800be5c:	bf00      	nop
 800be5e:	3710      	adds	r7, #16
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}
 800be64:	0801837c 	.word	0x0801837c
 800be68:	0801842c 	.word	0x0801842c
 800be6c:	080183d0 	.word	0x080183d0

0800be70 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b082      	sub	sp, #8
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d106      	bne.n	800be8e <memp_free_pool+0x1e>
 800be80:	4b0a      	ldr	r3, [pc, #40]	@ (800beac <memp_free_pool+0x3c>)
 800be82:	f240 1295 	movw	r2, #405	@ 0x195
 800be86:	490a      	ldr	r1, [pc, #40]	@ (800beb0 <memp_free_pool+0x40>)
 800be88:	480a      	ldr	r0, [pc, #40]	@ (800beb4 <memp_free_pool+0x44>)
 800be8a:	f00a fbf1 	bl	8016670 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d007      	beq.n	800bea4 <memp_free_pool+0x34>
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d004      	beq.n	800bea4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800be9a:	6839      	ldr	r1, [r7, #0]
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f7ff ffbb 	bl	800be18 <do_memp_free_pool>
 800bea2:	e000      	b.n	800bea6 <memp_free_pool+0x36>
    return;
 800bea4:	bf00      	nop
}
 800bea6:	3708      	adds	r7, #8
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}
 800beac:	0801837c 	.word	0x0801837c
 800beb0:	080183f8 	.word	0x080183f8
 800beb4:	080183d0 	.word	0x080183d0

0800beb8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b082      	sub	sp, #8
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	4603      	mov	r3, r0
 800bec0:	6039      	str	r1, [r7, #0]
 800bec2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800bec4:	79fb      	ldrb	r3, [r7, #7]
 800bec6:	2b0c      	cmp	r3, #12
 800bec8:	d907      	bls.n	800beda <memp_free+0x22>
 800beca:	4b0c      	ldr	r3, [pc, #48]	@ (800befc <memp_free+0x44>)
 800becc:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800bed0:	490b      	ldr	r1, [pc, #44]	@ (800bf00 <memp_free+0x48>)
 800bed2:	480c      	ldr	r0, [pc, #48]	@ (800bf04 <memp_free+0x4c>)
 800bed4:	f00a fbcc 	bl	8016670 <iprintf>
 800bed8:	e00c      	b.n	800bef4 <memp_free+0x3c>

  if (mem == NULL) {
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d008      	beq.n	800bef2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800bee0:	79fb      	ldrb	r3, [r7, #7]
 800bee2:	4a09      	ldr	r2, [pc, #36]	@ (800bf08 <memp_free+0x50>)
 800bee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bee8:	6839      	ldr	r1, [r7, #0]
 800beea:	4618      	mov	r0, r3
 800beec:	f7ff ff94 	bl	800be18 <do_memp_free_pool>
 800bef0:	e000      	b.n	800bef4 <memp_free+0x3c>
    return;
 800bef2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800bef4:	3708      	adds	r7, #8
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}
 800befa:	bf00      	nop
 800befc:	0801837c 	.word	0x0801837c
 800bf00:	0801844c 	.word	0x0801844c
 800bf04:	080183d0 	.word	0x080183d0
 800bf08:	0801ab8c 	.word	0x0801ab8c

0800bf0c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800bf10:	bf00      	nop
 800bf12:	46bd      	mov	sp, r7
 800bf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf18:	4770      	bx	lr
	...

0800bf1c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b086      	sub	sp, #24
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	60f8      	str	r0, [r7, #12]
 800bf24:	60b9      	str	r1, [r7, #8]
 800bf26:	607a      	str	r2, [r7, #4]
 800bf28:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d108      	bne.n	800bf42 <netif_add+0x26>
 800bf30:	4b57      	ldr	r3, [pc, #348]	@ (800c090 <netif_add+0x174>)
 800bf32:	f240 1227 	movw	r2, #295	@ 0x127
 800bf36:	4957      	ldr	r1, [pc, #348]	@ (800c094 <netif_add+0x178>)
 800bf38:	4857      	ldr	r0, [pc, #348]	@ (800c098 <netif_add+0x17c>)
 800bf3a:	f00a fb99 	bl	8016670 <iprintf>
 800bf3e:	2300      	movs	r3, #0
 800bf40:	e0a2      	b.n	800c088 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800bf42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d108      	bne.n	800bf5a <netif_add+0x3e>
 800bf48:	4b51      	ldr	r3, [pc, #324]	@ (800c090 <netif_add+0x174>)
 800bf4a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800bf4e:	4953      	ldr	r1, [pc, #332]	@ (800c09c <netif_add+0x180>)
 800bf50:	4851      	ldr	r0, [pc, #324]	@ (800c098 <netif_add+0x17c>)
 800bf52:	f00a fb8d 	bl	8016670 <iprintf>
 800bf56:	2300      	movs	r3, #0
 800bf58:	e096      	b.n	800c088 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d101      	bne.n	800bf64 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800bf60:	4b4f      	ldr	r3, [pc, #316]	@ (800c0a0 <netif_add+0x184>)
 800bf62:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d101      	bne.n	800bf6e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800bf6a:	4b4d      	ldr	r3, [pc, #308]	@ (800c0a0 <netif_add+0x184>)
 800bf6c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d101      	bne.n	800bf78 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800bf74:	4b4a      	ldr	r3, [pc, #296]	@ (800c0a0 <netif_add+0x184>)
 800bf76:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	2200      	movs	r2, #0
 800bf82:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	2200      	movs	r2, #0
 800bf88:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	4a45      	ldr	r2, [pc, #276]	@ (800c0a4 <netif_add+0x188>)
 800bf8e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2200      	movs	r2, #0
 800bf94:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	6a3a      	ldr	r2, [r7, #32]
 800bfa8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800bfaa:	4b3f      	ldr	r3, [pc, #252]	@ (800c0a8 <netif_add+0x18c>)
 800bfac:	781a      	ldrb	r2, [r3, #0]
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bfb8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	687a      	ldr	r2, [r7, #4]
 800bfbe:	68b9      	ldr	r1, [r7, #8]
 800bfc0:	68f8      	ldr	r0, [r7, #12]
 800bfc2:	f000 f913 	bl	800c1ec <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800bfc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfc8:	68f8      	ldr	r0, [r7, #12]
 800bfca:	4798      	blx	r3
 800bfcc:	4603      	mov	r3, r0
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d001      	beq.n	800bfd6 <netif_add+0xba>
    return NULL;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	e058      	b.n	800c088 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bfdc:	2bff      	cmp	r3, #255	@ 0xff
 800bfde:	d103      	bne.n	800bfe8 <netif_add+0xcc>
        netif->num = 0;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800bfec:	4b2f      	ldr	r3, [pc, #188]	@ (800c0ac <netif_add+0x190>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	617b      	str	r3, [r7, #20]
 800bff2:	e02b      	b.n	800c04c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800bff4:	697a      	ldr	r2, [r7, #20]
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d106      	bne.n	800c00a <netif_add+0xee>
 800bffc:	4b24      	ldr	r3, [pc, #144]	@ (800c090 <netif_add+0x174>)
 800bffe:	f240 128b 	movw	r2, #395	@ 0x18b
 800c002:	492b      	ldr	r1, [pc, #172]	@ (800c0b0 <netif_add+0x194>)
 800c004:	4824      	ldr	r0, [pc, #144]	@ (800c098 <netif_add+0x17c>)
 800c006:	f00a fb33 	bl	8016670 <iprintf>
        num_netifs++;
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	3301      	adds	r3, #1
 800c00e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c010:	693b      	ldr	r3, [r7, #16]
 800c012:	2bff      	cmp	r3, #255	@ 0xff
 800c014:	dd06      	ble.n	800c024 <netif_add+0x108>
 800c016:	4b1e      	ldr	r3, [pc, #120]	@ (800c090 <netif_add+0x174>)
 800c018:	f240 128d 	movw	r2, #397	@ 0x18d
 800c01c:	4925      	ldr	r1, [pc, #148]	@ (800c0b4 <netif_add+0x198>)
 800c01e:	481e      	ldr	r0, [pc, #120]	@ (800c098 <netif_add+0x17c>)
 800c020:	f00a fb26 	bl	8016670 <iprintf>
        if (netif2->num == netif->num) {
 800c024:	697b      	ldr	r3, [r7, #20]
 800c026:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c030:	429a      	cmp	r2, r3
 800c032:	d108      	bne.n	800c046 <netif_add+0x12a>
          netif->num++;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c03a:	3301      	adds	r3, #1
 800c03c:	b2da      	uxtb	r2, r3
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800c044:	e005      	b.n	800c052 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	617b      	str	r3, [r7, #20]
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d1d0      	bne.n	800bff4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d1be      	bne.n	800bfd6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c05e:	2bfe      	cmp	r3, #254	@ 0xfe
 800c060:	d103      	bne.n	800c06a <netif_add+0x14e>
    netif_num = 0;
 800c062:	4b11      	ldr	r3, [pc, #68]	@ (800c0a8 <netif_add+0x18c>)
 800c064:	2200      	movs	r2, #0
 800c066:	701a      	strb	r2, [r3, #0]
 800c068:	e006      	b.n	800c078 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c070:	3301      	adds	r3, #1
 800c072:	b2da      	uxtb	r2, r3
 800c074:	4b0c      	ldr	r3, [pc, #48]	@ (800c0a8 <netif_add+0x18c>)
 800c076:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c078:	4b0c      	ldr	r3, [pc, #48]	@ (800c0ac <netif_add+0x190>)
 800c07a:	681a      	ldr	r2, [r3, #0]
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c080:	4a0a      	ldr	r2, [pc, #40]	@ (800c0ac <netif_add+0x190>)
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c086:	68fb      	ldr	r3, [r7, #12]
}
 800c088:	4618      	mov	r0, r3
 800c08a:	3718      	adds	r7, #24
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}
 800c090:	08018468 	.word	0x08018468
 800c094:	080184fc 	.word	0x080184fc
 800c098:	080184b8 	.word	0x080184b8
 800c09c:	08018518 	.word	0x08018518
 800c0a0:	0801ac00 	.word	0x0801ac00
 800c0a4:	0800c4c7 	.word	0x0800c4c7
 800c0a8:	24007ef8 	.word	0x24007ef8
 800c0ac:	24007ef0 	.word	0x24007ef0
 800c0b0:	0801853c 	.word	0x0801853c
 800c0b4:	08018550 	.word	0x08018550

0800c0b8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b082      	sub	sp, #8
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
 800c0c0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c0c2:	6839      	ldr	r1, [r7, #0]
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f002 fe51 	bl	800ed6c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c0ca:	6839      	ldr	r1, [r7, #0]
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f007 fcfd 	bl	8013acc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c0d2:	bf00      	nop
 800c0d4:	3708      	adds	r7, #8
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
	...

0800c0dc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b086      	sub	sp, #24
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	60f8      	str	r0, [r7, #12]
 800c0e4:	60b9      	str	r1, [r7, #8]
 800c0e6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d106      	bne.n	800c0fc <netif_do_set_ipaddr+0x20>
 800c0ee:	4b1d      	ldr	r3, [pc, #116]	@ (800c164 <netif_do_set_ipaddr+0x88>)
 800c0f0:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800c0f4:	491c      	ldr	r1, [pc, #112]	@ (800c168 <netif_do_set_ipaddr+0x8c>)
 800c0f6:	481d      	ldr	r0, [pc, #116]	@ (800c16c <netif_do_set_ipaddr+0x90>)
 800c0f8:	f00a faba 	bl	8016670 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d106      	bne.n	800c110 <netif_do_set_ipaddr+0x34>
 800c102:	4b18      	ldr	r3, [pc, #96]	@ (800c164 <netif_do_set_ipaddr+0x88>)
 800c104:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800c108:	4917      	ldr	r1, [pc, #92]	@ (800c168 <netif_do_set_ipaddr+0x8c>)
 800c10a:	4818      	ldr	r0, [pc, #96]	@ (800c16c <netif_do_set_ipaddr+0x90>)
 800c10c:	f00a fab0 	bl	8016670 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	681a      	ldr	r2, [r3, #0]
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	3304      	adds	r3, #4
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d01c      	beq.n	800c158 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	3304      	adds	r3, #4
 800c128:	681a      	ldr	r2, [r3, #0]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c12e:	f107 0314 	add.w	r3, r7, #20
 800c132:	4619      	mov	r1, r3
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f7ff ffbf 	bl	800c0b8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d002      	beq.n	800c146 <netif_do_set_ipaddr+0x6a>
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	e000      	b.n	800c148 <netif_do_set_ipaddr+0x6c>
 800c146:	2300      	movs	r3, #0
 800c148:	68fa      	ldr	r2, [r7, #12]
 800c14a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c14c:	2101      	movs	r1, #1
 800c14e:	68f8      	ldr	r0, [r7, #12]
 800c150:	f000 f8d2 	bl	800c2f8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c154:	2301      	movs	r3, #1
 800c156:	e000      	b.n	800c15a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c158:	2300      	movs	r3, #0
}
 800c15a:	4618      	mov	r0, r3
 800c15c:	3718      	adds	r7, #24
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}
 800c162:	bf00      	nop
 800c164:	08018468 	.word	0x08018468
 800c168:	08018580 	.word	0x08018580
 800c16c:	080184b8 	.word	0x080184b8

0800c170 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c170:	b480      	push	{r7}
 800c172:	b085      	sub	sp, #20
 800c174:	af00      	add	r7, sp, #0
 800c176:	60f8      	str	r0, [r7, #12]
 800c178:	60b9      	str	r1, [r7, #8]
 800c17a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	681a      	ldr	r2, [r3, #0]
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	3308      	adds	r3, #8
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	429a      	cmp	r2, r3
 800c188:	d00a      	beq.n	800c1a0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d002      	beq.n	800c196 <netif_do_set_netmask+0x26>
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	e000      	b.n	800c198 <netif_do_set_netmask+0x28>
 800c196:	2300      	movs	r3, #0
 800c198:	68fa      	ldr	r2, [r7, #12]
 800c19a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c19c:	2301      	movs	r3, #1
 800c19e:	e000      	b.n	800c1a2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c1a0:	2300      	movs	r3, #0
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3714      	adds	r7, #20
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ac:	4770      	bx	lr

0800c1ae <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c1ae:	b480      	push	{r7}
 800c1b0:	b085      	sub	sp, #20
 800c1b2:	af00      	add	r7, sp, #0
 800c1b4:	60f8      	str	r0, [r7, #12]
 800c1b6:	60b9      	str	r1, [r7, #8]
 800c1b8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	681a      	ldr	r2, [r3, #0]
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	330c      	adds	r3, #12
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	429a      	cmp	r2, r3
 800c1c6:	d00a      	beq.n	800c1de <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d002      	beq.n	800c1d4 <netif_do_set_gw+0x26>
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	e000      	b.n	800c1d6 <netif_do_set_gw+0x28>
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	68fa      	ldr	r2, [r7, #12]
 800c1d8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c1da:	2301      	movs	r3, #1
 800c1dc:	e000      	b.n	800c1e0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c1de:	2300      	movs	r3, #0
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3714      	adds	r7, #20
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ea:	4770      	bx	lr

0800c1ec <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b088      	sub	sp, #32
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	60f8      	str	r0, [r7, #12]
 800c1f4:	60b9      	str	r1, [r7, #8]
 800c1f6:	607a      	str	r2, [r7, #4]
 800c1f8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c1fe:	2300      	movs	r3, #0
 800c200:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d101      	bne.n	800c20c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c208:	4b1c      	ldr	r3, [pc, #112]	@ (800c27c <netif_set_addr+0x90>)
 800c20a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d101      	bne.n	800c216 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c212:	4b1a      	ldr	r3, [pc, #104]	@ (800c27c <netif_set_addr+0x90>)
 800c214:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d101      	bne.n	800c220 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c21c:	4b17      	ldr	r3, [pc, #92]	@ (800c27c <netif_set_addr+0x90>)
 800c21e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d003      	beq.n	800c22e <netif_set_addr+0x42>
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d101      	bne.n	800c232 <netif_set_addr+0x46>
 800c22e:	2301      	movs	r3, #1
 800c230:	e000      	b.n	800c234 <netif_set_addr+0x48>
 800c232:	2300      	movs	r3, #0
 800c234:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c236:	697b      	ldr	r3, [r7, #20]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d006      	beq.n	800c24a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c23c:	f107 0310 	add.w	r3, r7, #16
 800c240:	461a      	mov	r2, r3
 800c242:	68b9      	ldr	r1, [r7, #8]
 800c244:	68f8      	ldr	r0, [r7, #12]
 800c246:	f7ff ff49 	bl	800c0dc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c24a:	69fa      	ldr	r2, [r7, #28]
 800c24c:	6879      	ldr	r1, [r7, #4]
 800c24e:	68f8      	ldr	r0, [r7, #12]
 800c250:	f7ff ff8e 	bl	800c170 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c254:	69ba      	ldr	r2, [r7, #24]
 800c256:	6839      	ldr	r1, [r7, #0]
 800c258:	68f8      	ldr	r0, [r7, #12]
 800c25a:	f7ff ffa8 	bl	800c1ae <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d106      	bne.n	800c272 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c264:	f107 0310 	add.w	r3, r7, #16
 800c268:	461a      	mov	r2, r3
 800c26a:	68b9      	ldr	r1, [r7, #8]
 800c26c:	68f8      	ldr	r0, [r7, #12]
 800c26e:	f7ff ff35 	bl	800c0dc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c272:	bf00      	nop
 800c274:	3720      	adds	r7, #32
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}
 800c27a:	bf00      	nop
 800c27c:	0801ac00 	.word	0x0801ac00

0800c280 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c280:	b480      	push	{r7}
 800c282:	b083      	sub	sp, #12
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c288:	4a04      	ldr	r2, [pc, #16]	@ (800c29c <netif_set_default+0x1c>)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c28e:	bf00      	nop
 800c290:	370c      	adds	r7, #12
 800c292:	46bd      	mov	sp, r7
 800c294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c298:	4770      	bx	lr
 800c29a:	bf00      	nop
 800c29c:	24007ef4 	.word	0x24007ef4

0800c2a0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b082      	sub	sp, #8
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d107      	bne.n	800c2be <netif_set_up+0x1e>
 800c2ae:	4b0f      	ldr	r3, [pc, #60]	@ (800c2ec <netif_set_up+0x4c>)
 800c2b0:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800c2b4:	490e      	ldr	r1, [pc, #56]	@ (800c2f0 <netif_set_up+0x50>)
 800c2b6:	480f      	ldr	r0, [pc, #60]	@ (800c2f4 <netif_set_up+0x54>)
 800c2b8:	f00a f9da 	bl	8016670 <iprintf>
 800c2bc:	e013      	b.n	800c2e6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c2c4:	f003 0301 	and.w	r3, r3, #1
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d10c      	bne.n	800c2e6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c2d2:	f043 0301 	orr.w	r3, r3, #1
 800c2d6:	b2da      	uxtb	r2, r3
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c2de:	2103      	movs	r1, #3
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f000 f809 	bl	800c2f8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c2e6:	3708      	adds	r7, #8
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}
 800c2ec:	08018468 	.word	0x08018468
 800c2f0:	080185f0 	.word	0x080185f0
 800c2f4:	080184b8 	.word	0x080184b8

0800c2f8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b082      	sub	sp, #8
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
 800c300:	460b      	mov	r3, r1
 800c302:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d106      	bne.n	800c318 <netif_issue_reports+0x20>
 800c30a:	4b18      	ldr	r3, [pc, #96]	@ (800c36c <netif_issue_reports+0x74>)
 800c30c:	f240 326d 	movw	r2, #877	@ 0x36d
 800c310:	4917      	ldr	r1, [pc, #92]	@ (800c370 <netif_issue_reports+0x78>)
 800c312:	4818      	ldr	r0, [pc, #96]	@ (800c374 <netif_issue_reports+0x7c>)
 800c314:	f00a f9ac 	bl	8016670 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c31e:	f003 0304 	and.w	r3, r3, #4
 800c322:	2b00      	cmp	r3, #0
 800c324:	d01e      	beq.n	800c364 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c32c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c330:	2b00      	cmp	r3, #0
 800c332:	d017      	beq.n	800c364 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c334:	78fb      	ldrb	r3, [r7, #3]
 800c336:	f003 0301 	and.w	r3, r3, #1
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d013      	beq.n	800c366 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	3304      	adds	r3, #4
 800c342:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c344:	2b00      	cmp	r3, #0
 800c346:	d00e      	beq.n	800c366 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c34e:	f003 0308 	and.w	r3, r3, #8
 800c352:	2b00      	cmp	r3, #0
 800c354:	d007      	beq.n	800c366 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	3304      	adds	r3, #4
 800c35a:	4619      	mov	r1, r3
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f008 fb1f 	bl	80149a0 <etharp_request>
 800c362:	e000      	b.n	800c366 <netif_issue_reports+0x6e>
    return;
 800c364:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c366:	3708      	adds	r7, #8
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}
 800c36c:	08018468 	.word	0x08018468
 800c370:	0801860c 	.word	0x0801860c
 800c374:	080184b8 	.word	0x080184b8

0800c378 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b082      	sub	sp, #8
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d107      	bne.n	800c396 <netif_set_down+0x1e>
 800c386:	4b12      	ldr	r3, [pc, #72]	@ (800c3d0 <netif_set_down+0x58>)
 800c388:	f240 329b 	movw	r2, #923	@ 0x39b
 800c38c:	4911      	ldr	r1, [pc, #68]	@ (800c3d4 <netif_set_down+0x5c>)
 800c38e:	4812      	ldr	r0, [pc, #72]	@ (800c3d8 <netif_set_down+0x60>)
 800c390:	f00a f96e 	bl	8016670 <iprintf>
 800c394:	e019      	b.n	800c3ca <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c39c:	f003 0301 	and.w	r3, r3, #1
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d012      	beq.n	800c3ca <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c3aa:	f023 0301 	bic.w	r3, r3, #1
 800c3ae:	b2da      	uxtb	r2, r3
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c3bc:	f003 0308 	and.w	r3, r3, #8
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d002      	beq.n	800c3ca <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f007 fea9 	bl	801411c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c3ca:	3708      	adds	r7, #8
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}
 800c3d0:	08018468 	.word	0x08018468
 800c3d4:	08018630 	.word	0x08018630
 800c3d8:	080184b8 	.word	0x080184b8

0800c3dc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b082      	sub	sp, #8
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d107      	bne.n	800c3fa <netif_set_link_up+0x1e>
 800c3ea:	4b13      	ldr	r3, [pc, #76]	@ (800c438 <netif_set_link_up+0x5c>)
 800c3ec:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800c3f0:	4912      	ldr	r1, [pc, #72]	@ (800c43c <netif_set_link_up+0x60>)
 800c3f2:	4813      	ldr	r0, [pc, #76]	@ (800c440 <netif_set_link_up+0x64>)
 800c3f4:	f00a f93c 	bl	8016670 <iprintf>
 800c3f8:	e01b      	b.n	800c432 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c400:	f003 0304 	and.w	r3, r3, #4
 800c404:	2b00      	cmp	r3, #0
 800c406:	d114      	bne.n	800c432 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c40e:	f043 0304 	orr.w	r3, r3, #4
 800c412:	b2da      	uxtb	r2, r3
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c41a:	2103      	movs	r1, #3
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f7ff ff6b 	bl	800c2f8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	69db      	ldr	r3, [r3, #28]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d003      	beq.n	800c432 <netif_set_link_up+0x56>
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	69db      	ldr	r3, [r3, #28]
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c432:	3708      	adds	r7, #8
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}
 800c438:	08018468 	.word	0x08018468
 800c43c:	08018650 	.word	0x08018650
 800c440:	080184b8 	.word	0x080184b8

0800c444 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b082      	sub	sp, #8
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d107      	bne.n	800c462 <netif_set_link_down+0x1e>
 800c452:	4b11      	ldr	r3, [pc, #68]	@ (800c498 <netif_set_link_down+0x54>)
 800c454:	f240 4206 	movw	r2, #1030	@ 0x406
 800c458:	4910      	ldr	r1, [pc, #64]	@ (800c49c <netif_set_link_down+0x58>)
 800c45a:	4811      	ldr	r0, [pc, #68]	@ (800c4a0 <netif_set_link_down+0x5c>)
 800c45c:	f00a f908 	bl	8016670 <iprintf>
 800c460:	e017      	b.n	800c492 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c468:	f003 0304 	and.w	r3, r3, #4
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d010      	beq.n	800c492 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c476:	f023 0304 	bic.w	r3, r3, #4
 800c47a:	b2da      	uxtb	r2, r3
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	69db      	ldr	r3, [r3, #28]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d003      	beq.n	800c492 <netif_set_link_down+0x4e>
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	69db      	ldr	r3, [r3, #28]
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c492:	3708      	adds	r7, #8
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}
 800c498:	08018468 	.word	0x08018468
 800c49c:	08018674 	.word	0x08018674
 800c4a0:	080184b8 	.word	0x080184b8

0800c4a4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	b083      	sub	sp, #12
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
 800c4ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d002      	beq.n	800c4ba <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	683a      	ldr	r2, [r7, #0]
 800c4b8:	61da      	str	r2, [r3, #28]
  }
}
 800c4ba:	bf00      	nop
 800c4bc:	370c      	adds	r7, #12
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c4:	4770      	bx	lr

0800c4c6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c4c6:	b480      	push	{r7}
 800c4c8:	b085      	sub	sp, #20
 800c4ca:	af00      	add	r7, sp, #0
 800c4cc:	60f8      	str	r0, [r7, #12]
 800c4ce:	60b9      	str	r1, [r7, #8]
 800c4d0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c4d2:	f06f 030b 	mvn.w	r3, #11
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3714      	adds	r7, #20
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e0:	4770      	bx	lr
	...

0800c4e4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b085      	sub	sp, #20
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c4ee:	79fb      	ldrb	r3, [r7, #7]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d013      	beq.n	800c51c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c4f4:	4b0d      	ldr	r3, [pc, #52]	@ (800c52c <netif_get_by_index+0x48>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	60fb      	str	r3, [r7, #12]
 800c4fa:	e00c      	b.n	800c516 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c502:	3301      	adds	r3, #1
 800c504:	b2db      	uxtb	r3, r3
 800c506:	79fa      	ldrb	r2, [r7, #7]
 800c508:	429a      	cmp	r2, r3
 800c50a:	d101      	bne.n	800c510 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	e006      	b.n	800c51e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	60fb      	str	r3, [r7, #12]
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d1ef      	bne.n	800c4fc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c51c:	2300      	movs	r3, #0
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3714      	adds	r7, #20
 800c522:	46bd      	mov	sp, r7
 800c524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c528:	4770      	bx	lr
 800c52a:	bf00      	nop
 800c52c:	24007ef0 	.word	0x24007ef0

0800c530 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b082      	sub	sp, #8
 800c534:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c536:	f009 ff7d 	bl	8016434 <sys_arch_protect>
 800c53a:	6038      	str	r0, [r7, #0]
 800c53c:	4b0d      	ldr	r3, [pc, #52]	@ (800c574 <pbuf_free_ooseq+0x44>)
 800c53e:	2200      	movs	r2, #0
 800c540:	701a      	strb	r2, [r3, #0]
 800c542:	6838      	ldr	r0, [r7, #0]
 800c544:	f009 ff84 	bl	8016450 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c548:	4b0b      	ldr	r3, [pc, #44]	@ (800c578 <pbuf_free_ooseq+0x48>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	607b      	str	r3, [r7, #4]
 800c54e:	e00a      	b.n	800c566 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c554:	2b00      	cmp	r3, #0
 800c556:	d003      	beq.n	800c560 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f002 fc45 	bl	800ede8 <tcp_free_ooseq>
      return;
 800c55e:	e005      	b.n	800c56c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	68db      	ldr	r3, [r3, #12]
 800c564:	607b      	str	r3, [r7, #4]
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d1f1      	bne.n	800c550 <pbuf_free_ooseq+0x20>
    }
  }
}
 800c56c:	3708      	adds	r7, #8
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}
 800c572:	bf00      	nop
 800c574:	24007ef9 	.word	0x24007ef9
 800c578:	24007f08 	.word	0x24007f08

0800c57c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b082      	sub	sp, #8
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c584:	f7ff ffd4 	bl	800c530 <pbuf_free_ooseq>
}
 800c588:	bf00      	nop
 800c58a:	3708      	adds	r7, #8
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}

0800c590 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b082      	sub	sp, #8
 800c594:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c596:	f009 ff4d 	bl	8016434 <sys_arch_protect>
 800c59a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c59c:	4b0f      	ldr	r3, [pc, #60]	@ (800c5dc <pbuf_pool_is_empty+0x4c>)
 800c59e:	781b      	ldrb	r3, [r3, #0]
 800c5a0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c5a2:	4b0e      	ldr	r3, [pc, #56]	@ (800c5dc <pbuf_pool_is_empty+0x4c>)
 800c5a4:	2201      	movs	r2, #1
 800c5a6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f009 ff51 	bl	8016450 <sys_arch_unprotect>

  if (!queued) {
 800c5ae:	78fb      	ldrb	r3, [r7, #3]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d10f      	bne.n	800c5d4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c5b4:	2100      	movs	r1, #0
 800c5b6:	480a      	ldr	r0, [pc, #40]	@ (800c5e0 <pbuf_pool_is_empty+0x50>)
 800c5b8:	f7fe fdd8 	bl	800b16c <tcpip_try_callback>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d008      	beq.n	800c5d4 <pbuf_pool_is_empty+0x44>
 800c5c2:	f009 ff37 	bl	8016434 <sys_arch_protect>
 800c5c6:	6078      	str	r0, [r7, #4]
 800c5c8:	4b04      	ldr	r3, [pc, #16]	@ (800c5dc <pbuf_pool_is_empty+0x4c>)
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	701a      	strb	r2, [r3, #0]
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f009 ff3e 	bl	8016450 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c5d4:	bf00      	nop
 800c5d6:	3708      	adds	r7, #8
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}
 800c5dc:	24007ef9 	.word	0x24007ef9
 800c5e0:	0800c57d 	.word	0x0800c57d

0800c5e4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c5e4:	b480      	push	{r7}
 800c5e6:	b085      	sub	sp, #20
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	60f8      	str	r0, [r7, #12]
 800c5ec:	60b9      	str	r1, [r7, #8]
 800c5ee:	4611      	mov	r1, r2
 800c5f0:	461a      	mov	r2, r3
 800c5f2:	460b      	mov	r3, r1
 800c5f4:	80fb      	strh	r3, [r7, #6]
 800c5f6:	4613      	mov	r3, r2
 800c5f8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	68ba      	ldr	r2, [r7, #8]
 800c604:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	88fa      	ldrh	r2, [r7, #6]
 800c60a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	88ba      	ldrh	r2, [r7, #4]
 800c610:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c612:	8b3b      	ldrh	r3, [r7, #24]
 800c614:	b2da      	uxtb	r2, r3
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	7f3a      	ldrb	r2, [r7, #28]
 800c61e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2201      	movs	r2, #1
 800c624:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	2200      	movs	r2, #0
 800c62a:	73da      	strb	r2, [r3, #15]
}
 800c62c:	bf00      	nop
 800c62e:	3714      	adds	r7, #20
 800c630:	46bd      	mov	sp, r7
 800c632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c636:	4770      	bx	lr

0800c638 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b08c      	sub	sp, #48	@ 0x30
 800c63c:	af02      	add	r7, sp, #8
 800c63e:	4603      	mov	r3, r0
 800c640:	71fb      	strb	r3, [r7, #7]
 800c642:	460b      	mov	r3, r1
 800c644:	80bb      	strh	r3, [r7, #4]
 800c646:	4613      	mov	r3, r2
 800c648:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c64a:	79fb      	ldrb	r3, [r7, #7]
 800c64c:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c64e:	887b      	ldrh	r3, [r7, #2]
 800c650:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800c654:	d07f      	beq.n	800c756 <pbuf_alloc+0x11e>
 800c656:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800c65a:	f300 80c8 	bgt.w	800c7ee <pbuf_alloc+0x1b6>
 800c65e:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800c662:	d010      	beq.n	800c686 <pbuf_alloc+0x4e>
 800c664:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800c668:	f300 80c1 	bgt.w	800c7ee <pbuf_alloc+0x1b6>
 800c66c:	2b01      	cmp	r3, #1
 800c66e:	d002      	beq.n	800c676 <pbuf_alloc+0x3e>
 800c670:	2b41      	cmp	r3, #65	@ 0x41
 800c672:	f040 80bc 	bne.w	800c7ee <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c676:	887a      	ldrh	r2, [r7, #2]
 800c678:	88bb      	ldrh	r3, [r7, #4]
 800c67a:	4619      	mov	r1, r3
 800c67c:	2000      	movs	r0, #0
 800c67e:	f000 f8d1 	bl	800c824 <pbuf_alloc_reference>
 800c682:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800c684:	e0bd      	b.n	800c802 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c686:	2300      	movs	r3, #0
 800c688:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800c68a:	2300      	movs	r3, #0
 800c68c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c68e:	88bb      	ldrh	r3, [r7, #4]
 800c690:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c692:	200c      	movs	r0, #12
 800c694:	f7ff fb9a 	bl	800bdcc <memp_malloc>
 800c698:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c69a:	693b      	ldr	r3, [r7, #16]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d109      	bne.n	800c6b4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800c6a0:	f7ff ff76 	bl	800c590 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c6a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d002      	beq.n	800c6b0 <pbuf_alloc+0x78>
            pbuf_free(p);
 800c6aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c6ac:	f000 faa8 	bl	800cc00 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	e0a7      	b.n	800c804 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c6b4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c6b6:	3303      	adds	r3, #3
 800c6b8:	b29b      	uxth	r3, r3
 800c6ba:	f023 0303 	bic.w	r3, r3, #3
 800c6be:	b29b      	uxth	r3, r3
 800c6c0:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800c6c4:	b29b      	uxth	r3, r3
 800c6c6:	8b7a      	ldrh	r2, [r7, #26]
 800c6c8:	4293      	cmp	r3, r2
 800c6ca:	bf28      	it	cs
 800c6cc:	4613      	movcs	r3, r2
 800c6ce:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c6d0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c6d2:	3310      	adds	r3, #16
 800c6d4:	693a      	ldr	r2, [r7, #16]
 800c6d6:	4413      	add	r3, r2
 800c6d8:	3303      	adds	r3, #3
 800c6da:	f023 0303 	bic.w	r3, r3, #3
 800c6de:	4618      	mov	r0, r3
 800c6e0:	89f9      	ldrh	r1, [r7, #14]
 800c6e2:	8b7a      	ldrh	r2, [r7, #26]
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	9301      	str	r3, [sp, #4]
 800c6e8:	887b      	ldrh	r3, [r7, #2]
 800c6ea:	9300      	str	r3, [sp, #0]
 800c6ec:	460b      	mov	r3, r1
 800c6ee:	4601      	mov	r1, r0
 800c6f0:	6938      	ldr	r0, [r7, #16]
 800c6f2:	f7ff ff77 	bl	800c5e4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c6f6:	693b      	ldr	r3, [r7, #16]
 800c6f8:	685b      	ldr	r3, [r3, #4]
 800c6fa:	f003 0303 	and.w	r3, r3, #3
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d006      	beq.n	800c710 <pbuf_alloc+0xd8>
 800c702:	4b42      	ldr	r3, [pc, #264]	@ (800c80c <pbuf_alloc+0x1d4>)
 800c704:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c708:	4941      	ldr	r1, [pc, #260]	@ (800c810 <pbuf_alloc+0x1d8>)
 800c70a:	4842      	ldr	r0, [pc, #264]	@ (800c814 <pbuf_alloc+0x1dc>)
 800c70c:	f009 ffb0 	bl	8016670 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c710:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c712:	3303      	adds	r3, #3
 800c714:	f023 0303 	bic.w	r3, r3, #3
 800c718:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800c71c:	d106      	bne.n	800c72c <pbuf_alloc+0xf4>
 800c71e:	4b3b      	ldr	r3, [pc, #236]	@ (800c80c <pbuf_alloc+0x1d4>)
 800c720:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800c724:	493c      	ldr	r1, [pc, #240]	@ (800c818 <pbuf_alloc+0x1e0>)
 800c726:	483b      	ldr	r0, [pc, #236]	@ (800c814 <pbuf_alloc+0x1dc>)
 800c728:	f009 ffa2 	bl	8016670 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800c72c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d102      	bne.n	800c738 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	627b      	str	r3, [r7, #36]	@ 0x24
 800c736:	e002      	b.n	800c73e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800c738:	69fb      	ldr	r3, [r7, #28]
 800c73a:	693a      	ldr	r2, [r7, #16]
 800c73c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800c742:	8b7a      	ldrh	r2, [r7, #26]
 800c744:	89fb      	ldrh	r3, [r7, #14]
 800c746:	1ad3      	subs	r3, r2, r3
 800c748:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800c74a:	2300      	movs	r3, #0
 800c74c:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800c74e:	8b7b      	ldrh	r3, [r7, #26]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d19e      	bne.n	800c692 <pbuf_alloc+0x5a>
      break;
 800c754:	e055      	b.n	800c802 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c756:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c758:	3303      	adds	r3, #3
 800c75a:	b29b      	uxth	r3, r3
 800c75c:	f023 0303 	bic.w	r3, r3, #3
 800c760:	b29a      	uxth	r2, r3
 800c762:	88bb      	ldrh	r3, [r7, #4]
 800c764:	3303      	adds	r3, #3
 800c766:	b29b      	uxth	r3, r3
 800c768:	f023 0303 	bic.w	r3, r3, #3
 800c76c:	b29b      	uxth	r3, r3
 800c76e:	4413      	add	r3, r2
 800c770:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c772:	8b3b      	ldrh	r3, [r7, #24]
 800c774:	3310      	adds	r3, #16
 800c776:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c778:	8b3a      	ldrh	r2, [r7, #24]
 800c77a:	88bb      	ldrh	r3, [r7, #4]
 800c77c:	3303      	adds	r3, #3
 800c77e:	f023 0303 	bic.w	r3, r3, #3
 800c782:	429a      	cmp	r2, r3
 800c784:	d306      	bcc.n	800c794 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800c786:	8afa      	ldrh	r2, [r7, #22]
 800c788:	88bb      	ldrh	r3, [r7, #4]
 800c78a:	3303      	adds	r3, #3
 800c78c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c790:	429a      	cmp	r2, r3
 800c792:	d201      	bcs.n	800c798 <pbuf_alloc+0x160>
        return NULL;
 800c794:	2300      	movs	r3, #0
 800c796:	e035      	b.n	800c804 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c798:	8afb      	ldrh	r3, [r7, #22]
 800c79a:	4618      	mov	r0, r3
 800c79c:	f7ff f972 	bl	800ba84 <mem_malloc>
 800c7a0:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800c7a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d101      	bne.n	800c7ac <pbuf_alloc+0x174>
        return NULL;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	e02b      	b.n	800c804 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c7ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c7ae:	3310      	adds	r3, #16
 800c7b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c7b2:	4413      	add	r3, r2
 800c7b4:	3303      	adds	r3, #3
 800c7b6:	f023 0303 	bic.w	r3, r3, #3
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	88b9      	ldrh	r1, [r7, #4]
 800c7be:	88ba      	ldrh	r2, [r7, #4]
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	9301      	str	r3, [sp, #4]
 800c7c4:	887b      	ldrh	r3, [r7, #2]
 800c7c6:	9300      	str	r3, [sp, #0]
 800c7c8:	460b      	mov	r3, r1
 800c7ca:	4601      	mov	r1, r0
 800c7cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c7ce:	f7ff ff09 	bl	800c5e4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c7d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7d4:	685b      	ldr	r3, [r3, #4]
 800c7d6:	f003 0303 	and.w	r3, r3, #3
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d010      	beq.n	800c800 <pbuf_alloc+0x1c8>
 800c7de:	4b0b      	ldr	r3, [pc, #44]	@ (800c80c <pbuf_alloc+0x1d4>)
 800c7e0:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800c7e4:	490d      	ldr	r1, [pc, #52]	@ (800c81c <pbuf_alloc+0x1e4>)
 800c7e6:	480b      	ldr	r0, [pc, #44]	@ (800c814 <pbuf_alloc+0x1dc>)
 800c7e8:	f009 ff42 	bl	8016670 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800c7ec:	e008      	b.n	800c800 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c7ee:	4b07      	ldr	r3, [pc, #28]	@ (800c80c <pbuf_alloc+0x1d4>)
 800c7f0:	f240 1227 	movw	r2, #295	@ 0x127
 800c7f4:	490a      	ldr	r1, [pc, #40]	@ (800c820 <pbuf_alloc+0x1e8>)
 800c7f6:	4807      	ldr	r0, [pc, #28]	@ (800c814 <pbuf_alloc+0x1dc>)
 800c7f8:	f009 ff3a 	bl	8016670 <iprintf>
      return NULL;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	e001      	b.n	800c804 <pbuf_alloc+0x1cc>
      break;
 800c800:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c804:	4618      	mov	r0, r3
 800c806:	3728      	adds	r7, #40	@ 0x28
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}
 800c80c:	08018698 	.word	0x08018698
 800c810:	080186c8 	.word	0x080186c8
 800c814:	080186f8 	.word	0x080186f8
 800c818:	08018720 	.word	0x08018720
 800c81c:	08018754 	.word	0x08018754
 800c820:	08018780 	.word	0x08018780

0800c824 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b086      	sub	sp, #24
 800c828:	af02      	add	r7, sp, #8
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	460b      	mov	r3, r1
 800c82e:	807b      	strh	r3, [r7, #2]
 800c830:	4613      	mov	r3, r2
 800c832:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c834:	883b      	ldrh	r3, [r7, #0]
 800c836:	2b41      	cmp	r3, #65	@ 0x41
 800c838:	d009      	beq.n	800c84e <pbuf_alloc_reference+0x2a>
 800c83a:	883b      	ldrh	r3, [r7, #0]
 800c83c:	2b01      	cmp	r3, #1
 800c83e:	d006      	beq.n	800c84e <pbuf_alloc_reference+0x2a>
 800c840:	4b0f      	ldr	r3, [pc, #60]	@ (800c880 <pbuf_alloc_reference+0x5c>)
 800c842:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800c846:	490f      	ldr	r1, [pc, #60]	@ (800c884 <pbuf_alloc_reference+0x60>)
 800c848:	480f      	ldr	r0, [pc, #60]	@ (800c888 <pbuf_alloc_reference+0x64>)
 800c84a:	f009 ff11 	bl	8016670 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c84e:	200b      	movs	r0, #11
 800c850:	f7ff fabc 	bl	800bdcc <memp_malloc>
 800c854:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d101      	bne.n	800c860 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800c85c:	2300      	movs	r3, #0
 800c85e:	e00b      	b.n	800c878 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800c860:	8879      	ldrh	r1, [r7, #2]
 800c862:	887a      	ldrh	r2, [r7, #2]
 800c864:	2300      	movs	r3, #0
 800c866:	9301      	str	r3, [sp, #4]
 800c868:	883b      	ldrh	r3, [r7, #0]
 800c86a:	9300      	str	r3, [sp, #0]
 800c86c:	460b      	mov	r3, r1
 800c86e:	6879      	ldr	r1, [r7, #4]
 800c870:	68f8      	ldr	r0, [r7, #12]
 800c872:	f7ff feb7 	bl	800c5e4 <pbuf_init_alloced_pbuf>
  return p;
 800c876:	68fb      	ldr	r3, [r7, #12]
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3710      	adds	r7, #16
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}
 800c880:	08018698 	.word	0x08018698
 800c884:	0801879c 	.word	0x0801879c
 800c888:	080186f8 	.word	0x080186f8

0800c88c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b088      	sub	sp, #32
 800c890:	af02      	add	r7, sp, #8
 800c892:	607b      	str	r3, [r7, #4]
 800c894:	4603      	mov	r3, r0
 800c896:	73fb      	strb	r3, [r7, #15]
 800c898:	460b      	mov	r3, r1
 800c89a:	81bb      	strh	r3, [r7, #12]
 800c89c:	4613      	mov	r3, r2
 800c89e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800c8a0:	7bfb      	ldrb	r3, [r7, #15]
 800c8a2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c8a4:	8a7b      	ldrh	r3, [r7, #18]
 800c8a6:	3303      	adds	r3, #3
 800c8a8:	f023 0203 	bic.w	r2, r3, #3
 800c8ac:	89bb      	ldrh	r3, [r7, #12]
 800c8ae:	441a      	add	r2, r3
 800c8b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	d901      	bls.n	800c8ba <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	e018      	b.n	800c8ec <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800c8ba:	6a3b      	ldr	r3, [r7, #32]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d007      	beq.n	800c8d0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c8c0:	8a7b      	ldrh	r3, [r7, #18]
 800c8c2:	3303      	adds	r3, #3
 800c8c4:	f023 0303 	bic.w	r3, r3, #3
 800c8c8:	6a3a      	ldr	r2, [r7, #32]
 800c8ca:	4413      	add	r3, r2
 800c8cc:	617b      	str	r3, [r7, #20]
 800c8ce:	e001      	b.n	800c8d4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	89b9      	ldrh	r1, [r7, #12]
 800c8d8:	89ba      	ldrh	r2, [r7, #12]
 800c8da:	2302      	movs	r3, #2
 800c8dc:	9301      	str	r3, [sp, #4]
 800c8de:	897b      	ldrh	r3, [r7, #10]
 800c8e0:	9300      	str	r3, [sp, #0]
 800c8e2:	460b      	mov	r3, r1
 800c8e4:	6979      	ldr	r1, [r7, #20]
 800c8e6:	f7ff fe7d 	bl	800c5e4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800c8ea:	687b      	ldr	r3, [r7, #4]
}
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	3718      	adds	r7, #24
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	bd80      	pop	{r7, pc}

0800c8f4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b084      	sub	sp, #16
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
 800c8fc:	460b      	mov	r3, r1
 800c8fe:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d106      	bne.n	800c914 <pbuf_realloc+0x20>
 800c906:	4b3a      	ldr	r3, [pc, #232]	@ (800c9f0 <pbuf_realloc+0xfc>)
 800c908:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800c90c:	4939      	ldr	r1, [pc, #228]	@ (800c9f4 <pbuf_realloc+0x100>)
 800c90e:	483a      	ldr	r0, [pc, #232]	@ (800c9f8 <pbuf_realloc+0x104>)
 800c910:	f009 feae 	bl	8016670 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	891b      	ldrh	r3, [r3, #8]
 800c918:	887a      	ldrh	r2, [r7, #2]
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d263      	bcs.n	800c9e6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	891a      	ldrh	r2, [r3, #8]
 800c922:	887b      	ldrh	r3, [r7, #2]
 800c924:	1ad3      	subs	r3, r2, r3
 800c926:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c928:	887b      	ldrh	r3, [r7, #2]
 800c92a:	817b      	strh	r3, [r7, #10]
  q = p;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c930:	e018      	b.n	800c964 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	895b      	ldrh	r3, [r3, #10]
 800c936:	897a      	ldrh	r2, [r7, #10]
 800c938:	1ad3      	subs	r3, r2, r3
 800c93a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	891a      	ldrh	r2, [r3, #8]
 800c940:	893b      	ldrh	r3, [r7, #8]
 800c942:	1ad3      	subs	r3, r2, r3
 800c944:	b29a      	uxth	r2, r3
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d106      	bne.n	800c964 <pbuf_realloc+0x70>
 800c956:	4b26      	ldr	r3, [pc, #152]	@ (800c9f0 <pbuf_realloc+0xfc>)
 800c958:	f240 12af 	movw	r2, #431	@ 0x1af
 800c95c:	4927      	ldr	r1, [pc, #156]	@ (800c9fc <pbuf_realloc+0x108>)
 800c95e:	4826      	ldr	r0, [pc, #152]	@ (800c9f8 <pbuf_realloc+0x104>)
 800c960:	f009 fe86 	bl	8016670 <iprintf>
  while (rem_len > q->len) {
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	895b      	ldrh	r3, [r3, #10]
 800c968:	897a      	ldrh	r2, [r7, #10]
 800c96a:	429a      	cmp	r2, r3
 800c96c:	d8e1      	bhi.n	800c932 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	7b1b      	ldrb	r3, [r3, #12]
 800c972:	f003 030f 	and.w	r3, r3, #15
 800c976:	2b00      	cmp	r3, #0
 800c978:	d121      	bne.n	800c9be <pbuf_realloc+0xca>
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	895b      	ldrh	r3, [r3, #10]
 800c97e:	897a      	ldrh	r2, [r7, #10]
 800c980:	429a      	cmp	r2, r3
 800c982:	d01c      	beq.n	800c9be <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	7b5b      	ldrb	r3, [r3, #13]
 800c988:	f003 0302 	and.w	r3, r3, #2
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d116      	bne.n	800c9be <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	685a      	ldr	r2, [r3, #4]
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	1ad3      	subs	r3, r2, r3
 800c998:	b29a      	uxth	r2, r3
 800c99a:	897b      	ldrh	r3, [r7, #10]
 800c99c:	4413      	add	r3, r2
 800c99e:	b29b      	uxth	r3, r3
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	68f8      	ldr	r0, [r7, #12]
 800c9a4:	f7fe ff64 	bl	800b870 <mem_trim>
 800c9a8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d106      	bne.n	800c9be <pbuf_realloc+0xca>
 800c9b0:	4b0f      	ldr	r3, [pc, #60]	@ (800c9f0 <pbuf_realloc+0xfc>)
 800c9b2:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800c9b6:	4912      	ldr	r1, [pc, #72]	@ (800ca00 <pbuf_realloc+0x10c>)
 800c9b8:	480f      	ldr	r0, [pc, #60]	@ (800c9f8 <pbuf_realloc+0x104>)
 800c9ba:	f009 fe59 	bl	8016670 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	897a      	ldrh	r2, [r7, #10]
 800c9c2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	895a      	ldrh	r2, [r3, #10]
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d004      	beq.n	800c9de <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f000 f911 	bl	800cc00 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	601a      	str	r2, [r3, #0]
 800c9e4:	e000      	b.n	800c9e8 <pbuf_realloc+0xf4>
    return;
 800c9e6:	bf00      	nop

}
 800c9e8:	3710      	adds	r7, #16
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}
 800c9ee:	bf00      	nop
 800c9f0:	08018698 	.word	0x08018698
 800c9f4:	080187b0 	.word	0x080187b0
 800c9f8:	080186f8 	.word	0x080186f8
 800c9fc:	080187c8 	.word	0x080187c8
 800ca00:	080187e0 	.word	0x080187e0

0800ca04 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b086      	sub	sp, #24
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	60f8      	str	r0, [r7, #12]
 800ca0c:	60b9      	str	r1, [r7, #8]
 800ca0e:	4613      	mov	r3, r2
 800ca10:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d106      	bne.n	800ca26 <pbuf_add_header_impl+0x22>
 800ca18:	4b2b      	ldr	r3, [pc, #172]	@ (800cac8 <pbuf_add_header_impl+0xc4>)
 800ca1a:	f240 12df 	movw	r2, #479	@ 0x1df
 800ca1e:	492b      	ldr	r1, [pc, #172]	@ (800cacc <pbuf_add_header_impl+0xc8>)
 800ca20:	482b      	ldr	r0, [pc, #172]	@ (800cad0 <pbuf_add_header_impl+0xcc>)
 800ca22:	f009 fe25 	bl	8016670 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d003      	beq.n	800ca34 <pbuf_add_header_impl+0x30>
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ca32:	d301      	bcc.n	800ca38 <pbuf_add_header_impl+0x34>
    return 1;
 800ca34:	2301      	movs	r3, #1
 800ca36:	e043      	b.n	800cac0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d101      	bne.n	800ca42 <pbuf_add_header_impl+0x3e>
    return 0;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	e03e      	b.n	800cac0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	891a      	ldrh	r2, [r3, #8]
 800ca4a:	8a7b      	ldrh	r3, [r7, #18]
 800ca4c:	4413      	add	r3, r2
 800ca4e:	b29b      	uxth	r3, r3
 800ca50:	8a7a      	ldrh	r2, [r7, #18]
 800ca52:	429a      	cmp	r2, r3
 800ca54:	d901      	bls.n	800ca5a <pbuf_add_header_impl+0x56>
    return 1;
 800ca56:	2301      	movs	r3, #1
 800ca58:	e032      	b.n	800cac0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	7b1b      	ldrb	r3, [r3, #12]
 800ca5e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800ca60:	8a3b      	ldrh	r3, [r7, #16]
 800ca62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d00c      	beq.n	800ca84 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	685a      	ldr	r2, [r3, #4]
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	425b      	negs	r3, r3
 800ca72:	4413      	add	r3, r2
 800ca74:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	3310      	adds	r3, #16
 800ca7a:	697a      	ldr	r2, [r7, #20]
 800ca7c:	429a      	cmp	r2, r3
 800ca7e:	d20d      	bcs.n	800ca9c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800ca80:	2301      	movs	r3, #1
 800ca82:	e01d      	b.n	800cac0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ca84:	79fb      	ldrb	r3, [r7, #7]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d006      	beq.n	800ca98 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	685a      	ldr	r2, [r3, #4]
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	425b      	negs	r3, r3
 800ca92:	4413      	add	r3, r2
 800ca94:	617b      	str	r3, [r7, #20]
 800ca96:	e001      	b.n	800ca9c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800ca98:	2301      	movs	r3, #1
 800ca9a:	e011      	b.n	800cac0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	697a      	ldr	r2, [r7, #20]
 800caa0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	895a      	ldrh	r2, [r3, #10]
 800caa6:	8a7b      	ldrh	r3, [r7, #18]
 800caa8:	4413      	add	r3, r2
 800caaa:	b29a      	uxth	r2, r3
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	891a      	ldrh	r2, [r3, #8]
 800cab4:	8a7b      	ldrh	r3, [r7, #18]
 800cab6:	4413      	add	r3, r2
 800cab8:	b29a      	uxth	r2, r3
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	811a      	strh	r2, [r3, #8]


  return 0;
 800cabe:	2300      	movs	r3, #0
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	3718      	adds	r7, #24
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}
 800cac8:	08018698 	.word	0x08018698
 800cacc:	080187fc 	.word	0x080187fc
 800cad0:	080186f8 	.word	0x080186f8

0800cad4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b082      	sub	sp, #8
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
 800cadc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800cade:	2200      	movs	r2, #0
 800cae0:	6839      	ldr	r1, [r7, #0]
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f7ff ff8e 	bl	800ca04 <pbuf_add_header_impl>
 800cae8:	4603      	mov	r3, r0
}
 800caea:	4618      	mov	r0, r3
 800caec:	3708      	adds	r7, #8
 800caee:	46bd      	mov	sp, r7
 800caf0:	bd80      	pop	{r7, pc}
	...

0800caf4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b084      	sub	sp, #16
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d106      	bne.n	800cb12 <pbuf_remove_header+0x1e>
 800cb04:	4b20      	ldr	r3, [pc, #128]	@ (800cb88 <pbuf_remove_header+0x94>)
 800cb06:	f240 224b 	movw	r2, #587	@ 0x24b
 800cb0a:	4920      	ldr	r1, [pc, #128]	@ (800cb8c <pbuf_remove_header+0x98>)
 800cb0c:	4820      	ldr	r0, [pc, #128]	@ (800cb90 <pbuf_remove_header+0x9c>)
 800cb0e:	f009 fdaf 	bl	8016670 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d003      	beq.n	800cb20 <pbuf_remove_header+0x2c>
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cb1e:	d301      	bcc.n	800cb24 <pbuf_remove_header+0x30>
    return 1;
 800cb20:	2301      	movs	r3, #1
 800cb22:	e02c      	b.n	800cb7e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d101      	bne.n	800cb2e <pbuf_remove_header+0x3a>
    return 0;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	e027      	b.n	800cb7e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	895b      	ldrh	r3, [r3, #10]
 800cb36:	89fa      	ldrh	r2, [r7, #14]
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	d908      	bls.n	800cb4e <pbuf_remove_header+0x5a>
 800cb3c:	4b12      	ldr	r3, [pc, #72]	@ (800cb88 <pbuf_remove_header+0x94>)
 800cb3e:	f240 2255 	movw	r2, #597	@ 0x255
 800cb42:	4914      	ldr	r1, [pc, #80]	@ (800cb94 <pbuf_remove_header+0xa0>)
 800cb44:	4812      	ldr	r0, [pc, #72]	@ (800cb90 <pbuf_remove_header+0x9c>)
 800cb46:	f009 fd93 	bl	8016670 <iprintf>
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	e017      	b.n	800cb7e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	685b      	ldr	r3, [r3, #4]
 800cb52:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	685a      	ldr	r2, [r3, #4]
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	441a      	add	r2, r3
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	895a      	ldrh	r2, [r3, #10]
 800cb64:	89fb      	ldrh	r3, [r7, #14]
 800cb66:	1ad3      	subs	r3, r2, r3
 800cb68:	b29a      	uxth	r2, r3
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	891a      	ldrh	r2, [r3, #8]
 800cb72:	89fb      	ldrh	r3, [r7, #14]
 800cb74:	1ad3      	subs	r3, r2, r3
 800cb76:	b29a      	uxth	r2, r3
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800cb7c:	2300      	movs	r3, #0
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3710      	adds	r7, #16
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}
 800cb86:	bf00      	nop
 800cb88:	08018698 	.word	0x08018698
 800cb8c:	080187fc 	.word	0x080187fc
 800cb90:	080186f8 	.word	0x080186f8
 800cb94:	08018808 	.word	0x08018808

0800cb98 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b082      	sub	sp, #8
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
 800cba0:	460b      	mov	r3, r1
 800cba2:	807b      	strh	r3, [r7, #2]
 800cba4:	4613      	mov	r3, r2
 800cba6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800cba8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	da08      	bge.n	800cbc2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800cbb0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cbb4:	425b      	negs	r3, r3
 800cbb6:	4619      	mov	r1, r3
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f7ff ff9b 	bl	800caf4 <pbuf_remove_header>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	e007      	b.n	800cbd2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800cbc2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cbc6:	787a      	ldrb	r2, [r7, #1]
 800cbc8:	4619      	mov	r1, r3
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f7ff ff1a 	bl	800ca04 <pbuf_add_header_impl>
 800cbd0:	4603      	mov	r3, r0
  }
}
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	3708      	adds	r7, #8
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}

0800cbda <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800cbda:	b580      	push	{r7, lr}
 800cbdc:	b082      	sub	sp, #8
 800cbde:	af00      	add	r7, sp, #0
 800cbe0:	6078      	str	r0, [r7, #4]
 800cbe2:	460b      	mov	r3, r1
 800cbe4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800cbe6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cbea:	2201      	movs	r2, #1
 800cbec:	4619      	mov	r1, r3
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f7ff ffd2 	bl	800cb98 <pbuf_header_impl>
 800cbf4:	4603      	mov	r3, r0
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	3708      	adds	r7, #8
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}
	...

0800cc00 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b088      	sub	sp, #32
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d10b      	bne.n	800cc26 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d106      	bne.n	800cc22 <pbuf_free+0x22>
 800cc14:	4b3b      	ldr	r3, [pc, #236]	@ (800cd04 <pbuf_free+0x104>)
 800cc16:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800cc1a:	493b      	ldr	r1, [pc, #236]	@ (800cd08 <pbuf_free+0x108>)
 800cc1c:	483b      	ldr	r0, [pc, #236]	@ (800cd0c <pbuf_free+0x10c>)
 800cc1e:	f009 fd27 	bl	8016670 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800cc22:	2300      	movs	r3, #0
 800cc24:	e069      	b.n	800ccfa <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800cc26:	2300      	movs	r3, #0
 800cc28:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800cc2a:	e062      	b.n	800ccf2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800cc2c:	f009 fc02 	bl	8016434 <sys_arch_protect>
 800cc30:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	7b9b      	ldrb	r3, [r3, #14]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d106      	bne.n	800cc48 <pbuf_free+0x48>
 800cc3a:	4b32      	ldr	r3, [pc, #200]	@ (800cd04 <pbuf_free+0x104>)
 800cc3c:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800cc40:	4933      	ldr	r1, [pc, #204]	@ (800cd10 <pbuf_free+0x110>)
 800cc42:	4832      	ldr	r0, [pc, #200]	@ (800cd0c <pbuf_free+0x10c>)
 800cc44:	f009 fd14 	bl	8016670 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	7b9b      	ldrb	r3, [r3, #14]
 800cc4c:	3b01      	subs	r3, #1
 800cc4e:	b2da      	uxtb	r2, r3
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	739a      	strb	r2, [r3, #14]
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	7b9b      	ldrb	r3, [r3, #14]
 800cc58:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800cc5a:	69b8      	ldr	r0, [r7, #24]
 800cc5c:	f009 fbf8 	bl	8016450 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800cc60:	7dfb      	ldrb	r3, [r7, #23]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d143      	bne.n	800ccee <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	7b1b      	ldrb	r3, [r3, #12]
 800cc70:	f003 030f 	and.w	r3, r3, #15
 800cc74:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	7b5b      	ldrb	r3, [r3, #13]
 800cc7a:	f003 0302 	and.w	r3, r3, #2
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d011      	beq.n	800cca6 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	691b      	ldr	r3, [r3, #16]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d106      	bne.n	800cc9c <pbuf_free+0x9c>
 800cc8e:	4b1d      	ldr	r3, [pc, #116]	@ (800cd04 <pbuf_free+0x104>)
 800cc90:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800cc94:	491f      	ldr	r1, [pc, #124]	@ (800cd14 <pbuf_free+0x114>)
 800cc96:	481d      	ldr	r0, [pc, #116]	@ (800cd0c <pbuf_free+0x10c>)
 800cc98:	f009 fcea 	bl	8016670 <iprintf>
        pc->custom_free_function(p);
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	691b      	ldr	r3, [r3, #16]
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	4798      	blx	r3
 800cca4:	e01d      	b.n	800cce2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800cca6:	7bfb      	ldrb	r3, [r7, #15]
 800cca8:	2b02      	cmp	r3, #2
 800ccaa:	d104      	bne.n	800ccb6 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800ccac:	6879      	ldr	r1, [r7, #4]
 800ccae:	200c      	movs	r0, #12
 800ccb0:	f7ff f902 	bl	800beb8 <memp_free>
 800ccb4:	e015      	b.n	800cce2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800ccb6:	7bfb      	ldrb	r3, [r7, #15]
 800ccb8:	2b01      	cmp	r3, #1
 800ccba:	d104      	bne.n	800ccc6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800ccbc:	6879      	ldr	r1, [r7, #4]
 800ccbe:	200b      	movs	r0, #11
 800ccc0:	f7ff f8fa 	bl	800beb8 <memp_free>
 800ccc4:	e00d      	b.n	800cce2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800ccc6:	7bfb      	ldrb	r3, [r7, #15]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d103      	bne.n	800ccd4 <pbuf_free+0xd4>
          mem_free(p);
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	f7fe fd3f 	bl	800b750 <mem_free>
 800ccd2:	e006      	b.n	800cce2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800ccd4:	4b0b      	ldr	r3, [pc, #44]	@ (800cd04 <pbuf_free+0x104>)
 800ccd6:	f240 320f 	movw	r2, #783	@ 0x30f
 800ccda:	490f      	ldr	r1, [pc, #60]	@ (800cd18 <pbuf_free+0x118>)
 800ccdc:	480b      	ldr	r0, [pc, #44]	@ (800cd0c <pbuf_free+0x10c>)
 800ccde:	f009 fcc7 	bl	8016670 <iprintf>
        }
      }
      count++;
 800cce2:	7ffb      	ldrb	r3, [r7, #31]
 800cce4:	3301      	adds	r3, #1
 800cce6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	607b      	str	r3, [r7, #4]
 800ccec:	e001      	b.n	800ccf2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d199      	bne.n	800cc2c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ccf8:	7ffb      	ldrb	r3, [r7, #31]
}
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	3720      	adds	r7, #32
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}
 800cd02:	bf00      	nop
 800cd04:	08018698 	.word	0x08018698
 800cd08:	080187fc 	.word	0x080187fc
 800cd0c:	080186f8 	.word	0x080186f8
 800cd10:	08018828 	.word	0x08018828
 800cd14:	08018840 	.word	0x08018840
 800cd18:	08018864 	.word	0x08018864

0800cd1c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	b085      	sub	sp, #20
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800cd24:	2300      	movs	r3, #0
 800cd26:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800cd28:	e005      	b.n	800cd36 <pbuf_clen+0x1a>
    ++len;
 800cd2a:	89fb      	ldrh	r3, [r7, #14]
 800cd2c:	3301      	adds	r3, #1
 800cd2e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d1f6      	bne.n	800cd2a <pbuf_clen+0xe>
  }
  return len;
 800cd3c:	89fb      	ldrh	r3, [r7, #14]
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3714      	adds	r7, #20
 800cd42:	46bd      	mov	sp, r7
 800cd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd48:	4770      	bx	lr
	...

0800cd4c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b084      	sub	sp, #16
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d016      	beq.n	800cd88 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800cd5a:	f009 fb6b 	bl	8016434 <sys_arch_protect>
 800cd5e:	60f8      	str	r0, [r7, #12]
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	7b9b      	ldrb	r3, [r3, #14]
 800cd64:	3301      	adds	r3, #1
 800cd66:	b2da      	uxtb	r2, r3
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	739a      	strb	r2, [r3, #14]
 800cd6c:	68f8      	ldr	r0, [r7, #12]
 800cd6e:	f009 fb6f 	bl	8016450 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	7b9b      	ldrb	r3, [r3, #14]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d106      	bne.n	800cd88 <pbuf_ref+0x3c>
 800cd7a:	4b05      	ldr	r3, [pc, #20]	@ (800cd90 <pbuf_ref+0x44>)
 800cd7c:	f240 3242 	movw	r2, #834	@ 0x342
 800cd80:	4904      	ldr	r1, [pc, #16]	@ (800cd94 <pbuf_ref+0x48>)
 800cd82:	4805      	ldr	r0, [pc, #20]	@ (800cd98 <pbuf_ref+0x4c>)
 800cd84:	f009 fc74 	bl	8016670 <iprintf>
  }
}
 800cd88:	bf00      	nop
 800cd8a:	3710      	adds	r7, #16
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}
 800cd90:	08018698 	.word	0x08018698
 800cd94:	08018878 	.word	0x08018878
 800cd98:	080186f8 	.word	0x080186f8

0800cd9c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b084      	sub	sp, #16
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
 800cda4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d002      	beq.n	800cdb2 <pbuf_cat+0x16>
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d107      	bne.n	800cdc2 <pbuf_cat+0x26>
 800cdb2:	4b20      	ldr	r3, [pc, #128]	@ (800ce34 <pbuf_cat+0x98>)
 800cdb4:	f240 3259 	movw	r2, #857	@ 0x359
 800cdb8:	491f      	ldr	r1, [pc, #124]	@ (800ce38 <pbuf_cat+0x9c>)
 800cdba:	4820      	ldr	r0, [pc, #128]	@ (800ce3c <pbuf_cat+0xa0>)
 800cdbc:	f009 fc58 	bl	8016670 <iprintf>
 800cdc0:	e034      	b.n	800ce2c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	60fb      	str	r3, [r7, #12]
 800cdc6:	e00a      	b.n	800cdde <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	891a      	ldrh	r2, [r3, #8]
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	891b      	ldrh	r3, [r3, #8]
 800cdd0:	4413      	add	r3, r2
 800cdd2:	b29a      	uxth	r2, r3
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	60fb      	str	r3, [r7, #12]
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d1f0      	bne.n	800cdc8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	891a      	ldrh	r2, [r3, #8]
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	895b      	ldrh	r3, [r3, #10]
 800cdee:	429a      	cmp	r2, r3
 800cdf0:	d006      	beq.n	800ce00 <pbuf_cat+0x64>
 800cdf2:	4b10      	ldr	r3, [pc, #64]	@ (800ce34 <pbuf_cat+0x98>)
 800cdf4:	f240 3262 	movw	r2, #866	@ 0x362
 800cdf8:	4911      	ldr	r1, [pc, #68]	@ (800ce40 <pbuf_cat+0xa4>)
 800cdfa:	4810      	ldr	r0, [pc, #64]	@ (800ce3c <pbuf_cat+0xa0>)
 800cdfc:	f009 fc38 	bl	8016670 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d006      	beq.n	800ce16 <pbuf_cat+0x7a>
 800ce08:	4b0a      	ldr	r3, [pc, #40]	@ (800ce34 <pbuf_cat+0x98>)
 800ce0a:	f240 3263 	movw	r2, #867	@ 0x363
 800ce0e:	490d      	ldr	r1, [pc, #52]	@ (800ce44 <pbuf_cat+0xa8>)
 800ce10:	480a      	ldr	r0, [pc, #40]	@ (800ce3c <pbuf_cat+0xa0>)
 800ce12:	f009 fc2d 	bl	8016670 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	891a      	ldrh	r2, [r3, #8]
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	891b      	ldrh	r3, [r3, #8]
 800ce1e:	4413      	add	r3, r2
 800ce20:	b29a      	uxth	r2, r3
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	683a      	ldr	r2, [r7, #0]
 800ce2a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ce2c:	3710      	adds	r7, #16
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}
 800ce32:	bf00      	nop
 800ce34:	08018698 	.word	0x08018698
 800ce38:	0801888c 	.word	0x0801888c
 800ce3c:	080186f8 	.word	0x080186f8
 800ce40:	080188c4 	.word	0x080188c4
 800ce44:	080188f4 	.word	0x080188f4

0800ce48 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b086      	sub	sp, #24
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800ce52:	2300      	movs	r3, #0
 800ce54:	617b      	str	r3, [r7, #20]
 800ce56:	2300      	movs	r3, #0
 800ce58:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d008      	beq.n	800ce72 <pbuf_copy+0x2a>
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d005      	beq.n	800ce72 <pbuf_copy+0x2a>
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	891a      	ldrh	r2, [r3, #8]
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	891b      	ldrh	r3, [r3, #8]
 800ce6e:	429a      	cmp	r2, r3
 800ce70:	d209      	bcs.n	800ce86 <pbuf_copy+0x3e>
 800ce72:	4b57      	ldr	r3, [pc, #348]	@ (800cfd0 <pbuf_copy+0x188>)
 800ce74:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800ce78:	4956      	ldr	r1, [pc, #344]	@ (800cfd4 <pbuf_copy+0x18c>)
 800ce7a:	4857      	ldr	r0, [pc, #348]	@ (800cfd8 <pbuf_copy+0x190>)
 800ce7c:	f009 fbf8 	bl	8016670 <iprintf>
 800ce80:	f06f 030f 	mvn.w	r3, #15
 800ce84:	e09f      	b.n	800cfc6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	895b      	ldrh	r3, [r3, #10]
 800ce8a:	461a      	mov	r2, r3
 800ce8c:	697b      	ldr	r3, [r7, #20]
 800ce8e:	1ad2      	subs	r2, r2, r3
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	895b      	ldrh	r3, [r3, #10]
 800ce94:	4619      	mov	r1, r3
 800ce96:	693b      	ldr	r3, [r7, #16]
 800ce98:	1acb      	subs	r3, r1, r3
 800ce9a:	429a      	cmp	r2, r3
 800ce9c:	d306      	bcc.n	800ceac <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	895b      	ldrh	r3, [r3, #10]
 800cea2:	461a      	mov	r2, r3
 800cea4:	693b      	ldr	r3, [r7, #16]
 800cea6:	1ad3      	subs	r3, r2, r3
 800cea8:	60fb      	str	r3, [r7, #12]
 800ceaa:	e005      	b.n	800ceb8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	895b      	ldrh	r3, [r3, #10]
 800ceb0:	461a      	mov	r2, r3
 800ceb2:	697b      	ldr	r3, [r7, #20]
 800ceb4:	1ad3      	subs	r3, r2, r3
 800ceb6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	685a      	ldr	r2, [r3, #4]
 800cebc:	697b      	ldr	r3, [r7, #20]
 800cebe:	18d0      	adds	r0, r2, r3
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	685a      	ldr	r2, [r3, #4]
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	4413      	add	r3, r2
 800cec8:	68fa      	ldr	r2, [r7, #12]
 800ceca:	4619      	mov	r1, r3
 800cecc:	f009 fd01 	bl	80168d2 <memcpy>
    offset_to += len;
 800ced0:	697a      	ldr	r2, [r7, #20]
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	4413      	add	r3, r2
 800ced6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800ced8:	693a      	ldr	r2, [r7, #16]
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	4413      	add	r3, r2
 800cede:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	895b      	ldrh	r3, [r3, #10]
 800cee4:	461a      	mov	r2, r3
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	4293      	cmp	r3, r2
 800ceea:	d906      	bls.n	800cefa <pbuf_copy+0xb2>
 800ceec:	4b38      	ldr	r3, [pc, #224]	@ (800cfd0 <pbuf_copy+0x188>)
 800ceee:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800cef2:	493a      	ldr	r1, [pc, #232]	@ (800cfdc <pbuf_copy+0x194>)
 800cef4:	4838      	ldr	r0, [pc, #224]	@ (800cfd8 <pbuf_copy+0x190>)
 800cef6:	f009 fbbb 	bl	8016670 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	895b      	ldrh	r3, [r3, #10]
 800cefe:	461a      	mov	r2, r3
 800cf00:	693b      	ldr	r3, [r7, #16]
 800cf02:	4293      	cmp	r3, r2
 800cf04:	d906      	bls.n	800cf14 <pbuf_copy+0xcc>
 800cf06:	4b32      	ldr	r3, [pc, #200]	@ (800cfd0 <pbuf_copy+0x188>)
 800cf08:	f240 32da 	movw	r2, #986	@ 0x3da
 800cf0c:	4934      	ldr	r1, [pc, #208]	@ (800cfe0 <pbuf_copy+0x198>)
 800cf0e:	4832      	ldr	r0, [pc, #200]	@ (800cfd8 <pbuf_copy+0x190>)
 800cf10:	f009 fbae 	bl	8016670 <iprintf>
    if (offset_from >= p_from->len) {
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	895b      	ldrh	r3, [r3, #10]
 800cf18:	461a      	mov	r2, r3
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	d304      	bcc.n	800cf2a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800cf20:	2300      	movs	r3, #0
 800cf22:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	895b      	ldrh	r3, [r3, #10]
 800cf2e:	461a      	mov	r2, r3
 800cf30:	697b      	ldr	r3, [r7, #20]
 800cf32:	4293      	cmp	r3, r2
 800cf34:	d114      	bne.n	800cf60 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800cf36:	2300      	movs	r3, #0
 800cf38:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d10c      	bne.n	800cf60 <pbuf_copy+0x118>
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d009      	beq.n	800cf60 <pbuf_copy+0x118>
 800cf4c:	4b20      	ldr	r3, [pc, #128]	@ (800cfd0 <pbuf_copy+0x188>)
 800cf4e:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800cf52:	4924      	ldr	r1, [pc, #144]	@ (800cfe4 <pbuf_copy+0x19c>)
 800cf54:	4820      	ldr	r0, [pc, #128]	@ (800cfd8 <pbuf_copy+0x190>)
 800cf56:	f009 fb8b 	bl	8016670 <iprintf>
 800cf5a:	f06f 030f 	mvn.w	r3, #15
 800cf5e:	e032      	b.n	800cfc6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d013      	beq.n	800cf8e <pbuf_copy+0x146>
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	895a      	ldrh	r2, [r3, #10]
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	891b      	ldrh	r3, [r3, #8]
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	d10d      	bne.n	800cf8e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d009      	beq.n	800cf8e <pbuf_copy+0x146>
 800cf7a:	4b15      	ldr	r3, [pc, #84]	@ (800cfd0 <pbuf_copy+0x188>)
 800cf7c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800cf80:	4919      	ldr	r1, [pc, #100]	@ (800cfe8 <pbuf_copy+0x1a0>)
 800cf82:	4815      	ldr	r0, [pc, #84]	@ (800cfd8 <pbuf_copy+0x190>)
 800cf84:	f009 fb74 	bl	8016670 <iprintf>
 800cf88:	f06f 0305 	mvn.w	r3, #5
 800cf8c:	e01b      	b.n	800cfc6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d013      	beq.n	800cfbc <pbuf_copy+0x174>
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	895a      	ldrh	r2, [r3, #10]
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	891b      	ldrh	r3, [r3, #8]
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	d10d      	bne.n	800cfbc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d009      	beq.n	800cfbc <pbuf_copy+0x174>
 800cfa8:	4b09      	ldr	r3, [pc, #36]	@ (800cfd0 <pbuf_copy+0x188>)
 800cfaa:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800cfae:	490e      	ldr	r1, [pc, #56]	@ (800cfe8 <pbuf_copy+0x1a0>)
 800cfb0:	4809      	ldr	r0, [pc, #36]	@ (800cfd8 <pbuf_copy+0x190>)
 800cfb2:	f009 fb5d 	bl	8016670 <iprintf>
 800cfb6:	f06f 0305 	mvn.w	r3, #5
 800cfba:	e004      	b.n	800cfc6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	f47f af61 	bne.w	800ce86 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800cfc4:	2300      	movs	r3, #0
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3718      	adds	r7, #24
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}
 800cfce:	bf00      	nop
 800cfd0:	08018698 	.word	0x08018698
 800cfd4:	08018940 	.word	0x08018940
 800cfd8:	080186f8 	.word	0x080186f8
 800cfdc:	08018970 	.word	0x08018970
 800cfe0:	08018988 	.word	0x08018988
 800cfe4:	080189a4 	.word	0x080189a4
 800cfe8:	080189b4 	.word	0x080189b4

0800cfec <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b088      	sub	sp, #32
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	60f8      	str	r0, [r7, #12]
 800cff4:	60b9      	str	r1, [r7, #8]
 800cff6:	4611      	mov	r1, r2
 800cff8:	461a      	mov	r2, r3
 800cffa:	460b      	mov	r3, r1
 800cffc:	80fb      	strh	r3, [r7, #6]
 800cffe:	4613      	mov	r3, r2
 800d000:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d002:	2300      	movs	r3, #0
 800d004:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d006:	2300      	movs	r3, #0
 800d008:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d108      	bne.n	800d022 <pbuf_copy_partial+0x36>
 800d010:	4b2b      	ldr	r3, [pc, #172]	@ (800d0c0 <pbuf_copy_partial+0xd4>)
 800d012:	f240 420a 	movw	r2, #1034	@ 0x40a
 800d016:	492b      	ldr	r1, [pc, #172]	@ (800d0c4 <pbuf_copy_partial+0xd8>)
 800d018:	482b      	ldr	r0, [pc, #172]	@ (800d0c8 <pbuf_copy_partial+0xdc>)
 800d01a:	f009 fb29 	bl	8016670 <iprintf>
 800d01e:	2300      	movs	r3, #0
 800d020:	e04a      	b.n	800d0b8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d022:	68bb      	ldr	r3, [r7, #8]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d108      	bne.n	800d03a <pbuf_copy_partial+0x4e>
 800d028:	4b25      	ldr	r3, [pc, #148]	@ (800d0c0 <pbuf_copy_partial+0xd4>)
 800d02a:	f240 420b 	movw	r2, #1035	@ 0x40b
 800d02e:	4927      	ldr	r1, [pc, #156]	@ (800d0cc <pbuf_copy_partial+0xe0>)
 800d030:	4825      	ldr	r0, [pc, #148]	@ (800d0c8 <pbuf_copy_partial+0xdc>)
 800d032:	f009 fb1d 	bl	8016670 <iprintf>
 800d036:	2300      	movs	r3, #0
 800d038:	e03e      	b.n	800d0b8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	61fb      	str	r3, [r7, #28]
 800d03e:	e034      	b.n	800d0aa <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d040:	88bb      	ldrh	r3, [r7, #4]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d00a      	beq.n	800d05c <pbuf_copy_partial+0x70>
 800d046:	69fb      	ldr	r3, [r7, #28]
 800d048:	895b      	ldrh	r3, [r3, #10]
 800d04a:	88ba      	ldrh	r2, [r7, #4]
 800d04c:	429a      	cmp	r2, r3
 800d04e:	d305      	bcc.n	800d05c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d050:	69fb      	ldr	r3, [r7, #28]
 800d052:	895b      	ldrh	r3, [r3, #10]
 800d054:	88ba      	ldrh	r2, [r7, #4]
 800d056:	1ad3      	subs	r3, r2, r3
 800d058:	80bb      	strh	r3, [r7, #4]
 800d05a:	e023      	b.n	800d0a4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d05c:	69fb      	ldr	r3, [r7, #28]
 800d05e:	895a      	ldrh	r2, [r3, #10]
 800d060:	88bb      	ldrh	r3, [r7, #4]
 800d062:	1ad3      	subs	r3, r2, r3
 800d064:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d066:	8b3a      	ldrh	r2, [r7, #24]
 800d068:	88fb      	ldrh	r3, [r7, #6]
 800d06a:	429a      	cmp	r2, r3
 800d06c:	d901      	bls.n	800d072 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d06e:	88fb      	ldrh	r3, [r7, #6]
 800d070:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d072:	8b7b      	ldrh	r3, [r7, #26]
 800d074:	68ba      	ldr	r2, [r7, #8]
 800d076:	18d0      	adds	r0, r2, r3
 800d078:	69fb      	ldr	r3, [r7, #28]
 800d07a:	685a      	ldr	r2, [r3, #4]
 800d07c:	88bb      	ldrh	r3, [r7, #4]
 800d07e:	4413      	add	r3, r2
 800d080:	8b3a      	ldrh	r2, [r7, #24]
 800d082:	4619      	mov	r1, r3
 800d084:	f009 fc25 	bl	80168d2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d088:	8afa      	ldrh	r2, [r7, #22]
 800d08a:	8b3b      	ldrh	r3, [r7, #24]
 800d08c:	4413      	add	r3, r2
 800d08e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d090:	8b7a      	ldrh	r2, [r7, #26]
 800d092:	8b3b      	ldrh	r3, [r7, #24]
 800d094:	4413      	add	r3, r2
 800d096:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d098:	88fa      	ldrh	r2, [r7, #6]
 800d09a:	8b3b      	ldrh	r3, [r7, #24]
 800d09c:	1ad3      	subs	r3, r2, r3
 800d09e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d0a4:	69fb      	ldr	r3, [r7, #28]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	61fb      	str	r3, [r7, #28]
 800d0aa:	88fb      	ldrh	r3, [r7, #6]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d002      	beq.n	800d0b6 <pbuf_copy_partial+0xca>
 800d0b0:	69fb      	ldr	r3, [r7, #28]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d1c4      	bne.n	800d040 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d0b6:	8afb      	ldrh	r3, [r7, #22]
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	3720      	adds	r7, #32
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}
 800d0c0:	08018698 	.word	0x08018698
 800d0c4:	080189e0 	.word	0x080189e0
 800d0c8:	080186f8 	.word	0x080186f8
 800d0cc:	08018a00 	.word	0x08018a00

0800d0d0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b084      	sub	sp, #16
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	603a      	str	r2, [r7, #0]
 800d0da:	71fb      	strb	r3, [r7, #7]
 800d0dc:	460b      	mov	r3, r1
 800d0de:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	8919      	ldrh	r1, [r3, #8]
 800d0e4:	88ba      	ldrh	r2, [r7, #4]
 800d0e6:	79fb      	ldrb	r3, [r7, #7]
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	f7ff faa5 	bl	800c638 <pbuf_alloc>
 800d0ee:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d101      	bne.n	800d0fa <pbuf_clone+0x2a>
    return NULL;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	e011      	b.n	800d11e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d0fa:	6839      	ldr	r1, [r7, #0]
 800d0fc:	68f8      	ldr	r0, [r7, #12]
 800d0fe:	f7ff fea3 	bl	800ce48 <pbuf_copy>
 800d102:	4603      	mov	r3, r0
 800d104:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d106:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d006      	beq.n	800d11c <pbuf_clone+0x4c>
 800d10e:	4b06      	ldr	r3, [pc, #24]	@ (800d128 <pbuf_clone+0x58>)
 800d110:	f240 5224 	movw	r2, #1316	@ 0x524
 800d114:	4905      	ldr	r1, [pc, #20]	@ (800d12c <pbuf_clone+0x5c>)
 800d116:	4806      	ldr	r0, [pc, #24]	@ (800d130 <pbuf_clone+0x60>)
 800d118:	f009 faaa 	bl	8016670 <iprintf>
  return q;
 800d11c:	68fb      	ldr	r3, [r7, #12]
}
 800d11e:	4618      	mov	r0, r3
 800d120:	3710      	adds	r7, #16
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}
 800d126:	bf00      	nop
 800d128:	08018698 	.word	0x08018698
 800d12c:	08018b0c 	.word	0x08018b0c
 800d130:	080186f8 	.word	0x080186f8

0800d134 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d138:	f009 f99a 	bl	8016470 <rand>
 800d13c:	4603      	mov	r3, r0
 800d13e:	b29b      	uxth	r3, r3
 800d140:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d144:	b29b      	uxth	r3, r3
 800d146:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800d14a:	b29a      	uxth	r2, r3
 800d14c:	4b01      	ldr	r3, [pc, #4]	@ (800d154 <tcp_init+0x20>)
 800d14e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d150:	bf00      	nop
 800d152:	bd80      	pop	{r7, pc}
 800d154:	24000028 	.word	0x24000028

0800d158 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b082      	sub	sp, #8
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	7d1b      	ldrb	r3, [r3, #20]
 800d164:	2b01      	cmp	r3, #1
 800d166:	d105      	bne.n	800d174 <tcp_free+0x1c>
 800d168:	4b06      	ldr	r3, [pc, #24]	@ (800d184 <tcp_free+0x2c>)
 800d16a:	22d4      	movs	r2, #212	@ 0xd4
 800d16c:	4906      	ldr	r1, [pc, #24]	@ (800d188 <tcp_free+0x30>)
 800d16e:	4807      	ldr	r0, [pc, #28]	@ (800d18c <tcp_free+0x34>)
 800d170:	f009 fa7e 	bl	8016670 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d174:	6879      	ldr	r1, [r7, #4]
 800d176:	2001      	movs	r0, #1
 800d178:	f7fe fe9e 	bl	800beb8 <memp_free>
}
 800d17c:	bf00      	nop
 800d17e:	3708      	adds	r7, #8
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}
 800d184:	08018b98 	.word	0x08018b98
 800d188:	08018bc8 	.word	0x08018bc8
 800d18c:	08018bdc 	.word	0x08018bdc

0800d190 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b082      	sub	sp, #8
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	7d1b      	ldrb	r3, [r3, #20]
 800d19c:	2b01      	cmp	r3, #1
 800d19e:	d105      	bne.n	800d1ac <tcp_free_listen+0x1c>
 800d1a0:	4b06      	ldr	r3, [pc, #24]	@ (800d1bc <tcp_free_listen+0x2c>)
 800d1a2:	22df      	movs	r2, #223	@ 0xdf
 800d1a4:	4906      	ldr	r1, [pc, #24]	@ (800d1c0 <tcp_free_listen+0x30>)
 800d1a6:	4807      	ldr	r0, [pc, #28]	@ (800d1c4 <tcp_free_listen+0x34>)
 800d1a8:	f009 fa62 	bl	8016670 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d1ac:	6879      	ldr	r1, [r7, #4]
 800d1ae:	2002      	movs	r0, #2
 800d1b0:	f7fe fe82 	bl	800beb8 <memp_free>
}
 800d1b4:	bf00      	nop
 800d1b6:	3708      	adds	r7, #8
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd80      	pop	{r7, pc}
 800d1bc:	08018b98 	.word	0x08018b98
 800d1c0:	08018c04 	.word	0x08018c04
 800d1c4:	08018bdc 	.word	0x08018bdc

0800d1c8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d1cc:	f001 f8a8 	bl	800e320 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d1d0:	4b07      	ldr	r3, [pc, #28]	@ (800d1f0 <tcp_tmr+0x28>)
 800d1d2:	781b      	ldrb	r3, [r3, #0]
 800d1d4:	3301      	adds	r3, #1
 800d1d6:	b2da      	uxtb	r2, r3
 800d1d8:	4b05      	ldr	r3, [pc, #20]	@ (800d1f0 <tcp_tmr+0x28>)
 800d1da:	701a      	strb	r2, [r3, #0]
 800d1dc:	4b04      	ldr	r3, [pc, #16]	@ (800d1f0 <tcp_tmr+0x28>)
 800d1de:	781b      	ldrb	r3, [r3, #0]
 800d1e0:	f003 0301 	and.w	r3, r3, #1
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d001      	beq.n	800d1ec <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d1e8:	f000 fd58 	bl	800dc9c <tcp_slowtmr>
  }
}
 800d1ec:	bf00      	nop
 800d1ee:	bd80      	pop	{r7, pc}
 800d1f0:	24007f11 	.word	0x24007f11

0800d1f4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b084      	sub	sp, #16
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
 800d1fc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d105      	bne.n	800d210 <tcp_remove_listener+0x1c>
 800d204:	4b0d      	ldr	r3, [pc, #52]	@ (800d23c <tcp_remove_listener+0x48>)
 800d206:	22ff      	movs	r2, #255	@ 0xff
 800d208:	490d      	ldr	r1, [pc, #52]	@ (800d240 <tcp_remove_listener+0x4c>)
 800d20a:	480e      	ldr	r0, [pc, #56]	@ (800d244 <tcp_remove_listener+0x50>)
 800d20c:	f009 fa30 	bl	8016670 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	60fb      	str	r3, [r7, #12]
 800d214:	e00a      	b.n	800d22c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d21a:	683a      	ldr	r2, [r7, #0]
 800d21c:	429a      	cmp	r2, r3
 800d21e:	d102      	bne.n	800d226 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	2200      	movs	r2, #0
 800d224:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	68db      	ldr	r3, [r3, #12]
 800d22a:	60fb      	str	r3, [r7, #12]
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d1f1      	bne.n	800d216 <tcp_remove_listener+0x22>
    }
  }
}
 800d232:	bf00      	nop
 800d234:	bf00      	nop
 800d236:	3710      	adds	r7, #16
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}
 800d23c:	08018b98 	.word	0x08018b98
 800d240:	08018c20 	.word	0x08018c20
 800d244:	08018bdc 	.word	0x08018bdc

0800d248 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b084      	sub	sp, #16
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d106      	bne.n	800d264 <tcp_listen_closed+0x1c>
 800d256:	4b14      	ldr	r3, [pc, #80]	@ (800d2a8 <tcp_listen_closed+0x60>)
 800d258:	f240 1211 	movw	r2, #273	@ 0x111
 800d25c:	4913      	ldr	r1, [pc, #76]	@ (800d2ac <tcp_listen_closed+0x64>)
 800d25e:	4814      	ldr	r0, [pc, #80]	@ (800d2b0 <tcp_listen_closed+0x68>)
 800d260:	f009 fa06 	bl	8016670 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	7d1b      	ldrb	r3, [r3, #20]
 800d268:	2b01      	cmp	r3, #1
 800d26a:	d006      	beq.n	800d27a <tcp_listen_closed+0x32>
 800d26c:	4b0e      	ldr	r3, [pc, #56]	@ (800d2a8 <tcp_listen_closed+0x60>)
 800d26e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800d272:	4910      	ldr	r1, [pc, #64]	@ (800d2b4 <tcp_listen_closed+0x6c>)
 800d274:	480e      	ldr	r0, [pc, #56]	@ (800d2b0 <tcp_listen_closed+0x68>)
 800d276:	f009 f9fb 	bl	8016670 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d27a:	2301      	movs	r3, #1
 800d27c:	60fb      	str	r3, [r7, #12]
 800d27e:	e00b      	b.n	800d298 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d280:	4a0d      	ldr	r2, [pc, #52]	@ (800d2b8 <tcp_listen_closed+0x70>)
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	6879      	ldr	r1, [r7, #4]
 800d28c:	4618      	mov	r0, r3
 800d28e:	f7ff ffb1 	bl	800d1f4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	3301      	adds	r3, #1
 800d296:	60fb      	str	r3, [r7, #12]
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	2b03      	cmp	r3, #3
 800d29c:	d9f0      	bls.n	800d280 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d29e:	bf00      	nop
 800d2a0:	bf00      	nop
 800d2a2:	3710      	adds	r7, #16
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}
 800d2a8:	08018b98 	.word	0x08018b98
 800d2ac:	08018c48 	.word	0x08018c48
 800d2b0:	08018bdc 	.word	0x08018bdc
 800d2b4:	08018c54 	.word	0x08018c54
 800d2b8:	0801abd8 	.word	0x0801abd8

0800d2bc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d2bc:	b5b0      	push	{r4, r5, r7, lr}
 800d2be:	b088      	sub	sp, #32
 800d2c0:	af04      	add	r7, sp, #16
 800d2c2:	6078      	str	r0, [r7, #4]
 800d2c4:	460b      	mov	r3, r1
 800d2c6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d106      	bne.n	800d2dc <tcp_close_shutdown+0x20>
 800d2ce:	4b63      	ldr	r3, [pc, #396]	@ (800d45c <tcp_close_shutdown+0x1a0>)
 800d2d0:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800d2d4:	4962      	ldr	r1, [pc, #392]	@ (800d460 <tcp_close_shutdown+0x1a4>)
 800d2d6:	4863      	ldr	r0, [pc, #396]	@ (800d464 <tcp_close_shutdown+0x1a8>)
 800d2d8:	f009 f9ca 	bl	8016670 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d2dc:	78fb      	ldrb	r3, [r7, #3]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d066      	beq.n	800d3b0 <tcp_close_shutdown+0xf4>
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	7d1b      	ldrb	r3, [r3, #20]
 800d2e6:	2b04      	cmp	r3, #4
 800d2e8:	d003      	beq.n	800d2f2 <tcp_close_shutdown+0x36>
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	7d1b      	ldrb	r3, [r3, #20]
 800d2ee:	2b07      	cmp	r3, #7
 800d2f0:	d15e      	bne.n	800d3b0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d104      	bne.n	800d304 <tcp_close_shutdown+0x48>
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d2fe:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800d302:	d055      	beq.n	800d3b0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	8b5b      	ldrh	r3, [r3, #26]
 800d308:	f003 0310 	and.w	r3, r3, #16
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d106      	bne.n	800d31e <tcp_close_shutdown+0x62>
 800d310:	4b52      	ldr	r3, [pc, #328]	@ (800d45c <tcp_close_shutdown+0x1a0>)
 800d312:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800d316:	4954      	ldr	r1, [pc, #336]	@ (800d468 <tcp_close_shutdown+0x1ac>)
 800d318:	4852      	ldr	r0, [pc, #328]	@ (800d464 <tcp_close_shutdown+0x1a8>)
 800d31a:	f009 f9a9 	bl	8016670 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800d326:	687d      	ldr	r5, [r7, #4]
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	3304      	adds	r3, #4
 800d32c:	687a      	ldr	r2, [r7, #4]
 800d32e:	8ad2      	ldrh	r2, [r2, #22]
 800d330:	6879      	ldr	r1, [r7, #4]
 800d332:	8b09      	ldrh	r1, [r1, #24]
 800d334:	9102      	str	r1, [sp, #8]
 800d336:	9201      	str	r2, [sp, #4]
 800d338:	9300      	str	r3, [sp, #0]
 800d33a:	462b      	mov	r3, r5
 800d33c:	4622      	mov	r2, r4
 800d33e:	4601      	mov	r1, r0
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f005 fdb7 	bl	8012eb4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	f001 fb9a 	bl	800ea80 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d34c:	4b47      	ldr	r3, [pc, #284]	@ (800d46c <tcp_close_shutdown+0x1b0>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	687a      	ldr	r2, [r7, #4]
 800d352:	429a      	cmp	r2, r3
 800d354:	d105      	bne.n	800d362 <tcp_close_shutdown+0xa6>
 800d356:	4b45      	ldr	r3, [pc, #276]	@ (800d46c <tcp_close_shutdown+0x1b0>)
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	68db      	ldr	r3, [r3, #12]
 800d35c:	4a43      	ldr	r2, [pc, #268]	@ (800d46c <tcp_close_shutdown+0x1b0>)
 800d35e:	6013      	str	r3, [r2, #0]
 800d360:	e013      	b.n	800d38a <tcp_close_shutdown+0xce>
 800d362:	4b42      	ldr	r3, [pc, #264]	@ (800d46c <tcp_close_shutdown+0x1b0>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	60fb      	str	r3, [r7, #12]
 800d368:	e00c      	b.n	800d384 <tcp_close_shutdown+0xc8>
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	68db      	ldr	r3, [r3, #12]
 800d36e:	687a      	ldr	r2, [r7, #4]
 800d370:	429a      	cmp	r2, r3
 800d372:	d104      	bne.n	800d37e <tcp_close_shutdown+0xc2>
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	68da      	ldr	r2, [r3, #12]
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	60da      	str	r2, [r3, #12]
 800d37c:	e005      	b.n	800d38a <tcp_close_shutdown+0xce>
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	68db      	ldr	r3, [r3, #12]
 800d382:	60fb      	str	r3, [r7, #12]
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d1ef      	bne.n	800d36a <tcp_close_shutdown+0xae>
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2200      	movs	r2, #0
 800d38e:	60da      	str	r2, [r3, #12]
 800d390:	4b37      	ldr	r3, [pc, #220]	@ (800d470 <tcp_close_shutdown+0x1b4>)
 800d392:	2201      	movs	r2, #1
 800d394:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d396:	4b37      	ldr	r3, [pc, #220]	@ (800d474 <tcp_close_shutdown+0x1b8>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	687a      	ldr	r2, [r7, #4]
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d102      	bne.n	800d3a6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d3a0:	f004 f82e 	bl	8011400 <tcp_trigger_input_pcb_close>
 800d3a4:	e002      	b.n	800d3ac <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f7ff fed6 	bl	800d158 <tcp_free>
      }
      return ERR_OK;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	e050      	b.n	800d452 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	7d1b      	ldrb	r3, [r3, #20]
 800d3b4:	2b02      	cmp	r3, #2
 800d3b6:	d03b      	beq.n	800d430 <tcp_close_shutdown+0x174>
 800d3b8:	2b02      	cmp	r3, #2
 800d3ba:	dc44      	bgt.n	800d446 <tcp_close_shutdown+0x18a>
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d002      	beq.n	800d3c6 <tcp_close_shutdown+0x10a>
 800d3c0:	2b01      	cmp	r3, #1
 800d3c2:	d02a      	beq.n	800d41a <tcp_close_shutdown+0x15e>
 800d3c4:	e03f      	b.n	800d446 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	8adb      	ldrh	r3, [r3, #22]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d021      	beq.n	800d412 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d3ce:	4b2a      	ldr	r3, [pc, #168]	@ (800d478 <tcp_close_shutdown+0x1bc>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	687a      	ldr	r2, [r7, #4]
 800d3d4:	429a      	cmp	r2, r3
 800d3d6:	d105      	bne.n	800d3e4 <tcp_close_shutdown+0x128>
 800d3d8:	4b27      	ldr	r3, [pc, #156]	@ (800d478 <tcp_close_shutdown+0x1bc>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	68db      	ldr	r3, [r3, #12]
 800d3de:	4a26      	ldr	r2, [pc, #152]	@ (800d478 <tcp_close_shutdown+0x1bc>)
 800d3e0:	6013      	str	r3, [r2, #0]
 800d3e2:	e013      	b.n	800d40c <tcp_close_shutdown+0x150>
 800d3e4:	4b24      	ldr	r3, [pc, #144]	@ (800d478 <tcp_close_shutdown+0x1bc>)
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	60bb      	str	r3, [r7, #8]
 800d3ea:	e00c      	b.n	800d406 <tcp_close_shutdown+0x14a>
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	68db      	ldr	r3, [r3, #12]
 800d3f0:	687a      	ldr	r2, [r7, #4]
 800d3f2:	429a      	cmp	r2, r3
 800d3f4:	d104      	bne.n	800d400 <tcp_close_shutdown+0x144>
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	68da      	ldr	r2, [r3, #12]
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	60da      	str	r2, [r3, #12]
 800d3fe:	e005      	b.n	800d40c <tcp_close_shutdown+0x150>
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	68db      	ldr	r3, [r3, #12]
 800d404:	60bb      	str	r3, [r7, #8]
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d1ef      	bne.n	800d3ec <tcp_close_shutdown+0x130>
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2200      	movs	r2, #0
 800d410:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d412:	6878      	ldr	r0, [r7, #4]
 800d414:	f7ff fea0 	bl	800d158 <tcp_free>
      break;
 800d418:	e01a      	b.n	800d450 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d41a:	6878      	ldr	r0, [r7, #4]
 800d41c:	f7ff ff14 	bl	800d248 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d420:	6879      	ldr	r1, [r7, #4]
 800d422:	4816      	ldr	r0, [pc, #88]	@ (800d47c <tcp_close_shutdown+0x1c0>)
 800d424:	f001 fb7c 	bl	800eb20 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f7ff feb1 	bl	800d190 <tcp_free_listen>
      break;
 800d42e:	e00f      	b.n	800d450 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d430:	6879      	ldr	r1, [r7, #4]
 800d432:	480e      	ldr	r0, [pc, #56]	@ (800d46c <tcp_close_shutdown+0x1b0>)
 800d434:	f001 fb74 	bl	800eb20 <tcp_pcb_remove>
 800d438:	4b0d      	ldr	r3, [pc, #52]	@ (800d470 <tcp_close_shutdown+0x1b4>)
 800d43a:	2201      	movs	r2, #1
 800d43c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f7ff fe8a 	bl	800d158 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d444:	e004      	b.n	800d450 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f000 f81a 	bl	800d480 <tcp_close_shutdown_fin>
 800d44c:	4603      	mov	r3, r0
 800d44e:	e000      	b.n	800d452 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800d450:	2300      	movs	r3, #0
}
 800d452:	4618      	mov	r0, r3
 800d454:	3710      	adds	r7, #16
 800d456:	46bd      	mov	sp, r7
 800d458:	bdb0      	pop	{r4, r5, r7, pc}
 800d45a:	bf00      	nop
 800d45c:	08018b98 	.word	0x08018b98
 800d460:	08018c6c 	.word	0x08018c6c
 800d464:	08018bdc 	.word	0x08018bdc
 800d468:	08018c8c 	.word	0x08018c8c
 800d46c:	24007f08 	.word	0x24007f08
 800d470:	24007f10 	.word	0x24007f10
 800d474:	24007f48 	.word	0x24007f48
 800d478:	24007f00 	.word	0x24007f00
 800d47c:	24007f04 	.word	0x24007f04

0800d480 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b084      	sub	sp, #16
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d106      	bne.n	800d49c <tcp_close_shutdown_fin+0x1c>
 800d48e:	4b2e      	ldr	r3, [pc, #184]	@ (800d548 <tcp_close_shutdown_fin+0xc8>)
 800d490:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800d494:	492d      	ldr	r1, [pc, #180]	@ (800d54c <tcp_close_shutdown_fin+0xcc>)
 800d496:	482e      	ldr	r0, [pc, #184]	@ (800d550 <tcp_close_shutdown_fin+0xd0>)
 800d498:	f009 f8ea 	bl	8016670 <iprintf>

  switch (pcb->state) {
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	7d1b      	ldrb	r3, [r3, #20]
 800d4a0:	2b07      	cmp	r3, #7
 800d4a2:	d020      	beq.n	800d4e6 <tcp_close_shutdown_fin+0x66>
 800d4a4:	2b07      	cmp	r3, #7
 800d4a6:	dc2b      	bgt.n	800d500 <tcp_close_shutdown_fin+0x80>
 800d4a8:	2b03      	cmp	r3, #3
 800d4aa:	d002      	beq.n	800d4b2 <tcp_close_shutdown_fin+0x32>
 800d4ac:	2b04      	cmp	r3, #4
 800d4ae:	d00d      	beq.n	800d4cc <tcp_close_shutdown_fin+0x4c>
 800d4b0:	e026      	b.n	800d500 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f004 fe0c 	bl	80120d0 <tcp_send_fin>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d4bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d11f      	bne.n	800d504 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2205      	movs	r2, #5
 800d4c8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d4ca:	e01b      	b.n	800d504 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d4cc:	6878      	ldr	r0, [r7, #4]
 800d4ce:	f004 fdff 	bl	80120d0 <tcp_send_fin>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d4d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d114      	bne.n	800d508 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	2205      	movs	r2, #5
 800d4e2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d4e4:	e010      	b.n	800d508 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f004 fdf2 	bl	80120d0 <tcp_send_fin>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d4f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d109      	bne.n	800d50c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2209      	movs	r2, #9
 800d4fc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d4fe:	e005      	b.n	800d50c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d500:	2300      	movs	r3, #0
 800d502:	e01c      	b.n	800d53e <tcp_close_shutdown_fin+0xbe>
      break;
 800d504:	bf00      	nop
 800d506:	e002      	b.n	800d50e <tcp_close_shutdown_fin+0x8e>
      break;
 800d508:	bf00      	nop
 800d50a:	e000      	b.n	800d50e <tcp_close_shutdown_fin+0x8e>
      break;
 800d50c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d50e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d103      	bne.n	800d51e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f004 ff18 	bl	801234c <tcp_output>
 800d51c:	e00d      	b.n	800d53a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d51e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d522:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d526:	d108      	bne.n	800d53a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	8b5b      	ldrh	r3, [r3, #26]
 800d52c:	f043 0308 	orr.w	r3, r3, #8
 800d530:	b29a      	uxth	r2, r3
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d536:	2300      	movs	r3, #0
 800d538:	e001      	b.n	800d53e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d53a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d53e:	4618      	mov	r0, r3
 800d540:	3710      	adds	r7, #16
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}
 800d546:	bf00      	nop
 800d548:	08018b98 	.word	0x08018b98
 800d54c:	08018c48 	.word	0x08018c48
 800d550:	08018bdc 	.word	0x08018bdc

0800d554 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b082      	sub	sp, #8
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d109      	bne.n	800d576 <tcp_close+0x22>
 800d562:	4b0f      	ldr	r3, [pc, #60]	@ (800d5a0 <tcp_close+0x4c>)
 800d564:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800d568:	490e      	ldr	r1, [pc, #56]	@ (800d5a4 <tcp_close+0x50>)
 800d56a:	480f      	ldr	r0, [pc, #60]	@ (800d5a8 <tcp_close+0x54>)
 800d56c:	f009 f880 	bl	8016670 <iprintf>
 800d570:	f06f 030f 	mvn.w	r3, #15
 800d574:	e00f      	b.n	800d596 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	7d1b      	ldrb	r3, [r3, #20]
 800d57a:	2b01      	cmp	r3, #1
 800d57c:	d006      	beq.n	800d58c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	8b5b      	ldrh	r3, [r3, #26]
 800d582:	f043 0310 	orr.w	r3, r3, #16
 800d586:	b29a      	uxth	r2, r3
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d58c:	2101      	movs	r1, #1
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f7ff fe94 	bl	800d2bc <tcp_close_shutdown>
 800d594:	4603      	mov	r3, r0
}
 800d596:	4618      	mov	r0, r3
 800d598:	3708      	adds	r7, #8
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd80      	pop	{r7, pc}
 800d59e:	bf00      	nop
 800d5a0:	08018b98 	.word	0x08018b98
 800d5a4:	08018ca8 	.word	0x08018ca8
 800d5a8:	08018bdc 	.word	0x08018bdc

0800d5ac <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b084      	sub	sp, #16
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	60f8      	str	r0, [r7, #12]
 800d5b4:	60b9      	str	r1, [r7, #8]
 800d5b6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d109      	bne.n	800d5d2 <tcp_shutdown+0x26>
 800d5be:	4b26      	ldr	r3, [pc, #152]	@ (800d658 <tcp_shutdown+0xac>)
 800d5c0:	f240 2207 	movw	r2, #519	@ 0x207
 800d5c4:	4925      	ldr	r1, [pc, #148]	@ (800d65c <tcp_shutdown+0xb0>)
 800d5c6:	4826      	ldr	r0, [pc, #152]	@ (800d660 <tcp_shutdown+0xb4>)
 800d5c8:	f009 f852 	bl	8016670 <iprintf>
 800d5cc:	f06f 030f 	mvn.w	r3, #15
 800d5d0:	e03d      	b.n	800d64e <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	7d1b      	ldrb	r3, [r3, #20]
 800d5d6:	2b01      	cmp	r3, #1
 800d5d8:	d102      	bne.n	800d5e0 <tcp_shutdown+0x34>
    return ERR_CONN;
 800d5da:	f06f 030a 	mvn.w	r3, #10
 800d5de:	e036      	b.n	800d64e <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d01b      	beq.n	800d61e <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	8b5b      	ldrh	r3, [r3, #26]
 800d5ea:	f043 0310 	orr.w	r3, r3, #16
 800d5ee:	b29a      	uxth	r2, r3
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d005      	beq.n	800d606 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800d5fa:	2101      	movs	r1, #1
 800d5fc:	68f8      	ldr	r0, [r7, #12]
 800d5fe:	f7ff fe5d 	bl	800d2bc <tcp_close_shutdown>
 800d602:	4603      	mov	r3, r0
 800d604:	e023      	b.n	800d64e <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d007      	beq.n	800d61e <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d612:	4618      	mov	r0, r3
 800d614:	f7ff faf4 	bl	800cc00 <pbuf_free>
      pcb->refused_data = NULL;
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	2200      	movs	r2, #0
 800d61c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d013      	beq.n	800d64c <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	7d1b      	ldrb	r3, [r3, #20]
 800d628:	2b04      	cmp	r3, #4
 800d62a:	dc02      	bgt.n	800d632 <tcp_shutdown+0x86>
 800d62c:	2b03      	cmp	r3, #3
 800d62e:	da02      	bge.n	800d636 <tcp_shutdown+0x8a>
 800d630:	e009      	b.n	800d646 <tcp_shutdown+0x9a>
 800d632:	2b07      	cmp	r3, #7
 800d634:	d107      	bne.n	800d646 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	b2db      	uxtb	r3, r3
 800d63a:	4619      	mov	r1, r3
 800d63c:	68f8      	ldr	r0, [r7, #12]
 800d63e:	f7ff fe3d 	bl	800d2bc <tcp_close_shutdown>
 800d642:	4603      	mov	r3, r0
 800d644:	e003      	b.n	800d64e <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800d646:	f06f 030a 	mvn.w	r3, #10
 800d64a:	e000      	b.n	800d64e <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800d64c:	2300      	movs	r3, #0
}
 800d64e:	4618      	mov	r0, r3
 800d650:	3710      	adds	r7, #16
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}
 800d656:	bf00      	nop
 800d658:	08018b98 	.word	0x08018b98
 800d65c:	08018cc0 	.word	0x08018cc0
 800d660:	08018bdc 	.word	0x08018bdc

0800d664 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b08e      	sub	sp, #56	@ 0x38
 800d668:	af04      	add	r7, sp, #16
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d107      	bne.n	800d684 <tcp_abandon+0x20>
 800d674:	4b52      	ldr	r3, [pc, #328]	@ (800d7c0 <tcp_abandon+0x15c>)
 800d676:	f240 223d 	movw	r2, #573	@ 0x23d
 800d67a:	4952      	ldr	r1, [pc, #328]	@ (800d7c4 <tcp_abandon+0x160>)
 800d67c:	4852      	ldr	r0, [pc, #328]	@ (800d7c8 <tcp_abandon+0x164>)
 800d67e:	f008 fff7 	bl	8016670 <iprintf>
 800d682:	e099      	b.n	800d7b8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	7d1b      	ldrb	r3, [r3, #20]
 800d688:	2b01      	cmp	r3, #1
 800d68a:	d106      	bne.n	800d69a <tcp_abandon+0x36>
 800d68c:	4b4c      	ldr	r3, [pc, #304]	@ (800d7c0 <tcp_abandon+0x15c>)
 800d68e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800d692:	494e      	ldr	r1, [pc, #312]	@ (800d7cc <tcp_abandon+0x168>)
 800d694:	484c      	ldr	r0, [pc, #304]	@ (800d7c8 <tcp_abandon+0x164>)
 800d696:	f008 ffeb 	bl	8016670 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	7d1b      	ldrb	r3, [r3, #20]
 800d69e:	2b0a      	cmp	r3, #10
 800d6a0:	d107      	bne.n	800d6b2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d6a2:	6879      	ldr	r1, [r7, #4]
 800d6a4:	484a      	ldr	r0, [pc, #296]	@ (800d7d0 <tcp_abandon+0x16c>)
 800d6a6:	f001 fa3b 	bl	800eb20 <tcp_pcb_remove>
    tcp_free(pcb);
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f7ff fd54 	bl	800d158 <tcp_free>
 800d6b0:	e082      	b.n	800d7b8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d6be:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6c4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d6cc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	691b      	ldr	r3, [r3, #16]
 800d6d2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	7d1b      	ldrb	r3, [r3, #20]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d126      	bne.n	800d72a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	8adb      	ldrh	r3, [r3, #22]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d02e      	beq.n	800d742 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d6e4:	4b3b      	ldr	r3, [pc, #236]	@ (800d7d4 <tcp_abandon+0x170>)
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	687a      	ldr	r2, [r7, #4]
 800d6ea:	429a      	cmp	r2, r3
 800d6ec:	d105      	bne.n	800d6fa <tcp_abandon+0x96>
 800d6ee:	4b39      	ldr	r3, [pc, #228]	@ (800d7d4 <tcp_abandon+0x170>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	68db      	ldr	r3, [r3, #12]
 800d6f4:	4a37      	ldr	r2, [pc, #220]	@ (800d7d4 <tcp_abandon+0x170>)
 800d6f6:	6013      	str	r3, [r2, #0]
 800d6f8:	e013      	b.n	800d722 <tcp_abandon+0xbe>
 800d6fa:	4b36      	ldr	r3, [pc, #216]	@ (800d7d4 <tcp_abandon+0x170>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	61fb      	str	r3, [r7, #28]
 800d700:	e00c      	b.n	800d71c <tcp_abandon+0xb8>
 800d702:	69fb      	ldr	r3, [r7, #28]
 800d704:	68db      	ldr	r3, [r3, #12]
 800d706:	687a      	ldr	r2, [r7, #4]
 800d708:	429a      	cmp	r2, r3
 800d70a:	d104      	bne.n	800d716 <tcp_abandon+0xb2>
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	68da      	ldr	r2, [r3, #12]
 800d710:	69fb      	ldr	r3, [r7, #28]
 800d712:	60da      	str	r2, [r3, #12]
 800d714:	e005      	b.n	800d722 <tcp_abandon+0xbe>
 800d716:	69fb      	ldr	r3, [r7, #28]
 800d718:	68db      	ldr	r3, [r3, #12]
 800d71a:	61fb      	str	r3, [r7, #28]
 800d71c:	69fb      	ldr	r3, [r7, #28]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d1ef      	bne.n	800d702 <tcp_abandon+0x9e>
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2200      	movs	r2, #0
 800d726:	60da      	str	r2, [r3, #12]
 800d728:	e00b      	b.n	800d742 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	8adb      	ldrh	r3, [r3, #22]
 800d732:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d734:	6879      	ldr	r1, [r7, #4]
 800d736:	4828      	ldr	r0, [pc, #160]	@ (800d7d8 <tcp_abandon+0x174>)
 800d738:	f001 f9f2 	bl	800eb20 <tcp_pcb_remove>
 800d73c:	4b27      	ldr	r3, [pc, #156]	@ (800d7dc <tcp_abandon+0x178>)
 800d73e:	2201      	movs	r2, #1
 800d740:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d746:	2b00      	cmp	r3, #0
 800d748:	d004      	beq.n	800d754 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d74e:	4618      	mov	r0, r3
 800d750:	f000 fec6 	bl	800e4e0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d004      	beq.n	800d766 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d760:	4618      	mov	r0, r3
 800d762:	f000 febd 	bl	800e4e0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d004      	beq.n	800d778 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d772:	4618      	mov	r0, r3
 800d774:	f000 feb4 	bl	800e4e0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d00e      	beq.n	800d79c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d77e:	6879      	ldr	r1, [r7, #4]
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	3304      	adds	r3, #4
 800d784:	687a      	ldr	r2, [r7, #4]
 800d786:	8b12      	ldrh	r2, [r2, #24]
 800d788:	9202      	str	r2, [sp, #8]
 800d78a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800d78c:	9201      	str	r2, [sp, #4]
 800d78e:	9300      	str	r3, [sp, #0]
 800d790:	460b      	mov	r3, r1
 800d792:	697a      	ldr	r2, [r7, #20]
 800d794:	69b9      	ldr	r1, [r7, #24]
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	f005 fb8c 	bl	8012eb4 <tcp_rst>
    }
    last_state = pcb->state;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	7d1b      	ldrb	r3, [r3, #20]
 800d7a0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f7ff fcd8 	bl	800d158 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d004      	beq.n	800d7b8 <tcp_abandon+0x154>
 800d7ae:	693b      	ldr	r3, [r7, #16]
 800d7b0:	f06f 010c 	mvn.w	r1, #12
 800d7b4:	68f8      	ldr	r0, [r7, #12]
 800d7b6:	4798      	blx	r3
  }
}
 800d7b8:	3728      	adds	r7, #40	@ 0x28
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd80      	pop	{r7, pc}
 800d7be:	bf00      	nop
 800d7c0:	08018b98 	.word	0x08018b98
 800d7c4:	08018cdc 	.word	0x08018cdc
 800d7c8:	08018bdc 	.word	0x08018bdc
 800d7cc:	08018cf8 	.word	0x08018cf8
 800d7d0:	24007f0c 	.word	0x24007f0c
 800d7d4:	24007f00 	.word	0x24007f00
 800d7d8:	24007f08 	.word	0x24007f08
 800d7dc:	24007f10 	.word	0x24007f10

0800d7e0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b082      	sub	sp, #8
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d7e8:	2101      	movs	r1, #1
 800d7ea:	6878      	ldr	r0, [r7, #4]
 800d7ec:	f7ff ff3a 	bl	800d664 <tcp_abandon>
}
 800d7f0:	bf00      	nop
 800d7f2:	3708      	adds	r7, #8
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}

0800d7f8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b088      	sub	sp, #32
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	60f8      	str	r0, [r7, #12]
 800d800:	60b9      	str	r1, [r7, #8]
 800d802:	4613      	mov	r3, r2
 800d804:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800d806:	2304      	movs	r3, #4
 800d808:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d101      	bne.n	800d814 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800d810:	4b3e      	ldr	r3, [pc, #248]	@ (800d90c <tcp_bind+0x114>)
 800d812:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d109      	bne.n	800d82e <tcp_bind+0x36>
 800d81a:	4b3d      	ldr	r3, [pc, #244]	@ (800d910 <tcp_bind+0x118>)
 800d81c:	f240 22a9 	movw	r2, #681	@ 0x2a9
 800d820:	493c      	ldr	r1, [pc, #240]	@ (800d914 <tcp_bind+0x11c>)
 800d822:	483d      	ldr	r0, [pc, #244]	@ (800d918 <tcp_bind+0x120>)
 800d824:	f008 ff24 	bl	8016670 <iprintf>
 800d828:	f06f 030f 	mvn.w	r3, #15
 800d82c:	e06a      	b.n	800d904 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	7d1b      	ldrb	r3, [r3, #20]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d009      	beq.n	800d84a <tcp_bind+0x52>
 800d836:	4b36      	ldr	r3, [pc, #216]	@ (800d910 <tcp_bind+0x118>)
 800d838:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800d83c:	4937      	ldr	r1, [pc, #220]	@ (800d91c <tcp_bind+0x124>)
 800d83e:	4836      	ldr	r0, [pc, #216]	@ (800d918 <tcp_bind+0x120>)
 800d840:	f008 ff16 	bl	8016670 <iprintf>
 800d844:	f06f 0305 	mvn.w	r3, #5
 800d848:	e05c      	b.n	800d904 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800d84a:	88fb      	ldrh	r3, [r7, #6]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d109      	bne.n	800d864 <tcp_bind+0x6c>
    port = tcp_new_port();
 800d850:	f000 f9de 	bl	800dc10 <tcp_new_port>
 800d854:	4603      	mov	r3, r0
 800d856:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d858:	88fb      	ldrh	r3, [r7, #6]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d135      	bne.n	800d8ca <tcp_bind+0xd2>
      return ERR_BUF;
 800d85e:	f06f 0301 	mvn.w	r3, #1
 800d862:	e04f      	b.n	800d904 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800d864:	2300      	movs	r3, #0
 800d866:	61fb      	str	r3, [r7, #28]
 800d868:	e02b      	b.n	800d8c2 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d86a:	4a2d      	ldr	r2, [pc, #180]	@ (800d920 <tcp_bind+0x128>)
 800d86c:	69fb      	ldr	r3, [r7, #28]
 800d86e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	61bb      	str	r3, [r7, #24]
 800d876:	e01e      	b.n	800d8b6 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800d878:	69bb      	ldr	r3, [r7, #24]
 800d87a:	8adb      	ldrh	r3, [r3, #22]
 800d87c:	88fa      	ldrh	r2, [r7, #6]
 800d87e:	429a      	cmp	r2, r3
 800d880:	d116      	bne.n	800d8b0 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800d882:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d884:	2b00      	cmp	r3, #0
 800d886:	d010      	beq.n	800d8aa <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800d888:	69bb      	ldr	r3, [r7, #24]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d00c      	beq.n	800d8aa <tcp_bind+0xb2>
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d009      	beq.n	800d8aa <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d005      	beq.n	800d8aa <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800d89e:	69bb      	ldr	r3, [r7, #24]
 800d8a0:	681a      	ldr	r2, [r3, #0]
 800d8a2:	68bb      	ldr	r3, [r7, #8]
 800d8a4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d8a6:	429a      	cmp	r2, r3
 800d8a8:	d102      	bne.n	800d8b0 <tcp_bind+0xb8>
              return ERR_USE;
 800d8aa:	f06f 0307 	mvn.w	r3, #7
 800d8ae:	e029      	b.n	800d904 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d8b0:	69bb      	ldr	r3, [r7, #24]
 800d8b2:	68db      	ldr	r3, [r3, #12]
 800d8b4:	61bb      	str	r3, [r7, #24]
 800d8b6:	69bb      	ldr	r3, [r7, #24]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d1dd      	bne.n	800d878 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800d8bc:	69fb      	ldr	r3, [r7, #28]
 800d8be:	3301      	adds	r3, #1
 800d8c0:	61fb      	str	r3, [r7, #28]
 800d8c2:	69fa      	ldr	r2, [r7, #28]
 800d8c4:	697b      	ldr	r3, [r7, #20]
 800d8c6:	429a      	cmp	r2, r3
 800d8c8:	dbcf      	blt.n	800d86a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800d8ca:	68bb      	ldr	r3, [r7, #8]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d00c      	beq.n	800d8ea <tcp_bind+0xf2>
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d008      	beq.n	800d8ea <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800d8d8:	68bb      	ldr	r3, [r7, #8]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d002      	beq.n	800d8e4 <tcp_bind+0xec>
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	e000      	b.n	800d8e6 <tcp_bind+0xee>
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	68fa      	ldr	r2, [r7, #12]
 800d8e8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	88fa      	ldrh	r2, [r7, #6]
 800d8ee:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800d8f0:	4b0c      	ldr	r3, [pc, #48]	@ (800d924 <tcp_bind+0x12c>)
 800d8f2:	681a      	ldr	r2, [r3, #0]
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	60da      	str	r2, [r3, #12]
 800d8f8:	4a0a      	ldr	r2, [pc, #40]	@ (800d924 <tcp_bind+0x12c>)
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	6013      	str	r3, [r2, #0]
 800d8fe:	f005 fc9b 	bl	8013238 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800d902:	2300      	movs	r3, #0
}
 800d904:	4618      	mov	r0, r3
 800d906:	3720      	adds	r7, #32
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}
 800d90c:	0801ac00 	.word	0x0801ac00
 800d910:	08018b98 	.word	0x08018b98
 800d914:	08018d2c 	.word	0x08018d2c
 800d918:	08018bdc 	.word	0x08018bdc
 800d91c:	08018d44 	.word	0x08018d44
 800d920:	0801abd8 	.word	0x0801abd8
 800d924:	24007f00 	.word	0x24007f00

0800d928 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b084      	sub	sp, #16
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	60f8      	str	r0, [r7, #12]
 800d930:	60b9      	str	r1, [r7, #8]
 800d932:	4613      	mov	r3, r2
 800d934:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d106      	bne.n	800d94a <tcp_accept_null+0x22>
 800d93c:	4b07      	ldr	r3, [pc, #28]	@ (800d95c <tcp_accept_null+0x34>)
 800d93e:	f240 320f 	movw	r2, #783	@ 0x30f
 800d942:	4907      	ldr	r1, [pc, #28]	@ (800d960 <tcp_accept_null+0x38>)
 800d944:	4807      	ldr	r0, [pc, #28]	@ (800d964 <tcp_accept_null+0x3c>)
 800d946:	f008 fe93 	bl	8016670 <iprintf>

  tcp_abort(pcb);
 800d94a:	68b8      	ldr	r0, [r7, #8]
 800d94c:	f7ff ff48 	bl	800d7e0 <tcp_abort>

  return ERR_ABRT;
 800d950:	f06f 030c 	mvn.w	r3, #12
}
 800d954:	4618      	mov	r0, r3
 800d956:	3710      	adds	r7, #16
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}
 800d95c:	08018b98 	.word	0x08018b98
 800d960:	08018d6c 	.word	0x08018d6c
 800d964:	08018bdc 	.word	0x08018bdc

0800d968 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b088      	sub	sp, #32
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	60f8      	str	r0, [r7, #12]
 800d970:	460b      	mov	r3, r1
 800d972:	607a      	str	r2, [r7, #4]
 800d974:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800d976:	2300      	movs	r3, #0
 800d978:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d109      	bne.n	800d994 <tcp_listen_with_backlog_and_err+0x2c>
 800d980:	4b47      	ldr	r3, [pc, #284]	@ (800daa0 <tcp_listen_with_backlog_and_err+0x138>)
 800d982:	f240 3259 	movw	r2, #857	@ 0x359
 800d986:	4947      	ldr	r1, [pc, #284]	@ (800daa4 <tcp_listen_with_backlog_and_err+0x13c>)
 800d988:	4847      	ldr	r0, [pc, #284]	@ (800daa8 <tcp_listen_with_backlog_and_err+0x140>)
 800d98a:	f008 fe71 	bl	8016670 <iprintf>
 800d98e:	23f0      	movs	r3, #240	@ 0xf0
 800d990:	76fb      	strb	r3, [r7, #27]
 800d992:	e079      	b.n	800da88 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	7d1b      	ldrb	r3, [r3, #20]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d009      	beq.n	800d9b0 <tcp_listen_with_backlog_and_err+0x48>
 800d99c:	4b40      	ldr	r3, [pc, #256]	@ (800daa0 <tcp_listen_with_backlog_and_err+0x138>)
 800d99e:	f240 325a 	movw	r2, #858	@ 0x35a
 800d9a2:	4942      	ldr	r1, [pc, #264]	@ (800daac <tcp_listen_with_backlog_and_err+0x144>)
 800d9a4:	4840      	ldr	r0, [pc, #256]	@ (800daa8 <tcp_listen_with_backlog_and_err+0x140>)
 800d9a6:	f008 fe63 	bl	8016670 <iprintf>
 800d9aa:	23f1      	movs	r3, #241	@ 0xf1
 800d9ac:	76fb      	strb	r3, [r7, #27]
 800d9ae:	e06b      	b.n	800da88 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	7d1b      	ldrb	r3, [r3, #20]
 800d9b4:	2b01      	cmp	r3, #1
 800d9b6:	d104      	bne.n	800d9c2 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800d9bc:	23f7      	movs	r3, #247	@ 0xf7
 800d9be:	76fb      	strb	r3, [r7, #27]
    goto done;
 800d9c0:	e062      	b.n	800da88 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800d9c2:	2002      	movs	r0, #2
 800d9c4:	f7fe fa02 	bl	800bdcc <memp_malloc>
 800d9c8:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800d9ca:	69fb      	ldr	r3, [r7, #28]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d102      	bne.n	800d9d6 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800d9d0:	23ff      	movs	r3, #255	@ 0xff
 800d9d2:	76fb      	strb	r3, [r7, #27]
    goto done;
 800d9d4:	e058      	b.n	800da88 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	691a      	ldr	r2, [r3, #16]
 800d9da:	69fb      	ldr	r3, [r7, #28]
 800d9dc:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	8ada      	ldrh	r2, [r3, #22]
 800d9e2:	69fb      	ldr	r3, [r7, #28]
 800d9e4:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800d9e6:	69fb      	ldr	r3, [r7, #28]
 800d9e8:	2201      	movs	r2, #1
 800d9ea:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	7d5a      	ldrb	r2, [r3, #21]
 800d9f0:	69fb      	ldr	r3, [r7, #28]
 800d9f2:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	7a5a      	ldrb	r2, [r3, #9]
 800d9f8:	69fb      	ldr	r3, [r7, #28]
 800d9fa:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800d9fc:	69fb      	ldr	r3, [r7, #28]
 800d9fe:	2200      	movs	r2, #0
 800da00:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	7ada      	ldrb	r2, [r3, #11]
 800da06:	69fb      	ldr	r3, [r7, #28]
 800da08:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	7a9a      	ldrb	r2, [r3, #10]
 800da0e:	69fb      	ldr	r3, [r7, #28]
 800da10:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	681a      	ldr	r2, [r3, #0]
 800da16:	69fb      	ldr	r3, [r7, #28]
 800da18:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	8adb      	ldrh	r3, [r3, #22]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d021      	beq.n	800da66 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800da22:	4b23      	ldr	r3, [pc, #140]	@ (800dab0 <tcp_listen_with_backlog_and_err+0x148>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	68fa      	ldr	r2, [r7, #12]
 800da28:	429a      	cmp	r2, r3
 800da2a:	d105      	bne.n	800da38 <tcp_listen_with_backlog_and_err+0xd0>
 800da2c:	4b20      	ldr	r3, [pc, #128]	@ (800dab0 <tcp_listen_with_backlog_and_err+0x148>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	68db      	ldr	r3, [r3, #12]
 800da32:	4a1f      	ldr	r2, [pc, #124]	@ (800dab0 <tcp_listen_with_backlog_and_err+0x148>)
 800da34:	6013      	str	r3, [r2, #0]
 800da36:	e013      	b.n	800da60 <tcp_listen_with_backlog_and_err+0xf8>
 800da38:	4b1d      	ldr	r3, [pc, #116]	@ (800dab0 <tcp_listen_with_backlog_and_err+0x148>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	617b      	str	r3, [r7, #20]
 800da3e:	e00c      	b.n	800da5a <tcp_listen_with_backlog_and_err+0xf2>
 800da40:	697b      	ldr	r3, [r7, #20]
 800da42:	68db      	ldr	r3, [r3, #12]
 800da44:	68fa      	ldr	r2, [r7, #12]
 800da46:	429a      	cmp	r2, r3
 800da48:	d104      	bne.n	800da54 <tcp_listen_with_backlog_and_err+0xec>
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	68da      	ldr	r2, [r3, #12]
 800da4e:	697b      	ldr	r3, [r7, #20]
 800da50:	60da      	str	r2, [r3, #12]
 800da52:	e005      	b.n	800da60 <tcp_listen_with_backlog_and_err+0xf8>
 800da54:	697b      	ldr	r3, [r7, #20]
 800da56:	68db      	ldr	r3, [r3, #12]
 800da58:	617b      	str	r3, [r7, #20]
 800da5a:	697b      	ldr	r3, [r7, #20]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d1ef      	bne.n	800da40 <tcp_listen_with_backlog_and_err+0xd8>
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	2200      	movs	r2, #0
 800da64:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800da66:	68f8      	ldr	r0, [r7, #12]
 800da68:	f7ff fb76 	bl	800d158 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800da6c:	69fb      	ldr	r3, [r7, #28]
 800da6e:	4a11      	ldr	r2, [pc, #68]	@ (800dab4 <tcp_listen_with_backlog_and_err+0x14c>)
 800da70:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800da72:	4b11      	ldr	r3, [pc, #68]	@ (800dab8 <tcp_listen_with_backlog_and_err+0x150>)
 800da74:	681a      	ldr	r2, [r3, #0]
 800da76:	69fb      	ldr	r3, [r7, #28]
 800da78:	60da      	str	r2, [r3, #12]
 800da7a:	4a0f      	ldr	r2, [pc, #60]	@ (800dab8 <tcp_listen_with_backlog_and_err+0x150>)
 800da7c:	69fb      	ldr	r3, [r7, #28]
 800da7e:	6013      	str	r3, [r2, #0]
 800da80:	f005 fbda 	bl	8013238 <tcp_timer_needed>
  res = ERR_OK;
 800da84:	2300      	movs	r3, #0
 800da86:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d002      	beq.n	800da94 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	7efa      	ldrb	r2, [r7, #27]
 800da92:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800da94:	69fb      	ldr	r3, [r7, #28]
}
 800da96:	4618      	mov	r0, r3
 800da98:	3720      	adds	r7, #32
 800da9a:	46bd      	mov	sp, r7
 800da9c:	bd80      	pop	{r7, pc}
 800da9e:	bf00      	nop
 800daa0:	08018b98 	.word	0x08018b98
 800daa4:	08018d8c 	.word	0x08018d8c
 800daa8:	08018bdc 	.word	0x08018bdc
 800daac:	08018dbc 	.word	0x08018dbc
 800dab0:	24007f00 	.word	0x24007f00
 800dab4:	0800d929 	.word	0x0800d929
 800dab8:	24007f04 	.word	0x24007f04

0800dabc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b084      	sub	sp, #16
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d106      	bne.n	800dad8 <tcp_update_rcv_ann_wnd+0x1c>
 800daca:	4b25      	ldr	r3, [pc, #148]	@ (800db60 <tcp_update_rcv_ann_wnd+0xa4>)
 800dacc:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800dad0:	4924      	ldr	r1, [pc, #144]	@ (800db64 <tcp_update_rcv_ann_wnd+0xa8>)
 800dad2:	4825      	ldr	r0, [pc, #148]	@ (800db68 <tcp_update_rcv_ann_wnd+0xac>)
 800dad4:	f008 fdcc 	bl	8016670 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dadc:	687a      	ldr	r2, [r7, #4]
 800dade:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800dae0:	4413      	add	r3, r2
 800dae2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dae8:	687a      	ldr	r2, [r7, #4]
 800daea:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800daec:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800daf0:	bf28      	it	cs
 800daf2:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800daf6:	b292      	uxth	r2, r2
 800daf8:	4413      	add	r3, r2
 800dafa:	68fa      	ldr	r2, [r7, #12]
 800dafc:	1ad3      	subs	r3, r2, r3
 800dafe:	2b00      	cmp	r3, #0
 800db00:	db08      	blt.n	800db14 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db0e:	68fa      	ldr	r2, [r7, #12]
 800db10:	1ad3      	subs	r3, r2, r3
 800db12:	e020      	b.n	800db56 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db1c:	1ad3      	subs	r3, r2, r3
 800db1e:	2b00      	cmp	r3, #0
 800db20:	dd03      	ble.n	800db2a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	2200      	movs	r2, #0
 800db26:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800db28:	e014      	b.n	800db54 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db32:	1ad3      	subs	r3, r2, r3
 800db34:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800db36:	68bb      	ldr	r3, [r7, #8]
 800db38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800db3c:	d306      	bcc.n	800db4c <tcp_update_rcv_ann_wnd+0x90>
 800db3e:	4b08      	ldr	r3, [pc, #32]	@ (800db60 <tcp_update_rcv_ann_wnd+0xa4>)
 800db40:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800db44:	4909      	ldr	r1, [pc, #36]	@ (800db6c <tcp_update_rcv_ann_wnd+0xb0>)
 800db46:	4808      	ldr	r0, [pc, #32]	@ (800db68 <tcp_update_rcv_ann_wnd+0xac>)
 800db48:	f008 fd92 	bl	8016670 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	b29a      	uxth	r2, r3
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800db54:	2300      	movs	r3, #0
  }
}
 800db56:	4618      	mov	r0, r3
 800db58:	3710      	adds	r7, #16
 800db5a:	46bd      	mov	sp, r7
 800db5c:	bd80      	pop	{r7, pc}
 800db5e:	bf00      	nop
 800db60:	08018b98 	.word	0x08018b98
 800db64:	08018df4 	.word	0x08018df4
 800db68:	08018bdc 	.word	0x08018bdc
 800db6c:	08018e18 	.word	0x08018e18

0800db70 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b084      	sub	sp, #16
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
 800db78:	460b      	mov	r3, r1
 800db7a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d107      	bne.n	800db92 <tcp_recved+0x22>
 800db82:	4b1f      	ldr	r3, [pc, #124]	@ (800dc00 <tcp_recved+0x90>)
 800db84:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800db88:	491e      	ldr	r1, [pc, #120]	@ (800dc04 <tcp_recved+0x94>)
 800db8a:	481f      	ldr	r0, [pc, #124]	@ (800dc08 <tcp_recved+0x98>)
 800db8c:	f008 fd70 	bl	8016670 <iprintf>
 800db90:	e032      	b.n	800dbf8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	7d1b      	ldrb	r3, [r3, #20]
 800db96:	2b01      	cmp	r3, #1
 800db98:	d106      	bne.n	800dba8 <tcp_recved+0x38>
 800db9a:	4b19      	ldr	r3, [pc, #100]	@ (800dc00 <tcp_recved+0x90>)
 800db9c:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800dba0:	491a      	ldr	r1, [pc, #104]	@ (800dc0c <tcp_recved+0x9c>)
 800dba2:	4819      	ldr	r0, [pc, #100]	@ (800dc08 <tcp_recved+0x98>)
 800dba4:	f008 fd64 	bl	8016670 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800dbac:	887b      	ldrh	r3, [r7, #2]
 800dbae:	4413      	add	r3, r2
 800dbb0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800dbb2:	89fb      	ldrh	r3, [r7, #14]
 800dbb4:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800dbb8:	d804      	bhi.n	800dbc4 <tcp_recved+0x54>
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dbbe:	89fa      	ldrh	r2, [r7, #14]
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d204      	bcs.n	800dbce <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800dbca:	851a      	strh	r2, [r3, #40]	@ 0x28
 800dbcc:	e002      	b.n	800dbd4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	89fa      	ldrh	r2, [r7, #14]
 800dbd2:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f7ff ff71 	bl	800dabc <tcp_update_rcv_ann_wnd>
 800dbda:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800dbdc:	68bb      	ldr	r3, [r7, #8]
 800dbde:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800dbe2:	d309      	bcc.n	800dbf8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	8b5b      	ldrh	r3, [r3, #26]
 800dbe8:	f043 0302 	orr.w	r3, r3, #2
 800dbec:	b29a      	uxth	r2, r3
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f004 fbaa 	bl	801234c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800dbf8:	3710      	adds	r7, #16
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}
 800dbfe:	bf00      	nop
 800dc00:	08018b98 	.word	0x08018b98
 800dc04:	08018e34 	.word	0x08018e34
 800dc08:	08018bdc 	.word	0x08018bdc
 800dc0c:	08018e4c 	.word	0x08018e4c

0800dc10 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800dc10:	b480      	push	{r7}
 800dc12:	b083      	sub	sp, #12
 800dc14:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800dc16:	2300      	movs	r3, #0
 800dc18:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800dc1a:	4b1e      	ldr	r3, [pc, #120]	@ (800dc94 <tcp_new_port+0x84>)
 800dc1c:	881b      	ldrh	r3, [r3, #0]
 800dc1e:	3301      	adds	r3, #1
 800dc20:	b29a      	uxth	r2, r3
 800dc22:	4b1c      	ldr	r3, [pc, #112]	@ (800dc94 <tcp_new_port+0x84>)
 800dc24:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800dc26:	4b1b      	ldr	r3, [pc, #108]	@ (800dc94 <tcp_new_port+0x84>)
 800dc28:	881b      	ldrh	r3, [r3, #0]
 800dc2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dc2e:	4293      	cmp	r3, r2
 800dc30:	d103      	bne.n	800dc3a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800dc32:	4b18      	ldr	r3, [pc, #96]	@ (800dc94 <tcp_new_port+0x84>)
 800dc34:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800dc38:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	71fb      	strb	r3, [r7, #7]
 800dc3e:	e01e      	b.n	800dc7e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800dc40:	79fb      	ldrb	r3, [r7, #7]
 800dc42:	4a15      	ldr	r2, [pc, #84]	@ (800dc98 <tcp_new_port+0x88>)
 800dc44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	603b      	str	r3, [r7, #0]
 800dc4c:	e011      	b.n	800dc72 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800dc4e:	683b      	ldr	r3, [r7, #0]
 800dc50:	8ada      	ldrh	r2, [r3, #22]
 800dc52:	4b10      	ldr	r3, [pc, #64]	@ (800dc94 <tcp_new_port+0x84>)
 800dc54:	881b      	ldrh	r3, [r3, #0]
 800dc56:	429a      	cmp	r2, r3
 800dc58:	d108      	bne.n	800dc6c <tcp_new_port+0x5c>
        n++;
 800dc5a:	88bb      	ldrh	r3, [r7, #4]
 800dc5c:	3301      	adds	r3, #1
 800dc5e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800dc60:	88bb      	ldrh	r3, [r7, #4]
 800dc62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dc66:	d3d8      	bcc.n	800dc1a <tcp_new_port+0xa>
          return 0;
 800dc68:	2300      	movs	r3, #0
 800dc6a:	e00d      	b.n	800dc88 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	68db      	ldr	r3, [r3, #12]
 800dc70:	603b      	str	r3, [r7, #0]
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d1ea      	bne.n	800dc4e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800dc78:	79fb      	ldrb	r3, [r7, #7]
 800dc7a:	3301      	adds	r3, #1
 800dc7c:	71fb      	strb	r3, [r7, #7]
 800dc7e:	79fb      	ldrb	r3, [r7, #7]
 800dc80:	2b03      	cmp	r3, #3
 800dc82:	d9dd      	bls.n	800dc40 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800dc84:	4b03      	ldr	r3, [pc, #12]	@ (800dc94 <tcp_new_port+0x84>)
 800dc86:	881b      	ldrh	r3, [r3, #0]
}
 800dc88:	4618      	mov	r0, r3
 800dc8a:	370c      	adds	r7, #12
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc92:	4770      	bx	lr
 800dc94:	24000028 	.word	0x24000028
 800dc98:	0801abd8 	.word	0x0801abd8

0800dc9c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800dc9c:	b5b0      	push	{r4, r5, r7, lr}
 800dc9e:	b090      	sub	sp, #64	@ 0x40
 800dca0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800dca2:	2300      	movs	r3, #0
 800dca4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800dca8:	4b95      	ldr	r3, [pc, #596]	@ (800df00 <tcp_slowtmr+0x264>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	3301      	adds	r3, #1
 800dcae:	4a94      	ldr	r2, [pc, #592]	@ (800df00 <tcp_slowtmr+0x264>)
 800dcb0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800dcb2:	4b94      	ldr	r3, [pc, #592]	@ (800df04 <tcp_slowtmr+0x268>)
 800dcb4:	781b      	ldrb	r3, [r3, #0]
 800dcb6:	3301      	adds	r3, #1
 800dcb8:	b2da      	uxtb	r2, r3
 800dcba:	4b92      	ldr	r3, [pc, #584]	@ (800df04 <tcp_slowtmr+0x268>)
 800dcbc:	701a      	strb	r2, [r3, #0]
 800dcbe:	e000      	b.n	800dcc2 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800dcc0:	bf00      	nop
  prev = NULL;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800dcc6:	4b90      	ldr	r3, [pc, #576]	@ (800df08 <tcp_slowtmr+0x26c>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800dccc:	e29d      	b.n	800e20a <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800dcce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcd0:	7d1b      	ldrb	r3, [r3, #20]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d106      	bne.n	800dce4 <tcp_slowtmr+0x48>
 800dcd6:	4b8d      	ldr	r3, [pc, #564]	@ (800df0c <tcp_slowtmr+0x270>)
 800dcd8:	f240 42be 	movw	r2, #1214	@ 0x4be
 800dcdc:	498c      	ldr	r1, [pc, #560]	@ (800df10 <tcp_slowtmr+0x274>)
 800dcde:	488d      	ldr	r0, [pc, #564]	@ (800df14 <tcp_slowtmr+0x278>)
 800dce0:	f008 fcc6 	bl	8016670 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800dce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dce6:	7d1b      	ldrb	r3, [r3, #20]
 800dce8:	2b01      	cmp	r3, #1
 800dcea:	d106      	bne.n	800dcfa <tcp_slowtmr+0x5e>
 800dcec:	4b87      	ldr	r3, [pc, #540]	@ (800df0c <tcp_slowtmr+0x270>)
 800dcee:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800dcf2:	4989      	ldr	r1, [pc, #548]	@ (800df18 <tcp_slowtmr+0x27c>)
 800dcf4:	4887      	ldr	r0, [pc, #540]	@ (800df14 <tcp_slowtmr+0x278>)
 800dcf6:	f008 fcbb 	bl	8016670 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800dcfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcfc:	7d1b      	ldrb	r3, [r3, #20]
 800dcfe:	2b0a      	cmp	r3, #10
 800dd00:	d106      	bne.n	800dd10 <tcp_slowtmr+0x74>
 800dd02:	4b82      	ldr	r3, [pc, #520]	@ (800df0c <tcp_slowtmr+0x270>)
 800dd04:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800dd08:	4984      	ldr	r1, [pc, #528]	@ (800df1c <tcp_slowtmr+0x280>)
 800dd0a:	4882      	ldr	r0, [pc, #520]	@ (800df14 <tcp_slowtmr+0x278>)
 800dd0c:	f008 fcb0 	bl	8016670 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800dd10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd12:	7f9a      	ldrb	r2, [r3, #30]
 800dd14:	4b7b      	ldr	r3, [pc, #492]	@ (800df04 <tcp_slowtmr+0x268>)
 800dd16:	781b      	ldrb	r3, [r3, #0]
 800dd18:	429a      	cmp	r2, r3
 800dd1a:	d105      	bne.n	800dd28 <tcp_slowtmr+0x8c>
      prev = pcb;
 800dd1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd1e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800dd20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd22:	68db      	ldr	r3, [r3, #12]
 800dd24:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800dd26:	e270      	b.n	800e20a <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800dd28:	4b76      	ldr	r3, [pc, #472]	@ (800df04 <tcp_slowtmr+0x268>)
 800dd2a:	781a      	ldrb	r2, [r3, #0]
 800dd2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd2e:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800dd30:	2300      	movs	r3, #0
 800dd32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800dd36:	2300      	movs	r3, #0
 800dd38:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800dd3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd3e:	7d1b      	ldrb	r3, [r3, #20]
 800dd40:	2b02      	cmp	r3, #2
 800dd42:	d10a      	bne.n	800dd5a <tcp_slowtmr+0xbe>
 800dd44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800dd4a:	2b05      	cmp	r3, #5
 800dd4c:	d905      	bls.n	800dd5a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800dd4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dd52:	3301      	adds	r3, #1
 800dd54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800dd58:	e11e      	b.n	800df98 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800dd5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd5c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800dd60:	2b0b      	cmp	r3, #11
 800dd62:	d905      	bls.n	800dd70 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800dd64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dd68:	3301      	adds	r3, #1
 800dd6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800dd6e:	e113      	b.n	800df98 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800dd70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd72:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d075      	beq.n	800de66 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800dd7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d006      	beq.n	800dd90 <tcp_slowtmr+0xf4>
 800dd82:	4b62      	ldr	r3, [pc, #392]	@ (800df0c <tcp_slowtmr+0x270>)
 800dd84:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800dd88:	4965      	ldr	r1, [pc, #404]	@ (800df20 <tcp_slowtmr+0x284>)
 800dd8a:	4862      	ldr	r0, [pc, #392]	@ (800df14 <tcp_slowtmr+0x278>)
 800dd8c:	f008 fc70 	bl	8016670 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800dd90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d106      	bne.n	800dda6 <tcp_slowtmr+0x10a>
 800dd98:	4b5c      	ldr	r3, [pc, #368]	@ (800df0c <tcp_slowtmr+0x270>)
 800dd9a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800dd9e:	4961      	ldr	r1, [pc, #388]	@ (800df24 <tcp_slowtmr+0x288>)
 800dda0:	485c      	ldr	r0, [pc, #368]	@ (800df14 <tcp_slowtmr+0x278>)
 800dda2:	f008 fc65 	bl	8016670 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800dda6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dda8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800ddac:	2b0b      	cmp	r3, #11
 800ddae:	d905      	bls.n	800ddbc <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800ddb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ddb4:	3301      	adds	r3, #1
 800ddb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ddba:	e0ed      	b.n	800df98 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800ddbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddbe:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ddc2:	3b01      	subs	r3, #1
 800ddc4:	4a58      	ldr	r2, [pc, #352]	@ (800df28 <tcp_slowtmr+0x28c>)
 800ddc6:	5cd3      	ldrb	r3, [r2, r3]
 800ddc8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800ddca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddcc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800ddd0:	7c7a      	ldrb	r2, [r7, #17]
 800ddd2:	429a      	cmp	r2, r3
 800ddd4:	d907      	bls.n	800dde6 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800ddd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddd8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800dddc:	3301      	adds	r3, #1
 800ddde:	b2da      	uxtb	r2, r3
 800dde0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dde2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800dde6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dde8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800ddec:	7c7a      	ldrb	r2, [r7, #17]
 800ddee:	429a      	cmp	r2, r3
 800ddf0:	f200 80d2 	bhi.w	800df98 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800ddf4:	2301      	movs	r3, #1
 800ddf6:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800ddf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddfa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d108      	bne.n	800de14 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800de02:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800de04:	f005 f94a 	bl	801309c <tcp_zero_window_probe>
 800de08:	4603      	mov	r3, r0
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d014      	beq.n	800de38 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800de0e:	2300      	movs	r3, #0
 800de10:	623b      	str	r3, [r7, #32]
 800de12:	e011      	b.n	800de38 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800de14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800de1a:	4619      	mov	r1, r3
 800de1c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800de1e:	f004 f80f 	bl	8011e40 <tcp_split_unsent_seg>
 800de22:	4603      	mov	r3, r0
 800de24:	2b00      	cmp	r3, #0
 800de26:	d107      	bne.n	800de38 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800de28:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800de2a:	f004 fa8f 	bl	801234c <tcp_output>
 800de2e:	4603      	mov	r3, r0
 800de30:	2b00      	cmp	r3, #0
 800de32:	d101      	bne.n	800de38 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800de34:	2300      	movs	r3, #0
 800de36:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800de38:	6a3b      	ldr	r3, [r7, #32]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	f000 80ac 	beq.w	800df98 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800de40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de42:	2200      	movs	r2, #0
 800de44:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800de48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de4a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800de4e:	2b06      	cmp	r3, #6
 800de50:	f200 80a2 	bhi.w	800df98 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800de54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de56:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800de5a:	3301      	adds	r3, #1
 800de5c:	b2da      	uxtb	r2, r3
 800de5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de60:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800de64:	e098      	b.n	800df98 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800de66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de68:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	db0f      	blt.n	800de90 <tcp_slowtmr+0x1f4>
 800de70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de72:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800de76:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d008      	beq.n	800de90 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800de7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de80:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800de84:	b29b      	uxth	r3, r3
 800de86:	3301      	adds	r3, #1
 800de88:	b29b      	uxth	r3, r3
 800de8a:	b21a      	sxth	r2, r3
 800de8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de8e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800de90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de92:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800de96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de98:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800de9c:	429a      	cmp	r2, r3
 800de9e:	db7b      	blt.n	800df98 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800dea0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dea2:	f004 fd47 	bl	8012934 <tcp_rexmit_rto_prepare>
 800dea6:	4603      	mov	r3, r0
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d007      	beq.n	800debc <tcp_slowtmr+0x220>
 800deac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d171      	bne.n	800df98 <tcp_slowtmr+0x2fc>
 800deb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d06d      	beq.n	800df98 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800debc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800debe:	7d1b      	ldrb	r3, [r3, #20]
 800dec0:	2b02      	cmp	r3, #2
 800dec2:	d03a      	beq.n	800df3a <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800dec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dec6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800deca:	2b0c      	cmp	r3, #12
 800decc:	bf28      	it	cs
 800dece:	230c      	movcs	r3, #12
 800ded0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ded2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ded4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800ded8:	10db      	asrs	r3, r3, #3
 800deda:	b21b      	sxth	r3, r3
 800dedc:	461a      	mov	r2, r3
 800dede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dee0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800dee4:	4413      	add	r3, r2
 800dee6:	7efa      	ldrb	r2, [r7, #27]
 800dee8:	4910      	ldr	r1, [pc, #64]	@ (800df2c <tcp_slowtmr+0x290>)
 800deea:	5c8a      	ldrb	r2, [r1, r2]
 800deec:	4093      	lsls	r3, r2
 800deee:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800def0:	697b      	ldr	r3, [r7, #20]
 800def2:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800def6:	4293      	cmp	r3, r2
 800def8:	dc1a      	bgt.n	800df30 <tcp_slowtmr+0x294>
 800defa:	697b      	ldr	r3, [r7, #20]
 800defc:	b21a      	sxth	r2, r3
 800defe:	e019      	b.n	800df34 <tcp_slowtmr+0x298>
 800df00:	24007efc 	.word	0x24007efc
 800df04:	24007f12 	.word	0x24007f12
 800df08:	24007f08 	.word	0x24007f08
 800df0c:	08018b98 	.word	0x08018b98
 800df10:	08018edc 	.word	0x08018edc
 800df14:	08018bdc 	.word	0x08018bdc
 800df18:	08018f08 	.word	0x08018f08
 800df1c:	08018f34 	.word	0x08018f34
 800df20:	08018f64 	.word	0x08018f64
 800df24:	08018f98 	.word	0x08018f98
 800df28:	0801abd0 	.word	0x0801abd0
 800df2c:	0801abc0 	.word	0x0801abc0
 800df30:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800df34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df36:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800df3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df3c:	2200      	movs	r2, #0
 800df3e:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800df40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df42:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800df46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df48:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800df4c:	4293      	cmp	r3, r2
 800df4e:	bf28      	it	cs
 800df50:	4613      	movcs	r3, r2
 800df52:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800df54:	8a7b      	ldrh	r3, [r7, #18]
 800df56:	085b      	lsrs	r3, r3, #1
 800df58:	b29a      	uxth	r2, r3
 800df5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df5c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800df60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df62:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800df66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df68:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800df6a:	005b      	lsls	r3, r3, #1
 800df6c:	b29b      	uxth	r3, r3
 800df6e:	429a      	cmp	r2, r3
 800df70:	d206      	bcs.n	800df80 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800df72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df74:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800df76:	005b      	lsls	r3, r3, #1
 800df78:	b29a      	uxth	r2, r3
 800df7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df7c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800df80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df82:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800df84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df86:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800df8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df8c:	2200      	movs	r2, #0
 800df8e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800df92:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800df94:	f004 fd3e 	bl	8012a14 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800df98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df9a:	7d1b      	ldrb	r3, [r3, #20]
 800df9c:	2b06      	cmp	r3, #6
 800df9e:	d111      	bne.n	800dfc4 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800dfa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfa2:	8b5b      	ldrh	r3, [r3, #26]
 800dfa4:	f003 0310 	and.w	r3, r3, #16
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d00b      	beq.n	800dfc4 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dfac:	4b9c      	ldr	r3, [pc, #624]	@ (800e220 <tcp_slowtmr+0x584>)
 800dfae:	681a      	ldr	r2, [r3, #0]
 800dfb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfb2:	6a1b      	ldr	r3, [r3, #32]
 800dfb4:	1ad3      	subs	r3, r2, r3
 800dfb6:	2b28      	cmp	r3, #40	@ 0x28
 800dfb8:	d904      	bls.n	800dfc4 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800dfba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dfbe:	3301      	adds	r3, #1
 800dfc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800dfc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfc6:	7a5b      	ldrb	r3, [r3, #9]
 800dfc8:	f003 0308 	and.w	r3, r3, #8
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d04a      	beq.n	800e066 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800dfd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfd2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800dfd4:	2b04      	cmp	r3, #4
 800dfd6:	d003      	beq.n	800dfe0 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800dfd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfda:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800dfdc:	2b07      	cmp	r3, #7
 800dfde:	d142      	bne.n	800e066 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dfe0:	4b8f      	ldr	r3, [pc, #572]	@ (800e220 <tcp_slowtmr+0x584>)
 800dfe2:	681a      	ldr	r2, [r3, #0]
 800dfe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfe6:	6a1b      	ldr	r3, [r3, #32]
 800dfe8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800dfea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfec:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800dff0:	4b8c      	ldr	r3, [pc, #560]	@ (800e224 <tcp_slowtmr+0x588>)
 800dff2:	440b      	add	r3, r1
 800dff4:	498c      	ldr	r1, [pc, #560]	@ (800e228 <tcp_slowtmr+0x58c>)
 800dff6:	fba1 1303 	umull	r1, r3, r1, r3
 800dffa:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dffc:	429a      	cmp	r2, r3
 800dffe:	d90a      	bls.n	800e016 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800e000:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e004:	3301      	adds	r3, #1
 800e006:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800e00a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e00e:	3301      	adds	r3, #1
 800e010:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e014:	e027      	b.n	800e066 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e016:	4b82      	ldr	r3, [pc, #520]	@ (800e220 <tcp_slowtmr+0x584>)
 800e018:	681a      	ldr	r2, [r3, #0]
 800e01a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e01c:	6a1b      	ldr	r3, [r3, #32]
 800e01e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e022:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800e026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e028:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800e02c:	4618      	mov	r0, r3
 800e02e:	4b7f      	ldr	r3, [pc, #508]	@ (800e22c <tcp_slowtmr+0x590>)
 800e030:	fb00 f303 	mul.w	r3, r0, r3
 800e034:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e036:	497c      	ldr	r1, [pc, #496]	@ (800e228 <tcp_slowtmr+0x58c>)
 800e038:	fba1 1303 	umull	r1, r3, r1, r3
 800e03c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e03e:	429a      	cmp	r2, r3
 800e040:	d911      	bls.n	800e066 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800e042:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e044:	f004 ffea 	bl	801301c <tcp_keepalive>
 800e048:	4603      	mov	r3, r0
 800e04a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800e04e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800e052:	2b00      	cmp	r3, #0
 800e054:	d107      	bne.n	800e066 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800e056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e058:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800e05c:	3301      	adds	r3, #1
 800e05e:	b2da      	uxtb	r2, r3
 800e060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e062:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800e066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e068:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d011      	beq.n	800e092 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e06e:	4b6c      	ldr	r3, [pc, #432]	@ (800e220 <tcp_slowtmr+0x584>)
 800e070:	681a      	ldr	r2, [r3, #0]
 800e072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e074:	6a1b      	ldr	r3, [r3, #32]
 800e076:	1ad2      	subs	r2, r2, r3
 800e078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e07a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800e07e:	4619      	mov	r1, r3
 800e080:	460b      	mov	r3, r1
 800e082:	005b      	lsls	r3, r3, #1
 800e084:	440b      	add	r3, r1
 800e086:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e088:	429a      	cmp	r2, r3
 800e08a:	d302      	bcc.n	800e092 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800e08c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e08e:	f000 feab 	bl	800ede8 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800e092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e094:	7d1b      	ldrb	r3, [r3, #20]
 800e096:	2b03      	cmp	r3, #3
 800e098:	d10b      	bne.n	800e0b2 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e09a:	4b61      	ldr	r3, [pc, #388]	@ (800e220 <tcp_slowtmr+0x584>)
 800e09c:	681a      	ldr	r2, [r3, #0]
 800e09e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0a0:	6a1b      	ldr	r3, [r3, #32]
 800e0a2:	1ad3      	subs	r3, r2, r3
 800e0a4:	2b28      	cmp	r3, #40	@ 0x28
 800e0a6:	d904      	bls.n	800e0b2 <tcp_slowtmr+0x416>
        ++pcb_remove;
 800e0a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e0ac:	3301      	adds	r3, #1
 800e0ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800e0b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0b4:	7d1b      	ldrb	r3, [r3, #20]
 800e0b6:	2b09      	cmp	r3, #9
 800e0b8:	d10b      	bne.n	800e0d2 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e0ba:	4b59      	ldr	r3, [pc, #356]	@ (800e220 <tcp_slowtmr+0x584>)
 800e0bc:	681a      	ldr	r2, [r3, #0]
 800e0be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0c0:	6a1b      	ldr	r3, [r3, #32]
 800e0c2:	1ad3      	subs	r3, r2, r3
 800e0c4:	2bf0      	cmp	r3, #240	@ 0xf0
 800e0c6:	d904      	bls.n	800e0d2 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800e0c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e0cc:	3301      	adds	r3, #1
 800e0ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800e0d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d060      	beq.n	800e19c <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800e0da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e0e0:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800e0e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e0e4:	f000 fccc 	bl	800ea80 <tcp_pcb_purge>
      if (prev != NULL) {
 800e0e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d010      	beq.n	800e110 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e0ee:	4b50      	ldr	r3, [pc, #320]	@ (800e230 <tcp_slowtmr+0x594>)
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e0f4:	429a      	cmp	r2, r3
 800e0f6:	d106      	bne.n	800e106 <tcp_slowtmr+0x46a>
 800e0f8:	4b4e      	ldr	r3, [pc, #312]	@ (800e234 <tcp_slowtmr+0x598>)
 800e0fa:	f240 526d 	movw	r2, #1389	@ 0x56d
 800e0fe:	494e      	ldr	r1, [pc, #312]	@ (800e238 <tcp_slowtmr+0x59c>)
 800e100:	484e      	ldr	r0, [pc, #312]	@ (800e23c <tcp_slowtmr+0x5a0>)
 800e102:	f008 fab5 	bl	8016670 <iprintf>
        prev->next = pcb->next;
 800e106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e108:	68da      	ldr	r2, [r3, #12]
 800e10a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e10c:	60da      	str	r2, [r3, #12]
 800e10e:	e00f      	b.n	800e130 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e110:	4b47      	ldr	r3, [pc, #284]	@ (800e230 <tcp_slowtmr+0x594>)
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e116:	429a      	cmp	r2, r3
 800e118:	d006      	beq.n	800e128 <tcp_slowtmr+0x48c>
 800e11a:	4b46      	ldr	r3, [pc, #280]	@ (800e234 <tcp_slowtmr+0x598>)
 800e11c:	f240 5271 	movw	r2, #1393	@ 0x571
 800e120:	4947      	ldr	r1, [pc, #284]	@ (800e240 <tcp_slowtmr+0x5a4>)
 800e122:	4846      	ldr	r0, [pc, #280]	@ (800e23c <tcp_slowtmr+0x5a0>)
 800e124:	f008 faa4 	bl	8016670 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e12a:	68db      	ldr	r3, [r3, #12]
 800e12c:	4a40      	ldr	r2, [pc, #256]	@ (800e230 <tcp_slowtmr+0x594>)
 800e12e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800e130:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e134:	2b00      	cmp	r3, #0
 800e136:	d013      	beq.n	800e160 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e13a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800e13c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e13e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e140:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800e142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e144:	3304      	adds	r3, #4
 800e146:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e148:	8ad2      	ldrh	r2, [r2, #22]
 800e14a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e14c:	8b09      	ldrh	r1, [r1, #24]
 800e14e:	9102      	str	r1, [sp, #8]
 800e150:	9201      	str	r2, [sp, #4]
 800e152:	9300      	str	r3, [sp, #0]
 800e154:	462b      	mov	r3, r5
 800e156:	4622      	mov	r2, r4
 800e158:	4601      	mov	r1, r0
 800e15a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e15c:	f004 feaa 	bl	8012eb4 <tcp_rst>
      err_arg = pcb->callback_arg;
 800e160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e162:	691b      	ldr	r3, [r3, #16]
 800e164:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e168:	7d1b      	ldrb	r3, [r3, #20]
 800e16a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e16c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e16e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e172:	68db      	ldr	r3, [r3, #12]
 800e174:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800e176:	6838      	ldr	r0, [r7, #0]
 800e178:	f7fe ffee 	bl	800d158 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800e17c:	4b31      	ldr	r3, [pc, #196]	@ (800e244 <tcp_slowtmr+0x5a8>)
 800e17e:	2200      	movs	r2, #0
 800e180:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d004      	beq.n	800e192 <tcp_slowtmr+0x4f6>
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	f06f 010c 	mvn.w	r1, #12
 800e18e:	68b8      	ldr	r0, [r7, #8]
 800e190:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e192:	4b2c      	ldr	r3, [pc, #176]	@ (800e244 <tcp_slowtmr+0x5a8>)
 800e194:	781b      	ldrb	r3, [r3, #0]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d037      	beq.n	800e20a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800e19a:	e592      	b.n	800dcc2 <tcp_slowtmr+0x26>
      prev = pcb;
 800e19c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e19e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e1a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1a2:	68db      	ldr	r3, [r3, #12]
 800e1a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800e1a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1a8:	7f1b      	ldrb	r3, [r3, #28]
 800e1aa:	3301      	adds	r3, #1
 800e1ac:	b2da      	uxtb	r2, r3
 800e1ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1b0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e1b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1b4:	7f1a      	ldrb	r2, [r3, #28]
 800e1b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1b8:	7f5b      	ldrb	r3, [r3, #29]
 800e1ba:	429a      	cmp	r2, r3
 800e1bc:	d325      	bcc.n	800e20a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800e1be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800e1c4:	4b1f      	ldr	r3, [pc, #124]	@ (800e244 <tcp_slowtmr+0x5a8>)
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e1ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d00b      	beq.n	800e1ec <tcp_slowtmr+0x550>
 800e1d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e1da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e1dc:	6912      	ldr	r2, [r2, #16]
 800e1de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e1e0:	4610      	mov	r0, r2
 800e1e2:	4798      	blx	r3
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800e1ea:	e002      	b.n	800e1f2 <tcp_slowtmr+0x556>
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800e1f2:	4b14      	ldr	r3, [pc, #80]	@ (800e244 <tcp_slowtmr+0x5a8>)
 800e1f4:	781b      	ldrb	r3, [r3, #0]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	f47f ad62 	bne.w	800dcc0 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e1fc:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800e200:	2b00      	cmp	r3, #0
 800e202:	d102      	bne.n	800e20a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800e204:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e206:	f004 f8a1 	bl	801234c <tcp_output>
  while (pcb != NULL) {
 800e20a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	f47f ad5e 	bne.w	800dcce <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e212:	2300      	movs	r3, #0
 800e214:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800e216:	4b0c      	ldr	r3, [pc, #48]	@ (800e248 <tcp_slowtmr+0x5ac>)
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e21c:	e069      	b.n	800e2f2 <tcp_slowtmr+0x656>
 800e21e:	bf00      	nop
 800e220:	24007efc 	.word	0x24007efc
 800e224:	000a4cb8 	.word	0x000a4cb8
 800e228:	10624dd3 	.word	0x10624dd3
 800e22c:	000124f8 	.word	0x000124f8
 800e230:	24007f08 	.word	0x24007f08
 800e234:	08018b98 	.word	0x08018b98
 800e238:	08018fd0 	.word	0x08018fd0
 800e23c:	08018bdc 	.word	0x08018bdc
 800e240:	08018ffc 	.word	0x08018ffc
 800e244:	24007f10 	.word	0x24007f10
 800e248:	24007f0c 	.word	0x24007f0c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e24c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e24e:	7d1b      	ldrb	r3, [r3, #20]
 800e250:	2b0a      	cmp	r3, #10
 800e252:	d006      	beq.n	800e262 <tcp_slowtmr+0x5c6>
 800e254:	4b2b      	ldr	r3, [pc, #172]	@ (800e304 <tcp_slowtmr+0x668>)
 800e256:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800e25a:	492b      	ldr	r1, [pc, #172]	@ (800e308 <tcp_slowtmr+0x66c>)
 800e25c:	482b      	ldr	r0, [pc, #172]	@ (800e30c <tcp_slowtmr+0x670>)
 800e25e:	f008 fa07 	bl	8016670 <iprintf>
    pcb_remove = 0;
 800e262:	2300      	movs	r3, #0
 800e264:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e268:	4b29      	ldr	r3, [pc, #164]	@ (800e310 <tcp_slowtmr+0x674>)
 800e26a:	681a      	ldr	r2, [r3, #0]
 800e26c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e26e:	6a1b      	ldr	r3, [r3, #32]
 800e270:	1ad3      	subs	r3, r2, r3
 800e272:	2bf0      	cmp	r3, #240	@ 0xf0
 800e274:	d904      	bls.n	800e280 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800e276:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e27a:	3301      	adds	r3, #1
 800e27c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e280:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e284:	2b00      	cmp	r3, #0
 800e286:	d02f      	beq.n	800e2e8 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e288:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e28a:	f000 fbf9 	bl	800ea80 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e28e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e290:	2b00      	cmp	r3, #0
 800e292:	d010      	beq.n	800e2b6 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e294:	4b1f      	ldr	r3, [pc, #124]	@ (800e314 <tcp_slowtmr+0x678>)
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e29a:	429a      	cmp	r2, r3
 800e29c:	d106      	bne.n	800e2ac <tcp_slowtmr+0x610>
 800e29e:	4b19      	ldr	r3, [pc, #100]	@ (800e304 <tcp_slowtmr+0x668>)
 800e2a0:	f240 52af 	movw	r2, #1455	@ 0x5af
 800e2a4:	491c      	ldr	r1, [pc, #112]	@ (800e318 <tcp_slowtmr+0x67c>)
 800e2a6:	4819      	ldr	r0, [pc, #100]	@ (800e30c <tcp_slowtmr+0x670>)
 800e2a8:	f008 f9e2 	bl	8016670 <iprintf>
        prev->next = pcb->next;
 800e2ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2ae:	68da      	ldr	r2, [r3, #12]
 800e2b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2b2:	60da      	str	r2, [r3, #12]
 800e2b4:	e00f      	b.n	800e2d6 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e2b6:	4b17      	ldr	r3, [pc, #92]	@ (800e314 <tcp_slowtmr+0x678>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e2bc:	429a      	cmp	r2, r3
 800e2be:	d006      	beq.n	800e2ce <tcp_slowtmr+0x632>
 800e2c0:	4b10      	ldr	r3, [pc, #64]	@ (800e304 <tcp_slowtmr+0x668>)
 800e2c2:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800e2c6:	4915      	ldr	r1, [pc, #84]	@ (800e31c <tcp_slowtmr+0x680>)
 800e2c8:	4810      	ldr	r0, [pc, #64]	@ (800e30c <tcp_slowtmr+0x670>)
 800e2ca:	f008 f9d1 	bl	8016670 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e2ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2d0:	68db      	ldr	r3, [r3, #12]
 800e2d2:	4a10      	ldr	r2, [pc, #64]	@ (800e314 <tcp_slowtmr+0x678>)
 800e2d4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e2d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2d8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e2da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2dc:	68db      	ldr	r3, [r3, #12]
 800e2de:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800e2e0:	69f8      	ldr	r0, [r7, #28]
 800e2e2:	f7fe ff39 	bl	800d158 <tcp_free>
 800e2e6:	e004      	b.n	800e2f2 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800e2e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e2ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2ee:	68db      	ldr	r3, [r3, #12]
 800e2f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e2f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d1a9      	bne.n	800e24c <tcp_slowtmr+0x5b0>
    }
  }
}
 800e2f8:	bf00      	nop
 800e2fa:	bf00      	nop
 800e2fc:	3730      	adds	r7, #48	@ 0x30
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bdb0      	pop	{r4, r5, r7, pc}
 800e302:	bf00      	nop
 800e304:	08018b98 	.word	0x08018b98
 800e308:	08019028 	.word	0x08019028
 800e30c:	08018bdc 	.word	0x08018bdc
 800e310:	24007efc 	.word	0x24007efc
 800e314:	24007f0c 	.word	0x24007f0c
 800e318:	08019058 	.word	0x08019058
 800e31c:	08019080 	.word	0x08019080

0800e320 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b082      	sub	sp, #8
 800e324:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e326:	4b2d      	ldr	r3, [pc, #180]	@ (800e3dc <tcp_fasttmr+0xbc>)
 800e328:	781b      	ldrb	r3, [r3, #0]
 800e32a:	3301      	adds	r3, #1
 800e32c:	b2da      	uxtb	r2, r3
 800e32e:	4b2b      	ldr	r3, [pc, #172]	@ (800e3dc <tcp_fasttmr+0xbc>)
 800e330:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e332:	4b2b      	ldr	r3, [pc, #172]	@ (800e3e0 <tcp_fasttmr+0xc0>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e338:	e048      	b.n	800e3cc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	7f9a      	ldrb	r2, [r3, #30]
 800e33e:	4b27      	ldr	r3, [pc, #156]	@ (800e3dc <tcp_fasttmr+0xbc>)
 800e340:	781b      	ldrb	r3, [r3, #0]
 800e342:	429a      	cmp	r2, r3
 800e344:	d03f      	beq.n	800e3c6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e346:	4b25      	ldr	r3, [pc, #148]	@ (800e3dc <tcp_fasttmr+0xbc>)
 800e348:	781a      	ldrb	r2, [r3, #0]
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	8b5b      	ldrh	r3, [r3, #26]
 800e352:	f003 0301 	and.w	r3, r3, #1
 800e356:	2b00      	cmp	r3, #0
 800e358:	d010      	beq.n	800e37c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	8b5b      	ldrh	r3, [r3, #26]
 800e35e:	f043 0302 	orr.w	r3, r3, #2
 800e362:	b29a      	uxth	r2, r3
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	f003 ffef 	bl	801234c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	8b5b      	ldrh	r3, [r3, #26]
 800e372:	f023 0303 	bic.w	r3, r3, #3
 800e376:	b29a      	uxth	r2, r3
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	8b5b      	ldrh	r3, [r3, #26]
 800e380:	f003 0308 	and.w	r3, r3, #8
 800e384:	2b00      	cmp	r3, #0
 800e386:	d009      	beq.n	800e39c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	8b5b      	ldrh	r3, [r3, #26]
 800e38c:	f023 0308 	bic.w	r3, r3, #8
 800e390:	b29a      	uxth	r2, r3
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	f7ff f872 	bl	800d480 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	68db      	ldr	r3, [r3, #12]
 800e3a0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d00a      	beq.n	800e3c0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e3aa:	4b0e      	ldr	r3, [pc, #56]	@ (800e3e4 <tcp_fasttmr+0xc4>)
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	f000 f819 	bl	800e3e8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e3b6:	4b0b      	ldr	r3, [pc, #44]	@ (800e3e4 <tcp_fasttmr+0xc4>)
 800e3b8:	781b      	ldrb	r3, [r3, #0]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d000      	beq.n	800e3c0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e3be:	e7b8      	b.n	800e332 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	607b      	str	r3, [r7, #4]
 800e3c4:	e002      	b.n	800e3cc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	68db      	ldr	r3, [r3, #12]
 800e3ca:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d1b3      	bne.n	800e33a <tcp_fasttmr+0x1a>
    }
  }
}
 800e3d2:	bf00      	nop
 800e3d4:	bf00      	nop
 800e3d6:	3708      	adds	r7, #8
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}
 800e3dc:	24007f12 	.word	0x24007f12
 800e3e0:	24007f08 	.word	0x24007f08
 800e3e4:	24007f10 	.word	0x24007f10

0800e3e8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e3e8:	b590      	push	{r4, r7, lr}
 800e3ea:	b085      	sub	sp, #20
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d109      	bne.n	800e40a <tcp_process_refused_data+0x22>
 800e3f6:	4b37      	ldr	r3, [pc, #220]	@ (800e4d4 <tcp_process_refused_data+0xec>)
 800e3f8:	f240 6209 	movw	r2, #1545	@ 0x609
 800e3fc:	4936      	ldr	r1, [pc, #216]	@ (800e4d8 <tcp_process_refused_data+0xf0>)
 800e3fe:	4837      	ldr	r0, [pc, #220]	@ (800e4dc <tcp_process_refused_data+0xf4>)
 800e400:	f008 f936 	bl	8016670 <iprintf>
 800e404:	f06f 030f 	mvn.w	r3, #15
 800e408:	e060      	b.n	800e4cc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e40e:	7b5b      	ldrb	r3, [r3, #13]
 800e410:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e416:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2200      	movs	r2, #0
 800e41c:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e424:	2b00      	cmp	r3, #0
 800e426:	d00b      	beq.n	800e440 <tcp_process_refused_data+0x58>
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	6918      	ldr	r0, [r3, #16]
 800e432:	2300      	movs	r3, #0
 800e434:	68ba      	ldr	r2, [r7, #8]
 800e436:	6879      	ldr	r1, [r7, #4]
 800e438:	47a0      	blx	r4
 800e43a:	4603      	mov	r3, r0
 800e43c:	73fb      	strb	r3, [r7, #15]
 800e43e:	e007      	b.n	800e450 <tcp_process_refused_data+0x68>
 800e440:	2300      	movs	r3, #0
 800e442:	68ba      	ldr	r2, [r7, #8]
 800e444:	6879      	ldr	r1, [r7, #4]
 800e446:	2000      	movs	r0, #0
 800e448:	f000 f8a4 	bl	800e594 <tcp_recv_null>
 800e44c:	4603      	mov	r3, r0
 800e44e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e450:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d12a      	bne.n	800e4ae <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e458:	7bbb      	ldrb	r3, [r7, #14]
 800e45a:	f003 0320 	and.w	r3, r3, #32
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d033      	beq.n	800e4ca <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e466:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e46a:	d005      	beq.n	800e478 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e470:	3301      	adds	r3, #1
 800e472:	b29a      	uxth	r2, r3
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d00b      	beq.n	800e49a <tcp_process_refused_data+0xb2>
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	6918      	ldr	r0, [r3, #16]
 800e48c:	2300      	movs	r3, #0
 800e48e:	2200      	movs	r2, #0
 800e490:	6879      	ldr	r1, [r7, #4]
 800e492:	47a0      	blx	r4
 800e494:	4603      	mov	r3, r0
 800e496:	73fb      	strb	r3, [r7, #15]
 800e498:	e001      	b.n	800e49e <tcp_process_refused_data+0xb6>
 800e49a:	2300      	movs	r3, #0
 800e49c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e49e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e4a2:	f113 0f0d 	cmn.w	r3, #13
 800e4a6:	d110      	bne.n	800e4ca <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e4a8:	f06f 030c 	mvn.w	r3, #12
 800e4ac:	e00e      	b.n	800e4cc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e4ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e4b2:	f113 0f0d 	cmn.w	r3, #13
 800e4b6:	d102      	bne.n	800e4be <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e4b8:	f06f 030c 	mvn.w	r3, #12
 800e4bc:	e006      	b.n	800e4cc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	68ba      	ldr	r2, [r7, #8]
 800e4c2:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800e4c4:	f06f 0304 	mvn.w	r3, #4
 800e4c8:	e000      	b.n	800e4cc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e4ca:	2300      	movs	r3, #0
}
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	3714      	adds	r7, #20
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd90      	pop	{r4, r7, pc}
 800e4d4:	08018b98 	.word	0x08018b98
 800e4d8:	080190a8 	.word	0x080190a8
 800e4dc:	08018bdc 	.word	0x08018bdc

0800e4e0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b084      	sub	sp, #16
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e4e8:	e007      	b.n	800e4fa <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	f000 f80a 	bl	800e50a <tcp_seg_free>
    seg = next;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d1f4      	bne.n	800e4ea <tcp_segs_free+0xa>
  }
}
 800e500:	bf00      	nop
 800e502:	bf00      	nop
 800e504:	3710      	adds	r7, #16
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}

0800e50a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e50a:	b580      	push	{r7, lr}
 800e50c:	b082      	sub	sp, #8
 800e50e:	af00      	add	r7, sp, #0
 800e510:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d00c      	beq.n	800e532 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	685b      	ldr	r3, [r3, #4]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d004      	beq.n	800e52a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	685b      	ldr	r3, [r3, #4]
 800e524:	4618      	mov	r0, r3
 800e526:	f7fe fb6b 	bl	800cc00 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e52a:	6879      	ldr	r1, [r7, #4]
 800e52c:	2003      	movs	r0, #3
 800e52e:	f7fd fcc3 	bl	800beb8 <memp_free>
  }
}
 800e532:	bf00      	nop
 800e534:	3708      	adds	r7, #8
 800e536:	46bd      	mov	sp, r7
 800e538:	bd80      	pop	{r7, pc}
	...

0800e53c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b084      	sub	sp, #16
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d106      	bne.n	800e558 <tcp_seg_copy+0x1c>
 800e54a:	4b0f      	ldr	r3, [pc, #60]	@ (800e588 <tcp_seg_copy+0x4c>)
 800e54c:	f240 6282 	movw	r2, #1666	@ 0x682
 800e550:	490e      	ldr	r1, [pc, #56]	@ (800e58c <tcp_seg_copy+0x50>)
 800e552:	480f      	ldr	r0, [pc, #60]	@ (800e590 <tcp_seg_copy+0x54>)
 800e554:	f008 f88c 	bl	8016670 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e558:	2003      	movs	r0, #3
 800e55a:	f7fd fc37 	bl	800bdcc <memp_malloc>
 800e55e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d101      	bne.n	800e56a <tcp_seg_copy+0x2e>
    return NULL;
 800e566:	2300      	movs	r3, #0
 800e568:	e00a      	b.n	800e580 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e56a:	2210      	movs	r2, #16
 800e56c:	6879      	ldr	r1, [r7, #4]
 800e56e:	68f8      	ldr	r0, [r7, #12]
 800e570:	f008 f9af 	bl	80168d2 <memcpy>
  pbuf_ref(cseg->p);
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	685b      	ldr	r3, [r3, #4]
 800e578:	4618      	mov	r0, r3
 800e57a:	f7fe fbe7 	bl	800cd4c <pbuf_ref>
  return cseg;
 800e57e:	68fb      	ldr	r3, [r7, #12]
}
 800e580:	4618      	mov	r0, r3
 800e582:	3710      	adds	r7, #16
 800e584:	46bd      	mov	sp, r7
 800e586:	bd80      	pop	{r7, pc}
 800e588:	08018b98 	.word	0x08018b98
 800e58c:	080190ec 	.word	0x080190ec
 800e590:	08018bdc 	.word	0x08018bdc

0800e594 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b084      	sub	sp, #16
 800e598:	af00      	add	r7, sp, #0
 800e59a:	60f8      	str	r0, [r7, #12]
 800e59c:	60b9      	str	r1, [r7, #8]
 800e59e:	607a      	str	r2, [r7, #4]
 800e5a0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d109      	bne.n	800e5bc <tcp_recv_null+0x28>
 800e5a8:	4b12      	ldr	r3, [pc, #72]	@ (800e5f4 <tcp_recv_null+0x60>)
 800e5aa:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800e5ae:	4912      	ldr	r1, [pc, #72]	@ (800e5f8 <tcp_recv_null+0x64>)
 800e5b0:	4812      	ldr	r0, [pc, #72]	@ (800e5fc <tcp_recv_null+0x68>)
 800e5b2:	f008 f85d 	bl	8016670 <iprintf>
 800e5b6:	f06f 030f 	mvn.w	r3, #15
 800e5ba:	e016      	b.n	800e5ea <tcp_recv_null+0x56>

  if (p != NULL) {
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d009      	beq.n	800e5d6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	891b      	ldrh	r3, [r3, #8]
 800e5c6:	4619      	mov	r1, r3
 800e5c8:	68b8      	ldr	r0, [r7, #8]
 800e5ca:	f7ff fad1 	bl	800db70 <tcp_recved>
    pbuf_free(p);
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f7fe fb16 	bl	800cc00 <pbuf_free>
 800e5d4:	e008      	b.n	800e5e8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800e5d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d104      	bne.n	800e5e8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800e5de:	68b8      	ldr	r0, [r7, #8]
 800e5e0:	f7fe ffb8 	bl	800d554 <tcp_close>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	e000      	b.n	800e5ea <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800e5e8:	2300      	movs	r3, #0
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	3710      	adds	r7, #16
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}
 800e5f2:	bf00      	nop
 800e5f4:	08018b98 	.word	0x08018b98
 800e5f8:	08019108 	.word	0x08019108
 800e5fc:	08018bdc 	.word	0x08018bdc

0800e600 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b086      	sub	sp, #24
 800e604:	af00      	add	r7, sp, #0
 800e606:	4603      	mov	r3, r0
 800e608:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e60a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	db01      	blt.n	800e616 <tcp_kill_prio+0x16>
 800e612:	79fb      	ldrb	r3, [r7, #7]
 800e614:	e000      	b.n	800e618 <tcp_kill_prio+0x18>
 800e616:	237f      	movs	r3, #127	@ 0x7f
 800e618:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800e61a:	7afb      	ldrb	r3, [r7, #11]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d034      	beq.n	800e68a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800e620:	7afb      	ldrb	r3, [r7, #11]
 800e622:	3b01      	subs	r3, #1
 800e624:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800e626:	2300      	movs	r3, #0
 800e628:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e62a:	2300      	movs	r3, #0
 800e62c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e62e:	4b19      	ldr	r3, [pc, #100]	@ (800e694 <tcp_kill_prio+0x94>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	617b      	str	r3, [r7, #20]
 800e634:	e01f      	b.n	800e676 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800e636:	697b      	ldr	r3, [r7, #20]
 800e638:	7d5b      	ldrb	r3, [r3, #21]
 800e63a:	7afa      	ldrb	r2, [r7, #11]
 800e63c:	429a      	cmp	r2, r3
 800e63e:	d80c      	bhi.n	800e65a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800e644:	7afa      	ldrb	r2, [r7, #11]
 800e646:	429a      	cmp	r2, r3
 800e648:	d112      	bne.n	800e670 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e64a:	4b13      	ldr	r3, [pc, #76]	@ (800e698 <tcp_kill_prio+0x98>)
 800e64c:	681a      	ldr	r2, [r3, #0]
 800e64e:	697b      	ldr	r3, [r7, #20]
 800e650:	6a1b      	ldr	r3, [r3, #32]
 800e652:	1ad3      	subs	r3, r2, r3
 800e654:	68fa      	ldr	r2, [r7, #12]
 800e656:	429a      	cmp	r2, r3
 800e658:	d80a      	bhi.n	800e670 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800e65a:	4b0f      	ldr	r3, [pc, #60]	@ (800e698 <tcp_kill_prio+0x98>)
 800e65c:	681a      	ldr	r2, [r3, #0]
 800e65e:	697b      	ldr	r3, [r7, #20]
 800e660:	6a1b      	ldr	r3, [r3, #32]
 800e662:	1ad3      	subs	r3, r2, r3
 800e664:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800e666:	697b      	ldr	r3, [r7, #20]
 800e668:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	7d5b      	ldrb	r3, [r3, #21]
 800e66e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e670:	697b      	ldr	r3, [r7, #20]
 800e672:	68db      	ldr	r3, [r3, #12]
 800e674:	617b      	str	r3, [r7, #20]
 800e676:	697b      	ldr	r3, [r7, #20]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d1dc      	bne.n	800e636 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800e67c:	693b      	ldr	r3, [r7, #16]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d004      	beq.n	800e68c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e682:	6938      	ldr	r0, [r7, #16]
 800e684:	f7ff f8ac 	bl	800d7e0 <tcp_abort>
 800e688:	e000      	b.n	800e68c <tcp_kill_prio+0x8c>
    return;
 800e68a:	bf00      	nop
  }
}
 800e68c:	3718      	adds	r7, #24
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}
 800e692:	bf00      	nop
 800e694:	24007f08 	.word	0x24007f08
 800e698:	24007efc 	.word	0x24007efc

0800e69c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b086      	sub	sp, #24
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e6a6:	79fb      	ldrb	r3, [r7, #7]
 800e6a8:	2b08      	cmp	r3, #8
 800e6aa:	d009      	beq.n	800e6c0 <tcp_kill_state+0x24>
 800e6ac:	79fb      	ldrb	r3, [r7, #7]
 800e6ae:	2b09      	cmp	r3, #9
 800e6b0:	d006      	beq.n	800e6c0 <tcp_kill_state+0x24>
 800e6b2:	4b1a      	ldr	r3, [pc, #104]	@ (800e71c <tcp_kill_state+0x80>)
 800e6b4:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800e6b8:	4919      	ldr	r1, [pc, #100]	@ (800e720 <tcp_kill_state+0x84>)
 800e6ba:	481a      	ldr	r0, [pc, #104]	@ (800e724 <tcp_kill_state+0x88>)
 800e6bc:	f007 ffd8 	bl	8016670 <iprintf>

  inactivity = 0;
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e6c8:	4b17      	ldr	r3, [pc, #92]	@ (800e728 <tcp_kill_state+0x8c>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	617b      	str	r3, [r7, #20]
 800e6ce:	e017      	b.n	800e700 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e6d0:	697b      	ldr	r3, [r7, #20]
 800e6d2:	7d1b      	ldrb	r3, [r3, #20]
 800e6d4:	79fa      	ldrb	r2, [r7, #7]
 800e6d6:	429a      	cmp	r2, r3
 800e6d8:	d10f      	bne.n	800e6fa <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e6da:	4b14      	ldr	r3, [pc, #80]	@ (800e72c <tcp_kill_state+0x90>)
 800e6dc:	681a      	ldr	r2, [r3, #0]
 800e6de:	697b      	ldr	r3, [r7, #20]
 800e6e0:	6a1b      	ldr	r3, [r3, #32]
 800e6e2:	1ad3      	subs	r3, r2, r3
 800e6e4:	68fa      	ldr	r2, [r7, #12]
 800e6e6:	429a      	cmp	r2, r3
 800e6e8:	d807      	bhi.n	800e6fa <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e6ea:	4b10      	ldr	r3, [pc, #64]	@ (800e72c <tcp_kill_state+0x90>)
 800e6ec:	681a      	ldr	r2, [r3, #0]
 800e6ee:	697b      	ldr	r3, [r7, #20]
 800e6f0:	6a1b      	ldr	r3, [r3, #32]
 800e6f2:	1ad3      	subs	r3, r2, r3
 800e6f4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e6f6:	697b      	ldr	r3, [r7, #20]
 800e6f8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e6fa:	697b      	ldr	r3, [r7, #20]
 800e6fc:	68db      	ldr	r3, [r3, #12]
 800e6fe:	617b      	str	r3, [r7, #20]
 800e700:	697b      	ldr	r3, [r7, #20]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d1e4      	bne.n	800e6d0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e706:	693b      	ldr	r3, [r7, #16]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d003      	beq.n	800e714 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e70c:	2100      	movs	r1, #0
 800e70e:	6938      	ldr	r0, [r7, #16]
 800e710:	f7fe ffa8 	bl	800d664 <tcp_abandon>
  }
}
 800e714:	bf00      	nop
 800e716:	3718      	adds	r7, #24
 800e718:	46bd      	mov	sp, r7
 800e71a:	bd80      	pop	{r7, pc}
 800e71c:	08018b98 	.word	0x08018b98
 800e720:	08019124 	.word	0x08019124
 800e724:	08018bdc 	.word	0x08018bdc
 800e728:	24007f08 	.word	0x24007f08
 800e72c:	24007efc 	.word	0x24007efc

0800e730 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b084      	sub	sp, #16
 800e734:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e736:	2300      	movs	r3, #0
 800e738:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e73a:	2300      	movs	r3, #0
 800e73c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e73e:	4b12      	ldr	r3, [pc, #72]	@ (800e788 <tcp_kill_timewait+0x58>)
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	60fb      	str	r3, [r7, #12]
 800e744:	e012      	b.n	800e76c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e746:	4b11      	ldr	r3, [pc, #68]	@ (800e78c <tcp_kill_timewait+0x5c>)
 800e748:	681a      	ldr	r2, [r3, #0]
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	6a1b      	ldr	r3, [r3, #32]
 800e74e:	1ad3      	subs	r3, r2, r3
 800e750:	687a      	ldr	r2, [r7, #4]
 800e752:	429a      	cmp	r2, r3
 800e754:	d807      	bhi.n	800e766 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e756:	4b0d      	ldr	r3, [pc, #52]	@ (800e78c <tcp_kill_timewait+0x5c>)
 800e758:	681a      	ldr	r2, [r3, #0]
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	6a1b      	ldr	r3, [r3, #32]
 800e75e:	1ad3      	subs	r3, r2, r3
 800e760:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	68db      	ldr	r3, [r3, #12]
 800e76a:	60fb      	str	r3, [r7, #12]
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d1e9      	bne.n	800e746 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e772:	68bb      	ldr	r3, [r7, #8]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d002      	beq.n	800e77e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e778:	68b8      	ldr	r0, [r7, #8]
 800e77a:	f7ff f831 	bl	800d7e0 <tcp_abort>
  }
}
 800e77e:	bf00      	nop
 800e780:	3710      	adds	r7, #16
 800e782:	46bd      	mov	sp, r7
 800e784:	bd80      	pop	{r7, pc}
 800e786:	bf00      	nop
 800e788:	24007f0c 	.word	0x24007f0c
 800e78c:	24007efc 	.word	0x24007efc

0800e790 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b082      	sub	sp, #8
 800e794:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800e796:	4b10      	ldr	r3, [pc, #64]	@ (800e7d8 <tcp_handle_closepend+0x48>)
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e79c:	e014      	b.n	800e7c8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	68db      	ldr	r3, [r3, #12]
 800e7a2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	8b5b      	ldrh	r3, [r3, #26]
 800e7a8:	f003 0308 	and.w	r3, r3, #8
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d009      	beq.n	800e7c4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	8b5b      	ldrh	r3, [r3, #26]
 800e7b4:	f023 0308 	bic.w	r3, r3, #8
 800e7b8:	b29a      	uxth	r2, r3
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	f7fe fe5e 	bl	800d480 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d1e7      	bne.n	800e79e <tcp_handle_closepend+0xe>
  }
}
 800e7ce:	bf00      	nop
 800e7d0:	bf00      	nop
 800e7d2:	3708      	adds	r7, #8
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}
 800e7d8:	24007f08 	.word	0x24007f08

0800e7dc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b084      	sub	sp, #16
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e7e6:	2001      	movs	r0, #1
 800e7e8:	f7fd faf0 	bl	800bdcc <memp_malloc>
 800e7ec:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d126      	bne.n	800e842 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800e7f4:	f7ff ffcc 	bl	800e790 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e7f8:	f7ff ff9a 	bl	800e730 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e7fc:	2001      	movs	r0, #1
 800e7fe:	f7fd fae5 	bl	800bdcc <memp_malloc>
 800e802:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d11b      	bne.n	800e842 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e80a:	2009      	movs	r0, #9
 800e80c:	f7ff ff46 	bl	800e69c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e810:	2001      	movs	r0, #1
 800e812:	f7fd fadb 	bl	800bdcc <memp_malloc>
 800e816:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d111      	bne.n	800e842 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e81e:	2008      	movs	r0, #8
 800e820:	f7ff ff3c 	bl	800e69c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e824:	2001      	movs	r0, #1
 800e826:	f7fd fad1 	bl	800bdcc <memp_malloc>
 800e82a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d107      	bne.n	800e842 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800e832:	79fb      	ldrb	r3, [r7, #7]
 800e834:	4618      	mov	r0, r3
 800e836:	f7ff fee3 	bl	800e600 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e83a:	2001      	movs	r0, #1
 800e83c:	f7fd fac6 	bl	800bdcc <memp_malloc>
 800e840:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d03f      	beq.n	800e8c8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e848:	229c      	movs	r2, #156	@ 0x9c
 800e84a:	2100      	movs	r1, #0
 800e84c:	68f8      	ldr	r0, [r7, #12]
 800e84e:	f007 ff74 	bl	801673a <memset>
    pcb->prio = prio;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	79fa      	ldrb	r2, [r7, #7]
 800e856:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800e85e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800e868:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	22ff      	movs	r2, #255	@ 0xff
 800e876:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800e87e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	2206      	movs	r2, #6
 800e884:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	2206      	movs	r2, #6
 800e88c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e894:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	2201      	movs	r2, #1
 800e89a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800e89e:	4b0d      	ldr	r3, [pc, #52]	@ (800e8d4 <tcp_alloc+0xf8>)
 800e8a0:	681a      	ldr	r2, [r3, #0]
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e8a6:	4b0c      	ldr	r3, [pc, #48]	@ (800e8d8 <tcp_alloc+0xfc>)
 800e8a8:	781a      	ldrb	r2, [r3, #0]
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800e8b4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	4a08      	ldr	r2, [pc, #32]	@ (800e8dc <tcp_alloc+0x100>)
 800e8bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	4a07      	ldr	r2, [pc, #28]	@ (800e8e0 <tcp_alloc+0x104>)
 800e8c4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
}
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	3710      	adds	r7, #16
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}
 800e8d2:	bf00      	nop
 800e8d4:	24007efc 	.word	0x24007efc
 800e8d8:	24007f12 	.word	0x24007f12
 800e8dc:	0800e595 	.word	0x0800e595
 800e8e0:	006ddd00 	.word	0x006ddd00

0800e8e4 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b084      	sub	sp, #16
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800e8ee:	2040      	movs	r0, #64	@ 0x40
 800e8f0:	f7ff ff74 	bl	800e7dc <tcp_alloc>
 800e8f4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
}
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	3710      	adds	r7, #16
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	bd80      	pop	{r7, pc}

0800e900 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800e900:	b480      	push	{r7}
 800e902:	b083      	sub	sp, #12
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
 800e908:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d002      	beq.n	800e916 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	683a      	ldr	r2, [r7, #0]
 800e914:	611a      	str	r2, [r3, #16]
  }
}
 800e916:	bf00      	nop
 800e918:	370c      	adds	r7, #12
 800e91a:	46bd      	mov	sp, r7
 800e91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e920:	4770      	bx	lr
	...

0800e924 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b082      	sub	sp, #8
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
 800e92c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d00e      	beq.n	800e952 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	7d1b      	ldrb	r3, [r3, #20]
 800e938:	2b01      	cmp	r3, #1
 800e93a:	d106      	bne.n	800e94a <tcp_recv+0x26>
 800e93c:	4b07      	ldr	r3, [pc, #28]	@ (800e95c <tcp_recv+0x38>)
 800e93e:	f240 72df 	movw	r2, #2015	@ 0x7df
 800e942:	4907      	ldr	r1, [pc, #28]	@ (800e960 <tcp_recv+0x3c>)
 800e944:	4807      	ldr	r0, [pc, #28]	@ (800e964 <tcp_recv+0x40>)
 800e946:	f007 fe93 	bl	8016670 <iprintf>
    pcb->recv = recv;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	683a      	ldr	r2, [r7, #0]
 800e94e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 800e952:	bf00      	nop
 800e954:	3708      	adds	r7, #8
 800e956:	46bd      	mov	sp, r7
 800e958:	bd80      	pop	{r7, pc}
 800e95a:	bf00      	nop
 800e95c:	08018b98 	.word	0x08018b98
 800e960:	08019134 	.word	0x08019134
 800e964:	08018bdc 	.word	0x08018bdc

0800e968 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b082      	sub	sp, #8
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
 800e970:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d00e      	beq.n	800e996 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	7d1b      	ldrb	r3, [r3, #20]
 800e97c:	2b01      	cmp	r3, #1
 800e97e:	d106      	bne.n	800e98e <tcp_sent+0x26>
 800e980:	4b07      	ldr	r3, [pc, #28]	@ (800e9a0 <tcp_sent+0x38>)
 800e982:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800e986:	4907      	ldr	r1, [pc, #28]	@ (800e9a4 <tcp_sent+0x3c>)
 800e988:	4807      	ldr	r0, [pc, #28]	@ (800e9a8 <tcp_sent+0x40>)
 800e98a:	f007 fe71 	bl	8016670 <iprintf>
    pcb->sent = sent;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	683a      	ldr	r2, [r7, #0]
 800e992:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 800e996:	bf00      	nop
 800e998:	3708      	adds	r7, #8
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}
 800e99e:	bf00      	nop
 800e9a0:	08018b98 	.word	0x08018b98
 800e9a4:	0801915c 	.word	0x0801915c
 800e9a8:	08018bdc 	.word	0x08018bdc

0800e9ac <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b082      	sub	sp, #8
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
 800e9b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d00e      	beq.n	800e9da <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	7d1b      	ldrb	r3, [r3, #20]
 800e9c0:	2b01      	cmp	r3, #1
 800e9c2:	d106      	bne.n	800e9d2 <tcp_err+0x26>
 800e9c4:	4b07      	ldr	r3, [pc, #28]	@ (800e9e4 <tcp_err+0x38>)
 800e9c6:	f640 020d 	movw	r2, #2061	@ 0x80d
 800e9ca:	4907      	ldr	r1, [pc, #28]	@ (800e9e8 <tcp_err+0x3c>)
 800e9cc:	4807      	ldr	r0, [pc, #28]	@ (800e9ec <tcp_err+0x40>)
 800e9ce:	f007 fe4f 	bl	8016670 <iprintf>
    pcb->errf = err;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	683a      	ldr	r2, [r7, #0]
 800e9d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 800e9da:	bf00      	nop
 800e9dc:	3708      	adds	r7, #8
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}
 800e9e2:	bf00      	nop
 800e9e4:	08018b98 	.word	0x08018b98
 800e9e8:	08019184 	.word	0x08019184
 800e9ec:	08018bdc 	.word	0x08018bdc

0800e9f0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800e9f0:	b480      	push	{r7}
 800e9f2:	b085      	sub	sp, #20
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
 800e9f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d008      	beq.n	800ea12 <tcp_accept+0x22>
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	7d1b      	ldrb	r3, [r3, #20]
 800ea04:	2b01      	cmp	r3, #1
 800ea06:	d104      	bne.n	800ea12 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	683a      	ldr	r2, [r7, #0]
 800ea10:	619a      	str	r2, [r3, #24]
  }
}
 800ea12:	bf00      	nop
 800ea14:	3714      	adds	r7, #20
 800ea16:	46bd      	mov	sp, r7
 800ea18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1c:	4770      	bx	lr
	...

0800ea20 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b084      	sub	sp, #16
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	60f8      	str	r0, [r7, #12]
 800ea28:	60b9      	str	r1, [r7, #8]
 800ea2a:	4613      	mov	r3, r2
 800ea2c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d107      	bne.n	800ea44 <tcp_poll+0x24>
 800ea34:	4b0e      	ldr	r3, [pc, #56]	@ (800ea70 <tcp_poll+0x50>)
 800ea36:	f640 023d 	movw	r2, #2109	@ 0x83d
 800ea3a:	490e      	ldr	r1, [pc, #56]	@ (800ea74 <tcp_poll+0x54>)
 800ea3c:	480e      	ldr	r0, [pc, #56]	@ (800ea78 <tcp_poll+0x58>)
 800ea3e:	f007 fe17 	bl	8016670 <iprintf>
 800ea42:	e011      	b.n	800ea68 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	7d1b      	ldrb	r3, [r3, #20]
 800ea48:	2b01      	cmp	r3, #1
 800ea4a:	d106      	bne.n	800ea5a <tcp_poll+0x3a>
 800ea4c:	4b08      	ldr	r3, [pc, #32]	@ (800ea70 <tcp_poll+0x50>)
 800ea4e:	f640 023e 	movw	r2, #2110	@ 0x83e
 800ea52:	490a      	ldr	r1, [pc, #40]	@ (800ea7c <tcp_poll+0x5c>)
 800ea54:	4808      	ldr	r0, [pc, #32]	@ (800ea78 <tcp_poll+0x58>)
 800ea56:	f007 fe0b 	bl	8016670 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	68ba      	ldr	r2, [r7, #8]
 800ea5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	79fa      	ldrb	r2, [r7, #7]
 800ea66:	775a      	strb	r2, [r3, #29]
}
 800ea68:	3710      	adds	r7, #16
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	bd80      	pop	{r7, pc}
 800ea6e:	bf00      	nop
 800ea70:	08018b98 	.word	0x08018b98
 800ea74:	080191ac 	.word	0x080191ac
 800ea78:	08018bdc 	.word	0x08018bdc
 800ea7c:	080191c4 	.word	0x080191c4

0800ea80 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b082      	sub	sp, #8
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d107      	bne.n	800ea9e <tcp_pcb_purge+0x1e>
 800ea8e:	4b21      	ldr	r3, [pc, #132]	@ (800eb14 <tcp_pcb_purge+0x94>)
 800ea90:	f640 0251 	movw	r2, #2129	@ 0x851
 800ea94:	4920      	ldr	r1, [pc, #128]	@ (800eb18 <tcp_pcb_purge+0x98>)
 800ea96:	4821      	ldr	r0, [pc, #132]	@ (800eb1c <tcp_pcb_purge+0x9c>)
 800ea98:	f007 fdea 	bl	8016670 <iprintf>
 800ea9c:	e037      	b.n	800eb0e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	7d1b      	ldrb	r3, [r3, #20]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d033      	beq.n	800eb0e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800eaaa:	2b0a      	cmp	r3, #10
 800eaac:	d02f      	beq.n	800eb0e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800eab2:	2b01      	cmp	r3, #1
 800eab4:	d02b      	beq.n	800eb0e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d007      	beq.n	800eace <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eac2:	4618      	mov	r0, r3
 800eac4:	f7fe f89c 	bl	800cc00 <pbuf_free>
      pcb->refused_data = NULL;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	2200      	movs	r2, #0
 800eacc:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d002      	beq.n	800eadc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800ead6:	6878      	ldr	r0, [r7, #4]
 800ead8:	f000 f986 	bl	800ede8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800eae2:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eae8:	4618      	mov	r0, r3
 800eaea:	f7ff fcf9 	bl	800e4e0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f7ff fcf4 	bl	800e4e0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	2200      	movs	r2, #0
 800eafc:	66da      	str	r2, [r3, #108]	@ 0x6c
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	2200      	movs	r2, #0
 800eb0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800eb0e:	3708      	adds	r7, #8
 800eb10:	46bd      	mov	sp, r7
 800eb12:	bd80      	pop	{r7, pc}
 800eb14:	08018b98 	.word	0x08018b98
 800eb18:	080191e4 	.word	0x080191e4
 800eb1c:	08018bdc 	.word	0x08018bdc

0800eb20 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b084      	sub	sp, #16
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
 800eb28:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800eb2a:	683b      	ldr	r3, [r7, #0]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d106      	bne.n	800eb3e <tcp_pcb_remove+0x1e>
 800eb30:	4b3e      	ldr	r3, [pc, #248]	@ (800ec2c <tcp_pcb_remove+0x10c>)
 800eb32:	f640 0283 	movw	r2, #2179	@ 0x883
 800eb36:	493e      	ldr	r1, [pc, #248]	@ (800ec30 <tcp_pcb_remove+0x110>)
 800eb38:	483e      	ldr	r0, [pc, #248]	@ (800ec34 <tcp_pcb_remove+0x114>)
 800eb3a:	f007 fd99 	bl	8016670 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d106      	bne.n	800eb52 <tcp_pcb_remove+0x32>
 800eb44:	4b39      	ldr	r3, [pc, #228]	@ (800ec2c <tcp_pcb_remove+0x10c>)
 800eb46:	f640 0284 	movw	r2, #2180	@ 0x884
 800eb4a:	493b      	ldr	r1, [pc, #236]	@ (800ec38 <tcp_pcb_remove+0x118>)
 800eb4c:	4839      	ldr	r0, [pc, #228]	@ (800ec34 <tcp_pcb_remove+0x114>)
 800eb4e:	f007 fd8f 	bl	8016670 <iprintf>

  TCP_RMV(pcblist, pcb);
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	683a      	ldr	r2, [r7, #0]
 800eb58:	429a      	cmp	r2, r3
 800eb5a:	d105      	bne.n	800eb68 <tcp_pcb_remove+0x48>
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	68da      	ldr	r2, [r3, #12]
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	601a      	str	r2, [r3, #0]
 800eb66:	e013      	b.n	800eb90 <tcp_pcb_remove+0x70>
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	60fb      	str	r3, [r7, #12]
 800eb6e:	e00c      	b.n	800eb8a <tcp_pcb_remove+0x6a>
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	68db      	ldr	r3, [r3, #12]
 800eb74:	683a      	ldr	r2, [r7, #0]
 800eb76:	429a      	cmp	r2, r3
 800eb78:	d104      	bne.n	800eb84 <tcp_pcb_remove+0x64>
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	68da      	ldr	r2, [r3, #12]
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	60da      	str	r2, [r3, #12]
 800eb82:	e005      	b.n	800eb90 <tcp_pcb_remove+0x70>
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	68db      	ldr	r3, [r3, #12]
 800eb88:	60fb      	str	r3, [r7, #12]
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d1ef      	bne.n	800eb70 <tcp_pcb_remove+0x50>
 800eb90:	683b      	ldr	r3, [r7, #0]
 800eb92:	2200      	movs	r2, #0
 800eb94:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800eb96:	6838      	ldr	r0, [r7, #0]
 800eb98:	f7ff ff72 	bl	800ea80 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	7d1b      	ldrb	r3, [r3, #20]
 800eba0:	2b0a      	cmp	r3, #10
 800eba2:	d013      	beq.n	800ebcc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800eba8:	2b01      	cmp	r3, #1
 800ebaa:	d00f      	beq.n	800ebcc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	8b5b      	ldrh	r3, [r3, #26]
 800ebb0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d009      	beq.n	800ebcc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	8b5b      	ldrh	r3, [r3, #26]
 800ebbc:	f043 0302 	orr.w	r3, r3, #2
 800ebc0:	b29a      	uxth	r2, r3
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ebc6:	6838      	ldr	r0, [r7, #0]
 800ebc8:	f003 fbc0 	bl	801234c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	7d1b      	ldrb	r3, [r3, #20]
 800ebd0:	2b01      	cmp	r3, #1
 800ebd2:	d020      	beq.n	800ec16 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d006      	beq.n	800ebea <tcp_pcb_remove+0xca>
 800ebdc:	4b13      	ldr	r3, [pc, #76]	@ (800ec2c <tcp_pcb_remove+0x10c>)
 800ebde:	f640 0293 	movw	r2, #2195	@ 0x893
 800ebe2:	4916      	ldr	r1, [pc, #88]	@ (800ec3c <tcp_pcb_remove+0x11c>)
 800ebe4:	4813      	ldr	r0, [pc, #76]	@ (800ec34 <tcp_pcb_remove+0x114>)
 800ebe6:	f007 fd43 	bl	8016670 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800ebea:	683b      	ldr	r3, [r7, #0]
 800ebec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d006      	beq.n	800ec00 <tcp_pcb_remove+0xe0>
 800ebf2:	4b0e      	ldr	r3, [pc, #56]	@ (800ec2c <tcp_pcb_remove+0x10c>)
 800ebf4:	f640 0294 	movw	r2, #2196	@ 0x894
 800ebf8:	4911      	ldr	r1, [pc, #68]	@ (800ec40 <tcp_pcb_remove+0x120>)
 800ebfa:	480e      	ldr	r0, [pc, #56]	@ (800ec34 <tcp_pcb_remove+0x114>)
 800ebfc:	f007 fd38 	bl	8016670 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800ec00:	683b      	ldr	r3, [r7, #0]
 800ec02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d006      	beq.n	800ec16 <tcp_pcb_remove+0xf6>
 800ec08:	4b08      	ldr	r3, [pc, #32]	@ (800ec2c <tcp_pcb_remove+0x10c>)
 800ec0a:	f640 0296 	movw	r2, #2198	@ 0x896
 800ec0e:	490d      	ldr	r1, [pc, #52]	@ (800ec44 <tcp_pcb_remove+0x124>)
 800ec10:	4808      	ldr	r0, [pc, #32]	@ (800ec34 <tcp_pcb_remove+0x114>)
 800ec12:	f007 fd2d 	bl	8016670 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	2200      	movs	r2, #0
 800ec1a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	2200      	movs	r2, #0
 800ec20:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ec22:	bf00      	nop
 800ec24:	3710      	adds	r7, #16
 800ec26:	46bd      	mov	sp, r7
 800ec28:	bd80      	pop	{r7, pc}
 800ec2a:	bf00      	nop
 800ec2c:	08018b98 	.word	0x08018b98
 800ec30:	08019200 	.word	0x08019200
 800ec34:	08018bdc 	.word	0x08018bdc
 800ec38:	0801921c 	.word	0x0801921c
 800ec3c:	0801923c 	.word	0x0801923c
 800ec40:	08019254 	.word	0x08019254
 800ec44:	08019270 	.word	0x08019270

0800ec48 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b082      	sub	sp, #8
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d106      	bne.n	800ec64 <tcp_next_iss+0x1c>
 800ec56:	4b0a      	ldr	r3, [pc, #40]	@ (800ec80 <tcp_next_iss+0x38>)
 800ec58:	f640 02af 	movw	r2, #2223	@ 0x8af
 800ec5c:	4909      	ldr	r1, [pc, #36]	@ (800ec84 <tcp_next_iss+0x3c>)
 800ec5e:	480a      	ldr	r0, [pc, #40]	@ (800ec88 <tcp_next_iss+0x40>)
 800ec60:	f007 fd06 	bl	8016670 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ec64:	4b09      	ldr	r3, [pc, #36]	@ (800ec8c <tcp_next_iss+0x44>)
 800ec66:	681a      	ldr	r2, [r3, #0]
 800ec68:	4b09      	ldr	r3, [pc, #36]	@ (800ec90 <tcp_next_iss+0x48>)
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	4413      	add	r3, r2
 800ec6e:	4a07      	ldr	r2, [pc, #28]	@ (800ec8c <tcp_next_iss+0x44>)
 800ec70:	6013      	str	r3, [r2, #0]
  return iss;
 800ec72:	4b06      	ldr	r3, [pc, #24]	@ (800ec8c <tcp_next_iss+0x44>)
 800ec74:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ec76:	4618      	mov	r0, r3
 800ec78:	3708      	adds	r7, #8
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd80      	pop	{r7, pc}
 800ec7e:	bf00      	nop
 800ec80:	08018b98 	.word	0x08018b98
 800ec84:	08019288 	.word	0x08019288
 800ec88:	08018bdc 	.word	0x08018bdc
 800ec8c:	2400002c 	.word	0x2400002c
 800ec90:	24007efc 	.word	0x24007efc

0800ec94 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b086      	sub	sp, #24
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	60b9      	str	r1, [r7, #8]
 800ec9e:	607a      	str	r2, [r7, #4]
 800eca0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d106      	bne.n	800ecb6 <tcp_eff_send_mss_netif+0x22>
 800eca8:	4b14      	ldr	r3, [pc, #80]	@ (800ecfc <tcp_eff_send_mss_netif+0x68>)
 800ecaa:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800ecae:	4914      	ldr	r1, [pc, #80]	@ (800ed00 <tcp_eff_send_mss_netif+0x6c>)
 800ecb0:	4814      	ldr	r0, [pc, #80]	@ (800ed04 <tcp_eff_send_mss_netif+0x70>)
 800ecb2:	f007 fcdd 	bl	8016670 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ecb6:	68bb      	ldr	r3, [r7, #8]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d101      	bne.n	800ecc0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ecbc:	89fb      	ldrh	r3, [r7, #14]
 800ecbe:	e019      	b.n	800ecf4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ecc0:	68bb      	ldr	r3, [r7, #8]
 800ecc2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800ecc4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ecc6:	8afb      	ldrh	r3, [r7, #22]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d012      	beq.n	800ecf2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800eccc:	2328      	movs	r3, #40	@ 0x28
 800ecce:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800ecd0:	8afa      	ldrh	r2, [r7, #22]
 800ecd2:	8abb      	ldrh	r3, [r7, #20]
 800ecd4:	429a      	cmp	r2, r3
 800ecd6:	d904      	bls.n	800ece2 <tcp_eff_send_mss_netif+0x4e>
 800ecd8:	8afa      	ldrh	r2, [r7, #22]
 800ecda:	8abb      	ldrh	r3, [r7, #20]
 800ecdc:	1ad3      	subs	r3, r2, r3
 800ecde:	b29b      	uxth	r3, r3
 800ece0:	e000      	b.n	800ece4 <tcp_eff_send_mss_netif+0x50>
 800ece2:	2300      	movs	r3, #0
 800ece4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ece6:	8a7a      	ldrh	r2, [r7, #18]
 800ece8:	89fb      	ldrh	r3, [r7, #14]
 800ecea:	4293      	cmp	r3, r2
 800ecec:	bf28      	it	cs
 800ecee:	4613      	movcs	r3, r2
 800ecf0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800ecf2:	89fb      	ldrh	r3, [r7, #14]
}
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	3718      	adds	r7, #24
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd80      	pop	{r7, pc}
 800ecfc:	08018b98 	.word	0x08018b98
 800ed00:	080192a4 	.word	0x080192a4
 800ed04:	08018bdc 	.word	0x08018bdc

0800ed08 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b084      	sub	sp, #16
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
 800ed10:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d119      	bne.n	800ed50 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800ed1c:	4b10      	ldr	r3, [pc, #64]	@ (800ed60 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800ed1e:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800ed22:	4910      	ldr	r1, [pc, #64]	@ (800ed64 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800ed24:	4810      	ldr	r0, [pc, #64]	@ (800ed68 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800ed26:	f007 fca3 	bl	8016670 <iprintf>

  while (pcb != NULL) {
 800ed2a:	e011      	b.n	800ed50 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	681a      	ldr	r2, [r3, #0]
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	429a      	cmp	r2, r3
 800ed36:	d108      	bne.n	800ed4a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	68db      	ldr	r3, [r3, #12]
 800ed3c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ed3e:	68f8      	ldr	r0, [r7, #12]
 800ed40:	f7fe fd4e 	bl	800d7e0 <tcp_abort>
      pcb = next;
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	60fb      	str	r3, [r7, #12]
 800ed48:	e002      	b.n	800ed50 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	68db      	ldr	r3, [r3, #12]
 800ed4e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d1ea      	bne.n	800ed2c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ed56:	bf00      	nop
 800ed58:	bf00      	nop
 800ed5a:	3710      	adds	r7, #16
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd80      	pop	{r7, pc}
 800ed60:	08018b98 	.word	0x08018b98
 800ed64:	080192cc 	.word	0x080192cc
 800ed68:	08018bdc 	.word	0x08018bdc

0800ed6c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b084      	sub	sp, #16
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
 800ed74:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d02a      	beq.n	800edd2 <tcp_netif_ip_addr_changed+0x66>
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d026      	beq.n	800edd2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ed84:	4b15      	ldr	r3, [pc, #84]	@ (800eddc <tcp_netif_ip_addr_changed+0x70>)
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	4619      	mov	r1, r3
 800ed8a:	6878      	ldr	r0, [r7, #4]
 800ed8c:	f7ff ffbc 	bl	800ed08 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ed90:	4b13      	ldr	r3, [pc, #76]	@ (800ede0 <tcp_netif_ip_addr_changed+0x74>)
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	4619      	mov	r1, r3
 800ed96:	6878      	ldr	r0, [r7, #4]
 800ed98:	f7ff ffb6 	bl	800ed08 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ed9c:	683b      	ldr	r3, [r7, #0]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d017      	beq.n	800edd2 <tcp_netif_ip_addr_changed+0x66>
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d013      	beq.n	800edd2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800edaa:	4b0e      	ldr	r3, [pc, #56]	@ (800ede4 <tcp_netif_ip_addr_changed+0x78>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	60fb      	str	r3, [r7, #12]
 800edb0:	e00c      	b.n	800edcc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	681a      	ldr	r2, [r3, #0]
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	429a      	cmp	r2, r3
 800edbc:	d103      	bne.n	800edc6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800edbe:	683b      	ldr	r3, [r7, #0]
 800edc0:	681a      	ldr	r2, [r3, #0]
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	68db      	ldr	r3, [r3, #12]
 800edca:	60fb      	str	r3, [r7, #12]
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d1ef      	bne.n	800edb2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800edd2:	bf00      	nop
 800edd4:	3710      	adds	r7, #16
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}
 800edda:	bf00      	nop
 800eddc:	24007f08 	.word	0x24007f08
 800ede0:	24007f00 	.word	0x24007f00
 800ede4:	24007f04 	.word	0x24007f04

0800ede8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b082      	sub	sp, #8
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d007      	beq.n	800ee08 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800edfc:	4618      	mov	r0, r3
 800edfe:	f7ff fb6f 	bl	800e4e0 <tcp_segs_free>
    pcb->ooseq = NULL;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	2200      	movs	r2, #0
 800ee06:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800ee08:	bf00      	nop
 800ee0a:	3708      	adds	r7, #8
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd80      	pop	{r7, pc}

0800ee10 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800ee10:	b590      	push	{r4, r7, lr}
 800ee12:	b08d      	sub	sp, #52	@ 0x34
 800ee14:	af04      	add	r7, sp, #16
 800ee16:	6078      	str	r0, [r7, #4]
 800ee18:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d105      	bne.n	800ee2c <tcp_input+0x1c>
 800ee20:	4b9b      	ldr	r3, [pc, #620]	@ (800f090 <tcp_input+0x280>)
 800ee22:	2283      	movs	r2, #131	@ 0x83
 800ee24:	499b      	ldr	r1, [pc, #620]	@ (800f094 <tcp_input+0x284>)
 800ee26:	489c      	ldr	r0, [pc, #624]	@ (800f098 <tcp_input+0x288>)
 800ee28:	f007 fc22 	bl	8016670 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	685b      	ldr	r3, [r3, #4]
 800ee30:	4a9a      	ldr	r2, [pc, #616]	@ (800f09c <tcp_input+0x28c>)
 800ee32:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	895b      	ldrh	r3, [r3, #10]
 800ee38:	2b13      	cmp	r3, #19
 800ee3a:	f240 83d1 	bls.w	800f5e0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ee3e:	4b98      	ldr	r3, [pc, #608]	@ (800f0a0 <tcp_input+0x290>)
 800ee40:	695b      	ldr	r3, [r3, #20]
 800ee42:	4a97      	ldr	r2, [pc, #604]	@ (800f0a0 <tcp_input+0x290>)
 800ee44:	6812      	ldr	r2, [r2, #0]
 800ee46:	4611      	mov	r1, r2
 800ee48:	4618      	mov	r0, r3
 800ee4a:	f006 fa05 	bl	8015258 <ip4_addr_isbroadcast_u32>
 800ee4e:	4603      	mov	r3, r0
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	f040 83c7 	bne.w	800f5e4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ee56:	4b92      	ldr	r3, [pc, #584]	@ (800f0a0 <tcp_input+0x290>)
 800ee58:	695b      	ldr	r3, [r3, #20]
 800ee5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ee5e:	2be0      	cmp	r3, #224	@ 0xe0
 800ee60:	f000 83c0 	beq.w	800f5e4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ee64:	4b8d      	ldr	r3, [pc, #564]	@ (800f09c <tcp_input+0x28c>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	899b      	ldrh	r3, [r3, #12]
 800ee6a:	b29b      	uxth	r3, r3
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f7fc fa1d 	bl	800b2ac <lwip_htons>
 800ee72:	4603      	mov	r3, r0
 800ee74:	0b1b      	lsrs	r3, r3, #12
 800ee76:	b29b      	uxth	r3, r3
 800ee78:	b2db      	uxtb	r3, r3
 800ee7a:	009b      	lsls	r3, r3, #2
 800ee7c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ee7e:	7cbb      	ldrb	r3, [r7, #18]
 800ee80:	2b13      	cmp	r3, #19
 800ee82:	f240 83b1 	bls.w	800f5e8 <tcp_input+0x7d8>
 800ee86:	7cbb      	ldrb	r3, [r7, #18]
 800ee88:	b29a      	uxth	r2, r3
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	891b      	ldrh	r3, [r3, #8]
 800ee8e:	429a      	cmp	r2, r3
 800ee90:	f200 83aa 	bhi.w	800f5e8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ee94:	7cbb      	ldrb	r3, [r7, #18]
 800ee96:	b29b      	uxth	r3, r3
 800ee98:	3b14      	subs	r3, #20
 800ee9a:	b29a      	uxth	r2, r3
 800ee9c:	4b81      	ldr	r3, [pc, #516]	@ (800f0a4 <tcp_input+0x294>)
 800ee9e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800eea0:	4b81      	ldr	r3, [pc, #516]	@ (800f0a8 <tcp_input+0x298>)
 800eea2:	2200      	movs	r2, #0
 800eea4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	895a      	ldrh	r2, [r3, #10]
 800eeaa:	7cbb      	ldrb	r3, [r7, #18]
 800eeac:	b29b      	uxth	r3, r3
 800eeae:	429a      	cmp	r2, r3
 800eeb0:	d309      	bcc.n	800eec6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800eeb2:	4b7c      	ldr	r3, [pc, #496]	@ (800f0a4 <tcp_input+0x294>)
 800eeb4:	881a      	ldrh	r2, [r3, #0]
 800eeb6:	4b7d      	ldr	r3, [pc, #500]	@ (800f0ac <tcp_input+0x29c>)
 800eeb8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800eeba:	7cbb      	ldrb	r3, [r7, #18]
 800eebc:	4619      	mov	r1, r3
 800eebe:	6878      	ldr	r0, [r7, #4]
 800eec0:	f7fd fe18 	bl	800caf4 <pbuf_remove_header>
 800eec4:	e04e      	b.n	800ef64 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d105      	bne.n	800eeda <tcp_input+0xca>
 800eece:	4b70      	ldr	r3, [pc, #448]	@ (800f090 <tcp_input+0x280>)
 800eed0:	22c2      	movs	r2, #194	@ 0xc2
 800eed2:	4977      	ldr	r1, [pc, #476]	@ (800f0b0 <tcp_input+0x2a0>)
 800eed4:	4870      	ldr	r0, [pc, #448]	@ (800f098 <tcp_input+0x288>)
 800eed6:	f007 fbcb 	bl	8016670 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800eeda:	2114      	movs	r1, #20
 800eedc:	6878      	ldr	r0, [r7, #4]
 800eede:	f7fd fe09 	bl	800caf4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	895a      	ldrh	r2, [r3, #10]
 800eee6:	4b71      	ldr	r3, [pc, #452]	@ (800f0ac <tcp_input+0x29c>)
 800eee8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800eeea:	4b6e      	ldr	r3, [pc, #440]	@ (800f0a4 <tcp_input+0x294>)
 800eeec:	881a      	ldrh	r2, [r3, #0]
 800eeee:	4b6f      	ldr	r3, [pc, #444]	@ (800f0ac <tcp_input+0x29c>)
 800eef0:	881b      	ldrh	r3, [r3, #0]
 800eef2:	1ad3      	subs	r3, r2, r3
 800eef4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800eef6:	4b6d      	ldr	r3, [pc, #436]	@ (800f0ac <tcp_input+0x29c>)
 800eef8:	881b      	ldrh	r3, [r3, #0]
 800eefa:	4619      	mov	r1, r3
 800eefc:	6878      	ldr	r0, [r7, #4]
 800eefe:	f7fd fdf9 	bl	800caf4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	895b      	ldrh	r3, [r3, #10]
 800ef08:	8a3a      	ldrh	r2, [r7, #16]
 800ef0a:	429a      	cmp	r2, r3
 800ef0c:	f200 836e 	bhi.w	800f5ec <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	685b      	ldr	r3, [r3, #4]
 800ef16:	4a64      	ldr	r2, [pc, #400]	@ (800f0a8 <tcp_input+0x298>)
 800ef18:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	8a3a      	ldrh	r2, [r7, #16]
 800ef20:	4611      	mov	r1, r2
 800ef22:	4618      	mov	r0, r3
 800ef24:	f7fd fde6 	bl	800caf4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	891a      	ldrh	r2, [r3, #8]
 800ef2c:	8a3b      	ldrh	r3, [r7, #16]
 800ef2e:	1ad3      	subs	r3, r2, r3
 800ef30:	b29a      	uxth	r2, r3
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	895b      	ldrh	r3, [r3, #10]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d005      	beq.n	800ef4a <tcp_input+0x13a>
 800ef3e:	4b54      	ldr	r3, [pc, #336]	@ (800f090 <tcp_input+0x280>)
 800ef40:	22df      	movs	r2, #223	@ 0xdf
 800ef42:	495c      	ldr	r1, [pc, #368]	@ (800f0b4 <tcp_input+0x2a4>)
 800ef44:	4854      	ldr	r0, [pc, #336]	@ (800f098 <tcp_input+0x288>)
 800ef46:	f007 fb93 	bl	8016670 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	891a      	ldrh	r2, [r3, #8]
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	891b      	ldrh	r3, [r3, #8]
 800ef54:	429a      	cmp	r2, r3
 800ef56:	d005      	beq.n	800ef64 <tcp_input+0x154>
 800ef58:	4b4d      	ldr	r3, [pc, #308]	@ (800f090 <tcp_input+0x280>)
 800ef5a:	22e0      	movs	r2, #224	@ 0xe0
 800ef5c:	4956      	ldr	r1, [pc, #344]	@ (800f0b8 <tcp_input+0x2a8>)
 800ef5e:	484e      	ldr	r0, [pc, #312]	@ (800f098 <tcp_input+0x288>)
 800ef60:	f007 fb86 	bl	8016670 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ef64:	4b4d      	ldr	r3, [pc, #308]	@ (800f09c <tcp_input+0x28c>)
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	881b      	ldrh	r3, [r3, #0]
 800ef6a:	b29b      	uxth	r3, r3
 800ef6c:	4a4b      	ldr	r2, [pc, #300]	@ (800f09c <tcp_input+0x28c>)
 800ef6e:	6814      	ldr	r4, [r2, #0]
 800ef70:	4618      	mov	r0, r3
 800ef72:	f7fc f99b 	bl	800b2ac <lwip_htons>
 800ef76:	4603      	mov	r3, r0
 800ef78:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ef7a:	4b48      	ldr	r3, [pc, #288]	@ (800f09c <tcp_input+0x28c>)
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	885b      	ldrh	r3, [r3, #2]
 800ef80:	b29b      	uxth	r3, r3
 800ef82:	4a46      	ldr	r2, [pc, #280]	@ (800f09c <tcp_input+0x28c>)
 800ef84:	6814      	ldr	r4, [r2, #0]
 800ef86:	4618      	mov	r0, r3
 800ef88:	f7fc f990 	bl	800b2ac <lwip_htons>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ef90:	4b42      	ldr	r3, [pc, #264]	@ (800f09c <tcp_input+0x28c>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	685b      	ldr	r3, [r3, #4]
 800ef96:	4a41      	ldr	r2, [pc, #260]	@ (800f09c <tcp_input+0x28c>)
 800ef98:	6814      	ldr	r4, [r2, #0]
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	f7fc f99b 	bl	800b2d6 <lwip_htonl>
 800efa0:	4603      	mov	r3, r0
 800efa2:	6063      	str	r3, [r4, #4]
 800efa4:	6863      	ldr	r3, [r4, #4]
 800efa6:	4a45      	ldr	r2, [pc, #276]	@ (800f0bc <tcp_input+0x2ac>)
 800efa8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800efaa:	4b3c      	ldr	r3, [pc, #240]	@ (800f09c <tcp_input+0x28c>)
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	689b      	ldr	r3, [r3, #8]
 800efb0:	4a3a      	ldr	r2, [pc, #232]	@ (800f09c <tcp_input+0x28c>)
 800efb2:	6814      	ldr	r4, [r2, #0]
 800efb4:	4618      	mov	r0, r3
 800efb6:	f7fc f98e 	bl	800b2d6 <lwip_htonl>
 800efba:	4603      	mov	r3, r0
 800efbc:	60a3      	str	r3, [r4, #8]
 800efbe:	68a3      	ldr	r3, [r4, #8]
 800efc0:	4a3f      	ldr	r2, [pc, #252]	@ (800f0c0 <tcp_input+0x2b0>)
 800efc2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800efc4:	4b35      	ldr	r3, [pc, #212]	@ (800f09c <tcp_input+0x28c>)
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	89db      	ldrh	r3, [r3, #14]
 800efca:	b29b      	uxth	r3, r3
 800efcc:	4a33      	ldr	r2, [pc, #204]	@ (800f09c <tcp_input+0x28c>)
 800efce:	6814      	ldr	r4, [r2, #0]
 800efd0:	4618      	mov	r0, r3
 800efd2:	f7fc f96b 	bl	800b2ac <lwip_htons>
 800efd6:	4603      	mov	r3, r0
 800efd8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800efda:	4b30      	ldr	r3, [pc, #192]	@ (800f09c <tcp_input+0x28c>)
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	899b      	ldrh	r3, [r3, #12]
 800efe0:	b29b      	uxth	r3, r3
 800efe2:	4618      	mov	r0, r3
 800efe4:	f7fc f962 	bl	800b2ac <lwip_htons>
 800efe8:	4603      	mov	r3, r0
 800efea:	b2db      	uxtb	r3, r3
 800efec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800eff0:	b2da      	uxtb	r2, r3
 800eff2:	4b34      	ldr	r3, [pc, #208]	@ (800f0c4 <tcp_input+0x2b4>)
 800eff4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	891a      	ldrh	r2, [r3, #8]
 800effa:	4b33      	ldr	r3, [pc, #204]	@ (800f0c8 <tcp_input+0x2b8>)
 800effc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800effe:	4b31      	ldr	r3, [pc, #196]	@ (800f0c4 <tcp_input+0x2b4>)
 800f000:	781b      	ldrb	r3, [r3, #0]
 800f002:	f003 0303 	and.w	r3, r3, #3
 800f006:	2b00      	cmp	r3, #0
 800f008:	d00c      	beq.n	800f024 <tcp_input+0x214>
    tcplen++;
 800f00a:	4b2f      	ldr	r3, [pc, #188]	@ (800f0c8 <tcp_input+0x2b8>)
 800f00c:	881b      	ldrh	r3, [r3, #0]
 800f00e:	3301      	adds	r3, #1
 800f010:	b29a      	uxth	r2, r3
 800f012:	4b2d      	ldr	r3, [pc, #180]	@ (800f0c8 <tcp_input+0x2b8>)
 800f014:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	891a      	ldrh	r2, [r3, #8]
 800f01a:	4b2b      	ldr	r3, [pc, #172]	@ (800f0c8 <tcp_input+0x2b8>)
 800f01c:	881b      	ldrh	r3, [r3, #0]
 800f01e:	429a      	cmp	r2, r3
 800f020:	f200 82e6 	bhi.w	800f5f0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f024:	2300      	movs	r3, #0
 800f026:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f028:	4b28      	ldr	r3, [pc, #160]	@ (800f0cc <tcp_input+0x2bc>)
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	61fb      	str	r3, [r7, #28]
 800f02e:	e09d      	b.n	800f16c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f030:	69fb      	ldr	r3, [r7, #28]
 800f032:	7d1b      	ldrb	r3, [r3, #20]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d105      	bne.n	800f044 <tcp_input+0x234>
 800f038:	4b15      	ldr	r3, [pc, #84]	@ (800f090 <tcp_input+0x280>)
 800f03a:	22fb      	movs	r2, #251	@ 0xfb
 800f03c:	4924      	ldr	r1, [pc, #144]	@ (800f0d0 <tcp_input+0x2c0>)
 800f03e:	4816      	ldr	r0, [pc, #88]	@ (800f098 <tcp_input+0x288>)
 800f040:	f007 fb16 	bl	8016670 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f044:	69fb      	ldr	r3, [r7, #28]
 800f046:	7d1b      	ldrb	r3, [r3, #20]
 800f048:	2b0a      	cmp	r3, #10
 800f04a:	d105      	bne.n	800f058 <tcp_input+0x248>
 800f04c:	4b10      	ldr	r3, [pc, #64]	@ (800f090 <tcp_input+0x280>)
 800f04e:	22fc      	movs	r2, #252	@ 0xfc
 800f050:	4920      	ldr	r1, [pc, #128]	@ (800f0d4 <tcp_input+0x2c4>)
 800f052:	4811      	ldr	r0, [pc, #68]	@ (800f098 <tcp_input+0x288>)
 800f054:	f007 fb0c 	bl	8016670 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f058:	69fb      	ldr	r3, [r7, #28]
 800f05a:	7d1b      	ldrb	r3, [r3, #20]
 800f05c:	2b01      	cmp	r3, #1
 800f05e:	d105      	bne.n	800f06c <tcp_input+0x25c>
 800f060:	4b0b      	ldr	r3, [pc, #44]	@ (800f090 <tcp_input+0x280>)
 800f062:	22fd      	movs	r2, #253	@ 0xfd
 800f064:	491c      	ldr	r1, [pc, #112]	@ (800f0d8 <tcp_input+0x2c8>)
 800f066:	480c      	ldr	r0, [pc, #48]	@ (800f098 <tcp_input+0x288>)
 800f068:	f007 fb02 	bl	8016670 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f06c:	69fb      	ldr	r3, [r7, #28]
 800f06e:	7a1b      	ldrb	r3, [r3, #8]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d033      	beq.n	800f0dc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f074:	69fb      	ldr	r3, [r7, #28]
 800f076:	7a1a      	ldrb	r2, [r3, #8]
 800f078:	4b09      	ldr	r3, [pc, #36]	@ (800f0a0 <tcp_input+0x290>)
 800f07a:	685b      	ldr	r3, [r3, #4]
 800f07c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f080:	3301      	adds	r3, #1
 800f082:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f084:	429a      	cmp	r2, r3
 800f086:	d029      	beq.n	800f0dc <tcp_input+0x2cc>
      prev = pcb;
 800f088:	69fb      	ldr	r3, [r7, #28]
 800f08a:	61bb      	str	r3, [r7, #24]
      continue;
 800f08c:	e06b      	b.n	800f166 <tcp_input+0x356>
 800f08e:	bf00      	nop
 800f090:	08019300 	.word	0x08019300
 800f094:	08019334 	.word	0x08019334
 800f098:	0801934c 	.word	0x0801934c
 800f09c:	24007f24 	.word	0x24007f24
 800f0a0:	24004dec 	.word	0x24004dec
 800f0a4:	24007f28 	.word	0x24007f28
 800f0a8:	24007f2c 	.word	0x24007f2c
 800f0ac:	24007f2a 	.word	0x24007f2a
 800f0b0:	08019374 	.word	0x08019374
 800f0b4:	08019384 	.word	0x08019384
 800f0b8:	08019390 	.word	0x08019390
 800f0bc:	24007f34 	.word	0x24007f34
 800f0c0:	24007f38 	.word	0x24007f38
 800f0c4:	24007f40 	.word	0x24007f40
 800f0c8:	24007f3e 	.word	0x24007f3e
 800f0cc:	24007f08 	.word	0x24007f08
 800f0d0:	080193b0 	.word	0x080193b0
 800f0d4:	080193d8 	.word	0x080193d8
 800f0d8:	08019404 	.word	0x08019404
    }

    if (pcb->remote_port == tcphdr->src &&
 800f0dc:	69fb      	ldr	r3, [r7, #28]
 800f0de:	8b1a      	ldrh	r2, [r3, #24]
 800f0e0:	4b72      	ldr	r3, [pc, #456]	@ (800f2ac <tcp_input+0x49c>)
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	881b      	ldrh	r3, [r3, #0]
 800f0e6:	b29b      	uxth	r3, r3
 800f0e8:	429a      	cmp	r2, r3
 800f0ea:	d13a      	bne.n	800f162 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f0ec:	69fb      	ldr	r3, [r7, #28]
 800f0ee:	8ada      	ldrh	r2, [r3, #22]
 800f0f0:	4b6e      	ldr	r3, [pc, #440]	@ (800f2ac <tcp_input+0x49c>)
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	885b      	ldrh	r3, [r3, #2]
 800f0f6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f0f8:	429a      	cmp	r2, r3
 800f0fa:	d132      	bne.n	800f162 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f0fc:	69fb      	ldr	r3, [r7, #28]
 800f0fe:	685a      	ldr	r2, [r3, #4]
 800f100:	4b6b      	ldr	r3, [pc, #428]	@ (800f2b0 <tcp_input+0x4a0>)
 800f102:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f104:	429a      	cmp	r2, r3
 800f106:	d12c      	bne.n	800f162 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f108:	69fb      	ldr	r3, [r7, #28]
 800f10a:	681a      	ldr	r2, [r3, #0]
 800f10c:	4b68      	ldr	r3, [pc, #416]	@ (800f2b0 <tcp_input+0x4a0>)
 800f10e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f110:	429a      	cmp	r2, r3
 800f112:	d126      	bne.n	800f162 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f114:	69fb      	ldr	r3, [r7, #28]
 800f116:	68db      	ldr	r3, [r3, #12]
 800f118:	69fa      	ldr	r2, [r7, #28]
 800f11a:	429a      	cmp	r2, r3
 800f11c:	d106      	bne.n	800f12c <tcp_input+0x31c>
 800f11e:	4b65      	ldr	r3, [pc, #404]	@ (800f2b4 <tcp_input+0x4a4>)
 800f120:	f240 120d 	movw	r2, #269	@ 0x10d
 800f124:	4964      	ldr	r1, [pc, #400]	@ (800f2b8 <tcp_input+0x4a8>)
 800f126:	4865      	ldr	r0, [pc, #404]	@ (800f2bc <tcp_input+0x4ac>)
 800f128:	f007 faa2 	bl	8016670 <iprintf>
      if (prev != NULL) {
 800f12c:	69bb      	ldr	r3, [r7, #24]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d00a      	beq.n	800f148 <tcp_input+0x338>
        prev->next = pcb->next;
 800f132:	69fb      	ldr	r3, [r7, #28]
 800f134:	68da      	ldr	r2, [r3, #12]
 800f136:	69bb      	ldr	r3, [r7, #24]
 800f138:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f13a:	4b61      	ldr	r3, [pc, #388]	@ (800f2c0 <tcp_input+0x4b0>)
 800f13c:	681a      	ldr	r2, [r3, #0]
 800f13e:	69fb      	ldr	r3, [r7, #28]
 800f140:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f142:	4a5f      	ldr	r2, [pc, #380]	@ (800f2c0 <tcp_input+0x4b0>)
 800f144:	69fb      	ldr	r3, [r7, #28]
 800f146:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f148:	69fb      	ldr	r3, [r7, #28]
 800f14a:	68db      	ldr	r3, [r3, #12]
 800f14c:	69fa      	ldr	r2, [r7, #28]
 800f14e:	429a      	cmp	r2, r3
 800f150:	d111      	bne.n	800f176 <tcp_input+0x366>
 800f152:	4b58      	ldr	r3, [pc, #352]	@ (800f2b4 <tcp_input+0x4a4>)
 800f154:	f240 1215 	movw	r2, #277	@ 0x115
 800f158:	495a      	ldr	r1, [pc, #360]	@ (800f2c4 <tcp_input+0x4b4>)
 800f15a:	4858      	ldr	r0, [pc, #352]	@ (800f2bc <tcp_input+0x4ac>)
 800f15c:	f007 fa88 	bl	8016670 <iprintf>
      break;
 800f160:	e009      	b.n	800f176 <tcp_input+0x366>
    }
    prev = pcb;
 800f162:	69fb      	ldr	r3, [r7, #28]
 800f164:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f166:	69fb      	ldr	r3, [r7, #28]
 800f168:	68db      	ldr	r3, [r3, #12]
 800f16a:	61fb      	str	r3, [r7, #28]
 800f16c:	69fb      	ldr	r3, [r7, #28]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	f47f af5e 	bne.w	800f030 <tcp_input+0x220>
 800f174:	e000      	b.n	800f178 <tcp_input+0x368>
      break;
 800f176:	bf00      	nop
  }

  if (pcb == NULL) {
 800f178:	69fb      	ldr	r3, [r7, #28]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	f040 80aa 	bne.w	800f2d4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f180:	4b51      	ldr	r3, [pc, #324]	@ (800f2c8 <tcp_input+0x4b8>)
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	61fb      	str	r3, [r7, #28]
 800f186:	e03f      	b.n	800f208 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f188:	69fb      	ldr	r3, [r7, #28]
 800f18a:	7d1b      	ldrb	r3, [r3, #20]
 800f18c:	2b0a      	cmp	r3, #10
 800f18e:	d006      	beq.n	800f19e <tcp_input+0x38e>
 800f190:	4b48      	ldr	r3, [pc, #288]	@ (800f2b4 <tcp_input+0x4a4>)
 800f192:	f240 121f 	movw	r2, #287	@ 0x11f
 800f196:	494d      	ldr	r1, [pc, #308]	@ (800f2cc <tcp_input+0x4bc>)
 800f198:	4848      	ldr	r0, [pc, #288]	@ (800f2bc <tcp_input+0x4ac>)
 800f19a:	f007 fa69 	bl	8016670 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f19e:	69fb      	ldr	r3, [r7, #28]
 800f1a0:	7a1b      	ldrb	r3, [r3, #8]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d009      	beq.n	800f1ba <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f1a6:	69fb      	ldr	r3, [r7, #28]
 800f1a8:	7a1a      	ldrb	r2, [r3, #8]
 800f1aa:	4b41      	ldr	r3, [pc, #260]	@ (800f2b0 <tcp_input+0x4a0>)
 800f1ac:	685b      	ldr	r3, [r3, #4]
 800f1ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f1b2:	3301      	adds	r3, #1
 800f1b4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f1b6:	429a      	cmp	r2, r3
 800f1b8:	d122      	bne.n	800f200 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f1ba:	69fb      	ldr	r3, [r7, #28]
 800f1bc:	8b1a      	ldrh	r2, [r3, #24]
 800f1be:	4b3b      	ldr	r3, [pc, #236]	@ (800f2ac <tcp_input+0x49c>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	881b      	ldrh	r3, [r3, #0]
 800f1c4:	b29b      	uxth	r3, r3
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	d11b      	bne.n	800f202 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f1ca:	69fb      	ldr	r3, [r7, #28]
 800f1cc:	8ada      	ldrh	r2, [r3, #22]
 800f1ce:	4b37      	ldr	r3, [pc, #220]	@ (800f2ac <tcp_input+0x49c>)
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	885b      	ldrh	r3, [r3, #2]
 800f1d4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f1d6:	429a      	cmp	r2, r3
 800f1d8:	d113      	bne.n	800f202 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f1da:	69fb      	ldr	r3, [r7, #28]
 800f1dc:	685a      	ldr	r2, [r3, #4]
 800f1de:	4b34      	ldr	r3, [pc, #208]	@ (800f2b0 <tcp_input+0x4a0>)
 800f1e0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f1e2:	429a      	cmp	r2, r3
 800f1e4:	d10d      	bne.n	800f202 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f1e6:	69fb      	ldr	r3, [r7, #28]
 800f1e8:	681a      	ldr	r2, [r3, #0]
 800f1ea:	4b31      	ldr	r3, [pc, #196]	@ (800f2b0 <tcp_input+0x4a0>)
 800f1ec:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f1ee:	429a      	cmp	r2, r3
 800f1f0:	d107      	bne.n	800f202 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f1f2:	69f8      	ldr	r0, [r7, #28]
 800f1f4:	f000 fb56 	bl	800f8a4 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f1f8:	6878      	ldr	r0, [r7, #4]
 800f1fa:	f7fd fd01 	bl	800cc00 <pbuf_free>
        return;
 800f1fe:	e1fd      	b.n	800f5fc <tcp_input+0x7ec>
        continue;
 800f200:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f202:	69fb      	ldr	r3, [r7, #28]
 800f204:	68db      	ldr	r3, [r3, #12]
 800f206:	61fb      	str	r3, [r7, #28]
 800f208:	69fb      	ldr	r3, [r7, #28]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d1bc      	bne.n	800f188 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f20e:	2300      	movs	r3, #0
 800f210:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f212:	4b2f      	ldr	r3, [pc, #188]	@ (800f2d0 <tcp_input+0x4c0>)
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	617b      	str	r3, [r7, #20]
 800f218:	e02a      	b.n	800f270 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f21a:	697b      	ldr	r3, [r7, #20]
 800f21c:	7a1b      	ldrb	r3, [r3, #8]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d00c      	beq.n	800f23c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f222:	697b      	ldr	r3, [r7, #20]
 800f224:	7a1a      	ldrb	r2, [r3, #8]
 800f226:	4b22      	ldr	r3, [pc, #136]	@ (800f2b0 <tcp_input+0x4a0>)
 800f228:	685b      	ldr	r3, [r3, #4]
 800f22a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f22e:	3301      	adds	r3, #1
 800f230:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f232:	429a      	cmp	r2, r3
 800f234:	d002      	beq.n	800f23c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f236:	697b      	ldr	r3, [r7, #20]
 800f238:	61bb      	str	r3, [r7, #24]
        continue;
 800f23a:	e016      	b.n	800f26a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f23c:	697b      	ldr	r3, [r7, #20]
 800f23e:	8ada      	ldrh	r2, [r3, #22]
 800f240:	4b1a      	ldr	r3, [pc, #104]	@ (800f2ac <tcp_input+0x49c>)
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	885b      	ldrh	r3, [r3, #2]
 800f246:	b29b      	uxth	r3, r3
 800f248:	429a      	cmp	r2, r3
 800f24a:	d10c      	bne.n	800f266 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f24c:	697b      	ldr	r3, [r7, #20]
 800f24e:	681a      	ldr	r2, [r3, #0]
 800f250:	4b17      	ldr	r3, [pc, #92]	@ (800f2b0 <tcp_input+0x4a0>)
 800f252:	695b      	ldr	r3, [r3, #20]
 800f254:	429a      	cmp	r2, r3
 800f256:	d00f      	beq.n	800f278 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f258:	697b      	ldr	r3, [r7, #20]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d00d      	beq.n	800f27a <tcp_input+0x46a>
 800f25e:	697b      	ldr	r3, [r7, #20]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d009      	beq.n	800f27a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f266:	697b      	ldr	r3, [r7, #20]
 800f268:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f26a:	697b      	ldr	r3, [r7, #20]
 800f26c:	68db      	ldr	r3, [r3, #12]
 800f26e:	617b      	str	r3, [r7, #20]
 800f270:	697b      	ldr	r3, [r7, #20]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d1d1      	bne.n	800f21a <tcp_input+0x40a>
 800f276:	e000      	b.n	800f27a <tcp_input+0x46a>
            break;
 800f278:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f27a:	697b      	ldr	r3, [r7, #20]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d029      	beq.n	800f2d4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f280:	69bb      	ldr	r3, [r7, #24]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d00a      	beq.n	800f29c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f286:	697b      	ldr	r3, [r7, #20]
 800f288:	68da      	ldr	r2, [r3, #12]
 800f28a:	69bb      	ldr	r3, [r7, #24]
 800f28c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f28e:	4b10      	ldr	r3, [pc, #64]	@ (800f2d0 <tcp_input+0x4c0>)
 800f290:	681a      	ldr	r2, [r3, #0]
 800f292:	697b      	ldr	r3, [r7, #20]
 800f294:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f296:	4a0e      	ldr	r2, [pc, #56]	@ (800f2d0 <tcp_input+0x4c0>)
 800f298:	697b      	ldr	r3, [r7, #20]
 800f29a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f29c:	6978      	ldr	r0, [r7, #20]
 800f29e:	f000 fa03 	bl	800f6a8 <tcp_listen_input>
      }
      pbuf_free(p);
 800f2a2:	6878      	ldr	r0, [r7, #4]
 800f2a4:	f7fd fcac 	bl	800cc00 <pbuf_free>
      return;
 800f2a8:	e1a8      	b.n	800f5fc <tcp_input+0x7ec>
 800f2aa:	bf00      	nop
 800f2ac:	24007f24 	.word	0x24007f24
 800f2b0:	24004dec 	.word	0x24004dec
 800f2b4:	08019300 	.word	0x08019300
 800f2b8:	0801942c 	.word	0x0801942c
 800f2bc:	0801934c 	.word	0x0801934c
 800f2c0:	24007f08 	.word	0x24007f08
 800f2c4:	08019458 	.word	0x08019458
 800f2c8:	24007f0c 	.word	0x24007f0c
 800f2cc:	08019484 	.word	0x08019484
 800f2d0:	24007f04 	.word	0x24007f04
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f2d4:	69fb      	ldr	r3, [r7, #28]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	f000 8158 	beq.w	800f58c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f2dc:	4b95      	ldr	r3, [pc, #596]	@ (800f534 <tcp_input+0x724>)
 800f2de:	2200      	movs	r2, #0
 800f2e0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	891a      	ldrh	r2, [r3, #8]
 800f2e6:	4b93      	ldr	r3, [pc, #588]	@ (800f534 <tcp_input+0x724>)
 800f2e8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f2ea:	4a92      	ldr	r2, [pc, #584]	@ (800f534 <tcp_input+0x724>)
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f2f0:	4b91      	ldr	r3, [pc, #580]	@ (800f538 <tcp_input+0x728>)
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	4a8f      	ldr	r2, [pc, #572]	@ (800f534 <tcp_input+0x724>)
 800f2f6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f2f8:	4b90      	ldr	r3, [pc, #576]	@ (800f53c <tcp_input+0x72c>)
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f2fe:	4b90      	ldr	r3, [pc, #576]	@ (800f540 <tcp_input+0x730>)
 800f300:	2200      	movs	r2, #0
 800f302:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f304:	4b8f      	ldr	r3, [pc, #572]	@ (800f544 <tcp_input+0x734>)
 800f306:	2200      	movs	r2, #0
 800f308:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f30a:	4b8f      	ldr	r3, [pc, #572]	@ (800f548 <tcp_input+0x738>)
 800f30c:	781b      	ldrb	r3, [r3, #0]
 800f30e:	f003 0308 	and.w	r3, r3, #8
 800f312:	2b00      	cmp	r3, #0
 800f314:	d006      	beq.n	800f324 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	7b5b      	ldrb	r3, [r3, #13]
 800f31a:	f043 0301 	orr.w	r3, r3, #1
 800f31e:	b2da      	uxtb	r2, r3
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f324:	69fb      	ldr	r3, [r7, #28]
 800f326:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d017      	beq.n	800f35c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f32c:	69f8      	ldr	r0, [r7, #28]
 800f32e:	f7ff f85b 	bl	800e3e8 <tcp_process_refused_data>
 800f332:	4603      	mov	r3, r0
 800f334:	f113 0f0d 	cmn.w	r3, #13
 800f338:	d007      	beq.n	800f34a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f33a:	69fb      	ldr	r3, [r7, #28]
 800f33c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d00c      	beq.n	800f35c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f342:	4b82      	ldr	r3, [pc, #520]	@ (800f54c <tcp_input+0x73c>)
 800f344:	881b      	ldrh	r3, [r3, #0]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d008      	beq.n	800f35c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f34a:	69fb      	ldr	r3, [r7, #28]
 800f34c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f34e:	2b00      	cmp	r3, #0
 800f350:	f040 80e3 	bne.w	800f51a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f354:	69f8      	ldr	r0, [r7, #28]
 800f356:	f003 fdff 	bl	8012f58 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f35a:	e0de      	b.n	800f51a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800f35c:	4a7c      	ldr	r2, [pc, #496]	@ (800f550 <tcp_input+0x740>)
 800f35e:	69fb      	ldr	r3, [r7, #28]
 800f360:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f362:	69f8      	ldr	r0, [r7, #28]
 800f364:	f000 fb18 	bl	800f998 <tcp_process>
 800f368:	4603      	mov	r3, r0
 800f36a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f36c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f370:	f113 0f0d 	cmn.w	r3, #13
 800f374:	f000 80d3 	beq.w	800f51e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f378:	4b71      	ldr	r3, [pc, #452]	@ (800f540 <tcp_input+0x730>)
 800f37a:	781b      	ldrb	r3, [r3, #0]
 800f37c:	f003 0308 	and.w	r3, r3, #8
 800f380:	2b00      	cmp	r3, #0
 800f382:	d015      	beq.n	800f3b0 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f384:	69fb      	ldr	r3, [r7, #28]
 800f386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d008      	beq.n	800f3a0 <tcp_input+0x590>
 800f38e:	69fb      	ldr	r3, [r7, #28]
 800f390:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f394:	69fa      	ldr	r2, [r7, #28]
 800f396:	6912      	ldr	r2, [r2, #16]
 800f398:	f06f 010d 	mvn.w	r1, #13
 800f39c:	4610      	mov	r0, r2
 800f39e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f3a0:	69f9      	ldr	r1, [r7, #28]
 800f3a2:	486c      	ldr	r0, [pc, #432]	@ (800f554 <tcp_input+0x744>)
 800f3a4:	f7ff fbbc 	bl	800eb20 <tcp_pcb_remove>
        tcp_free(pcb);
 800f3a8:	69f8      	ldr	r0, [r7, #28]
 800f3aa:	f7fd fed5 	bl	800d158 <tcp_free>
 800f3ae:	e0da      	b.n	800f566 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f3b4:	4b63      	ldr	r3, [pc, #396]	@ (800f544 <tcp_input+0x734>)
 800f3b6:	881b      	ldrh	r3, [r3, #0]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d01d      	beq.n	800f3f8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f3bc:	4b61      	ldr	r3, [pc, #388]	@ (800f544 <tcp_input+0x734>)
 800f3be:	881b      	ldrh	r3, [r3, #0]
 800f3c0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f3c2:	69fb      	ldr	r3, [r7, #28]
 800f3c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d00a      	beq.n	800f3e2 <tcp_input+0x5d2>
 800f3cc:	69fb      	ldr	r3, [r7, #28]
 800f3ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f3d2:	69fa      	ldr	r2, [r7, #28]
 800f3d4:	6910      	ldr	r0, [r2, #16]
 800f3d6:	89fa      	ldrh	r2, [r7, #14]
 800f3d8:	69f9      	ldr	r1, [r7, #28]
 800f3da:	4798      	blx	r3
 800f3dc:	4603      	mov	r3, r0
 800f3de:	74fb      	strb	r3, [r7, #19]
 800f3e0:	e001      	b.n	800f3e6 <tcp_input+0x5d6>
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f3e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f3ea:	f113 0f0d 	cmn.w	r3, #13
 800f3ee:	f000 8098 	beq.w	800f522 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f3f2:	4b54      	ldr	r3, [pc, #336]	@ (800f544 <tcp_input+0x734>)
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f3f8:	69f8      	ldr	r0, [r7, #28]
 800f3fa:	f000 f915 	bl	800f628 <tcp_input_delayed_close>
 800f3fe:	4603      	mov	r3, r0
 800f400:	2b00      	cmp	r3, #0
 800f402:	f040 8090 	bne.w	800f526 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f406:	4b4d      	ldr	r3, [pc, #308]	@ (800f53c <tcp_input+0x72c>)
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d041      	beq.n	800f492 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f40e:	69fb      	ldr	r3, [r7, #28]
 800f410:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f412:	2b00      	cmp	r3, #0
 800f414:	d006      	beq.n	800f424 <tcp_input+0x614>
 800f416:	4b50      	ldr	r3, [pc, #320]	@ (800f558 <tcp_input+0x748>)
 800f418:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800f41c:	494f      	ldr	r1, [pc, #316]	@ (800f55c <tcp_input+0x74c>)
 800f41e:	4850      	ldr	r0, [pc, #320]	@ (800f560 <tcp_input+0x750>)
 800f420:	f007 f926 	bl	8016670 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f424:	69fb      	ldr	r3, [r7, #28]
 800f426:	8b5b      	ldrh	r3, [r3, #26]
 800f428:	f003 0310 	and.w	r3, r3, #16
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d008      	beq.n	800f442 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f430:	4b42      	ldr	r3, [pc, #264]	@ (800f53c <tcp_input+0x72c>)
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	4618      	mov	r0, r3
 800f436:	f7fd fbe3 	bl	800cc00 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f43a:	69f8      	ldr	r0, [r7, #28]
 800f43c:	f7fe f9d0 	bl	800d7e0 <tcp_abort>
            goto aborted;
 800f440:	e091      	b.n	800f566 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f442:	69fb      	ldr	r3, [r7, #28]
 800f444:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d00c      	beq.n	800f466 <tcp_input+0x656>
 800f44c:	69fb      	ldr	r3, [r7, #28]
 800f44e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f452:	69fb      	ldr	r3, [r7, #28]
 800f454:	6918      	ldr	r0, [r3, #16]
 800f456:	4b39      	ldr	r3, [pc, #228]	@ (800f53c <tcp_input+0x72c>)
 800f458:	681a      	ldr	r2, [r3, #0]
 800f45a:	2300      	movs	r3, #0
 800f45c:	69f9      	ldr	r1, [r7, #28]
 800f45e:	47a0      	blx	r4
 800f460:	4603      	mov	r3, r0
 800f462:	74fb      	strb	r3, [r7, #19]
 800f464:	e008      	b.n	800f478 <tcp_input+0x668>
 800f466:	4b35      	ldr	r3, [pc, #212]	@ (800f53c <tcp_input+0x72c>)
 800f468:	681a      	ldr	r2, [r3, #0]
 800f46a:	2300      	movs	r3, #0
 800f46c:	69f9      	ldr	r1, [r7, #28]
 800f46e:	2000      	movs	r0, #0
 800f470:	f7ff f890 	bl	800e594 <tcp_recv_null>
 800f474:	4603      	mov	r3, r0
 800f476:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f478:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f47c:	f113 0f0d 	cmn.w	r3, #13
 800f480:	d053      	beq.n	800f52a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f482:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d003      	beq.n	800f492 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f48a:	4b2c      	ldr	r3, [pc, #176]	@ (800f53c <tcp_input+0x72c>)
 800f48c:	681a      	ldr	r2, [r3, #0]
 800f48e:	69fb      	ldr	r3, [r7, #28]
 800f490:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f492:	4b2b      	ldr	r3, [pc, #172]	@ (800f540 <tcp_input+0x730>)
 800f494:	781b      	ldrb	r3, [r3, #0]
 800f496:	f003 0320 	and.w	r3, r3, #32
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d030      	beq.n	800f500 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800f49e:	69fb      	ldr	r3, [r7, #28]
 800f4a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d009      	beq.n	800f4ba <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f4a6:	69fb      	ldr	r3, [r7, #28]
 800f4a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f4aa:	7b5a      	ldrb	r2, [r3, #13]
 800f4ac:	69fb      	ldr	r3, [r7, #28]
 800f4ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f4b0:	f042 0220 	orr.w	r2, r2, #32
 800f4b4:	b2d2      	uxtb	r2, r2
 800f4b6:	735a      	strb	r2, [r3, #13]
 800f4b8:	e022      	b.n	800f500 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f4ba:	69fb      	ldr	r3, [r7, #28]
 800f4bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f4be:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800f4c2:	d005      	beq.n	800f4d0 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800f4c4:	69fb      	ldr	r3, [r7, #28]
 800f4c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f4c8:	3301      	adds	r3, #1
 800f4ca:	b29a      	uxth	r2, r3
 800f4cc:	69fb      	ldr	r3, [r7, #28]
 800f4ce:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f4d0:	69fb      	ldr	r3, [r7, #28]
 800f4d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d00b      	beq.n	800f4f2 <tcp_input+0x6e2>
 800f4da:	69fb      	ldr	r3, [r7, #28]
 800f4dc:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f4e0:	69fb      	ldr	r3, [r7, #28]
 800f4e2:	6918      	ldr	r0, [r3, #16]
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	69f9      	ldr	r1, [r7, #28]
 800f4ea:	47a0      	blx	r4
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	74fb      	strb	r3, [r7, #19]
 800f4f0:	e001      	b.n	800f4f6 <tcp_input+0x6e6>
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f4f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f4fa:	f113 0f0d 	cmn.w	r3, #13
 800f4fe:	d016      	beq.n	800f52e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f500:	4b13      	ldr	r3, [pc, #76]	@ (800f550 <tcp_input+0x740>)
 800f502:	2200      	movs	r2, #0
 800f504:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f506:	69f8      	ldr	r0, [r7, #28]
 800f508:	f000 f88e 	bl	800f628 <tcp_input_delayed_close>
 800f50c:	4603      	mov	r3, r0
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d128      	bne.n	800f564 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f512:	69f8      	ldr	r0, [r7, #28]
 800f514:	f002 ff1a 	bl	801234c <tcp_output>
 800f518:	e025      	b.n	800f566 <tcp_input+0x756>
        goto aborted;
 800f51a:	bf00      	nop
 800f51c:	e023      	b.n	800f566 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f51e:	bf00      	nop
 800f520:	e021      	b.n	800f566 <tcp_input+0x756>
              goto aborted;
 800f522:	bf00      	nop
 800f524:	e01f      	b.n	800f566 <tcp_input+0x756>
          goto aborted;
 800f526:	bf00      	nop
 800f528:	e01d      	b.n	800f566 <tcp_input+0x756>
            goto aborted;
 800f52a:	bf00      	nop
 800f52c:	e01b      	b.n	800f566 <tcp_input+0x756>
              goto aborted;
 800f52e:	bf00      	nop
 800f530:	e019      	b.n	800f566 <tcp_input+0x756>
 800f532:	bf00      	nop
 800f534:	24007f14 	.word	0x24007f14
 800f538:	24007f24 	.word	0x24007f24
 800f53c:	24007f44 	.word	0x24007f44
 800f540:	24007f41 	.word	0x24007f41
 800f544:	24007f3c 	.word	0x24007f3c
 800f548:	24007f40 	.word	0x24007f40
 800f54c:	24007f3e 	.word	0x24007f3e
 800f550:	24007f48 	.word	0x24007f48
 800f554:	24007f08 	.word	0x24007f08
 800f558:	08019300 	.word	0x08019300
 800f55c:	080194b4 	.word	0x080194b4
 800f560:	0801934c 	.word	0x0801934c
          goto aborted;
 800f564:	bf00      	nop
    tcp_input_pcb = NULL;
 800f566:	4b27      	ldr	r3, [pc, #156]	@ (800f604 <tcp_input+0x7f4>)
 800f568:	2200      	movs	r2, #0
 800f56a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f56c:	4b26      	ldr	r3, [pc, #152]	@ (800f608 <tcp_input+0x7f8>)
 800f56e:	2200      	movs	r2, #0
 800f570:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f572:	4b26      	ldr	r3, [pc, #152]	@ (800f60c <tcp_input+0x7fc>)
 800f574:	685b      	ldr	r3, [r3, #4]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d03f      	beq.n	800f5fa <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800f57a:	4b24      	ldr	r3, [pc, #144]	@ (800f60c <tcp_input+0x7fc>)
 800f57c:	685b      	ldr	r3, [r3, #4]
 800f57e:	4618      	mov	r0, r3
 800f580:	f7fd fb3e 	bl	800cc00 <pbuf_free>
      inseg.p = NULL;
 800f584:	4b21      	ldr	r3, [pc, #132]	@ (800f60c <tcp_input+0x7fc>)
 800f586:	2200      	movs	r2, #0
 800f588:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f58a:	e036      	b.n	800f5fa <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f58c:	4b20      	ldr	r3, [pc, #128]	@ (800f610 <tcp_input+0x800>)
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	899b      	ldrh	r3, [r3, #12]
 800f592:	b29b      	uxth	r3, r3
 800f594:	4618      	mov	r0, r3
 800f596:	f7fb fe89 	bl	800b2ac <lwip_htons>
 800f59a:	4603      	mov	r3, r0
 800f59c:	b2db      	uxtb	r3, r3
 800f59e:	f003 0304 	and.w	r3, r3, #4
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d118      	bne.n	800f5d8 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f5a6:	4b1b      	ldr	r3, [pc, #108]	@ (800f614 <tcp_input+0x804>)
 800f5a8:	6819      	ldr	r1, [r3, #0]
 800f5aa:	4b1b      	ldr	r3, [pc, #108]	@ (800f618 <tcp_input+0x808>)
 800f5ac:	881b      	ldrh	r3, [r3, #0]
 800f5ae:	461a      	mov	r2, r3
 800f5b0:	4b1a      	ldr	r3, [pc, #104]	@ (800f61c <tcp_input+0x80c>)
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f5b6:	4b16      	ldr	r3, [pc, #88]	@ (800f610 <tcp_input+0x800>)
 800f5b8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f5ba:	885b      	ldrh	r3, [r3, #2]
 800f5bc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f5be:	4a14      	ldr	r2, [pc, #80]	@ (800f610 <tcp_input+0x800>)
 800f5c0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f5c2:	8812      	ldrh	r2, [r2, #0]
 800f5c4:	b292      	uxth	r2, r2
 800f5c6:	9202      	str	r2, [sp, #8]
 800f5c8:	9301      	str	r3, [sp, #4]
 800f5ca:	4b15      	ldr	r3, [pc, #84]	@ (800f620 <tcp_input+0x810>)
 800f5cc:	9300      	str	r3, [sp, #0]
 800f5ce:	4b15      	ldr	r3, [pc, #84]	@ (800f624 <tcp_input+0x814>)
 800f5d0:	4602      	mov	r2, r0
 800f5d2:	2000      	movs	r0, #0
 800f5d4:	f003 fc6e 	bl	8012eb4 <tcp_rst>
    pbuf_free(p);
 800f5d8:	6878      	ldr	r0, [r7, #4]
 800f5da:	f7fd fb11 	bl	800cc00 <pbuf_free>
  return;
 800f5de:	e00c      	b.n	800f5fa <tcp_input+0x7ea>
    goto dropped;
 800f5e0:	bf00      	nop
 800f5e2:	e006      	b.n	800f5f2 <tcp_input+0x7e2>
    goto dropped;
 800f5e4:	bf00      	nop
 800f5e6:	e004      	b.n	800f5f2 <tcp_input+0x7e2>
    goto dropped;
 800f5e8:	bf00      	nop
 800f5ea:	e002      	b.n	800f5f2 <tcp_input+0x7e2>
      goto dropped;
 800f5ec:	bf00      	nop
 800f5ee:	e000      	b.n	800f5f2 <tcp_input+0x7e2>
      goto dropped;
 800f5f0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f5f2:	6878      	ldr	r0, [r7, #4]
 800f5f4:	f7fd fb04 	bl	800cc00 <pbuf_free>
 800f5f8:	e000      	b.n	800f5fc <tcp_input+0x7ec>
  return;
 800f5fa:	bf00      	nop
}
 800f5fc:	3724      	adds	r7, #36	@ 0x24
 800f5fe:	46bd      	mov	sp, r7
 800f600:	bd90      	pop	{r4, r7, pc}
 800f602:	bf00      	nop
 800f604:	24007f48 	.word	0x24007f48
 800f608:	24007f44 	.word	0x24007f44
 800f60c:	24007f14 	.word	0x24007f14
 800f610:	24007f24 	.word	0x24007f24
 800f614:	24007f38 	.word	0x24007f38
 800f618:	24007f3e 	.word	0x24007f3e
 800f61c:	24007f34 	.word	0x24007f34
 800f620:	24004dfc 	.word	0x24004dfc
 800f624:	24004e00 	.word	0x24004e00

0800f628 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b082      	sub	sp, #8
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d106      	bne.n	800f644 <tcp_input_delayed_close+0x1c>
 800f636:	4b17      	ldr	r3, [pc, #92]	@ (800f694 <tcp_input_delayed_close+0x6c>)
 800f638:	f240 225a 	movw	r2, #602	@ 0x25a
 800f63c:	4916      	ldr	r1, [pc, #88]	@ (800f698 <tcp_input_delayed_close+0x70>)
 800f63e:	4817      	ldr	r0, [pc, #92]	@ (800f69c <tcp_input_delayed_close+0x74>)
 800f640:	f007 f816 	bl	8016670 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800f644:	4b16      	ldr	r3, [pc, #88]	@ (800f6a0 <tcp_input_delayed_close+0x78>)
 800f646:	781b      	ldrb	r3, [r3, #0]
 800f648:	f003 0310 	and.w	r3, r3, #16
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d01c      	beq.n	800f68a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	8b5b      	ldrh	r3, [r3, #26]
 800f654:	f003 0310 	and.w	r3, r3, #16
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d10d      	bne.n	800f678 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f662:	2b00      	cmp	r3, #0
 800f664:	d008      	beq.n	800f678 <tcp_input_delayed_close+0x50>
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f66c:	687a      	ldr	r2, [r7, #4]
 800f66e:	6912      	ldr	r2, [r2, #16]
 800f670:	f06f 010e 	mvn.w	r1, #14
 800f674:	4610      	mov	r0, r2
 800f676:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f678:	6879      	ldr	r1, [r7, #4]
 800f67a:	480a      	ldr	r0, [pc, #40]	@ (800f6a4 <tcp_input_delayed_close+0x7c>)
 800f67c:	f7ff fa50 	bl	800eb20 <tcp_pcb_remove>
    tcp_free(pcb);
 800f680:	6878      	ldr	r0, [r7, #4]
 800f682:	f7fd fd69 	bl	800d158 <tcp_free>
    return 1;
 800f686:	2301      	movs	r3, #1
 800f688:	e000      	b.n	800f68c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800f68a:	2300      	movs	r3, #0
}
 800f68c:	4618      	mov	r0, r3
 800f68e:	3708      	adds	r7, #8
 800f690:	46bd      	mov	sp, r7
 800f692:	bd80      	pop	{r7, pc}
 800f694:	08019300 	.word	0x08019300
 800f698:	080194d0 	.word	0x080194d0
 800f69c:	0801934c 	.word	0x0801934c
 800f6a0:	24007f41 	.word	0x24007f41
 800f6a4:	24007f08 	.word	0x24007f08

0800f6a8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f6a8:	b590      	push	{r4, r7, lr}
 800f6aa:	b08b      	sub	sp, #44	@ 0x2c
 800f6ac:	af04      	add	r7, sp, #16
 800f6ae:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f6b0:	4b6f      	ldr	r3, [pc, #444]	@ (800f870 <tcp_listen_input+0x1c8>)
 800f6b2:	781b      	ldrb	r3, [r3, #0]
 800f6b4:	f003 0304 	and.w	r3, r3, #4
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	f040 80d2 	bne.w	800f862 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d106      	bne.n	800f6d2 <tcp_listen_input+0x2a>
 800f6c4:	4b6b      	ldr	r3, [pc, #428]	@ (800f874 <tcp_listen_input+0x1cc>)
 800f6c6:	f240 2281 	movw	r2, #641	@ 0x281
 800f6ca:	496b      	ldr	r1, [pc, #428]	@ (800f878 <tcp_listen_input+0x1d0>)
 800f6cc:	486b      	ldr	r0, [pc, #428]	@ (800f87c <tcp_listen_input+0x1d4>)
 800f6ce:	f006 ffcf 	bl	8016670 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f6d2:	4b67      	ldr	r3, [pc, #412]	@ (800f870 <tcp_listen_input+0x1c8>)
 800f6d4:	781b      	ldrb	r3, [r3, #0]
 800f6d6:	f003 0310 	and.w	r3, r3, #16
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d019      	beq.n	800f712 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f6de:	4b68      	ldr	r3, [pc, #416]	@ (800f880 <tcp_listen_input+0x1d8>)
 800f6e0:	6819      	ldr	r1, [r3, #0]
 800f6e2:	4b68      	ldr	r3, [pc, #416]	@ (800f884 <tcp_listen_input+0x1dc>)
 800f6e4:	881b      	ldrh	r3, [r3, #0]
 800f6e6:	461a      	mov	r2, r3
 800f6e8:	4b67      	ldr	r3, [pc, #412]	@ (800f888 <tcp_listen_input+0x1e0>)
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f6ee:	4b67      	ldr	r3, [pc, #412]	@ (800f88c <tcp_listen_input+0x1e4>)
 800f6f0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f6f2:	885b      	ldrh	r3, [r3, #2]
 800f6f4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f6f6:	4a65      	ldr	r2, [pc, #404]	@ (800f88c <tcp_listen_input+0x1e4>)
 800f6f8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f6fa:	8812      	ldrh	r2, [r2, #0]
 800f6fc:	b292      	uxth	r2, r2
 800f6fe:	9202      	str	r2, [sp, #8]
 800f700:	9301      	str	r3, [sp, #4]
 800f702:	4b63      	ldr	r3, [pc, #396]	@ (800f890 <tcp_listen_input+0x1e8>)
 800f704:	9300      	str	r3, [sp, #0]
 800f706:	4b63      	ldr	r3, [pc, #396]	@ (800f894 <tcp_listen_input+0x1ec>)
 800f708:	4602      	mov	r2, r0
 800f70a:	6878      	ldr	r0, [r7, #4]
 800f70c:	f003 fbd2 	bl	8012eb4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f710:	e0a9      	b.n	800f866 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800f712:	4b57      	ldr	r3, [pc, #348]	@ (800f870 <tcp_listen_input+0x1c8>)
 800f714:	781b      	ldrb	r3, [r3, #0]
 800f716:	f003 0302 	and.w	r3, r3, #2
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	f000 80a3 	beq.w	800f866 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	7d5b      	ldrb	r3, [r3, #21]
 800f724:	4618      	mov	r0, r3
 800f726:	f7ff f859 	bl	800e7dc <tcp_alloc>
 800f72a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f72c:	697b      	ldr	r3, [r7, #20]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d111      	bne.n	800f756 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	699b      	ldr	r3, [r3, #24]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d00a      	beq.n	800f750 <tcp_listen_input+0xa8>
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	699b      	ldr	r3, [r3, #24]
 800f73e:	687a      	ldr	r2, [r7, #4]
 800f740:	6910      	ldr	r0, [r2, #16]
 800f742:	f04f 32ff 	mov.w	r2, #4294967295
 800f746:	2100      	movs	r1, #0
 800f748:	4798      	blx	r3
 800f74a:	4603      	mov	r3, r0
 800f74c:	73bb      	strb	r3, [r7, #14]
      return;
 800f74e:	e08b      	b.n	800f868 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f750:	23f0      	movs	r3, #240	@ 0xf0
 800f752:	73bb      	strb	r3, [r7, #14]
      return;
 800f754:	e088      	b.n	800f868 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f756:	4b50      	ldr	r3, [pc, #320]	@ (800f898 <tcp_listen_input+0x1f0>)
 800f758:	695a      	ldr	r2, [r3, #20]
 800f75a:	697b      	ldr	r3, [r7, #20]
 800f75c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f75e:	4b4e      	ldr	r3, [pc, #312]	@ (800f898 <tcp_listen_input+0x1f0>)
 800f760:	691a      	ldr	r2, [r3, #16]
 800f762:	697b      	ldr	r3, [r7, #20]
 800f764:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	8ada      	ldrh	r2, [r3, #22]
 800f76a:	697b      	ldr	r3, [r7, #20]
 800f76c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f76e:	4b47      	ldr	r3, [pc, #284]	@ (800f88c <tcp_listen_input+0x1e4>)
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	881b      	ldrh	r3, [r3, #0]
 800f774:	b29a      	uxth	r2, r3
 800f776:	697b      	ldr	r3, [r7, #20]
 800f778:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f77a:	697b      	ldr	r3, [r7, #20]
 800f77c:	2203      	movs	r2, #3
 800f77e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f780:	4b41      	ldr	r3, [pc, #260]	@ (800f888 <tcp_listen_input+0x1e0>)
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	1c5a      	adds	r2, r3, #1
 800f786:	697b      	ldr	r3, [r7, #20]
 800f788:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f78a:	697b      	ldr	r3, [r7, #20]
 800f78c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f78e:	697b      	ldr	r3, [r7, #20]
 800f790:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800f792:	6978      	ldr	r0, [r7, #20]
 800f794:	f7ff fa58 	bl	800ec48 <tcp_next_iss>
 800f798:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f79a:	697b      	ldr	r3, [r7, #20]
 800f79c:	693a      	ldr	r2, [r7, #16]
 800f79e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800f7a0:	697b      	ldr	r3, [r7, #20]
 800f7a2:	693a      	ldr	r2, [r7, #16]
 800f7a4:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800f7a6:	697b      	ldr	r3, [r7, #20]
 800f7a8:	693a      	ldr	r2, [r7, #16]
 800f7aa:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800f7ac:	697b      	ldr	r3, [r7, #20]
 800f7ae:	693a      	ldr	r2, [r7, #16]
 800f7b0:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f7b2:	4b35      	ldr	r3, [pc, #212]	@ (800f888 <tcp_listen_input+0x1e0>)
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	1e5a      	subs	r2, r3, #1
 800f7b8:	697b      	ldr	r3, [r7, #20]
 800f7ba:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	691a      	ldr	r2, [r3, #16]
 800f7c0:	697b      	ldr	r3, [r7, #20]
 800f7c2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f7c4:	697b      	ldr	r3, [r7, #20]
 800f7c6:	687a      	ldr	r2, [r7, #4]
 800f7c8:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	7a5b      	ldrb	r3, [r3, #9]
 800f7ce:	f003 030c 	and.w	r3, r3, #12
 800f7d2:	b2da      	uxtb	r2, r3
 800f7d4:	697b      	ldr	r3, [r7, #20]
 800f7d6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	7a1a      	ldrb	r2, [r3, #8]
 800f7dc:	697b      	ldr	r3, [r7, #20]
 800f7de:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f7e0:	4b2e      	ldr	r3, [pc, #184]	@ (800f89c <tcp_listen_input+0x1f4>)
 800f7e2:	681a      	ldr	r2, [r3, #0]
 800f7e4:	697b      	ldr	r3, [r7, #20]
 800f7e6:	60da      	str	r2, [r3, #12]
 800f7e8:	4a2c      	ldr	r2, [pc, #176]	@ (800f89c <tcp_listen_input+0x1f4>)
 800f7ea:	697b      	ldr	r3, [r7, #20]
 800f7ec:	6013      	str	r3, [r2, #0]
 800f7ee:	f003 fd23 	bl	8013238 <tcp_timer_needed>
 800f7f2:	4b2b      	ldr	r3, [pc, #172]	@ (800f8a0 <tcp_listen_input+0x1f8>)
 800f7f4:	2201      	movs	r2, #1
 800f7f6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f7f8:	6978      	ldr	r0, [r7, #20]
 800f7fa:	f001 fd8b 	bl	8011314 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f7fe:	4b23      	ldr	r3, [pc, #140]	@ (800f88c <tcp_listen_input+0x1e4>)
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	89db      	ldrh	r3, [r3, #14]
 800f804:	b29a      	uxth	r2, r3
 800f806:	697b      	ldr	r3, [r7, #20]
 800f808:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f80c:	697b      	ldr	r3, [r7, #20]
 800f80e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f812:	697b      	ldr	r3, [r7, #20]
 800f814:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f818:	697b      	ldr	r3, [r7, #20]
 800f81a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800f81c:	697b      	ldr	r3, [r7, #20]
 800f81e:	3304      	adds	r3, #4
 800f820:	4618      	mov	r0, r3
 800f822:	f005 fa83 	bl	8014d2c <ip4_route>
 800f826:	4601      	mov	r1, r0
 800f828:	697b      	ldr	r3, [r7, #20]
 800f82a:	3304      	adds	r3, #4
 800f82c:	461a      	mov	r2, r3
 800f82e:	4620      	mov	r0, r4
 800f830:	f7ff fa30 	bl	800ec94 <tcp_eff_send_mss_netif>
 800f834:	4603      	mov	r3, r0
 800f836:	461a      	mov	r2, r3
 800f838:	697b      	ldr	r3, [r7, #20]
 800f83a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f83c:	2112      	movs	r1, #18
 800f83e:	6978      	ldr	r0, [r7, #20]
 800f840:	f002 fc96 	bl	8012170 <tcp_enqueue_flags>
 800f844:	4603      	mov	r3, r0
 800f846:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800f848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d004      	beq.n	800f85a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800f850:	2100      	movs	r1, #0
 800f852:	6978      	ldr	r0, [r7, #20]
 800f854:	f7fd ff06 	bl	800d664 <tcp_abandon>
      return;
 800f858:	e006      	b.n	800f868 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800f85a:	6978      	ldr	r0, [r7, #20]
 800f85c:	f002 fd76 	bl	801234c <tcp_output>
  return;
 800f860:	e001      	b.n	800f866 <tcp_listen_input+0x1be>
    return;
 800f862:	bf00      	nop
 800f864:	e000      	b.n	800f868 <tcp_listen_input+0x1c0>
  return;
 800f866:	bf00      	nop
}
 800f868:	371c      	adds	r7, #28
 800f86a:	46bd      	mov	sp, r7
 800f86c:	bd90      	pop	{r4, r7, pc}
 800f86e:	bf00      	nop
 800f870:	24007f40 	.word	0x24007f40
 800f874:	08019300 	.word	0x08019300
 800f878:	080194f8 	.word	0x080194f8
 800f87c:	0801934c 	.word	0x0801934c
 800f880:	24007f38 	.word	0x24007f38
 800f884:	24007f3e 	.word	0x24007f3e
 800f888:	24007f34 	.word	0x24007f34
 800f88c:	24007f24 	.word	0x24007f24
 800f890:	24004dfc 	.word	0x24004dfc
 800f894:	24004e00 	.word	0x24004e00
 800f898:	24004dec 	.word	0x24004dec
 800f89c:	24007f08 	.word	0x24007f08
 800f8a0:	24007f10 	.word	0x24007f10

0800f8a4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b086      	sub	sp, #24
 800f8a8:	af04      	add	r7, sp, #16
 800f8aa:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800f8ac:	4b2f      	ldr	r3, [pc, #188]	@ (800f96c <tcp_timewait_input+0xc8>)
 800f8ae:	781b      	ldrb	r3, [r3, #0]
 800f8b0:	f003 0304 	and.w	r3, r3, #4
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d153      	bne.n	800f960 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d106      	bne.n	800f8cc <tcp_timewait_input+0x28>
 800f8be:	4b2c      	ldr	r3, [pc, #176]	@ (800f970 <tcp_timewait_input+0xcc>)
 800f8c0:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800f8c4:	492b      	ldr	r1, [pc, #172]	@ (800f974 <tcp_timewait_input+0xd0>)
 800f8c6:	482c      	ldr	r0, [pc, #176]	@ (800f978 <tcp_timewait_input+0xd4>)
 800f8c8:	f006 fed2 	bl	8016670 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800f8cc:	4b27      	ldr	r3, [pc, #156]	@ (800f96c <tcp_timewait_input+0xc8>)
 800f8ce:	781b      	ldrb	r3, [r3, #0]
 800f8d0:	f003 0302 	and.w	r3, r3, #2
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d02a      	beq.n	800f92e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f8d8:	4b28      	ldr	r3, [pc, #160]	@ (800f97c <tcp_timewait_input+0xd8>)
 800f8da:	681a      	ldr	r2, [r3, #0]
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8e0:	1ad3      	subs	r3, r2, r3
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	db2d      	blt.n	800f942 <tcp_timewait_input+0x9e>
 800f8e6:	4b25      	ldr	r3, [pc, #148]	@ (800f97c <tcp_timewait_input+0xd8>)
 800f8e8:	681a      	ldr	r2, [r3, #0]
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8ee:	6879      	ldr	r1, [r7, #4]
 800f8f0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f8f2:	440b      	add	r3, r1
 800f8f4:	1ad3      	subs	r3, r2, r3
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	dc23      	bgt.n	800f942 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f8fa:	4b21      	ldr	r3, [pc, #132]	@ (800f980 <tcp_timewait_input+0xdc>)
 800f8fc:	6819      	ldr	r1, [r3, #0]
 800f8fe:	4b21      	ldr	r3, [pc, #132]	@ (800f984 <tcp_timewait_input+0xe0>)
 800f900:	881b      	ldrh	r3, [r3, #0]
 800f902:	461a      	mov	r2, r3
 800f904:	4b1d      	ldr	r3, [pc, #116]	@ (800f97c <tcp_timewait_input+0xd8>)
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f90a:	4b1f      	ldr	r3, [pc, #124]	@ (800f988 <tcp_timewait_input+0xe4>)
 800f90c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f90e:	885b      	ldrh	r3, [r3, #2]
 800f910:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f912:	4a1d      	ldr	r2, [pc, #116]	@ (800f988 <tcp_timewait_input+0xe4>)
 800f914:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f916:	8812      	ldrh	r2, [r2, #0]
 800f918:	b292      	uxth	r2, r2
 800f91a:	9202      	str	r2, [sp, #8]
 800f91c:	9301      	str	r3, [sp, #4]
 800f91e:	4b1b      	ldr	r3, [pc, #108]	@ (800f98c <tcp_timewait_input+0xe8>)
 800f920:	9300      	str	r3, [sp, #0]
 800f922:	4b1b      	ldr	r3, [pc, #108]	@ (800f990 <tcp_timewait_input+0xec>)
 800f924:	4602      	mov	r2, r0
 800f926:	6878      	ldr	r0, [r7, #4]
 800f928:	f003 fac4 	bl	8012eb4 <tcp_rst>
      return;
 800f92c:	e01b      	b.n	800f966 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800f92e:	4b0f      	ldr	r3, [pc, #60]	@ (800f96c <tcp_timewait_input+0xc8>)
 800f930:	781b      	ldrb	r3, [r3, #0]
 800f932:	f003 0301 	and.w	r3, r3, #1
 800f936:	2b00      	cmp	r3, #0
 800f938:	d003      	beq.n	800f942 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f93a:	4b16      	ldr	r3, [pc, #88]	@ (800f994 <tcp_timewait_input+0xf0>)
 800f93c:	681a      	ldr	r2, [r3, #0]
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f942:	4b10      	ldr	r3, [pc, #64]	@ (800f984 <tcp_timewait_input+0xe0>)
 800f944:	881b      	ldrh	r3, [r3, #0]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d00c      	beq.n	800f964 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	8b5b      	ldrh	r3, [r3, #26]
 800f94e:	f043 0302 	orr.w	r3, r3, #2
 800f952:	b29a      	uxth	r2, r3
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f958:	6878      	ldr	r0, [r7, #4]
 800f95a:	f002 fcf7 	bl	801234c <tcp_output>
  }
  return;
 800f95e:	e001      	b.n	800f964 <tcp_timewait_input+0xc0>
    return;
 800f960:	bf00      	nop
 800f962:	e000      	b.n	800f966 <tcp_timewait_input+0xc2>
  return;
 800f964:	bf00      	nop
}
 800f966:	3708      	adds	r7, #8
 800f968:	46bd      	mov	sp, r7
 800f96a:	bd80      	pop	{r7, pc}
 800f96c:	24007f40 	.word	0x24007f40
 800f970:	08019300 	.word	0x08019300
 800f974:	08019518 	.word	0x08019518
 800f978:	0801934c 	.word	0x0801934c
 800f97c:	24007f34 	.word	0x24007f34
 800f980:	24007f38 	.word	0x24007f38
 800f984:	24007f3e 	.word	0x24007f3e
 800f988:	24007f24 	.word	0x24007f24
 800f98c:	24004dfc 	.word	0x24004dfc
 800f990:	24004e00 	.word	0x24004e00
 800f994:	24007efc 	.word	0x24007efc

0800f998 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800f998:	b590      	push	{r4, r7, lr}
 800f99a:	b08d      	sub	sp, #52	@ 0x34
 800f99c:	af04      	add	r7, sp, #16
 800f99e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d106      	bne.n	800f9bc <tcp_process+0x24>
 800f9ae:	4b9d      	ldr	r3, [pc, #628]	@ (800fc24 <tcp_process+0x28c>)
 800f9b0:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800f9b4:	499c      	ldr	r1, [pc, #624]	@ (800fc28 <tcp_process+0x290>)
 800f9b6:	489d      	ldr	r0, [pc, #628]	@ (800fc2c <tcp_process+0x294>)
 800f9b8:	f006 fe5a 	bl	8016670 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800f9bc:	4b9c      	ldr	r3, [pc, #624]	@ (800fc30 <tcp_process+0x298>)
 800f9be:	781b      	ldrb	r3, [r3, #0]
 800f9c0:	f003 0304 	and.w	r3, r3, #4
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d04e      	beq.n	800fa66 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	7d1b      	ldrb	r3, [r3, #20]
 800f9cc:	2b02      	cmp	r3, #2
 800f9ce:	d108      	bne.n	800f9e2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f9d4:	4b97      	ldr	r3, [pc, #604]	@ (800fc34 <tcp_process+0x29c>)
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	429a      	cmp	r2, r3
 800f9da:	d123      	bne.n	800fa24 <tcp_process+0x8c>
        acceptable = 1;
 800f9dc:	2301      	movs	r3, #1
 800f9de:	76fb      	strb	r3, [r7, #27]
 800f9e0:	e020      	b.n	800fa24 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f9e6:	4b94      	ldr	r3, [pc, #592]	@ (800fc38 <tcp_process+0x2a0>)
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	429a      	cmp	r2, r3
 800f9ec:	d102      	bne.n	800f9f4 <tcp_process+0x5c>
        acceptable = 1;
 800f9ee:	2301      	movs	r3, #1
 800f9f0:	76fb      	strb	r3, [r7, #27]
 800f9f2:	e017      	b.n	800fa24 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f9f4:	4b90      	ldr	r3, [pc, #576]	@ (800fc38 <tcp_process+0x2a0>)
 800f9f6:	681a      	ldr	r2, [r3, #0]
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9fc:	1ad3      	subs	r3, r2, r3
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	db10      	blt.n	800fa24 <tcp_process+0x8c>
 800fa02:	4b8d      	ldr	r3, [pc, #564]	@ (800fc38 <tcp_process+0x2a0>)
 800fa04:	681a      	ldr	r2, [r3, #0]
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa0a:	6879      	ldr	r1, [r7, #4]
 800fa0c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fa0e:	440b      	add	r3, r1
 800fa10:	1ad3      	subs	r3, r2, r3
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	dc06      	bgt.n	800fa24 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	8b5b      	ldrh	r3, [r3, #26]
 800fa1a:	f043 0302 	orr.w	r3, r3, #2
 800fa1e:	b29a      	uxth	r2, r3
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800fa24:	7efb      	ldrb	r3, [r7, #27]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d01b      	beq.n	800fa62 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	7d1b      	ldrb	r3, [r3, #20]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d106      	bne.n	800fa40 <tcp_process+0xa8>
 800fa32:	4b7c      	ldr	r3, [pc, #496]	@ (800fc24 <tcp_process+0x28c>)
 800fa34:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800fa38:	4980      	ldr	r1, [pc, #512]	@ (800fc3c <tcp_process+0x2a4>)
 800fa3a:	487c      	ldr	r0, [pc, #496]	@ (800fc2c <tcp_process+0x294>)
 800fa3c:	f006 fe18 	bl	8016670 <iprintf>
      recv_flags |= TF_RESET;
 800fa40:	4b7f      	ldr	r3, [pc, #508]	@ (800fc40 <tcp_process+0x2a8>)
 800fa42:	781b      	ldrb	r3, [r3, #0]
 800fa44:	f043 0308 	orr.w	r3, r3, #8
 800fa48:	b2da      	uxtb	r2, r3
 800fa4a:	4b7d      	ldr	r3, [pc, #500]	@ (800fc40 <tcp_process+0x2a8>)
 800fa4c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	8b5b      	ldrh	r3, [r3, #26]
 800fa52:	f023 0301 	bic.w	r3, r3, #1
 800fa56:	b29a      	uxth	r2, r3
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800fa5c:	f06f 030d 	mvn.w	r3, #13
 800fa60:	e37a      	b.n	8010158 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800fa62:	2300      	movs	r3, #0
 800fa64:	e378      	b.n	8010158 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800fa66:	4b72      	ldr	r3, [pc, #456]	@ (800fc30 <tcp_process+0x298>)
 800fa68:	781b      	ldrb	r3, [r3, #0]
 800fa6a:	f003 0302 	and.w	r3, r3, #2
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d010      	beq.n	800fa94 <tcp_process+0xfc>
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	7d1b      	ldrb	r3, [r3, #20]
 800fa76:	2b02      	cmp	r3, #2
 800fa78:	d00c      	beq.n	800fa94 <tcp_process+0xfc>
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	7d1b      	ldrb	r3, [r3, #20]
 800fa7e:	2b03      	cmp	r3, #3
 800fa80:	d008      	beq.n	800fa94 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	8b5b      	ldrh	r3, [r3, #26]
 800fa86:	f043 0302 	orr.w	r3, r3, #2
 800fa8a:	b29a      	uxth	r2, r3
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800fa90:	2300      	movs	r3, #0
 800fa92:	e361      	b.n	8010158 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	8b5b      	ldrh	r3, [r3, #26]
 800fa98:	f003 0310 	and.w	r3, r3, #16
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d103      	bne.n	800faa8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800faa0:	4b68      	ldr	r3, [pc, #416]	@ (800fc44 <tcp_process+0x2ac>)
 800faa2:	681a      	ldr	r2, [r3, #0]
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	2200      	movs	r2, #0
 800faac:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	2200      	movs	r2, #0
 800fab4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800fab8:	6878      	ldr	r0, [r7, #4]
 800faba:	f001 fc2b 	bl	8011314 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	7d1b      	ldrb	r3, [r3, #20]
 800fac2:	3b02      	subs	r3, #2
 800fac4:	2b07      	cmp	r3, #7
 800fac6:	f200 8337 	bhi.w	8010138 <tcp_process+0x7a0>
 800faca:	a201      	add	r2, pc, #4	@ (adr r2, 800fad0 <tcp_process+0x138>)
 800facc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fad0:	0800faf1 	.word	0x0800faf1
 800fad4:	0800fd21 	.word	0x0800fd21
 800fad8:	0800fe99 	.word	0x0800fe99
 800fadc:	0800fec3 	.word	0x0800fec3
 800fae0:	0800ffe7 	.word	0x0800ffe7
 800fae4:	0800fe99 	.word	0x0800fe99
 800fae8:	08010073 	.word	0x08010073
 800faec:	08010103 	.word	0x08010103
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800faf0:	4b4f      	ldr	r3, [pc, #316]	@ (800fc30 <tcp_process+0x298>)
 800faf2:	781b      	ldrb	r3, [r3, #0]
 800faf4:	f003 0310 	and.w	r3, r3, #16
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	f000 80e4 	beq.w	800fcc6 <tcp_process+0x32e>
 800fafe:	4b4c      	ldr	r3, [pc, #304]	@ (800fc30 <tcp_process+0x298>)
 800fb00:	781b      	ldrb	r3, [r3, #0]
 800fb02:	f003 0302 	and.w	r3, r3, #2
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	f000 80dd 	beq.w	800fcc6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fb10:	1c5a      	adds	r2, r3, #1
 800fb12:	4b48      	ldr	r3, [pc, #288]	@ (800fc34 <tcp_process+0x29c>)
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	429a      	cmp	r2, r3
 800fb18:	f040 80d5 	bne.w	800fcc6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800fb1c:	4b46      	ldr	r3, [pc, #280]	@ (800fc38 <tcp_process+0x2a0>)
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	1c5a      	adds	r2, r3, #1
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800fb2e:	4b41      	ldr	r3, [pc, #260]	@ (800fc34 <tcp_process+0x29c>)
 800fb30:	681a      	ldr	r2, [r3, #0]
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800fb36:	4b44      	ldr	r3, [pc, #272]	@ (800fc48 <tcp_process+0x2b0>)
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	89db      	ldrh	r3, [r3, #14]
 800fb3c:	b29a      	uxth	r2, r3
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800fb50:	4b39      	ldr	r3, [pc, #228]	@ (800fc38 <tcp_process+0x2a0>)
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	1e5a      	subs	r2, r3, #1
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	2204      	movs	r2, #4
 800fb5e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	3304      	adds	r3, #4
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f005 f8df 	bl	8014d2c <ip4_route>
 800fb6e:	4601      	mov	r1, r0
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	3304      	adds	r3, #4
 800fb74:	461a      	mov	r2, r3
 800fb76:	4620      	mov	r0, r4
 800fb78:	f7ff f88c 	bl	800ec94 <tcp_eff_send_mss_netif>
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	461a      	mov	r2, r3
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fb88:	009a      	lsls	r2, r3, #2
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fb8e:	005b      	lsls	r3, r3, #1
 800fb90:	f241 111c 	movw	r1, #4380	@ 0x111c
 800fb94:	428b      	cmp	r3, r1
 800fb96:	bf38      	it	cc
 800fb98:	460b      	movcc	r3, r1
 800fb9a:	429a      	cmp	r2, r3
 800fb9c:	d204      	bcs.n	800fba8 <tcp_process+0x210>
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fba2:	009b      	lsls	r3, r3, #2
 800fba4:	b29b      	uxth	r3, r3
 800fba6:	e00d      	b.n	800fbc4 <tcp_process+0x22c>
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fbac:	005b      	lsls	r3, r3, #1
 800fbae:	f241 121c 	movw	r2, #4380	@ 0x111c
 800fbb2:	4293      	cmp	r3, r2
 800fbb4:	d904      	bls.n	800fbc0 <tcp_process+0x228>
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fbba:	005b      	lsls	r3, r3, #1
 800fbbc:	b29b      	uxth	r3, r3
 800fbbe:	e001      	b.n	800fbc4 <tcp_process+0x22c>
 800fbc0:	f241 131c 	movw	r3, #4380	@ 0x111c
 800fbc4:	687a      	ldr	r2, [r7, #4]
 800fbc6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d106      	bne.n	800fbe2 <tcp_process+0x24a>
 800fbd4:	4b13      	ldr	r3, [pc, #76]	@ (800fc24 <tcp_process+0x28c>)
 800fbd6:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800fbda:	491c      	ldr	r1, [pc, #112]	@ (800fc4c <tcp_process+0x2b4>)
 800fbdc:	4813      	ldr	r0, [pc, #76]	@ (800fc2c <tcp_process+0x294>)
 800fbde:	f006 fd47 	bl	8016670 <iprintf>
        --pcb->snd_queuelen;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800fbe8:	3b01      	subs	r3, #1
 800fbea:	b29a      	uxth	r2, r3
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fbf6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800fbf8:	69fb      	ldr	r3, [r7, #28]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d12a      	bne.n	800fc54 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fc02:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800fc04:	69fb      	ldr	r3, [r7, #28]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d106      	bne.n	800fc18 <tcp_process+0x280>
 800fc0a:	4b06      	ldr	r3, [pc, #24]	@ (800fc24 <tcp_process+0x28c>)
 800fc0c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800fc10:	490f      	ldr	r1, [pc, #60]	@ (800fc50 <tcp_process+0x2b8>)
 800fc12:	4806      	ldr	r0, [pc, #24]	@ (800fc2c <tcp_process+0x294>)
 800fc14:	f006 fd2c 	bl	8016670 <iprintf>
          pcb->unsent = rseg->next;
 800fc18:	69fb      	ldr	r3, [r7, #28]
 800fc1a:	681a      	ldr	r2, [r3, #0]
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	66da      	str	r2, [r3, #108]	@ 0x6c
 800fc20:	e01c      	b.n	800fc5c <tcp_process+0x2c4>
 800fc22:	bf00      	nop
 800fc24:	08019300 	.word	0x08019300
 800fc28:	08019538 	.word	0x08019538
 800fc2c:	0801934c 	.word	0x0801934c
 800fc30:	24007f40 	.word	0x24007f40
 800fc34:	24007f38 	.word	0x24007f38
 800fc38:	24007f34 	.word	0x24007f34
 800fc3c:	08019554 	.word	0x08019554
 800fc40:	24007f41 	.word	0x24007f41
 800fc44:	24007efc 	.word	0x24007efc
 800fc48:	24007f24 	.word	0x24007f24
 800fc4c:	08019574 	.word	0x08019574
 800fc50:	0801958c 	.word	0x0801958c
        } else {
          pcb->unacked = rseg->next;
 800fc54:	69fb      	ldr	r3, [r7, #28]
 800fc56:	681a      	ldr	r2, [r3, #0]
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800fc5c:	69f8      	ldr	r0, [r7, #28]
 800fc5e:	f7fe fc54 	bl	800e50a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d104      	bne.n	800fc74 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fc70:	861a      	strh	r2, [r3, #48]	@ 0x30
 800fc72:	e006      	b.n	800fc82 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2200      	movs	r2, #0
 800fc78:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d00a      	beq.n	800fca2 <tcp_process+0x30a>
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fc92:	687a      	ldr	r2, [r7, #4]
 800fc94:	6910      	ldr	r0, [r2, #16]
 800fc96:	2200      	movs	r2, #0
 800fc98:	6879      	ldr	r1, [r7, #4]
 800fc9a:	4798      	blx	r3
 800fc9c:	4603      	mov	r3, r0
 800fc9e:	76bb      	strb	r3, [r7, #26]
 800fca0:	e001      	b.n	800fca6 <tcp_process+0x30e>
 800fca2:	2300      	movs	r3, #0
 800fca4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800fca6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fcaa:	f113 0f0d 	cmn.w	r3, #13
 800fcae:	d102      	bne.n	800fcb6 <tcp_process+0x31e>
          return ERR_ABRT;
 800fcb0:	f06f 030c 	mvn.w	r3, #12
 800fcb4:	e250      	b.n	8010158 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	8b5b      	ldrh	r3, [r3, #26]
 800fcba:	f043 0302 	orr.w	r3, r3, #2
 800fcbe:	b29a      	uxth	r2, r3
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800fcc4:	e23a      	b.n	801013c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800fcc6:	4b98      	ldr	r3, [pc, #608]	@ (800ff28 <tcp_process+0x590>)
 800fcc8:	781b      	ldrb	r3, [r3, #0]
 800fcca:	f003 0310 	and.w	r3, r3, #16
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	f000 8234 	beq.w	801013c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcd4:	4b95      	ldr	r3, [pc, #596]	@ (800ff2c <tcp_process+0x594>)
 800fcd6:	6819      	ldr	r1, [r3, #0]
 800fcd8:	4b95      	ldr	r3, [pc, #596]	@ (800ff30 <tcp_process+0x598>)
 800fcda:	881b      	ldrh	r3, [r3, #0]
 800fcdc:	461a      	mov	r2, r3
 800fcde:	4b95      	ldr	r3, [pc, #596]	@ (800ff34 <tcp_process+0x59c>)
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fce4:	4b94      	ldr	r3, [pc, #592]	@ (800ff38 <tcp_process+0x5a0>)
 800fce6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fce8:	885b      	ldrh	r3, [r3, #2]
 800fcea:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fcec:	4a92      	ldr	r2, [pc, #584]	@ (800ff38 <tcp_process+0x5a0>)
 800fcee:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcf0:	8812      	ldrh	r2, [r2, #0]
 800fcf2:	b292      	uxth	r2, r2
 800fcf4:	9202      	str	r2, [sp, #8]
 800fcf6:	9301      	str	r3, [sp, #4]
 800fcf8:	4b90      	ldr	r3, [pc, #576]	@ (800ff3c <tcp_process+0x5a4>)
 800fcfa:	9300      	str	r3, [sp, #0]
 800fcfc:	4b90      	ldr	r3, [pc, #576]	@ (800ff40 <tcp_process+0x5a8>)
 800fcfe:	4602      	mov	r2, r0
 800fd00:	6878      	ldr	r0, [r7, #4]
 800fd02:	f003 f8d7 	bl	8012eb4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fd0c:	2b05      	cmp	r3, #5
 800fd0e:	f200 8215 	bhi.w	801013c <tcp_process+0x7a4>
          pcb->rtime = 0;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	2200      	movs	r2, #0
 800fd16:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	f002 fea3 	bl	8012a64 <tcp_rexmit_rto>
      break;
 800fd1e:	e20d      	b.n	801013c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800fd20:	4b81      	ldr	r3, [pc, #516]	@ (800ff28 <tcp_process+0x590>)
 800fd22:	781b      	ldrb	r3, [r3, #0]
 800fd24:	f003 0310 	and.w	r3, r3, #16
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	f000 80a1 	beq.w	800fe70 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fd2e:	4b7f      	ldr	r3, [pc, #508]	@ (800ff2c <tcp_process+0x594>)
 800fd30:	681a      	ldr	r2, [r3, #0]
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd36:	1ad3      	subs	r3, r2, r3
 800fd38:	3b01      	subs	r3, #1
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	db7e      	blt.n	800fe3c <tcp_process+0x4a4>
 800fd3e:	4b7b      	ldr	r3, [pc, #492]	@ (800ff2c <tcp_process+0x594>)
 800fd40:	681a      	ldr	r2, [r3, #0]
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fd46:	1ad3      	subs	r3, r2, r3
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	dc77      	bgt.n	800fe3c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	2204      	movs	r2, #4
 800fd50:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d102      	bne.n	800fd60 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800fd5a:	23fa      	movs	r3, #250	@ 0xfa
 800fd5c:	76bb      	strb	r3, [r7, #26]
 800fd5e:	e01d      	b.n	800fd9c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fd64:	699b      	ldr	r3, [r3, #24]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d106      	bne.n	800fd78 <tcp_process+0x3e0>
 800fd6a:	4b76      	ldr	r3, [pc, #472]	@ (800ff44 <tcp_process+0x5ac>)
 800fd6c:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800fd70:	4975      	ldr	r1, [pc, #468]	@ (800ff48 <tcp_process+0x5b0>)
 800fd72:	4876      	ldr	r0, [pc, #472]	@ (800ff4c <tcp_process+0x5b4>)
 800fd74:	f006 fc7c 	bl	8016670 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fd7c:	699b      	ldr	r3, [r3, #24]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d00a      	beq.n	800fd98 <tcp_process+0x400>
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fd86:	699b      	ldr	r3, [r3, #24]
 800fd88:	687a      	ldr	r2, [r7, #4]
 800fd8a:	6910      	ldr	r0, [r2, #16]
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	6879      	ldr	r1, [r7, #4]
 800fd90:	4798      	blx	r3
 800fd92:	4603      	mov	r3, r0
 800fd94:	76bb      	strb	r3, [r7, #26]
 800fd96:	e001      	b.n	800fd9c <tcp_process+0x404>
 800fd98:	23f0      	movs	r3, #240	@ 0xf0
 800fd9a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800fd9c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d00a      	beq.n	800fdba <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800fda4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fda8:	f113 0f0d 	cmn.w	r3, #13
 800fdac:	d002      	beq.n	800fdb4 <tcp_process+0x41c>
              tcp_abort(pcb);
 800fdae:	6878      	ldr	r0, [r7, #4]
 800fdb0:	f7fd fd16 	bl	800d7e0 <tcp_abort>
            }
            return ERR_ABRT;
 800fdb4:	f06f 030c 	mvn.w	r3, #12
 800fdb8:	e1ce      	b.n	8010158 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	f000 fae0 	bl	8010380 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800fdc0:	4b63      	ldr	r3, [pc, #396]	@ (800ff50 <tcp_process+0x5b8>)
 800fdc2:	881b      	ldrh	r3, [r3, #0]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d005      	beq.n	800fdd4 <tcp_process+0x43c>
            recv_acked--;
 800fdc8:	4b61      	ldr	r3, [pc, #388]	@ (800ff50 <tcp_process+0x5b8>)
 800fdca:	881b      	ldrh	r3, [r3, #0]
 800fdcc:	3b01      	subs	r3, #1
 800fdce:	b29a      	uxth	r2, r3
 800fdd0:	4b5f      	ldr	r3, [pc, #380]	@ (800ff50 <tcp_process+0x5b8>)
 800fdd2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fdd8:	009a      	lsls	r2, r3, #2
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fdde:	005b      	lsls	r3, r3, #1
 800fde0:	f241 111c 	movw	r1, #4380	@ 0x111c
 800fde4:	428b      	cmp	r3, r1
 800fde6:	bf38      	it	cc
 800fde8:	460b      	movcc	r3, r1
 800fdea:	429a      	cmp	r2, r3
 800fdec:	d204      	bcs.n	800fdf8 <tcp_process+0x460>
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fdf2:	009b      	lsls	r3, r3, #2
 800fdf4:	b29b      	uxth	r3, r3
 800fdf6:	e00d      	b.n	800fe14 <tcp_process+0x47c>
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fdfc:	005b      	lsls	r3, r3, #1
 800fdfe:	f241 121c 	movw	r2, #4380	@ 0x111c
 800fe02:	4293      	cmp	r3, r2
 800fe04:	d904      	bls.n	800fe10 <tcp_process+0x478>
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fe0a:	005b      	lsls	r3, r3, #1
 800fe0c:	b29b      	uxth	r3, r3
 800fe0e:	e001      	b.n	800fe14 <tcp_process+0x47c>
 800fe10:	f241 131c 	movw	r3, #4380	@ 0x111c
 800fe14:	687a      	ldr	r2, [r7, #4]
 800fe16:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800fe1a:	4b4e      	ldr	r3, [pc, #312]	@ (800ff54 <tcp_process+0x5bc>)
 800fe1c:	781b      	ldrb	r3, [r3, #0]
 800fe1e:	f003 0320 	and.w	r3, r3, #32
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d037      	beq.n	800fe96 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	8b5b      	ldrh	r3, [r3, #26]
 800fe2a:	f043 0302 	orr.w	r3, r3, #2
 800fe2e:	b29a      	uxth	r2, r3
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	2207      	movs	r2, #7
 800fe38:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800fe3a:	e02c      	b.n	800fe96 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe3c:	4b3b      	ldr	r3, [pc, #236]	@ (800ff2c <tcp_process+0x594>)
 800fe3e:	6819      	ldr	r1, [r3, #0]
 800fe40:	4b3b      	ldr	r3, [pc, #236]	@ (800ff30 <tcp_process+0x598>)
 800fe42:	881b      	ldrh	r3, [r3, #0]
 800fe44:	461a      	mov	r2, r3
 800fe46:	4b3b      	ldr	r3, [pc, #236]	@ (800ff34 <tcp_process+0x59c>)
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fe4c:	4b3a      	ldr	r3, [pc, #232]	@ (800ff38 <tcp_process+0x5a0>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe50:	885b      	ldrh	r3, [r3, #2]
 800fe52:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fe54:	4a38      	ldr	r2, [pc, #224]	@ (800ff38 <tcp_process+0x5a0>)
 800fe56:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe58:	8812      	ldrh	r2, [r2, #0]
 800fe5a:	b292      	uxth	r2, r2
 800fe5c:	9202      	str	r2, [sp, #8]
 800fe5e:	9301      	str	r3, [sp, #4]
 800fe60:	4b36      	ldr	r3, [pc, #216]	@ (800ff3c <tcp_process+0x5a4>)
 800fe62:	9300      	str	r3, [sp, #0]
 800fe64:	4b36      	ldr	r3, [pc, #216]	@ (800ff40 <tcp_process+0x5a8>)
 800fe66:	4602      	mov	r2, r0
 800fe68:	6878      	ldr	r0, [r7, #4]
 800fe6a:	f003 f823 	bl	8012eb4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800fe6e:	e167      	b.n	8010140 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800fe70:	4b2d      	ldr	r3, [pc, #180]	@ (800ff28 <tcp_process+0x590>)
 800fe72:	781b      	ldrb	r3, [r3, #0]
 800fe74:	f003 0302 	and.w	r3, r3, #2
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	f000 8161 	beq.w	8010140 <tcp_process+0x7a8>
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe82:	1e5a      	subs	r2, r3, #1
 800fe84:	4b2b      	ldr	r3, [pc, #172]	@ (800ff34 <tcp_process+0x59c>)
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	429a      	cmp	r2, r3
 800fe8a:	f040 8159 	bne.w	8010140 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800fe8e:	6878      	ldr	r0, [r7, #4]
 800fe90:	f002 fe0a 	bl	8012aa8 <tcp_rexmit>
      break;
 800fe94:	e154      	b.n	8010140 <tcp_process+0x7a8>
 800fe96:	e153      	b.n	8010140 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800fe98:	6878      	ldr	r0, [r7, #4]
 800fe9a:	f000 fa71 	bl	8010380 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800fe9e:	4b2d      	ldr	r3, [pc, #180]	@ (800ff54 <tcp_process+0x5bc>)
 800fea0:	781b      	ldrb	r3, [r3, #0]
 800fea2:	f003 0320 	and.w	r3, r3, #32
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	f000 814c 	beq.w	8010144 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	8b5b      	ldrh	r3, [r3, #26]
 800feb0:	f043 0302 	orr.w	r3, r3, #2
 800feb4:	b29a      	uxth	r2, r3
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	2207      	movs	r2, #7
 800febe:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fec0:	e140      	b.n	8010144 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800fec2:	6878      	ldr	r0, [r7, #4]
 800fec4:	f000 fa5c 	bl	8010380 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800fec8:	4b22      	ldr	r3, [pc, #136]	@ (800ff54 <tcp_process+0x5bc>)
 800feca:	781b      	ldrb	r3, [r3, #0]
 800fecc:	f003 0320 	and.w	r3, r3, #32
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d071      	beq.n	800ffb8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fed4:	4b14      	ldr	r3, [pc, #80]	@ (800ff28 <tcp_process+0x590>)
 800fed6:	781b      	ldrb	r3, [r3, #0]
 800fed8:	f003 0310 	and.w	r3, r3, #16
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d060      	beq.n	800ffa2 <tcp_process+0x60a>
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fee4:	4b11      	ldr	r3, [pc, #68]	@ (800ff2c <tcp_process+0x594>)
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	429a      	cmp	r2, r3
 800feea:	d15a      	bne.n	800ffa2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d156      	bne.n	800ffa2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	8b5b      	ldrh	r3, [r3, #26]
 800fef8:	f043 0302 	orr.w	r3, r3, #2
 800fefc:	b29a      	uxth	r2, r3
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800ff02:	6878      	ldr	r0, [r7, #4]
 800ff04:	f7fe fdbc 	bl	800ea80 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ff08:	4b13      	ldr	r3, [pc, #76]	@ (800ff58 <tcp_process+0x5c0>)
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	687a      	ldr	r2, [r7, #4]
 800ff0e:	429a      	cmp	r2, r3
 800ff10:	d105      	bne.n	800ff1e <tcp_process+0x586>
 800ff12:	4b11      	ldr	r3, [pc, #68]	@ (800ff58 <tcp_process+0x5c0>)
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	68db      	ldr	r3, [r3, #12]
 800ff18:	4a0f      	ldr	r2, [pc, #60]	@ (800ff58 <tcp_process+0x5c0>)
 800ff1a:	6013      	str	r3, [r2, #0]
 800ff1c:	e02e      	b.n	800ff7c <tcp_process+0x5e4>
 800ff1e:	4b0e      	ldr	r3, [pc, #56]	@ (800ff58 <tcp_process+0x5c0>)
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	617b      	str	r3, [r7, #20]
 800ff24:	e027      	b.n	800ff76 <tcp_process+0x5de>
 800ff26:	bf00      	nop
 800ff28:	24007f40 	.word	0x24007f40
 800ff2c:	24007f38 	.word	0x24007f38
 800ff30:	24007f3e 	.word	0x24007f3e
 800ff34:	24007f34 	.word	0x24007f34
 800ff38:	24007f24 	.word	0x24007f24
 800ff3c:	24004dfc 	.word	0x24004dfc
 800ff40:	24004e00 	.word	0x24004e00
 800ff44:	08019300 	.word	0x08019300
 800ff48:	080195a0 	.word	0x080195a0
 800ff4c:	0801934c 	.word	0x0801934c
 800ff50:	24007f3c 	.word	0x24007f3c
 800ff54:	24007f41 	.word	0x24007f41
 800ff58:	24007f08 	.word	0x24007f08
 800ff5c:	697b      	ldr	r3, [r7, #20]
 800ff5e:	68db      	ldr	r3, [r3, #12]
 800ff60:	687a      	ldr	r2, [r7, #4]
 800ff62:	429a      	cmp	r2, r3
 800ff64:	d104      	bne.n	800ff70 <tcp_process+0x5d8>
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	68da      	ldr	r2, [r3, #12]
 800ff6a:	697b      	ldr	r3, [r7, #20]
 800ff6c:	60da      	str	r2, [r3, #12]
 800ff6e:	e005      	b.n	800ff7c <tcp_process+0x5e4>
 800ff70:	697b      	ldr	r3, [r7, #20]
 800ff72:	68db      	ldr	r3, [r3, #12]
 800ff74:	617b      	str	r3, [r7, #20]
 800ff76:	697b      	ldr	r3, [r7, #20]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d1ef      	bne.n	800ff5c <tcp_process+0x5c4>
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	2200      	movs	r2, #0
 800ff80:	60da      	str	r2, [r3, #12]
 800ff82:	4b77      	ldr	r3, [pc, #476]	@ (8010160 <tcp_process+0x7c8>)
 800ff84:	2201      	movs	r2, #1
 800ff86:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	220a      	movs	r2, #10
 800ff8c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ff8e:	4b75      	ldr	r3, [pc, #468]	@ (8010164 <tcp_process+0x7cc>)
 800ff90:	681a      	ldr	r2, [r3, #0]
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	60da      	str	r2, [r3, #12]
 800ff96:	4a73      	ldr	r2, [pc, #460]	@ (8010164 <tcp_process+0x7cc>)
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	6013      	str	r3, [r2, #0]
 800ff9c:	f003 f94c 	bl	8013238 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ffa0:	e0d2      	b.n	8010148 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	8b5b      	ldrh	r3, [r3, #26]
 800ffa6:	f043 0302 	orr.w	r3, r3, #2
 800ffaa:	b29a      	uxth	r2, r3
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	2208      	movs	r2, #8
 800ffb4:	751a      	strb	r2, [r3, #20]
      break;
 800ffb6:	e0c7      	b.n	8010148 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ffb8:	4b6b      	ldr	r3, [pc, #428]	@ (8010168 <tcp_process+0x7d0>)
 800ffba:	781b      	ldrb	r3, [r3, #0]
 800ffbc:	f003 0310 	and.w	r3, r3, #16
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	f000 80c1 	beq.w	8010148 <tcp_process+0x7b0>
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ffca:	4b68      	ldr	r3, [pc, #416]	@ (801016c <tcp_process+0x7d4>)
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	429a      	cmp	r2, r3
 800ffd0:	f040 80ba 	bne.w	8010148 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	f040 80b5 	bne.w	8010148 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	2206      	movs	r2, #6
 800ffe2:	751a      	strb	r2, [r3, #20]
      break;
 800ffe4:	e0b0      	b.n	8010148 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800ffe6:	6878      	ldr	r0, [r7, #4]
 800ffe8:	f000 f9ca 	bl	8010380 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ffec:	4b60      	ldr	r3, [pc, #384]	@ (8010170 <tcp_process+0x7d8>)
 800ffee:	781b      	ldrb	r3, [r3, #0]
 800fff0:	f003 0320 	and.w	r3, r3, #32
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	f000 80a9 	beq.w	801014c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	8b5b      	ldrh	r3, [r3, #26]
 800fffe:	f043 0302 	orr.w	r3, r3, #2
 8010002:	b29a      	uxth	r2, r3
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010008:	6878      	ldr	r0, [r7, #4]
 801000a:	f7fe fd39 	bl	800ea80 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801000e:	4b59      	ldr	r3, [pc, #356]	@ (8010174 <tcp_process+0x7dc>)
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	687a      	ldr	r2, [r7, #4]
 8010014:	429a      	cmp	r2, r3
 8010016:	d105      	bne.n	8010024 <tcp_process+0x68c>
 8010018:	4b56      	ldr	r3, [pc, #344]	@ (8010174 <tcp_process+0x7dc>)
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	68db      	ldr	r3, [r3, #12]
 801001e:	4a55      	ldr	r2, [pc, #340]	@ (8010174 <tcp_process+0x7dc>)
 8010020:	6013      	str	r3, [r2, #0]
 8010022:	e013      	b.n	801004c <tcp_process+0x6b4>
 8010024:	4b53      	ldr	r3, [pc, #332]	@ (8010174 <tcp_process+0x7dc>)
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	613b      	str	r3, [r7, #16]
 801002a:	e00c      	b.n	8010046 <tcp_process+0x6ae>
 801002c:	693b      	ldr	r3, [r7, #16]
 801002e:	68db      	ldr	r3, [r3, #12]
 8010030:	687a      	ldr	r2, [r7, #4]
 8010032:	429a      	cmp	r2, r3
 8010034:	d104      	bne.n	8010040 <tcp_process+0x6a8>
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	68da      	ldr	r2, [r3, #12]
 801003a:	693b      	ldr	r3, [r7, #16]
 801003c:	60da      	str	r2, [r3, #12]
 801003e:	e005      	b.n	801004c <tcp_process+0x6b4>
 8010040:	693b      	ldr	r3, [r7, #16]
 8010042:	68db      	ldr	r3, [r3, #12]
 8010044:	613b      	str	r3, [r7, #16]
 8010046:	693b      	ldr	r3, [r7, #16]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d1ef      	bne.n	801002c <tcp_process+0x694>
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	2200      	movs	r2, #0
 8010050:	60da      	str	r2, [r3, #12]
 8010052:	4b43      	ldr	r3, [pc, #268]	@ (8010160 <tcp_process+0x7c8>)
 8010054:	2201      	movs	r2, #1
 8010056:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	220a      	movs	r2, #10
 801005c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801005e:	4b41      	ldr	r3, [pc, #260]	@ (8010164 <tcp_process+0x7cc>)
 8010060:	681a      	ldr	r2, [r3, #0]
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	60da      	str	r2, [r3, #12]
 8010066:	4a3f      	ldr	r2, [pc, #252]	@ (8010164 <tcp_process+0x7cc>)
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	6013      	str	r3, [r2, #0]
 801006c:	f003 f8e4 	bl	8013238 <tcp_timer_needed>
      }
      break;
 8010070:	e06c      	b.n	801014c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010072:	6878      	ldr	r0, [r7, #4]
 8010074:	f000 f984 	bl	8010380 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010078:	4b3b      	ldr	r3, [pc, #236]	@ (8010168 <tcp_process+0x7d0>)
 801007a:	781b      	ldrb	r3, [r3, #0]
 801007c:	f003 0310 	and.w	r3, r3, #16
 8010080:	2b00      	cmp	r3, #0
 8010082:	d065      	beq.n	8010150 <tcp_process+0x7b8>
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010088:	4b38      	ldr	r3, [pc, #224]	@ (801016c <tcp_process+0x7d4>)
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	429a      	cmp	r2, r3
 801008e:	d15f      	bne.n	8010150 <tcp_process+0x7b8>
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010094:	2b00      	cmp	r3, #0
 8010096:	d15b      	bne.n	8010150 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010098:	6878      	ldr	r0, [r7, #4]
 801009a:	f7fe fcf1 	bl	800ea80 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801009e:	4b35      	ldr	r3, [pc, #212]	@ (8010174 <tcp_process+0x7dc>)
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	687a      	ldr	r2, [r7, #4]
 80100a4:	429a      	cmp	r2, r3
 80100a6:	d105      	bne.n	80100b4 <tcp_process+0x71c>
 80100a8:	4b32      	ldr	r3, [pc, #200]	@ (8010174 <tcp_process+0x7dc>)
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	68db      	ldr	r3, [r3, #12]
 80100ae:	4a31      	ldr	r2, [pc, #196]	@ (8010174 <tcp_process+0x7dc>)
 80100b0:	6013      	str	r3, [r2, #0]
 80100b2:	e013      	b.n	80100dc <tcp_process+0x744>
 80100b4:	4b2f      	ldr	r3, [pc, #188]	@ (8010174 <tcp_process+0x7dc>)
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	60fb      	str	r3, [r7, #12]
 80100ba:	e00c      	b.n	80100d6 <tcp_process+0x73e>
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	68db      	ldr	r3, [r3, #12]
 80100c0:	687a      	ldr	r2, [r7, #4]
 80100c2:	429a      	cmp	r2, r3
 80100c4:	d104      	bne.n	80100d0 <tcp_process+0x738>
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	68da      	ldr	r2, [r3, #12]
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	60da      	str	r2, [r3, #12]
 80100ce:	e005      	b.n	80100dc <tcp_process+0x744>
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	68db      	ldr	r3, [r3, #12]
 80100d4:	60fb      	str	r3, [r7, #12]
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d1ef      	bne.n	80100bc <tcp_process+0x724>
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	2200      	movs	r2, #0
 80100e0:	60da      	str	r2, [r3, #12]
 80100e2:	4b1f      	ldr	r3, [pc, #124]	@ (8010160 <tcp_process+0x7c8>)
 80100e4:	2201      	movs	r2, #1
 80100e6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	220a      	movs	r2, #10
 80100ec:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80100ee:	4b1d      	ldr	r3, [pc, #116]	@ (8010164 <tcp_process+0x7cc>)
 80100f0:	681a      	ldr	r2, [r3, #0]
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	60da      	str	r2, [r3, #12]
 80100f6:	4a1b      	ldr	r2, [pc, #108]	@ (8010164 <tcp_process+0x7cc>)
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	6013      	str	r3, [r2, #0]
 80100fc:	f003 f89c 	bl	8013238 <tcp_timer_needed>
      }
      break;
 8010100:	e026      	b.n	8010150 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010102:	6878      	ldr	r0, [r7, #4]
 8010104:	f000 f93c 	bl	8010380 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010108:	4b17      	ldr	r3, [pc, #92]	@ (8010168 <tcp_process+0x7d0>)
 801010a:	781b      	ldrb	r3, [r3, #0]
 801010c:	f003 0310 	and.w	r3, r3, #16
 8010110:	2b00      	cmp	r3, #0
 8010112:	d01f      	beq.n	8010154 <tcp_process+0x7bc>
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010118:	4b14      	ldr	r3, [pc, #80]	@ (801016c <tcp_process+0x7d4>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	429a      	cmp	r2, r3
 801011e:	d119      	bne.n	8010154 <tcp_process+0x7bc>
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010124:	2b00      	cmp	r3, #0
 8010126:	d115      	bne.n	8010154 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010128:	4b11      	ldr	r3, [pc, #68]	@ (8010170 <tcp_process+0x7d8>)
 801012a:	781b      	ldrb	r3, [r3, #0]
 801012c:	f043 0310 	orr.w	r3, r3, #16
 8010130:	b2da      	uxtb	r2, r3
 8010132:	4b0f      	ldr	r3, [pc, #60]	@ (8010170 <tcp_process+0x7d8>)
 8010134:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010136:	e00d      	b.n	8010154 <tcp_process+0x7bc>
    default:
      break;
 8010138:	bf00      	nop
 801013a:	e00c      	b.n	8010156 <tcp_process+0x7be>
      break;
 801013c:	bf00      	nop
 801013e:	e00a      	b.n	8010156 <tcp_process+0x7be>
      break;
 8010140:	bf00      	nop
 8010142:	e008      	b.n	8010156 <tcp_process+0x7be>
      break;
 8010144:	bf00      	nop
 8010146:	e006      	b.n	8010156 <tcp_process+0x7be>
      break;
 8010148:	bf00      	nop
 801014a:	e004      	b.n	8010156 <tcp_process+0x7be>
      break;
 801014c:	bf00      	nop
 801014e:	e002      	b.n	8010156 <tcp_process+0x7be>
      break;
 8010150:	bf00      	nop
 8010152:	e000      	b.n	8010156 <tcp_process+0x7be>
      break;
 8010154:	bf00      	nop
  }
  return ERR_OK;
 8010156:	2300      	movs	r3, #0
}
 8010158:	4618      	mov	r0, r3
 801015a:	3724      	adds	r7, #36	@ 0x24
 801015c:	46bd      	mov	sp, r7
 801015e:	bd90      	pop	{r4, r7, pc}
 8010160:	24007f10 	.word	0x24007f10
 8010164:	24007f0c 	.word	0x24007f0c
 8010168:	24007f40 	.word	0x24007f40
 801016c:	24007f38 	.word	0x24007f38
 8010170:	24007f41 	.word	0x24007f41
 8010174:	24007f08 	.word	0x24007f08

08010178 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010178:	b590      	push	{r4, r7, lr}
 801017a:	b085      	sub	sp, #20
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
 8010180:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d106      	bne.n	8010196 <tcp_oos_insert_segment+0x1e>
 8010188:	4b3b      	ldr	r3, [pc, #236]	@ (8010278 <tcp_oos_insert_segment+0x100>)
 801018a:	f240 421f 	movw	r2, #1055	@ 0x41f
 801018e:	493b      	ldr	r1, [pc, #236]	@ (801027c <tcp_oos_insert_segment+0x104>)
 8010190:	483b      	ldr	r0, [pc, #236]	@ (8010280 <tcp_oos_insert_segment+0x108>)
 8010192:	f006 fa6d 	bl	8016670 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	68db      	ldr	r3, [r3, #12]
 801019a:	899b      	ldrh	r3, [r3, #12]
 801019c:	b29b      	uxth	r3, r3
 801019e:	4618      	mov	r0, r3
 80101a0:	f7fb f884 	bl	800b2ac <lwip_htons>
 80101a4:	4603      	mov	r3, r0
 80101a6:	b2db      	uxtb	r3, r3
 80101a8:	f003 0301 	and.w	r3, r3, #1
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d028      	beq.n	8010202 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80101b0:	6838      	ldr	r0, [r7, #0]
 80101b2:	f7fe f995 	bl	800e4e0 <tcp_segs_free>
    next = NULL;
 80101b6:	2300      	movs	r3, #0
 80101b8:	603b      	str	r3, [r7, #0]
 80101ba:	e056      	b.n	801026a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80101bc:	683b      	ldr	r3, [r7, #0]
 80101be:	68db      	ldr	r3, [r3, #12]
 80101c0:	899b      	ldrh	r3, [r3, #12]
 80101c2:	b29b      	uxth	r3, r3
 80101c4:	4618      	mov	r0, r3
 80101c6:	f7fb f871 	bl	800b2ac <lwip_htons>
 80101ca:	4603      	mov	r3, r0
 80101cc:	b2db      	uxtb	r3, r3
 80101ce:	f003 0301 	and.w	r3, r3, #1
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d00d      	beq.n	80101f2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	68db      	ldr	r3, [r3, #12]
 80101da:	899b      	ldrh	r3, [r3, #12]
 80101dc:	b29c      	uxth	r4, r3
 80101de:	2001      	movs	r0, #1
 80101e0:	f7fb f864 	bl	800b2ac <lwip_htons>
 80101e4:	4603      	mov	r3, r0
 80101e6:	461a      	mov	r2, r3
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	68db      	ldr	r3, [r3, #12]
 80101ec:	4322      	orrs	r2, r4
 80101ee:	b292      	uxth	r2, r2
 80101f0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80101f2:	683b      	ldr	r3, [r7, #0]
 80101f4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80101f6:	683b      	ldr	r3, [r7, #0]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80101fc:	68f8      	ldr	r0, [r7, #12]
 80101fe:	f7fe f984 	bl	800e50a <tcp_seg_free>
    while (next &&
 8010202:	683b      	ldr	r3, [r7, #0]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d00e      	beq.n	8010226 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	891b      	ldrh	r3, [r3, #8]
 801020c:	461a      	mov	r2, r3
 801020e:	4b1d      	ldr	r3, [pc, #116]	@ (8010284 <tcp_oos_insert_segment+0x10c>)
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	441a      	add	r2, r3
 8010214:	683b      	ldr	r3, [r7, #0]
 8010216:	68db      	ldr	r3, [r3, #12]
 8010218:	685b      	ldr	r3, [r3, #4]
 801021a:	6839      	ldr	r1, [r7, #0]
 801021c:	8909      	ldrh	r1, [r1, #8]
 801021e:	440b      	add	r3, r1
 8010220:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010222:	2b00      	cmp	r3, #0
 8010224:	daca      	bge.n	80101bc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010226:	683b      	ldr	r3, [r7, #0]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d01e      	beq.n	801026a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	891b      	ldrh	r3, [r3, #8]
 8010230:	461a      	mov	r2, r3
 8010232:	4b14      	ldr	r3, [pc, #80]	@ (8010284 <tcp_oos_insert_segment+0x10c>)
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	441a      	add	r2, r3
 8010238:	683b      	ldr	r3, [r7, #0]
 801023a:	68db      	ldr	r3, [r3, #12]
 801023c:	685b      	ldr	r3, [r3, #4]
 801023e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010240:	2b00      	cmp	r3, #0
 8010242:	dd12      	ble.n	801026a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010244:	683b      	ldr	r3, [r7, #0]
 8010246:	68db      	ldr	r3, [r3, #12]
 8010248:	685b      	ldr	r3, [r3, #4]
 801024a:	b29a      	uxth	r2, r3
 801024c:	4b0d      	ldr	r3, [pc, #52]	@ (8010284 <tcp_oos_insert_segment+0x10c>)
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	b29b      	uxth	r3, r3
 8010252:	1ad3      	subs	r3, r2, r3
 8010254:	b29a      	uxth	r2, r3
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	685a      	ldr	r2, [r3, #4]
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	891b      	ldrh	r3, [r3, #8]
 8010262:	4619      	mov	r1, r3
 8010264:	4610      	mov	r0, r2
 8010266:	f7fc fb45 	bl	800c8f4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	683a      	ldr	r2, [r7, #0]
 801026e:	601a      	str	r2, [r3, #0]
}
 8010270:	bf00      	nop
 8010272:	3714      	adds	r7, #20
 8010274:	46bd      	mov	sp, r7
 8010276:	bd90      	pop	{r4, r7, pc}
 8010278:	08019300 	.word	0x08019300
 801027c:	080195c0 	.word	0x080195c0
 8010280:	0801934c 	.word	0x0801934c
 8010284:	24007f34 	.word	0x24007f34

08010288 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010288:	b5b0      	push	{r4, r5, r7, lr}
 801028a:	b086      	sub	sp, #24
 801028c:	af00      	add	r7, sp, #0
 801028e:	60f8      	str	r0, [r7, #12]
 8010290:	60b9      	str	r1, [r7, #8]
 8010292:	607a      	str	r2, [r7, #4]
 8010294:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010296:	e03e      	b.n	8010316 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010298:	68bb      	ldr	r3, [r7, #8]
 801029a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801029c:	68bb      	ldr	r3, [r7, #8]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80102a2:	697b      	ldr	r3, [r7, #20]
 80102a4:	685b      	ldr	r3, [r3, #4]
 80102a6:	4618      	mov	r0, r3
 80102a8:	f7fc fd38 	bl	800cd1c <pbuf_clen>
 80102ac:	4603      	mov	r3, r0
 80102ae:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80102b6:	8a7a      	ldrh	r2, [r7, #18]
 80102b8:	429a      	cmp	r2, r3
 80102ba:	d906      	bls.n	80102ca <tcp_free_acked_segments+0x42>
 80102bc:	4b2a      	ldr	r3, [pc, #168]	@ (8010368 <tcp_free_acked_segments+0xe0>)
 80102be:	f240 4257 	movw	r2, #1111	@ 0x457
 80102c2:	492a      	ldr	r1, [pc, #168]	@ (801036c <tcp_free_acked_segments+0xe4>)
 80102c4:	482a      	ldr	r0, [pc, #168]	@ (8010370 <tcp_free_acked_segments+0xe8>)
 80102c6:	f006 f9d3 	bl	8016670 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 80102d0:	8a7b      	ldrh	r3, [r7, #18]
 80102d2:	1ad3      	subs	r3, r2, r3
 80102d4:	b29a      	uxth	r2, r3
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80102dc:	697b      	ldr	r3, [r7, #20]
 80102de:	891a      	ldrh	r2, [r3, #8]
 80102e0:	4b24      	ldr	r3, [pc, #144]	@ (8010374 <tcp_free_acked_segments+0xec>)
 80102e2:	881b      	ldrh	r3, [r3, #0]
 80102e4:	4413      	add	r3, r2
 80102e6:	b29a      	uxth	r2, r3
 80102e8:	4b22      	ldr	r3, [pc, #136]	@ (8010374 <tcp_free_acked_segments+0xec>)
 80102ea:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80102ec:	6978      	ldr	r0, [r7, #20]
 80102ee:	f7fe f90c 	bl	800e50a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d00c      	beq.n	8010316 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80102fc:	68bb      	ldr	r3, [r7, #8]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d109      	bne.n	8010316 <tcp_free_acked_segments+0x8e>
 8010302:	683b      	ldr	r3, [r7, #0]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d106      	bne.n	8010316 <tcp_free_acked_segments+0x8e>
 8010308:	4b17      	ldr	r3, [pc, #92]	@ (8010368 <tcp_free_acked_segments+0xe0>)
 801030a:	f240 4261 	movw	r2, #1121	@ 0x461
 801030e:	491a      	ldr	r1, [pc, #104]	@ (8010378 <tcp_free_acked_segments+0xf0>)
 8010310:	4817      	ldr	r0, [pc, #92]	@ (8010370 <tcp_free_acked_segments+0xe8>)
 8010312:	f006 f9ad 	bl	8016670 <iprintf>
  while (seg_list != NULL &&
 8010316:	68bb      	ldr	r3, [r7, #8]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d020      	beq.n	801035e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801031c:	68bb      	ldr	r3, [r7, #8]
 801031e:	68db      	ldr	r3, [r3, #12]
 8010320:	685b      	ldr	r3, [r3, #4]
 8010322:	4618      	mov	r0, r3
 8010324:	f7fa ffd7 	bl	800b2d6 <lwip_htonl>
 8010328:	4604      	mov	r4, r0
 801032a:	68bb      	ldr	r3, [r7, #8]
 801032c:	891b      	ldrh	r3, [r3, #8]
 801032e:	461d      	mov	r5, r3
 8010330:	68bb      	ldr	r3, [r7, #8]
 8010332:	68db      	ldr	r3, [r3, #12]
 8010334:	899b      	ldrh	r3, [r3, #12]
 8010336:	b29b      	uxth	r3, r3
 8010338:	4618      	mov	r0, r3
 801033a:	f7fa ffb7 	bl	800b2ac <lwip_htons>
 801033e:	4603      	mov	r3, r0
 8010340:	b2db      	uxtb	r3, r3
 8010342:	f003 0303 	and.w	r3, r3, #3
 8010346:	2b00      	cmp	r3, #0
 8010348:	d001      	beq.n	801034e <tcp_free_acked_segments+0xc6>
 801034a:	2301      	movs	r3, #1
 801034c:	e000      	b.n	8010350 <tcp_free_acked_segments+0xc8>
 801034e:	2300      	movs	r3, #0
 8010350:	442b      	add	r3, r5
 8010352:	18e2      	adds	r2, r4, r3
 8010354:	4b09      	ldr	r3, [pc, #36]	@ (801037c <tcp_free_acked_segments+0xf4>)
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801035a:	2b00      	cmp	r3, #0
 801035c:	dd9c      	ble.n	8010298 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801035e:	68bb      	ldr	r3, [r7, #8]
}
 8010360:	4618      	mov	r0, r3
 8010362:	3718      	adds	r7, #24
 8010364:	46bd      	mov	sp, r7
 8010366:	bdb0      	pop	{r4, r5, r7, pc}
 8010368:	08019300 	.word	0x08019300
 801036c:	080195e8 	.word	0x080195e8
 8010370:	0801934c 	.word	0x0801934c
 8010374:	24007f3c 	.word	0x24007f3c
 8010378:	08019610 	.word	0x08019610
 801037c:	24007f38 	.word	0x24007f38

08010380 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010380:	b5b0      	push	{r4, r5, r7, lr}
 8010382:	b094      	sub	sp, #80	@ 0x50
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010388:	2300      	movs	r3, #0
 801038a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d106      	bne.n	80103a0 <tcp_receive+0x20>
 8010392:	4b91      	ldr	r3, [pc, #580]	@ (80105d8 <tcp_receive+0x258>)
 8010394:	f240 427b 	movw	r2, #1147	@ 0x47b
 8010398:	4990      	ldr	r1, [pc, #576]	@ (80105dc <tcp_receive+0x25c>)
 801039a:	4891      	ldr	r0, [pc, #580]	@ (80105e0 <tcp_receive+0x260>)
 801039c:	f006 f968 	bl	8016670 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	7d1b      	ldrb	r3, [r3, #20]
 80103a4:	2b03      	cmp	r3, #3
 80103a6:	d806      	bhi.n	80103b6 <tcp_receive+0x36>
 80103a8:	4b8b      	ldr	r3, [pc, #556]	@ (80105d8 <tcp_receive+0x258>)
 80103aa:	f240 427c 	movw	r2, #1148	@ 0x47c
 80103ae:	498d      	ldr	r1, [pc, #564]	@ (80105e4 <tcp_receive+0x264>)
 80103b0:	488b      	ldr	r0, [pc, #556]	@ (80105e0 <tcp_receive+0x260>)
 80103b2:	f006 f95d 	bl	8016670 <iprintf>

  if (flags & TCP_ACK) {
 80103b6:	4b8c      	ldr	r3, [pc, #560]	@ (80105e8 <tcp_receive+0x268>)
 80103b8:	781b      	ldrb	r3, [r3, #0]
 80103ba:	f003 0310 	and.w	r3, r3, #16
 80103be:	2b00      	cmp	r3, #0
 80103c0:	f000 8264 	beq.w	801088c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80103ca:	461a      	mov	r2, r3
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80103d0:	4413      	add	r3, r2
 80103d2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80103d8:	4b84      	ldr	r3, [pc, #528]	@ (80105ec <tcp_receive+0x26c>)
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	1ad3      	subs	r3, r2, r3
 80103de:	2b00      	cmp	r3, #0
 80103e0:	db1b      	blt.n	801041a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80103e6:	4b81      	ldr	r3, [pc, #516]	@ (80105ec <tcp_receive+0x26c>)
 80103e8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80103ea:	429a      	cmp	r2, r3
 80103ec:	d106      	bne.n	80103fc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80103f2:	4b7f      	ldr	r3, [pc, #508]	@ (80105f0 <tcp_receive+0x270>)
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	1ad3      	subs	r3, r2, r3
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	db0e      	blt.n	801041a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010400:	4b7b      	ldr	r3, [pc, #492]	@ (80105f0 <tcp_receive+0x270>)
 8010402:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010404:	429a      	cmp	r2, r3
 8010406:	d125      	bne.n	8010454 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010408:	4b7a      	ldr	r3, [pc, #488]	@ (80105f4 <tcp_receive+0x274>)
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	89db      	ldrh	r3, [r3, #14]
 801040e:	b29a      	uxth	r2, r3
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010416:	429a      	cmp	r2, r3
 8010418:	d91c      	bls.n	8010454 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801041a:	4b76      	ldr	r3, [pc, #472]	@ (80105f4 <tcp_receive+0x274>)
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	89db      	ldrh	r3, [r3, #14]
 8010420:	b29a      	uxth	r2, r3
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010434:	429a      	cmp	r2, r3
 8010436:	d205      	bcs.n	8010444 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8010444:	4b69      	ldr	r3, [pc, #420]	@ (80105ec <tcp_receive+0x26c>)
 8010446:	681a      	ldr	r2, [r3, #0]
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 801044c:	4b68      	ldr	r3, [pc, #416]	@ (80105f0 <tcp_receive+0x270>)
 801044e:	681a      	ldr	r2, [r3, #0]
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010454:	4b66      	ldr	r3, [pc, #408]	@ (80105f0 <tcp_receive+0x270>)
 8010456:	681a      	ldr	r2, [r3, #0]
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801045c:	1ad3      	subs	r3, r2, r3
 801045e:	2b00      	cmp	r3, #0
 8010460:	dc58      	bgt.n	8010514 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010462:	4b65      	ldr	r3, [pc, #404]	@ (80105f8 <tcp_receive+0x278>)
 8010464:	881b      	ldrh	r3, [r3, #0]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d14b      	bne.n	8010502 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801046e:	687a      	ldr	r2, [r7, #4]
 8010470:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8010474:	4413      	add	r3, r2
 8010476:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010478:	429a      	cmp	r2, r3
 801047a:	d142      	bne.n	8010502 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8010482:	2b00      	cmp	r3, #0
 8010484:	db3d      	blt.n	8010502 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801048a:	4b59      	ldr	r3, [pc, #356]	@ (80105f0 <tcp_receive+0x270>)
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	429a      	cmp	r2, r3
 8010490:	d137      	bne.n	8010502 <tcp_receive+0x182>
              found_dupack = 1;
 8010492:	2301      	movs	r3, #1
 8010494:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801049c:	2bff      	cmp	r3, #255	@ 0xff
 801049e:	d007      	beq.n	80104b0 <tcp_receive+0x130>
                ++pcb->dupacks;
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80104a6:	3301      	adds	r3, #1
 80104a8:	b2da      	uxtb	r2, r3
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80104b6:	2b03      	cmp	r3, #3
 80104b8:	d91b      	bls.n	80104f2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80104c4:	4413      	add	r3, r2
 80104c6:	b29a      	uxth	r2, r3
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80104ce:	429a      	cmp	r2, r3
 80104d0:	d30a      	bcc.n	80104e8 <tcp_receive+0x168>
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80104dc:	4413      	add	r3, r2
 80104de:	b29a      	uxth	r2, r3
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80104e6:	e004      	b.n	80104f2 <tcp_receive+0x172>
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80104ee:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80104f8:	2b02      	cmp	r3, #2
 80104fa:	d902      	bls.n	8010502 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80104fc:	6878      	ldr	r0, [r7, #4]
 80104fe:	f002 fb3f 	bl	8012b80 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010502:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010504:	2b00      	cmp	r3, #0
 8010506:	f040 8161 	bne.w	80107cc <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	2200      	movs	r2, #0
 801050e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010512:	e15b      	b.n	80107cc <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010514:	4b36      	ldr	r3, [pc, #216]	@ (80105f0 <tcp_receive+0x270>)
 8010516:	681a      	ldr	r2, [r3, #0]
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801051c:	1ad3      	subs	r3, r2, r3
 801051e:	3b01      	subs	r3, #1
 8010520:	2b00      	cmp	r3, #0
 8010522:	f2c0 814e 	blt.w	80107c2 <tcp_receive+0x442>
 8010526:	4b32      	ldr	r3, [pc, #200]	@ (80105f0 <tcp_receive+0x270>)
 8010528:	681a      	ldr	r2, [r3, #0]
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801052e:	1ad3      	subs	r3, r2, r3
 8010530:	2b00      	cmp	r3, #0
 8010532:	f300 8146 	bgt.w	80107c2 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	8b5b      	ldrh	r3, [r3, #26]
 801053a:	f003 0304 	and.w	r3, r3, #4
 801053e:	2b00      	cmp	r3, #0
 8010540:	d010      	beq.n	8010564 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	8b5b      	ldrh	r3, [r3, #26]
 8010546:	f023 0304 	bic.w	r3, r3, #4
 801054a:	b29a      	uxth	r2, r3
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	2200      	movs	r2, #0
 8010560:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	2200      	movs	r2, #0
 8010568:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010572:	10db      	asrs	r3, r3, #3
 8010574:	b21b      	sxth	r3, r3
 8010576:	b29a      	uxth	r2, r3
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801057e:	b29b      	uxth	r3, r3
 8010580:	4413      	add	r3, r2
 8010582:	b29b      	uxth	r3, r3
 8010584:	b21a      	sxth	r2, r3
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801058c:	4b18      	ldr	r3, [pc, #96]	@ (80105f0 <tcp_receive+0x270>)
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	b29a      	uxth	r2, r3
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010596:	b29b      	uxth	r3, r3
 8010598:	1ad3      	subs	r3, r2, r3
 801059a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	2200      	movs	r2, #0
 80105a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80105a4:	4b12      	ldr	r3, [pc, #72]	@ (80105f0 <tcp_receive+0x270>)
 80105a6:	681a      	ldr	r2, [r3, #0]
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	7d1b      	ldrb	r3, [r3, #20]
 80105b0:	2b03      	cmp	r3, #3
 80105b2:	f240 8097 	bls.w	80106e4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80105c2:	429a      	cmp	r2, r3
 80105c4:	d245      	bcs.n	8010652 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	8b5b      	ldrh	r3, [r3, #26]
 80105ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d014      	beq.n	80105fc <tcp_receive+0x27c>
 80105d2:	2301      	movs	r3, #1
 80105d4:	e013      	b.n	80105fe <tcp_receive+0x27e>
 80105d6:	bf00      	nop
 80105d8:	08019300 	.word	0x08019300
 80105dc:	08019630 	.word	0x08019630
 80105e0:	0801934c 	.word	0x0801934c
 80105e4:	0801964c 	.word	0x0801964c
 80105e8:	24007f40 	.word	0x24007f40
 80105ec:	24007f34 	.word	0x24007f34
 80105f0:	24007f38 	.word	0x24007f38
 80105f4:	24007f24 	.word	0x24007f24
 80105f8:	24007f3e 	.word	0x24007f3e
 80105fc:	2302      	movs	r3, #2
 80105fe:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010602:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8010606:	b29a      	uxth	r2, r3
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801060c:	fb12 f303 	smulbb	r3, r2, r3
 8010610:	b29b      	uxth	r3, r3
 8010612:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010614:	4293      	cmp	r3, r2
 8010616:	bf28      	it	cs
 8010618:	4613      	movcs	r3, r2
 801061a:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010622:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010624:	4413      	add	r3, r2
 8010626:	b29a      	uxth	r2, r3
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801062e:	429a      	cmp	r2, r3
 8010630:	d309      	bcc.n	8010646 <tcp_receive+0x2c6>
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010638:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801063a:	4413      	add	r3, r2
 801063c:	b29a      	uxth	r2, r3
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010644:	e04e      	b.n	80106e4 <tcp_receive+0x364>
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801064c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010650:	e048      	b.n	80106e4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010658:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801065a:	4413      	add	r3, r2
 801065c:	b29a      	uxth	r2, r3
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010664:	429a      	cmp	r2, r3
 8010666:	d309      	bcc.n	801067c <tcp_receive+0x2fc>
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801066e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010670:	4413      	add	r3, r2
 8010672:	b29a      	uxth	r2, r3
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801067a:	e004      	b.n	8010686 <tcp_receive+0x306>
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010682:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010692:	429a      	cmp	r2, r3
 8010694:	d326      	bcc.n	80106e4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80106a2:	1ad3      	subs	r3, r2, r3
 80106a4:	b29a      	uxth	r2, r3
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80106b6:	4413      	add	r3, r2
 80106b8:	b29a      	uxth	r2, r3
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80106c0:	429a      	cmp	r2, r3
 80106c2:	d30a      	bcc.n	80106da <tcp_receive+0x35a>
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80106ce:	4413      	add	r3, r2
 80106d0:	b29a      	uxth	r2, r3
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80106d8:	e004      	b.n	80106e4 <tcp_receive+0x364>
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80106e0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80106ec:	4a98      	ldr	r2, [pc, #608]	@ (8010950 <tcp_receive+0x5d0>)
 80106ee:	6878      	ldr	r0, [r7, #4]
 80106f0:	f7ff fdca 	bl	8010288 <tcp_free_acked_segments>
 80106f4:	4602      	mov	r2, r0
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010702:	4a94      	ldr	r2, [pc, #592]	@ (8010954 <tcp_receive+0x5d4>)
 8010704:	6878      	ldr	r0, [r7, #4]
 8010706:	f7ff fdbf 	bl	8010288 <tcp_free_acked_segments>
 801070a:	4602      	mov	r2, r0
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010714:	2b00      	cmp	r3, #0
 8010716:	d104      	bne.n	8010722 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801071e:	861a      	strh	r2, [r3, #48]	@ 0x30
 8010720:	e002      	b.n	8010728 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	2200      	movs	r2, #0
 8010726:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	2200      	movs	r2, #0
 801072c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010732:	2b00      	cmp	r3, #0
 8010734:	d103      	bne.n	801073e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	2200      	movs	r2, #0
 801073a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8010744:	4b84      	ldr	r3, [pc, #528]	@ (8010958 <tcp_receive+0x5d8>)
 8010746:	881b      	ldrh	r3, [r3, #0]
 8010748:	4413      	add	r3, r2
 801074a:	b29a      	uxth	r2, r3
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	8b5b      	ldrh	r3, [r3, #26]
 8010756:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801075a:	2b00      	cmp	r3, #0
 801075c:	d035      	beq.n	80107ca <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010762:	2b00      	cmp	r3, #0
 8010764:	d118      	bne.n	8010798 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801076a:	2b00      	cmp	r3, #0
 801076c:	d00c      	beq.n	8010788 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010776:	68db      	ldr	r3, [r3, #12]
 8010778:	685b      	ldr	r3, [r3, #4]
 801077a:	4618      	mov	r0, r3
 801077c:	f7fa fdab 	bl	800b2d6 <lwip_htonl>
 8010780:	4603      	mov	r3, r0
 8010782:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010784:	2b00      	cmp	r3, #0
 8010786:	dc20      	bgt.n	80107ca <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	8b5b      	ldrh	r3, [r3, #26]
 801078c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010790:	b29a      	uxth	r2, r3
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010796:	e018      	b.n	80107ca <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80107a0:	68db      	ldr	r3, [r3, #12]
 80107a2:	685b      	ldr	r3, [r3, #4]
 80107a4:	4618      	mov	r0, r3
 80107a6:	f7fa fd96 	bl	800b2d6 <lwip_htonl>
 80107aa:	4603      	mov	r3, r0
 80107ac:	1ae3      	subs	r3, r4, r3
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	dc0b      	bgt.n	80107ca <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	8b5b      	ldrh	r3, [r3, #26]
 80107b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80107ba:	b29a      	uxth	r2, r3
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80107c0:	e003      	b.n	80107ca <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80107c2:	6878      	ldr	r0, [r7, #4]
 80107c4:	f002 fbc8 	bl	8012f58 <tcp_send_empty_ack>
 80107c8:	e000      	b.n	80107cc <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80107ca:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d05b      	beq.n	801088c <tcp_receive+0x50c>
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80107d8:	4b60      	ldr	r3, [pc, #384]	@ (801095c <tcp_receive+0x5dc>)
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	1ad3      	subs	r3, r2, r3
 80107de:	2b00      	cmp	r3, #0
 80107e0:	da54      	bge.n	801088c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80107e2:	4b5f      	ldr	r3, [pc, #380]	@ (8010960 <tcp_receive+0x5e0>)
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	b29a      	uxth	r2, r3
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80107ec:	b29b      	uxth	r3, r3
 80107ee:	1ad3      	subs	r3, r2, r3
 80107f0:	b29b      	uxth	r3, r3
 80107f2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80107f6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010800:	10db      	asrs	r3, r3, #3
 8010802:	b21b      	sxth	r3, r3
 8010804:	b29b      	uxth	r3, r3
 8010806:	1ad3      	subs	r3, r2, r3
 8010808:	b29b      	uxth	r3, r3
 801080a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010814:	b29a      	uxth	r2, r3
 8010816:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801081a:	4413      	add	r3, r2
 801081c:	b29b      	uxth	r3, r3
 801081e:	b21a      	sxth	r2, r3
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8010824:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8010828:	2b00      	cmp	r3, #0
 801082a:	da05      	bge.n	8010838 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801082c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8010830:	425b      	negs	r3, r3
 8010832:	b29b      	uxth	r3, r3
 8010834:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010838:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010842:	109b      	asrs	r3, r3, #2
 8010844:	b21b      	sxth	r3, r3
 8010846:	b29b      	uxth	r3, r3
 8010848:	1ad3      	subs	r3, r2, r3
 801084a:	b29b      	uxth	r3, r3
 801084c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010856:	b29a      	uxth	r2, r3
 8010858:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801085c:	4413      	add	r3, r2
 801085e:	b29b      	uxth	r3, r3
 8010860:	b21a      	sxth	r2, r3
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801086c:	10db      	asrs	r3, r3, #3
 801086e:	b21b      	sxth	r3, r3
 8010870:	b29a      	uxth	r2, r3
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010878:	b29b      	uxth	r3, r3
 801087a:	4413      	add	r3, r2
 801087c:	b29b      	uxth	r3, r3
 801087e:	b21a      	sxth	r2, r3
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	2200      	movs	r2, #0
 801088a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801088c:	4b35      	ldr	r3, [pc, #212]	@ (8010964 <tcp_receive+0x5e4>)
 801088e:	881b      	ldrh	r3, [r3, #0]
 8010890:	2b00      	cmp	r3, #0
 8010892:	f000 84df 	beq.w	8011254 <tcp_receive+0xed4>
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	7d1b      	ldrb	r3, [r3, #20]
 801089a:	2b06      	cmp	r3, #6
 801089c:	f200 84da 	bhi.w	8011254 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80108a4:	4b30      	ldr	r3, [pc, #192]	@ (8010968 <tcp_receive+0x5e8>)
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	1ad3      	subs	r3, r2, r3
 80108aa:	3b01      	subs	r3, #1
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	f2c0 808f 	blt.w	80109d0 <tcp_receive+0x650>
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80108b6:	4b2b      	ldr	r3, [pc, #172]	@ (8010964 <tcp_receive+0x5e4>)
 80108b8:	881b      	ldrh	r3, [r3, #0]
 80108ba:	4619      	mov	r1, r3
 80108bc:	4b2a      	ldr	r3, [pc, #168]	@ (8010968 <tcp_receive+0x5e8>)
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	440b      	add	r3, r1
 80108c2:	1ad3      	subs	r3, r2, r3
 80108c4:	3301      	adds	r3, #1
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	f300 8082 	bgt.w	80109d0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80108cc:	4b27      	ldr	r3, [pc, #156]	@ (801096c <tcp_receive+0x5ec>)
 80108ce:	685b      	ldr	r3, [r3, #4]
 80108d0:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80108d6:	4b24      	ldr	r3, [pc, #144]	@ (8010968 <tcp_receive+0x5e8>)
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	1ad3      	subs	r3, r2, r3
 80108dc:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80108de:	4b23      	ldr	r3, [pc, #140]	@ (801096c <tcp_receive+0x5ec>)
 80108e0:	685b      	ldr	r3, [r3, #4]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d106      	bne.n	80108f4 <tcp_receive+0x574>
 80108e6:	4b22      	ldr	r3, [pc, #136]	@ (8010970 <tcp_receive+0x5f0>)
 80108e8:	f240 5294 	movw	r2, #1428	@ 0x594
 80108ec:	4921      	ldr	r1, [pc, #132]	@ (8010974 <tcp_receive+0x5f4>)
 80108ee:	4822      	ldr	r0, [pc, #136]	@ (8010978 <tcp_receive+0x5f8>)
 80108f0:	f005 febe 	bl	8016670 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80108f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108f6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80108fa:	4293      	cmp	r3, r2
 80108fc:	d906      	bls.n	801090c <tcp_receive+0x58c>
 80108fe:	4b1c      	ldr	r3, [pc, #112]	@ (8010970 <tcp_receive+0x5f0>)
 8010900:	f240 5295 	movw	r2, #1429	@ 0x595
 8010904:	491d      	ldr	r1, [pc, #116]	@ (801097c <tcp_receive+0x5fc>)
 8010906:	481c      	ldr	r0, [pc, #112]	@ (8010978 <tcp_receive+0x5f8>)
 8010908:	f005 feb2 	bl	8016670 <iprintf>
      off = (u16_t)off32;
 801090c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801090e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010912:	4b16      	ldr	r3, [pc, #88]	@ (801096c <tcp_receive+0x5ec>)
 8010914:	685b      	ldr	r3, [r3, #4]
 8010916:	891b      	ldrh	r3, [r3, #8]
 8010918:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801091c:	429a      	cmp	r2, r3
 801091e:	d906      	bls.n	801092e <tcp_receive+0x5ae>
 8010920:	4b13      	ldr	r3, [pc, #76]	@ (8010970 <tcp_receive+0x5f0>)
 8010922:	f240 5297 	movw	r2, #1431	@ 0x597
 8010926:	4916      	ldr	r1, [pc, #88]	@ (8010980 <tcp_receive+0x600>)
 8010928:	4813      	ldr	r0, [pc, #76]	@ (8010978 <tcp_receive+0x5f8>)
 801092a:	f005 fea1 	bl	8016670 <iprintf>
      inseg.len -= off;
 801092e:	4b0f      	ldr	r3, [pc, #60]	@ (801096c <tcp_receive+0x5ec>)
 8010930:	891a      	ldrh	r2, [r3, #8]
 8010932:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010936:	1ad3      	subs	r3, r2, r3
 8010938:	b29a      	uxth	r2, r3
 801093a:	4b0c      	ldr	r3, [pc, #48]	@ (801096c <tcp_receive+0x5ec>)
 801093c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801093e:	4b0b      	ldr	r3, [pc, #44]	@ (801096c <tcp_receive+0x5ec>)
 8010940:	685b      	ldr	r3, [r3, #4]
 8010942:	891a      	ldrh	r2, [r3, #8]
 8010944:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010948:	1ad3      	subs	r3, r2, r3
 801094a:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 801094c:	e02a      	b.n	80109a4 <tcp_receive+0x624>
 801094e:	bf00      	nop
 8010950:	08019668 	.word	0x08019668
 8010954:	08019670 	.word	0x08019670
 8010958:	24007f3c 	.word	0x24007f3c
 801095c:	24007f38 	.word	0x24007f38
 8010960:	24007efc 	.word	0x24007efc
 8010964:	24007f3e 	.word	0x24007f3e
 8010968:	24007f34 	.word	0x24007f34
 801096c:	24007f14 	.word	0x24007f14
 8010970:	08019300 	.word	0x08019300
 8010974:	08019678 	.word	0x08019678
 8010978:	0801934c 	.word	0x0801934c
 801097c:	08019688 	.word	0x08019688
 8010980:	08019698 	.word	0x08019698
        off -= p->len;
 8010984:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010986:	895b      	ldrh	r3, [r3, #10]
 8010988:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801098c:	1ad3      	subs	r3, r2, r3
 801098e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010992:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010994:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8010996:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010998:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801099a:	2200      	movs	r2, #0
 801099c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801099e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 80109a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80109a6:	895b      	ldrh	r3, [r3, #10]
 80109a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80109ac:	429a      	cmp	r2, r3
 80109ae:	d8e9      	bhi.n	8010984 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80109b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80109b4:	4619      	mov	r1, r3
 80109b6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80109b8:	f7fc f89c 	bl	800caf4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80109c0:	4a90      	ldr	r2, [pc, #576]	@ (8010c04 <tcp_receive+0x884>)
 80109c2:	6013      	str	r3, [r2, #0]
 80109c4:	4b90      	ldr	r3, [pc, #576]	@ (8010c08 <tcp_receive+0x888>)
 80109c6:	68db      	ldr	r3, [r3, #12]
 80109c8:	4a8e      	ldr	r2, [pc, #568]	@ (8010c04 <tcp_receive+0x884>)
 80109ca:	6812      	ldr	r2, [r2, #0]
 80109cc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80109ce:	e00d      	b.n	80109ec <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80109d0:	4b8c      	ldr	r3, [pc, #560]	@ (8010c04 <tcp_receive+0x884>)
 80109d2:	681a      	ldr	r2, [r3, #0]
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80109d8:	1ad3      	subs	r3, r2, r3
 80109da:	2b00      	cmp	r3, #0
 80109dc:	da06      	bge.n	80109ec <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	8b5b      	ldrh	r3, [r3, #26]
 80109e2:	f043 0302 	orr.w	r3, r3, #2
 80109e6:	b29a      	uxth	r2, r3
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80109ec:	4b85      	ldr	r3, [pc, #532]	@ (8010c04 <tcp_receive+0x884>)
 80109ee:	681a      	ldr	r2, [r3, #0]
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80109f4:	1ad3      	subs	r3, r2, r3
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	f2c0 8427 	blt.w	801124a <tcp_receive+0xeca>
 80109fc:	4b81      	ldr	r3, [pc, #516]	@ (8010c04 <tcp_receive+0x884>)
 80109fe:	681a      	ldr	r2, [r3, #0]
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a04:	6879      	ldr	r1, [r7, #4]
 8010a06:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010a08:	440b      	add	r3, r1
 8010a0a:	1ad3      	subs	r3, r2, r3
 8010a0c:	3301      	adds	r3, #1
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	f300 841b 	bgt.w	801124a <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010a18:	4b7a      	ldr	r3, [pc, #488]	@ (8010c04 <tcp_receive+0x884>)
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	429a      	cmp	r2, r3
 8010a1e:	f040 8298 	bne.w	8010f52 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010a22:	4b79      	ldr	r3, [pc, #484]	@ (8010c08 <tcp_receive+0x888>)
 8010a24:	891c      	ldrh	r4, [r3, #8]
 8010a26:	4b78      	ldr	r3, [pc, #480]	@ (8010c08 <tcp_receive+0x888>)
 8010a28:	68db      	ldr	r3, [r3, #12]
 8010a2a:	899b      	ldrh	r3, [r3, #12]
 8010a2c:	b29b      	uxth	r3, r3
 8010a2e:	4618      	mov	r0, r3
 8010a30:	f7fa fc3c 	bl	800b2ac <lwip_htons>
 8010a34:	4603      	mov	r3, r0
 8010a36:	b2db      	uxtb	r3, r3
 8010a38:	f003 0303 	and.w	r3, r3, #3
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d001      	beq.n	8010a44 <tcp_receive+0x6c4>
 8010a40:	2301      	movs	r3, #1
 8010a42:	e000      	b.n	8010a46 <tcp_receive+0x6c6>
 8010a44:	2300      	movs	r3, #0
 8010a46:	4423      	add	r3, r4
 8010a48:	b29a      	uxth	r2, r3
 8010a4a:	4b70      	ldr	r3, [pc, #448]	@ (8010c0c <tcp_receive+0x88c>)
 8010a4c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010a52:	4b6e      	ldr	r3, [pc, #440]	@ (8010c0c <tcp_receive+0x88c>)
 8010a54:	881b      	ldrh	r3, [r3, #0]
 8010a56:	429a      	cmp	r2, r3
 8010a58:	d274      	bcs.n	8010b44 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010a5a:	4b6b      	ldr	r3, [pc, #428]	@ (8010c08 <tcp_receive+0x888>)
 8010a5c:	68db      	ldr	r3, [r3, #12]
 8010a5e:	899b      	ldrh	r3, [r3, #12]
 8010a60:	b29b      	uxth	r3, r3
 8010a62:	4618      	mov	r0, r3
 8010a64:	f7fa fc22 	bl	800b2ac <lwip_htons>
 8010a68:	4603      	mov	r3, r0
 8010a6a:	b2db      	uxtb	r3, r3
 8010a6c:	f003 0301 	and.w	r3, r3, #1
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d01e      	beq.n	8010ab2 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010a74:	4b64      	ldr	r3, [pc, #400]	@ (8010c08 <tcp_receive+0x888>)
 8010a76:	68db      	ldr	r3, [r3, #12]
 8010a78:	899b      	ldrh	r3, [r3, #12]
 8010a7a:	b29b      	uxth	r3, r3
 8010a7c:	b21b      	sxth	r3, r3
 8010a7e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8010a82:	b21c      	sxth	r4, r3
 8010a84:	4b60      	ldr	r3, [pc, #384]	@ (8010c08 <tcp_receive+0x888>)
 8010a86:	68db      	ldr	r3, [r3, #12]
 8010a88:	899b      	ldrh	r3, [r3, #12]
 8010a8a:	b29b      	uxth	r3, r3
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	f7fa fc0d 	bl	800b2ac <lwip_htons>
 8010a92:	4603      	mov	r3, r0
 8010a94:	b2db      	uxtb	r3, r3
 8010a96:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8010a9a:	b29b      	uxth	r3, r3
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f7fa fc05 	bl	800b2ac <lwip_htons>
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	b21b      	sxth	r3, r3
 8010aa6:	4323      	orrs	r3, r4
 8010aa8:	b21a      	sxth	r2, r3
 8010aaa:	4b57      	ldr	r3, [pc, #348]	@ (8010c08 <tcp_receive+0x888>)
 8010aac:	68db      	ldr	r3, [r3, #12]
 8010aae:	b292      	uxth	r2, r2
 8010ab0:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010ab6:	4b54      	ldr	r3, [pc, #336]	@ (8010c08 <tcp_receive+0x888>)
 8010ab8:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010aba:	4b53      	ldr	r3, [pc, #332]	@ (8010c08 <tcp_receive+0x888>)
 8010abc:	68db      	ldr	r3, [r3, #12]
 8010abe:	899b      	ldrh	r3, [r3, #12]
 8010ac0:	b29b      	uxth	r3, r3
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	f7fa fbf2 	bl	800b2ac <lwip_htons>
 8010ac8:	4603      	mov	r3, r0
 8010aca:	b2db      	uxtb	r3, r3
 8010acc:	f003 0302 	and.w	r3, r3, #2
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d005      	beq.n	8010ae0 <tcp_receive+0x760>
            inseg.len -= 1;
 8010ad4:	4b4c      	ldr	r3, [pc, #304]	@ (8010c08 <tcp_receive+0x888>)
 8010ad6:	891b      	ldrh	r3, [r3, #8]
 8010ad8:	3b01      	subs	r3, #1
 8010ada:	b29a      	uxth	r2, r3
 8010adc:	4b4a      	ldr	r3, [pc, #296]	@ (8010c08 <tcp_receive+0x888>)
 8010ade:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010ae0:	4b49      	ldr	r3, [pc, #292]	@ (8010c08 <tcp_receive+0x888>)
 8010ae2:	685b      	ldr	r3, [r3, #4]
 8010ae4:	4a48      	ldr	r2, [pc, #288]	@ (8010c08 <tcp_receive+0x888>)
 8010ae6:	8912      	ldrh	r2, [r2, #8]
 8010ae8:	4611      	mov	r1, r2
 8010aea:	4618      	mov	r0, r3
 8010aec:	f7fb ff02 	bl	800c8f4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010af0:	4b45      	ldr	r3, [pc, #276]	@ (8010c08 <tcp_receive+0x888>)
 8010af2:	891c      	ldrh	r4, [r3, #8]
 8010af4:	4b44      	ldr	r3, [pc, #272]	@ (8010c08 <tcp_receive+0x888>)
 8010af6:	68db      	ldr	r3, [r3, #12]
 8010af8:	899b      	ldrh	r3, [r3, #12]
 8010afa:	b29b      	uxth	r3, r3
 8010afc:	4618      	mov	r0, r3
 8010afe:	f7fa fbd5 	bl	800b2ac <lwip_htons>
 8010b02:	4603      	mov	r3, r0
 8010b04:	b2db      	uxtb	r3, r3
 8010b06:	f003 0303 	and.w	r3, r3, #3
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d001      	beq.n	8010b12 <tcp_receive+0x792>
 8010b0e:	2301      	movs	r3, #1
 8010b10:	e000      	b.n	8010b14 <tcp_receive+0x794>
 8010b12:	2300      	movs	r3, #0
 8010b14:	4423      	add	r3, r4
 8010b16:	b29a      	uxth	r2, r3
 8010b18:	4b3c      	ldr	r3, [pc, #240]	@ (8010c0c <tcp_receive+0x88c>)
 8010b1a:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010b1c:	4b3b      	ldr	r3, [pc, #236]	@ (8010c0c <tcp_receive+0x88c>)
 8010b1e:	881b      	ldrh	r3, [r3, #0]
 8010b20:	461a      	mov	r2, r3
 8010b22:	4b38      	ldr	r3, [pc, #224]	@ (8010c04 <tcp_receive+0x884>)
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	441a      	add	r2, r3
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b2c:	6879      	ldr	r1, [r7, #4]
 8010b2e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010b30:	440b      	add	r3, r1
 8010b32:	429a      	cmp	r2, r3
 8010b34:	d006      	beq.n	8010b44 <tcp_receive+0x7c4>
 8010b36:	4b36      	ldr	r3, [pc, #216]	@ (8010c10 <tcp_receive+0x890>)
 8010b38:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8010b3c:	4935      	ldr	r1, [pc, #212]	@ (8010c14 <tcp_receive+0x894>)
 8010b3e:	4836      	ldr	r0, [pc, #216]	@ (8010c18 <tcp_receive+0x898>)
 8010b40:	f005 fd96 	bl	8016670 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	f000 80e6 	beq.w	8010d1a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010b4e:	4b2e      	ldr	r3, [pc, #184]	@ (8010c08 <tcp_receive+0x888>)
 8010b50:	68db      	ldr	r3, [r3, #12]
 8010b52:	899b      	ldrh	r3, [r3, #12]
 8010b54:	b29b      	uxth	r3, r3
 8010b56:	4618      	mov	r0, r3
 8010b58:	f7fa fba8 	bl	800b2ac <lwip_htons>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	b2db      	uxtb	r3, r3
 8010b60:	f003 0301 	and.w	r3, r3, #1
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d010      	beq.n	8010b8a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010b68:	e00a      	b.n	8010b80 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010b6e:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010b74:	681a      	ldr	r2, [r3, #0]
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8010b7a:	68f8      	ldr	r0, [r7, #12]
 8010b7c:	f7fd fcc5 	bl	800e50a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d1f0      	bne.n	8010b6a <tcp_receive+0x7ea>
 8010b88:	e0c7      	b.n	8010d1a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010b90:	e051      	b.n	8010c36 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010b92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b94:	68db      	ldr	r3, [r3, #12]
 8010b96:	899b      	ldrh	r3, [r3, #12]
 8010b98:	b29b      	uxth	r3, r3
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	f7fa fb86 	bl	800b2ac <lwip_htons>
 8010ba0:	4603      	mov	r3, r0
 8010ba2:	b2db      	uxtb	r3, r3
 8010ba4:	f003 0301 	and.w	r3, r3, #1
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d03c      	beq.n	8010c26 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010bac:	4b16      	ldr	r3, [pc, #88]	@ (8010c08 <tcp_receive+0x888>)
 8010bae:	68db      	ldr	r3, [r3, #12]
 8010bb0:	899b      	ldrh	r3, [r3, #12]
 8010bb2:	b29b      	uxth	r3, r3
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	f7fa fb79 	bl	800b2ac <lwip_htons>
 8010bba:	4603      	mov	r3, r0
 8010bbc:	b2db      	uxtb	r3, r3
 8010bbe:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d12f      	bne.n	8010c26 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010bc6:	4b10      	ldr	r3, [pc, #64]	@ (8010c08 <tcp_receive+0x888>)
 8010bc8:	68db      	ldr	r3, [r3, #12]
 8010bca:	899b      	ldrh	r3, [r3, #12]
 8010bcc:	b29c      	uxth	r4, r3
 8010bce:	2001      	movs	r0, #1
 8010bd0:	f7fa fb6c 	bl	800b2ac <lwip_htons>
 8010bd4:	4603      	mov	r3, r0
 8010bd6:	461a      	mov	r2, r3
 8010bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8010c08 <tcp_receive+0x888>)
 8010bda:	68db      	ldr	r3, [r3, #12]
 8010bdc:	4322      	orrs	r2, r4
 8010bde:	b292      	uxth	r2, r2
 8010be0:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010be2:	4b09      	ldr	r3, [pc, #36]	@ (8010c08 <tcp_receive+0x888>)
 8010be4:	891c      	ldrh	r4, [r3, #8]
 8010be6:	4b08      	ldr	r3, [pc, #32]	@ (8010c08 <tcp_receive+0x888>)
 8010be8:	68db      	ldr	r3, [r3, #12]
 8010bea:	899b      	ldrh	r3, [r3, #12]
 8010bec:	b29b      	uxth	r3, r3
 8010bee:	4618      	mov	r0, r3
 8010bf0:	f7fa fb5c 	bl	800b2ac <lwip_htons>
 8010bf4:	4603      	mov	r3, r0
 8010bf6:	b2db      	uxtb	r3, r3
 8010bf8:	f003 0303 	and.w	r3, r3, #3
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d00d      	beq.n	8010c1c <tcp_receive+0x89c>
 8010c00:	2301      	movs	r3, #1
 8010c02:	e00c      	b.n	8010c1e <tcp_receive+0x89e>
 8010c04:	24007f34 	.word	0x24007f34
 8010c08:	24007f14 	.word	0x24007f14
 8010c0c:	24007f3e 	.word	0x24007f3e
 8010c10:	08019300 	.word	0x08019300
 8010c14:	080196a8 	.word	0x080196a8
 8010c18:	0801934c 	.word	0x0801934c
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	4423      	add	r3, r4
 8010c20:	b29a      	uxth	r2, r3
 8010c22:	4b98      	ldr	r3, [pc, #608]	@ (8010e84 <tcp_receive+0xb04>)
 8010c24:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8010c26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c28:	613b      	str	r3, [r7, #16]
              next = next->next;
 8010c2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8010c30:	6938      	ldr	r0, [r7, #16]
 8010c32:	f7fd fc6a 	bl	800e50a <tcp_seg_free>
            while (next &&
 8010c36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d00e      	beq.n	8010c5a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010c3c:	4b91      	ldr	r3, [pc, #580]	@ (8010e84 <tcp_receive+0xb04>)
 8010c3e:	881b      	ldrh	r3, [r3, #0]
 8010c40:	461a      	mov	r2, r3
 8010c42:	4b91      	ldr	r3, [pc, #580]	@ (8010e88 <tcp_receive+0xb08>)
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	441a      	add	r2, r3
 8010c48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c4a:	68db      	ldr	r3, [r3, #12]
 8010c4c:	685b      	ldr	r3, [r3, #4]
 8010c4e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010c50:	8909      	ldrh	r1, [r1, #8]
 8010c52:	440b      	add	r3, r1
 8010c54:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	da9b      	bge.n	8010b92 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8010c5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d059      	beq.n	8010d14 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8010c60:	4b88      	ldr	r3, [pc, #544]	@ (8010e84 <tcp_receive+0xb04>)
 8010c62:	881b      	ldrh	r3, [r3, #0]
 8010c64:	461a      	mov	r2, r3
 8010c66:	4b88      	ldr	r3, [pc, #544]	@ (8010e88 <tcp_receive+0xb08>)
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	441a      	add	r2, r3
 8010c6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c6e:	68db      	ldr	r3, [r3, #12]
 8010c70:	685b      	ldr	r3, [r3, #4]
 8010c72:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	dd4d      	ble.n	8010d14 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010c78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c7a:	68db      	ldr	r3, [r3, #12]
 8010c7c:	685b      	ldr	r3, [r3, #4]
 8010c7e:	b29a      	uxth	r2, r3
 8010c80:	4b81      	ldr	r3, [pc, #516]	@ (8010e88 <tcp_receive+0xb08>)
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	b29b      	uxth	r3, r3
 8010c86:	1ad3      	subs	r3, r2, r3
 8010c88:	b29a      	uxth	r2, r3
 8010c8a:	4b80      	ldr	r3, [pc, #512]	@ (8010e8c <tcp_receive+0xb0c>)
 8010c8c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010c8e:	4b7f      	ldr	r3, [pc, #508]	@ (8010e8c <tcp_receive+0xb0c>)
 8010c90:	68db      	ldr	r3, [r3, #12]
 8010c92:	899b      	ldrh	r3, [r3, #12]
 8010c94:	b29b      	uxth	r3, r3
 8010c96:	4618      	mov	r0, r3
 8010c98:	f7fa fb08 	bl	800b2ac <lwip_htons>
 8010c9c:	4603      	mov	r3, r0
 8010c9e:	b2db      	uxtb	r3, r3
 8010ca0:	f003 0302 	and.w	r3, r3, #2
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d005      	beq.n	8010cb4 <tcp_receive+0x934>
                inseg.len -= 1;
 8010ca8:	4b78      	ldr	r3, [pc, #480]	@ (8010e8c <tcp_receive+0xb0c>)
 8010caa:	891b      	ldrh	r3, [r3, #8]
 8010cac:	3b01      	subs	r3, #1
 8010cae:	b29a      	uxth	r2, r3
 8010cb0:	4b76      	ldr	r3, [pc, #472]	@ (8010e8c <tcp_receive+0xb0c>)
 8010cb2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010cb4:	4b75      	ldr	r3, [pc, #468]	@ (8010e8c <tcp_receive+0xb0c>)
 8010cb6:	685b      	ldr	r3, [r3, #4]
 8010cb8:	4a74      	ldr	r2, [pc, #464]	@ (8010e8c <tcp_receive+0xb0c>)
 8010cba:	8912      	ldrh	r2, [r2, #8]
 8010cbc:	4611      	mov	r1, r2
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	f7fb fe18 	bl	800c8f4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010cc4:	4b71      	ldr	r3, [pc, #452]	@ (8010e8c <tcp_receive+0xb0c>)
 8010cc6:	891c      	ldrh	r4, [r3, #8]
 8010cc8:	4b70      	ldr	r3, [pc, #448]	@ (8010e8c <tcp_receive+0xb0c>)
 8010cca:	68db      	ldr	r3, [r3, #12]
 8010ccc:	899b      	ldrh	r3, [r3, #12]
 8010cce:	b29b      	uxth	r3, r3
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	f7fa faeb 	bl	800b2ac <lwip_htons>
 8010cd6:	4603      	mov	r3, r0
 8010cd8:	b2db      	uxtb	r3, r3
 8010cda:	f003 0303 	and.w	r3, r3, #3
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d001      	beq.n	8010ce6 <tcp_receive+0x966>
 8010ce2:	2301      	movs	r3, #1
 8010ce4:	e000      	b.n	8010ce8 <tcp_receive+0x968>
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	4423      	add	r3, r4
 8010cea:	b29a      	uxth	r2, r3
 8010cec:	4b65      	ldr	r3, [pc, #404]	@ (8010e84 <tcp_receive+0xb04>)
 8010cee:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010cf0:	4b64      	ldr	r3, [pc, #400]	@ (8010e84 <tcp_receive+0xb04>)
 8010cf2:	881b      	ldrh	r3, [r3, #0]
 8010cf4:	461a      	mov	r2, r3
 8010cf6:	4b64      	ldr	r3, [pc, #400]	@ (8010e88 <tcp_receive+0xb08>)
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	441a      	add	r2, r3
 8010cfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010cfe:	68db      	ldr	r3, [r3, #12]
 8010d00:	685b      	ldr	r3, [r3, #4]
 8010d02:	429a      	cmp	r2, r3
 8010d04:	d006      	beq.n	8010d14 <tcp_receive+0x994>
 8010d06:	4b62      	ldr	r3, [pc, #392]	@ (8010e90 <tcp_receive+0xb10>)
 8010d08:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8010d0c:	4961      	ldr	r1, [pc, #388]	@ (8010e94 <tcp_receive+0xb14>)
 8010d0e:	4862      	ldr	r0, [pc, #392]	@ (8010e98 <tcp_receive+0xb18>)
 8010d10:	f005 fcae 	bl	8016670 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010d18:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010d1a:	4b5a      	ldr	r3, [pc, #360]	@ (8010e84 <tcp_receive+0xb04>)
 8010d1c:	881b      	ldrh	r3, [r3, #0]
 8010d1e:	461a      	mov	r2, r3
 8010d20:	4b59      	ldr	r3, [pc, #356]	@ (8010e88 <tcp_receive+0xb08>)
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	441a      	add	r2, r3
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010d2e:	4b55      	ldr	r3, [pc, #340]	@ (8010e84 <tcp_receive+0xb04>)
 8010d30:	881b      	ldrh	r3, [r3, #0]
 8010d32:	429a      	cmp	r2, r3
 8010d34:	d206      	bcs.n	8010d44 <tcp_receive+0x9c4>
 8010d36:	4b56      	ldr	r3, [pc, #344]	@ (8010e90 <tcp_receive+0xb10>)
 8010d38:	f240 6207 	movw	r2, #1543	@ 0x607
 8010d3c:	4957      	ldr	r1, [pc, #348]	@ (8010e9c <tcp_receive+0xb1c>)
 8010d3e:	4856      	ldr	r0, [pc, #344]	@ (8010e98 <tcp_receive+0xb18>)
 8010d40:	f005 fc96 	bl	8016670 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010d48:	4b4e      	ldr	r3, [pc, #312]	@ (8010e84 <tcp_receive+0xb04>)
 8010d4a:	881b      	ldrh	r3, [r3, #0]
 8010d4c:	1ad3      	subs	r3, r2, r3
 8010d4e:	b29a      	uxth	r2, r3
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010d54:	6878      	ldr	r0, [r7, #4]
 8010d56:	f7fc feb1 	bl	800dabc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010d5a:	4b4c      	ldr	r3, [pc, #304]	@ (8010e8c <tcp_receive+0xb0c>)
 8010d5c:	685b      	ldr	r3, [r3, #4]
 8010d5e:	891b      	ldrh	r3, [r3, #8]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d006      	beq.n	8010d72 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8010d64:	4b49      	ldr	r3, [pc, #292]	@ (8010e8c <tcp_receive+0xb0c>)
 8010d66:	685b      	ldr	r3, [r3, #4]
 8010d68:	4a4d      	ldr	r2, [pc, #308]	@ (8010ea0 <tcp_receive+0xb20>)
 8010d6a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010d6c:	4b47      	ldr	r3, [pc, #284]	@ (8010e8c <tcp_receive+0xb0c>)
 8010d6e:	2200      	movs	r2, #0
 8010d70:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010d72:	4b46      	ldr	r3, [pc, #280]	@ (8010e8c <tcp_receive+0xb0c>)
 8010d74:	68db      	ldr	r3, [r3, #12]
 8010d76:	899b      	ldrh	r3, [r3, #12]
 8010d78:	b29b      	uxth	r3, r3
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	f7fa fa96 	bl	800b2ac <lwip_htons>
 8010d80:	4603      	mov	r3, r0
 8010d82:	b2db      	uxtb	r3, r3
 8010d84:	f003 0301 	and.w	r3, r3, #1
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	f000 80b8 	beq.w	8010efe <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010d8e:	4b45      	ldr	r3, [pc, #276]	@ (8010ea4 <tcp_receive+0xb24>)
 8010d90:	781b      	ldrb	r3, [r3, #0]
 8010d92:	f043 0320 	orr.w	r3, r3, #32
 8010d96:	b2da      	uxtb	r2, r3
 8010d98:	4b42      	ldr	r3, [pc, #264]	@ (8010ea4 <tcp_receive+0xb24>)
 8010d9a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010d9c:	e0af      	b.n	8010efe <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010da2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010da8:	68db      	ldr	r3, [r3, #12]
 8010daa:	685b      	ldr	r3, [r3, #4]
 8010dac:	4a36      	ldr	r2, [pc, #216]	@ (8010e88 <tcp_receive+0xb08>)
 8010dae:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010db0:	68bb      	ldr	r3, [r7, #8]
 8010db2:	891b      	ldrh	r3, [r3, #8]
 8010db4:	461c      	mov	r4, r3
 8010db6:	68bb      	ldr	r3, [r7, #8]
 8010db8:	68db      	ldr	r3, [r3, #12]
 8010dba:	899b      	ldrh	r3, [r3, #12]
 8010dbc:	b29b      	uxth	r3, r3
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	f7fa fa74 	bl	800b2ac <lwip_htons>
 8010dc4:	4603      	mov	r3, r0
 8010dc6:	b2db      	uxtb	r3, r3
 8010dc8:	f003 0303 	and.w	r3, r3, #3
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d001      	beq.n	8010dd4 <tcp_receive+0xa54>
 8010dd0:	2301      	movs	r3, #1
 8010dd2:	e000      	b.n	8010dd6 <tcp_receive+0xa56>
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	191a      	adds	r2, r3, r4
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ddc:	441a      	add	r2, r3
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010de6:	461c      	mov	r4, r3
 8010de8:	68bb      	ldr	r3, [r7, #8]
 8010dea:	891b      	ldrh	r3, [r3, #8]
 8010dec:	461d      	mov	r5, r3
 8010dee:	68bb      	ldr	r3, [r7, #8]
 8010df0:	68db      	ldr	r3, [r3, #12]
 8010df2:	899b      	ldrh	r3, [r3, #12]
 8010df4:	b29b      	uxth	r3, r3
 8010df6:	4618      	mov	r0, r3
 8010df8:	f7fa fa58 	bl	800b2ac <lwip_htons>
 8010dfc:	4603      	mov	r3, r0
 8010dfe:	b2db      	uxtb	r3, r3
 8010e00:	f003 0303 	and.w	r3, r3, #3
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d001      	beq.n	8010e0c <tcp_receive+0xa8c>
 8010e08:	2301      	movs	r3, #1
 8010e0a:	e000      	b.n	8010e0e <tcp_receive+0xa8e>
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	442b      	add	r3, r5
 8010e10:	429c      	cmp	r4, r3
 8010e12:	d206      	bcs.n	8010e22 <tcp_receive+0xaa2>
 8010e14:	4b1e      	ldr	r3, [pc, #120]	@ (8010e90 <tcp_receive+0xb10>)
 8010e16:	f240 622b 	movw	r2, #1579	@ 0x62b
 8010e1a:	4923      	ldr	r1, [pc, #140]	@ (8010ea8 <tcp_receive+0xb28>)
 8010e1c:	481e      	ldr	r0, [pc, #120]	@ (8010e98 <tcp_receive+0xb18>)
 8010e1e:	f005 fc27 	bl	8016670 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010e22:	68bb      	ldr	r3, [r7, #8]
 8010e24:	891b      	ldrh	r3, [r3, #8]
 8010e26:	461c      	mov	r4, r3
 8010e28:	68bb      	ldr	r3, [r7, #8]
 8010e2a:	68db      	ldr	r3, [r3, #12]
 8010e2c:	899b      	ldrh	r3, [r3, #12]
 8010e2e:	b29b      	uxth	r3, r3
 8010e30:	4618      	mov	r0, r3
 8010e32:	f7fa fa3b 	bl	800b2ac <lwip_htons>
 8010e36:	4603      	mov	r3, r0
 8010e38:	b2db      	uxtb	r3, r3
 8010e3a:	f003 0303 	and.w	r3, r3, #3
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d001      	beq.n	8010e46 <tcp_receive+0xac6>
 8010e42:	2301      	movs	r3, #1
 8010e44:	e000      	b.n	8010e48 <tcp_receive+0xac8>
 8010e46:	2300      	movs	r3, #0
 8010e48:	1919      	adds	r1, r3, r4
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010e4e:	b28b      	uxth	r3, r1
 8010e50:	1ad3      	subs	r3, r2, r3
 8010e52:	b29a      	uxth	r2, r3
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010e58:	6878      	ldr	r0, [r7, #4]
 8010e5a:	f7fc fe2f 	bl	800dabc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8010e5e:	68bb      	ldr	r3, [r7, #8]
 8010e60:	685b      	ldr	r3, [r3, #4]
 8010e62:	891b      	ldrh	r3, [r3, #8]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d028      	beq.n	8010eba <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010e68:	4b0d      	ldr	r3, [pc, #52]	@ (8010ea0 <tcp_receive+0xb20>)
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d01d      	beq.n	8010eac <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8010e70:	4b0b      	ldr	r3, [pc, #44]	@ (8010ea0 <tcp_receive+0xb20>)
 8010e72:	681a      	ldr	r2, [r3, #0]
 8010e74:	68bb      	ldr	r3, [r7, #8]
 8010e76:	685b      	ldr	r3, [r3, #4]
 8010e78:	4619      	mov	r1, r3
 8010e7a:	4610      	mov	r0, r2
 8010e7c:	f7fb ff8e 	bl	800cd9c <pbuf_cat>
 8010e80:	e018      	b.n	8010eb4 <tcp_receive+0xb34>
 8010e82:	bf00      	nop
 8010e84:	24007f3e 	.word	0x24007f3e
 8010e88:	24007f34 	.word	0x24007f34
 8010e8c:	24007f14 	.word	0x24007f14
 8010e90:	08019300 	.word	0x08019300
 8010e94:	080196e0 	.word	0x080196e0
 8010e98:	0801934c 	.word	0x0801934c
 8010e9c:	0801971c 	.word	0x0801971c
 8010ea0:	24007f44 	.word	0x24007f44
 8010ea4:	24007f41 	.word	0x24007f41
 8010ea8:	0801973c 	.word	0x0801973c
            } else {
              recv_data = cseg->p;
 8010eac:	68bb      	ldr	r3, [r7, #8]
 8010eae:	685b      	ldr	r3, [r3, #4]
 8010eb0:	4a70      	ldr	r2, [pc, #448]	@ (8011074 <tcp_receive+0xcf4>)
 8010eb2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010eb4:	68bb      	ldr	r3, [r7, #8]
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010eba:	68bb      	ldr	r3, [r7, #8]
 8010ebc:	68db      	ldr	r3, [r3, #12]
 8010ebe:	899b      	ldrh	r3, [r3, #12]
 8010ec0:	b29b      	uxth	r3, r3
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	f7fa f9f2 	bl	800b2ac <lwip_htons>
 8010ec8:	4603      	mov	r3, r0
 8010eca:	b2db      	uxtb	r3, r3
 8010ecc:	f003 0301 	and.w	r3, r3, #1
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d00d      	beq.n	8010ef0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010ed4:	4b68      	ldr	r3, [pc, #416]	@ (8011078 <tcp_receive+0xcf8>)
 8010ed6:	781b      	ldrb	r3, [r3, #0]
 8010ed8:	f043 0320 	orr.w	r3, r3, #32
 8010edc:	b2da      	uxtb	r2, r3
 8010ede:	4b66      	ldr	r3, [pc, #408]	@ (8011078 <tcp_receive+0xcf8>)
 8010ee0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	7d1b      	ldrb	r3, [r3, #20]
 8010ee6:	2b04      	cmp	r3, #4
 8010ee8:	d102      	bne.n	8010ef0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	2207      	movs	r2, #7
 8010eee:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010ef0:	68bb      	ldr	r3, [r7, #8]
 8010ef2:	681a      	ldr	r2, [r3, #0]
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8010ef8:	68b8      	ldr	r0, [r7, #8]
 8010efa:	f7fd fb06 	bl	800e50a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d008      	beq.n	8010f18 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010f0a:	68db      	ldr	r3, [r3, #12]
 8010f0c:	685a      	ldr	r2, [r3, #4]
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8010f12:	429a      	cmp	r2, r3
 8010f14:	f43f af43 	beq.w	8010d9e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	8b5b      	ldrh	r3, [r3, #26]
 8010f1c:	f003 0301 	and.w	r3, r3, #1
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d00e      	beq.n	8010f42 <tcp_receive+0xbc2>
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	8b5b      	ldrh	r3, [r3, #26]
 8010f28:	f023 0301 	bic.w	r3, r3, #1
 8010f2c:	b29a      	uxth	r2, r3
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	835a      	strh	r2, [r3, #26]
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	8b5b      	ldrh	r3, [r3, #26]
 8010f36:	f043 0302 	orr.w	r3, r3, #2
 8010f3a:	b29a      	uxth	r2, r3
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010f40:	e187      	b.n	8011252 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	8b5b      	ldrh	r3, [r3, #26]
 8010f46:	f043 0301 	orr.w	r3, r3, #1
 8010f4a:	b29a      	uxth	r2, r3
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010f50:	e17f      	b.n	8011252 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d106      	bne.n	8010f68 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010f5a:	4848      	ldr	r0, [pc, #288]	@ (801107c <tcp_receive+0xcfc>)
 8010f5c:	f7fd faee 	bl	800e53c <tcp_seg_copy>
 8010f60:	4602      	mov	r2, r0
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	675a      	str	r2, [r3, #116]	@ 0x74
 8010f66:	e16c      	b.n	8011242 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010f68:	2300      	movs	r3, #0
 8010f6a:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010f70:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010f72:	e156      	b.n	8011222 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8010f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f76:	68db      	ldr	r3, [r3, #12]
 8010f78:	685a      	ldr	r2, [r3, #4]
 8010f7a:	4b41      	ldr	r3, [pc, #260]	@ (8011080 <tcp_receive+0xd00>)
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	429a      	cmp	r2, r3
 8010f80:	d11d      	bne.n	8010fbe <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8010f82:	4b3e      	ldr	r3, [pc, #248]	@ (801107c <tcp_receive+0xcfc>)
 8010f84:	891a      	ldrh	r2, [r3, #8]
 8010f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f88:	891b      	ldrh	r3, [r3, #8]
 8010f8a:	429a      	cmp	r2, r3
 8010f8c:	f240 814e 	bls.w	801122c <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010f90:	483a      	ldr	r0, [pc, #232]	@ (801107c <tcp_receive+0xcfc>)
 8010f92:	f7fd fad3 	bl	800e53c <tcp_seg_copy>
 8010f96:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010f98:	697b      	ldr	r3, [r7, #20]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	f000 8148 	beq.w	8011230 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8010fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d003      	beq.n	8010fae <tcp_receive+0xc2e>
                    prev->next = cseg;
 8010fa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010fa8:	697a      	ldr	r2, [r7, #20]
 8010faa:	601a      	str	r2, [r3, #0]
 8010fac:	e002      	b.n	8010fb4 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	697a      	ldr	r2, [r7, #20]
 8010fb2:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010fb4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010fb6:	6978      	ldr	r0, [r7, #20]
 8010fb8:	f7ff f8de 	bl	8010178 <tcp_oos_insert_segment>
                }
                break;
 8010fbc:	e138      	b.n	8011230 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8010fbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d117      	bne.n	8010ff4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010fc4:	4b2e      	ldr	r3, [pc, #184]	@ (8011080 <tcp_receive+0xd00>)
 8010fc6:	681a      	ldr	r2, [r3, #0]
 8010fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fca:	68db      	ldr	r3, [r3, #12]
 8010fcc:	685b      	ldr	r3, [r3, #4]
 8010fce:	1ad3      	subs	r3, r2, r3
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	da57      	bge.n	8011084 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010fd4:	4829      	ldr	r0, [pc, #164]	@ (801107c <tcp_receive+0xcfc>)
 8010fd6:	f7fd fab1 	bl	800e53c <tcp_seg_copy>
 8010fda:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010fdc:	69bb      	ldr	r3, [r7, #24]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	f000 8128 	beq.w	8011234 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	69ba      	ldr	r2, [r7, #24]
 8010fe8:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8010fea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010fec:	69b8      	ldr	r0, [r7, #24]
 8010fee:	f7ff f8c3 	bl	8010178 <tcp_oos_insert_segment>
                  }
                  break;
 8010ff2:	e11f      	b.n	8011234 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010ff4:	4b22      	ldr	r3, [pc, #136]	@ (8011080 <tcp_receive+0xd00>)
 8010ff6:	681a      	ldr	r2, [r3, #0]
 8010ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ffa:	68db      	ldr	r3, [r3, #12]
 8010ffc:	685b      	ldr	r3, [r3, #4]
 8010ffe:	1ad3      	subs	r3, r2, r3
 8011000:	3b01      	subs	r3, #1
 8011002:	2b00      	cmp	r3, #0
 8011004:	db3e      	blt.n	8011084 <tcp_receive+0xd04>
 8011006:	4b1e      	ldr	r3, [pc, #120]	@ (8011080 <tcp_receive+0xd00>)
 8011008:	681a      	ldr	r2, [r3, #0]
 801100a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801100c:	68db      	ldr	r3, [r3, #12]
 801100e:	685b      	ldr	r3, [r3, #4]
 8011010:	1ad3      	subs	r3, r2, r3
 8011012:	3301      	adds	r3, #1
 8011014:	2b00      	cmp	r3, #0
 8011016:	dc35      	bgt.n	8011084 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011018:	4818      	ldr	r0, [pc, #96]	@ (801107c <tcp_receive+0xcfc>)
 801101a:	f7fd fa8f 	bl	800e53c <tcp_seg_copy>
 801101e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011020:	69fb      	ldr	r3, [r7, #28]
 8011022:	2b00      	cmp	r3, #0
 8011024:	f000 8108 	beq.w	8011238 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801102a:	68db      	ldr	r3, [r3, #12]
 801102c:	685b      	ldr	r3, [r3, #4]
 801102e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011030:	8912      	ldrh	r2, [r2, #8]
 8011032:	441a      	add	r2, r3
 8011034:	4b12      	ldr	r3, [pc, #72]	@ (8011080 <tcp_receive+0xd00>)
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	1ad3      	subs	r3, r2, r3
 801103a:	2b00      	cmp	r3, #0
 801103c:	dd12      	ble.n	8011064 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801103e:	4b10      	ldr	r3, [pc, #64]	@ (8011080 <tcp_receive+0xd00>)
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	b29a      	uxth	r2, r3
 8011044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011046:	68db      	ldr	r3, [r3, #12]
 8011048:	685b      	ldr	r3, [r3, #4]
 801104a:	b29b      	uxth	r3, r3
 801104c:	1ad3      	subs	r3, r2, r3
 801104e:	b29a      	uxth	r2, r3
 8011050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011052:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011056:	685a      	ldr	r2, [r3, #4]
 8011058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801105a:	891b      	ldrh	r3, [r3, #8]
 801105c:	4619      	mov	r1, r3
 801105e:	4610      	mov	r0, r2
 8011060:	f7fb fc48 	bl	800c8f4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011066:	69fa      	ldr	r2, [r7, #28]
 8011068:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801106a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801106c:	69f8      	ldr	r0, [r7, #28]
 801106e:	f7ff f883 	bl	8010178 <tcp_oos_insert_segment>
                  }
                  break;
 8011072:	e0e1      	b.n	8011238 <tcp_receive+0xeb8>
 8011074:	24007f44 	.word	0x24007f44
 8011078:	24007f41 	.word	0x24007f41
 801107c:	24007f14 	.word	0x24007f14
 8011080:	24007f34 	.word	0x24007f34
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011086:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	2b00      	cmp	r3, #0
 801108e:	f040 80c5 	bne.w	801121c <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011092:	4b7f      	ldr	r3, [pc, #508]	@ (8011290 <tcp_receive+0xf10>)
 8011094:	681a      	ldr	r2, [r3, #0]
 8011096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011098:	68db      	ldr	r3, [r3, #12]
 801109a:	685b      	ldr	r3, [r3, #4]
 801109c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801109e:	2b00      	cmp	r3, #0
 80110a0:	f340 80bc 	ble.w	801121c <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80110a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110a6:	68db      	ldr	r3, [r3, #12]
 80110a8:	899b      	ldrh	r3, [r3, #12]
 80110aa:	b29b      	uxth	r3, r3
 80110ac:	4618      	mov	r0, r3
 80110ae:	f7fa f8fd 	bl	800b2ac <lwip_htons>
 80110b2:	4603      	mov	r3, r0
 80110b4:	b2db      	uxtb	r3, r3
 80110b6:	f003 0301 	and.w	r3, r3, #1
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	f040 80be 	bne.w	801123c <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80110c0:	4874      	ldr	r0, [pc, #464]	@ (8011294 <tcp_receive+0xf14>)
 80110c2:	f7fd fa3b 	bl	800e53c <tcp_seg_copy>
 80110c6:	4602      	mov	r2, r0
 80110c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110ca:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80110cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	f000 80b5 	beq.w	8011240 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80110d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110d8:	68db      	ldr	r3, [r3, #12]
 80110da:	685b      	ldr	r3, [r3, #4]
 80110dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80110de:	8912      	ldrh	r2, [r2, #8]
 80110e0:	441a      	add	r2, r3
 80110e2:	4b6b      	ldr	r3, [pc, #428]	@ (8011290 <tcp_receive+0xf10>)
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	1ad3      	subs	r3, r2, r3
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	dd12      	ble.n	8011112 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80110ec:	4b68      	ldr	r3, [pc, #416]	@ (8011290 <tcp_receive+0xf10>)
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	b29a      	uxth	r2, r3
 80110f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110f4:	68db      	ldr	r3, [r3, #12]
 80110f6:	685b      	ldr	r3, [r3, #4]
 80110f8:	b29b      	uxth	r3, r3
 80110fa:	1ad3      	subs	r3, r2, r3
 80110fc:	b29a      	uxth	r2, r3
 80110fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011100:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011104:	685a      	ldr	r2, [r3, #4]
 8011106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011108:	891b      	ldrh	r3, [r3, #8]
 801110a:	4619      	mov	r1, r3
 801110c:	4610      	mov	r0, r2
 801110e:	f7fb fbf1 	bl	800c8f4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011112:	4b61      	ldr	r3, [pc, #388]	@ (8011298 <tcp_receive+0xf18>)
 8011114:	881b      	ldrh	r3, [r3, #0]
 8011116:	461a      	mov	r2, r3
 8011118:	4b5d      	ldr	r3, [pc, #372]	@ (8011290 <tcp_receive+0xf10>)
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	441a      	add	r2, r3
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011122:	6879      	ldr	r1, [r7, #4]
 8011124:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011126:	440b      	add	r3, r1
 8011128:	1ad3      	subs	r3, r2, r3
 801112a:	2b00      	cmp	r3, #0
 801112c:	f340 8088 	ble.w	8011240 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	68db      	ldr	r3, [r3, #12]
 8011136:	899b      	ldrh	r3, [r3, #12]
 8011138:	b29b      	uxth	r3, r3
 801113a:	4618      	mov	r0, r3
 801113c:	f7fa f8b6 	bl	800b2ac <lwip_htons>
 8011140:	4603      	mov	r3, r0
 8011142:	b2db      	uxtb	r3, r3
 8011144:	f003 0301 	and.w	r3, r3, #1
 8011148:	2b00      	cmp	r3, #0
 801114a:	d021      	beq.n	8011190 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801114c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	68db      	ldr	r3, [r3, #12]
 8011152:	899b      	ldrh	r3, [r3, #12]
 8011154:	b29b      	uxth	r3, r3
 8011156:	b21b      	sxth	r3, r3
 8011158:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801115c:	b21c      	sxth	r4, r3
 801115e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	68db      	ldr	r3, [r3, #12]
 8011164:	899b      	ldrh	r3, [r3, #12]
 8011166:	b29b      	uxth	r3, r3
 8011168:	4618      	mov	r0, r3
 801116a:	f7fa f89f 	bl	800b2ac <lwip_htons>
 801116e:	4603      	mov	r3, r0
 8011170:	b2db      	uxtb	r3, r3
 8011172:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8011176:	b29b      	uxth	r3, r3
 8011178:	4618      	mov	r0, r3
 801117a:	f7fa f897 	bl	800b2ac <lwip_htons>
 801117e:	4603      	mov	r3, r0
 8011180:	b21b      	sxth	r3, r3
 8011182:	4323      	orrs	r3, r4
 8011184:	b21a      	sxth	r2, r3
 8011186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	68db      	ldr	r3, [r3, #12]
 801118c:	b292      	uxth	r2, r2
 801118e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011194:	b29a      	uxth	r2, r3
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801119a:	4413      	add	r3, r2
 801119c:	b299      	uxth	r1, r3
 801119e:	4b3c      	ldr	r3, [pc, #240]	@ (8011290 <tcp_receive+0xf10>)
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	b29a      	uxth	r2, r3
 80111a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	1a8a      	subs	r2, r1, r2
 80111aa:	b292      	uxth	r2, r2
 80111ac:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80111ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	685a      	ldr	r2, [r3, #4]
 80111b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	891b      	ldrh	r3, [r3, #8]
 80111ba:	4619      	mov	r1, r3
 80111bc:	4610      	mov	r0, r2
 80111be:	f7fb fb99 	bl	800c8f4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80111c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	891c      	ldrh	r4, [r3, #8]
 80111c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	68db      	ldr	r3, [r3, #12]
 80111ce:	899b      	ldrh	r3, [r3, #12]
 80111d0:	b29b      	uxth	r3, r3
 80111d2:	4618      	mov	r0, r3
 80111d4:	f7fa f86a 	bl	800b2ac <lwip_htons>
 80111d8:	4603      	mov	r3, r0
 80111da:	b2db      	uxtb	r3, r3
 80111dc:	f003 0303 	and.w	r3, r3, #3
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d001      	beq.n	80111e8 <tcp_receive+0xe68>
 80111e4:	2301      	movs	r3, #1
 80111e6:	e000      	b.n	80111ea <tcp_receive+0xe6a>
 80111e8:	2300      	movs	r3, #0
 80111ea:	4423      	add	r3, r4
 80111ec:	b29a      	uxth	r2, r3
 80111ee:	4b2a      	ldr	r3, [pc, #168]	@ (8011298 <tcp_receive+0xf18>)
 80111f0:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80111f2:	4b29      	ldr	r3, [pc, #164]	@ (8011298 <tcp_receive+0xf18>)
 80111f4:	881b      	ldrh	r3, [r3, #0]
 80111f6:	461a      	mov	r2, r3
 80111f8:	4b25      	ldr	r3, [pc, #148]	@ (8011290 <tcp_receive+0xf10>)
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	441a      	add	r2, r3
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011202:	6879      	ldr	r1, [r7, #4]
 8011204:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011206:	440b      	add	r3, r1
 8011208:	429a      	cmp	r2, r3
 801120a:	d019      	beq.n	8011240 <tcp_receive+0xec0>
 801120c:	4b23      	ldr	r3, [pc, #140]	@ (801129c <tcp_receive+0xf1c>)
 801120e:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8011212:	4923      	ldr	r1, [pc, #140]	@ (80112a0 <tcp_receive+0xf20>)
 8011214:	4823      	ldr	r0, [pc, #140]	@ (80112a4 <tcp_receive+0xf24>)
 8011216:	f005 fa2b 	bl	8016670 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801121a:	e011      	b.n	8011240 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801121c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011224:	2b00      	cmp	r3, #0
 8011226:	f47f aea5 	bne.w	8010f74 <tcp_receive+0xbf4>
 801122a:	e00a      	b.n	8011242 <tcp_receive+0xec2>
                break;
 801122c:	bf00      	nop
 801122e:	e008      	b.n	8011242 <tcp_receive+0xec2>
                break;
 8011230:	bf00      	nop
 8011232:	e006      	b.n	8011242 <tcp_receive+0xec2>
                  break;
 8011234:	bf00      	nop
 8011236:	e004      	b.n	8011242 <tcp_receive+0xec2>
                  break;
 8011238:	bf00      	nop
 801123a:	e002      	b.n	8011242 <tcp_receive+0xec2>
                  break;
 801123c:	bf00      	nop
 801123e:	e000      	b.n	8011242 <tcp_receive+0xec2>
                break;
 8011240:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011242:	6878      	ldr	r0, [r7, #4]
 8011244:	f001 fe88 	bl	8012f58 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011248:	e003      	b.n	8011252 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801124a:	6878      	ldr	r0, [r7, #4]
 801124c:	f001 fe84 	bl	8012f58 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011250:	e01a      	b.n	8011288 <tcp_receive+0xf08>
 8011252:	e019      	b.n	8011288 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011254:	4b0e      	ldr	r3, [pc, #56]	@ (8011290 <tcp_receive+0xf10>)
 8011256:	681a      	ldr	r2, [r3, #0]
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801125c:	1ad3      	subs	r3, r2, r3
 801125e:	2b00      	cmp	r3, #0
 8011260:	db0a      	blt.n	8011278 <tcp_receive+0xef8>
 8011262:	4b0b      	ldr	r3, [pc, #44]	@ (8011290 <tcp_receive+0xf10>)
 8011264:	681a      	ldr	r2, [r3, #0]
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801126a:	6879      	ldr	r1, [r7, #4]
 801126c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801126e:	440b      	add	r3, r1
 8011270:	1ad3      	subs	r3, r2, r3
 8011272:	3301      	adds	r3, #1
 8011274:	2b00      	cmp	r3, #0
 8011276:	dd07      	ble.n	8011288 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	8b5b      	ldrh	r3, [r3, #26]
 801127c:	f043 0302 	orr.w	r3, r3, #2
 8011280:	b29a      	uxth	r2, r3
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011286:	e7ff      	b.n	8011288 <tcp_receive+0xf08>
 8011288:	bf00      	nop
 801128a:	3750      	adds	r7, #80	@ 0x50
 801128c:	46bd      	mov	sp, r7
 801128e:	bdb0      	pop	{r4, r5, r7, pc}
 8011290:	24007f34 	.word	0x24007f34
 8011294:	24007f14 	.word	0x24007f14
 8011298:	24007f3e 	.word	0x24007f3e
 801129c:	08019300 	.word	0x08019300
 80112a0:	080196a8 	.word	0x080196a8
 80112a4:	0801934c 	.word	0x0801934c

080112a8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80112a8:	b480      	push	{r7}
 80112aa:	b083      	sub	sp, #12
 80112ac:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80112ae:	4b15      	ldr	r3, [pc, #84]	@ (8011304 <tcp_get_next_optbyte+0x5c>)
 80112b0:	881b      	ldrh	r3, [r3, #0]
 80112b2:	1c5a      	adds	r2, r3, #1
 80112b4:	b291      	uxth	r1, r2
 80112b6:	4a13      	ldr	r2, [pc, #76]	@ (8011304 <tcp_get_next_optbyte+0x5c>)
 80112b8:	8011      	strh	r1, [r2, #0]
 80112ba:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80112bc:	4b12      	ldr	r3, [pc, #72]	@ (8011308 <tcp_get_next_optbyte+0x60>)
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d004      	beq.n	80112ce <tcp_get_next_optbyte+0x26>
 80112c4:	4b11      	ldr	r3, [pc, #68]	@ (801130c <tcp_get_next_optbyte+0x64>)
 80112c6:	881b      	ldrh	r3, [r3, #0]
 80112c8:	88fa      	ldrh	r2, [r7, #6]
 80112ca:	429a      	cmp	r2, r3
 80112cc:	d208      	bcs.n	80112e0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80112ce:	4b10      	ldr	r3, [pc, #64]	@ (8011310 <tcp_get_next_optbyte+0x68>)
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	3314      	adds	r3, #20
 80112d4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80112d6:	88fb      	ldrh	r3, [r7, #6]
 80112d8:	683a      	ldr	r2, [r7, #0]
 80112da:	4413      	add	r3, r2
 80112dc:	781b      	ldrb	r3, [r3, #0]
 80112de:	e00b      	b.n	80112f8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80112e0:	88fb      	ldrh	r3, [r7, #6]
 80112e2:	b2da      	uxtb	r2, r3
 80112e4:	4b09      	ldr	r3, [pc, #36]	@ (801130c <tcp_get_next_optbyte+0x64>)
 80112e6:	881b      	ldrh	r3, [r3, #0]
 80112e8:	b2db      	uxtb	r3, r3
 80112ea:	1ad3      	subs	r3, r2, r3
 80112ec:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80112ee:	4b06      	ldr	r3, [pc, #24]	@ (8011308 <tcp_get_next_optbyte+0x60>)
 80112f0:	681a      	ldr	r2, [r3, #0]
 80112f2:	797b      	ldrb	r3, [r7, #5]
 80112f4:	4413      	add	r3, r2
 80112f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80112f8:	4618      	mov	r0, r3
 80112fa:	370c      	adds	r7, #12
 80112fc:	46bd      	mov	sp, r7
 80112fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011302:	4770      	bx	lr
 8011304:	24007f30 	.word	0x24007f30
 8011308:	24007f2c 	.word	0x24007f2c
 801130c:	24007f2a 	.word	0x24007f2a
 8011310:	24007f24 	.word	0x24007f24

08011314 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011314:	b580      	push	{r7, lr}
 8011316:	b084      	sub	sp, #16
 8011318:	af00      	add	r7, sp, #0
 801131a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d106      	bne.n	8011330 <tcp_parseopt+0x1c>
 8011322:	4b32      	ldr	r3, [pc, #200]	@ (80113ec <tcp_parseopt+0xd8>)
 8011324:	f240 727d 	movw	r2, #1917	@ 0x77d
 8011328:	4931      	ldr	r1, [pc, #196]	@ (80113f0 <tcp_parseopt+0xdc>)
 801132a:	4832      	ldr	r0, [pc, #200]	@ (80113f4 <tcp_parseopt+0xe0>)
 801132c:	f005 f9a0 	bl	8016670 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011330:	4b31      	ldr	r3, [pc, #196]	@ (80113f8 <tcp_parseopt+0xe4>)
 8011332:	881b      	ldrh	r3, [r3, #0]
 8011334:	2b00      	cmp	r3, #0
 8011336:	d056      	beq.n	80113e6 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011338:	4b30      	ldr	r3, [pc, #192]	@ (80113fc <tcp_parseopt+0xe8>)
 801133a:	2200      	movs	r2, #0
 801133c:	801a      	strh	r2, [r3, #0]
 801133e:	e046      	b.n	80113ce <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8011340:	f7ff ffb2 	bl	80112a8 <tcp_get_next_optbyte>
 8011344:	4603      	mov	r3, r0
 8011346:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011348:	7bfb      	ldrb	r3, [r7, #15]
 801134a:	2b02      	cmp	r3, #2
 801134c:	d006      	beq.n	801135c <tcp_parseopt+0x48>
 801134e:	2b02      	cmp	r3, #2
 8011350:	dc2a      	bgt.n	80113a8 <tcp_parseopt+0x94>
 8011352:	2b00      	cmp	r3, #0
 8011354:	d042      	beq.n	80113dc <tcp_parseopt+0xc8>
 8011356:	2b01      	cmp	r3, #1
 8011358:	d038      	beq.n	80113cc <tcp_parseopt+0xb8>
 801135a:	e025      	b.n	80113a8 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801135c:	f7ff ffa4 	bl	80112a8 <tcp_get_next_optbyte>
 8011360:	4603      	mov	r3, r0
 8011362:	2b04      	cmp	r3, #4
 8011364:	d13c      	bne.n	80113e0 <tcp_parseopt+0xcc>
 8011366:	4b25      	ldr	r3, [pc, #148]	@ (80113fc <tcp_parseopt+0xe8>)
 8011368:	881b      	ldrh	r3, [r3, #0]
 801136a:	3301      	adds	r3, #1
 801136c:	4a22      	ldr	r2, [pc, #136]	@ (80113f8 <tcp_parseopt+0xe4>)
 801136e:	8812      	ldrh	r2, [r2, #0]
 8011370:	4293      	cmp	r3, r2
 8011372:	da35      	bge.n	80113e0 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011374:	f7ff ff98 	bl	80112a8 <tcp_get_next_optbyte>
 8011378:	4603      	mov	r3, r0
 801137a:	021b      	lsls	r3, r3, #8
 801137c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801137e:	f7ff ff93 	bl	80112a8 <tcp_get_next_optbyte>
 8011382:	4603      	mov	r3, r0
 8011384:	461a      	mov	r2, r3
 8011386:	89bb      	ldrh	r3, [r7, #12]
 8011388:	4313      	orrs	r3, r2
 801138a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801138c:	89bb      	ldrh	r3, [r7, #12]
 801138e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8011392:	d804      	bhi.n	801139e <tcp_parseopt+0x8a>
 8011394:	89bb      	ldrh	r3, [r7, #12]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d001      	beq.n	801139e <tcp_parseopt+0x8a>
 801139a:	89ba      	ldrh	r2, [r7, #12]
 801139c:	e001      	b.n	80113a2 <tcp_parseopt+0x8e>
 801139e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80113a6:	e012      	b.n	80113ce <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80113a8:	f7ff ff7e 	bl	80112a8 <tcp_get_next_optbyte>
 80113ac:	4603      	mov	r3, r0
 80113ae:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80113b0:	7afb      	ldrb	r3, [r7, #11]
 80113b2:	2b01      	cmp	r3, #1
 80113b4:	d916      	bls.n	80113e4 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80113b6:	7afb      	ldrb	r3, [r7, #11]
 80113b8:	b29a      	uxth	r2, r3
 80113ba:	4b10      	ldr	r3, [pc, #64]	@ (80113fc <tcp_parseopt+0xe8>)
 80113bc:	881b      	ldrh	r3, [r3, #0]
 80113be:	4413      	add	r3, r2
 80113c0:	b29b      	uxth	r3, r3
 80113c2:	3b02      	subs	r3, #2
 80113c4:	b29a      	uxth	r2, r3
 80113c6:	4b0d      	ldr	r3, [pc, #52]	@ (80113fc <tcp_parseopt+0xe8>)
 80113c8:	801a      	strh	r2, [r3, #0]
 80113ca:	e000      	b.n	80113ce <tcp_parseopt+0xba>
          break;
 80113cc:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80113ce:	4b0b      	ldr	r3, [pc, #44]	@ (80113fc <tcp_parseopt+0xe8>)
 80113d0:	881a      	ldrh	r2, [r3, #0]
 80113d2:	4b09      	ldr	r3, [pc, #36]	@ (80113f8 <tcp_parseopt+0xe4>)
 80113d4:	881b      	ldrh	r3, [r3, #0]
 80113d6:	429a      	cmp	r2, r3
 80113d8:	d3b2      	bcc.n	8011340 <tcp_parseopt+0x2c>
 80113da:	e004      	b.n	80113e6 <tcp_parseopt+0xd2>
          return;
 80113dc:	bf00      	nop
 80113de:	e002      	b.n	80113e6 <tcp_parseopt+0xd2>
            return;
 80113e0:	bf00      	nop
 80113e2:	e000      	b.n	80113e6 <tcp_parseopt+0xd2>
            return;
 80113e4:	bf00      	nop
      }
    }
  }
}
 80113e6:	3710      	adds	r7, #16
 80113e8:	46bd      	mov	sp, r7
 80113ea:	bd80      	pop	{r7, pc}
 80113ec:	08019300 	.word	0x08019300
 80113f0:	08019764 	.word	0x08019764
 80113f4:	0801934c 	.word	0x0801934c
 80113f8:	24007f28 	.word	0x24007f28
 80113fc:	24007f30 	.word	0x24007f30

08011400 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011400:	b480      	push	{r7}
 8011402:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011404:	4b05      	ldr	r3, [pc, #20]	@ (801141c <tcp_trigger_input_pcb_close+0x1c>)
 8011406:	781b      	ldrb	r3, [r3, #0]
 8011408:	f043 0310 	orr.w	r3, r3, #16
 801140c:	b2da      	uxtb	r2, r3
 801140e:	4b03      	ldr	r3, [pc, #12]	@ (801141c <tcp_trigger_input_pcb_close+0x1c>)
 8011410:	701a      	strb	r2, [r3, #0]
}
 8011412:	bf00      	nop
 8011414:	46bd      	mov	sp, r7
 8011416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801141a:	4770      	bx	lr
 801141c:	24007f41 	.word	0x24007f41

08011420 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011420:	b580      	push	{r7, lr}
 8011422:	b084      	sub	sp, #16
 8011424:	af00      	add	r7, sp, #0
 8011426:	60f8      	str	r0, [r7, #12]
 8011428:	60b9      	str	r1, [r7, #8]
 801142a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d00a      	beq.n	8011448 <tcp_route+0x28>
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	7a1b      	ldrb	r3, [r3, #8]
 8011436:	2b00      	cmp	r3, #0
 8011438:	d006      	beq.n	8011448 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	7a1b      	ldrb	r3, [r3, #8]
 801143e:	4618      	mov	r0, r3
 8011440:	f7fb f850 	bl	800c4e4 <netif_get_by_index>
 8011444:	4603      	mov	r3, r0
 8011446:	e003      	b.n	8011450 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011448:	6878      	ldr	r0, [r7, #4]
 801144a:	f003 fc6f 	bl	8014d2c <ip4_route>
 801144e:	4603      	mov	r3, r0
  }
}
 8011450:	4618      	mov	r0, r3
 8011452:	3710      	adds	r7, #16
 8011454:	46bd      	mov	sp, r7
 8011456:	bd80      	pop	{r7, pc}

08011458 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011458:	b590      	push	{r4, r7, lr}
 801145a:	b087      	sub	sp, #28
 801145c:	af00      	add	r7, sp, #0
 801145e:	60f8      	str	r0, [r7, #12]
 8011460:	60b9      	str	r1, [r7, #8]
 8011462:	603b      	str	r3, [r7, #0]
 8011464:	4613      	mov	r3, r2
 8011466:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d105      	bne.n	801147a <tcp_create_segment+0x22>
 801146e:	4b43      	ldr	r3, [pc, #268]	@ (801157c <tcp_create_segment+0x124>)
 8011470:	22a3      	movs	r2, #163	@ 0xa3
 8011472:	4943      	ldr	r1, [pc, #268]	@ (8011580 <tcp_create_segment+0x128>)
 8011474:	4843      	ldr	r0, [pc, #268]	@ (8011584 <tcp_create_segment+0x12c>)
 8011476:	f005 f8fb 	bl	8016670 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801147a:	68bb      	ldr	r3, [r7, #8]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d105      	bne.n	801148c <tcp_create_segment+0x34>
 8011480:	4b3e      	ldr	r3, [pc, #248]	@ (801157c <tcp_create_segment+0x124>)
 8011482:	22a4      	movs	r2, #164	@ 0xa4
 8011484:	4940      	ldr	r1, [pc, #256]	@ (8011588 <tcp_create_segment+0x130>)
 8011486:	483f      	ldr	r0, [pc, #252]	@ (8011584 <tcp_create_segment+0x12c>)
 8011488:	f005 f8f2 	bl	8016670 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801148c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011490:	009b      	lsls	r3, r3, #2
 8011492:	b2db      	uxtb	r3, r3
 8011494:	f003 0304 	and.w	r3, r3, #4
 8011498:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801149a:	2003      	movs	r0, #3
 801149c:	f7fa fc96 	bl	800bdcc <memp_malloc>
 80114a0:	6138      	str	r0, [r7, #16]
 80114a2:	693b      	ldr	r3, [r7, #16]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d104      	bne.n	80114b2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80114a8:	68b8      	ldr	r0, [r7, #8]
 80114aa:	f7fb fba9 	bl	800cc00 <pbuf_free>
    return NULL;
 80114ae:	2300      	movs	r3, #0
 80114b0:	e060      	b.n	8011574 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 80114b2:	693b      	ldr	r3, [r7, #16]
 80114b4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80114b8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80114ba:	693b      	ldr	r3, [r7, #16]
 80114bc:	2200      	movs	r2, #0
 80114be:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80114c0:	693b      	ldr	r3, [r7, #16]
 80114c2:	68ba      	ldr	r2, [r7, #8]
 80114c4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80114c6:	68bb      	ldr	r3, [r7, #8]
 80114c8:	891a      	ldrh	r2, [r3, #8]
 80114ca:	7dfb      	ldrb	r3, [r7, #23]
 80114cc:	b29b      	uxth	r3, r3
 80114ce:	429a      	cmp	r2, r3
 80114d0:	d205      	bcs.n	80114de <tcp_create_segment+0x86>
 80114d2:	4b2a      	ldr	r3, [pc, #168]	@ (801157c <tcp_create_segment+0x124>)
 80114d4:	22b0      	movs	r2, #176	@ 0xb0
 80114d6:	492d      	ldr	r1, [pc, #180]	@ (801158c <tcp_create_segment+0x134>)
 80114d8:	482a      	ldr	r0, [pc, #168]	@ (8011584 <tcp_create_segment+0x12c>)
 80114da:	f005 f8c9 	bl	8016670 <iprintf>
  seg->len = p->tot_len - optlen;
 80114de:	68bb      	ldr	r3, [r7, #8]
 80114e0:	891a      	ldrh	r2, [r3, #8]
 80114e2:	7dfb      	ldrb	r3, [r7, #23]
 80114e4:	b29b      	uxth	r3, r3
 80114e6:	1ad3      	subs	r3, r2, r3
 80114e8:	b29a      	uxth	r2, r3
 80114ea:	693b      	ldr	r3, [r7, #16]
 80114ec:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80114ee:	2114      	movs	r1, #20
 80114f0:	68b8      	ldr	r0, [r7, #8]
 80114f2:	f7fb faef 	bl	800cad4 <pbuf_add_header>
 80114f6:	4603      	mov	r3, r0
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d004      	beq.n	8011506 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80114fc:	6938      	ldr	r0, [r7, #16]
 80114fe:	f7fd f804 	bl	800e50a <tcp_seg_free>
    return NULL;
 8011502:	2300      	movs	r3, #0
 8011504:	e036      	b.n	8011574 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011506:	693b      	ldr	r3, [r7, #16]
 8011508:	685b      	ldr	r3, [r3, #4]
 801150a:	685a      	ldr	r2, [r3, #4]
 801150c:	693b      	ldr	r3, [r7, #16]
 801150e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	8ada      	ldrh	r2, [r3, #22]
 8011514:	693b      	ldr	r3, [r7, #16]
 8011516:	68dc      	ldr	r4, [r3, #12]
 8011518:	4610      	mov	r0, r2
 801151a:	f7f9 fec7 	bl	800b2ac <lwip_htons>
 801151e:	4603      	mov	r3, r0
 8011520:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	8b1a      	ldrh	r2, [r3, #24]
 8011526:	693b      	ldr	r3, [r7, #16]
 8011528:	68dc      	ldr	r4, [r3, #12]
 801152a:	4610      	mov	r0, r2
 801152c:	f7f9 febe 	bl	800b2ac <lwip_htons>
 8011530:	4603      	mov	r3, r0
 8011532:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011534:	693b      	ldr	r3, [r7, #16]
 8011536:	68dc      	ldr	r4, [r3, #12]
 8011538:	6838      	ldr	r0, [r7, #0]
 801153a:	f7f9 fecc 	bl	800b2d6 <lwip_htonl>
 801153e:	4603      	mov	r3, r0
 8011540:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011542:	7dfb      	ldrb	r3, [r7, #23]
 8011544:	089b      	lsrs	r3, r3, #2
 8011546:	b2db      	uxtb	r3, r3
 8011548:	3305      	adds	r3, #5
 801154a:	b29b      	uxth	r3, r3
 801154c:	031b      	lsls	r3, r3, #12
 801154e:	b29a      	uxth	r2, r3
 8011550:	79fb      	ldrb	r3, [r7, #7]
 8011552:	b29b      	uxth	r3, r3
 8011554:	4313      	orrs	r3, r2
 8011556:	b29a      	uxth	r2, r3
 8011558:	693b      	ldr	r3, [r7, #16]
 801155a:	68dc      	ldr	r4, [r3, #12]
 801155c:	4610      	mov	r0, r2
 801155e:	f7f9 fea5 	bl	800b2ac <lwip_htons>
 8011562:	4603      	mov	r3, r0
 8011564:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011566:	693b      	ldr	r3, [r7, #16]
 8011568:	68db      	ldr	r3, [r3, #12]
 801156a:	2200      	movs	r2, #0
 801156c:	749a      	strb	r2, [r3, #18]
 801156e:	2200      	movs	r2, #0
 8011570:	74da      	strb	r2, [r3, #19]
  return seg;
 8011572:	693b      	ldr	r3, [r7, #16]
}
 8011574:	4618      	mov	r0, r3
 8011576:	371c      	adds	r7, #28
 8011578:	46bd      	mov	sp, r7
 801157a:	bd90      	pop	{r4, r7, pc}
 801157c:	08019780 	.word	0x08019780
 8011580:	080197b4 	.word	0x080197b4
 8011584:	080197d4 	.word	0x080197d4
 8011588:	080197fc 	.word	0x080197fc
 801158c:	08019820 	.word	0x08019820

08011590 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b086      	sub	sp, #24
 8011594:	af00      	add	r7, sp, #0
 8011596:	607b      	str	r3, [r7, #4]
 8011598:	4603      	mov	r3, r0
 801159a:	73fb      	strb	r3, [r7, #15]
 801159c:	460b      	mov	r3, r1
 801159e:	81bb      	strh	r3, [r7, #12]
 80115a0:	4613      	mov	r3, r2
 80115a2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80115a4:	89bb      	ldrh	r3, [r7, #12]
 80115a6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d105      	bne.n	80115ba <tcp_pbuf_prealloc+0x2a>
 80115ae:	4b30      	ldr	r3, [pc, #192]	@ (8011670 <tcp_pbuf_prealloc+0xe0>)
 80115b0:	22e8      	movs	r2, #232	@ 0xe8
 80115b2:	4930      	ldr	r1, [pc, #192]	@ (8011674 <tcp_pbuf_prealloc+0xe4>)
 80115b4:	4830      	ldr	r0, [pc, #192]	@ (8011678 <tcp_pbuf_prealloc+0xe8>)
 80115b6:	f005 f85b 	bl	8016670 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80115ba:	6a3b      	ldr	r3, [r7, #32]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d105      	bne.n	80115cc <tcp_pbuf_prealloc+0x3c>
 80115c0:	4b2b      	ldr	r3, [pc, #172]	@ (8011670 <tcp_pbuf_prealloc+0xe0>)
 80115c2:	22e9      	movs	r2, #233	@ 0xe9
 80115c4:	492d      	ldr	r1, [pc, #180]	@ (801167c <tcp_pbuf_prealloc+0xec>)
 80115c6:	482c      	ldr	r0, [pc, #176]	@ (8011678 <tcp_pbuf_prealloc+0xe8>)
 80115c8:	f005 f852 	bl	8016670 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80115cc:	89ba      	ldrh	r2, [r7, #12]
 80115ce:	897b      	ldrh	r3, [r7, #10]
 80115d0:	429a      	cmp	r2, r3
 80115d2:	d221      	bcs.n	8011618 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80115d4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80115d8:	f003 0302 	and.w	r3, r3, #2
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d111      	bne.n	8011604 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80115e0:	6a3b      	ldr	r3, [r7, #32]
 80115e2:	8b5b      	ldrh	r3, [r3, #26]
 80115e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d115      	bne.n	8011618 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80115ec:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d007      	beq.n	8011604 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80115f4:	6a3b      	ldr	r3, [r7, #32]
 80115f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d103      	bne.n	8011604 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80115fc:	6a3b      	ldr	r3, [r7, #32]
 80115fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8011600:	2b00      	cmp	r3, #0
 8011602:	d009      	beq.n	8011618 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011604:	89bb      	ldrh	r3, [r7, #12]
 8011606:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 801160a:	f023 0203 	bic.w	r2, r3, #3
 801160e:	897b      	ldrh	r3, [r7, #10]
 8011610:	4293      	cmp	r3, r2
 8011612:	bf28      	it	cs
 8011614:	4613      	movcs	r3, r2
 8011616:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8011618:	8af9      	ldrh	r1, [r7, #22]
 801161a:	7bfb      	ldrb	r3, [r7, #15]
 801161c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011620:	4618      	mov	r0, r3
 8011622:	f7fb f809 	bl	800c638 <pbuf_alloc>
 8011626:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011628:	693b      	ldr	r3, [r7, #16]
 801162a:	2b00      	cmp	r3, #0
 801162c:	d101      	bne.n	8011632 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801162e:	2300      	movs	r3, #0
 8011630:	e019      	b.n	8011666 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8011632:	693b      	ldr	r3, [r7, #16]
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d006      	beq.n	8011648 <tcp_pbuf_prealloc+0xb8>
 801163a:	4b0d      	ldr	r3, [pc, #52]	@ (8011670 <tcp_pbuf_prealloc+0xe0>)
 801163c:	f240 120b 	movw	r2, #267	@ 0x10b
 8011640:	490f      	ldr	r1, [pc, #60]	@ (8011680 <tcp_pbuf_prealloc+0xf0>)
 8011642:	480d      	ldr	r0, [pc, #52]	@ (8011678 <tcp_pbuf_prealloc+0xe8>)
 8011644:	f005 f814 	bl	8016670 <iprintf>
  *oversize = p->len - length;
 8011648:	693b      	ldr	r3, [r7, #16]
 801164a:	895a      	ldrh	r2, [r3, #10]
 801164c:	89bb      	ldrh	r3, [r7, #12]
 801164e:	1ad3      	subs	r3, r2, r3
 8011650:	b29a      	uxth	r2, r3
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011656:	693b      	ldr	r3, [r7, #16]
 8011658:	89ba      	ldrh	r2, [r7, #12]
 801165a:	811a      	strh	r2, [r3, #8]
 801165c:	693b      	ldr	r3, [r7, #16]
 801165e:	891a      	ldrh	r2, [r3, #8]
 8011660:	693b      	ldr	r3, [r7, #16]
 8011662:	815a      	strh	r2, [r3, #10]
  return p;
 8011664:	693b      	ldr	r3, [r7, #16]
}
 8011666:	4618      	mov	r0, r3
 8011668:	3718      	adds	r7, #24
 801166a:	46bd      	mov	sp, r7
 801166c:	bd80      	pop	{r7, pc}
 801166e:	bf00      	nop
 8011670:	08019780 	.word	0x08019780
 8011674:	08019838 	.word	0x08019838
 8011678:	080197d4 	.word	0x080197d4
 801167c:	0801985c 	.word	0x0801985c
 8011680:	0801987c 	.word	0x0801987c

08011684 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011684:	b580      	push	{r7, lr}
 8011686:	b082      	sub	sp, #8
 8011688:	af00      	add	r7, sp, #0
 801168a:	6078      	str	r0, [r7, #4]
 801168c:	460b      	mov	r3, r1
 801168e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	2b00      	cmp	r3, #0
 8011694:	d106      	bne.n	80116a4 <tcp_write_checks+0x20>
 8011696:	4b33      	ldr	r3, [pc, #204]	@ (8011764 <tcp_write_checks+0xe0>)
 8011698:	f240 1233 	movw	r2, #307	@ 0x133
 801169c:	4932      	ldr	r1, [pc, #200]	@ (8011768 <tcp_write_checks+0xe4>)
 801169e:	4833      	ldr	r0, [pc, #204]	@ (801176c <tcp_write_checks+0xe8>)
 80116a0:	f004 ffe6 	bl	8016670 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	7d1b      	ldrb	r3, [r3, #20]
 80116a8:	2b04      	cmp	r3, #4
 80116aa:	d00e      	beq.n	80116ca <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80116b0:	2b07      	cmp	r3, #7
 80116b2:	d00a      	beq.n	80116ca <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80116b8:	2b02      	cmp	r3, #2
 80116ba:	d006      	beq.n	80116ca <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80116c0:	2b03      	cmp	r3, #3
 80116c2:	d002      	beq.n	80116ca <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80116c4:	f06f 030a 	mvn.w	r3, #10
 80116c8:	e048      	b.n	801175c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80116ca:	887b      	ldrh	r3, [r7, #2]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d101      	bne.n	80116d4 <tcp_write_checks+0x50>
    return ERR_OK;
 80116d0:	2300      	movs	r3, #0
 80116d2:	e043      	b.n	801175c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80116da:	887a      	ldrh	r2, [r7, #2]
 80116dc:	429a      	cmp	r2, r3
 80116de:	d909      	bls.n	80116f4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	8b5b      	ldrh	r3, [r3, #26]
 80116e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80116e8:	b29a      	uxth	r2, r3
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80116ee:	f04f 33ff 	mov.w	r3, #4294967295
 80116f2:	e033      	b.n	801175c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80116fa:	2b08      	cmp	r3, #8
 80116fc:	d909      	bls.n	8011712 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	8b5b      	ldrh	r3, [r3, #26]
 8011702:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011706:	b29a      	uxth	r2, r3
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801170c:	f04f 33ff 	mov.w	r3, #4294967295
 8011710:	e024      	b.n	801175c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011718:	2b00      	cmp	r3, #0
 801171a:	d00f      	beq.n	801173c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011720:	2b00      	cmp	r3, #0
 8011722:	d11a      	bne.n	801175a <tcp_write_checks+0xd6>
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011728:	2b00      	cmp	r3, #0
 801172a:	d116      	bne.n	801175a <tcp_write_checks+0xd6>
 801172c:	4b0d      	ldr	r3, [pc, #52]	@ (8011764 <tcp_write_checks+0xe0>)
 801172e:	f240 1255 	movw	r2, #341	@ 0x155
 8011732:	490f      	ldr	r1, [pc, #60]	@ (8011770 <tcp_write_checks+0xec>)
 8011734:	480d      	ldr	r0, [pc, #52]	@ (801176c <tcp_write_checks+0xe8>)
 8011736:	f004 ff9b 	bl	8016670 <iprintf>
 801173a:	e00e      	b.n	801175a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011740:	2b00      	cmp	r3, #0
 8011742:	d103      	bne.n	801174c <tcp_write_checks+0xc8>
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011748:	2b00      	cmp	r3, #0
 801174a:	d006      	beq.n	801175a <tcp_write_checks+0xd6>
 801174c:	4b05      	ldr	r3, [pc, #20]	@ (8011764 <tcp_write_checks+0xe0>)
 801174e:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8011752:	4908      	ldr	r1, [pc, #32]	@ (8011774 <tcp_write_checks+0xf0>)
 8011754:	4805      	ldr	r0, [pc, #20]	@ (801176c <tcp_write_checks+0xe8>)
 8011756:	f004 ff8b 	bl	8016670 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801175a:	2300      	movs	r3, #0
}
 801175c:	4618      	mov	r0, r3
 801175e:	3708      	adds	r7, #8
 8011760:	46bd      	mov	sp, r7
 8011762:	bd80      	pop	{r7, pc}
 8011764:	08019780 	.word	0x08019780
 8011768:	08019890 	.word	0x08019890
 801176c:	080197d4 	.word	0x080197d4
 8011770:	080198b0 	.word	0x080198b0
 8011774:	080198ec 	.word	0x080198ec

08011778 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011778:	b590      	push	{r4, r7, lr}
 801177a:	b09b      	sub	sp, #108	@ 0x6c
 801177c:	af04      	add	r7, sp, #16
 801177e:	60f8      	str	r0, [r7, #12]
 8011780:	60b9      	str	r1, [r7, #8]
 8011782:	4611      	mov	r1, r2
 8011784:	461a      	mov	r2, r3
 8011786:	460b      	mov	r3, r1
 8011788:	80fb      	strh	r3, [r7, #6]
 801178a:	4613      	mov	r3, r2
 801178c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801178e:	2300      	movs	r3, #0
 8011790:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011792:	2300      	movs	r3, #0
 8011794:	653b      	str	r3, [r7, #80]	@ 0x50
 8011796:	2300      	movs	r3, #0
 8011798:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801179a:	2300      	movs	r3, #0
 801179c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801179e:	2300      	movs	r3, #0
 80117a0:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80117a2:	2300      	movs	r3, #0
 80117a4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80117a8:	2300      	movs	r3, #0
 80117aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80117ae:	2300      	movs	r3, #0
 80117b0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80117b2:	2300      	movs	r3, #0
 80117b4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80117b6:	2300      	movs	r3, #0
 80117b8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d109      	bne.n	80117d4 <tcp_write+0x5c>
 80117c0:	4ba4      	ldr	r3, [pc, #656]	@ (8011a54 <tcp_write+0x2dc>)
 80117c2:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 80117c6:	49a4      	ldr	r1, [pc, #656]	@ (8011a58 <tcp_write+0x2e0>)
 80117c8:	48a4      	ldr	r0, [pc, #656]	@ (8011a5c <tcp_write+0x2e4>)
 80117ca:	f004 ff51 	bl	8016670 <iprintf>
 80117ce:	f06f 030f 	mvn.w	r3, #15
 80117d2:	e32a      	b.n	8011e2a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80117da:	085b      	lsrs	r3, r3, #1
 80117dc:	b29a      	uxth	r2, r3
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80117e2:	4293      	cmp	r3, r2
 80117e4:	bf28      	it	cs
 80117e6:	4613      	movcs	r3, r2
 80117e8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80117ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d102      	bne.n	80117f6 <tcp_write+0x7e>
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80117f4:	e000      	b.n	80117f8 <tcp_write+0x80>
 80117f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80117f8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80117fa:	68bb      	ldr	r3, [r7, #8]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d109      	bne.n	8011814 <tcp_write+0x9c>
 8011800:	4b94      	ldr	r3, [pc, #592]	@ (8011a54 <tcp_write+0x2dc>)
 8011802:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8011806:	4996      	ldr	r1, [pc, #600]	@ (8011a60 <tcp_write+0x2e8>)
 8011808:	4894      	ldr	r0, [pc, #592]	@ (8011a5c <tcp_write+0x2e4>)
 801180a:	f004 ff31 	bl	8016670 <iprintf>
 801180e:	f06f 030f 	mvn.w	r3, #15
 8011812:	e30a      	b.n	8011e2a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011814:	88fb      	ldrh	r3, [r7, #6]
 8011816:	4619      	mov	r1, r3
 8011818:	68f8      	ldr	r0, [r7, #12]
 801181a:	f7ff ff33 	bl	8011684 <tcp_write_checks>
 801181e:	4603      	mov	r3, r0
 8011820:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8011824:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8011828:	2b00      	cmp	r3, #0
 801182a:	d002      	beq.n	8011832 <tcp_write+0xba>
    return err;
 801182c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8011830:	e2fb      	b.n	8011e2a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011838:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801183c:	2300      	movs	r3, #0
 801183e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011846:	2b00      	cmp	r3, #0
 8011848:	f000 80f6 	beq.w	8011a38 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011850:	653b      	str	r3, [r7, #80]	@ 0x50
 8011852:	e002      	b.n	801185a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8011854:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801185a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d1f8      	bne.n	8011854 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8011862:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011864:	7a9b      	ldrb	r3, [r3, #10]
 8011866:	009b      	lsls	r3, r3, #2
 8011868:	b29b      	uxth	r3, r3
 801186a:	f003 0304 	and.w	r3, r3, #4
 801186e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011870:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011872:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011874:	891b      	ldrh	r3, [r3, #8]
 8011876:	4619      	mov	r1, r3
 8011878:	8c3b      	ldrh	r3, [r7, #32]
 801187a:	440b      	add	r3, r1
 801187c:	429a      	cmp	r2, r3
 801187e:	da06      	bge.n	801188e <tcp_write+0x116>
 8011880:	4b74      	ldr	r3, [pc, #464]	@ (8011a54 <tcp_write+0x2dc>)
 8011882:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8011886:	4977      	ldr	r1, [pc, #476]	@ (8011a64 <tcp_write+0x2ec>)
 8011888:	4874      	ldr	r0, [pc, #464]	@ (8011a5c <tcp_write+0x2e4>)
 801188a:	f004 fef1 	bl	8016670 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801188e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011890:	891a      	ldrh	r2, [r3, #8]
 8011892:	8c3b      	ldrh	r3, [r7, #32]
 8011894:	4413      	add	r3, r2
 8011896:	b29b      	uxth	r3, r3
 8011898:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801189a:	1ad3      	subs	r3, r2, r3
 801189c:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80118a4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80118a6:	8a7b      	ldrh	r3, [r7, #18]
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d026      	beq.n	80118fa <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80118ac:	8a7b      	ldrh	r3, [r7, #18]
 80118ae:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80118b0:	429a      	cmp	r2, r3
 80118b2:	d206      	bcs.n	80118c2 <tcp_write+0x14a>
 80118b4:	4b67      	ldr	r3, [pc, #412]	@ (8011a54 <tcp_write+0x2dc>)
 80118b6:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 80118ba:	496b      	ldr	r1, [pc, #428]	@ (8011a68 <tcp_write+0x2f0>)
 80118bc:	4867      	ldr	r0, [pc, #412]	@ (8011a5c <tcp_write+0x2e4>)
 80118be:	f004 fed7 	bl	8016670 <iprintf>
      seg = last_unsent;
 80118c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80118c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80118c6:	8a7b      	ldrh	r3, [r7, #18]
 80118c8:	88fa      	ldrh	r2, [r7, #6]
 80118ca:	4293      	cmp	r3, r2
 80118cc:	bf28      	it	cs
 80118ce:	4613      	movcs	r3, r2
 80118d0:	b29b      	uxth	r3, r3
 80118d2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80118d4:	4293      	cmp	r3, r2
 80118d6:	bf28      	it	cs
 80118d8:	4613      	movcs	r3, r2
 80118da:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 80118dc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80118e0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80118e2:	4413      	add	r3, r2
 80118e4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 80118e8:	8a7a      	ldrh	r2, [r7, #18]
 80118ea:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80118ec:	1ad3      	subs	r3, r2, r3
 80118ee:	b29b      	uxth	r3, r3
 80118f0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80118f2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80118f4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80118f6:	1ad3      	subs	r3, r2, r3
 80118f8:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80118fa:	8a7b      	ldrh	r3, [r7, #18]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d00b      	beq.n	8011918 <tcp_write+0x1a0>
 8011900:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011904:	88fb      	ldrh	r3, [r7, #6]
 8011906:	429a      	cmp	r2, r3
 8011908:	d006      	beq.n	8011918 <tcp_write+0x1a0>
 801190a:	4b52      	ldr	r3, [pc, #328]	@ (8011a54 <tcp_write+0x2dc>)
 801190c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011910:	4956      	ldr	r1, [pc, #344]	@ (8011a6c <tcp_write+0x2f4>)
 8011912:	4852      	ldr	r0, [pc, #328]	@ (8011a5c <tcp_write+0x2e4>)
 8011914:	f004 feac 	bl	8016670 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8011918:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801191c:	88fb      	ldrh	r3, [r7, #6]
 801191e:	429a      	cmp	r2, r3
 8011920:	f080 8167 	bcs.w	8011bf2 <tcp_write+0x47a>
 8011924:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011926:	2b00      	cmp	r3, #0
 8011928:	f000 8163 	beq.w	8011bf2 <tcp_write+0x47a>
 801192c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801192e:	891b      	ldrh	r3, [r3, #8]
 8011930:	2b00      	cmp	r3, #0
 8011932:	f000 815e 	beq.w	8011bf2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8011936:	88fa      	ldrh	r2, [r7, #6]
 8011938:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801193c:	1ad2      	subs	r2, r2, r3
 801193e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011940:	4293      	cmp	r3, r2
 8011942:	bfa8      	it	ge
 8011944:	4613      	movge	r3, r2
 8011946:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8011948:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801194a:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801194c:	797b      	ldrb	r3, [r7, #5]
 801194e:	f003 0301 	and.w	r3, r3, #1
 8011952:	2b00      	cmp	r3, #0
 8011954:	d027      	beq.n	80119a6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8011956:	f107 0012 	add.w	r0, r7, #18
 801195a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801195c:	8bf9      	ldrh	r1, [r7, #30]
 801195e:	2301      	movs	r3, #1
 8011960:	9302      	str	r3, [sp, #8]
 8011962:	797b      	ldrb	r3, [r7, #5]
 8011964:	9301      	str	r3, [sp, #4]
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	9300      	str	r3, [sp, #0]
 801196a:	4603      	mov	r3, r0
 801196c:	2000      	movs	r0, #0
 801196e:	f7ff fe0f 	bl	8011590 <tcp_pbuf_prealloc>
 8011972:	6578      	str	r0, [r7, #84]	@ 0x54
 8011974:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011976:	2b00      	cmp	r3, #0
 8011978:	f000 8225 	beq.w	8011dc6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801197c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801197e:	6858      	ldr	r0, [r3, #4]
 8011980:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011984:	68ba      	ldr	r2, [r7, #8]
 8011986:	4413      	add	r3, r2
 8011988:	8bfa      	ldrh	r2, [r7, #30]
 801198a:	4619      	mov	r1, r3
 801198c:	f004 ffa1 	bl	80168d2 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8011990:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8011992:	f7fb f9c3 	bl	800cd1c <pbuf_clen>
 8011996:	4603      	mov	r3, r0
 8011998:	461a      	mov	r2, r3
 801199a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801199e:	4413      	add	r3, r2
 80119a0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80119a4:	e041      	b.n	8011a2a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80119a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80119a8:	685b      	ldr	r3, [r3, #4]
 80119aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80119ac:	e002      	b.n	80119b4 <tcp_write+0x23c>
 80119ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80119b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d1f8      	bne.n	80119ae <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80119bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80119be:	7b1b      	ldrb	r3, [r3, #12]
 80119c0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d115      	bne.n	80119f4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80119c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80119ca:	685b      	ldr	r3, [r3, #4]
 80119cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80119ce:	8952      	ldrh	r2, [r2, #10]
 80119d0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80119d2:	68ba      	ldr	r2, [r7, #8]
 80119d4:	429a      	cmp	r2, r3
 80119d6:	d10d      	bne.n	80119f4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80119d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d006      	beq.n	80119ee <tcp_write+0x276>
 80119e0:	4b1c      	ldr	r3, [pc, #112]	@ (8011a54 <tcp_write+0x2dc>)
 80119e2:	f240 2231 	movw	r2, #561	@ 0x231
 80119e6:	4922      	ldr	r1, [pc, #136]	@ (8011a70 <tcp_write+0x2f8>)
 80119e8:	481c      	ldr	r0, [pc, #112]	@ (8011a5c <tcp_write+0x2e4>)
 80119ea:	f004 fe41 	bl	8016670 <iprintf>
          extendlen = seglen;
 80119ee:	8bfb      	ldrh	r3, [r7, #30]
 80119f0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80119f2:	e01a      	b.n	8011a2a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80119f4:	8bfb      	ldrh	r3, [r7, #30]
 80119f6:	2201      	movs	r2, #1
 80119f8:	4619      	mov	r1, r3
 80119fa:	2000      	movs	r0, #0
 80119fc:	f7fa fe1c 	bl	800c638 <pbuf_alloc>
 8011a00:	6578      	str	r0, [r7, #84]	@ 0x54
 8011a02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	f000 81e0 	beq.w	8011dca <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8011a0a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011a0e:	68ba      	ldr	r2, [r7, #8]
 8011a10:	441a      	add	r2, r3
 8011a12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011a14:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8011a16:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8011a18:	f7fb f980 	bl	800cd1c <pbuf_clen>
 8011a1c:	4603      	mov	r3, r0
 8011a1e:	461a      	mov	r2, r3
 8011a20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011a24:	4413      	add	r3, r2
 8011a26:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8011a2a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011a2e:	8bfb      	ldrh	r3, [r7, #30]
 8011a30:	4413      	add	r3, r2
 8011a32:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8011a36:	e0dc      	b.n	8011bf2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	f000 80d7 	beq.w	8011bf2 <tcp_write+0x47a>
 8011a44:	4b03      	ldr	r3, [pc, #12]	@ (8011a54 <tcp_write+0x2dc>)
 8011a46:	f240 224a 	movw	r2, #586	@ 0x24a
 8011a4a:	490a      	ldr	r1, [pc, #40]	@ (8011a74 <tcp_write+0x2fc>)
 8011a4c:	4803      	ldr	r0, [pc, #12]	@ (8011a5c <tcp_write+0x2e4>)
 8011a4e:	f004 fe0f 	bl	8016670 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8011a52:	e0ce      	b.n	8011bf2 <tcp_write+0x47a>
 8011a54:	08019780 	.word	0x08019780
 8011a58:	08019920 	.word	0x08019920
 8011a5c:	080197d4 	.word	0x080197d4
 8011a60:	08019938 	.word	0x08019938
 8011a64:	0801996c 	.word	0x0801996c
 8011a68:	08019984 	.word	0x08019984
 8011a6c:	080199a4 	.word	0x080199a4
 8011a70:	080199c4 	.word	0x080199c4
 8011a74:	080199f0 	.word	0x080199f0
    struct pbuf *p;
    u16_t left = len - pos;
 8011a78:	88fa      	ldrh	r2, [r7, #6]
 8011a7a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011a7e:	1ad3      	subs	r3, r2, r3
 8011a80:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8011a82:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011a86:	b29b      	uxth	r3, r3
 8011a88:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011a8a:	1ad3      	subs	r3, r2, r3
 8011a8c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8011a8e:	8b7a      	ldrh	r2, [r7, #26]
 8011a90:	8bbb      	ldrh	r3, [r7, #28]
 8011a92:	4293      	cmp	r3, r2
 8011a94:	bf28      	it	cs
 8011a96:	4613      	movcs	r3, r2
 8011a98:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011a9a:	797b      	ldrb	r3, [r7, #5]
 8011a9c:	f003 0301 	and.w	r3, r3, #1
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d036      	beq.n	8011b12 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8011aa4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011aa8:	b29a      	uxth	r2, r3
 8011aaa:	8b3b      	ldrh	r3, [r7, #24]
 8011aac:	4413      	add	r3, r2
 8011aae:	b299      	uxth	r1, r3
 8011ab0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	bf0c      	ite	eq
 8011ab6:	2301      	moveq	r3, #1
 8011ab8:	2300      	movne	r3, #0
 8011aba:	b2db      	uxtb	r3, r3
 8011abc:	f107 0012 	add.w	r0, r7, #18
 8011ac0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011ac2:	9302      	str	r3, [sp, #8]
 8011ac4:	797b      	ldrb	r3, [r7, #5]
 8011ac6:	9301      	str	r3, [sp, #4]
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	9300      	str	r3, [sp, #0]
 8011acc:	4603      	mov	r3, r0
 8011ace:	2036      	movs	r0, #54	@ 0x36
 8011ad0:	f7ff fd5e 	bl	8011590 <tcp_pbuf_prealloc>
 8011ad4:	6338      	str	r0, [r7, #48]	@ 0x30
 8011ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	f000 8178 	beq.w	8011dce <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8011ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ae0:	895b      	ldrh	r3, [r3, #10]
 8011ae2:	8b3a      	ldrh	r2, [r7, #24]
 8011ae4:	429a      	cmp	r2, r3
 8011ae6:	d906      	bls.n	8011af6 <tcp_write+0x37e>
 8011ae8:	4b8c      	ldr	r3, [pc, #560]	@ (8011d1c <tcp_write+0x5a4>)
 8011aea:	f240 2266 	movw	r2, #614	@ 0x266
 8011aee:	498c      	ldr	r1, [pc, #560]	@ (8011d20 <tcp_write+0x5a8>)
 8011af0:	488c      	ldr	r0, [pc, #560]	@ (8011d24 <tcp_write+0x5ac>)
 8011af2:	f004 fdbd 	bl	8016670 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8011af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011af8:	685a      	ldr	r2, [r3, #4]
 8011afa:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011afe:	18d0      	adds	r0, r2, r3
 8011b00:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011b04:	68ba      	ldr	r2, [r7, #8]
 8011b06:	4413      	add	r3, r2
 8011b08:	8b3a      	ldrh	r2, [r7, #24]
 8011b0a:	4619      	mov	r1, r3
 8011b0c:	f004 fee1 	bl	80168d2 <memcpy>
 8011b10:	e02f      	b.n	8011b72 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8011b12:	8a7b      	ldrh	r3, [r7, #18]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d006      	beq.n	8011b26 <tcp_write+0x3ae>
 8011b18:	4b80      	ldr	r3, [pc, #512]	@ (8011d1c <tcp_write+0x5a4>)
 8011b1a:	f240 2271 	movw	r2, #625	@ 0x271
 8011b1e:	4982      	ldr	r1, [pc, #520]	@ (8011d28 <tcp_write+0x5b0>)
 8011b20:	4880      	ldr	r0, [pc, #512]	@ (8011d24 <tcp_write+0x5ac>)
 8011b22:	f004 fda5 	bl	8016670 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8011b26:	8b3b      	ldrh	r3, [r7, #24]
 8011b28:	2201      	movs	r2, #1
 8011b2a:	4619      	mov	r1, r3
 8011b2c:	2036      	movs	r0, #54	@ 0x36
 8011b2e:	f7fa fd83 	bl	800c638 <pbuf_alloc>
 8011b32:	6178      	str	r0, [r7, #20]
 8011b34:	697b      	ldr	r3, [r7, #20]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	f000 814b 	beq.w	8011dd2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8011b3c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011b40:	68ba      	ldr	r2, [r7, #8]
 8011b42:	441a      	add	r2, r3
 8011b44:	697b      	ldr	r3, [r7, #20]
 8011b46:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011b48:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011b4c:	b29b      	uxth	r3, r3
 8011b4e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011b52:	4619      	mov	r1, r3
 8011b54:	2036      	movs	r0, #54	@ 0x36
 8011b56:	f7fa fd6f 	bl	800c638 <pbuf_alloc>
 8011b5a:	6338      	str	r0, [r7, #48]	@ 0x30
 8011b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d103      	bne.n	8011b6a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8011b62:	6978      	ldr	r0, [r7, #20]
 8011b64:	f7fb f84c 	bl	800cc00 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8011b68:	e136      	b.n	8011dd8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8011b6a:	6979      	ldr	r1, [r7, #20]
 8011b6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011b6e:	f7fb f915 	bl	800cd9c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8011b72:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011b74:	f7fb f8d2 	bl	800cd1c <pbuf_clen>
 8011b78:	4603      	mov	r3, r0
 8011b7a:	461a      	mov	r2, r3
 8011b7c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011b80:	4413      	add	r3, r2
 8011b82:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8011b86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011b8a:	2b09      	cmp	r3, #9
 8011b8c:	d903      	bls.n	8011b96 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8011b8e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011b90:	f7fb f836 	bl	800cc00 <pbuf_free>
      goto memerr;
 8011b94:	e120      	b.n	8011dd8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011b9a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011b9e:	441a      	add	r2, r3
 8011ba0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011ba4:	9300      	str	r3, [sp, #0]
 8011ba6:	4613      	mov	r3, r2
 8011ba8:	2200      	movs	r2, #0
 8011baa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011bac:	68f8      	ldr	r0, [r7, #12]
 8011bae:	f7ff fc53 	bl	8011458 <tcp_create_segment>
 8011bb2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8011bb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	f000 810d 	beq.w	8011dd6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8011bbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d102      	bne.n	8011bc8 <tcp_write+0x450>
      queue = seg;
 8011bc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011bc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8011bc6:	e00c      	b.n	8011be2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8011bc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d106      	bne.n	8011bdc <tcp_write+0x464>
 8011bce:	4b53      	ldr	r3, [pc, #332]	@ (8011d1c <tcp_write+0x5a4>)
 8011bd0:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8011bd4:	4955      	ldr	r1, [pc, #340]	@ (8011d2c <tcp_write+0x5b4>)
 8011bd6:	4853      	ldr	r0, [pc, #332]	@ (8011d24 <tcp_write+0x5ac>)
 8011bd8:	f004 fd4a 	bl	8016670 <iprintf>
      prev_seg->next = seg;
 8011bdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011bde:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011be0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8011be2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011be4:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8011be6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011bea:	8b3b      	ldrh	r3, [r7, #24]
 8011bec:	4413      	add	r3, r2
 8011bee:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8011bf2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011bf6:	88fb      	ldrh	r3, [r7, #6]
 8011bf8:	429a      	cmp	r2, r3
 8011bfa:	f4ff af3d 	bcc.w	8011a78 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8011bfe:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d02c      	beq.n	8011c5e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8011c04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011c06:	685b      	ldr	r3, [r3, #4]
 8011c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011c0a:	e01e      	b.n	8011c4a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8011c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c0e:	891a      	ldrh	r2, [r3, #8]
 8011c10:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011c12:	4413      	add	r3, r2
 8011c14:	b29a      	uxth	r2, r3
 8011c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c18:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8011c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d110      	bne.n	8011c44 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8011c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c24:	685b      	ldr	r3, [r3, #4]
 8011c26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011c28:	8952      	ldrh	r2, [r2, #10]
 8011c2a:	4413      	add	r3, r2
 8011c2c:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8011c2e:	68b9      	ldr	r1, [r7, #8]
 8011c30:	4618      	mov	r0, r3
 8011c32:	f004 fe4e 	bl	80168d2 <memcpy>
        p->len += oversize_used;
 8011c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c38:	895a      	ldrh	r2, [r3, #10]
 8011c3a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011c3c:	4413      	add	r3, r2
 8011c3e:	b29a      	uxth	r2, r3
 8011c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c42:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8011c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d1dd      	bne.n	8011c0c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8011c50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011c52:	891a      	ldrh	r2, [r3, #8]
 8011c54:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011c56:	4413      	add	r3, r2
 8011c58:	b29a      	uxth	r2, r3
 8011c5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011c5c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8011c5e:	8a7a      	ldrh	r2, [r7, #18]
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8011c66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d018      	beq.n	8011c9e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8011c6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d106      	bne.n	8011c80 <tcp_write+0x508>
 8011c72:	4b2a      	ldr	r3, [pc, #168]	@ (8011d1c <tcp_write+0x5a4>)
 8011c74:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8011c78:	492d      	ldr	r1, [pc, #180]	@ (8011d30 <tcp_write+0x5b8>)
 8011c7a:	482a      	ldr	r0, [pc, #168]	@ (8011d24 <tcp_write+0x5ac>)
 8011c7c:	f004 fcf8 	bl	8016670 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8011c80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011c82:	685b      	ldr	r3, [r3, #4]
 8011c84:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011c86:	4618      	mov	r0, r3
 8011c88:	f7fb f888 	bl	800cd9c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8011c8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011c8e:	891a      	ldrh	r2, [r3, #8]
 8011c90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011c92:	891b      	ldrh	r3, [r3, #8]
 8011c94:	4413      	add	r3, r2
 8011c96:	b29a      	uxth	r2, r3
 8011c98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011c9a:	811a      	strh	r2, [r3, #8]
 8011c9c:	e037      	b.n	8011d0e <tcp_write+0x596>
  } else if (extendlen > 0) {
 8011c9e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d034      	beq.n	8011d0e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8011ca4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d003      	beq.n	8011cb2 <tcp_write+0x53a>
 8011caa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011cac:	685b      	ldr	r3, [r3, #4]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d106      	bne.n	8011cc0 <tcp_write+0x548>
 8011cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8011d1c <tcp_write+0x5a4>)
 8011cb4:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8011cb8:	491e      	ldr	r1, [pc, #120]	@ (8011d34 <tcp_write+0x5bc>)
 8011cba:	481a      	ldr	r0, [pc, #104]	@ (8011d24 <tcp_write+0x5ac>)
 8011cbc:	f004 fcd8 	bl	8016670 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011cc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011cc2:	685b      	ldr	r3, [r3, #4]
 8011cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011cc6:	e009      	b.n	8011cdc <tcp_write+0x564>
      p->tot_len += extendlen;
 8011cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cca:	891a      	ldrh	r2, [r3, #8]
 8011ccc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011cce:	4413      	add	r3, r2
 8011cd0:	b29a      	uxth	r2, r3
 8011cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cd4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d1f1      	bne.n	8011cc8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8011ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ce6:	891a      	ldrh	r2, [r3, #8]
 8011ce8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011cea:	4413      	add	r3, r2
 8011cec:	b29a      	uxth	r2, r3
 8011cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cf0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8011cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cf4:	895a      	ldrh	r2, [r3, #10]
 8011cf6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011cf8:	4413      	add	r3, r2
 8011cfa:	b29a      	uxth	r2, r3
 8011cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cfe:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8011d00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011d02:	891a      	ldrh	r2, [r3, #8]
 8011d04:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011d06:	4413      	add	r3, r2
 8011d08:	b29a      	uxth	r2, r3
 8011d0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011d0c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8011d0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d111      	bne.n	8011d38 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011d18:	66da      	str	r2, [r3, #108]	@ 0x6c
 8011d1a:	e010      	b.n	8011d3e <tcp_write+0x5c6>
 8011d1c:	08019780 	.word	0x08019780
 8011d20:	08019a20 	.word	0x08019a20
 8011d24:	080197d4 	.word	0x080197d4
 8011d28:	08019a60 	.word	0x08019a60
 8011d2c:	08019a70 	.word	0x08019a70
 8011d30:	08019a84 	.word	0x08019a84
 8011d34:	08019abc 	.word	0x08019abc
  } else {
    last_unsent->next = queue;
 8011d38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011d3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011d3c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011d42:	88fb      	ldrh	r3, [r7, #6]
 8011d44:	441a      	add	r2, r3
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8011d50:	88fb      	ldrh	r3, [r7, #6]
 8011d52:	1ad3      	subs	r3, r2, r3
 8011d54:	b29a      	uxth	r2, r3
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8011d62:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d00e      	beq.n	8011d8e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d10a      	bne.n	8011d8e <tcp_write+0x616>
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d106      	bne.n	8011d8e <tcp_write+0x616>
 8011d80:	4b2c      	ldr	r3, [pc, #176]	@ (8011e34 <tcp_write+0x6bc>)
 8011d82:	f240 3212 	movw	r2, #786	@ 0x312
 8011d86:	492c      	ldr	r1, [pc, #176]	@ (8011e38 <tcp_write+0x6c0>)
 8011d88:	482c      	ldr	r0, [pc, #176]	@ (8011e3c <tcp_write+0x6c4>)
 8011d8a:	f004 fc71 	bl	8016670 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8011d8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d016      	beq.n	8011dc2 <tcp_write+0x64a>
 8011d94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d96:	68db      	ldr	r3, [r3, #12]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d012      	beq.n	8011dc2 <tcp_write+0x64a>
 8011d9c:	797b      	ldrb	r3, [r7, #5]
 8011d9e:	f003 0302 	and.w	r3, r3, #2
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d10d      	bne.n	8011dc2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8011da6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011da8:	68db      	ldr	r3, [r3, #12]
 8011daa:	899b      	ldrh	r3, [r3, #12]
 8011dac:	b29c      	uxth	r4, r3
 8011dae:	2008      	movs	r0, #8
 8011db0:	f7f9 fa7c 	bl	800b2ac <lwip_htons>
 8011db4:	4603      	mov	r3, r0
 8011db6:	461a      	mov	r2, r3
 8011db8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011dba:	68db      	ldr	r3, [r3, #12]
 8011dbc:	4322      	orrs	r2, r4
 8011dbe:	b292      	uxth	r2, r2
 8011dc0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8011dc2:	2300      	movs	r3, #0
 8011dc4:	e031      	b.n	8011e2a <tcp_write+0x6b2>
          goto memerr;
 8011dc6:	bf00      	nop
 8011dc8:	e006      	b.n	8011dd8 <tcp_write+0x660>
            goto memerr;
 8011dca:	bf00      	nop
 8011dcc:	e004      	b.n	8011dd8 <tcp_write+0x660>
        goto memerr;
 8011dce:	bf00      	nop
 8011dd0:	e002      	b.n	8011dd8 <tcp_write+0x660>
        goto memerr;
 8011dd2:	bf00      	nop
 8011dd4:	e000      	b.n	8011dd8 <tcp_write+0x660>
      goto memerr;
 8011dd6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	8b5b      	ldrh	r3, [r3, #26]
 8011ddc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011de0:	b29a      	uxth	r2, r3
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8011de6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d002      	beq.n	8011df2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8011dec:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8011dee:	f7fa ff07 	bl	800cc00 <pbuf_free>
  }
  if (queue != NULL) {
 8011df2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d002      	beq.n	8011dfe <tcp_write+0x686>
    tcp_segs_free(queue);
 8011df8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011dfa:	f7fc fb71 	bl	800e4e0 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d00e      	beq.n	8011e26 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d10a      	bne.n	8011e26 <tcp_write+0x6ae>
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d106      	bne.n	8011e26 <tcp_write+0x6ae>
 8011e18:	4b06      	ldr	r3, [pc, #24]	@ (8011e34 <tcp_write+0x6bc>)
 8011e1a:	f240 3227 	movw	r2, #807	@ 0x327
 8011e1e:	4906      	ldr	r1, [pc, #24]	@ (8011e38 <tcp_write+0x6c0>)
 8011e20:	4806      	ldr	r0, [pc, #24]	@ (8011e3c <tcp_write+0x6c4>)
 8011e22:	f004 fc25 	bl	8016670 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8011e26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	375c      	adds	r7, #92	@ 0x5c
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	bd90      	pop	{r4, r7, pc}
 8011e32:	bf00      	nop
 8011e34:	08019780 	.word	0x08019780
 8011e38:	08019af4 	.word	0x08019af4
 8011e3c:	080197d4 	.word	0x080197d4

08011e40 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011e40:	b590      	push	{r4, r7, lr}
 8011e42:	b08b      	sub	sp, #44	@ 0x2c
 8011e44:	af02      	add	r7, sp, #8
 8011e46:	6078      	str	r0, [r7, #4]
 8011e48:	460b      	mov	r3, r1
 8011e4a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	61fb      	str	r3, [r7, #28]
 8011e50:	2300      	movs	r3, #0
 8011e52:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011e54:	2300      	movs	r3, #0
 8011e56:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d106      	bne.n	8011e6c <tcp_split_unsent_seg+0x2c>
 8011e5e:	4b95      	ldr	r3, [pc, #596]	@ (80120b4 <tcp_split_unsent_seg+0x274>)
 8011e60:	f240 324b 	movw	r2, #843	@ 0x34b
 8011e64:	4994      	ldr	r1, [pc, #592]	@ (80120b8 <tcp_split_unsent_seg+0x278>)
 8011e66:	4895      	ldr	r0, [pc, #596]	@ (80120bc <tcp_split_unsent_seg+0x27c>)
 8011e68:	f004 fc02 	bl	8016670 <iprintf>

  useg = pcb->unsent;
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011e70:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8011e72:	697b      	ldr	r3, [r7, #20]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d102      	bne.n	8011e7e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011e78:	f04f 33ff 	mov.w	r3, #4294967295
 8011e7c:	e116      	b.n	80120ac <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8011e7e:	887b      	ldrh	r3, [r7, #2]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d109      	bne.n	8011e98 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011e84:	4b8b      	ldr	r3, [pc, #556]	@ (80120b4 <tcp_split_unsent_seg+0x274>)
 8011e86:	f240 3253 	movw	r2, #851	@ 0x353
 8011e8a:	498d      	ldr	r1, [pc, #564]	@ (80120c0 <tcp_split_unsent_seg+0x280>)
 8011e8c:	488b      	ldr	r0, [pc, #556]	@ (80120bc <tcp_split_unsent_seg+0x27c>)
 8011e8e:	f004 fbef 	bl	8016670 <iprintf>
    return ERR_VAL;
 8011e92:	f06f 0305 	mvn.w	r3, #5
 8011e96:	e109      	b.n	80120ac <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011e98:	697b      	ldr	r3, [r7, #20]
 8011e9a:	891b      	ldrh	r3, [r3, #8]
 8011e9c:	887a      	ldrh	r2, [r7, #2]
 8011e9e:	429a      	cmp	r2, r3
 8011ea0:	d301      	bcc.n	8011ea6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	e102      	b.n	80120ac <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011eaa:	887a      	ldrh	r2, [r7, #2]
 8011eac:	429a      	cmp	r2, r3
 8011eae:	d906      	bls.n	8011ebe <tcp_split_unsent_seg+0x7e>
 8011eb0:	4b80      	ldr	r3, [pc, #512]	@ (80120b4 <tcp_split_unsent_seg+0x274>)
 8011eb2:	f240 325b 	movw	r2, #859	@ 0x35b
 8011eb6:	4983      	ldr	r1, [pc, #524]	@ (80120c4 <tcp_split_unsent_seg+0x284>)
 8011eb8:	4880      	ldr	r0, [pc, #512]	@ (80120bc <tcp_split_unsent_seg+0x27c>)
 8011eba:	f004 fbd9 	bl	8016670 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011ebe:	697b      	ldr	r3, [r7, #20]
 8011ec0:	891b      	ldrh	r3, [r3, #8]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d106      	bne.n	8011ed4 <tcp_split_unsent_seg+0x94>
 8011ec6:	4b7b      	ldr	r3, [pc, #492]	@ (80120b4 <tcp_split_unsent_seg+0x274>)
 8011ec8:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8011ecc:	497e      	ldr	r1, [pc, #504]	@ (80120c8 <tcp_split_unsent_seg+0x288>)
 8011ece:	487b      	ldr	r0, [pc, #492]	@ (80120bc <tcp_split_unsent_seg+0x27c>)
 8011ed0:	f004 fbce 	bl	8016670 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011ed4:	697b      	ldr	r3, [r7, #20]
 8011ed6:	7a9b      	ldrb	r3, [r3, #10]
 8011ed8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011eda:	7bfb      	ldrb	r3, [r7, #15]
 8011edc:	009b      	lsls	r3, r3, #2
 8011ede:	b2db      	uxtb	r3, r3
 8011ee0:	f003 0304 	and.w	r3, r3, #4
 8011ee4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8011ee6:	697b      	ldr	r3, [r7, #20]
 8011ee8:	891a      	ldrh	r2, [r3, #8]
 8011eea:	887b      	ldrh	r3, [r7, #2]
 8011eec:	1ad3      	subs	r3, r2, r3
 8011eee:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011ef0:	7bbb      	ldrb	r3, [r7, #14]
 8011ef2:	b29a      	uxth	r2, r3
 8011ef4:	89bb      	ldrh	r3, [r7, #12]
 8011ef6:	4413      	add	r3, r2
 8011ef8:	b29b      	uxth	r3, r3
 8011efa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011efe:	4619      	mov	r1, r3
 8011f00:	2036      	movs	r0, #54	@ 0x36
 8011f02:	f7fa fb99 	bl	800c638 <pbuf_alloc>
 8011f06:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011f08:	693b      	ldr	r3, [r7, #16]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	f000 80b7 	beq.w	801207e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011f10:	697b      	ldr	r3, [r7, #20]
 8011f12:	685b      	ldr	r3, [r3, #4]
 8011f14:	891a      	ldrh	r2, [r3, #8]
 8011f16:	697b      	ldr	r3, [r7, #20]
 8011f18:	891b      	ldrh	r3, [r3, #8]
 8011f1a:	1ad3      	subs	r3, r2, r3
 8011f1c:	b29a      	uxth	r2, r3
 8011f1e:	887b      	ldrh	r3, [r7, #2]
 8011f20:	4413      	add	r3, r2
 8011f22:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011f24:	697b      	ldr	r3, [r7, #20]
 8011f26:	6858      	ldr	r0, [r3, #4]
 8011f28:	693b      	ldr	r3, [r7, #16]
 8011f2a:	685a      	ldr	r2, [r3, #4]
 8011f2c:	7bbb      	ldrb	r3, [r7, #14]
 8011f2e:	18d1      	adds	r1, r2, r3
 8011f30:	897b      	ldrh	r3, [r7, #10]
 8011f32:	89ba      	ldrh	r2, [r7, #12]
 8011f34:	f7fb f85a 	bl	800cfec <pbuf_copy_partial>
 8011f38:	4603      	mov	r3, r0
 8011f3a:	461a      	mov	r2, r3
 8011f3c:	89bb      	ldrh	r3, [r7, #12]
 8011f3e:	4293      	cmp	r3, r2
 8011f40:	f040 809f 	bne.w	8012082 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011f44:	697b      	ldr	r3, [r7, #20]
 8011f46:	68db      	ldr	r3, [r3, #12]
 8011f48:	899b      	ldrh	r3, [r3, #12]
 8011f4a:	b29b      	uxth	r3, r3
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	f7f9 f9ad 	bl	800b2ac <lwip_htons>
 8011f52:	4603      	mov	r3, r0
 8011f54:	b2db      	uxtb	r3, r3
 8011f56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011f5a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011f60:	7efb      	ldrb	r3, [r7, #27]
 8011f62:	f003 0308 	and.w	r3, r3, #8
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d007      	beq.n	8011f7a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011f6a:	7efb      	ldrb	r3, [r7, #27]
 8011f6c:	f023 0308 	bic.w	r3, r3, #8
 8011f70:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8011f72:	7ebb      	ldrb	r3, [r7, #26]
 8011f74:	f043 0308 	orr.w	r3, r3, #8
 8011f78:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011f7a:	7efb      	ldrb	r3, [r7, #27]
 8011f7c:	f003 0301 	and.w	r3, r3, #1
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d007      	beq.n	8011f94 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011f84:	7efb      	ldrb	r3, [r7, #27]
 8011f86:	f023 0301 	bic.w	r3, r3, #1
 8011f8a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011f8c:	7ebb      	ldrb	r3, [r7, #26]
 8011f8e:	f043 0301 	orr.w	r3, r3, #1
 8011f92:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011f94:	697b      	ldr	r3, [r7, #20]
 8011f96:	68db      	ldr	r3, [r3, #12]
 8011f98:	685b      	ldr	r3, [r3, #4]
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	f7f9 f99b 	bl	800b2d6 <lwip_htonl>
 8011fa0:	4602      	mov	r2, r0
 8011fa2:	887b      	ldrh	r3, [r7, #2]
 8011fa4:	18d1      	adds	r1, r2, r3
 8011fa6:	7eba      	ldrb	r2, [r7, #26]
 8011fa8:	7bfb      	ldrb	r3, [r7, #15]
 8011faa:	9300      	str	r3, [sp, #0]
 8011fac:	460b      	mov	r3, r1
 8011fae:	6939      	ldr	r1, [r7, #16]
 8011fb0:	6878      	ldr	r0, [r7, #4]
 8011fb2:	f7ff fa51 	bl	8011458 <tcp_create_segment>
 8011fb6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011fb8:	69fb      	ldr	r3, [r7, #28]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d063      	beq.n	8012086 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011fbe:	697b      	ldr	r3, [r7, #20]
 8011fc0:	685b      	ldr	r3, [r3, #4]
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	f7fa feaa 	bl	800cd1c <pbuf_clen>
 8011fc8:	4603      	mov	r3, r0
 8011fca:	461a      	mov	r2, r3
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011fd2:	1a9b      	subs	r3, r3, r2
 8011fd4:	b29a      	uxth	r2, r3
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011fdc:	697b      	ldr	r3, [r7, #20]
 8011fde:	6858      	ldr	r0, [r3, #4]
 8011fe0:	697b      	ldr	r3, [r7, #20]
 8011fe2:	685b      	ldr	r3, [r3, #4]
 8011fe4:	891a      	ldrh	r2, [r3, #8]
 8011fe6:	89bb      	ldrh	r3, [r7, #12]
 8011fe8:	1ad3      	subs	r3, r2, r3
 8011fea:	b29b      	uxth	r3, r3
 8011fec:	4619      	mov	r1, r3
 8011fee:	f7fa fc81 	bl	800c8f4 <pbuf_realloc>
  useg->len -= remainder;
 8011ff2:	697b      	ldr	r3, [r7, #20]
 8011ff4:	891a      	ldrh	r2, [r3, #8]
 8011ff6:	89bb      	ldrh	r3, [r7, #12]
 8011ff8:	1ad3      	subs	r3, r2, r3
 8011ffa:	b29a      	uxth	r2, r3
 8011ffc:	697b      	ldr	r3, [r7, #20]
 8011ffe:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012000:	697b      	ldr	r3, [r7, #20]
 8012002:	68db      	ldr	r3, [r3, #12]
 8012004:	899b      	ldrh	r3, [r3, #12]
 8012006:	b29c      	uxth	r4, r3
 8012008:	7efb      	ldrb	r3, [r7, #27]
 801200a:	b29b      	uxth	r3, r3
 801200c:	4618      	mov	r0, r3
 801200e:	f7f9 f94d 	bl	800b2ac <lwip_htons>
 8012012:	4603      	mov	r3, r0
 8012014:	461a      	mov	r2, r3
 8012016:	697b      	ldr	r3, [r7, #20]
 8012018:	68db      	ldr	r3, [r3, #12]
 801201a:	4322      	orrs	r2, r4
 801201c:	b292      	uxth	r2, r2
 801201e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012020:	697b      	ldr	r3, [r7, #20]
 8012022:	685b      	ldr	r3, [r3, #4]
 8012024:	4618      	mov	r0, r3
 8012026:	f7fa fe79 	bl	800cd1c <pbuf_clen>
 801202a:	4603      	mov	r3, r0
 801202c:	461a      	mov	r2, r3
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012034:	4413      	add	r3, r2
 8012036:	b29a      	uxth	r2, r3
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801203e:	69fb      	ldr	r3, [r7, #28]
 8012040:	685b      	ldr	r3, [r3, #4]
 8012042:	4618      	mov	r0, r3
 8012044:	f7fa fe6a 	bl	800cd1c <pbuf_clen>
 8012048:	4603      	mov	r3, r0
 801204a:	461a      	mov	r2, r3
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012052:	4413      	add	r3, r2
 8012054:	b29a      	uxth	r2, r3
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801205c:	697b      	ldr	r3, [r7, #20]
 801205e:	681a      	ldr	r2, [r3, #0]
 8012060:	69fb      	ldr	r3, [r7, #28]
 8012062:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012064:	697b      	ldr	r3, [r7, #20]
 8012066:	69fa      	ldr	r2, [r7, #28]
 8012068:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801206a:	69fb      	ldr	r3, [r7, #28]
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	2b00      	cmp	r3, #0
 8012070:	d103      	bne.n	801207a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	2200      	movs	r2, #0
 8012076:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801207a:	2300      	movs	r3, #0
 801207c:	e016      	b.n	80120ac <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801207e:	bf00      	nop
 8012080:	e002      	b.n	8012088 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012082:	bf00      	nop
 8012084:	e000      	b.n	8012088 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012086:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012088:	69fb      	ldr	r3, [r7, #28]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d006      	beq.n	801209c <tcp_split_unsent_seg+0x25c>
 801208e:	4b09      	ldr	r3, [pc, #36]	@ (80120b4 <tcp_split_unsent_seg+0x274>)
 8012090:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8012094:	490d      	ldr	r1, [pc, #52]	@ (80120cc <tcp_split_unsent_seg+0x28c>)
 8012096:	4809      	ldr	r0, [pc, #36]	@ (80120bc <tcp_split_unsent_seg+0x27c>)
 8012098:	f004 faea 	bl	8016670 <iprintf>
  if (p != NULL) {
 801209c:	693b      	ldr	r3, [r7, #16]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d002      	beq.n	80120a8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80120a2:	6938      	ldr	r0, [r7, #16]
 80120a4:	f7fa fdac 	bl	800cc00 <pbuf_free>
  }

  return ERR_MEM;
 80120a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80120ac:	4618      	mov	r0, r3
 80120ae:	3724      	adds	r7, #36	@ 0x24
 80120b0:	46bd      	mov	sp, r7
 80120b2:	bd90      	pop	{r4, r7, pc}
 80120b4:	08019780 	.word	0x08019780
 80120b8:	08019b14 	.word	0x08019b14
 80120bc:	080197d4 	.word	0x080197d4
 80120c0:	08019b38 	.word	0x08019b38
 80120c4:	08019b5c 	.word	0x08019b5c
 80120c8:	08019b6c 	.word	0x08019b6c
 80120cc:	08019b7c 	.word	0x08019b7c

080120d0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80120d0:	b590      	push	{r4, r7, lr}
 80120d2:	b085      	sub	sp, #20
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d106      	bne.n	80120ec <tcp_send_fin+0x1c>
 80120de:	4b21      	ldr	r3, [pc, #132]	@ (8012164 <tcp_send_fin+0x94>)
 80120e0:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 80120e4:	4920      	ldr	r1, [pc, #128]	@ (8012168 <tcp_send_fin+0x98>)
 80120e6:	4821      	ldr	r0, [pc, #132]	@ (801216c <tcp_send_fin+0x9c>)
 80120e8:	f004 fac2 	bl	8016670 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d02e      	beq.n	8012152 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80120f8:	60fb      	str	r3, [r7, #12]
 80120fa:	e002      	b.n	8012102 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d1f8      	bne.n	80120fc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	68db      	ldr	r3, [r3, #12]
 801210e:	899b      	ldrh	r3, [r3, #12]
 8012110:	b29b      	uxth	r3, r3
 8012112:	4618      	mov	r0, r3
 8012114:	f7f9 f8ca 	bl	800b2ac <lwip_htons>
 8012118:	4603      	mov	r3, r0
 801211a:	b2db      	uxtb	r3, r3
 801211c:	f003 0307 	and.w	r3, r3, #7
 8012120:	2b00      	cmp	r3, #0
 8012122:	d116      	bne.n	8012152 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	68db      	ldr	r3, [r3, #12]
 8012128:	899b      	ldrh	r3, [r3, #12]
 801212a:	b29c      	uxth	r4, r3
 801212c:	2001      	movs	r0, #1
 801212e:	f7f9 f8bd 	bl	800b2ac <lwip_htons>
 8012132:	4603      	mov	r3, r0
 8012134:	461a      	mov	r2, r3
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	68db      	ldr	r3, [r3, #12]
 801213a:	4322      	orrs	r2, r4
 801213c:	b292      	uxth	r2, r2
 801213e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	8b5b      	ldrh	r3, [r3, #26]
 8012144:	f043 0320 	orr.w	r3, r3, #32
 8012148:	b29a      	uxth	r2, r3
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801214e:	2300      	movs	r3, #0
 8012150:	e004      	b.n	801215c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012152:	2101      	movs	r1, #1
 8012154:	6878      	ldr	r0, [r7, #4]
 8012156:	f000 f80b 	bl	8012170 <tcp_enqueue_flags>
 801215a:	4603      	mov	r3, r0
}
 801215c:	4618      	mov	r0, r3
 801215e:	3714      	adds	r7, #20
 8012160:	46bd      	mov	sp, r7
 8012162:	bd90      	pop	{r4, r7, pc}
 8012164:	08019780 	.word	0x08019780
 8012168:	08019b88 	.word	0x08019b88
 801216c:	080197d4 	.word	0x080197d4

08012170 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012170:	b580      	push	{r7, lr}
 8012172:	b08a      	sub	sp, #40	@ 0x28
 8012174:	af02      	add	r7, sp, #8
 8012176:	6078      	str	r0, [r7, #4]
 8012178:	460b      	mov	r3, r1
 801217a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801217c:	2300      	movs	r3, #0
 801217e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012180:	2300      	movs	r3, #0
 8012182:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012184:	78fb      	ldrb	r3, [r7, #3]
 8012186:	f003 0303 	and.w	r3, r3, #3
 801218a:	2b00      	cmp	r3, #0
 801218c:	d106      	bne.n	801219c <tcp_enqueue_flags+0x2c>
 801218e:	4b67      	ldr	r3, [pc, #412]	@ (801232c <tcp_enqueue_flags+0x1bc>)
 8012190:	f240 4211 	movw	r2, #1041	@ 0x411
 8012194:	4966      	ldr	r1, [pc, #408]	@ (8012330 <tcp_enqueue_flags+0x1c0>)
 8012196:	4867      	ldr	r0, [pc, #412]	@ (8012334 <tcp_enqueue_flags+0x1c4>)
 8012198:	f004 fa6a 	bl	8016670 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d106      	bne.n	80121b0 <tcp_enqueue_flags+0x40>
 80121a2:	4b62      	ldr	r3, [pc, #392]	@ (801232c <tcp_enqueue_flags+0x1bc>)
 80121a4:	f240 4213 	movw	r2, #1043	@ 0x413
 80121a8:	4963      	ldr	r1, [pc, #396]	@ (8012338 <tcp_enqueue_flags+0x1c8>)
 80121aa:	4862      	ldr	r0, [pc, #392]	@ (8012334 <tcp_enqueue_flags+0x1c4>)
 80121ac:	f004 fa60 	bl	8016670 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80121b0:	78fb      	ldrb	r3, [r7, #3]
 80121b2:	f003 0302 	and.w	r3, r3, #2
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d001      	beq.n	80121be <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80121ba:	2301      	movs	r3, #1
 80121bc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80121be:	7ffb      	ldrb	r3, [r7, #31]
 80121c0:	009b      	lsls	r3, r3, #2
 80121c2:	b2db      	uxtb	r3, r3
 80121c4:	f003 0304 	and.w	r3, r3, #4
 80121c8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80121ca:	7dfb      	ldrb	r3, [r7, #23]
 80121cc:	b29b      	uxth	r3, r3
 80121ce:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80121d2:	4619      	mov	r1, r3
 80121d4:	2036      	movs	r0, #54	@ 0x36
 80121d6:	f7fa fa2f 	bl	800c638 <pbuf_alloc>
 80121da:	6138      	str	r0, [r7, #16]
 80121dc:	693b      	ldr	r3, [r7, #16]
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d109      	bne.n	80121f6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	8b5b      	ldrh	r3, [r3, #26]
 80121e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80121ea:	b29a      	uxth	r2, r3
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80121f0:	f04f 33ff 	mov.w	r3, #4294967295
 80121f4:	e095      	b.n	8012322 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80121f6:	693b      	ldr	r3, [r7, #16]
 80121f8:	895a      	ldrh	r2, [r3, #10]
 80121fa:	7dfb      	ldrb	r3, [r7, #23]
 80121fc:	b29b      	uxth	r3, r3
 80121fe:	429a      	cmp	r2, r3
 8012200:	d206      	bcs.n	8012210 <tcp_enqueue_flags+0xa0>
 8012202:	4b4a      	ldr	r3, [pc, #296]	@ (801232c <tcp_enqueue_flags+0x1bc>)
 8012204:	f240 4239 	movw	r2, #1081	@ 0x439
 8012208:	494c      	ldr	r1, [pc, #304]	@ (801233c <tcp_enqueue_flags+0x1cc>)
 801220a:	484a      	ldr	r0, [pc, #296]	@ (8012334 <tcp_enqueue_flags+0x1c4>)
 801220c:	f004 fa30 	bl	8016670 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8012214:	78fa      	ldrb	r2, [r7, #3]
 8012216:	7ffb      	ldrb	r3, [r7, #31]
 8012218:	9300      	str	r3, [sp, #0]
 801221a:	460b      	mov	r3, r1
 801221c:	6939      	ldr	r1, [r7, #16]
 801221e:	6878      	ldr	r0, [r7, #4]
 8012220:	f7ff f91a 	bl	8011458 <tcp_create_segment>
 8012224:	60f8      	str	r0, [r7, #12]
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d109      	bne.n	8012240 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	8b5b      	ldrh	r3, [r3, #26]
 8012230:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012234:	b29a      	uxth	r2, r3
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801223a:	f04f 33ff 	mov.w	r3, #4294967295
 801223e:	e070      	b.n	8012322 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	68db      	ldr	r3, [r3, #12]
 8012244:	f003 0303 	and.w	r3, r3, #3
 8012248:	2b00      	cmp	r3, #0
 801224a:	d006      	beq.n	801225a <tcp_enqueue_flags+0xea>
 801224c:	4b37      	ldr	r3, [pc, #220]	@ (801232c <tcp_enqueue_flags+0x1bc>)
 801224e:	f240 4242 	movw	r2, #1090	@ 0x442
 8012252:	493b      	ldr	r1, [pc, #236]	@ (8012340 <tcp_enqueue_flags+0x1d0>)
 8012254:	4837      	ldr	r0, [pc, #220]	@ (8012334 <tcp_enqueue_flags+0x1c4>)
 8012256:	f004 fa0b 	bl	8016670 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	891b      	ldrh	r3, [r3, #8]
 801225e:	2b00      	cmp	r3, #0
 8012260:	d006      	beq.n	8012270 <tcp_enqueue_flags+0x100>
 8012262:	4b32      	ldr	r3, [pc, #200]	@ (801232c <tcp_enqueue_flags+0x1bc>)
 8012264:	f240 4243 	movw	r2, #1091	@ 0x443
 8012268:	4936      	ldr	r1, [pc, #216]	@ (8012344 <tcp_enqueue_flags+0x1d4>)
 801226a:	4832      	ldr	r0, [pc, #200]	@ (8012334 <tcp_enqueue_flags+0x1c4>)
 801226c:	f004 fa00 	bl	8016670 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012274:	2b00      	cmp	r3, #0
 8012276:	d103      	bne.n	8012280 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	68fa      	ldr	r2, [r7, #12]
 801227c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801227e:	e00d      	b.n	801229c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012284:	61bb      	str	r3, [r7, #24]
 8012286:	e002      	b.n	801228e <tcp_enqueue_flags+0x11e>
 8012288:	69bb      	ldr	r3, [r7, #24]
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	61bb      	str	r3, [r7, #24]
 801228e:	69bb      	ldr	r3, [r7, #24]
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d1f8      	bne.n	8012288 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012296:	69bb      	ldr	r3, [r7, #24]
 8012298:	68fa      	ldr	r2, [r7, #12]
 801229a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	2200      	movs	r2, #0
 80122a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80122a4:	78fb      	ldrb	r3, [r7, #3]
 80122a6:	f003 0302 	and.w	r3, r3, #2
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d104      	bne.n	80122b8 <tcp_enqueue_flags+0x148>
 80122ae:	78fb      	ldrb	r3, [r7, #3]
 80122b0:	f003 0301 	and.w	r3, r3, #1
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d004      	beq.n	80122c2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80122bc:	1c5a      	adds	r2, r3, #1
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80122c2:	78fb      	ldrb	r3, [r7, #3]
 80122c4:	f003 0301 	and.w	r3, r3, #1
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d006      	beq.n	80122da <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	8b5b      	ldrh	r3, [r3, #26]
 80122d0:	f043 0320 	orr.w	r3, r3, #32
 80122d4:	b29a      	uxth	r2, r3
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	685b      	ldr	r3, [r3, #4]
 80122de:	4618      	mov	r0, r3
 80122e0:	f7fa fd1c 	bl	800cd1c <pbuf_clen>
 80122e4:	4603      	mov	r3, r0
 80122e6:	461a      	mov	r2, r3
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80122ee:	4413      	add	r3, r2
 80122f0:	b29a      	uxth	r2, r3
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d00e      	beq.n	8012320 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012306:	2b00      	cmp	r3, #0
 8012308:	d10a      	bne.n	8012320 <tcp_enqueue_flags+0x1b0>
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801230e:	2b00      	cmp	r3, #0
 8012310:	d106      	bne.n	8012320 <tcp_enqueue_flags+0x1b0>
 8012312:	4b06      	ldr	r3, [pc, #24]	@ (801232c <tcp_enqueue_flags+0x1bc>)
 8012314:	f240 4265 	movw	r2, #1125	@ 0x465
 8012318:	490b      	ldr	r1, [pc, #44]	@ (8012348 <tcp_enqueue_flags+0x1d8>)
 801231a:	4806      	ldr	r0, [pc, #24]	@ (8012334 <tcp_enqueue_flags+0x1c4>)
 801231c:	f004 f9a8 	bl	8016670 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012320:	2300      	movs	r3, #0
}
 8012322:	4618      	mov	r0, r3
 8012324:	3720      	adds	r7, #32
 8012326:	46bd      	mov	sp, r7
 8012328:	bd80      	pop	{r7, pc}
 801232a:	bf00      	nop
 801232c:	08019780 	.word	0x08019780
 8012330:	08019ba4 	.word	0x08019ba4
 8012334:	080197d4 	.word	0x080197d4
 8012338:	08019bfc 	.word	0x08019bfc
 801233c:	08019c1c 	.word	0x08019c1c
 8012340:	08019c58 	.word	0x08019c58
 8012344:	08019c70 	.word	0x08019c70
 8012348:	08019c9c 	.word	0x08019c9c

0801234c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801234c:	b5b0      	push	{r4, r5, r7, lr}
 801234e:	b08a      	sub	sp, #40	@ 0x28
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	2b00      	cmp	r3, #0
 8012358:	d106      	bne.n	8012368 <tcp_output+0x1c>
 801235a:	4b8a      	ldr	r3, [pc, #552]	@ (8012584 <tcp_output+0x238>)
 801235c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8012360:	4989      	ldr	r1, [pc, #548]	@ (8012588 <tcp_output+0x23c>)
 8012362:	488a      	ldr	r0, [pc, #552]	@ (801258c <tcp_output+0x240>)
 8012364:	f004 f984 	bl	8016670 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	7d1b      	ldrb	r3, [r3, #20]
 801236c:	2b01      	cmp	r3, #1
 801236e:	d106      	bne.n	801237e <tcp_output+0x32>
 8012370:	4b84      	ldr	r3, [pc, #528]	@ (8012584 <tcp_output+0x238>)
 8012372:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8012376:	4986      	ldr	r1, [pc, #536]	@ (8012590 <tcp_output+0x244>)
 8012378:	4884      	ldr	r0, [pc, #528]	@ (801258c <tcp_output+0x240>)
 801237a:	f004 f979 	bl	8016670 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801237e:	4b85      	ldr	r3, [pc, #532]	@ (8012594 <tcp_output+0x248>)
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	687a      	ldr	r2, [r7, #4]
 8012384:	429a      	cmp	r2, r3
 8012386:	d101      	bne.n	801238c <tcp_output+0x40>
    return ERR_OK;
 8012388:	2300      	movs	r3, #0
 801238a:	e1ce      	b.n	801272a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012398:	4293      	cmp	r3, r2
 801239a:	bf28      	it	cs
 801239c:	4613      	movcs	r3, r2
 801239e:	b29b      	uxth	r3, r3
 80123a0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80123a6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 80123a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d10b      	bne.n	80123c6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	8b5b      	ldrh	r3, [r3, #26]
 80123b2:	f003 0302 	and.w	r3, r3, #2
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	f000 81aa 	beq.w	8012710 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80123bc:	6878      	ldr	r0, [r7, #4]
 80123be:	f000 fdcb 	bl	8012f58 <tcp_send_empty_ack>
 80123c2:	4603      	mov	r3, r0
 80123c4:	e1b1      	b.n	801272a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80123c6:	6879      	ldr	r1, [r7, #4]
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	3304      	adds	r3, #4
 80123cc:	461a      	mov	r2, r3
 80123ce:	6878      	ldr	r0, [r7, #4]
 80123d0:	f7ff f826 	bl	8011420 <tcp_route>
 80123d4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80123d6:	697b      	ldr	r3, [r7, #20]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d102      	bne.n	80123e2 <tcp_output+0x96>
    return ERR_RTE;
 80123dc:	f06f 0303 	mvn.w	r3, #3
 80123e0:	e1a3      	b.n	801272a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d003      	beq.n	80123f0 <tcp_output+0xa4>
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d111      	bne.n	8012414 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80123f0:	697b      	ldr	r3, [r7, #20]
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d002      	beq.n	80123fc <tcp_output+0xb0>
 80123f6:	697b      	ldr	r3, [r7, #20]
 80123f8:	3304      	adds	r3, #4
 80123fa:	e000      	b.n	80123fe <tcp_output+0xb2>
 80123fc:	2300      	movs	r3, #0
 80123fe:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012400:	693b      	ldr	r3, [r7, #16]
 8012402:	2b00      	cmp	r3, #0
 8012404:	d102      	bne.n	801240c <tcp_output+0xc0>
      return ERR_RTE;
 8012406:	f06f 0303 	mvn.w	r3, #3
 801240a:	e18e      	b.n	801272a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801240c:	693b      	ldr	r3, [r7, #16]
 801240e:	681a      	ldr	r2, [r3, #0]
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012416:	68db      	ldr	r3, [r3, #12]
 8012418:	685b      	ldr	r3, [r3, #4]
 801241a:	4618      	mov	r0, r3
 801241c:	f7f8 ff5b 	bl	800b2d6 <lwip_htonl>
 8012420:	4602      	mov	r2, r0
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012426:	1ad3      	subs	r3, r2, r3
 8012428:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801242a:	8912      	ldrh	r2, [r2, #8]
 801242c:	4413      	add	r3, r2
 801242e:	69ba      	ldr	r2, [r7, #24]
 8012430:	429a      	cmp	r2, r3
 8012432:	d227      	bcs.n	8012484 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801243a:	461a      	mov	r2, r3
 801243c:	69bb      	ldr	r3, [r7, #24]
 801243e:	4293      	cmp	r3, r2
 8012440:	d114      	bne.n	801246c <tcp_output+0x120>
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012446:	2b00      	cmp	r3, #0
 8012448:	d110      	bne.n	801246c <tcp_output+0x120>
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012450:	2b00      	cmp	r3, #0
 8012452:	d10b      	bne.n	801246c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	2200      	movs	r2, #0
 8012458:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	2201      	movs	r2, #1
 8012460:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	2200      	movs	r2, #0
 8012468:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	8b5b      	ldrh	r3, [r3, #26]
 8012470:	f003 0302 	and.w	r3, r3, #2
 8012474:	2b00      	cmp	r3, #0
 8012476:	f000 814d 	beq.w	8012714 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801247a:	6878      	ldr	r0, [r7, #4]
 801247c:	f000 fd6c 	bl	8012f58 <tcp_send_empty_ack>
 8012480:	4603      	mov	r3, r0
 8012482:	e152      	b.n	801272a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	2200      	movs	r2, #0
 8012488:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012490:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012492:	6a3b      	ldr	r3, [r7, #32]
 8012494:	2b00      	cmp	r3, #0
 8012496:	f000 811c 	beq.w	80126d2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801249a:	e002      	b.n	80124a2 <tcp_output+0x156>
 801249c:	6a3b      	ldr	r3, [r7, #32]
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	623b      	str	r3, [r7, #32]
 80124a2:	6a3b      	ldr	r3, [r7, #32]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d1f8      	bne.n	801249c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80124aa:	e112      	b.n	80126d2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80124ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124ae:	68db      	ldr	r3, [r3, #12]
 80124b0:	899b      	ldrh	r3, [r3, #12]
 80124b2:	b29b      	uxth	r3, r3
 80124b4:	4618      	mov	r0, r3
 80124b6:	f7f8 fef9 	bl	800b2ac <lwip_htons>
 80124ba:	4603      	mov	r3, r0
 80124bc:	b2db      	uxtb	r3, r3
 80124be:	f003 0304 	and.w	r3, r3, #4
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d006      	beq.n	80124d4 <tcp_output+0x188>
 80124c6:	4b2f      	ldr	r3, [pc, #188]	@ (8012584 <tcp_output+0x238>)
 80124c8:	f240 5236 	movw	r2, #1334	@ 0x536
 80124cc:	4932      	ldr	r1, [pc, #200]	@ (8012598 <tcp_output+0x24c>)
 80124ce:	482f      	ldr	r0, [pc, #188]	@ (801258c <tcp_output+0x240>)
 80124d0:	f004 f8ce 	bl	8016670 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d01f      	beq.n	801251c <tcp_output+0x1d0>
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	8b5b      	ldrh	r3, [r3, #26]
 80124e0:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d119      	bne.n	801251c <tcp_output+0x1d0>
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d00b      	beq.n	8012508 <tcp_output+0x1bc>
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d110      	bne.n	801251c <tcp_output+0x1d0>
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80124fe:	891a      	ldrh	r2, [r3, #8]
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012504:	429a      	cmp	r2, r3
 8012506:	d209      	bcs.n	801251c <tcp_output+0x1d0>
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801250e:	2b00      	cmp	r3, #0
 8012510:	d004      	beq.n	801251c <tcp_output+0x1d0>
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012518:	2b08      	cmp	r3, #8
 801251a:	d901      	bls.n	8012520 <tcp_output+0x1d4>
 801251c:	2301      	movs	r3, #1
 801251e:	e000      	b.n	8012522 <tcp_output+0x1d6>
 8012520:	2300      	movs	r3, #0
 8012522:	2b00      	cmp	r3, #0
 8012524:	d106      	bne.n	8012534 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	8b5b      	ldrh	r3, [r3, #26]
 801252a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801252e:	2b00      	cmp	r3, #0
 8012530:	f000 80e4 	beq.w	80126fc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	7d1b      	ldrb	r3, [r3, #20]
 8012538:	2b02      	cmp	r3, #2
 801253a:	d00d      	beq.n	8012558 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801253c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801253e:	68db      	ldr	r3, [r3, #12]
 8012540:	899b      	ldrh	r3, [r3, #12]
 8012542:	b29c      	uxth	r4, r3
 8012544:	2010      	movs	r0, #16
 8012546:	f7f8 feb1 	bl	800b2ac <lwip_htons>
 801254a:	4603      	mov	r3, r0
 801254c:	461a      	mov	r2, r3
 801254e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012550:	68db      	ldr	r3, [r3, #12]
 8012552:	4322      	orrs	r2, r4
 8012554:	b292      	uxth	r2, r2
 8012556:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012558:	697a      	ldr	r2, [r7, #20]
 801255a:	6879      	ldr	r1, [r7, #4]
 801255c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801255e:	f000 f909 	bl	8012774 <tcp_output_segment>
 8012562:	4603      	mov	r3, r0
 8012564:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801256a:	2b00      	cmp	r3, #0
 801256c:	d016      	beq.n	801259c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	8b5b      	ldrh	r3, [r3, #26]
 8012572:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012576:	b29a      	uxth	r2, r3
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	835a      	strh	r2, [r3, #26]
      return err;
 801257c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012580:	e0d3      	b.n	801272a <tcp_output+0x3de>
 8012582:	bf00      	nop
 8012584:	08019780 	.word	0x08019780
 8012588:	08019cc4 	.word	0x08019cc4
 801258c:	080197d4 	.word	0x080197d4
 8012590:	08019cdc 	.word	0x08019cdc
 8012594:	24007f48 	.word	0x24007f48
 8012598:	08019d04 	.word	0x08019d04
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801259c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801259e:	681a      	ldr	r2, [r3, #0]
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	7d1b      	ldrb	r3, [r3, #20]
 80125a8:	2b02      	cmp	r3, #2
 80125aa:	d006      	beq.n	80125ba <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	8b5b      	ldrh	r3, [r3, #26]
 80125b0:	f023 0303 	bic.w	r3, r3, #3
 80125b4:	b29a      	uxth	r2, r3
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80125ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125bc:	68db      	ldr	r3, [r3, #12]
 80125be:	685b      	ldr	r3, [r3, #4]
 80125c0:	4618      	mov	r0, r3
 80125c2:	f7f8 fe88 	bl	800b2d6 <lwip_htonl>
 80125c6:	4604      	mov	r4, r0
 80125c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125ca:	891b      	ldrh	r3, [r3, #8]
 80125cc:	461d      	mov	r5, r3
 80125ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125d0:	68db      	ldr	r3, [r3, #12]
 80125d2:	899b      	ldrh	r3, [r3, #12]
 80125d4:	b29b      	uxth	r3, r3
 80125d6:	4618      	mov	r0, r3
 80125d8:	f7f8 fe68 	bl	800b2ac <lwip_htons>
 80125dc:	4603      	mov	r3, r0
 80125de:	b2db      	uxtb	r3, r3
 80125e0:	f003 0303 	and.w	r3, r3, #3
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d001      	beq.n	80125ec <tcp_output+0x2a0>
 80125e8:	2301      	movs	r3, #1
 80125ea:	e000      	b.n	80125ee <tcp_output+0x2a2>
 80125ec:	2300      	movs	r3, #0
 80125ee:	442b      	add	r3, r5
 80125f0:	4423      	add	r3, r4
 80125f2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80125f8:	68bb      	ldr	r3, [r7, #8]
 80125fa:	1ad3      	subs	r3, r2, r3
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	da02      	bge.n	8012606 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	68ba      	ldr	r2, [r7, #8]
 8012604:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012608:	891b      	ldrh	r3, [r3, #8]
 801260a:	461c      	mov	r4, r3
 801260c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801260e:	68db      	ldr	r3, [r3, #12]
 8012610:	899b      	ldrh	r3, [r3, #12]
 8012612:	b29b      	uxth	r3, r3
 8012614:	4618      	mov	r0, r3
 8012616:	f7f8 fe49 	bl	800b2ac <lwip_htons>
 801261a:	4603      	mov	r3, r0
 801261c:	b2db      	uxtb	r3, r3
 801261e:	f003 0303 	and.w	r3, r3, #3
 8012622:	2b00      	cmp	r3, #0
 8012624:	d001      	beq.n	801262a <tcp_output+0x2de>
 8012626:	2301      	movs	r3, #1
 8012628:	e000      	b.n	801262c <tcp_output+0x2e0>
 801262a:	2300      	movs	r3, #0
 801262c:	4423      	add	r3, r4
 801262e:	2b00      	cmp	r3, #0
 8012630:	d049      	beq.n	80126c6 <tcp_output+0x37a>
      seg->next = NULL;
 8012632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012634:	2200      	movs	r2, #0
 8012636:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801263c:	2b00      	cmp	r3, #0
 801263e:	d105      	bne.n	801264c <tcp_output+0x300>
        pcb->unacked = seg;
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012644:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8012646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012648:	623b      	str	r3, [r7, #32]
 801264a:	e03f      	b.n	80126cc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801264c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801264e:	68db      	ldr	r3, [r3, #12]
 8012650:	685b      	ldr	r3, [r3, #4]
 8012652:	4618      	mov	r0, r3
 8012654:	f7f8 fe3f 	bl	800b2d6 <lwip_htonl>
 8012658:	4604      	mov	r4, r0
 801265a:	6a3b      	ldr	r3, [r7, #32]
 801265c:	68db      	ldr	r3, [r3, #12]
 801265e:	685b      	ldr	r3, [r3, #4]
 8012660:	4618      	mov	r0, r3
 8012662:	f7f8 fe38 	bl	800b2d6 <lwip_htonl>
 8012666:	4603      	mov	r3, r0
 8012668:	1ae3      	subs	r3, r4, r3
 801266a:	2b00      	cmp	r3, #0
 801266c:	da24      	bge.n	80126b8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	3370      	adds	r3, #112	@ 0x70
 8012672:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012674:	e002      	b.n	801267c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012676:	69fb      	ldr	r3, [r7, #28]
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801267c:	69fb      	ldr	r3, [r7, #28]
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	2b00      	cmp	r3, #0
 8012682:	d011      	beq.n	80126a8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012684:	69fb      	ldr	r3, [r7, #28]
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	68db      	ldr	r3, [r3, #12]
 801268a:	685b      	ldr	r3, [r3, #4]
 801268c:	4618      	mov	r0, r3
 801268e:	f7f8 fe22 	bl	800b2d6 <lwip_htonl>
 8012692:	4604      	mov	r4, r0
 8012694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012696:	68db      	ldr	r3, [r3, #12]
 8012698:	685b      	ldr	r3, [r3, #4]
 801269a:	4618      	mov	r0, r3
 801269c:	f7f8 fe1b 	bl	800b2d6 <lwip_htonl>
 80126a0:	4603      	mov	r3, r0
 80126a2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	dbe6      	blt.n	8012676 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80126a8:	69fb      	ldr	r3, [r7, #28]
 80126aa:	681a      	ldr	r2, [r3, #0]
 80126ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126ae:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80126b0:	69fb      	ldr	r3, [r7, #28]
 80126b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80126b4:	601a      	str	r2, [r3, #0]
 80126b6:	e009      	b.n	80126cc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80126b8:	6a3b      	ldr	r3, [r7, #32]
 80126ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80126bc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80126be:	6a3b      	ldr	r3, [r7, #32]
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	623b      	str	r3, [r7, #32]
 80126c4:	e002      	b.n	80126cc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80126c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80126c8:	f7fb ff1f 	bl	800e50a <tcp_seg_free>
    }
    seg = pcb->unsent;
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80126d0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 80126d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d012      	beq.n	80126fe <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80126d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126da:	68db      	ldr	r3, [r3, #12]
 80126dc:	685b      	ldr	r3, [r3, #4]
 80126de:	4618      	mov	r0, r3
 80126e0:	f7f8 fdf9 	bl	800b2d6 <lwip_htonl>
 80126e4:	4602      	mov	r2, r0
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80126ea:	1ad3      	subs	r3, r2, r3
 80126ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80126ee:	8912      	ldrh	r2, [r2, #8]
 80126f0:	4413      	add	r3, r2
  while (seg != NULL &&
 80126f2:	69ba      	ldr	r2, [r7, #24]
 80126f4:	429a      	cmp	r2, r3
 80126f6:	f4bf aed9 	bcs.w	80124ac <tcp_output+0x160>
 80126fa:	e000      	b.n	80126fe <tcp_output+0x3b2>
      break;
 80126fc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012702:	2b00      	cmp	r3, #0
 8012704:	d108      	bne.n	8012718 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	2200      	movs	r2, #0
 801270a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801270e:	e004      	b.n	801271a <tcp_output+0x3ce>
    goto output_done;
 8012710:	bf00      	nop
 8012712:	e002      	b.n	801271a <tcp_output+0x3ce>
    goto output_done;
 8012714:	bf00      	nop
 8012716:	e000      	b.n	801271a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012718:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	8b5b      	ldrh	r3, [r3, #26]
 801271e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012722:	b29a      	uxth	r2, r3
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012728:	2300      	movs	r3, #0
}
 801272a:	4618      	mov	r0, r3
 801272c:	3728      	adds	r7, #40	@ 0x28
 801272e:	46bd      	mov	sp, r7
 8012730:	bdb0      	pop	{r4, r5, r7, pc}
 8012732:	bf00      	nop

08012734 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012734:	b580      	push	{r7, lr}
 8012736:	b082      	sub	sp, #8
 8012738:	af00      	add	r7, sp, #0
 801273a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d106      	bne.n	8012750 <tcp_output_segment_busy+0x1c>
 8012742:	4b09      	ldr	r3, [pc, #36]	@ (8012768 <tcp_output_segment_busy+0x34>)
 8012744:	f240 529a 	movw	r2, #1434	@ 0x59a
 8012748:	4908      	ldr	r1, [pc, #32]	@ (801276c <tcp_output_segment_busy+0x38>)
 801274a:	4809      	ldr	r0, [pc, #36]	@ (8012770 <tcp_output_segment_busy+0x3c>)
 801274c:	f003 ff90 	bl	8016670 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	685b      	ldr	r3, [r3, #4]
 8012754:	7b9b      	ldrb	r3, [r3, #14]
 8012756:	2b01      	cmp	r3, #1
 8012758:	d001      	beq.n	801275e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801275a:	2301      	movs	r3, #1
 801275c:	e000      	b.n	8012760 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801275e:	2300      	movs	r3, #0
}
 8012760:	4618      	mov	r0, r3
 8012762:	3708      	adds	r7, #8
 8012764:	46bd      	mov	sp, r7
 8012766:	bd80      	pop	{r7, pc}
 8012768:	08019780 	.word	0x08019780
 801276c:	08019d1c 	.word	0x08019d1c
 8012770:	080197d4 	.word	0x080197d4

08012774 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012774:	b5b0      	push	{r4, r5, r7, lr}
 8012776:	b08c      	sub	sp, #48	@ 0x30
 8012778:	af04      	add	r7, sp, #16
 801277a:	60f8      	str	r0, [r7, #12]
 801277c:	60b9      	str	r1, [r7, #8]
 801277e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d106      	bne.n	8012794 <tcp_output_segment+0x20>
 8012786:	4b64      	ldr	r3, [pc, #400]	@ (8012918 <tcp_output_segment+0x1a4>)
 8012788:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 801278c:	4963      	ldr	r1, [pc, #396]	@ (801291c <tcp_output_segment+0x1a8>)
 801278e:	4864      	ldr	r0, [pc, #400]	@ (8012920 <tcp_output_segment+0x1ac>)
 8012790:	f003 ff6e 	bl	8016670 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012794:	68bb      	ldr	r3, [r7, #8]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d106      	bne.n	80127a8 <tcp_output_segment+0x34>
 801279a:	4b5f      	ldr	r3, [pc, #380]	@ (8012918 <tcp_output_segment+0x1a4>)
 801279c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 80127a0:	4960      	ldr	r1, [pc, #384]	@ (8012924 <tcp_output_segment+0x1b0>)
 80127a2:	485f      	ldr	r0, [pc, #380]	@ (8012920 <tcp_output_segment+0x1ac>)
 80127a4:	f003 ff64 	bl	8016670 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d106      	bne.n	80127bc <tcp_output_segment+0x48>
 80127ae:	4b5a      	ldr	r3, [pc, #360]	@ (8012918 <tcp_output_segment+0x1a4>)
 80127b0:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 80127b4:	495c      	ldr	r1, [pc, #368]	@ (8012928 <tcp_output_segment+0x1b4>)
 80127b6:	485a      	ldr	r0, [pc, #360]	@ (8012920 <tcp_output_segment+0x1ac>)
 80127b8:	f003 ff5a 	bl	8016670 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80127bc:	68f8      	ldr	r0, [r7, #12]
 80127be:	f7ff ffb9 	bl	8012734 <tcp_output_segment_busy>
 80127c2:	4603      	mov	r3, r0
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d001      	beq.n	80127cc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80127c8:	2300      	movs	r3, #0
 80127ca:	e0a1      	b.n	8012910 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80127cc:	68bb      	ldr	r3, [r7, #8]
 80127ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	68dc      	ldr	r4, [r3, #12]
 80127d4:	4610      	mov	r0, r2
 80127d6:	f7f8 fd7e 	bl	800b2d6 <lwip_htonl>
 80127da:	4603      	mov	r3, r0
 80127dc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80127de:	68bb      	ldr	r3, [r7, #8]
 80127e0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	68dc      	ldr	r4, [r3, #12]
 80127e6:	4610      	mov	r0, r2
 80127e8:	f7f8 fd60 	bl	800b2ac <lwip_htons>
 80127ec:	4603      	mov	r3, r0
 80127ee:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80127f0:	68bb      	ldr	r3, [r7, #8]
 80127f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80127f4:	68ba      	ldr	r2, [r7, #8]
 80127f6:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80127f8:	441a      	add	r2, r3
 80127fa:	68bb      	ldr	r3, [r7, #8]
 80127fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	68db      	ldr	r3, [r3, #12]
 8012802:	3314      	adds	r3, #20
 8012804:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	7a9b      	ldrb	r3, [r3, #10]
 801280a:	f003 0301 	and.w	r3, r3, #1
 801280e:	2b00      	cmp	r3, #0
 8012810:	d015      	beq.n	801283e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012812:	68bb      	ldr	r3, [r7, #8]
 8012814:	3304      	adds	r3, #4
 8012816:	461a      	mov	r2, r3
 8012818:	6879      	ldr	r1, [r7, #4]
 801281a:	f44f 7006 	mov.w	r0, #536	@ 0x218
 801281e:	f7fc fa39 	bl	800ec94 <tcp_eff_send_mss_netif>
 8012822:	4603      	mov	r3, r0
 8012824:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012826:	8b7b      	ldrh	r3, [r7, #26]
 8012828:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801282c:	4618      	mov	r0, r3
 801282e:	f7f8 fd52 	bl	800b2d6 <lwip_htonl>
 8012832:	4602      	mov	r2, r0
 8012834:	69fb      	ldr	r3, [r7, #28]
 8012836:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012838:	69fb      	ldr	r3, [r7, #28]
 801283a:	3304      	adds	r3, #4
 801283c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801283e:	68bb      	ldr	r3, [r7, #8]
 8012840:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012844:	2b00      	cmp	r3, #0
 8012846:	da02      	bge.n	801284e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012848:	68bb      	ldr	r3, [r7, #8]
 801284a:	2200      	movs	r2, #0
 801284c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801284e:	68bb      	ldr	r3, [r7, #8]
 8012850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012852:	2b00      	cmp	r3, #0
 8012854:	d10c      	bne.n	8012870 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012856:	4b35      	ldr	r3, [pc, #212]	@ (801292c <tcp_output_segment+0x1b8>)
 8012858:	681a      	ldr	r2, [r3, #0]
 801285a:	68bb      	ldr	r3, [r7, #8]
 801285c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	68db      	ldr	r3, [r3, #12]
 8012862:	685b      	ldr	r3, [r3, #4]
 8012864:	4618      	mov	r0, r3
 8012866:	f7f8 fd36 	bl	800b2d6 <lwip_htonl>
 801286a:	4602      	mov	r2, r0
 801286c:	68bb      	ldr	r3, [r7, #8]
 801286e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	68da      	ldr	r2, [r3, #12]
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	685b      	ldr	r3, [r3, #4]
 8012878:	685b      	ldr	r3, [r3, #4]
 801287a:	1ad3      	subs	r3, r2, r3
 801287c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	685b      	ldr	r3, [r3, #4]
 8012882:	8959      	ldrh	r1, [r3, #10]
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	685b      	ldr	r3, [r3, #4]
 8012888:	8b3a      	ldrh	r2, [r7, #24]
 801288a:	1a8a      	subs	r2, r1, r2
 801288c:	b292      	uxth	r2, r2
 801288e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	685b      	ldr	r3, [r3, #4]
 8012894:	8919      	ldrh	r1, [r3, #8]
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	685b      	ldr	r3, [r3, #4]
 801289a:	8b3a      	ldrh	r2, [r7, #24]
 801289c:	1a8a      	subs	r2, r1, r2
 801289e:	b292      	uxth	r2, r2
 80128a0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	685b      	ldr	r3, [r3, #4]
 80128a6:	68fa      	ldr	r2, [r7, #12]
 80128a8:	68d2      	ldr	r2, [r2, #12]
 80128aa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	68db      	ldr	r3, [r3, #12]
 80128b0:	2200      	movs	r2, #0
 80128b2:	741a      	strb	r2, [r3, #16]
 80128b4:	2200      	movs	r2, #0
 80128b6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	68da      	ldr	r2, [r3, #12]
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	7a9b      	ldrb	r3, [r3, #10]
 80128c0:	f003 0301 	and.w	r3, r3, #1
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d001      	beq.n	80128cc <tcp_output_segment+0x158>
 80128c8:	2318      	movs	r3, #24
 80128ca:	e000      	b.n	80128ce <tcp_output_segment+0x15a>
 80128cc:	2314      	movs	r3, #20
 80128ce:	4413      	add	r3, r2
 80128d0:	69fa      	ldr	r2, [r7, #28]
 80128d2:	429a      	cmp	r2, r3
 80128d4:	d006      	beq.n	80128e4 <tcp_output_segment+0x170>
 80128d6:	4b10      	ldr	r3, [pc, #64]	@ (8012918 <tcp_output_segment+0x1a4>)
 80128d8:	f240 621c 	movw	r2, #1564	@ 0x61c
 80128dc:	4914      	ldr	r1, [pc, #80]	@ (8012930 <tcp_output_segment+0x1bc>)
 80128de:	4810      	ldr	r0, [pc, #64]	@ (8012920 <tcp_output_segment+0x1ac>)
 80128e0:	f003 fec6 	bl	8016670 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	6858      	ldr	r0, [r3, #4]
 80128e8:	68b9      	ldr	r1, [r7, #8]
 80128ea:	68bb      	ldr	r3, [r7, #8]
 80128ec:	1d1c      	adds	r4, r3, #4
 80128ee:	68bb      	ldr	r3, [r7, #8]
 80128f0:	7add      	ldrb	r5, [r3, #11]
 80128f2:	68bb      	ldr	r3, [r7, #8]
 80128f4:	7a9b      	ldrb	r3, [r3, #10]
 80128f6:	687a      	ldr	r2, [r7, #4]
 80128f8:	9202      	str	r2, [sp, #8]
 80128fa:	2206      	movs	r2, #6
 80128fc:	9201      	str	r2, [sp, #4]
 80128fe:	9300      	str	r3, [sp, #0]
 8012900:	462b      	mov	r3, r5
 8012902:	4622      	mov	r2, r4
 8012904:	f002 fbd0 	bl	80150a8 <ip4_output_if>
 8012908:	4603      	mov	r3, r0
 801290a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801290c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012910:	4618      	mov	r0, r3
 8012912:	3720      	adds	r7, #32
 8012914:	46bd      	mov	sp, r7
 8012916:	bdb0      	pop	{r4, r5, r7, pc}
 8012918:	08019780 	.word	0x08019780
 801291c:	08019d44 	.word	0x08019d44
 8012920:	080197d4 	.word	0x080197d4
 8012924:	08019d64 	.word	0x08019d64
 8012928:	08019d84 	.word	0x08019d84
 801292c:	24007efc 	.word	0x24007efc
 8012930:	08019da8 	.word	0x08019da8

08012934 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012934:	b5b0      	push	{r4, r5, r7, lr}
 8012936:	b084      	sub	sp, #16
 8012938:	af00      	add	r7, sp, #0
 801293a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d106      	bne.n	8012950 <tcp_rexmit_rto_prepare+0x1c>
 8012942:	4b31      	ldr	r3, [pc, #196]	@ (8012a08 <tcp_rexmit_rto_prepare+0xd4>)
 8012944:	f240 6263 	movw	r2, #1635	@ 0x663
 8012948:	4930      	ldr	r1, [pc, #192]	@ (8012a0c <tcp_rexmit_rto_prepare+0xd8>)
 801294a:	4831      	ldr	r0, [pc, #196]	@ (8012a10 <tcp_rexmit_rto_prepare+0xdc>)
 801294c:	f003 fe90 	bl	8016670 <iprintf>

  if (pcb->unacked == NULL) {
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012954:	2b00      	cmp	r3, #0
 8012956:	d102      	bne.n	801295e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012958:	f06f 0305 	mvn.w	r3, #5
 801295c:	e050      	b.n	8012a00 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012962:	60fb      	str	r3, [r7, #12]
 8012964:	e00b      	b.n	801297e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012966:	68f8      	ldr	r0, [r7, #12]
 8012968:	f7ff fee4 	bl	8012734 <tcp_output_segment_busy>
 801296c:	4603      	mov	r3, r0
 801296e:	2b00      	cmp	r3, #0
 8012970:	d002      	beq.n	8012978 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012972:	f06f 0305 	mvn.w	r3, #5
 8012976:	e043      	b.n	8012a00 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	60fb      	str	r3, [r7, #12]
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	2b00      	cmp	r3, #0
 8012984:	d1ef      	bne.n	8012966 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012986:	68f8      	ldr	r0, [r7, #12]
 8012988:	f7ff fed4 	bl	8012734 <tcp_output_segment_busy>
 801298c:	4603      	mov	r3, r0
 801298e:	2b00      	cmp	r3, #0
 8012990:	d002      	beq.n	8012998 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012992:	f06f 0305 	mvn.w	r3, #5
 8012996:	e033      	b.n	8012a00 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	2200      	movs	r2, #0
 80129ac:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	8b5b      	ldrh	r3, [r3, #26]
 80129b2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80129b6:	b29a      	uxth	r2, r3
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	68db      	ldr	r3, [r3, #12]
 80129c0:	685b      	ldr	r3, [r3, #4]
 80129c2:	4618      	mov	r0, r3
 80129c4:	f7f8 fc87 	bl	800b2d6 <lwip_htonl>
 80129c8:	4604      	mov	r4, r0
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	891b      	ldrh	r3, [r3, #8]
 80129ce:	461d      	mov	r5, r3
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	68db      	ldr	r3, [r3, #12]
 80129d4:	899b      	ldrh	r3, [r3, #12]
 80129d6:	b29b      	uxth	r3, r3
 80129d8:	4618      	mov	r0, r3
 80129da:	f7f8 fc67 	bl	800b2ac <lwip_htons>
 80129de:	4603      	mov	r3, r0
 80129e0:	b2db      	uxtb	r3, r3
 80129e2:	f003 0303 	and.w	r3, r3, #3
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d001      	beq.n	80129ee <tcp_rexmit_rto_prepare+0xba>
 80129ea:	2301      	movs	r3, #1
 80129ec:	e000      	b.n	80129f0 <tcp_rexmit_rto_prepare+0xbc>
 80129ee:	2300      	movs	r3, #0
 80129f0:	442b      	add	r3, r5
 80129f2:	18e2      	adds	r2, r4, r3
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	2200      	movs	r2, #0
 80129fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 80129fe:	2300      	movs	r3, #0
}
 8012a00:	4618      	mov	r0, r3
 8012a02:	3710      	adds	r7, #16
 8012a04:	46bd      	mov	sp, r7
 8012a06:	bdb0      	pop	{r4, r5, r7, pc}
 8012a08:	08019780 	.word	0x08019780
 8012a0c:	08019dbc 	.word	0x08019dbc
 8012a10:	080197d4 	.word	0x080197d4

08012a14 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012a14:	b580      	push	{r7, lr}
 8012a16:	b082      	sub	sp, #8
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d106      	bne.n	8012a30 <tcp_rexmit_rto_commit+0x1c>
 8012a22:	4b0d      	ldr	r3, [pc, #52]	@ (8012a58 <tcp_rexmit_rto_commit+0x44>)
 8012a24:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8012a28:	490c      	ldr	r1, [pc, #48]	@ (8012a5c <tcp_rexmit_rto_commit+0x48>)
 8012a2a:	480d      	ldr	r0, [pc, #52]	@ (8012a60 <tcp_rexmit_rto_commit+0x4c>)
 8012a2c:	f003 fe20 	bl	8016670 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012a36:	2bff      	cmp	r3, #255	@ 0xff
 8012a38:	d007      	beq.n	8012a4a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012a40:	3301      	adds	r3, #1
 8012a42:	b2da      	uxtb	r2, r3
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012a4a:	6878      	ldr	r0, [r7, #4]
 8012a4c:	f7ff fc7e 	bl	801234c <tcp_output>
}
 8012a50:	bf00      	nop
 8012a52:	3708      	adds	r7, #8
 8012a54:	46bd      	mov	sp, r7
 8012a56:	bd80      	pop	{r7, pc}
 8012a58:	08019780 	.word	0x08019780
 8012a5c:	08019de0 	.word	0x08019de0
 8012a60:	080197d4 	.word	0x080197d4

08012a64 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012a64:	b580      	push	{r7, lr}
 8012a66:	b082      	sub	sp, #8
 8012a68:	af00      	add	r7, sp, #0
 8012a6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d106      	bne.n	8012a80 <tcp_rexmit_rto+0x1c>
 8012a72:	4b0a      	ldr	r3, [pc, #40]	@ (8012a9c <tcp_rexmit_rto+0x38>)
 8012a74:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8012a78:	4909      	ldr	r1, [pc, #36]	@ (8012aa0 <tcp_rexmit_rto+0x3c>)
 8012a7a:	480a      	ldr	r0, [pc, #40]	@ (8012aa4 <tcp_rexmit_rto+0x40>)
 8012a7c:	f003 fdf8 	bl	8016670 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012a80:	6878      	ldr	r0, [r7, #4]
 8012a82:	f7ff ff57 	bl	8012934 <tcp_rexmit_rto_prepare>
 8012a86:	4603      	mov	r3, r0
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d102      	bne.n	8012a92 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012a8c:	6878      	ldr	r0, [r7, #4]
 8012a8e:	f7ff ffc1 	bl	8012a14 <tcp_rexmit_rto_commit>
  }
}
 8012a92:	bf00      	nop
 8012a94:	3708      	adds	r7, #8
 8012a96:	46bd      	mov	sp, r7
 8012a98:	bd80      	pop	{r7, pc}
 8012a9a:	bf00      	nop
 8012a9c:	08019780 	.word	0x08019780
 8012aa0:	08019e04 	.word	0x08019e04
 8012aa4:	080197d4 	.word	0x080197d4

08012aa8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012aa8:	b590      	push	{r4, r7, lr}
 8012aaa:	b085      	sub	sp, #20
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d106      	bne.n	8012ac4 <tcp_rexmit+0x1c>
 8012ab6:	4b2f      	ldr	r3, [pc, #188]	@ (8012b74 <tcp_rexmit+0xcc>)
 8012ab8:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8012abc:	492e      	ldr	r1, [pc, #184]	@ (8012b78 <tcp_rexmit+0xd0>)
 8012abe:	482f      	ldr	r0, [pc, #188]	@ (8012b7c <tcp_rexmit+0xd4>)
 8012ac0:	f003 fdd6 	bl	8016670 <iprintf>

  if (pcb->unacked == NULL) {
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d102      	bne.n	8012ad2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012acc:	f06f 0305 	mvn.w	r3, #5
 8012ad0:	e04c      	b.n	8012b6c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012ad6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012ad8:	68b8      	ldr	r0, [r7, #8]
 8012ada:	f7ff fe2b 	bl	8012734 <tcp_output_segment_busy>
 8012ade:	4603      	mov	r3, r0
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d002      	beq.n	8012aea <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012ae4:	f06f 0305 	mvn.w	r3, #5
 8012ae8:	e040      	b.n	8012b6c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012aea:	68bb      	ldr	r3, [r7, #8]
 8012aec:	681a      	ldr	r2, [r3, #0]
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	336c      	adds	r3, #108	@ 0x6c
 8012af6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012af8:	e002      	b.n	8012b00 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d011      	beq.n	8012b2c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012b08:	68fb      	ldr	r3, [r7, #12]
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	68db      	ldr	r3, [r3, #12]
 8012b0e:	685b      	ldr	r3, [r3, #4]
 8012b10:	4618      	mov	r0, r3
 8012b12:	f7f8 fbe0 	bl	800b2d6 <lwip_htonl>
 8012b16:	4604      	mov	r4, r0
 8012b18:	68bb      	ldr	r3, [r7, #8]
 8012b1a:	68db      	ldr	r3, [r3, #12]
 8012b1c:	685b      	ldr	r3, [r3, #4]
 8012b1e:	4618      	mov	r0, r3
 8012b20:	f7f8 fbd9 	bl	800b2d6 <lwip_htonl>
 8012b24:	4603      	mov	r3, r0
 8012b26:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	dbe6      	blt.n	8012afa <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	681a      	ldr	r2, [r3, #0]
 8012b30:	68bb      	ldr	r3, [r7, #8]
 8012b32:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	68ba      	ldr	r2, [r7, #8]
 8012b38:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012b3a:	68bb      	ldr	r3, [r7, #8]
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d103      	bne.n	8012b4a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	2200      	movs	r2, #0
 8012b46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012b50:	2bff      	cmp	r3, #255	@ 0xff
 8012b52:	d007      	beq.n	8012b64 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012b5a:	3301      	adds	r3, #1
 8012b5c:	b2da      	uxtb	r2, r3
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	2200      	movs	r2, #0
 8012b68:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012b6a:	2300      	movs	r3, #0
}
 8012b6c:	4618      	mov	r0, r3
 8012b6e:	3714      	adds	r7, #20
 8012b70:	46bd      	mov	sp, r7
 8012b72:	bd90      	pop	{r4, r7, pc}
 8012b74:	08019780 	.word	0x08019780
 8012b78:	08019e20 	.word	0x08019e20
 8012b7c:	080197d4 	.word	0x080197d4

08012b80 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012b80:	b580      	push	{r7, lr}
 8012b82:	b082      	sub	sp, #8
 8012b84:	af00      	add	r7, sp, #0
 8012b86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d106      	bne.n	8012b9c <tcp_rexmit_fast+0x1c>
 8012b8e:	4b2a      	ldr	r3, [pc, #168]	@ (8012c38 <tcp_rexmit_fast+0xb8>)
 8012b90:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8012b94:	4929      	ldr	r1, [pc, #164]	@ (8012c3c <tcp_rexmit_fast+0xbc>)
 8012b96:	482a      	ldr	r0, [pc, #168]	@ (8012c40 <tcp_rexmit_fast+0xc0>)
 8012b98:	f003 fd6a 	bl	8016670 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d045      	beq.n	8012c30 <tcp_rexmit_fast+0xb0>
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	8b5b      	ldrh	r3, [r3, #26]
 8012ba8:	f003 0304 	and.w	r3, r3, #4
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d13f      	bne.n	8012c30 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012bb0:	6878      	ldr	r0, [r7, #4]
 8012bb2:	f7ff ff79 	bl	8012aa8 <tcp_rexmit>
 8012bb6:	4603      	mov	r3, r0
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d139      	bne.n	8012c30 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012bc8:	4293      	cmp	r3, r2
 8012bca:	bf28      	it	cs
 8012bcc:	4613      	movcs	r3, r2
 8012bce:	b29b      	uxth	r3, r3
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	da00      	bge.n	8012bd6 <tcp_rexmit_fast+0x56>
 8012bd4:	3301      	adds	r3, #1
 8012bd6:	105b      	asrs	r3, r3, #1
 8012bd8:	b29a      	uxth	r2, r3
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8012be6:	461a      	mov	r2, r3
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012bec:	005b      	lsls	r3, r3, #1
 8012bee:	429a      	cmp	r2, r3
 8012bf0:	d206      	bcs.n	8012c00 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012bf6:	005b      	lsls	r3, r3, #1
 8012bf8:	b29a      	uxth	r2, r3
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012c0a:	4619      	mov	r1, r3
 8012c0c:	0049      	lsls	r1, r1, #1
 8012c0e:	440b      	add	r3, r1
 8012c10:	b29b      	uxth	r3, r3
 8012c12:	4413      	add	r3, r2
 8012c14:	b29a      	uxth	r2, r3
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	8b5b      	ldrh	r3, [r3, #26]
 8012c20:	f043 0304 	orr.w	r3, r3, #4
 8012c24:	b29a      	uxth	r2, r3
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	2200      	movs	r2, #0
 8012c2e:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8012c30:	bf00      	nop
 8012c32:	3708      	adds	r7, #8
 8012c34:	46bd      	mov	sp, r7
 8012c36:	bd80      	pop	{r7, pc}
 8012c38:	08019780 	.word	0x08019780
 8012c3c:	08019e38 	.word	0x08019e38
 8012c40:	080197d4 	.word	0x080197d4

08012c44 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012c44:	b580      	push	{r7, lr}
 8012c46:	b086      	sub	sp, #24
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	60f8      	str	r0, [r7, #12]
 8012c4c:	607b      	str	r3, [r7, #4]
 8012c4e:	460b      	mov	r3, r1
 8012c50:	817b      	strh	r3, [r7, #10]
 8012c52:	4613      	mov	r3, r2
 8012c54:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012c56:	897a      	ldrh	r2, [r7, #10]
 8012c58:	893b      	ldrh	r3, [r7, #8]
 8012c5a:	4413      	add	r3, r2
 8012c5c:	b29b      	uxth	r3, r3
 8012c5e:	3314      	adds	r3, #20
 8012c60:	b29b      	uxth	r3, r3
 8012c62:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012c66:	4619      	mov	r1, r3
 8012c68:	2022      	movs	r0, #34	@ 0x22
 8012c6a:	f7f9 fce5 	bl	800c638 <pbuf_alloc>
 8012c6e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012c70:	697b      	ldr	r3, [r7, #20]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d04d      	beq.n	8012d12 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012c76:	897b      	ldrh	r3, [r7, #10]
 8012c78:	3313      	adds	r3, #19
 8012c7a:	697a      	ldr	r2, [r7, #20]
 8012c7c:	8952      	ldrh	r2, [r2, #10]
 8012c7e:	4293      	cmp	r3, r2
 8012c80:	db06      	blt.n	8012c90 <tcp_output_alloc_header_common+0x4c>
 8012c82:	4b26      	ldr	r3, [pc, #152]	@ (8012d1c <tcp_output_alloc_header_common+0xd8>)
 8012c84:	f240 7223 	movw	r2, #1827	@ 0x723
 8012c88:	4925      	ldr	r1, [pc, #148]	@ (8012d20 <tcp_output_alloc_header_common+0xdc>)
 8012c8a:	4826      	ldr	r0, [pc, #152]	@ (8012d24 <tcp_output_alloc_header_common+0xe0>)
 8012c8c:	f003 fcf0 	bl	8016670 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012c90:	697b      	ldr	r3, [r7, #20]
 8012c92:	685b      	ldr	r3, [r3, #4]
 8012c94:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012c96:	8c3b      	ldrh	r3, [r7, #32]
 8012c98:	4618      	mov	r0, r3
 8012c9a:	f7f8 fb07 	bl	800b2ac <lwip_htons>
 8012c9e:	4603      	mov	r3, r0
 8012ca0:	461a      	mov	r2, r3
 8012ca2:	693b      	ldr	r3, [r7, #16]
 8012ca4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012ca6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012ca8:	4618      	mov	r0, r3
 8012caa:	f7f8 faff 	bl	800b2ac <lwip_htons>
 8012cae:	4603      	mov	r3, r0
 8012cb0:	461a      	mov	r2, r3
 8012cb2:	693b      	ldr	r3, [r7, #16]
 8012cb4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012cb6:	693b      	ldr	r3, [r7, #16]
 8012cb8:	687a      	ldr	r2, [r7, #4]
 8012cba:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012cbc:	68f8      	ldr	r0, [r7, #12]
 8012cbe:	f7f8 fb0a 	bl	800b2d6 <lwip_htonl>
 8012cc2:	4602      	mov	r2, r0
 8012cc4:	693b      	ldr	r3, [r7, #16]
 8012cc6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012cc8:	897b      	ldrh	r3, [r7, #10]
 8012cca:	089b      	lsrs	r3, r3, #2
 8012ccc:	b29b      	uxth	r3, r3
 8012cce:	3305      	adds	r3, #5
 8012cd0:	b29b      	uxth	r3, r3
 8012cd2:	031b      	lsls	r3, r3, #12
 8012cd4:	b29a      	uxth	r2, r3
 8012cd6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012cda:	b29b      	uxth	r3, r3
 8012cdc:	4313      	orrs	r3, r2
 8012cde:	b29b      	uxth	r3, r3
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	f7f8 fae3 	bl	800b2ac <lwip_htons>
 8012ce6:	4603      	mov	r3, r0
 8012ce8:	461a      	mov	r2, r3
 8012cea:	693b      	ldr	r3, [r7, #16]
 8012cec:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012cee:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	f7f8 fadb 	bl	800b2ac <lwip_htons>
 8012cf6:	4603      	mov	r3, r0
 8012cf8:	461a      	mov	r2, r3
 8012cfa:	693b      	ldr	r3, [r7, #16]
 8012cfc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012cfe:	693b      	ldr	r3, [r7, #16]
 8012d00:	2200      	movs	r2, #0
 8012d02:	741a      	strb	r2, [r3, #16]
 8012d04:	2200      	movs	r2, #0
 8012d06:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012d08:	693b      	ldr	r3, [r7, #16]
 8012d0a:	2200      	movs	r2, #0
 8012d0c:	749a      	strb	r2, [r3, #18]
 8012d0e:	2200      	movs	r2, #0
 8012d10:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012d12:	697b      	ldr	r3, [r7, #20]
}
 8012d14:	4618      	mov	r0, r3
 8012d16:	3718      	adds	r7, #24
 8012d18:	46bd      	mov	sp, r7
 8012d1a:	bd80      	pop	{r7, pc}
 8012d1c:	08019780 	.word	0x08019780
 8012d20:	08019e58 	.word	0x08019e58
 8012d24:	080197d4 	.word	0x080197d4

08012d28 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012d28:	b5b0      	push	{r4, r5, r7, lr}
 8012d2a:	b08a      	sub	sp, #40	@ 0x28
 8012d2c:	af04      	add	r7, sp, #16
 8012d2e:	60f8      	str	r0, [r7, #12]
 8012d30:	607b      	str	r3, [r7, #4]
 8012d32:	460b      	mov	r3, r1
 8012d34:	817b      	strh	r3, [r7, #10]
 8012d36:	4613      	mov	r3, r2
 8012d38:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d106      	bne.n	8012d4e <tcp_output_alloc_header+0x26>
 8012d40:	4b15      	ldr	r3, [pc, #84]	@ (8012d98 <tcp_output_alloc_header+0x70>)
 8012d42:	f240 7242 	movw	r2, #1858	@ 0x742
 8012d46:	4915      	ldr	r1, [pc, #84]	@ (8012d9c <tcp_output_alloc_header+0x74>)
 8012d48:	4815      	ldr	r0, [pc, #84]	@ (8012da0 <tcp_output_alloc_header+0x78>)
 8012d4a:	f003 fc91 	bl	8016670 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	8adb      	ldrh	r3, [r3, #22]
 8012d56:	68fa      	ldr	r2, [r7, #12]
 8012d58:	8b12      	ldrh	r2, [r2, #24]
 8012d5a:	68f9      	ldr	r1, [r7, #12]
 8012d5c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8012d5e:	893d      	ldrh	r5, [r7, #8]
 8012d60:	897c      	ldrh	r4, [r7, #10]
 8012d62:	9103      	str	r1, [sp, #12]
 8012d64:	2110      	movs	r1, #16
 8012d66:	9102      	str	r1, [sp, #8]
 8012d68:	9201      	str	r2, [sp, #4]
 8012d6a:	9300      	str	r3, [sp, #0]
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	462a      	mov	r2, r5
 8012d70:	4621      	mov	r1, r4
 8012d72:	f7ff ff67 	bl	8012c44 <tcp_output_alloc_header_common>
 8012d76:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012d78:	697b      	ldr	r3, [r7, #20]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d006      	beq.n	8012d8c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d82:	68fa      	ldr	r2, [r7, #12]
 8012d84:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8012d86:	441a      	add	r2, r3
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8012d8c:	697b      	ldr	r3, [r7, #20]
}
 8012d8e:	4618      	mov	r0, r3
 8012d90:	3718      	adds	r7, #24
 8012d92:	46bd      	mov	sp, r7
 8012d94:	bdb0      	pop	{r4, r5, r7, pc}
 8012d96:	bf00      	nop
 8012d98:	08019780 	.word	0x08019780
 8012d9c:	08019e88 	.word	0x08019e88
 8012da0:	080197d4 	.word	0x080197d4

08012da4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012da4:	b580      	push	{r7, lr}
 8012da6:	b088      	sub	sp, #32
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	60f8      	str	r0, [r7, #12]
 8012dac:	60b9      	str	r1, [r7, #8]
 8012dae:	4611      	mov	r1, r2
 8012db0:	461a      	mov	r2, r3
 8012db2:	460b      	mov	r3, r1
 8012db4:	71fb      	strb	r3, [r7, #7]
 8012db6:	4613      	mov	r3, r2
 8012db8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012dba:	2300      	movs	r3, #0
 8012dbc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012dbe:	68bb      	ldr	r3, [r7, #8]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d106      	bne.n	8012dd2 <tcp_output_fill_options+0x2e>
 8012dc4:	4b12      	ldr	r3, [pc, #72]	@ (8012e10 <tcp_output_fill_options+0x6c>)
 8012dc6:	f240 7256 	movw	r2, #1878	@ 0x756
 8012dca:	4912      	ldr	r1, [pc, #72]	@ (8012e14 <tcp_output_fill_options+0x70>)
 8012dcc:	4812      	ldr	r0, [pc, #72]	@ (8012e18 <tcp_output_fill_options+0x74>)
 8012dce:	f003 fc4f 	bl	8016670 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012dd2:	68bb      	ldr	r3, [r7, #8]
 8012dd4:	685b      	ldr	r3, [r3, #4]
 8012dd6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012dd8:	69bb      	ldr	r3, [r7, #24]
 8012dda:	3314      	adds	r3, #20
 8012ddc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012dde:	8bfb      	ldrh	r3, [r7, #30]
 8012de0:	009b      	lsls	r3, r3, #2
 8012de2:	461a      	mov	r2, r3
 8012de4:	79fb      	ldrb	r3, [r7, #7]
 8012de6:	009b      	lsls	r3, r3, #2
 8012de8:	f003 0304 	and.w	r3, r3, #4
 8012dec:	4413      	add	r3, r2
 8012dee:	3314      	adds	r3, #20
 8012df0:	69ba      	ldr	r2, [r7, #24]
 8012df2:	4413      	add	r3, r2
 8012df4:	697a      	ldr	r2, [r7, #20]
 8012df6:	429a      	cmp	r2, r3
 8012df8:	d006      	beq.n	8012e08 <tcp_output_fill_options+0x64>
 8012dfa:	4b05      	ldr	r3, [pc, #20]	@ (8012e10 <tcp_output_fill_options+0x6c>)
 8012dfc:	f240 7275 	movw	r2, #1909	@ 0x775
 8012e00:	4906      	ldr	r1, [pc, #24]	@ (8012e1c <tcp_output_fill_options+0x78>)
 8012e02:	4805      	ldr	r0, [pc, #20]	@ (8012e18 <tcp_output_fill_options+0x74>)
 8012e04:	f003 fc34 	bl	8016670 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012e08:	bf00      	nop
 8012e0a:	3720      	adds	r7, #32
 8012e0c:	46bd      	mov	sp, r7
 8012e0e:	bd80      	pop	{r7, pc}
 8012e10:	08019780 	.word	0x08019780
 8012e14:	08019eb0 	.word	0x08019eb0
 8012e18:	080197d4 	.word	0x080197d4
 8012e1c:	08019da8 	.word	0x08019da8

08012e20 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012e20:	b580      	push	{r7, lr}
 8012e22:	b08a      	sub	sp, #40	@ 0x28
 8012e24:	af04      	add	r7, sp, #16
 8012e26:	60f8      	str	r0, [r7, #12]
 8012e28:	60b9      	str	r1, [r7, #8]
 8012e2a:	607a      	str	r2, [r7, #4]
 8012e2c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012e2e:	68bb      	ldr	r3, [r7, #8]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d106      	bne.n	8012e42 <tcp_output_control_segment+0x22>
 8012e34:	4b1c      	ldr	r3, [pc, #112]	@ (8012ea8 <tcp_output_control_segment+0x88>)
 8012e36:	f240 7287 	movw	r2, #1927	@ 0x787
 8012e3a:	491c      	ldr	r1, [pc, #112]	@ (8012eac <tcp_output_control_segment+0x8c>)
 8012e3c:	481c      	ldr	r0, [pc, #112]	@ (8012eb0 <tcp_output_control_segment+0x90>)
 8012e3e:	f003 fc17 	bl	8016670 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012e42:	683a      	ldr	r2, [r7, #0]
 8012e44:	6879      	ldr	r1, [r7, #4]
 8012e46:	68f8      	ldr	r0, [r7, #12]
 8012e48:	f7fe faea 	bl	8011420 <tcp_route>
 8012e4c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8012e4e:	693b      	ldr	r3, [r7, #16]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d102      	bne.n	8012e5a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012e54:	23fc      	movs	r3, #252	@ 0xfc
 8012e56:	75fb      	strb	r3, [r7, #23]
 8012e58:	e01c      	b.n	8012e94 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d006      	beq.n	8012e6e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	7adb      	ldrb	r3, [r3, #11]
 8012e64:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	7a9b      	ldrb	r3, [r3, #10]
 8012e6a:	757b      	strb	r3, [r7, #21]
 8012e6c:	e003      	b.n	8012e76 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012e6e:	23ff      	movs	r3, #255	@ 0xff
 8012e70:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8012e72:	2300      	movs	r3, #0
 8012e74:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012e76:	7dba      	ldrb	r2, [r7, #22]
 8012e78:	693b      	ldr	r3, [r7, #16]
 8012e7a:	9302      	str	r3, [sp, #8]
 8012e7c:	2306      	movs	r3, #6
 8012e7e:	9301      	str	r3, [sp, #4]
 8012e80:	7d7b      	ldrb	r3, [r7, #21]
 8012e82:	9300      	str	r3, [sp, #0]
 8012e84:	4613      	mov	r3, r2
 8012e86:	683a      	ldr	r2, [r7, #0]
 8012e88:	6879      	ldr	r1, [r7, #4]
 8012e8a:	68b8      	ldr	r0, [r7, #8]
 8012e8c:	f002 f90c 	bl	80150a8 <ip4_output_if>
 8012e90:	4603      	mov	r3, r0
 8012e92:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012e94:	68b8      	ldr	r0, [r7, #8]
 8012e96:	f7f9 feb3 	bl	800cc00 <pbuf_free>
  return err;
 8012e9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	3718      	adds	r7, #24
 8012ea2:	46bd      	mov	sp, r7
 8012ea4:	bd80      	pop	{r7, pc}
 8012ea6:	bf00      	nop
 8012ea8:	08019780 	.word	0x08019780
 8012eac:	08019ed8 	.word	0x08019ed8
 8012eb0:	080197d4 	.word	0x080197d4

08012eb4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012eb4:	b590      	push	{r4, r7, lr}
 8012eb6:	b08b      	sub	sp, #44	@ 0x2c
 8012eb8:	af04      	add	r7, sp, #16
 8012eba:	60f8      	str	r0, [r7, #12]
 8012ebc:	60b9      	str	r1, [r7, #8]
 8012ebe:	607a      	str	r2, [r7, #4]
 8012ec0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012ec2:	683b      	ldr	r3, [r7, #0]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d106      	bne.n	8012ed6 <tcp_rst+0x22>
 8012ec8:	4b1f      	ldr	r3, [pc, #124]	@ (8012f48 <tcp_rst+0x94>)
 8012eca:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8012ece:	491f      	ldr	r1, [pc, #124]	@ (8012f4c <tcp_rst+0x98>)
 8012ed0:	481f      	ldr	r0, [pc, #124]	@ (8012f50 <tcp_rst+0x9c>)
 8012ed2:	f003 fbcd 	bl	8016670 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d106      	bne.n	8012eea <tcp_rst+0x36>
 8012edc:	4b1a      	ldr	r3, [pc, #104]	@ (8012f48 <tcp_rst+0x94>)
 8012ede:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8012ee2:	491c      	ldr	r1, [pc, #112]	@ (8012f54 <tcp_rst+0xa0>)
 8012ee4:	481a      	ldr	r0, [pc, #104]	@ (8012f50 <tcp_rst+0x9c>)
 8012ee6:	f003 fbc3 	bl	8016670 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012eea:	2300      	movs	r3, #0
 8012eec:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012eee:	f246 0308 	movw	r3, #24584	@ 0x6008
 8012ef2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012ef4:	7dfb      	ldrb	r3, [r7, #23]
 8012ef6:	b29c      	uxth	r4, r3
 8012ef8:	68b8      	ldr	r0, [r7, #8]
 8012efa:	f7f8 f9ec 	bl	800b2d6 <lwip_htonl>
 8012efe:	4602      	mov	r2, r0
 8012f00:	8abb      	ldrh	r3, [r7, #20]
 8012f02:	9303      	str	r3, [sp, #12]
 8012f04:	2314      	movs	r3, #20
 8012f06:	9302      	str	r3, [sp, #8]
 8012f08:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8012f0a:	9301      	str	r3, [sp, #4]
 8012f0c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012f0e:	9300      	str	r3, [sp, #0]
 8012f10:	4613      	mov	r3, r2
 8012f12:	2200      	movs	r2, #0
 8012f14:	4621      	mov	r1, r4
 8012f16:	6878      	ldr	r0, [r7, #4]
 8012f18:	f7ff fe94 	bl	8012c44 <tcp_output_alloc_header_common>
 8012f1c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012f1e:	693b      	ldr	r3, [r7, #16]
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d00c      	beq.n	8012f3e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012f24:	7dfb      	ldrb	r3, [r7, #23]
 8012f26:	2200      	movs	r2, #0
 8012f28:	6939      	ldr	r1, [r7, #16]
 8012f2a:	68f8      	ldr	r0, [r7, #12]
 8012f2c:	f7ff ff3a 	bl	8012da4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f32:	683a      	ldr	r2, [r7, #0]
 8012f34:	6939      	ldr	r1, [r7, #16]
 8012f36:	68f8      	ldr	r0, [r7, #12]
 8012f38:	f7ff ff72 	bl	8012e20 <tcp_output_control_segment>
 8012f3c:	e000      	b.n	8012f40 <tcp_rst+0x8c>
    return;
 8012f3e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012f40:	371c      	adds	r7, #28
 8012f42:	46bd      	mov	sp, r7
 8012f44:	bd90      	pop	{r4, r7, pc}
 8012f46:	bf00      	nop
 8012f48:	08019780 	.word	0x08019780
 8012f4c:	08019f04 	.word	0x08019f04
 8012f50:	080197d4 	.word	0x080197d4
 8012f54:	08019f20 	.word	0x08019f20

08012f58 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012f58:	b590      	push	{r4, r7, lr}
 8012f5a:	b087      	sub	sp, #28
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012f60:	2300      	movs	r3, #0
 8012f62:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012f64:	2300      	movs	r3, #0
 8012f66:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d106      	bne.n	8012f7c <tcp_send_empty_ack+0x24>
 8012f6e:	4b28      	ldr	r3, [pc, #160]	@ (8013010 <tcp_send_empty_ack+0xb8>)
 8012f70:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8012f74:	4927      	ldr	r1, [pc, #156]	@ (8013014 <tcp_send_empty_ack+0xbc>)
 8012f76:	4828      	ldr	r0, [pc, #160]	@ (8013018 <tcp_send_empty_ack+0xc0>)
 8012f78:	f003 fb7a 	bl	8016670 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012f7c:	7dfb      	ldrb	r3, [r7, #23]
 8012f7e:	009b      	lsls	r3, r3, #2
 8012f80:	b2db      	uxtb	r3, r3
 8012f82:	f003 0304 	and.w	r3, r3, #4
 8012f86:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012f88:	7d7b      	ldrb	r3, [r7, #21]
 8012f8a:	b29c      	uxth	r4, r3
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012f90:	4618      	mov	r0, r3
 8012f92:	f7f8 f9a0 	bl	800b2d6 <lwip_htonl>
 8012f96:	4603      	mov	r3, r0
 8012f98:	2200      	movs	r2, #0
 8012f9a:	4621      	mov	r1, r4
 8012f9c:	6878      	ldr	r0, [r7, #4]
 8012f9e:	f7ff fec3 	bl	8012d28 <tcp_output_alloc_header>
 8012fa2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012fa4:	693b      	ldr	r3, [r7, #16]
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d109      	bne.n	8012fbe <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	8b5b      	ldrh	r3, [r3, #26]
 8012fae:	f043 0303 	orr.w	r3, r3, #3
 8012fb2:	b29a      	uxth	r2, r3
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012fb8:	f06f 0301 	mvn.w	r3, #1
 8012fbc:	e023      	b.n	8013006 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012fbe:	7dbb      	ldrb	r3, [r7, #22]
 8012fc0:	7dfa      	ldrb	r2, [r7, #23]
 8012fc2:	6939      	ldr	r1, [r7, #16]
 8012fc4:	6878      	ldr	r0, [r7, #4]
 8012fc6:	f7ff feed 	bl	8012da4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012fca:	687a      	ldr	r2, [r7, #4]
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	3304      	adds	r3, #4
 8012fd0:	6939      	ldr	r1, [r7, #16]
 8012fd2:	6878      	ldr	r0, [r7, #4]
 8012fd4:	f7ff ff24 	bl	8012e20 <tcp_output_control_segment>
 8012fd8:	4603      	mov	r3, r0
 8012fda:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012fdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d007      	beq.n	8012ff4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	8b5b      	ldrh	r3, [r3, #26]
 8012fe8:	f043 0303 	orr.w	r3, r3, #3
 8012fec:	b29a      	uxth	r2, r3
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	835a      	strh	r2, [r3, #26]
 8012ff2:	e006      	b.n	8013002 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	8b5b      	ldrh	r3, [r3, #26]
 8012ff8:	f023 0303 	bic.w	r3, r3, #3
 8012ffc:	b29a      	uxth	r2, r3
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8013002:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013006:	4618      	mov	r0, r3
 8013008:	371c      	adds	r7, #28
 801300a:	46bd      	mov	sp, r7
 801300c:	bd90      	pop	{r4, r7, pc}
 801300e:	bf00      	nop
 8013010:	08019780 	.word	0x08019780
 8013014:	08019f3c 	.word	0x08019f3c
 8013018:	080197d4 	.word	0x080197d4

0801301c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801301c:	b590      	push	{r4, r7, lr}
 801301e:	b087      	sub	sp, #28
 8013020:	af00      	add	r7, sp, #0
 8013022:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013024:	2300      	movs	r3, #0
 8013026:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	2b00      	cmp	r3, #0
 801302c:	d106      	bne.n	801303c <tcp_keepalive+0x20>
 801302e:	4b18      	ldr	r3, [pc, #96]	@ (8013090 <tcp_keepalive+0x74>)
 8013030:	f640 0224 	movw	r2, #2084	@ 0x824
 8013034:	4917      	ldr	r1, [pc, #92]	@ (8013094 <tcp_keepalive+0x78>)
 8013036:	4818      	ldr	r0, [pc, #96]	@ (8013098 <tcp_keepalive+0x7c>)
 8013038:	f003 fb1a 	bl	8016670 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801303c:	7dfb      	ldrb	r3, [r7, #23]
 801303e:	b29c      	uxth	r4, r3
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013044:	3b01      	subs	r3, #1
 8013046:	4618      	mov	r0, r3
 8013048:	f7f8 f945 	bl	800b2d6 <lwip_htonl>
 801304c:	4603      	mov	r3, r0
 801304e:	2200      	movs	r2, #0
 8013050:	4621      	mov	r1, r4
 8013052:	6878      	ldr	r0, [r7, #4]
 8013054:	f7ff fe68 	bl	8012d28 <tcp_output_alloc_header>
 8013058:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801305a:	693b      	ldr	r3, [r7, #16]
 801305c:	2b00      	cmp	r3, #0
 801305e:	d102      	bne.n	8013066 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013060:	f04f 33ff 	mov.w	r3, #4294967295
 8013064:	e010      	b.n	8013088 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013066:	7dfb      	ldrb	r3, [r7, #23]
 8013068:	2200      	movs	r2, #0
 801306a:	6939      	ldr	r1, [r7, #16]
 801306c:	6878      	ldr	r0, [r7, #4]
 801306e:	f7ff fe99 	bl	8012da4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013072:	687a      	ldr	r2, [r7, #4]
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	3304      	adds	r3, #4
 8013078:	6939      	ldr	r1, [r7, #16]
 801307a:	6878      	ldr	r0, [r7, #4]
 801307c:	f7ff fed0 	bl	8012e20 <tcp_output_control_segment>
 8013080:	4603      	mov	r3, r0
 8013082:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013084:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013088:	4618      	mov	r0, r3
 801308a:	371c      	adds	r7, #28
 801308c:	46bd      	mov	sp, r7
 801308e:	bd90      	pop	{r4, r7, pc}
 8013090:	08019780 	.word	0x08019780
 8013094:	08019f5c 	.word	0x08019f5c
 8013098:	080197d4 	.word	0x080197d4

0801309c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801309c:	b590      	push	{r4, r7, lr}
 801309e:	b08b      	sub	sp, #44	@ 0x2c
 80130a0:	af00      	add	r7, sp, #0
 80130a2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80130a4:	2300      	movs	r3, #0
 80130a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d106      	bne.n	80130be <tcp_zero_window_probe+0x22>
 80130b0:	4b4c      	ldr	r3, [pc, #304]	@ (80131e4 <tcp_zero_window_probe+0x148>)
 80130b2:	f640 024f 	movw	r2, #2127	@ 0x84f
 80130b6:	494c      	ldr	r1, [pc, #304]	@ (80131e8 <tcp_zero_window_probe+0x14c>)
 80130b8:	484c      	ldr	r0, [pc, #304]	@ (80131ec <tcp_zero_window_probe+0x150>)
 80130ba:	f003 fad9 	bl	8016670 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80130c2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80130c4:	6a3b      	ldr	r3, [r7, #32]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d101      	bne.n	80130ce <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80130ca:	2300      	movs	r3, #0
 80130cc:	e086      	b.n	80131dc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80130d4:	2bff      	cmp	r3, #255	@ 0xff
 80130d6:	d007      	beq.n	80130e8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80130de:	3301      	adds	r3, #1
 80130e0:	b2da      	uxtb	r2, r3
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80130e8:	6a3b      	ldr	r3, [r7, #32]
 80130ea:	68db      	ldr	r3, [r3, #12]
 80130ec:	899b      	ldrh	r3, [r3, #12]
 80130ee:	b29b      	uxth	r3, r3
 80130f0:	4618      	mov	r0, r3
 80130f2:	f7f8 f8db 	bl	800b2ac <lwip_htons>
 80130f6:	4603      	mov	r3, r0
 80130f8:	b2db      	uxtb	r3, r3
 80130fa:	f003 0301 	and.w	r3, r3, #1
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d005      	beq.n	801310e <tcp_zero_window_probe+0x72>
 8013102:	6a3b      	ldr	r3, [r7, #32]
 8013104:	891b      	ldrh	r3, [r3, #8]
 8013106:	2b00      	cmp	r3, #0
 8013108:	d101      	bne.n	801310e <tcp_zero_window_probe+0x72>
 801310a:	2301      	movs	r3, #1
 801310c:	e000      	b.n	8013110 <tcp_zero_window_probe+0x74>
 801310e:	2300      	movs	r3, #0
 8013110:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8013112:	7ffb      	ldrb	r3, [r7, #31]
 8013114:	2b00      	cmp	r3, #0
 8013116:	bf0c      	ite	eq
 8013118:	2301      	moveq	r3, #1
 801311a:	2300      	movne	r3, #0
 801311c:	b2db      	uxtb	r3, r3
 801311e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8013120:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013124:	b299      	uxth	r1, r3
 8013126:	6a3b      	ldr	r3, [r7, #32]
 8013128:	68db      	ldr	r3, [r3, #12]
 801312a:	685b      	ldr	r3, [r3, #4]
 801312c:	8bba      	ldrh	r2, [r7, #28]
 801312e:	6878      	ldr	r0, [r7, #4]
 8013130:	f7ff fdfa 	bl	8012d28 <tcp_output_alloc_header>
 8013134:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8013136:	69bb      	ldr	r3, [r7, #24]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d102      	bne.n	8013142 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801313c:	f04f 33ff 	mov.w	r3, #4294967295
 8013140:	e04c      	b.n	80131dc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013142:	69bb      	ldr	r3, [r7, #24]
 8013144:	685b      	ldr	r3, [r3, #4]
 8013146:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013148:	7ffb      	ldrb	r3, [r7, #31]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d011      	beq.n	8013172 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801314e:	697b      	ldr	r3, [r7, #20]
 8013150:	899b      	ldrh	r3, [r3, #12]
 8013152:	b29b      	uxth	r3, r3
 8013154:	b21b      	sxth	r3, r3
 8013156:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801315a:	b21c      	sxth	r4, r3
 801315c:	2011      	movs	r0, #17
 801315e:	f7f8 f8a5 	bl	800b2ac <lwip_htons>
 8013162:	4603      	mov	r3, r0
 8013164:	b21b      	sxth	r3, r3
 8013166:	4323      	orrs	r3, r4
 8013168:	b21b      	sxth	r3, r3
 801316a:	b29a      	uxth	r2, r3
 801316c:	697b      	ldr	r3, [r7, #20]
 801316e:	819a      	strh	r2, [r3, #12]
 8013170:	e010      	b.n	8013194 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013172:	69bb      	ldr	r3, [r7, #24]
 8013174:	685b      	ldr	r3, [r3, #4]
 8013176:	3314      	adds	r3, #20
 8013178:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801317a:	6a3b      	ldr	r3, [r7, #32]
 801317c:	6858      	ldr	r0, [r3, #4]
 801317e:	6a3b      	ldr	r3, [r7, #32]
 8013180:	685b      	ldr	r3, [r3, #4]
 8013182:	891a      	ldrh	r2, [r3, #8]
 8013184:	6a3b      	ldr	r3, [r7, #32]
 8013186:	891b      	ldrh	r3, [r3, #8]
 8013188:	1ad3      	subs	r3, r2, r3
 801318a:	b29b      	uxth	r3, r3
 801318c:	2201      	movs	r2, #1
 801318e:	6939      	ldr	r1, [r7, #16]
 8013190:	f7f9 ff2c 	bl	800cfec <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013194:	6a3b      	ldr	r3, [r7, #32]
 8013196:	68db      	ldr	r3, [r3, #12]
 8013198:	685b      	ldr	r3, [r3, #4]
 801319a:	4618      	mov	r0, r3
 801319c:	f7f8 f89b 	bl	800b2d6 <lwip_htonl>
 80131a0:	4603      	mov	r3, r0
 80131a2:	3301      	adds	r3, #1
 80131a4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	1ad3      	subs	r3, r2, r3
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	da02      	bge.n	80131b8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	68fa      	ldr	r2, [r7, #12]
 80131b6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80131b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80131bc:	2200      	movs	r2, #0
 80131be:	69b9      	ldr	r1, [r7, #24]
 80131c0:	6878      	ldr	r0, [r7, #4]
 80131c2:	f7ff fdef 	bl	8012da4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80131c6:	687a      	ldr	r2, [r7, #4]
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	3304      	adds	r3, #4
 80131cc:	69b9      	ldr	r1, [r7, #24]
 80131ce:	6878      	ldr	r0, [r7, #4]
 80131d0:	f7ff fe26 	bl	8012e20 <tcp_output_control_segment>
 80131d4:	4603      	mov	r3, r0
 80131d6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80131d8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80131dc:	4618      	mov	r0, r3
 80131de:	372c      	adds	r7, #44	@ 0x2c
 80131e0:	46bd      	mov	sp, r7
 80131e2:	bd90      	pop	{r4, r7, pc}
 80131e4:	08019780 	.word	0x08019780
 80131e8:	08019f78 	.word	0x08019f78
 80131ec:	080197d4 	.word	0x080197d4

080131f0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80131f0:	b580      	push	{r7, lr}
 80131f2:	b082      	sub	sp, #8
 80131f4:	af00      	add	r7, sp, #0
 80131f6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80131f8:	f7f9 ffe6 	bl	800d1c8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80131fc:	4b0a      	ldr	r3, [pc, #40]	@ (8013228 <tcpip_tcp_timer+0x38>)
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	2b00      	cmp	r3, #0
 8013202:	d103      	bne.n	801320c <tcpip_tcp_timer+0x1c>
 8013204:	4b09      	ldr	r3, [pc, #36]	@ (801322c <tcpip_tcp_timer+0x3c>)
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d005      	beq.n	8013218 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801320c:	2200      	movs	r2, #0
 801320e:	4908      	ldr	r1, [pc, #32]	@ (8013230 <tcpip_tcp_timer+0x40>)
 8013210:	20fa      	movs	r0, #250	@ 0xfa
 8013212:	f000 f8f3 	bl	80133fc <sys_timeout>
 8013216:	e003      	b.n	8013220 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013218:	4b06      	ldr	r3, [pc, #24]	@ (8013234 <tcpip_tcp_timer+0x44>)
 801321a:	2200      	movs	r2, #0
 801321c:	601a      	str	r2, [r3, #0]
  }
}
 801321e:	bf00      	nop
 8013220:	bf00      	nop
 8013222:	3708      	adds	r7, #8
 8013224:	46bd      	mov	sp, r7
 8013226:	bd80      	pop	{r7, pc}
 8013228:	24007f08 	.word	0x24007f08
 801322c:	24007f0c 	.word	0x24007f0c
 8013230:	080131f1 	.word	0x080131f1
 8013234:	24007f54 	.word	0x24007f54

08013238 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013238:	b580      	push	{r7, lr}
 801323a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801323c:	4b0a      	ldr	r3, [pc, #40]	@ (8013268 <tcp_timer_needed+0x30>)
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d10f      	bne.n	8013264 <tcp_timer_needed+0x2c>
 8013244:	4b09      	ldr	r3, [pc, #36]	@ (801326c <tcp_timer_needed+0x34>)
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d103      	bne.n	8013254 <tcp_timer_needed+0x1c>
 801324c:	4b08      	ldr	r3, [pc, #32]	@ (8013270 <tcp_timer_needed+0x38>)
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	2b00      	cmp	r3, #0
 8013252:	d007      	beq.n	8013264 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013254:	4b04      	ldr	r3, [pc, #16]	@ (8013268 <tcp_timer_needed+0x30>)
 8013256:	2201      	movs	r2, #1
 8013258:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801325a:	2200      	movs	r2, #0
 801325c:	4905      	ldr	r1, [pc, #20]	@ (8013274 <tcp_timer_needed+0x3c>)
 801325e:	20fa      	movs	r0, #250	@ 0xfa
 8013260:	f000 f8cc 	bl	80133fc <sys_timeout>
  }
}
 8013264:	bf00      	nop
 8013266:	bd80      	pop	{r7, pc}
 8013268:	24007f54 	.word	0x24007f54
 801326c:	24007f08 	.word	0x24007f08
 8013270:	24007f0c 	.word	0x24007f0c
 8013274:	080131f1 	.word	0x080131f1

08013278 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013278:	b580      	push	{r7, lr}
 801327a:	b086      	sub	sp, #24
 801327c:	af00      	add	r7, sp, #0
 801327e:	60f8      	str	r0, [r7, #12]
 8013280:	60b9      	str	r1, [r7, #8]
 8013282:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013284:	200a      	movs	r0, #10
 8013286:	f7f8 fda1 	bl	800bdcc <memp_malloc>
 801328a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801328c:	693b      	ldr	r3, [r7, #16]
 801328e:	2b00      	cmp	r3, #0
 8013290:	d109      	bne.n	80132a6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013292:	693b      	ldr	r3, [r7, #16]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d151      	bne.n	801333c <sys_timeout_abs+0xc4>
 8013298:	4b2a      	ldr	r3, [pc, #168]	@ (8013344 <sys_timeout_abs+0xcc>)
 801329a:	22be      	movs	r2, #190	@ 0xbe
 801329c:	492a      	ldr	r1, [pc, #168]	@ (8013348 <sys_timeout_abs+0xd0>)
 801329e:	482b      	ldr	r0, [pc, #172]	@ (801334c <sys_timeout_abs+0xd4>)
 80132a0:	f003 f9e6 	bl	8016670 <iprintf>
    return;
 80132a4:	e04a      	b.n	801333c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80132a6:	693b      	ldr	r3, [r7, #16]
 80132a8:	2200      	movs	r2, #0
 80132aa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80132ac:	693b      	ldr	r3, [r7, #16]
 80132ae:	68ba      	ldr	r2, [r7, #8]
 80132b0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80132b2:	693b      	ldr	r3, [r7, #16]
 80132b4:	687a      	ldr	r2, [r7, #4]
 80132b6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80132b8:	693b      	ldr	r3, [r7, #16]
 80132ba:	68fa      	ldr	r2, [r7, #12]
 80132bc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80132be:	4b24      	ldr	r3, [pc, #144]	@ (8013350 <sys_timeout_abs+0xd8>)
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d103      	bne.n	80132ce <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80132c6:	4a22      	ldr	r2, [pc, #136]	@ (8013350 <sys_timeout_abs+0xd8>)
 80132c8:	693b      	ldr	r3, [r7, #16]
 80132ca:	6013      	str	r3, [r2, #0]
    return;
 80132cc:	e037      	b.n	801333e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80132ce:	693b      	ldr	r3, [r7, #16]
 80132d0:	685a      	ldr	r2, [r3, #4]
 80132d2:	4b1f      	ldr	r3, [pc, #124]	@ (8013350 <sys_timeout_abs+0xd8>)
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	685b      	ldr	r3, [r3, #4]
 80132d8:	1ad3      	subs	r3, r2, r3
 80132da:	0fdb      	lsrs	r3, r3, #31
 80132dc:	f003 0301 	and.w	r3, r3, #1
 80132e0:	b2db      	uxtb	r3, r3
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d007      	beq.n	80132f6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80132e6:	4b1a      	ldr	r3, [pc, #104]	@ (8013350 <sys_timeout_abs+0xd8>)
 80132e8:	681a      	ldr	r2, [r3, #0]
 80132ea:	693b      	ldr	r3, [r7, #16]
 80132ec:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80132ee:	4a18      	ldr	r2, [pc, #96]	@ (8013350 <sys_timeout_abs+0xd8>)
 80132f0:	693b      	ldr	r3, [r7, #16]
 80132f2:	6013      	str	r3, [r2, #0]
 80132f4:	e023      	b.n	801333e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80132f6:	4b16      	ldr	r3, [pc, #88]	@ (8013350 <sys_timeout_abs+0xd8>)
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	617b      	str	r3, [r7, #20]
 80132fc:	e01a      	b.n	8013334 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80132fe:	697b      	ldr	r3, [r7, #20]
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	2b00      	cmp	r3, #0
 8013304:	d00b      	beq.n	801331e <sys_timeout_abs+0xa6>
 8013306:	693b      	ldr	r3, [r7, #16]
 8013308:	685a      	ldr	r2, [r3, #4]
 801330a:	697b      	ldr	r3, [r7, #20]
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	685b      	ldr	r3, [r3, #4]
 8013310:	1ad3      	subs	r3, r2, r3
 8013312:	0fdb      	lsrs	r3, r3, #31
 8013314:	f003 0301 	and.w	r3, r3, #1
 8013318:	b2db      	uxtb	r3, r3
 801331a:	2b00      	cmp	r3, #0
 801331c:	d007      	beq.n	801332e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801331e:	697b      	ldr	r3, [r7, #20]
 8013320:	681a      	ldr	r2, [r3, #0]
 8013322:	693b      	ldr	r3, [r7, #16]
 8013324:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013326:	697b      	ldr	r3, [r7, #20]
 8013328:	693a      	ldr	r2, [r7, #16]
 801332a:	601a      	str	r2, [r3, #0]
        break;
 801332c:	e007      	b.n	801333e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801332e:	697b      	ldr	r3, [r7, #20]
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	617b      	str	r3, [r7, #20]
 8013334:	697b      	ldr	r3, [r7, #20]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d1e1      	bne.n	80132fe <sys_timeout_abs+0x86>
 801333a:	e000      	b.n	801333e <sys_timeout_abs+0xc6>
    return;
 801333c:	bf00      	nop
      }
    }
  }
}
 801333e:	3718      	adds	r7, #24
 8013340:	46bd      	mov	sp, r7
 8013342:	bd80      	pop	{r7, pc}
 8013344:	08019f9c 	.word	0x08019f9c
 8013348:	08019fd0 	.word	0x08019fd0
 801334c:	0801a010 	.word	0x0801a010
 8013350:	24007f4c 	.word	0x24007f4c

08013354 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013354:	b580      	push	{r7, lr}
 8013356:	b086      	sub	sp, #24
 8013358:	af00      	add	r7, sp, #0
 801335a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013360:	697b      	ldr	r3, [r7, #20]
 8013362:	685b      	ldr	r3, [r3, #4]
 8013364:	4798      	blx	r3

  now = sys_now();
 8013366:	f7f1 ffa5 	bl	80052b4 <sys_now>
 801336a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801336c:	697b      	ldr	r3, [r7, #20]
 801336e:	681a      	ldr	r2, [r3, #0]
 8013370:	4b0f      	ldr	r3, [pc, #60]	@ (80133b0 <lwip_cyclic_timer+0x5c>)
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	4413      	add	r3, r2
 8013376:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013378:	68fa      	ldr	r2, [r7, #12]
 801337a:	693b      	ldr	r3, [r7, #16]
 801337c:	1ad3      	subs	r3, r2, r3
 801337e:	0fdb      	lsrs	r3, r3, #31
 8013380:	f003 0301 	and.w	r3, r3, #1
 8013384:	b2db      	uxtb	r3, r3
 8013386:	2b00      	cmp	r3, #0
 8013388:	d009      	beq.n	801339e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801338a:	697b      	ldr	r3, [r7, #20]
 801338c:	681a      	ldr	r2, [r3, #0]
 801338e:	693b      	ldr	r3, [r7, #16]
 8013390:	4413      	add	r3, r2
 8013392:	687a      	ldr	r2, [r7, #4]
 8013394:	4907      	ldr	r1, [pc, #28]	@ (80133b4 <lwip_cyclic_timer+0x60>)
 8013396:	4618      	mov	r0, r3
 8013398:	f7ff ff6e 	bl	8013278 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801339c:	e004      	b.n	80133a8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801339e:	687a      	ldr	r2, [r7, #4]
 80133a0:	4904      	ldr	r1, [pc, #16]	@ (80133b4 <lwip_cyclic_timer+0x60>)
 80133a2:	68f8      	ldr	r0, [r7, #12]
 80133a4:	f7ff ff68 	bl	8013278 <sys_timeout_abs>
}
 80133a8:	bf00      	nop
 80133aa:	3718      	adds	r7, #24
 80133ac:	46bd      	mov	sp, r7
 80133ae:	bd80      	pop	{r7, pc}
 80133b0:	24007f50 	.word	0x24007f50
 80133b4:	08013355 	.word	0x08013355

080133b8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80133b8:	b580      	push	{r7, lr}
 80133ba:	b082      	sub	sp, #8
 80133bc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80133be:	2301      	movs	r3, #1
 80133c0:	607b      	str	r3, [r7, #4]
 80133c2:	e00e      	b.n	80133e2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80133c4:	4a0b      	ldr	r2, [pc, #44]	@ (80133f4 <sys_timeouts_init+0x3c>)
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	00db      	lsls	r3, r3, #3
 80133d0:	4a08      	ldr	r2, [pc, #32]	@ (80133f4 <sys_timeouts_init+0x3c>)
 80133d2:	4413      	add	r3, r2
 80133d4:	461a      	mov	r2, r3
 80133d6:	4908      	ldr	r1, [pc, #32]	@ (80133f8 <sys_timeouts_init+0x40>)
 80133d8:	f000 f810 	bl	80133fc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	3301      	adds	r3, #1
 80133e0:	607b      	str	r3, [r7, #4]
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	2b02      	cmp	r3, #2
 80133e6:	d9ed      	bls.n	80133c4 <sys_timeouts_init+0xc>
  }
}
 80133e8:	bf00      	nop
 80133ea:	bf00      	nop
 80133ec:	3708      	adds	r7, #8
 80133ee:	46bd      	mov	sp, r7
 80133f0:	bd80      	pop	{r7, pc}
 80133f2:	bf00      	nop
 80133f4:	0801abe8 	.word	0x0801abe8
 80133f8:	08013355 	.word	0x08013355

080133fc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80133fc:	b580      	push	{r7, lr}
 80133fe:	b086      	sub	sp, #24
 8013400:	af00      	add	r7, sp, #0
 8013402:	60f8      	str	r0, [r7, #12]
 8013404:	60b9      	str	r1, [r7, #8]
 8013406:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801340e:	d306      	bcc.n	801341e <sys_timeout+0x22>
 8013410:	4b0a      	ldr	r3, [pc, #40]	@ (801343c <sys_timeout+0x40>)
 8013412:	f240 1229 	movw	r2, #297	@ 0x129
 8013416:	490a      	ldr	r1, [pc, #40]	@ (8013440 <sys_timeout+0x44>)
 8013418:	480a      	ldr	r0, [pc, #40]	@ (8013444 <sys_timeout+0x48>)
 801341a:	f003 f929 	bl	8016670 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801341e:	f7f1 ff49 	bl	80052b4 <sys_now>
 8013422:	4602      	mov	r2, r0
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	4413      	add	r3, r2
 8013428:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801342a:	687a      	ldr	r2, [r7, #4]
 801342c:	68b9      	ldr	r1, [r7, #8]
 801342e:	6978      	ldr	r0, [r7, #20]
 8013430:	f7ff ff22 	bl	8013278 <sys_timeout_abs>
#endif
}
 8013434:	bf00      	nop
 8013436:	3718      	adds	r7, #24
 8013438:	46bd      	mov	sp, r7
 801343a:	bd80      	pop	{r7, pc}
 801343c:	08019f9c 	.word	0x08019f9c
 8013440:	0801a038 	.word	0x0801a038
 8013444:	0801a010 	.word	0x0801a010

08013448 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013448:	b580      	push	{r7, lr}
 801344a:	b084      	sub	sp, #16
 801344c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801344e:	f7f1 ff31 	bl	80052b4 <sys_now>
 8013452:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013454:	4b17      	ldr	r3, [pc, #92]	@ (80134b4 <sys_check_timeouts+0x6c>)
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801345a:	68bb      	ldr	r3, [r7, #8]
 801345c:	2b00      	cmp	r3, #0
 801345e:	d022      	beq.n	80134a6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013460:	68bb      	ldr	r3, [r7, #8]
 8013462:	685b      	ldr	r3, [r3, #4]
 8013464:	68fa      	ldr	r2, [r7, #12]
 8013466:	1ad3      	subs	r3, r2, r3
 8013468:	0fdb      	lsrs	r3, r3, #31
 801346a:	f003 0301 	and.w	r3, r3, #1
 801346e:	b2db      	uxtb	r3, r3
 8013470:	2b00      	cmp	r3, #0
 8013472:	d11a      	bne.n	80134aa <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013474:	68bb      	ldr	r3, [r7, #8]
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	4a0e      	ldr	r2, [pc, #56]	@ (80134b4 <sys_check_timeouts+0x6c>)
 801347a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801347c:	68bb      	ldr	r3, [r7, #8]
 801347e:	689b      	ldr	r3, [r3, #8]
 8013480:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013482:	68bb      	ldr	r3, [r7, #8]
 8013484:	68db      	ldr	r3, [r3, #12]
 8013486:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013488:	68bb      	ldr	r3, [r7, #8]
 801348a:	685b      	ldr	r3, [r3, #4]
 801348c:	4a0a      	ldr	r2, [pc, #40]	@ (80134b8 <sys_check_timeouts+0x70>)
 801348e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013490:	68b9      	ldr	r1, [r7, #8]
 8013492:	200a      	movs	r0, #10
 8013494:	f7f8 fd10 	bl	800beb8 <memp_free>
    if (handler != NULL) {
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	2b00      	cmp	r3, #0
 801349c:	d0da      	beq.n	8013454 <sys_check_timeouts+0xc>
      handler(arg);
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	6838      	ldr	r0, [r7, #0]
 80134a2:	4798      	blx	r3
  do {
 80134a4:	e7d6      	b.n	8013454 <sys_check_timeouts+0xc>
      return;
 80134a6:	bf00      	nop
 80134a8:	e000      	b.n	80134ac <sys_check_timeouts+0x64>
      return;
 80134aa:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80134ac:	3710      	adds	r7, #16
 80134ae:	46bd      	mov	sp, r7
 80134b0:	bd80      	pop	{r7, pc}
 80134b2:	bf00      	nop
 80134b4:	24007f4c 	.word	0x24007f4c
 80134b8:	24007f50 	.word	0x24007f50

080134bc <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80134bc:	b580      	push	{r7, lr}
 80134be:	b082      	sub	sp, #8
 80134c0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80134c2:	4b16      	ldr	r3, [pc, #88]	@ (801351c <sys_timeouts_sleeptime+0x60>)
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d102      	bne.n	80134d0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80134ca:	f04f 33ff 	mov.w	r3, #4294967295
 80134ce:	e020      	b.n	8013512 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80134d0:	f7f1 fef0 	bl	80052b4 <sys_now>
 80134d4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80134d6:	4b11      	ldr	r3, [pc, #68]	@ (801351c <sys_timeouts_sleeptime+0x60>)
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	685a      	ldr	r2, [r3, #4]
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	1ad3      	subs	r3, r2, r3
 80134e0:	0fdb      	lsrs	r3, r3, #31
 80134e2:	f003 0301 	and.w	r3, r3, #1
 80134e6:	b2db      	uxtb	r3, r3
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d001      	beq.n	80134f0 <sys_timeouts_sleeptime+0x34>
    return 0;
 80134ec:	2300      	movs	r3, #0
 80134ee:	e010      	b.n	8013512 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80134f0:	4b0a      	ldr	r3, [pc, #40]	@ (801351c <sys_timeouts_sleeptime+0x60>)
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	685a      	ldr	r2, [r3, #4]
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	1ad3      	subs	r3, r2, r3
 80134fa:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80134fc:	683b      	ldr	r3, [r7, #0]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	da06      	bge.n	8013510 <sys_timeouts_sleeptime+0x54>
 8013502:	4b07      	ldr	r3, [pc, #28]	@ (8013520 <sys_timeouts_sleeptime+0x64>)
 8013504:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8013508:	4906      	ldr	r1, [pc, #24]	@ (8013524 <sys_timeouts_sleeptime+0x68>)
 801350a:	4807      	ldr	r0, [pc, #28]	@ (8013528 <sys_timeouts_sleeptime+0x6c>)
 801350c:	f003 f8b0 	bl	8016670 <iprintf>
    return ret;
 8013510:	683b      	ldr	r3, [r7, #0]
  }
}
 8013512:	4618      	mov	r0, r3
 8013514:	3708      	adds	r7, #8
 8013516:	46bd      	mov	sp, r7
 8013518:	bd80      	pop	{r7, pc}
 801351a:	bf00      	nop
 801351c:	24007f4c 	.word	0x24007f4c
 8013520:	08019f9c 	.word	0x08019f9c
 8013524:	0801a070 	.word	0x0801a070
 8013528:	0801a010 	.word	0x0801a010

0801352c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801352c:	b580      	push	{r7, lr}
 801352e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013530:	f002 ff9e 	bl	8016470 <rand>
 8013534:	4603      	mov	r3, r0
 8013536:	b29b      	uxth	r3, r3
 8013538:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801353c:	b29b      	uxth	r3, r3
 801353e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8013542:	b29a      	uxth	r2, r3
 8013544:	4b01      	ldr	r3, [pc, #4]	@ (801354c <udp_init+0x20>)
 8013546:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013548:	bf00      	nop
 801354a:	bd80      	pop	{r7, pc}
 801354c:	24000030 	.word	0x24000030

08013550 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013550:	b480      	push	{r7}
 8013552:	b083      	sub	sp, #12
 8013554:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8013556:	2300      	movs	r3, #0
 8013558:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801355a:	4b17      	ldr	r3, [pc, #92]	@ (80135b8 <udp_new_port+0x68>)
 801355c:	881b      	ldrh	r3, [r3, #0]
 801355e:	1c5a      	adds	r2, r3, #1
 8013560:	b291      	uxth	r1, r2
 8013562:	4a15      	ldr	r2, [pc, #84]	@ (80135b8 <udp_new_port+0x68>)
 8013564:	8011      	strh	r1, [r2, #0]
 8013566:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801356a:	4293      	cmp	r3, r2
 801356c:	d103      	bne.n	8013576 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801356e:	4b12      	ldr	r3, [pc, #72]	@ (80135b8 <udp_new_port+0x68>)
 8013570:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8013574:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013576:	4b11      	ldr	r3, [pc, #68]	@ (80135bc <udp_new_port+0x6c>)
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	603b      	str	r3, [r7, #0]
 801357c:	e011      	b.n	80135a2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801357e:	683b      	ldr	r3, [r7, #0]
 8013580:	8a5a      	ldrh	r2, [r3, #18]
 8013582:	4b0d      	ldr	r3, [pc, #52]	@ (80135b8 <udp_new_port+0x68>)
 8013584:	881b      	ldrh	r3, [r3, #0]
 8013586:	429a      	cmp	r2, r3
 8013588:	d108      	bne.n	801359c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801358a:	88fb      	ldrh	r3, [r7, #6]
 801358c:	3301      	adds	r3, #1
 801358e:	80fb      	strh	r3, [r7, #6]
 8013590:	88fb      	ldrh	r3, [r7, #6]
 8013592:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013596:	d3e0      	bcc.n	801355a <udp_new_port+0xa>
        return 0;
 8013598:	2300      	movs	r3, #0
 801359a:	e007      	b.n	80135ac <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801359c:	683b      	ldr	r3, [r7, #0]
 801359e:	68db      	ldr	r3, [r3, #12]
 80135a0:	603b      	str	r3, [r7, #0]
 80135a2:	683b      	ldr	r3, [r7, #0]
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d1ea      	bne.n	801357e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80135a8:	4b03      	ldr	r3, [pc, #12]	@ (80135b8 <udp_new_port+0x68>)
 80135aa:	881b      	ldrh	r3, [r3, #0]
}
 80135ac:	4618      	mov	r0, r3
 80135ae:	370c      	adds	r7, #12
 80135b0:	46bd      	mov	sp, r7
 80135b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b6:	4770      	bx	lr
 80135b8:	24000030 	.word	0x24000030
 80135bc:	24007f58 	.word	0x24007f58

080135c0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80135c0:	b580      	push	{r7, lr}
 80135c2:	b084      	sub	sp, #16
 80135c4:	af00      	add	r7, sp, #0
 80135c6:	60f8      	str	r0, [r7, #12]
 80135c8:	60b9      	str	r1, [r7, #8]
 80135ca:	4613      	mov	r3, r2
 80135cc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d105      	bne.n	80135e0 <udp_input_local_match+0x20>
 80135d4:	4b27      	ldr	r3, [pc, #156]	@ (8013674 <udp_input_local_match+0xb4>)
 80135d6:	2287      	movs	r2, #135	@ 0x87
 80135d8:	4927      	ldr	r1, [pc, #156]	@ (8013678 <udp_input_local_match+0xb8>)
 80135da:	4828      	ldr	r0, [pc, #160]	@ (801367c <udp_input_local_match+0xbc>)
 80135dc:	f003 f848 	bl	8016670 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80135e0:	68bb      	ldr	r3, [r7, #8]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d105      	bne.n	80135f2 <udp_input_local_match+0x32>
 80135e6:	4b23      	ldr	r3, [pc, #140]	@ (8013674 <udp_input_local_match+0xb4>)
 80135e8:	2288      	movs	r2, #136	@ 0x88
 80135ea:	4925      	ldr	r1, [pc, #148]	@ (8013680 <udp_input_local_match+0xc0>)
 80135ec:	4823      	ldr	r0, [pc, #140]	@ (801367c <udp_input_local_match+0xbc>)
 80135ee:	f003 f83f 	bl	8016670 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	7a1b      	ldrb	r3, [r3, #8]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d00b      	beq.n	8013612 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	7a1a      	ldrb	r2, [r3, #8]
 80135fe:	4b21      	ldr	r3, [pc, #132]	@ (8013684 <udp_input_local_match+0xc4>)
 8013600:	685b      	ldr	r3, [r3, #4]
 8013602:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013606:	3301      	adds	r3, #1
 8013608:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801360a:	429a      	cmp	r2, r3
 801360c:	d001      	beq.n	8013612 <udp_input_local_match+0x52>
    return 0;
 801360e:	2300      	movs	r3, #0
 8013610:	e02b      	b.n	801366a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013612:	79fb      	ldrb	r3, [r7, #7]
 8013614:	2b00      	cmp	r3, #0
 8013616:	d018      	beq.n	801364a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	2b00      	cmp	r3, #0
 801361c:	d013      	beq.n	8013646 <udp_input_local_match+0x86>
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	2b00      	cmp	r3, #0
 8013624:	d00f      	beq.n	8013646 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013626:	4b17      	ldr	r3, [pc, #92]	@ (8013684 <udp_input_local_match+0xc4>)
 8013628:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801362a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801362e:	d00a      	beq.n	8013646 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	681a      	ldr	r2, [r3, #0]
 8013634:	4b13      	ldr	r3, [pc, #76]	@ (8013684 <udp_input_local_match+0xc4>)
 8013636:	695b      	ldr	r3, [r3, #20]
 8013638:	405a      	eors	r2, r3
 801363a:	68bb      	ldr	r3, [r7, #8]
 801363c:	3308      	adds	r3, #8
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013642:	2b00      	cmp	r3, #0
 8013644:	d110      	bne.n	8013668 <udp_input_local_match+0xa8>
          return 1;
 8013646:	2301      	movs	r3, #1
 8013648:	e00f      	b.n	801366a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d009      	beq.n	8013664 <udp_input_local_match+0xa4>
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d005      	beq.n	8013664 <udp_input_local_match+0xa4>
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	681a      	ldr	r2, [r3, #0]
 801365c:	4b09      	ldr	r3, [pc, #36]	@ (8013684 <udp_input_local_match+0xc4>)
 801365e:	695b      	ldr	r3, [r3, #20]
 8013660:	429a      	cmp	r2, r3
 8013662:	d101      	bne.n	8013668 <udp_input_local_match+0xa8>
        return 1;
 8013664:	2301      	movs	r3, #1
 8013666:	e000      	b.n	801366a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013668:	2300      	movs	r3, #0
}
 801366a:	4618      	mov	r0, r3
 801366c:	3710      	adds	r7, #16
 801366e:	46bd      	mov	sp, r7
 8013670:	bd80      	pop	{r7, pc}
 8013672:	bf00      	nop
 8013674:	0801a084 	.word	0x0801a084
 8013678:	0801a0b4 	.word	0x0801a0b4
 801367c:	0801a0d8 	.word	0x0801a0d8
 8013680:	0801a100 	.word	0x0801a100
 8013684:	24004dec 	.word	0x24004dec

08013688 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013688:	b590      	push	{r4, r7, lr}
 801368a:	b08d      	sub	sp, #52	@ 0x34
 801368c:	af02      	add	r7, sp, #8
 801368e:	6078      	str	r0, [r7, #4]
 8013690:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013692:	2300      	movs	r3, #0
 8013694:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d105      	bne.n	80136a8 <udp_input+0x20>
 801369c:	4b7c      	ldr	r3, [pc, #496]	@ (8013890 <udp_input+0x208>)
 801369e:	22cf      	movs	r2, #207	@ 0xcf
 80136a0:	497c      	ldr	r1, [pc, #496]	@ (8013894 <udp_input+0x20c>)
 80136a2:	487d      	ldr	r0, [pc, #500]	@ (8013898 <udp_input+0x210>)
 80136a4:	f002 ffe4 	bl	8016670 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80136a8:	683b      	ldr	r3, [r7, #0]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d105      	bne.n	80136ba <udp_input+0x32>
 80136ae:	4b78      	ldr	r3, [pc, #480]	@ (8013890 <udp_input+0x208>)
 80136b0:	22d0      	movs	r2, #208	@ 0xd0
 80136b2:	497a      	ldr	r1, [pc, #488]	@ (801389c <udp_input+0x214>)
 80136b4:	4878      	ldr	r0, [pc, #480]	@ (8013898 <udp_input+0x210>)
 80136b6:	f002 ffdb 	bl	8016670 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	895b      	ldrh	r3, [r3, #10]
 80136be:	2b07      	cmp	r3, #7
 80136c0:	d803      	bhi.n	80136ca <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80136c2:	6878      	ldr	r0, [r7, #4]
 80136c4:	f7f9 fa9c 	bl	800cc00 <pbuf_free>
    goto end;
 80136c8:	e0de      	b.n	8013888 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	685b      	ldr	r3, [r3, #4]
 80136ce:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80136d0:	4b73      	ldr	r3, [pc, #460]	@ (80138a0 <udp_input+0x218>)
 80136d2:	695b      	ldr	r3, [r3, #20]
 80136d4:	4a72      	ldr	r2, [pc, #456]	@ (80138a0 <udp_input+0x218>)
 80136d6:	6812      	ldr	r2, [r2, #0]
 80136d8:	4611      	mov	r1, r2
 80136da:	4618      	mov	r0, r3
 80136dc:	f001 fdbc 	bl	8015258 <ip4_addr_isbroadcast_u32>
 80136e0:	4603      	mov	r3, r0
 80136e2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80136e4:	697b      	ldr	r3, [r7, #20]
 80136e6:	881b      	ldrh	r3, [r3, #0]
 80136e8:	b29b      	uxth	r3, r3
 80136ea:	4618      	mov	r0, r3
 80136ec:	f7f7 fdde 	bl	800b2ac <lwip_htons>
 80136f0:	4603      	mov	r3, r0
 80136f2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80136f4:	697b      	ldr	r3, [r7, #20]
 80136f6:	885b      	ldrh	r3, [r3, #2]
 80136f8:	b29b      	uxth	r3, r3
 80136fa:	4618      	mov	r0, r3
 80136fc:	f7f7 fdd6 	bl	800b2ac <lwip_htons>
 8013700:	4603      	mov	r3, r0
 8013702:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013704:	2300      	movs	r3, #0
 8013706:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8013708:	2300      	movs	r3, #0
 801370a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801370c:	2300      	movs	r3, #0
 801370e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013710:	4b64      	ldr	r3, [pc, #400]	@ (80138a4 <udp_input+0x21c>)
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	627b      	str	r3, [r7, #36]	@ 0x24
 8013716:	e054      	b.n	80137c2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801371a:	8a5b      	ldrh	r3, [r3, #18]
 801371c:	89fa      	ldrh	r2, [r7, #14]
 801371e:	429a      	cmp	r2, r3
 8013720:	d14a      	bne.n	80137b8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013722:	7cfb      	ldrb	r3, [r7, #19]
 8013724:	461a      	mov	r2, r3
 8013726:	6839      	ldr	r1, [r7, #0]
 8013728:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801372a:	f7ff ff49 	bl	80135c0 <udp_input_local_match>
 801372e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013730:	2b00      	cmp	r3, #0
 8013732:	d041      	beq.n	80137b8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013736:	7c1b      	ldrb	r3, [r3, #16]
 8013738:	f003 0304 	and.w	r3, r3, #4
 801373c:	2b00      	cmp	r3, #0
 801373e:	d11d      	bne.n	801377c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013740:	69fb      	ldr	r3, [r7, #28]
 8013742:	2b00      	cmp	r3, #0
 8013744:	d102      	bne.n	801374c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013748:	61fb      	str	r3, [r7, #28]
 801374a:	e017      	b.n	801377c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801374c:	7cfb      	ldrb	r3, [r7, #19]
 801374e:	2b00      	cmp	r3, #0
 8013750:	d014      	beq.n	801377c <udp_input+0xf4>
 8013752:	4b53      	ldr	r3, [pc, #332]	@ (80138a0 <udp_input+0x218>)
 8013754:	695b      	ldr	r3, [r3, #20]
 8013756:	f1b3 3fff 	cmp.w	r3, #4294967295
 801375a:	d10f      	bne.n	801377c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801375c:	69fb      	ldr	r3, [r7, #28]
 801375e:	681a      	ldr	r2, [r3, #0]
 8013760:	683b      	ldr	r3, [r7, #0]
 8013762:	3304      	adds	r3, #4
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	429a      	cmp	r2, r3
 8013768:	d008      	beq.n	801377c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801376a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801376c:	681a      	ldr	r2, [r3, #0]
 801376e:	683b      	ldr	r3, [r7, #0]
 8013770:	3304      	adds	r3, #4
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	429a      	cmp	r2, r3
 8013776:	d101      	bne.n	801377c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801377a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801377c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801377e:	8a9b      	ldrh	r3, [r3, #20]
 8013780:	8a3a      	ldrh	r2, [r7, #16]
 8013782:	429a      	cmp	r2, r3
 8013784:	d118      	bne.n	80137b8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013788:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801378a:	2b00      	cmp	r3, #0
 801378c:	d005      	beq.n	801379a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801378e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013790:	685a      	ldr	r2, [r3, #4]
 8013792:	4b43      	ldr	r3, [pc, #268]	@ (80138a0 <udp_input+0x218>)
 8013794:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013796:	429a      	cmp	r2, r3
 8013798:	d10e      	bne.n	80137b8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801379a:	6a3b      	ldr	r3, [r7, #32]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d014      	beq.n	80137ca <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80137a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137a2:	68da      	ldr	r2, [r3, #12]
 80137a4:	6a3b      	ldr	r3, [r7, #32]
 80137a6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80137a8:	4b3e      	ldr	r3, [pc, #248]	@ (80138a4 <udp_input+0x21c>)
 80137aa:	681a      	ldr	r2, [r3, #0]
 80137ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137ae:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80137b0:	4a3c      	ldr	r2, [pc, #240]	@ (80138a4 <udp_input+0x21c>)
 80137b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137b4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80137b6:	e008      	b.n	80137ca <udp_input+0x142>
      }
    }

    prev = pcb;
 80137b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137ba:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80137bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137be:	68db      	ldr	r3, [r3, #12]
 80137c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80137c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d1a7      	bne.n	8013718 <udp_input+0x90>
 80137c8:	e000      	b.n	80137cc <udp_input+0x144>
        break;
 80137ca:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80137cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d101      	bne.n	80137d6 <udp_input+0x14e>
    pcb = uncon_pcb;
 80137d2:	69fb      	ldr	r3, [r7, #28]
 80137d4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80137d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d002      	beq.n	80137e2 <udp_input+0x15a>
    for_us = 1;
 80137dc:	2301      	movs	r3, #1
 80137de:	76fb      	strb	r3, [r7, #27]
 80137e0:	e00a      	b.n	80137f8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80137e2:	683b      	ldr	r3, [r7, #0]
 80137e4:	3304      	adds	r3, #4
 80137e6:	681a      	ldr	r2, [r3, #0]
 80137e8:	4b2d      	ldr	r3, [pc, #180]	@ (80138a0 <udp_input+0x218>)
 80137ea:	695b      	ldr	r3, [r3, #20]
 80137ec:	429a      	cmp	r2, r3
 80137ee:	bf0c      	ite	eq
 80137f0:	2301      	moveq	r3, #1
 80137f2:	2300      	movne	r3, #0
 80137f4:	b2db      	uxtb	r3, r3
 80137f6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80137f8:	7efb      	ldrb	r3, [r7, #27]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d041      	beq.n	8013882 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80137fe:	2108      	movs	r1, #8
 8013800:	6878      	ldr	r0, [r7, #4]
 8013802:	f7f9 f977 	bl	800caf4 <pbuf_remove_header>
 8013806:	4603      	mov	r3, r0
 8013808:	2b00      	cmp	r3, #0
 801380a:	d00a      	beq.n	8013822 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801380c:	4b20      	ldr	r3, [pc, #128]	@ (8013890 <udp_input+0x208>)
 801380e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8013812:	4925      	ldr	r1, [pc, #148]	@ (80138a8 <udp_input+0x220>)
 8013814:	4820      	ldr	r0, [pc, #128]	@ (8013898 <udp_input+0x210>)
 8013816:	f002 ff2b 	bl	8016670 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801381a:	6878      	ldr	r0, [r7, #4]
 801381c:	f7f9 f9f0 	bl	800cc00 <pbuf_free>
      goto end;
 8013820:	e032      	b.n	8013888 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013824:	2b00      	cmp	r3, #0
 8013826:	d012      	beq.n	801384e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801382a:	699b      	ldr	r3, [r3, #24]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d00a      	beq.n	8013846 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013832:	699c      	ldr	r4, [r3, #24]
 8013834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013836:	69d8      	ldr	r0, [r3, #28]
 8013838:	8a3b      	ldrh	r3, [r7, #16]
 801383a:	9300      	str	r3, [sp, #0]
 801383c:	4b1b      	ldr	r3, [pc, #108]	@ (80138ac <udp_input+0x224>)
 801383e:	687a      	ldr	r2, [r7, #4]
 8013840:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013842:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013844:	e021      	b.n	801388a <udp_input+0x202>
        pbuf_free(p);
 8013846:	6878      	ldr	r0, [r7, #4]
 8013848:	f7f9 f9da 	bl	800cc00 <pbuf_free>
        goto end;
 801384c:	e01c      	b.n	8013888 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801384e:	7cfb      	ldrb	r3, [r7, #19]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d112      	bne.n	801387a <udp_input+0x1f2>
 8013854:	4b12      	ldr	r3, [pc, #72]	@ (80138a0 <udp_input+0x218>)
 8013856:	695b      	ldr	r3, [r3, #20]
 8013858:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801385c:	2be0      	cmp	r3, #224	@ 0xe0
 801385e:	d00c      	beq.n	801387a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013860:	4b0f      	ldr	r3, [pc, #60]	@ (80138a0 <udp_input+0x218>)
 8013862:	899b      	ldrh	r3, [r3, #12]
 8013864:	3308      	adds	r3, #8
 8013866:	b29b      	uxth	r3, r3
 8013868:	b21b      	sxth	r3, r3
 801386a:	4619      	mov	r1, r3
 801386c:	6878      	ldr	r0, [r7, #4]
 801386e:	f7f9 f9b4 	bl	800cbda <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013872:	2103      	movs	r1, #3
 8013874:	6878      	ldr	r0, [r7, #4]
 8013876:	f001 f9c5 	bl	8014c04 <icmp_dest_unreach>
      pbuf_free(p);
 801387a:	6878      	ldr	r0, [r7, #4]
 801387c:	f7f9 f9c0 	bl	800cc00 <pbuf_free>
  return;
 8013880:	e003      	b.n	801388a <udp_input+0x202>
    pbuf_free(p);
 8013882:	6878      	ldr	r0, [r7, #4]
 8013884:	f7f9 f9bc 	bl	800cc00 <pbuf_free>
  return;
 8013888:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801388a:	372c      	adds	r7, #44	@ 0x2c
 801388c:	46bd      	mov	sp, r7
 801388e:	bd90      	pop	{r4, r7, pc}
 8013890:	0801a084 	.word	0x0801a084
 8013894:	0801a128 	.word	0x0801a128
 8013898:	0801a0d8 	.word	0x0801a0d8
 801389c:	0801a140 	.word	0x0801a140
 80138a0:	24004dec 	.word	0x24004dec
 80138a4:	24007f58 	.word	0x24007f58
 80138a8:	0801a15c 	.word	0x0801a15c
 80138ac:	24004dfc 	.word	0x24004dfc

080138b0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80138b0:	b580      	push	{r7, lr}
 80138b2:	b086      	sub	sp, #24
 80138b4:	af00      	add	r7, sp, #0
 80138b6:	60f8      	str	r0, [r7, #12]
 80138b8:	60b9      	str	r1, [r7, #8]
 80138ba:	4613      	mov	r3, r2
 80138bc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80138be:	68bb      	ldr	r3, [r7, #8]
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d101      	bne.n	80138c8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80138c4:	4b39      	ldr	r3, [pc, #228]	@ (80139ac <udp_bind+0xfc>)
 80138c6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d109      	bne.n	80138e2 <udp_bind+0x32>
 80138ce:	4b38      	ldr	r3, [pc, #224]	@ (80139b0 <udp_bind+0x100>)
 80138d0:	f240 32b7 	movw	r2, #951	@ 0x3b7
 80138d4:	4937      	ldr	r1, [pc, #220]	@ (80139b4 <udp_bind+0x104>)
 80138d6:	4838      	ldr	r0, [pc, #224]	@ (80139b8 <udp_bind+0x108>)
 80138d8:	f002 feca 	bl	8016670 <iprintf>
 80138dc:	f06f 030f 	mvn.w	r3, #15
 80138e0:	e060      	b.n	80139a4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80138e2:	2300      	movs	r3, #0
 80138e4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80138e6:	4b35      	ldr	r3, [pc, #212]	@ (80139bc <udp_bind+0x10c>)
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	617b      	str	r3, [r7, #20]
 80138ec:	e009      	b.n	8013902 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80138ee:	68fa      	ldr	r2, [r7, #12]
 80138f0:	697b      	ldr	r3, [r7, #20]
 80138f2:	429a      	cmp	r2, r3
 80138f4:	d102      	bne.n	80138fc <udp_bind+0x4c>
      rebind = 1;
 80138f6:	2301      	movs	r3, #1
 80138f8:	74fb      	strb	r3, [r7, #19]
      break;
 80138fa:	e005      	b.n	8013908 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80138fc:	697b      	ldr	r3, [r7, #20]
 80138fe:	68db      	ldr	r3, [r3, #12]
 8013900:	617b      	str	r3, [r7, #20]
 8013902:	697b      	ldr	r3, [r7, #20]
 8013904:	2b00      	cmp	r3, #0
 8013906:	d1f2      	bne.n	80138ee <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013908:	88fb      	ldrh	r3, [r7, #6]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d109      	bne.n	8013922 <udp_bind+0x72>
    port = udp_new_port();
 801390e:	f7ff fe1f 	bl	8013550 <udp_new_port>
 8013912:	4603      	mov	r3, r0
 8013914:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013916:	88fb      	ldrh	r3, [r7, #6]
 8013918:	2b00      	cmp	r3, #0
 801391a:	d12c      	bne.n	8013976 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801391c:	f06f 0307 	mvn.w	r3, #7
 8013920:	e040      	b.n	80139a4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013922:	4b26      	ldr	r3, [pc, #152]	@ (80139bc <udp_bind+0x10c>)
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	617b      	str	r3, [r7, #20]
 8013928:	e022      	b.n	8013970 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801392a:	68fa      	ldr	r2, [r7, #12]
 801392c:	697b      	ldr	r3, [r7, #20]
 801392e:	429a      	cmp	r2, r3
 8013930:	d01b      	beq.n	801396a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013932:	697b      	ldr	r3, [r7, #20]
 8013934:	8a5b      	ldrh	r3, [r3, #18]
 8013936:	88fa      	ldrh	r2, [r7, #6]
 8013938:	429a      	cmp	r2, r3
 801393a:	d116      	bne.n	801396a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801393c:	697b      	ldr	r3, [r7, #20]
 801393e:	681a      	ldr	r2, [r3, #0]
 8013940:	68bb      	ldr	r3, [r7, #8]
 8013942:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013944:	429a      	cmp	r2, r3
 8013946:	d00d      	beq.n	8013964 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013948:	68bb      	ldr	r3, [r7, #8]
 801394a:	2b00      	cmp	r3, #0
 801394c:	d00a      	beq.n	8013964 <udp_bind+0xb4>
 801394e:	68bb      	ldr	r3, [r7, #8]
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d006      	beq.n	8013964 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013956:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013958:	2b00      	cmp	r3, #0
 801395a:	d003      	beq.n	8013964 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801395c:	697b      	ldr	r3, [r7, #20]
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	2b00      	cmp	r3, #0
 8013962:	d102      	bne.n	801396a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013964:	f06f 0307 	mvn.w	r3, #7
 8013968:	e01c      	b.n	80139a4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801396a:	697b      	ldr	r3, [r7, #20]
 801396c:	68db      	ldr	r3, [r3, #12]
 801396e:	617b      	str	r3, [r7, #20]
 8013970:	697b      	ldr	r3, [r7, #20]
 8013972:	2b00      	cmp	r3, #0
 8013974:	d1d9      	bne.n	801392a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8013976:	68bb      	ldr	r3, [r7, #8]
 8013978:	2b00      	cmp	r3, #0
 801397a:	d002      	beq.n	8013982 <udp_bind+0xd2>
 801397c:	68bb      	ldr	r3, [r7, #8]
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	e000      	b.n	8013984 <udp_bind+0xd4>
 8013982:	2300      	movs	r3, #0
 8013984:	68fa      	ldr	r2, [r7, #12]
 8013986:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	88fa      	ldrh	r2, [r7, #6]
 801398c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801398e:	7cfb      	ldrb	r3, [r7, #19]
 8013990:	2b00      	cmp	r3, #0
 8013992:	d106      	bne.n	80139a2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013994:	4b09      	ldr	r3, [pc, #36]	@ (80139bc <udp_bind+0x10c>)
 8013996:	681a      	ldr	r2, [r3, #0]
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801399c:	4a07      	ldr	r2, [pc, #28]	@ (80139bc <udp_bind+0x10c>)
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80139a2:	2300      	movs	r3, #0
}
 80139a4:	4618      	mov	r0, r3
 80139a6:	3718      	adds	r7, #24
 80139a8:	46bd      	mov	sp, r7
 80139aa:	bd80      	pop	{r7, pc}
 80139ac:	0801ac00 	.word	0x0801ac00
 80139b0:	0801a084 	.word	0x0801a084
 80139b4:	0801a34c 	.word	0x0801a34c
 80139b8:	0801a0d8 	.word	0x0801a0d8
 80139bc:	24007f58 	.word	0x24007f58

080139c0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80139c0:	b580      	push	{r7, lr}
 80139c2:	b084      	sub	sp, #16
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	60f8      	str	r0, [r7, #12]
 80139c8:	60b9      	str	r1, [r7, #8]
 80139ca:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d107      	bne.n	80139e2 <udp_recv+0x22>
 80139d2:	4b08      	ldr	r3, [pc, #32]	@ (80139f4 <udp_recv+0x34>)
 80139d4:	f240 428a 	movw	r2, #1162	@ 0x48a
 80139d8:	4907      	ldr	r1, [pc, #28]	@ (80139f8 <udp_recv+0x38>)
 80139da:	4808      	ldr	r0, [pc, #32]	@ (80139fc <udp_recv+0x3c>)
 80139dc:	f002 fe48 	bl	8016670 <iprintf>
 80139e0:	e005      	b.n	80139ee <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	68ba      	ldr	r2, [r7, #8]
 80139e6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	687a      	ldr	r2, [r7, #4]
 80139ec:	61da      	str	r2, [r3, #28]
}
 80139ee:	3710      	adds	r7, #16
 80139f0:	46bd      	mov	sp, r7
 80139f2:	bd80      	pop	{r7, pc}
 80139f4:	0801a084 	.word	0x0801a084
 80139f8:	0801a3b8 	.word	0x0801a3b8
 80139fc:	0801a0d8 	.word	0x0801a0d8

08013a00 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013a00:	b580      	push	{r7, lr}
 8013a02:	b084      	sub	sp, #16
 8013a04:	af00      	add	r7, sp, #0
 8013a06:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d107      	bne.n	8013a1e <udp_remove+0x1e>
 8013a0e:	4b19      	ldr	r3, [pc, #100]	@ (8013a74 <udp_remove+0x74>)
 8013a10:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8013a14:	4918      	ldr	r1, [pc, #96]	@ (8013a78 <udp_remove+0x78>)
 8013a16:	4819      	ldr	r0, [pc, #100]	@ (8013a7c <udp_remove+0x7c>)
 8013a18:	f002 fe2a 	bl	8016670 <iprintf>
 8013a1c:	e026      	b.n	8013a6c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8013a1e:	4b18      	ldr	r3, [pc, #96]	@ (8013a80 <udp_remove+0x80>)
 8013a20:	681b      	ldr	r3, [r3, #0]
 8013a22:	687a      	ldr	r2, [r7, #4]
 8013a24:	429a      	cmp	r2, r3
 8013a26:	d105      	bne.n	8013a34 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013a28:	4b15      	ldr	r3, [pc, #84]	@ (8013a80 <udp_remove+0x80>)
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	68db      	ldr	r3, [r3, #12]
 8013a2e:	4a14      	ldr	r2, [pc, #80]	@ (8013a80 <udp_remove+0x80>)
 8013a30:	6013      	str	r3, [r2, #0]
 8013a32:	e017      	b.n	8013a64 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013a34:	4b12      	ldr	r3, [pc, #72]	@ (8013a80 <udp_remove+0x80>)
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	60fb      	str	r3, [r7, #12]
 8013a3a:	e010      	b.n	8013a5e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	68db      	ldr	r3, [r3, #12]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d009      	beq.n	8013a58 <udp_remove+0x58>
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	68db      	ldr	r3, [r3, #12]
 8013a48:	687a      	ldr	r2, [r7, #4]
 8013a4a:	429a      	cmp	r2, r3
 8013a4c:	d104      	bne.n	8013a58 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	68da      	ldr	r2, [r3, #12]
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	60da      	str	r2, [r3, #12]
        break;
 8013a56:	e005      	b.n	8013a64 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	68db      	ldr	r3, [r3, #12]
 8013a5c:	60fb      	str	r3, [r7, #12]
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d1eb      	bne.n	8013a3c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8013a64:	6879      	ldr	r1, [r7, #4]
 8013a66:	2000      	movs	r0, #0
 8013a68:	f7f8 fa26 	bl	800beb8 <memp_free>
}
 8013a6c:	3710      	adds	r7, #16
 8013a6e:	46bd      	mov	sp, r7
 8013a70:	bd80      	pop	{r7, pc}
 8013a72:	bf00      	nop
 8013a74:	0801a084 	.word	0x0801a084
 8013a78:	0801a3d0 	.word	0x0801a3d0
 8013a7c:	0801a0d8 	.word	0x0801a0d8
 8013a80:	24007f58 	.word	0x24007f58

08013a84 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8013a84:	b580      	push	{r7, lr}
 8013a86:	b082      	sub	sp, #8
 8013a88:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8013a8a:	2000      	movs	r0, #0
 8013a8c:	f7f8 f99e 	bl	800bdcc <memp_malloc>
 8013a90:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d007      	beq.n	8013aa8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013a98:	2220      	movs	r2, #32
 8013a9a:	2100      	movs	r1, #0
 8013a9c:	6878      	ldr	r0, [r7, #4]
 8013a9e:	f002 fe4c 	bl	801673a <memset>
    pcb->ttl = UDP_TTL;
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	22ff      	movs	r2, #255	@ 0xff
 8013aa6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013aa8:	687b      	ldr	r3, [r7, #4]
}
 8013aaa:	4618      	mov	r0, r3
 8013aac:	3708      	adds	r7, #8
 8013aae:	46bd      	mov	sp, r7
 8013ab0:	bd80      	pop	{r7, pc}

08013ab2 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8013ab2:	b580      	push	{r7, lr}
 8013ab4:	b084      	sub	sp, #16
 8013ab6:	af00      	add	r7, sp, #0
 8013ab8:	4603      	mov	r3, r0
 8013aba:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8013abc:	f7ff ffe2 	bl	8013a84 <udp_new>
 8013ac0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8013ac2:	68fb      	ldr	r3, [r7, #12]
}
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	3710      	adds	r7, #16
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	bd80      	pop	{r7, pc}

08013acc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013acc:	b480      	push	{r7}
 8013ace:	b085      	sub	sp, #20
 8013ad0:	af00      	add	r7, sp, #0
 8013ad2:	6078      	str	r0, [r7, #4]
 8013ad4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d01e      	beq.n	8013b1a <udp_netif_ip_addr_changed+0x4e>
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d01a      	beq.n	8013b1a <udp_netif_ip_addr_changed+0x4e>
 8013ae4:	683b      	ldr	r3, [r7, #0]
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d017      	beq.n	8013b1a <udp_netif_ip_addr_changed+0x4e>
 8013aea:	683b      	ldr	r3, [r7, #0]
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d013      	beq.n	8013b1a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013af2:	4b0d      	ldr	r3, [pc, #52]	@ (8013b28 <udp_netif_ip_addr_changed+0x5c>)
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	60fb      	str	r3, [r7, #12]
 8013af8:	e00c      	b.n	8013b14 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	681a      	ldr	r2, [r3, #0]
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	429a      	cmp	r2, r3
 8013b04:	d103      	bne.n	8013b0e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013b06:	683b      	ldr	r3, [r7, #0]
 8013b08:	681a      	ldr	r2, [r3, #0]
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	68db      	ldr	r3, [r3, #12]
 8013b12:	60fb      	str	r3, [r7, #12]
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d1ef      	bne.n	8013afa <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013b1a:	bf00      	nop
 8013b1c:	3714      	adds	r7, #20
 8013b1e:	46bd      	mov	sp, r7
 8013b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b24:	4770      	bx	lr
 8013b26:	bf00      	nop
 8013b28:	24007f58 	.word	0x24007f58

08013b2c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013b2c:	b580      	push	{r7, lr}
 8013b2e:	b082      	sub	sp, #8
 8013b30:	af00      	add	r7, sp, #0
 8013b32:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013b34:	4915      	ldr	r1, [pc, #84]	@ (8013b8c <etharp_free_entry+0x60>)
 8013b36:	687a      	ldr	r2, [r7, #4]
 8013b38:	4613      	mov	r3, r2
 8013b3a:	005b      	lsls	r3, r3, #1
 8013b3c:	4413      	add	r3, r2
 8013b3e:	00db      	lsls	r3, r3, #3
 8013b40:	440b      	add	r3, r1
 8013b42:	681b      	ldr	r3, [r3, #0]
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d013      	beq.n	8013b70 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013b48:	4910      	ldr	r1, [pc, #64]	@ (8013b8c <etharp_free_entry+0x60>)
 8013b4a:	687a      	ldr	r2, [r7, #4]
 8013b4c:	4613      	mov	r3, r2
 8013b4e:	005b      	lsls	r3, r3, #1
 8013b50:	4413      	add	r3, r2
 8013b52:	00db      	lsls	r3, r3, #3
 8013b54:	440b      	add	r3, r1
 8013b56:	681b      	ldr	r3, [r3, #0]
 8013b58:	4618      	mov	r0, r3
 8013b5a:	f7f9 f851 	bl	800cc00 <pbuf_free>
    arp_table[i].q = NULL;
 8013b5e:	490b      	ldr	r1, [pc, #44]	@ (8013b8c <etharp_free_entry+0x60>)
 8013b60:	687a      	ldr	r2, [r7, #4]
 8013b62:	4613      	mov	r3, r2
 8013b64:	005b      	lsls	r3, r3, #1
 8013b66:	4413      	add	r3, r2
 8013b68:	00db      	lsls	r3, r3, #3
 8013b6a:	440b      	add	r3, r1
 8013b6c:	2200      	movs	r2, #0
 8013b6e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013b70:	4906      	ldr	r1, [pc, #24]	@ (8013b8c <etharp_free_entry+0x60>)
 8013b72:	687a      	ldr	r2, [r7, #4]
 8013b74:	4613      	mov	r3, r2
 8013b76:	005b      	lsls	r3, r3, #1
 8013b78:	4413      	add	r3, r2
 8013b7a:	00db      	lsls	r3, r3, #3
 8013b7c:	440b      	add	r3, r1
 8013b7e:	3314      	adds	r3, #20
 8013b80:	2200      	movs	r2, #0
 8013b82:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013b84:	bf00      	nop
 8013b86:	3708      	adds	r7, #8
 8013b88:	46bd      	mov	sp, r7
 8013b8a:	bd80      	pop	{r7, pc}
 8013b8c:	24007f5c 	.word	0x24007f5c

08013b90 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013b90:	b580      	push	{r7, lr}
 8013b92:	b082      	sub	sp, #8
 8013b94:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013b96:	2300      	movs	r3, #0
 8013b98:	607b      	str	r3, [r7, #4]
 8013b9a:	e096      	b.n	8013cca <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013b9c:	494f      	ldr	r1, [pc, #316]	@ (8013cdc <etharp_tmr+0x14c>)
 8013b9e:	687a      	ldr	r2, [r7, #4]
 8013ba0:	4613      	mov	r3, r2
 8013ba2:	005b      	lsls	r3, r3, #1
 8013ba4:	4413      	add	r3, r2
 8013ba6:	00db      	lsls	r3, r3, #3
 8013ba8:	440b      	add	r3, r1
 8013baa:	3314      	adds	r3, #20
 8013bac:	781b      	ldrb	r3, [r3, #0]
 8013bae:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013bb0:	78fb      	ldrb	r3, [r7, #3]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	f000 8086 	beq.w	8013cc4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013bb8:	4948      	ldr	r1, [pc, #288]	@ (8013cdc <etharp_tmr+0x14c>)
 8013bba:	687a      	ldr	r2, [r7, #4]
 8013bbc:	4613      	mov	r3, r2
 8013bbe:	005b      	lsls	r3, r3, #1
 8013bc0:	4413      	add	r3, r2
 8013bc2:	00db      	lsls	r3, r3, #3
 8013bc4:	440b      	add	r3, r1
 8013bc6:	3312      	adds	r3, #18
 8013bc8:	881b      	ldrh	r3, [r3, #0]
 8013bca:	3301      	adds	r3, #1
 8013bcc:	b298      	uxth	r0, r3
 8013bce:	4943      	ldr	r1, [pc, #268]	@ (8013cdc <etharp_tmr+0x14c>)
 8013bd0:	687a      	ldr	r2, [r7, #4]
 8013bd2:	4613      	mov	r3, r2
 8013bd4:	005b      	lsls	r3, r3, #1
 8013bd6:	4413      	add	r3, r2
 8013bd8:	00db      	lsls	r3, r3, #3
 8013bda:	440b      	add	r3, r1
 8013bdc:	3312      	adds	r3, #18
 8013bde:	4602      	mov	r2, r0
 8013be0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013be2:	493e      	ldr	r1, [pc, #248]	@ (8013cdc <etharp_tmr+0x14c>)
 8013be4:	687a      	ldr	r2, [r7, #4]
 8013be6:	4613      	mov	r3, r2
 8013be8:	005b      	lsls	r3, r3, #1
 8013bea:	4413      	add	r3, r2
 8013bec:	00db      	lsls	r3, r3, #3
 8013bee:	440b      	add	r3, r1
 8013bf0:	3312      	adds	r3, #18
 8013bf2:	881b      	ldrh	r3, [r3, #0]
 8013bf4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8013bf8:	d215      	bcs.n	8013c26 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013bfa:	4938      	ldr	r1, [pc, #224]	@ (8013cdc <etharp_tmr+0x14c>)
 8013bfc:	687a      	ldr	r2, [r7, #4]
 8013bfe:	4613      	mov	r3, r2
 8013c00:	005b      	lsls	r3, r3, #1
 8013c02:	4413      	add	r3, r2
 8013c04:	00db      	lsls	r3, r3, #3
 8013c06:	440b      	add	r3, r1
 8013c08:	3314      	adds	r3, #20
 8013c0a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013c0c:	2b01      	cmp	r3, #1
 8013c0e:	d10e      	bne.n	8013c2e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013c10:	4932      	ldr	r1, [pc, #200]	@ (8013cdc <etharp_tmr+0x14c>)
 8013c12:	687a      	ldr	r2, [r7, #4]
 8013c14:	4613      	mov	r3, r2
 8013c16:	005b      	lsls	r3, r3, #1
 8013c18:	4413      	add	r3, r2
 8013c1a:	00db      	lsls	r3, r3, #3
 8013c1c:	440b      	add	r3, r1
 8013c1e:	3312      	adds	r3, #18
 8013c20:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013c22:	2b04      	cmp	r3, #4
 8013c24:	d903      	bls.n	8013c2e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013c26:	6878      	ldr	r0, [r7, #4]
 8013c28:	f7ff ff80 	bl	8013b2c <etharp_free_entry>
 8013c2c:	e04a      	b.n	8013cc4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013c2e:	492b      	ldr	r1, [pc, #172]	@ (8013cdc <etharp_tmr+0x14c>)
 8013c30:	687a      	ldr	r2, [r7, #4]
 8013c32:	4613      	mov	r3, r2
 8013c34:	005b      	lsls	r3, r3, #1
 8013c36:	4413      	add	r3, r2
 8013c38:	00db      	lsls	r3, r3, #3
 8013c3a:	440b      	add	r3, r1
 8013c3c:	3314      	adds	r3, #20
 8013c3e:	781b      	ldrb	r3, [r3, #0]
 8013c40:	2b03      	cmp	r3, #3
 8013c42:	d10a      	bne.n	8013c5a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013c44:	4925      	ldr	r1, [pc, #148]	@ (8013cdc <etharp_tmr+0x14c>)
 8013c46:	687a      	ldr	r2, [r7, #4]
 8013c48:	4613      	mov	r3, r2
 8013c4a:	005b      	lsls	r3, r3, #1
 8013c4c:	4413      	add	r3, r2
 8013c4e:	00db      	lsls	r3, r3, #3
 8013c50:	440b      	add	r3, r1
 8013c52:	3314      	adds	r3, #20
 8013c54:	2204      	movs	r2, #4
 8013c56:	701a      	strb	r2, [r3, #0]
 8013c58:	e034      	b.n	8013cc4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8013c5a:	4920      	ldr	r1, [pc, #128]	@ (8013cdc <etharp_tmr+0x14c>)
 8013c5c:	687a      	ldr	r2, [r7, #4]
 8013c5e:	4613      	mov	r3, r2
 8013c60:	005b      	lsls	r3, r3, #1
 8013c62:	4413      	add	r3, r2
 8013c64:	00db      	lsls	r3, r3, #3
 8013c66:	440b      	add	r3, r1
 8013c68:	3314      	adds	r3, #20
 8013c6a:	781b      	ldrb	r3, [r3, #0]
 8013c6c:	2b04      	cmp	r3, #4
 8013c6e:	d10a      	bne.n	8013c86 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013c70:	491a      	ldr	r1, [pc, #104]	@ (8013cdc <etharp_tmr+0x14c>)
 8013c72:	687a      	ldr	r2, [r7, #4]
 8013c74:	4613      	mov	r3, r2
 8013c76:	005b      	lsls	r3, r3, #1
 8013c78:	4413      	add	r3, r2
 8013c7a:	00db      	lsls	r3, r3, #3
 8013c7c:	440b      	add	r3, r1
 8013c7e:	3314      	adds	r3, #20
 8013c80:	2202      	movs	r2, #2
 8013c82:	701a      	strb	r2, [r3, #0]
 8013c84:	e01e      	b.n	8013cc4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013c86:	4915      	ldr	r1, [pc, #84]	@ (8013cdc <etharp_tmr+0x14c>)
 8013c88:	687a      	ldr	r2, [r7, #4]
 8013c8a:	4613      	mov	r3, r2
 8013c8c:	005b      	lsls	r3, r3, #1
 8013c8e:	4413      	add	r3, r2
 8013c90:	00db      	lsls	r3, r3, #3
 8013c92:	440b      	add	r3, r1
 8013c94:	3314      	adds	r3, #20
 8013c96:	781b      	ldrb	r3, [r3, #0]
 8013c98:	2b01      	cmp	r3, #1
 8013c9a:	d113      	bne.n	8013cc4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013c9c:	490f      	ldr	r1, [pc, #60]	@ (8013cdc <etharp_tmr+0x14c>)
 8013c9e:	687a      	ldr	r2, [r7, #4]
 8013ca0:	4613      	mov	r3, r2
 8013ca2:	005b      	lsls	r3, r3, #1
 8013ca4:	4413      	add	r3, r2
 8013ca6:	00db      	lsls	r3, r3, #3
 8013ca8:	440b      	add	r3, r1
 8013caa:	3308      	adds	r3, #8
 8013cac:	6818      	ldr	r0, [r3, #0]
 8013cae:	687a      	ldr	r2, [r7, #4]
 8013cb0:	4613      	mov	r3, r2
 8013cb2:	005b      	lsls	r3, r3, #1
 8013cb4:	4413      	add	r3, r2
 8013cb6:	00db      	lsls	r3, r3, #3
 8013cb8:	4a08      	ldr	r2, [pc, #32]	@ (8013cdc <etharp_tmr+0x14c>)
 8013cba:	4413      	add	r3, r2
 8013cbc:	3304      	adds	r3, #4
 8013cbe:	4619      	mov	r1, r3
 8013cc0:	f000 fe6e 	bl	80149a0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	3301      	adds	r3, #1
 8013cc8:	607b      	str	r3, [r7, #4]
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	2b09      	cmp	r3, #9
 8013cce:	f77f af65 	ble.w	8013b9c <etharp_tmr+0xc>
      }
    }
  }
}
 8013cd2:	bf00      	nop
 8013cd4:	bf00      	nop
 8013cd6:	3708      	adds	r7, #8
 8013cd8:	46bd      	mov	sp, r7
 8013cda:	bd80      	pop	{r7, pc}
 8013cdc:	24007f5c 	.word	0x24007f5c

08013ce0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8013ce0:	b580      	push	{r7, lr}
 8013ce2:	b08a      	sub	sp, #40	@ 0x28
 8013ce4:	af00      	add	r7, sp, #0
 8013ce6:	60f8      	str	r0, [r7, #12]
 8013ce8:	460b      	mov	r3, r1
 8013cea:	607a      	str	r2, [r7, #4]
 8013cec:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8013cee:	230a      	movs	r3, #10
 8013cf0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8013cf2:	230a      	movs	r3, #10
 8013cf4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8013cf6:	230a      	movs	r3, #10
 8013cf8:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8013cfa:	2300      	movs	r3, #0
 8013cfc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8013cfe:	230a      	movs	r3, #10
 8013d00:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8013d02:	2300      	movs	r3, #0
 8013d04:	83bb      	strh	r3, [r7, #28]
 8013d06:	2300      	movs	r3, #0
 8013d08:	837b      	strh	r3, [r7, #26]
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013d0e:	2300      	movs	r3, #0
 8013d10:	843b      	strh	r3, [r7, #32]
 8013d12:	e0ae      	b.n	8013e72 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013d14:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013d18:	49a6      	ldr	r1, [pc, #664]	@ (8013fb4 <etharp_find_entry+0x2d4>)
 8013d1a:	4613      	mov	r3, r2
 8013d1c:	005b      	lsls	r3, r3, #1
 8013d1e:	4413      	add	r3, r2
 8013d20:	00db      	lsls	r3, r3, #3
 8013d22:	440b      	add	r3, r1
 8013d24:	3314      	adds	r3, #20
 8013d26:	781b      	ldrb	r3, [r3, #0]
 8013d28:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8013d2a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8013d2e:	2b0a      	cmp	r3, #10
 8013d30:	d105      	bne.n	8013d3e <etharp_find_entry+0x5e>
 8013d32:	7dfb      	ldrb	r3, [r7, #23]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d102      	bne.n	8013d3e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8013d38:	8c3b      	ldrh	r3, [r7, #32]
 8013d3a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8013d3c:	e095      	b.n	8013e6a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8013d3e:	7dfb      	ldrb	r3, [r7, #23]
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	f000 8092 	beq.w	8013e6a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8013d46:	7dfb      	ldrb	r3, [r7, #23]
 8013d48:	2b01      	cmp	r3, #1
 8013d4a:	d009      	beq.n	8013d60 <etharp_find_entry+0x80>
 8013d4c:	7dfb      	ldrb	r3, [r7, #23]
 8013d4e:	2b01      	cmp	r3, #1
 8013d50:	d806      	bhi.n	8013d60 <etharp_find_entry+0x80>
 8013d52:	4b99      	ldr	r3, [pc, #612]	@ (8013fb8 <etharp_find_entry+0x2d8>)
 8013d54:	f240 1223 	movw	r2, #291	@ 0x123
 8013d58:	4998      	ldr	r1, [pc, #608]	@ (8013fbc <etharp_find_entry+0x2dc>)
 8013d5a:	4899      	ldr	r0, [pc, #612]	@ (8013fc0 <etharp_find_entry+0x2e0>)
 8013d5c:	f002 fc88 	bl	8016670 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d020      	beq.n	8013da8 <etharp_find_entry+0xc8>
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	6819      	ldr	r1, [r3, #0]
 8013d6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013d6e:	4891      	ldr	r0, [pc, #580]	@ (8013fb4 <etharp_find_entry+0x2d4>)
 8013d70:	4613      	mov	r3, r2
 8013d72:	005b      	lsls	r3, r3, #1
 8013d74:	4413      	add	r3, r2
 8013d76:	00db      	lsls	r3, r3, #3
 8013d78:	4403      	add	r3, r0
 8013d7a:	3304      	adds	r3, #4
 8013d7c:	681b      	ldr	r3, [r3, #0]
 8013d7e:	4299      	cmp	r1, r3
 8013d80:	d112      	bne.n	8013da8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d00c      	beq.n	8013da2 <etharp_find_entry+0xc2>
 8013d88:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013d8c:	4989      	ldr	r1, [pc, #548]	@ (8013fb4 <etharp_find_entry+0x2d4>)
 8013d8e:	4613      	mov	r3, r2
 8013d90:	005b      	lsls	r3, r3, #1
 8013d92:	4413      	add	r3, r2
 8013d94:	00db      	lsls	r3, r3, #3
 8013d96:	440b      	add	r3, r1
 8013d98:	3308      	adds	r3, #8
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	687a      	ldr	r2, [r7, #4]
 8013d9e:	429a      	cmp	r2, r3
 8013da0:	d102      	bne.n	8013da8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8013da2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013da6:	e100      	b.n	8013faa <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8013da8:	7dfb      	ldrb	r3, [r7, #23]
 8013daa:	2b01      	cmp	r3, #1
 8013dac:	d140      	bne.n	8013e30 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8013dae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013db2:	4980      	ldr	r1, [pc, #512]	@ (8013fb4 <etharp_find_entry+0x2d4>)
 8013db4:	4613      	mov	r3, r2
 8013db6:	005b      	lsls	r3, r3, #1
 8013db8:	4413      	add	r3, r2
 8013dba:	00db      	lsls	r3, r3, #3
 8013dbc:	440b      	add	r3, r1
 8013dbe:	681b      	ldr	r3, [r3, #0]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d01a      	beq.n	8013dfa <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8013dc4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013dc8:	497a      	ldr	r1, [pc, #488]	@ (8013fb4 <etharp_find_entry+0x2d4>)
 8013dca:	4613      	mov	r3, r2
 8013dcc:	005b      	lsls	r3, r3, #1
 8013dce:	4413      	add	r3, r2
 8013dd0:	00db      	lsls	r3, r3, #3
 8013dd2:	440b      	add	r3, r1
 8013dd4:	3312      	adds	r3, #18
 8013dd6:	881b      	ldrh	r3, [r3, #0]
 8013dd8:	8bba      	ldrh	r2, [r7, #28]
 8013dda:	429a      	cmp	r2, r3
 8013ddc:	d845      	bhi.n	8013e6a <etharp_find_entry+0x18a>
            old_queue = i;
 8013dde:	8c3b      	ldrh	r3, [r7, #32]
 8013de0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8013de2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013de6:	4973      	ldr	r1, [pc, #460]	@ (8013fb4 <etharp_find_entry+0x2d4>)
 8013de8:	4613      	mov	r3, r2
 8013dea:	005b      	lsls	r3, r3, #1
 8013dec:	4413      	add	r3, r2
 8013dee:	00db      	lsls	r3, r3, #3
 8013df0:	440b      	add	r3, r1
 8013df2:	3312      	adds	r3, #18
 8013df4:	881b      	ldrh	r3, [r3, #0]
 8013df6:	83bb      	strh	r3, [r7, #28]
 8013df8:	e037      	b.n	8013e6a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8013dfa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013dfe:	496d      	ldr	r1, [pc, #436]	@ (8013fb4 <etharp_find_entry+0x2d4>)
 8013e00:	4613      	mov	r3, r2
 8013e02:	005b      	lsls	r3, r3, #1
 8013e04:	4413      	add	r3, r2
 8013e06:	00db      	lsls	r3, r3, #3
 8013e08:	440b      	add	r3, r1
 8013e0a:	3312      	adds	r3, #18
 8013e0c:	881b      	ldrh	r3, [r3, #0]
 8013e0e:	8b7a      	ldrh	r2, [r7, #26]
 8013e10:	429a      	cmp	r2, r3
 8013e12:	d82a      	bhi.n	8013e6a <etharp_find_entry+0x18a>
            old_pending = i;
 8013e14:	8c3b      	ldrh	r3, [r7, #32]
 8013e16:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8013e18:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013e1c:	4965      	ldr	r1, [pc, #404]	@ (8013fb4 <etharp_find_entry+0x2d4>)
 8013e1e:	4613      	mov	r3, r2
 8013e20:	005b      	lsls	r3, r3, #1
 8013e22:	4413      	add	r3, r2
 8013e24:	00db      	lsls	r3, r3, #3
 8013e26:	440b      	add	r3, r1
 8013e28:	3312      	adds	r3, #18
 8013e2a:	881b      	ldrh	r3, [r3, #0]
 8013e2c:	837b      	strh	r3, [r7, #26]
 8013e2e:	e01c      	b.n	8013e6a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8013e30:	7dfb      	ldrb	r3, [r7, #23]
 8013e32:	2b01      	cmp	r3, #1
 8013e34:	d919      	bls.n	8013e6a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8013e36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013e3a:	495e      	ldr	r1, [pc, #376]	@ (8013fb4 <etharp_find_entry+0x2d4>)
 8013e3c:	4613      	mov	r3, r2
 8013e3e:	005b      	lsls	r3, r3, #1
 8013e40:	4413      	add	r3, r2
 8013e42:	00db      	lsls	r3, r3, #3
 8013e44:	440b      	add	r3, r1
 8013e46:	3312      	adds	r3, #18
 8013e48:	881b      	ldrh	r3, [r3, #0]
 8013e4a:	8b3a      	ldrh	r2, [r7, #24]
 8013e4c:	429a      	cmp	r2, r3
 8013e4e:	d80c      	bhi.n	8013e6a <etharp_find_entry+0x18a>
            old_stable = i;
 8013e50:	8c3b      	ldrh	r3, [r7, #32]
 8013e52:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8013e54:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013e58:	4956      	ldr	r1, [pc, #344]	@ (8013fb4 <etharp_find_entry+0x2d4>)
 8013e5a:	4613      	mov	r3, r2
 8013e5c:	005b      	lsls	r3, r3, #1
 8013e5e:	4413      	add	r3, r2
 8013e60:	00db      	lsls	r3, r3, #3
 8013e62:	440b      	add	r3, r1
 8013e64:	3312      	adds	r3, #18
 8013e66:	881b      	ldrh	r3, [r3, #0]
 8013e68:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013e6a:	8c3b      	ldrh	r3, [r7, #32]
 8013e6c:	3301      	adds	r3, #1
 8013e6e:	b29b      	uxth	r3, r3
 8013e70:	843b      	strh	r3, [r7, #32]
 8013e72:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013e76:	2b09      	cmp	r3, #9
 8013e78:	f77f af4c 	ble.w	8013d14 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8013e7c:	7afb      	ldrb	r3, [r7, #11]
 8013e7e:	f003 0302 	and.w	r3, r3, #2
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d108      	bne.n	8013e98 <etharp_find_entry+0x1b8>
 8013e86:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8013e8a:	2b0a      	cmp	r3, #10
 8013e8c:	d107      	bne.n	8013e9e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8013e8e:	7afb      	ldrb	r3, [r7, #11]
 8013e90:	f003 0301 	and.w	r3, r3, #1
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d102      	bne.n	8013e9e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8013e98:	f04f 33ff 	mov.w	r3, #4294967295
 8013e9c:	e085      	b.n	8013faa <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8013e9e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8013ea2:	2b09      	cmp	r3, #9
 8013ea4:	dc02      	bgt.n	8013eac <etharp_find_entry+0x1cc>
    i = empty;
 8013ea6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013ea8:	843b      	strh	r3, [r7, #32]
 8013eaa:	e039      	b.n	8013f20 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8013eac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8013eb0:	2b09      	cmp	r3, #9
 8013eb2:	dc14      	bgt.n	8013ede <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8013eb4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013eb6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8013eb8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013ebc:	493d      	ldr	r1, [pc, #244]	@ (8013fb4 <etharp_find_entry+0x2d4>)
 8013ebe:	4613      	mov	r3, r2
 8013ec0:	005b      	lsls	r3, r3, #1
 8013ec2:	4413      	add	r3, r2
 8013ec4:	00db      	lsls	r3, r3, #3
 8013ec6:	440b      	add	r3, r1
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d018      	beq.n	8013f00 <etharp_find_entry+0x220>
 8013ece:	4b3a      	ldr	r3, [pc, #232]	@ (8013fb8 <etharp_find_entry+0x2d8>)
 8013ed0:	f240 126d 	movw	r2, #365	@ 0x16d
 8013ed4:	493b      	ldr	r1, [pc, #236]	@ (8013fc4 <etharp_find_entry+0x2e4>)
 8013ed6:	483a      	ldr	r0, [pc, #232]	@ (8013fc0 <etharp_find_entry+0x2e0>)
 8013ed8:	f002 fbca 	bl	8016670 <iprintf>
 8013edc:	e010      	b.n	8013f00 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8013ede:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8013ee2:	2b09      	cmp	r3, #9
 8013ee4:	dc02      	bgt.n	8013eec <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8013ee6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013ee8:	843b      	strh	r3, [r7, #32]
 8013eea:	e009      	b.n	8013f00 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8013eec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013ef0:	2b09      	cmp	r3, #9
 8013ef2:	dc02      	bgt.n	8013efa <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8013ef4:	8bfb      	ldrh	r3, [r7, #30]
 8013ef6:	843b      	strh	r3, [r7, #32]
 8013ef8:	e002      	b.n	8013f00 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8013efa:	f04f 33ff 	mov.w	r3, #4294967295
 8013efe:	e054      	b.n	8013faa <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013f00:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013f04:	2b09      	cmp	r3, #9
 8013f06:	dd06      	ble.n	8013f16 <etharp_find_entry+0x236>
 8013f08:	4b2b      	ldr	r3, [pc, #172]	@ (8013fb8 <etharp_find_entry+0x2d8>)
 8013f0a:	f240 127f 	movw	r2, #383	@ 0x17f
 8013f0e:	492e      	ldr	r1, [pc, #184]	@ (8013fc8 <etharp_find_entry+0x2e8>)
 8013f10:	482b      	ldr	r0, [pc, #172]	@ (8013fc0 <etharp_find_entry+0x2e0>)
 8013f12:	f002 fbad 	bl	8016670 <iprintf>
    etharp_free_entry(i);
 8013f16:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013f1a:	4618      	mov	r0, r3
 8013f1c:	f7ff fe06 	bl	8013b2c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013f20:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013f24:	2b09      	cmp	r3, #9
 8013f26:	dd06      	ble.n	8013f36 <etharp_find_entry+0x256>
 8013f28:	4b23      	ldr	r3, [pc, #140]	@ (8013fb8 <etharp_find_entry+0x2d8>)
 8013f2a:	f240 1283 	movw	r2, #387	@ 0x183
 8013f2e:	4926      	ldr	r1, [pc, #152]	@ (8013fc8 <etharp_find_entry+0x2e8>)
 8013f30:	4823      	ldr	r0, [pc, #140]	@ (8013fc0 <etharp_find_entry+0x2e0>)
 8013f32:	f002 fb9d 	bl	8016670 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8013f36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f3a:	491e      	ldr	r1, [pc, #120]	@ (8013fb4 <etharp_find_entry+0x2d4>)
 8013f3c:	4613      	mov	r3, r2
 8013f3e:	005b      	lsls	r3, r3, #1
 8013f40:	4413      	add	r3, r2
 8013f42:	00db      	lsls	r3, r3, #3
 8013f44:	440b      	add	r3, r1
 8013f46:	3314      	adds	r3, #20
 8013f48:	781b      	ldrb	r3, [r3, #0]
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d006      	beq.n	8013f5c <etharp_find_entry+0x27c>
 8013f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8013fb8 <etharp_find_entry+0x2d8>)
 8013f50:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8013f54:	491d      	ldr	r1, [pc, #116]	@ (8013fcc <etharp_find_entry+0x2ec>)
 8013f56:	481a      	ldr	r0, [pc, #104]	@ (8013fc0 <etharp_find_entry+0x2e0>)
 8013f58:	f002 fb8a 	bl	8016670 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d00b      	beq.n	8013f7a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8013f62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	6819      	ldr	r1, [r3, #0]
 8013f6a:	4812      	ldr	r0, [pc, #72]	@ (8013fb4 <etharp_find_entry+0x2d4>)
 8013f6c:	4613      	mov	r3, r2
 8013f6e:	005b      	lsls	r3, r3, #1
 8013f70:	4413      	add	r3, r2
 8013f72:	00db      	lsls	r3, r3, #3
 8013f74:	4403      	add	r3, r0
 8013f76:	3304      	adds	r3, #4
 8013f78:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8013f7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f7e:	490d      	ldr	r1, [pc, #52]	@ (8013fb4 <etharp_find_entry+0x2d4>)
 8013f80:	4613      	mov	r3, r2
 8013f82:	005b      	lsls	r3, r3, #1
 8013f84:	4413      	add	r3, r2
 8013f86:	00db      	lsls	r3, r3, #3
 8013f88:	440b      	add	r3, r1
 8013f8a:	3312      	adds	r3, #18
 8013f8c:	2200      	movs	r2, #0
 8013f8e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8013f90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f94:	4907      	ldr	r1, [pc, #28]	@ (8013fb4 <etharp_find_entry+0x2d4>)
 8013f96:	4613      	mov	r3, r2
 8013f98:	005b      	lsls	r3, r3, #1
 8013f9a:	4413      	add	r3, r2
 8013f9c:	00db      	lsls	r3, r3, #3
 8013f9e:	440b      	add	r3, r1
 8013fa0:	3308      	adds	r3, #8
 8013fa2:	687a      	ldr	r2, [r7, #4]
 8013fa4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8013fa6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8013faa:	4618      	mov	r0, r3
 8013fac:	3728      	adds	r7, #40	@ 0x28
 8013fae:	46bd      	mov	sp, r7
 8013fb0:	bd80      	pop	{r7, pc}
 8013fb2:	bf00      	nop
 8013fb4:	24007f5c 	.word	0x24007f5c
 8013fb8:	0801a3e8 	.word	0x0801a3e8
 8013fbc:	0801a420 	.word	0x0801a420
 8013fc0:	0801a460 	.word	0x0801a460
 8013fc4:	0801a488 	.word	0x0801a488
 8013fc8:	0801a4a0 	.word	0x0801a4a0
 8013fcc:	0801a4b4 	.word	0x0801a4b4

08013fd0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8013fd0:	b580      	push	{r7, lr}
 8013fd2:	b088      	sub	sp, #32
 8013fd4:	af02      	add	r7, sp, #8
 8013fd6:	60f8      	str	r0, [r7, #12]
 8013fd8:	60b9      	str	r1, [r7, #8]
 8013fda:	607a      	str	r2, [r7, #4]
 8013fdc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8013fe4:	2b06      	cmp	r3, #6
 8013fe6:	d006      	beq.n	8013ff6 <etharp_update_arp_entry+0x26>
 8013fe8:	4b48      	ldr	r3, [pc, #288]	@ (801410c <etharp_update_arp_entry+0x13c>)
 8013fea:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8013fee:	4948      	ldr	r1, [pc, #288]	@ (8014110 <etharp_update_arp_entry+0x140>)
 8013ff0:	4848      	ldr	r0, [pc, #288]	@ (8014114 <etharp_update_arp_entry+0x144>)
 8013ff2:	f002 fb3d 	bl	8016670 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8013ff6:	68bb      	ldr	r3, [r7, #8]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d012      	beq.n	8014022 <etharp_update_arp_entry+0x52>
 8013ffc:	68bb      	ldr	r3, [r7, #8]
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d00e      	beq.n	8014022 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014004:	68bb      	ldr	r3, [r7, #8]
 8014006:	681b      	ldr	r3, [r3, #0]
 8014008:	68f9      	ldr	r1, [r7, #12]
 801400a:	4618      	mov	r0, r3
 801400c:	f001 f924 	bl	8015258 <ip4_addr_isbroadcast_u32>
 8014010:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014012:	2b00      	cmp	r3, #0
 8014014:	d105      	bne.n	8014022 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014016:	68bb      	ldr	r3, [r7, #8]
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801401e:	2be0      	cmp	r3, #224	@ 0xe0
 8014020:	d102      	bne.n	8014028 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014022:	f06f 030f 	mvn.w	r3, #15
 8014026:	e06c      	b.n	8014102 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014028:	78fb      	ldrb	r3, [r7, #3]
 801402a:	68fa      	ldr	r2, [r7, #12]
 801402c:	4619      	mov	r1, r3
 801402e:	68b8      	ldr	r0, [r7, #8]
 8014030:	f7ff fe56 	bl	8013ce0 <etharp_find_entry>
 8014034:	4603      	mov	r3, r0
 8014036:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014038:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801403c:	2b00      	cmp	r3, #0
 801403e:	da02      	bge.n	8014046 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014040:	8afb      	ldrh	r3, [r7, #22]
 8014042:	b25b      	sxtb	r3, r3
 8014044:	e05d      	b.n	8014102 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014046:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801404a:	4933      	ldr	r1, [pc, #204]	@ (8014118 <etharp_update_arp_entry+0x148>)
 801404c:	4613      	mov	r3, r2
 801404e:	005b      	lsls	r3, r3, #1
 8014050:	4413      	add	r3, r2
 8014052:	00db      	lsls	r3, r3, #3
 8014054:	440b      	add	r3, r1
 8014056:	3314      	adds	r3, #20
 8014058:	2202      	movs	r2, #2
 801405a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801405c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014060:	492d      	ldr	r1, [pc, #180]	@ (8014118 <etharp_update_arp_entry+0x148>)
 8014062:	4613      	mov	r3, r2
 8014064:	005b      	lsls	r3, r3, #1
 8014066:	4413      	add	r3, r2
 8014068:	00db      	lsls	r3, r3, #3
 801406a:	440b      	add	r3, r1
 801406c:	3308      	adds	r3, #8
 801406e:	68fa      	ldr	r2, [r7, #12]
 8014070:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014072:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014076:	4613      	mov	r3, r2
 8014078:	005b      	lsls	r3, r3, #1
 801407a:	4413      	add	r3, r2
 801407c:	00db      	lsls	r3, r3, #3
 801407e:	3308      	adds	r3, #8
 8014080:	4a25      	ldr	r2, [pc, #148]	@ (8014118 <etharp_update_arp_entry+0x148>)
 8014082:	4413      	add	r3, r2
 8014084:	3304      	adds	r3, #4
 8014086:	2206      	movs	r2, #6
 8014088:	6879      	ldr	r1, [r7, #4]
 801408a:	4618      	mov	r0, r3
 801408c:	f002 fc21 	bl	80168d2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014090:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014094:	4920      	ldr	r1, [pc, #128]	@ (8014118 <etharp_update_arp_entry+0x148>)
 8014096:	4613      	mov	r3, r2
 8014098:	005b      	lsls	r3, r3, #1
 801409a:	4413      	add	r3, r2
 801409c:	00db      	lsls	r3, r3, #3
 801409e:	440b      	add	r3, r1
 80140a0:	3312      	adds	r3, #18
 80140a2:	2200      	movs	r2, #0
 80140a4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80140a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80140aa:	491b      	ldr	r1, [pc, #108]	@ (8014118 <etharp_update_arp_entry+0x148>)
 80140ac:	4613      	mov	r3, r2
 80140ae:	005b      	lsls	r3, r3, #1
 80140b0:	4413      	add	r3, r2
 80140b2:	00db      	lsls	r3, r3, #3
 80140b4:	440b      	add	r3, r1
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d021      	beq.n	8014100 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80140bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80140c0:	4915      	ldr	r1, [pc, #84]	@ (8014118 <etharp_update_arp_entry+0x148>)
 80140c2:	4613      	mov	r3, r2
 80140c4:	005b      	lsls	r3, r3, #1
 80140c6:	4413      	add	r3, r2
 80140c8:	00db      	lsls	r3, r3, #3
 80140ca:	440b      	add	r3, r1
 80140cc:	681b      	ldr	r3, [r3, #0]
 80140ce:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80140d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80140d4:	4910      	ldr	r1, [pc, #64]	@ (8014118 <etharp_update_arp_entry+0x148>)
 80140d6:	4613      	mov	r3, r2
 80140d8:	005b      	lsls	r3, r3, #1
 80140da:	4413      	add	r3, r2
 80140dc:	00db      	lsls	r3, r3, #3
 80140de:	440b      	add	r3, r1
 80140e0:	2200      	movs	r2, #0
 80140e2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80140e4:	68fb      	ldr	r3, [r7, #12]
 80140e6:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80140ea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80140ee:	9300      	str	r3, [sp, #0]
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	6939      	ldr	r1, [r7, #16]
 80140f4:	68f8      	ldr	r0, [r7, #12]
 80140f6:	f001 ffbd 	bl	8016074 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80140fa:	6938      	ldr	r0, [r7, #16]
 80140fc:	f7f8 fd80 	bl	800cc00 <pbuf_free>
  }
  return ERR_OK;
 8014100:	2300      	movs	r3, #0
}
 8014102:	4618      	mov	r0, r3
 8014104:	3718      	adds	r7, #24
 8014106:	46bd      	mov	sp, r7
 8014108:	bd80      	pop	{r7, pc}
 801410a:	bf00      	nop
 801410c:	0801a3e8 	.word	0x0801a3e8
 8014110:	0801a4e0 	.word	0x0801a4e0
 8014114:	0801a460 	.word	0x0801a460
 8014118:	24007f5c 	.word	0x24007f5c

0801411c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801411c:	b580      	push	{r7, lr}
 801411e:	b084      	sub	sp, #16
 8014120:	af00      	add	r7, sp, #0
 8014122:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014124:	2300      	movs	r3, #0
 8014126:	60fb      	str	r3, [r7, #12]
 8014128:	e01e      	b.n	8014168 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801412a:	4913      	ldr	r1, [pc, #76]	@ (8014178 <etharp_cleanup_netif+0x5c>)
 801412c:	68fa      	ldr	r2, [r7, #12]
 801412e:	4613      	mov	r3, r2
 8014130:	005b      	lsls	r3, r3, #1
 8014132:	4413      	add	r3, r2
 8014134:	00db      	lsls	r3, r3, #3
 8014136:	440b      	add	r3, r1
 8014138:	3314      	adds	r3, #20
 801413a:	781b      	ldrb	r3, [r3, #0]
 801413c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801413e:	7afb      	ldrb	r3, [r7, #11]
 8014140:	2b00      	cmp	r3, #0
 8014142:	d00e      	beq.n	8014162 <etharp_cleanup_netif+0x46>
 8014144:	490c      	ldr	r1, [pc, #48]	@ (8014178 <etharp_cleanup_netif+0x5c>)
 8014146:	68fa      	ldr	r2, [r7, #12]
 8014148:	4613      	mov	r3, r2
 801414a:	005b      	lsls	r3, r3, #1
 801414c:	4413      	add	r3, r2
 801414e:	00db      	lsls	r3, r3, #3
 8014150:	440b      	add	r3, r1
 8014152:	3308      	adds	r3, #8
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	687a      	ldr	r2, [r7, #4]
 8014158:	429a      	cmp	r2, r3
 801415a:	d102      	bne.n	8014162 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801415c:	68f8      	ldr	r0, [r7, #12]
 801415e:	f7ff fce5 	bl	8013b2c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	3301      	adds	r3, #1
 8014166:	60fb      	str	r3, [r7, #12]
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	2b09      	cmp	r3, #9
 801416c:	dddd      	ble.n	801412a <etharp_cleanup_netif+0xe>
    }
  }
}
 801416e:	bf00      	nop
 8014170:	bf00      	nop
 8014172:	3710      	adds	r7, #16
 8014174:	46bd      	mov	sp, r7
 8014176:	bd80      	pop	{r7, pc}
 8014178:	24007f5c 	.word	0x24007f5c

0801417c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801417c:	b5b0      	push	{r4, r5, r7, lr}
 801417e:	b08a      	sub	sp, #40	@ 0x28
 8014180:	af04      	add	r7, sp, #16
 8014182:	6078      	str	r0, [r7, #4]
 8014184:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014186:	683b      	ldr	r3, [r7, #0]
 8014188:	2b00      	cmp	r3, #0
 801418a:	d107      	bne.n	801419c <etharp_input+0x20>
 801418c:	4b3d      	ldr	r3, [pc, #244]	@ (8014284 <etharp_input+0x108>)
 801418e:	f240 228a 	movw	r2, #650	@ 0x28a
 8014192:	493d      	ldr	r1, [pc, #244]	@ (8014288 <etharp_input+0x10c>)
 8014194:	483d      	ldr	r0, [pc, #244]	@ (801428c <etharp_input+0x110>)
 8014196:	f002 fa6b 	bl	8016670 <iprintf>
 801419a:	e06f      	b.n	801427c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	685b      	ldr	r3, [r3, #4]
 80141a0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80141a2:	693b      	ldr	r3, [r7, #16]
 80141a4:	881b      	ldrh	r3, [r3, #0]
 80141a6:	b29b      	uxth	r3, r3
 80141a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80141ac:	d10c      	bne.n	80141c8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80141ae:	693b      	ldr	r3, [r7, #16]
 80141b0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80141b2:	2b06      	cmp	r3, #6
 80141b4:	d108      	bne.n	80141c8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80141b6:	693b      	ldr	r3, [r7, #16]
 80141b8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80141ba:	2b04      	cmp	r3, #4
 80141bc:	d104      	bne.n	80141c8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80141be:	693b      	ldr	r3, [r7, #16]
 80141c0:	885b      	ldrh	r3, [r3, #2]
 80141c2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80141c4:	2b08      	cmp	r3, #8
 80141c6:	d003      	beq.n	80141d0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80141c8:	6878      	ldr	r0, [r7, #4]
 80141ca:	f7f8 fd19 	bl	800cc00 <pbuf_free>
    return;
 80141ce:	e055      	b.n	801427c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80141d0:	693b      	ldr	r3, [r7, #16]
 80141d2:	330e      	adds	r3, #14
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80141d8:	693b      	ldr	r3, [r7, #16]
 80141da:	3318      	adds	r3, #24
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80141e0:	683b      	ldr	r3, [r7, #0]
 80141e2:	3304      	adds	r3, #4
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d102      	bne.n	80141f0 <etharp_input+0x74>
    for_us = 0;
 80141ea:	2300      	movs	r3, #0
 80141ec:	75fb      	strb	r3, [r7, #23]
 80141ee:	e009      	b.n	8014204 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80141f0:	68ba      	ldr	r2, [r7, #8]
 80141f2:	683b      	ldr	r3, [r7, #0]
 80141f4:	3304      	adds	r3, #4
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	429a      	cmp	r2, r3
 80141fa:	bf0c      	ite	eq
 80141fc:	2301      	moveq	r3, #1
 80141fe:	2300      	movne	r3, #0
 8014200:	b2db      	uxtb	r3, r3
 8014202:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014204:	693b      	ldr	r3, [r7, #16]
 8014206:	f103 0208 	add.w	r2, r3, #8
 801420a:	7dfb      	ldrb	r3, [r7, #23]
 801420c:	2b00      	cmp	r3, #0
 801420e:	d001      	beq.n	8014214 <etharp_input+0x98>
 8014210:	2301      	movs	r3, #1
 8014212:	e000      	b.n	8014216 <etharp_input+0x9a>
 8014214:	2302      	movs	r3, #2
 8014216:	f107 010c 	add.w	r1, r7, #12
 801421a:	6838      	ldr	r0, [r7, #0]
 801421c:	f7ff fed8 	bl	8013fd0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014220:	693b      	ldr	r3, [r7, #16]
 8014222:	88db      	ldrh	r3, [r3, #6]
 8014224:	b29b      	uxth	r3, r3
 8014226:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801422a:	d003      	beq.n	8014234 <etharp_input+0xb8>
 801422c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014230:	d01e      	beq.n	8014270 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014232:	e020      	b.n	8014276 <etharp_input+0xfa>
      if (for_us) {
 8014234:	7dfb      	ldrb	r3, [r7, #23]
 8014236:	2b00      	cmp	r3, #0
 8014238:	d01c      	beq.n	8014274 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801423a:	683b      	ldr	r3, [r7, #0]
 801423c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8014240:	693b      	ldr	r3, [r7, #16]
 8014242:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014246:	683b      	ldr	r3, [r7, #0]
 8014248:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801424c:	683b      	ldr	r3, [r7, #0]
 801424e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014250:	693a      	ldr	r2, [r7, #16]
 8014252:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014254:	2102      	movs	r1, #2
 8014256:	9103      	str	r1, [sp, #12]
 8014258:	f107 010c 	add.w	r1, r7, #12
 801425c:	9102      	str	r1, [sp, #8]
 801425e:	9201      	str	r2, [sp, #4]
 8014260:	9300      	str	r3, [sp, #0]
 8014262:	462b      	mov	r3, r5
 8014264:	4622      	mov	r2, r4
 8014266:	4601      	mov	r1, r0
 8014268:	6838      	ldr	r0, [r7, #0]
 801426a:	f000 faeb 	bl	8014844 <etharp_raw>
      break;
 801426e:	e001      	b.n	8014274 <etharp_input+0xf8>
      break;
 8014270:	bf00      	nop
 8014272:	e000      	b.n	8014276 <etharp_input+0xfa>
      break;
 8014274:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014276:	6878      	ldr	r0, [r7, #4]
 8014278:	f7f8 fcc2 	bl	800cc00 <pbuf_free>
}
 801427c:	3718      	adds	r7, #24
 801427e:	46bd      	mov	sp, r7
 8014280:	bdb0      	pop	{r4, r5, r7, pc}
 8014282:	bf00      	nop
 8014284:	0801a3e8 	.word	0x0801a3e8
 8014288:	0801a538 	.word	0x0801a538
 801428c:	0801a460 	.word	0x0801a460

08014290 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014290:	b580      	push	{r7, lr}
 8014292:	b086      	sub	sp, #24
 8014294:	af02      	add	r7, sp, #8
 8014296:	60f8      	str	r0, [r7, #12]
 8014298:	60b9      	str	r1, [r7, #8]
 801429a:	4613      	mov	r3, r2
 801429c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801429e:	79fa      	ldrb	r2, [r7, #7]
 80142a0:	4944      	ldr	r1, [pc, #272]	@ (80143b4 <etharp_output_to_arp_index+0x124>)
 80142a2:	4613      	mov	r3, r2
 80142a4:	005b      	lsls	r3, r3, #1
 80142a6:	4413      	add	r3, r2
 80142a8:	00db      	lsls	r3, r3, #3
 80142aa:	440b      	add	r3, r1
 80142ac:	3314      	adds	r3, #20
 80142ae:	781b      	ldrb	r3, [r3, #0]
 80142b0:	2b01      	cmp	r3, #1
 80142b2:	d806      	bhi.n	80142c2 <etharp_output_to_arp_index+0x32>
 80142b4:	4b40      	ldr	r3, [pc, #256]	@ (80143b8 <etharp_output_to_arp_index+0x128>)
 80142b6:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80142ba:	4940      	ldr	r1, [pc, #256]	@ (80143bc <etharp_output_to_arp_index+0x12c>)
 80142bc:	4840      	ldr	r0, [pc, #256]	@ (80143c0 <etharp_output_to_arp_index+0x130>)
 80142be:	f002 f9d7 	bl	8016670 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80142c2:	79fa      	ldrb	r2, [r7, #7]
 80142c4:	493b      	ldr	r1, [pc, #236]	@ (80143b4 <etharp_output_to_arp_index+0x124>)
 80142c6:	4613      	mov	r3, r2
 80142c8:	005b      	lsls	r3, r3, #1
 80142ca:	4413      	add	r3, r2
 80142cc:	00db      	lsls	r3, r3, #3
 80142ce:	440b      	add	r3, r1
 80142d0:	3314      	adds	r3, #20
 80142d2:	781b      	ldrb	r3, [r3, #0]
 80142d4:	2b02      	cmp	r3, #2
 80142d6:	d153      	bne.n	8014380 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80142d8:	79fa      	ldrb	r2, [r7, #7]
 80142da:	4936      	ldr	r1, [pc, #216]	@ (80143b4 <etharp_output_to_arp_index+0x124>)
 80142dc:	4613      	mov	r3, r2
 80142de:	005b      	lsls	r3, r3, #1
 80142e0:	4413      	add	r3, r2
 80142e2:	00db      	lsls	r3, r3, #3
 80142e4:	440b      	add	r3, r1
 80142e6:	3312      	adds	r3, #18
 80142e8:	881b      	ldrh	r3, [r3, #0]
 80142ea:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80142ee:	d919      	bls.n	8014324 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80142f0:	79fa      	ldrb	r2, [r7, #7]
 80142f2:	4613      	mov	r3, r2
 80142f4:	005b      	lsls	r3, r3, #1
 80142f6:	4413      	add	r3, r2
 80142f8:	00db      	lsls	r3, r3, #3
 80142fa:	4a2e      	ldr	r2, [pc, #184]	@ (80143b4 <etharp_output_to_arp_index+0x124>)
 80142fc:	4413      	add	r3, r2
 80142fe:	3304      	adds	r3, #4
 8014300:	4619      	mov	r1, r3
 8014302:	68f8      	ldr	r0, [r7, #12]
 8014304:	f000 fb4c 	bl	80149a0 <etharp_request>
 8014308:	4603      	mov	r3, r0
 801430a:	2b00      	cmp	r3, #0
 801430c:	d138      	bne.n	8014380 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801430e:	79fa      	ldrb	r2, [r7, #7]
 8014310:	4928      	ldr	r1, [pc, #160]	@ (80143b4 <etharp_output_to_arp_index+0x124>)
 8014312:	4613      	mov	r3, r2
 8014314:	005b      	lsls	r3, r3, #1
 8014316:	4413      	add	r3, r2
 8014318:	00db      	lsls	r3, r3, #3
 801431a:	440b      	add	r3, r1
 801431c:	3314      	adds	r3, #20
 801431e:	2203      	movs	r2, #3
 8014320:	701a      	strb	r2, [r3, #0]
 8014322:	e02d      	b.n	8014380 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014324:	79fa      	ldrb	r2, [r7, #7]
 8014326:	4923      	ldr	r1, [pc, #140]	@ (80143b4 <etharp_output_to_arp_index+0x124>)
 8014328:	4613      	mov	r3, r2
 801432a:	005b      	lsls	r3, r3, #1
 801432c:	4413      	add	r3, r2
 801432e:	00db      	lsls	r3, r3, #3
 8014330:	440b      	add	r3, r1
 8014332:	3312      	adds	r3, #18
 8014334:	881b      	ldrh	r3, [r3, #0]
 8014336:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801433a:	d321      	bcc.n	8014380 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801433c:	79fa      	ldrb	r2, [r7, #7]
 801433e:	4613      	mov	r3, r2
 8014340:	005b      	lsls	r3, r3, #1
 8014342:	4413      	add	r3, r2
 8014344:	00db      	lsls	r3, r3, #3
 8014346:	4a1b      	ldr	r2, [pc, #108]	@ (80143b4 <etharp_output_to_arp_index+0x124>)
 8014348:	4413      	add	r3, r2
 801434a:	1d19      	adds	r1, r3, #4
 801434c:	79fa      	ldrb	r2, [r7, #7]
 801434e:	4613      	mov	r3, r2
 8014350:	005b      	lsls	r3, r3, #1
 8014352:	4413      	add	r3, r2
 8014354:	00db      	lsls	r3, r3, #3
 8014356:	3308      	adds	r3, #8
 8014358:	4a16      	ldr	r2, [pc, #88]	@ (80143b4 <etharp_output_to_arp_index+0x124>)
 801435a:	4413      	add	r3, r2
 801435c:	3304      	adds	r3, #4
 801435e:	461a      	mov	r2, r3
 8014360:	68f8      	ldr	r0, [r7, #12]
 8014362:	f000 fafb 	bl	801495c <etharp_request_dst>
 8014366:	4603      	mov	r3, r0
 8014368:	2b00      	cmp	r3, #0
 801436a:	d109      	bne.n	8014380 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801436c:	79fa      	ldrb	r2, [r7, #7]
 801436e:	4911      	ldr	r1, [pc, #68]	@ (80143b4 <etharp_output_to_arp_index+0x124>)
 8014370:	4613      	mov	r3, r2
 8014372:	005b      	lsls	r3, r3, #1
 8014374:	4413      	add	r3, r2
 8014376:	00db      	lsls	r3, r3, #3
 8014378:	440b      	add	r3, r1
 801437a:	3314      	adds	r3, #20
 801437c:	2203      	movs	r2, #3
 801437e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014380:	68fb      	ldr	r3, [r7, #12]
 8014382:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8014386:	79fa      	ldrb	r2, [r7, #7]
 8014388:	4613      	mov	r3, r2
 801438a:	005b      	lsls	r3, r3, #1
 801438c:	4413      	add	r3, r2
 801438e:	00db      	lsls	r3, r3, #3
 8014390:	3308      	adds	r3, #8
 8014392:	4a08      	ldr	r2, [pc, #32]	@ (80143b4 <etharp_output_to_arp_index+0x124>)
 8014394:	4413      	add	r3, r2
 8014396:	3304      	adds	r3, #4
 8014398:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801439c:	9200      	str	r2, [sp, #0]
 801439e:	460a      	mov	r2, r1
 80143a0:	68b9      	ldr	r1, [r7, #8]
 80143a2:	68f8      	ldr	r0, [r7, #12]
 80143a4:	f001 fe66 	bl	8016074 <ethernet_output>
 80143a8:	4603      	mov	r3, r0
}
 80143aa:	4618      	mov	r0, r3
 80143ac:	3710      	adds	r7, #16
 80143ae:	46bd      	mov	sp, r7
 80143b0:	bd80      	pop	{r7, pc}
 80143b2:	bf00      	nop
 80143b4:	24007f5c 	.word	0x24007f5c
 80143b8:	0801a3e8 	.word	0x0801a3e8
 80143bc:	0801a558 	.word	0x0801a558
 80143c0:	0801a460 	.word	0x0801a460

080143c4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80143c4:	b580      	push	{r7, lr}
 80143c6:	b08a      	sub	sp, #40	@ 0x28
 80143c8:	af02      	add	r7, sp, #8
 80143ca:	60f8      	str	r0, [r7, #12]
 80143cc:	60b9      	str	r1, [r7, #8]
 80143ce:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d106      	bne.n	80143e8 <etharp_output+0x24>
 80143da:	4b73      	ldr	r3, [pc, #460]	@ (80145a8 <etharp_output+0x1e4>)
 80143dc:	f240 321e 	movw	r2, #798	@ 0x31e
 80143e0:	4972      	ldr	r1, [pc, #456]	@ (80145ac <etharp_output+0x1e8>)
 80143e2:	4873      	ldr	r0, [pc, #460]	@ (80145b0 <etharp_output+0x1ec>)
 80143e4:	f002 f944 	bl	8016670 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80143e8:	68bb      	ldr	r3, [r7, #8]
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d106      	bne.n	80143fc <etharp_output+0x38>
 80143ee:	4b6e      	ldr	r3, [pc, #440]	@ (80145a8 <etharp_output+0x1e4>)
 80143f0:	f240 321f 	movw	r2, #799	@ 0x31f
 80143f4:	496f      	ldr	r1, [pc, #444]	@ (80145b4 <etharp_output+0x1f0>)
 80143f6:	486e      	ldr	r0, [pc, #440]	@ (80145b0 <etharp_output+0x1ec>)
 80143f8:	f002 f93a 	bl	8016670 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d106      	bne.n	8014410 <etharp_output+0x4c>
 8014402:	4b69      	ldr	r3, [pc, #420]	@ (80145a8 <etharp_output+0x1e4>)
 8014404:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8014408:	496b      	ldr	r1, [pc, #428]	@ (80145b8 <etharp_output+0x1f4>)
 801440a:	4869      	ldr	r0, [pc, #420]	@ (80145b0 <etharp_output+0x1ec>)
 801440c:	f002 f930 	bl	8016670 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	68f9      	ldr	r1, [r7, #12]
 8014416:	4618      	mov	r0, r3
 8014418:	f000 ff1e 	bl	8015258 <ip4_addr_isbroadcast_u32>
 801441c:	4603      	mov	r3, r0
 801441e:	2b00      	cmp	r3, #0
 8014420:	d002      	beq.n	8014428 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014422:	4b66      	ldr	r3, [pc, #408]	@ (80145bc <etharp_output+0x1f8>)
 8014424:	61fb      	str	r3, [r7, #28]
 8014426:	e0af      	b.n	8014588 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014430:	2be0      	cmp	r3, #224	@ 0xe0
 8014432:	d118      	bne.n	8014466 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014434:	2301      	movs	r3, #1
 8014436:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014438:	2300      	movs	r3, #0
 801443a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801443c:	235e      	movs	r3, #94	@ 0x5e
 801443e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	3301      	adds	r3, #1
 8014444:	781b      	ldrb	r3, [r3, #0]
 8014446:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801444a:	b2db      	uxtb	r3, r3
 801444c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	3302      	adds	r3, #2
 8014452:	781b      	ldrb	r3, [r3, #0]
 8014454:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	3303      	adds	r3, #3
 801445a:	781b      	ldrb	r3, [r3, #0]
 801445c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801445e:	f107 0310 	add.w	r3, r7, #16
 8014462:	61fb      	str	r3, [r7, #28]
 8014464:	e090      	b.n	8014588 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	681a      	ldr	r2, [r3, #0]
 801446a:	68fb      	ldr	r3, [r7, #12]
 801446c:	3304      	adds	r3, #4
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	405a      	eors	r2, r3
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	3308      	adds	r3, #8
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	4013      	ands	r3, r2
 801447a:	2b00      	cmp	r3, #0
 801447c:	d012      	beq.n	80144a4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	681b      	ldr	r3, [r3, #0]
 8014482:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014484:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8014488:	4293      	cmp	r3, r2
 801448a:	d00b      	beq.n	80144a4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	330c      	adds	r3, #12
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	2b00      	cmp	r3, #0
 8014494:	d003      	beq.n	801449e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	330c      	adds	r3, #12
 801449a:	61bb      	str	r3, [r7, #24]
 801449c:	e002      	b.n	80144a4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801449e:	f06f 0303 	mvn.w	r3, #3
 80144a2:	e07d      	b.n	80145a0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80144a4:	4b46      	ldr	r3, [pc, #280]	@ (80145c0 <etharp_output+0x1fc>)
 80144a6:	781b      	ldrb	r3, [r3, #0]
 80144a8:	4619      	mov	r1, r3
 80144aa:	4a46      	ldr	r2, [pc, #280]	@ (80145c4 <etharp_output+0x200>)
 80144ac:	460b      	mov	r3, r1
 80144ae:	005b      	lsls	r3, r3, #1
 80144b0:	440b      	add	r3, r1
 80144b2:	00db      	lsls	r3, r3, #3
 80144b4:	4413      	add	r3, r2
 80144b6:	3314      	adds	r3, #20
 80144b8:	781b      	ldrb	r3, [r3, #0]
 80144ba:	2b01      	cmp	r3, #1
 80144bc:	d925      	bls.n	801450a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80144be:	4b40      	ldr	r3, [pc, #256]	@ (80145c0 <etharp_output+0x1fc>)
 80144c0:	781b      	ldrb	r3, [r3, #0]
 80144c2:	4619      	mov	r1, r3
 80144c4:	4a3f      	ldr	r2, [pc, #252]	@ (80145c4 <etharp_output+0x200>)
 80144c6:	460b      	mov	r3, r1
 80144c8:	005b      	lsls	r3, r3, #1
 80144ca:	440b      	add	r3, r1
 80144cc:	00db      	lsls	r3, r3, #3
 80144ce:	4413      	add	r3, r2
 80144d0:	3308      	adds	r3, #8
 80144d2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80144d4:	68fa      	ldr	r2, [r7, #12]
 80144d6:	429a      	cmp	r2, r3
 80144d8:	d117      	bne.n	801450a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80144da:	69bb      	ldr	r3, [r7, #24]
 80144dc:	681a      	ldr	r2, [r3, #0]
 80144de:	4b38      	ldr	r3, [pc, #224]	@ (80145c0 <etharp_output+0x1fc>)
 80144e0:	781b      	ldrb	r3, [r3, #0]
 80144e2:	4618      	mov	r0, r3
 80144e4:	4937      	ldr	r1, [pc, #220]	@ (80145c4 <etharp_output+0x200>)
 80144e6:	4603      	mov	r3, r0
 80144e8:	005b      	lsls	r3, r3, #1
 80144ea:	4403      	add	r3, r0
 80144ec:	00db      	lsls	r3, r3, #3
 80144ee:	440b      	add	r3, r1
 80144f0:	3304      	adds	r3, #4
 80144f2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80144f4:	429a      	cmp	r2, r3
 80144f6:	d108      	bne.n	801450a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80144f8:	4b31      	ldr	r3, [pc, #196]	@ (80145c0 <etharp_output+0x1fc>)
 80144fa:	781b      	ldrb	r3, [r3, #0]
 80144fc:	461a      	mov	r2, r3
 80144fe:	68b9      	ldr	r1, [r7, #8]
 8014500:	68f8      	ldr	r0, [r7, #12]
 8014502:	f7ff fec5 	bl	8014290 <etharp_output_to_arp_index>
 8014506:	4603      	mov	r3, r0
 8014508:	e04a      	b.n	80145a0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801450a:	2300      	movs	r3, #0
 801450c:	75fb      	strb	r3, [r7, #23]
 801450e:	e031      	b.n	8014574 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014510:	7dfa      	ldrb	r2, [r7, #23]
 8014512:	492c      	ldr	r1, [pc, #176]	@ (80145c4 <etharp_output+0x200>)
 8014514:	4613      	mov	r3, r2
 8014516:	005b      	lsls	r3, r3, #1
 8014518:	4413      	add	r3, r2
 801451a:	00db      	lsls	r3, r3, #3
 801451c:	440b      	add	r3, r1
 801451e:	3314      	adds	r3, #20
 8014520:	781b      	ldrb	r3, [r3, #0]
 8014522:	2b01      	cmp	r3, #1
 8014524:	d923      	bls.n	801456e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014526:	7dfa      	ldrb	r2, [r7, #23]
 8014528:	4926      	ldr	r1, [pc, #152]	@ (80145c4 <etharp_output+0x200>)
 801452a:	4613      	mov	r3, r2
 801452c:	005b      	lsls	r3, r3, #1
 801452e:	4413      	add	r3, r2
 8014530:	00db      	lsls	r3, r3, #3
 8014532:	440b      	add	r3, r1
 8014534:	3308      	adds	r3, #8
 8014536:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014538:	68fa      	ldr	r2, [r7, #12]
 801453a:	429a      	cmp	r2, r3
 801453c:	d117      	bne.n	801456e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801453e:	69bb      	ldr	r3, [r7, #24]
 8014540:	6819      	ldr	r1, [r3, #0]
 8014542:	7dfa      	ldrb	r2, [r7, #23]
 8014544:	481f      	ldr	r0, [pc, #124]	@ (80145c4 <etharp_output+0x200>)
 8014546:	4613      	mov	r3, r2
 8014548:	005b      	lsls	r3, r3, #1
 801454a:	4413      	add	r3, r2
 801454c:	00db      	lsls	r3, r3, #3
 801454e:	4403      	add	r3, r0
 8014550:	3304      	adds	r3, #4
 8014552:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014554:	4299      	cmp	r1, r3
 8014556:	d10a      	bne.n	801456e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014558:	4a19      	ldr	r2, [pc, #100]	@ (80145c0 <etharp_output+0x1fc>)
 801455a:	7dfb      	ldrb	r3, [r7, #23]
 801455c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801455e:	7dfb      	ldrb	r3, [r7, #23]
 8014560:	461a      	mov	r2, r3
 8014562:	68b9      	ldr	r1, [r7, #8]
 8014564:	68f8      	ldr	r0, [r7, #12]
 8014566:	f7ff fe93 	bl	8014290 <etharp_output_to_arp_index>
 801456a:	4603      	mov	r3, r0
 801456c:	e018      	b.n	80145a0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801456e:	7dfb      	ldrb	r3, [r7, #23]
 8014570:	3301      	adds	r3, #1
 8014572:	75fb      	strb	r3, [r7, #23]
 8014574:	7dfb      	ldrb	r3, [r7, #23]
 8014576:	2b09      	cmp	r3, #9
 8014578:	d9ca      	bls.n	8014510 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801457a:	68ba      	ldr	r2, [r7, #8]
 801457c:	69b9      	ldr	r1, [r7, #24]
 801457e:	68f8      	ldr	r0, [r7, #12]
 8014580:	f000 f822 	bl	80145c8 <etharp_query>
 8014584:	4603      	mov	r3, r0
 8014586:	e00b      	b.n	80145a0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801458e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014592:	9300      	str	r3, [sp, #0]
 8014594:	69fb      	ldr	r3, [r7, #28]
 8014596:	68b9      	ldr	r1, [r7, #8]
 8014598:	68f8      	ldr	r0, [r7, #12]
 801459a:	f001 fd6b 	bl	8016074 <ethernet_output>
 801459e:	4603      	mov	r3, r0
}
 80145a0:	4618      	mov	r0, r3
 80145a2:	3720      	adds	r7, #32
 80145a4:	46bd      	mov	sp, r7
 80145a6:	bd80      	pop	{r7, pc}
 80145a8:	0801a3e8 	.word	0x0801a3e8
 80145ac:	0801a538 	.word	0x0801a538
 80145b0:	0801a460 	.word	0x0801a460
 80145b4:	0801a588 	.word	0x0801a588
 80145b8:	0801a528 	.word	0x0801a528
 80145bc:	0801ac04 	.word	0x0801ac04
 80145c0:	2400804c 	.word	0x2400804c
 80145c4:	24007f5c 	.word	0x24007f5c

080145c8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80145c8:	b580      	push	{r7, lr}
 80145ca:	b08c      	sub	sp, #48	@ 0x30
 80145cc:	af02      	add	r7, sp, #8
 80145ce:	60f8      	str	r0, [r7, #12]
 80145d0:	60b9      	str	r1, [r7, #8]
 80145d2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	3326      	adds	r3, #38	@ 0x26
 80145d8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80145da:	23ff      	movs	r3, #255	@ 0xff
 80145dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 80145e0:	2300      	movs	r3, #0
 80145e2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80145e4:	68bb      	ldr	r3, [r7, #8]
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	68f9      	ldr	r1, [r7, #12]
 80145ea:	4618      	mov	r0, r3
 80145ec:	f000 fe34 	bl	8015258 <ip4_addr_isbroadcast_u32>
 80145f0:	4603      	mov	r3, r0
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d10c      	bne.n	8014610 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80145f6:	68bb      	ldr	r3, [r7, #8]
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80145fe:	2be0      	cmp	r3, #224	@ 0xe0
 8014600:	d006      	beq.n	8014610 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014602:	68bb      	ldr	r3, [r7, #8]
 8014604:	2b00      	cmp	r3, #0
 8014606:	d003      	beq.n	8014610 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014608:	68bb      	ldr	r3, [r7, #8]
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	2b00      	cmp	r3, #0
 801460e:	d102      	bne.n	8014616 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014610:	f06f 030f 	mvn.w	r3, #15
 8014614:	e101      	b.n	801481a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014616:	68fa      	ldr	r2, [r7, #12]
 8014618:	2101      	movs	r1, #1
 801461a:	68b8      	ldr	r0, [r7, #8]
 801461c:	f7ff fb60 	bl	8013ce0 <etharp_find_entry>
 8014620:	4603      	mov	r3, r0
 8014622:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014624:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014628:	2b00      	cmp	r3, #0
 801462a:	da02      	bge.n	8014632 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801462c:	8a7b      	ldrh	r3, [r7, #18]
 801462e:	b25b      	sxtb	r3, r3
 8014630:	e0f3      	b.n	801481a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014632:	8a7b      	ldrh	r3, [r7, #18]
 8014634:	2b7e      	cmp	r3, #126	@ 0x7e
 8014636:	d906      	bls.n	8014646 <etharp_query+0x7e>
 8014638:	4b7a      	ldr	r3, [pc, #488]	@ (8014824 <etharp_query+0x25c>)
 801463a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801463e:	497a      	ldr	r1, [pc, #488]	@ (8014828 <etharp_query+0x260>)
 8014640:	487a      	ldr	r0, [pc, #488]	@ (801482c <etharp_query+0x264>)
 8014642:	f002 f815 	bl	8016670 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014646:	8a7b      	ldrh	r3, [r7, #18]
 8014648:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801464a:	7c7a      	ldrb	r2, [r7, #17]
 801464c:	4978      	ldr	r1, [pc, #480]	@ (8014830 <etharp_query+0x268>)
 801464e:	4613      	mov	r3, r2
 8014650:	005b      	lsls	r3, r3, #1
 8014652:	4413      	add	r3, r2
 8014654:	00db      	lsls	r3, r3, #3
 8014656:	440b      	add	r3, r1
 8014658:	3314      	adds	r3, #20
 801465a:	781b      	ldrb	r3, [r3, #0]
 801465c:	2b00      	cmp	r3, #0
 801465e:	d115      	bne.n	801468c <etharp_query+0xc4>
    is_new_entry = 1;
 8014660:	2301      	movs	r3, #1
 8014662:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014664:	7c7a      	ldrb	r2, [r7, #17]
 8014666:	4972      	ldr	r1, [pc, #456]	@ (8014830 <etharp_query+0x268>)
 8014668:	4613      	mov	r3, r2
 801466a:	005b      	lsls	r3, r3, #1
 801466c:	4413      	add	r3, r2
 801466e:	00db      	lsls	r3, r3, #3
 8014670:	440b      	add	r3, r1
 8014672:	3314      	adds	r3, #20
 8014674:	2201      	movs	r2, #1
 8014676:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014678:	7c7a      	ldrb	r2, [r7, #17]
 801467a:	496d      	ldr	r1, [pc, #436]	@ (8014830 <etharp_query+0x268>)
 801467c:	4613      	mov	r3, r2
 801467e:	005b      	lsls	r3, r3, #1
 8014680:	4413      	add	r3, r2
 8014682:	00db      	lsls	r3, r3, #3
 8014684:	440b      	add	r3, r1
 8014686:	3308      	adds	r3, #8
 8014688:	68fa      	ldr	r2, [r7, #12]
 801468a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801468c:	7c7a      	ldrb	r2, [r7, #17]
 801468e:	4968      	ldr	r1, [pc, #416]	@ (8014830 <etharp_query+0x268>)
 8014690:	4613      	mov	r3, r2
 8014692:	005b      	lsls	r3, r3, #1
 8014694:	4413      	add	r3, r2
 8014696:	00db      	lsls	r3, r3, #3
 8014698:	440b      	add	r3, r1
 801469a:	3314      	adds	r3, #20
 801469c:	781b      	ldrb	r3, [r3, #0]
 801469e:	2b01      	cmp	r3, #1
 80146a0:	d011      	beq.n	80146c6 <etharp_query+0xfe>
 80146a2:	7c7a      	ldrb	r2, [r7, #17]
 80146a4:	4962      	ldr	r1, [pc, #392]	@ (8014830 <etharp_query+0x268>)
 80146a6:	4613      	mov	r3, r2
 80146a8:	005b      	lsls	r3, r3, #1
 80146aa:	4413      	add	r3, r2
 80146ac:	00db      	lsls	r3, r3, #3
 80146ae:	440b      	add	r3, r1
 80146b0:	3314      	adds	r3, #20
 80146b2:	781b      	ldrb	r3, [r3, #0]
 80146b4:	2b01      	cmp	r3, #1
 80146b6:	d806      	bhi.n	80146c6 <etharp_query+0xfe>
 80146b8:	4b5a      	ldr	r3, [pc, #360]	@ (8014824 <etharp_query+0x25c>)
 80146ba:	f240 32cd 	movw	r2, #973	@ 0x3cd
 80146be:	495d      	ldr	r1, [pc, #372]	@ (8014834 <etharp_query+0x26c>)
 80146c0:	485a      	ldr	r0, [pc, #360]	@ (801482c <etharp_query+0x264>)
 80146c2:	f001 ffd5 	bl	8016670 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80146c6:	6a3b      	ldr	r3, [r7, #32]
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d102      	bne.n	80146d2 <etharp_query+0x10a>
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d10c      	bne.n	80146ec <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80146d2:	68b9      	ldr	r1, [r7, #8]
 80146d4:	68f8      	ldr	r0, [r7, #12]
 80146d6:	f000 f963 	bl	80149a0 <etharp_request>
 80146da:	4603      	mov	r3, r0
 80146dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d102      	bne.n	80146ec <etharp_query+0x124>
      return result;
 80146e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80146ea:	e096      	b.n	801481a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d106      	bne.n	8014700 <etharp_query+0x138>
 80146f2:	4b4c      	ldr	r3, [pc, #304]	@ (8014824 <etharp_query+0x25c>)
 80146f4:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80146f8:	494f      	ldr	r1, [pc, #316]	@ (8014838 <etharp_query+0x270>)
 80146fa:	484c      	ldr	r0, [pc, #304]	@ (801482c <etharp_query+0x264>)
 80146fc:	f001 ffb8 	bl	8016670 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014700:	7c7a      	ldrb	r2, [r7, #17]
 8014702:	494b      	ldr	r1, [pc, #300]	@ (8014830 <etharp_query+0x268>)
 8014704:	4613      	mov	r3, r2
 8014706:	005b      	lsls	r3, r3, #1
 8014708:	4413      	add	r3, r2
 801470a:	00db      	lsls	r3, r3, #3
 801470c:	440b      	add	r3, r1
 801470e:	3314      	adds	r3, #20
 8014710:	781b      	ldrb	r3, [r3, #0]
 8014712:	2b01      	cmp	r3, #1
 8014714:	d917      	bls.n	8014746 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014716:	4a49      	ldr	r2, [pc, #292]	@ (801483c <etharp_query+0x274>)
 8014718:	7c7b      	ldrb	r3, [r7, #17]
 801471a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801471c:	7c7a      	ldrb	r2, [r7, #17]
 801471e:	4613      	mov	r3, r2
 8014720:	005b      	lsls	r3, r3, #1
 8014722:	4413      	add	r3, r2
 8014724:	00db      	lsls	r3, r3, #3
 8014726:	3308      	adds	r3, #8
 8014728:	4a41      	ldr	r2, [pc, #260]	@ (8014830 <etharp_query+0x268>)
 801472a:	4413      	add	r3, r2
 801472c:	3304      	adds	r3, #4
 801472e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014732:	9200      	str	r2, [sp, #0]
 8014734:	697a      	ldr	r2, [r7, #20]
 8014736:	6879      	ldr	r1, [r7, #4]
 8014738:	68f8      	ldr	r0, [r7, #12]
 801473a:	f001 fc9b 	bl	8016074 <ethernet_output>
 801473e:	4603      	mov	r3, r0
 8014740:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014744:	e067      	b.n	8014816 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014746:	7c7a      	ldrb	r2, [r7, #17]
 8014748:	4939      	ldr	r1, [pc, #228]	@ (8014830 <etharp_query+0x268>)
 801474a:	4613      	mov	r3, r2
 801474c:	005b      	lsls	r3, r3, #1
 801474e:	4413      	add	r3, r2
 8014750:	00db      	lsls	r3, r3, #3
 8014752:	440b      	add	r3, r1
 8014754:	3314      	adds	r3, #20
 8014756:	781b      	ldrb	r3, [r3, #0]
 8014758:	2b01      	cmp	r3, #1
 801475a:	d15c      	bne.n	8014816 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801475c:	2300      	movs	r3, #0
 801475e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014764:	e01c      	b.n	80147a0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014766:	69fb      	ldr	r3, [r7, #28]
 8014768:	895a      	ldrh	r2, [r3, #10]
 801476a:	69fb      	ldr	r3, [r7, #28]
 801476c:	891b      	ldrh	r3, [r3, #8]
 801476e:	429a      	cmp	r2, r3
 8014770:	d10a      	bne.n	8014788 <etharp_query+0x1c0>
 8014772:	69fb      	ldr	r3, [r7, #28]
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	2b00      	cmp	r3, #0
 8014778:	d006      	beq.n	8014788 <etharp_query+0x1c0>
 801477a:	4b2a      	ldr	r3, [pc, #168]	@ (8014824 <etharp_query+0x25c>)
 801477c:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8014780:	492f      	ldr	r1, [pc, #188]	@ (8014840 <etharp_query+0x278>)
 8014782:	482a      	ldr	r0, [pc, #168]	@ (801482c <etharp_query+0x264>)
 8014784:	f001 ff74 	bl	8016670 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014788:	69fb      	ldr	r3, [r7, #28]
 801478a:	7b1b      	ldrb	r3, [r3, #12]
 801478c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014790:	2b00      	cmp	r3, #0
 8014792:	d002      	beq.n	801479a <etharp_query+0x1d2>
        copy_needed = 1;
 8014794:	2301      	movs	r3, #1
 8014796:	61bb      	str	r3, [r7, #24]
        break;
 8014798:	e005      	b.n	80147a6 <etharp_query+0x1de>
      }
      p = p->next;
 801479a:	69fb      	ldr	r3, [r7, #28]
 801479c:	681b      	ldr	r3, [r3, #0]
 801479e:	61fb      	str	r3, [r7, #28]
    while (p) {
 80147a0:	69fb      	ldr	r3, [r7, #28]
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d1df      	bne.n	8014766 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80147a6:	69bb      	ldr	r3, [r7, #24]
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d007      	beq.n	80147bc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80147ac:	687a      	ldr	r2, [r7, #4]
 80147ae:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80147b2:	200e      	movs	r0, #14
 80147b4:	f7f8 fc8c 	bl	800d0d0 <pbuf_clone>
 80147b8:	61f8      	str	r0, [r7, #28]
 80147ba:	e004      	b.n	80147c6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80147c0:	69f8      	ldr	r0, [r7, #28]
 80147c2:	f7f8 fac3 	bl	800cd4c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80147c6:	69fb      	ldr	r3, [r7, #28]
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d021      	beq.n	8014810 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80147cc:	7c7a      	ldrb	r2, [r7, #17]
 80147ce:	4918      	ldr	r1, [pc, #96]	@ (8014830 <etharp_query+0x268>)
 80147d0:	4613      	mov	r3, r2
 80147d2:	005b      	lsls	r3, r3, #1
 80147d4:	4413      	add	r3, r2
 80147d6:	00db      	lsls	r3, r3, #3
 80147d8:	440b      	add	r3, r1
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d00a      	beq.n	80147f6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80147e0:	7c7a      	ldrb	r2, [r7, #17]
 80147e2:	4913      	ldr	r1, [pc, #76]	@ (8014830 <etharp_query+0x268>)
 80147e4:	4613      	mov	r3, r2
 80147e6:	005b      	lsls	r3, r3, #1
 80147e8:	4413      	add	r3, r2
 80147ea:	00db      	lsls	r3, r3, #3
 80147ec:	440b      	add	r3, r1
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	4618      	mov	r0, r3
 80147f2:	f7f8 fa05 	bl	800cc00 <pbuf_free>
      }
      arp_table[i].q = p;
 80147f6:	7c7a      	ldrb	r2, [r7, #17]
 80147f8:	490d      	ldr	r1, [pc, #52]	@ (8014830 <etharp_query+0x268>)
 80147fa:	4613      	mov	r3, r2
 80147fc:	005b      	lsls	r3, r3, #1
 80147fe:	4413      	add	r3, r2
 8014800:	00db      	lsls	r3, r3, #3
 8014802:	440b      	add	r3, r1
 8014804:	69fa      	ldr	r2, [r7, #28]
 8014806:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014808:	2300      	movs	r3, #0
 801480a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801480e:	e002      	b.n	8014816 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014810:	23ff      	movs	r3, #255	@ 0xff
 8014812:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8014816:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801481a:	4618      	mov	r0, r3
 801481c:	3728      	adds	r7, #40	@ 0x28
 801481e:	46bd      	mov	sp, r7
 8014820:	bd80      	pop	{r7, pc}
 8014822:	bf00      	nop
 8014824:	0801a3e8 	.word	0x0801a3e8
 8014828:	0801a594 	.word	0x0801a594
 801482c:	0801a460 	.word	0x0801a460
 8014830:	24007f5c 	.word	0x24007f5c
 8014834:	0801a5a4 	.word	0x0801a5a4
 8014838:	0801a588 	.word	0x0801a588
 801483c:	2400804c 	.word	0x2400804c
 8014840:	0801a5cc 	.word	0x0801a5cc

08014844 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014844:	b580      	push	{r7, lr}
 8014846:	b08a      	sub	sp, #40	@ 0x28
 8014848:	af02      	add	r7, sp, #8
 801484a:	60f8      	str	r0, [r7, #12]
 801484c:	60b9      	str	r1, [r7, #8]
 801484e:	607a      	str	r2, [r7, #4]
 8014850:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014852:	2300      	movs	r3, #0
 8014854:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	2b00      	cmp	r3, #0
 801485a:	d106      	bne.n	801486a <etharp_raw+0x26>
 801485c:	4b3a      	ldr	r3, [pc, #232]	@ (8014948 <etharp_raw+0x104>)
 801485e:	f240 4257 	movw	r2, #1111	@ 0x457
 8014862:	493a      	ldr	r1, [pc, #232]	@ (801494c <etharp_raw+0x108>)
 8014864:	483a      	ldr	r0, [pc, #232]	@ (8014950 <etharp_raw+0x10c>)
 8014866:	f001 ff03 	bl	8016670 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801486a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801486e:	211c      	movs	r1, #28
 8014870:	200e      	movs	r0, #14
 8014872:	f7f7 fee1 	bl	800c638 <pbuf_alloc>
 8014876:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014878:	69bb      	ldr	r3, [r7, #24]
 801487a:	2b00      	cmp	r3, #0
 801487c:	d102      	bne.n	8014884 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801487e:	f04f 33ff 	mov.w	r3, #4294967295
 8014882:	e05d      	b.n	8014940 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014884:	69bb      	ldr	r3, [r7, #24]
 8014886:	895b      	ldrh	r3, [r3, #10]
 8014888:	2b1b      	cmp	r3, #27
 801488a:	d806      	bhi.n	801489a <etharp_raw+0x56>
 801488c:	4b2e      	ldr	r3, [pc, #184]	@ (8014948 <etharp_raw+0x104>)
 801488e:	f240 4262 	movw	r2, #1122	@ 0x462
 8014892:	4930      	ldr	r1, [pc, #192]	@ (8014954 <etharp_raw+0x110>)
 8014894:	482e      	ldr	r0, [pc, #184]	@ (8014950 <etharp_raw+0x10c>)
 8014896:	f001 feeb 	bl	8016670 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801489a:	69bb      	ldr	r3, [r7, #24]
 801489c:	685b      	ldr	r3, [r3, #4]
 801489e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80148a0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80148a2:	4618      	mov	r0, r3
 80148a4:	f7f6 fd02 	bl	800b2ac <lwip_htons>
 80148a8:	4603      	mov	r3, r0
 80148aa:	461a      	mov	r2, r3
 80148ac:	697b      	ldr	r3, [r7, #20]
 80148ae:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80148b6:	2b06      	cmp	r3, #6
 80148b8:	d006      	beq.n	80148c8 <etharp_raw+0x84>
 80148ba:	4b23      	ldr	r3, [pc, #140]	@ (8014948 <etharp_raw+0x104>)
 80148bc:	f240 4269 	movw	r2, #1129	@ 0x469
 80148c0:	4925      	ldr	r1, [pc, #148]	@ (8014958 <etharp_raw+0x114>)
 80148c2:	4823      	ldr	r0, [pc, #140]	@ (8014950 <etharp_raw+0x10c>)
 80148c4:	f001 fed4 	bl	8016670 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80148c8:	697b      	ldr	r3, [r7, #20]
 80148ca:	3308      	adds	r3, #8
 80148cc:	2206      	movs	r2, #6
 80148ce:	6839      	ldr	r1, [r7, #0]
 80148d0:	4618      	mov	r0, r3
 80148d2:	f001 fffe 	bl	80168d2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80148d6:	697b      	ldr	r3, [r7, #20]
 80148d8:	3312      	adds	r3, #18
 80148da:	2206      	movs	r2, #6
 80148dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80148de:	4618      	mov	r0, r3
 80148e0:	f001 fff7 	bl	80168d2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80148e4:	697b      	ldr	r3, [r7, #20]
 80148e6:	330e      	adds	r3, #14
 80148e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80148ea:	6812      	ldr	r2, [r2, #0]
 80148ec:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80148ee:	697b      	ldr	r3, [r7, #20]
 80148f0:	3318      	adds	r3, #24
 80148f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80148f4:	6812      	ldr	r2, [r2, #0]
 80148f6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80148f8:	697b      	ldr	r3, [r7, #20]
 80148fa:	2200      	movs	r2, #0
 80148fc:	701a      	strb	r2, [r3, #0]
 80148fe:	2200      	movs	r2, #0
 8014900:	f042 0201 	orr.w	r2, r2, #1
 8014904:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014906:	697b      	ldr	r3, [r7, #20]
 8014908:	2200      	movs	r2, #0
 801490a:	f042 0208 	orr.w	r2, r2, #8
 801490e:	709a      	strb	r2, [r3, #2]
 8014910:	2200      	movs	r2, #0
 8014912:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014914:	697b      	ldr	r3, [r7, #20]
 8014916:	2206      	movs	r2, #6
 8014918:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801491a:	697b      	ldr	r3, [r7, #20]
 801491c:	2204      	movs	r2, #4
 801491e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014920:	f640 0306 	movw	r3, #2054	@ 0x806
 8014924:	9300      	str	r3, [sp, #0]
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	68ba      	ldr	r2, [r7, #8]
 801492a:	69b9      	ldr	r1, [r7, #24]
 801492c:	68f8      	ldr	r0, [r7, #12]
 801492e:	f001 fba1 	bl	8016074 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014932:	69b8      	ldr	r0, [r7, #24]
 8014934:	f7f8 f964 	bl	800cc00 <pbuf_free>
  p = NULL;
 8014938:	2300      	movs	r3, #0
 801493a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801493c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014940:	4618      	mov	r0, r3
 8014942:	3720      	adds	r7, #32
 8014944:	46bd      	mov	sp, r7
 8014946:	bd80      	pop	{r7, pc}
 8014948:	0801a3e8 	.word	0x0801a3e8
 801494c:	0801a538 	.word	0x0801a538
 8014950:	0801a460 	.word	0x0801a460
 8014954:	0801a5e8 	.word	0x0801a5e8
 8014958:	0801a61c 	.word	0x0801a61c

0801495c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801495c:	b580      	push	{r7, lr}
 801495e:	b088      	sub	sp, #32
 8014960:	af04      	add	r7, sp, #16
 8014962:	60f8      	str	r0, [r7, #12]
 8014964:	60b9      	str	r1, [r7, #8]
 8014966:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014978:	2201      	movs	r2, #1
 801497a:	9203      	str	r2, [sp, #12]
 801497c:	68ba      	ldr	r2, [r7, #8]
 801497e:	9202      	str	r2, [sp, #8]
 8014980:	4a06      	ldr	r2, [pc, #24]	@ (801499c <etharp_request_dst+0x40>)
 8014982:	9201      	str	r2, [sp, #4]
 8014984:	9300      	str	r3, [sp, #0]
 8014986:	4603      	mov	r3, r0
 8014988:	687a      	ldr	r2, [r7, #4]
 801498a:	68f8      	ldr	r0, [r7, #12]
 801498c:	f7ff ff5a 	bl	8014844 <etharp_raw>
 8014990:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014992:	4618      	mov	r0, r3
 8014994:	3710      	adds	r7, #16
 8014996:	46bd      	mov	sp, r7
 8014998:	bd80      	pop	{r7, pc}
 801499a:	bf00      	nop
 801499c:	0801ac0c 	.word	0x0801ac0c

080149a0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80149a0:	b580      	push	{r7, lr}
 80149a2:	b082      	sub	sp, #8
 80149a4:	af00      	add	r7, sp, #0
 80149a6:	6078      	str	r0, [r7, #4]
 80149a8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80149aa:	4a05      	ldr	r2, [pc, #20]	@ (80149c0 <etharp_request+0x20>)
 80149ac:	6839      	ldr	r1, [r7, #0]
 80149ae:	6878      	ldr	r0, [r7, #4]
 80149b0:	f7ff ffd4 	bl	801495c <etharp_request_dst>
 80149b4:	4603      	mov	r3, r0
}
 80149b6:	4618      	mov	r0, r3
 80149b8:	3708      	adds	r7, #8
 80149ba:	46bd      	mov	sp, r7
 80149bc:	bd80      	pop	{r7, pc}
 80149be:	bf00      	nop
 80149c0:	0801ac04 	.word	0x0801ac04

080149c4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80149c4:	b580      	push	{r7, lr}
 80149c6:	b08e      	sub	sp, #56	@ 0x38
 80149c8:	af04      	add	r7, sp, #16
 80149ca:	6078      	str	r0, [r7, #4]
 80149cc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80149ce:	4b87      	ldr	r3, [pc, #540]	@ (8014bec <icmp_input+0x228>)
 80149d0:	689b      	ldr	r3, [r3, #8]
 80149d2:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80149d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149d6:	781b      	ldrb	r3, [r3, #0]
 80149d8:	f003 030f 	and.w	r3, r3, #15
 80149dc:	b2db      	uxtb	r3, r3
 80149de:	009b      	lsls	r3, r3, #2
 80149e0:	b2db      	uxtb	r3, r3
 80149e2:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 80149e4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80149e6:	2b13      	cmp	r3, #19
 80149e8:	f240 80e8 	bls.w	8014bbc <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	895b      	ldrh	r3, [r3, #10]
 80149f0:	2b03      	cmp	r3, #3
 80149f2:	f240 80e5 	bls.w	8014bc0 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	685b      	ldr	r3, [r3, #4]
 80149fa:	781b      	ldrb	r3, [r3, #0]
 80149fc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014a00:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	f000 80d2 	beq.w	8014bae <icmp_input+0x1ea>
 8014a0a:	2b08      	cmp	r3, #8
 8014a0c:	f040 80d2 	bne.w	8014bb4 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014a10:	4b77      	ldr	r3, [pc, #476]	@ (8014bf0 <icmp_input+0x22c>)
 8014a12:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014a14:	4b75      	ldr	r3, [pc, #468]	@ (8014bec <icmp_input+0x228>)
 8014a16:	695b      	ldr	r3, [r3, #20]
 8014a18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014a1c:	2be0      	cmp	r3, #224	@ 0xe0
 8014a1e:	f000 80d6 	beq.w	8014bce <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014a22:	4b72      	ldr	r3, [pc, #456]	@ (8014bec <icmp_input+0x228>)
 8014a24:	695b      	ldr	r3, [r3, #20]
 8014a26:	4a71      	ldr	r2, [pc, #452]	@ (8014bec <icmp_input+0x228>)
 8014a28:	6812      	ldr	r2, [r2, #0]
 8014a2a:	4611      	mov	r1, r2
 8014a2c:	4618      	mov	r0, r3
 8014a2e:	f000 fc13 	bl	8015258 <ip4_addr_isbroadcast_u32>
 8014a32:	4603      	mov	r3, r0
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	f040 80cc 	bne.w	8014bd2 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	891b      	ldrh	r3, [r3, #8]
 8014a3e:	2b07      	cmp	r3, #7
 8014a40:	f240 80c0 	bls.w	8014bc4 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8014a44:	6878      	ldr	r0, [r7, #4]
 8014a46:	f7f6 fcce 	bl	800b3e6 <inet_chksum_pbuf>
 8014a4a:	4603      	mov	r3, r0
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d003      	beq.n	8014a58 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8014a50:	6878      	ldr	r0, [r7, #4]
 8014a52:	f7f8 f8d5 	bl	800cc00 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8014a56:	e0c5      	b.n	8014be4 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014a58:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014a5a:	330e      	adds	r3, #14
 8014a5c:	4619      	mov	r1, r3
 8014a5e:	6878      	ldr	r0, [r7, #4]
 8014a60:	f7f8 f838 	bl	800cad4 <pbuf_add_header>
 8014a64:	4603      	mov	r3, r0
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d04b      	beq.n	8014b02 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	891a      	ldrh	r2, [r3, #8]
 8014a6e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014a70:	4413      	add	r3, r2
 8014a72:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	891b      	ldrh	r3, [r3, #8]
 8014a78:	8b7a      	ldrh	r2, [r7, #26]
 8014a7a:	429a      	cmp	r2, r3
 8014a7c:	f0c0 80ab 	bcc.w	8014bd6 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014a80:	8b7b      	ldrh	r3, [r7, #26]
 8014a82:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014a86:	4619      	mov	r1, r3
 8014a88:	200e      	movs	r0, #14
 8014a8a:	f7f7 fdd5 	bl	800c638 <pbuf_alloc>
 8014a8e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014a90:	697b      	ldr	r3, [r7, #20]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	f000 80a1 	beq.w	8014bda <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014a98:	697b      	ldr	r3, [r7, #20]
 8014a9a:	895b      	ldrh	r3, [r3, #10]
 8014a9c:	461a      	mov	r2, r3
 8014a9e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014aa0:	3308      	adds	r3, #8
 8014aa2:	429a      	cmp	r2, r3
 8014aa4:	d203      	bcs.n	8014aae <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014aa6:	6978      	ldr	r0, [r7, #20]
 8014aa8:	f7f8 f8aa 	bl	800cc00 <pbuf_free>
          goto icmperr;
 8014aac:	e096      	b.n	8014bdc <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014aae:	697b      	ldr	r3, [r7, #20]
 8014ab0:	685b      	ldr	r3, [r3, #4]
 8014ab2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8014ab4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014ab6:	4618      	mov	r0, r3
 8014ab8:	f001 ff0b 	bl	80168d2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014abc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014abe:	4619      	mov	r1, r3
 8014ac0:	6978      	ldr	r0, [r7, #20]
 8014ac2:	f7f8 f817 	bl	800caf4 <pbuf_remove_header>
 8014ac6:	4603      	mov	r3, r0
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d009      	beq.n	8014ae0 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014acc:	4b49      	ldr	r3, [pc, #292]	@ (8014bf4 <icmp_input+0x230>)
 8014ace:	22b6      	movs	r2, #182	@ 0xb6
 8014ad0:	4949      	ldr	r1, [pc, #292]	@ (8014bf8 <icmp_input+0x234>)
 8014ad2:	484a      	ldr	r0, [pc, #296]	@ (8014bfc <icmp_input+0x238>)
 8014ad4:	f001 fdcc 	bl	8016670 <iprintf>
          pbuf_free(r);
 8014ad8:	6978      	ldr	r0, [r7, #20]
 8014ada:	f7f8 f891 	bl	800cc00 <pbuf_free>
          goto icmperr;
 8014ade:	e07d      	b.n	8014bdc <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014ae0:	6879      	ldr	r1, [r7, #4]
 8014ae2:	6978      	ldr	r0, [r7, #20]
 8014ae4:	f7f8 f9b0 	bl	800ce48 <pbuf_copy>
 8014ae8:	4603      	mov	r3, r0
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d003      	beq.n	8014af6 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014aee:	6978      	ldr	r0, [r7, #20]
 8014af0:	f7f8 f886 	bl	800cc00 <pbuf_free>
          goto icmperr;
 8014af4:	e072      	b.n	8014bdc <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8014af6:	6878      	ldr	r0, [r7, #4]
 8014af8:	f7f8 f882 	bl	800cc00 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014afc:	697b      	ldr	r3, [r7, #20]
 8014afe:	607b      	str	r3, [r7, #4]
 8014b00:	e00f      	b.n	8014b22 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014b02:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014b04:	330e      	adds	r3, #14
 8014b06:	4619      	mov	r1, r3
 8014b08:	6878      	ldr	r0, [r7, #4]
 8014b0a:	f7f7 fff3 	bl	800caf4 <pbuf_remove_header>
 8014b0e:	4603      	mov	r3, r0
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d006      	beq.n	8014b22 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014b14:	4b37      	ldr	r3, [pc, #220]	@ (8014bf4 <icmp_input+0x230>)
 8014b16:	22c7      	movs	r2, #199	@ 0xc7
 8014b18:	4939      	ldr	r1, [pc, #228]	@ (8014c00 <icmp_input+0x23c>)
 8014b1a:	4838      	ldr	r0, [pc, #224]	@ (8014bfc <icmp_input+0x238>)
 8014b1c:	f001 fda8 	bl	8016670 <iprintf>
          goto icmperr;
 8014b20:	e05c      	b.n	8014bdc <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	685b      	ldr	r3, [r3, #4]
 8014b26:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014b28:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014b2a:	4619      	mov	r1, r3
 8014b2c:	6878      	ldr	r0, [r7, #4]
 8014b2e:	f7f7 ffd1 	bl	800cad4 <pbuf_add_header>
 8014b32:	4603      	mov	r3, r0
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d13c      	bne.n	8014bb2 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	685b      	ldr	r3, [r3, #4]
 8014b3c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014b3e:	69fb      	ldr	r3, [r7, #28]
 8014b40:	681a      	ldr	r2, [r3, #0]
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014b46:	4b29      	ldr	r3, [pc, #164]	@ (8014bec <icmp_input+0x228>)
 8014b48:	691a      	ldr	r2, [r3, #16]
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014b4e:	693b      	ldr	r3, [r7, #16]
 8014b50:	2200      	movs	r2, #0
 8014b52:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8014b54:	693b      	ldr	r3, [r7, #16]
 8014b56:	885b      	ldrh	r3, [r3, #2]
 8014b58:	b29b      	uxth	r3, r3
 8014b5a:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8014b5e:	4293      	cmp	r3, r2
 8014b60:	d907      	bls.n	8014b72 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8014b62:	693b      	ldr	r3, [r7, #16]
 8014b64:	885b      	ldrh	r3, [r3, #2]
 8014b66:	b29b      	uxth	r3, r3
 8014b68:	3309      	adds	r3, #9
 8014b6a:	b29a      	uxth	r2, r3
 8014b6c:	693b      	ldr	r3, [r7, #16]
 8014b6e:	805a      	strh	r2, [r3, #2]
 8014b70:	e006      	b.n	8014b80 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8014b72:	693b      	ldr	r3, [r7, #16]
 8014b74:	885b      	ldrh	r3, [r3, #2]
 8014b76:	b29b      	uxth	r3, r3
 8014b78:	3308      	adds	r3, #8
 8014b7a:	b29a      	uxth	r2, r3
 8014b7c:	693b      	ldr	r3, [r7, #16]
 8014b7e:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	22ff      	movs	r2, #255	@ 0xff
 8014b84:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	2200      	movs	r2, #0
 8014b8a:	729a      	strb	r2, [r3, #10]
 8014b8c:	2200      	movs	r2, #0
 8014b8e:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014b90:	683b      	ldr	r3, [r7, #0]
 8014b92:	9302      	str	r3, [sp, #8]
 8014b94:	2301      	movs	r3, #1
 8014b96:	9301      	str	r3, [sp, #4]
 8014b98:	2300      	movs	r3, #0
 8014b9a:	9300      	str	r3, [sp, #0]
 8014b9c:	23ff      	movs	r3, #255	@ 0xff
 8014b9e:	2200      	movs	r2, #0
 8014ba0:	69f9      	ldr	r1, [r7, #28]
 8014ba2:	6878      	ldr	r0, [r7, #4]
 8014ba4:	f000 fa80 	bl	80150a8 <ip4_output_if>
 8014ba8:	4603      	mov	r3, r0
 8014baa:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014bac:	e001      	b.n	8014bb2 <icmp_input+0x1ee>
      break;
 8014bae:	bf00      	nop
 8014bb0:	e000      	b.n	8014bb4 <icmp_input+0x1f0>
      break;
 8014bb2:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014bb4:	6878      	ldr	r0, [r7, #4]
 8014bb6:	f7f8 f823 	bl	800cc00 <pbuf_free>
  return;
 8014bba:	e013      	b.n	8014be4 <icmp_input+0x220>
    goto lenerr;
 8014bbc:	bf00      	nop
 8014bbe:	e002      	b.n	8014bc6 <icmp_input+0x202>
    goto lenerr;
 8014bc0:	bf00      	nop
 8014bc2:	e000      	b.n	8014bc6 <icmp_input+0x202>
        goto lenerr;
 8014bc4:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014bc6:	6878      	ldr	r0, [r7, #4]
 8014bc8:	f7f8 f81a 	bl	800cc00 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014bcc:	e00a      	b.n	8014be4 <icmp_input+0x220>
        goto icmperr;
 8014bce:	bf00      	nop
 8014bd0:	e004      	b.n	8014bdc <icmp_input+0x218>
        goto icmperr;
 8014bd2:	bf00      	nop
 8014bd4:	e002      	b.n	8014bdc <icmp_input+0x218>
          goto icmperr;
 8014bd6:	bf00      	nop
 8014bd8:	e000      	b.n	8014bdc <icmp_input+0x218>
          goto icmperr;
 8014bda:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014bdc:	6878      	ldr	r0, [r7, #4]
 8014bde:	f7f8 f80f 	bl	800cc00 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014be2:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014be4:	3728      	adds	r7, #40	@ 0x28
 8014be6:	46bd      	mov	sp, r7
 8014be8:	bd80      	pop	{r7, pc}
 8014bea:	bf00      	nop
 8014bec:	24004dec 	.word	0x24004dec
 8014bf0:	24004e00 	.word	0x24004e00
 8014bf4:	0801a660 	.word	0x0801a660
 8014bf8:	0801a698 	.word	0x0801a698
 8014bfc:	0801a6d0 	.word	0x0801a6d0
 8014c00:	0801a6f8 	.word	0x0801a6f8

08014c04 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014c04:	b580      	push	{r7, lr}
 8014c06:	b082      	sub	sp, #8
 8014c08:	af00      	add	r7, sp, #0
 8014c0a:	6078      	str	r0, [r7, #4]
 8014c0c:	460b      	mov	r3, r1
 8014c0e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014c10:	78fb      	ldrb	r3, [r7, #3]
 8014c12:	461a      	mov	r2, r3
 8014c14:	2103      	movs	r1, #3
 8014c16:	6878      	ldr	r0, [r7, #4]
 8014c18:	f000 f814 	bl	8014c44 <icmp_send_response>
}
 8014c1c:	bf00      	nop
 8014c1e:	3708      	adds	r7, #8
 8014c20:	46bd      	mov	sp, r7
 8014c22:	bd80      	pop	{r7, pc}

08014c24 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014c24:	b580      	push	{r7, lr}
 8014c26:	b082      	sub	sp, #8
 8014c28:	af00      	add	r7, sp, #0
 8014c2a:	6078      	str	r0, [r7, #4]
 8014c2c:	460b      	mov	r3, r1
 8014c2e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014c30:	78fb      	ldrb	r3, [r7, #3]
 8014c32:	461a      	mov	r2, r3
 8014c34:	210b      	movs	r1, #11
 8014c36:	6878      	ldr	r0, [r7, #4]
 8014c38:	f000 f804 	bl	8014c44 <icmp_send_response>
}
 8014c3c:	bf00      	nop
 8014c3e:	3708      	adds	r7, #8
 8014c40:	46bd      	mov	sp, r7
 8014c42:	bd80      	pop	{r7, pc}

08014c44 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014c44:	b580      	push	{r7, lr}
 8014c46:	b08c      	sub	sp, #48	@ 0x30
 8014c48:	af04      	add	r7, sp, #16
 8014c4a:	6078      	str	r0, [r7, #4]
 8014c4c:	460b      	mov	r3, r1
 8014c4e:	70fb      	strb	r3, [r7, #3]
 8014c50:	4613      	mov	r3, r2
 8014c52:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014c54:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014c58:	2124      	movs	r1, #36	@ 0x24
 8014c5a:	2022      	movs	r0, #34	@ 0x22
 8014c5c:	f7f7 fcec 	bl	800c638 <pbuf_alloc>
 8014c60:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014c62:	69fb      	ldr	r3, [r7, #28]
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d056      	beq.n	8014d16 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014c68:	69fb      	ldr	r3, [r7, #28]
 8014c6a:	895b      	ldrh	r3, [r3, #10]
 8014c6c:	2b23      	cmp	r3, #35	@ 0x23
 8014c6e:	d806      	bhi.n	8014c7e <icmp_send_response+0x3a>
 8014c70:	4b2b      	ldr	r3, [pc, #172]	@ (8014d20 <icmp_send_response+0xdc>)
 8014c72:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8014c76:	492b      	ldr	r1, [pc, #172]	@ (8014d24 <icmp_send_response+0xe0>)
 8014c78:	482b      	ldr	r0, [pc, #172]	@ (8014d28 <icmp_send_response+0xe4>)
 8014c7a:	f001 fcf9 	bl	8016670 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	685b      	ldr	r3, [r3, #4]
 8014c82:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014c84:	69fb      	ldr	r3, [r7, #28]
 8014c86:	685b      	ldr	r3, [r3, #4]
 8014c88:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8014c8a:	697b      	ldr	r3, [r7, #20]
 8014c8c:	78fa      	ldrb	r2, [r7, #3]
 8014c8e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014c90:	697b      	ldr	r3, [r7, #20]
 8014c92:	78ba      	ldrb	r2, [r7, #2]
 8014c94:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8014c96:	697b      	ldr	r3, [r7, #20]
 8014c98:	2200      	movs	r2, #0
 8014c9a:	711a      	strb	r2, [r3, #4]
 8014c9c:	2200      	movs	r2, #0
 8014c9e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8014ca0:	697b      	ldr	r3, [r7, #20]
 8014ca2:	2200      	movs	r2, #0
 8014ca4:	719a      	strb	r2, [r3, #6]
 8014ca6:	2200      	movs	r2, #0
 8014ca8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8014caa:	69fb      	ldr	r3, [r7, #28]
 8014cac:	685b      	ldr	r3, [r3, #4]
 8014cae:	f103 0008 	add.w	r0, r3, #8
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	685b      	ldr	r3, [r3, #4]
 8014cb6:	221c      	movs	r2, #28
 8014cb8:	4619      	mov	r1, r3
 8014cba:	f001 fe0a 	bl	80168d2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8014cbe:	69bb      	ldr	r3, [r7, #24]
 8014cc0:	68db      	ldr	r3, [r3, #12]
 8014cc2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014cc4:	f107 030c 	add.w	r3, r7, #12
 8014cc8:	4618      	mov	r0, r3
 8014cca:	f000 f82f 	bl	8014d2c <ip4_route>
 8014cce:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014cd0:	693b      	ldr	r3, [r7, #16]
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d01b      	beq.n	8014d0e <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8014cd6:	697b      	ldr	r3, [r7, #20]
 8014cd8:	2200      	movs	r2, #0
 8014cda:	709a      	strb	r2, [r3, #2]
 8014cdc:	2200      	movs	r2, #0
 8014cde:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8014ce0:	69fb      	ldr	r3, [r7, #28]
 8014ce2:	895b      	ldrh	r3, [r3, #10]
 8014ce4:	4619      	mov	r1, r3
 8014ce6:	6978      	ldr	r0, [r7, #20]
 8014ce8:	f7f6 fb6b 	bl	800b3c2 <inet_chksum>
 8014cec:	4603      	mov	r3, r0
 8014cee:	461a      	mov	r2, r3
 8014cf0:	697b      	ldr	r3, [r7, #20]
 8014cf2:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014cf4:	f107 020c 	add.w	r2, r7, #12
 8014cf8:	693b      	ldr	r3, [r7, #16]
 8014cfa:	9302      	str	r3, [sp, #8]
 8014cfc:	2301      	movs	r3, #1
 8014cfe:	9301      	str	r3, [sp, #4]
 8014d00:	2300      	movs	r3, #0
 8014d02:	9300      	str	r3, [sp, #0]
 8014d04:	23ff      	movs	r3, #255	@ 0xff
 8014d06:	2100      	movs	r1, #0
 8014d08:	69f8      	ldr	r0, [r7, #28]
 8014d0a:	f000 f9cd 	bl	80150a8 <ip4_output_if>
  }
  pbuf_free(q);
 8014d0e:	69f8      	ldr	r0, [r7, #28]
 8014d10:	f7f7 ff76 	bl	800cc00 <pbuf_free>
 8014d14:	e000      	b.n	8014d18 <icmp_send_response+0xd4>
    return;
 8014d16:	bf00      	nop
}
 8014d18:	3720      	adds	r7, #32
 8014d1a:	46bd      	mov	sp, r7
 8014d1c:	bd80      	pop	{r7, pc}
 8014d1e:	bf00      	nop
 8014d20:	0801a660 	.word	0x0801a660
 8014d24:	0801a72c 	.word	0x0801a72c
 8014d28:	0801a6d0 	.word	0x0801a6d0

08014d2c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8014d2c:	b480      	push	{r7}
 8014d2e:	b085      	sub	sp, #20
 8014d30:	af00      	add	r7, sp, #0
 8014d32:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014d34:	4b33      	ldr	r3, [pc, #204]	@ (8014e04 <ip4_route+0xd8>)
 8014d36:	681b      	ldr	r3, [r3, #0]
 8014d38:	60fb      	str	r3, [r7, #12]
 8014d3a:	e036      	b.n	8014daa <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014d42:	f003 0301 	and.w	r3, r3, #1
 8014d46:	b2db      	uxtb	r3, r3
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d02b      	beq.n	8014da4 <ip4_route+0x78>
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014d52:	089b      	lsrs	r3, r3, #2
 8014d54:	f003 0301 	and.w	r3, r3, #1
 8014d58:	b2db      	uxtb	r3, r3
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d022      	beq.n	8014da4 <ip4_route+0x78>
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	3304      	adds	r3, #4
 8014d62:	681b      	ldr	r3, [r3, #0]
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d01d      	beq.n	8014da4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	681a      	ldr	r2, [r3, #0]
 8014d6c:	68fb      	ldr	r3, [r7, #12]
 8014d6e:	3304      	adds	r3, #4
 8014d70:	681b      	ldr	r3, [r3, #0]
 8014d72:	405a      	eors	r2, r3
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	3308      	adds	r3, #8
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	4013      	ands	r3, r2
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d101      	bne.n	8014d84 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	e038      	b.n	8014df6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014d8a:	f003 0302 	and.w	r3, r3, #2
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d108      	bne.n	8014da4 <ip4_route+0x78>
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	681a      	ldr	r2, [r3, #0]
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	330c      	adds	r3, #12
 8014d9a:	681b      	ldr	r3, [r3, #0]
 8014d9c:	429a      	cmp	r2, r3
 8014d9e:	d101      	bne.n	8014da4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	e028      	b.n	8014df6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	681b      	ldr	r3, [r3, #0]
 8014da8:	60fb      	str	r3, [r7, #12]
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d1c5      	bne.n	8014d3c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014db0:	4b15      	ldr	r3, [pc, #84]	@ (8014e08 <ip4_route+0xdc>)
 8014db2:	681b      	ldr	r3, [r3, #0]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d01a      	beq.n	8014dee <ip4_route+0xc2>
 8014db8:	4b13      	ldr	r3, [pc, #76]	@ (8014e08 <ip4_route+0xdc>)
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014dc0:	f003 0301 	and.w	r3, r3, #1
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d012      	beq.n	8014dee <ip4_route+0xc2>
 8014dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8014e08 <ip4_route+0xdc>)
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014dd0:	f003 0304 	and.w	r3, r3, #4
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d00a      	beq.n	8014dee <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8014e08 <ip4_route+0xdc>)
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	3304      	adds	r3, #4
 8014dde:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d004      	beq.n	8014dee <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	681b      	ldr	r3, [r3, #0]
 8014de8:	b2db      	uxtb	r3, r3
 8014dea:	2b7f      	cmp	r3, #127	@ 0x7f
 8014dec:	d101      	bne.n	8014df2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8014dee:	2300      	movs	r3, #0
 8014df0:	e001      	b.n	8014df6 <ip4_route+0xca>
  }

  return netif_default;
 8014df2:	4b05      	ldr	r3, [pc, #20]	@ (8014e08 <ip4_route+0xdc>)
 8014df4:	681b      	ldr	r3, [r3, #0]
}
 8014df6:	4618      	mov	r0, r3
 8014df8:	3714      	adds	r7, #20
 8014dfa:	46bd      	mov	sp, r7
 8014dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e00:	4770      	bx	lr
 8014e02:	bf00      	nop
 8014e04:	24007ef0 	.word	0x24007ef0
 8014e08:	24007ef4 	.word	0x24007ef4

08014e0c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8014e0c:	b580      	push	{r7, lr}
 8014e0e:	b082      	sub	sp, #8
 8014e10:	af00      	add	r7, sp, #0
 8014e12:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014e1a:	f003 0301 	and.w	r3, r3, #1
 8014e1e:	b2db      	uxtb	r3, r3
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d016      	beq.n	8014e52 <ip4_input_accept+0x46>
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	3304      	adds	r3, #4
 8014e28:	681b      	ldr	r3, [r3, #0]
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	d011      	beq.n	8014e52 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8014e5c <ip4_input_accept+0x50>)
 8014e30:	695a      	ldr	r2, [r3, #20]
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	3304      	adds	r3, #4
 8014e36:	681b      	ldr	r3, [r3, #0]
 8014e38:	429a      	cmp	r2, r3
 8014e3a:	d008      	beq.n	8014e4e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8014e3c:	4b07      	ldr	r3, [pc, #28]	@ (8014e5c <ip4_input_accept+0x50>)
 8014e3e:	695b      	ldr	r3, [r3, #20]
 8014e40:	6879      	ldr	r1, [r7, #4]
 8014e42:	4618      	mov	r0, r3
 8014e44:	f000 fa08 	bl	8015258 <ip4_addr_isbroadcast_u32>
 8014e48:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d001      	beq.n	8014e52 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8014e4e:	2301      	movs	r3, #1
 8014e50:	e000      	b.n	8014e54 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8014e52:	2300      	movs	r3, #0
}
 8014e54:	4618      	mov	r0, r3
 8014e56:	3708      	adds	r7, #8
 8014e58:	46bd      	mov	sp, r7
 8014e5a:	bd80      	pop	{r7, pc}
 8014e5c:	24004dec 	.word	0x24004dec

08014e60 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014e60:	b580      	push	{r7, lr}
 8014e62:	b086      	sub	sp, #24
 8014e64:	af00      	add	r7, sp, #0
 8014e66:	6078      	str	r0, [r7, #4]
 8014e68:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	685b      	ldr	r3, [r3, #4]
 8014e6e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8014e70:	697b      	ldr	r3, [r7, #20]
 8014e72:	781b      	ldrb	r3, [r3, #0]
 8014e74:	091b      	lsrs	r3, r3, #4
 8014e76:	b2db      	uxtb	r3, r3
 8014e78:	2b04      	cmp	r3, #4
 8014e7a:	d004      	beq.n	8014e86 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8014e7c:	6878      	ldr	r0, [r7, #4]
 8014e7e:	f7f7 febf 	bl	800cc00 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8014e82:	2300      	movs	r3, #0
 8014e84:	e107      	b.n	8015096 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8014e86:	697b      	ldr	r3, [r7, #20]
 8014e88:	781b      	ldrb	r3, [r3, #0]
 8014e8a:	f003 030f 	and.w	r3, r3, #15
 8014e8e:	b2db      	uxtb	r3, r3
 8014e90:	009b      	lsls	r3, r3, #2
 8014e92:	b2db      	uxtb	r3, r3
 8014e94:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8014e96:	697b      	ldr	r3, [r7, #20]
 8014e98:	885b      	ldrh	r3, [r3, #2]
 8014e9a:	b29b      	uxth	r3, r3
 8014e9c:	4618      	mov	r0, r3
 8014e9e:	f7f6 fa05 	bl	800b2ac <lwip_htons>
 8014ea2:	4603      	mov	r3, r0
 8014ea4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	891b      	ldrh	r3, [r3, #8]
 8014eaa:	89ba      	ldrh	r2, [r7, #12]
 8014eac:	429a      	cmp	r2, r3
 8014eae:	d204      	bcs.n	8014eba <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8014eb0:	89bb      	ldrh	r3, [r7, #12]
 8014eb2:	4619      	mov	r1, r3
 8014eb4:	6878      	ldr	r0, [r7, #4]
 8014eb6:	f7f7 fd1d 	bl	800c8f4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	895b      	ldrh	r3, [r3, #10]
 8014ebe:	89fa      	ldrh	r2, [r7, #14]
 8014ec0:	429a      	cmp	r2, r3
 8014ec2:	d807      	bhi.n	8014ed4 <ip4_input+0x74>
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	891b      	ldrh	r3, [r3, #8]
 8014ec8:	89ba      	ldrh	r2, [r7, #12]
 8014eca:	429a      	cmp	r2, r3
 8014ecc:	d802      	bhi.n	8014ed4 <ip4_input+0x74>
 8014ece:	89fb      	ldrh	r3, [r7, #14]
 8014ed0:	2b13      	cmp	r3, #19
 8014ed2:	d804      	bhi.n	8014ede <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8014ed4:	6878      	ldr	r0, [r7, #4]
 8014ed6:	f7f7 fe93 	bl	800cc00 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8014eda:	2300      	movs	r3, #0
 8014edc:	e0db      	b.n	8015096 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8014ede:	697b      	ldr	r3, [r7, #20]
 8014ee0:	691b      	ldr	r3, [r3, #16]
 8014ee2:	4a6f      	ldr	r2, [pc, #444]	@ (80150a0 <ip4_input+0x240>)
 8014ee4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8014ee6:	697b      	ldr	r3, [r7, #20]
 8014ee8:	68db      	ldr	r3, [r3, #12]
 8014eea:	4a6d      	ldr	r2, [pc, #436]	@ (80150a0 <ip4_input+0x240>)
 8014eec:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014eee:	4b6c      	ldr	r3, [pc, #432]	@ (80150a0 <ip4_input+0x240>)
 8014ef0:	695b      	ldr	r3, [r3, #20]
 8014ef2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014ef6:	2be0      	cmp	r3, #224	@ 0xe0
 8014ef8:	d112      	bne.n	8014f20 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8014efa:	683b      	ldr	r3, [r7, #0]
 8014efc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014f00:	f003 0301 	and.w	r3, r3, #1
 8014f04:	b2db      	uxtb	r3, r3
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d007      	beq.n	8014f1a <ip4_input+0xba>
 8014f0a:	683b      	ldr	r3, [r7, #0]
 8014f0c:	3304      	adds	r3, #4
 8014f0e:	681b      	ldr	r3, [r3, #0]
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d002      	beq.n	8014f1a <ip4_input+0xba>
      netif = inp;
 8014f14:	683b      	ldr	r3, [r7, #0]
 8014f16:	613b      	str	r3, [r7, #16]
 8014f18:	e02a      	b.n	8014f70 <ip4_input+0x110>
    } else {
      netif = NULL;
 8014f1a:	2300      	movs	r3, #0
 8014f1c:	613b      	str	r3, [r7, #16]
 8014f1e:	e027      	b.n	8014f70 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8014f20:	6838      	ldr	r0, [r7, #0]
 8014f22:	f7ff ff73 	bl	8014e0c <ip4_input_accept>
 8014f26:	4603      	mov	r3, r0
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d002      	beq.n	8014f32 <ip4_input+0xd2>
      netif = inp;
 8014f2c:	683b      	ldr	r3, [r7, #0]
 8014f2e:	613b      	str	r3, [r7, #16]
 8014f30:	e01e      	b.n	8014f70 <ip4_input+0x110>
    } else {
      netif = NULL;
 8014f32:	2300      	movs	r3, #0
 8014f34:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8014f36:	4b5a      	ldr	r3, [pc, #360]	@ (80150a0 <ip4_input+0x240>)
 8014f38:	695b      	ldr	r3, [r3, #20]
 8014f3a:	b2db      	uxtb	r3, r3
 8014f3c:	2b7f      	cmp	r3, #127	@ 0x7f
 8014f3e:	d017      	beq.n	8014f70 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8014f40:	4b58      	ldr	r3, [pc, #352]	@ (80150a4 <ip4_input+0x244>)
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	613b      	str	r3, [r7, #16]
 8014f46:	e00e      	b.n	8014f66 <ip4_input+0x106>
          if (netif == inp) {
 8014f48:	693a      	ldr	r2, [r7, #16]
 8014f4a:	683b      	ldr	r3, [r7, #0]
 8014f4c:	429a      	cmp	r2, r3
 8014f4e:	d006      	beq.n	8014f5e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8014f50:	6938      	ldr	r0, [r7, #16]
 8014f52:	f7ff ff5b 	bl	8014e0c <ip4_input_accept>
 8014f56:	4603      	mov	r3, r0
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d108      	bne.n	8014f6e <ip4_input+0x10e>
 8014f5c:	e000      	b.n	8014f60 <ip4_input+0x100>
            continue;
 8014f5e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8014f60:	693b      	ldr	r3, [r7, #16]
 8014f62:	681b      	ldr	r3, [r3, #0]
 8014f64:	613b      	str	r3, [r7, #16]
 8014f66:	693b      	ldr	r3, [r7, #16]
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	d1ed      	bne.n	8014f48 <ip4_input+0xe8>
 8014f6c:	e000      	b.n	8014f70 <ip4_input+0x110>
            break;
 8014f6e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014f70:	4b4b      	ldr	r3, [pc, #300]	@ (80150a0 <ip4_input+0x240>)
 8014f72:	691b      	ldr	r3, [r3, #16]
 8014f74:	6839      	ldr	r1, [r7, #0]
 8014f76:	4618      	mov	r0, r3
 8014f78:	f000 f96e 	bl	8015258 <ip4_addr_isbroadcast_u32>
 8014f7c:	4603      	mov	r3, r0
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d105      	bne.n	8014f8e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8014f82:	4b47      	ldr	r3, [pc, #284]	@ (80150a0 <ip4_input+0x240>)
 8014f84:	691b      	ldr	r3, [r3, #16]
 8014f86:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014f8a:	2be0      	cmp	r3, #224	@ 0xe0
 8014f8c:	d104      	bne.n	8014f98 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8014f8e:	6878      	ldr	r0, [r7, #4]
 8014f90:	f7f7 fe36 	bl	800cc00 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8014f94:	2300      	movs	r3, #0
 8014f96:	e07e      	b.n	8015096 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8014f98:	693b      	ldr	r3, [r7, #16]
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d104      	bne.n	8014fa8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8014f9e:	6878      	ldr	r0, [r7, #4]
 8014fa0:	f7f7 fe2e 	bl	800cc00 <pbuf_free>
    return ERR_OK;
 8014fa4:	2300      	movs	r3, #0
 8014fa6:	e076      	b.n	8015096 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8014fa8:	697b      	ldr	r3, [r7, #20]
 8014faa:	88db      	ldrh	r3, [r3, #6]
 8014fac:	b29b      	uxth	r3, r3
 8014fae:	461a      	mov	r2, r3
 8014fb0:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8014fb4:	4013      	ands	r3, r2
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d00b      	beq.n	8014fd2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8014fba:	6878      	ldr	r0, [r7, #4]
 8014fbc:	f000 fc92 	bl	80158e4 <ip4_reass>
 8014fc0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d101      	bne.n	8014fcc <ip4_input+0x16c>
      return ERR_OK;
 8014fc8:	2300      	movs	r3, #0
 8014fca:	e064      	b.n	8015096 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	685b      	ldr	r3, [r3, #4]
 8014fd0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8014fd2:	4a33      	ldr	r2, [pc, #204]	@ (80150a0 <ip4_input+0x240>)
 8014fd4:	693b      	ldr	r3, [r7, #16]
 8014fd6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8014fd8:	4a31      	ldr	r2, [pc, #196]	@ (80150a0 <ip4_input+0x240>)
 8014fda:	683b      	ldr	r3, [r7, #0]
 8014fdc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8014fde:	4a30      	ldr	r2, [pc, #192]	@ (80150a0 <ip4_input+0x240>)
 8014fe0:	697b      	ldr	r3, [r7, #20]
 8014fe2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8014fe4:	697b      	ldr	r3, [r7, #20]
 8014fe6:	781b      	ldrb	r3, [r3, #0]
 8014fe8:	f003 030f 	and.w	r3, r3, #15
 8014fec:	b2db      	uxtb	r3, r3
 8014fee:	009b      	lsls	r3, r3, #2
 8014ff0:	b2db      	uxtb	r3, r3
 8014ff2:	461a      	mov	r2, r3
 8014ff4:	4b2a      	ldr	r3, [pc, #168]	@ (80150a0 <ip4_input+0x240>)
 8014ff6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8014ff8:	89fb      	ldrh	r3, [r7, #14]
 8014ffa:	4619      	mov	r1, r3
 8014ffc:	6878      	ldr	r0, [r7, #4]
 8014ffe:	f7f7 fd79 	bl	800caf4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015002:	697b      	ldr	r3, [r7, #20]
 8015004:	7a5b      	ldrb	r3, [r3, #9]
 8015006:	2b11      	cmp	r3, #17
 8015008:	d006      	beq.n	8015018 <ip4_input+0x1b8>
 801500a:	2b11      	cmp	r3, #17
 801500c:	dc13      	bgt.n	8015036 <ip4_input+0x1d6>
 801500e:	2b01      	cmp	r3, #1
 8015010:	d00c      	beq.n	801502c <ip4_input+0x1cc>
 8015012:	2b06      	cmp	r3, #6
 8015014:	d005      	beq.n	8015022 <ip4_input+0x1c2>
 8015016:	e00e      	b.n	8015036 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015018:	6839      	ldr	r1, [r7, #0]
 801501a:	6878      	ldr	r0, [r7, #4]
 801501c:	f7fe fb34 	bl	8013688 <udp_input>
        break;
 8015020:	e026      	b.n	8015070 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015022:	6839      	ldr	r1, [r7, #0]
 8015024:	6878      	ldr	r0, [r7, #4]
 8015026:	f7f9 fef3 	bl	800ee10 <tcp_input>
        break;
 801502a:	e021      	b.n	8015070 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801502c:	6839      	ldr	r1, [r7, #0]
 801502e:	6878      	ldr	r0, [r7, #4]
 8015030:	f7ff fcc8 	bl	80149c4 <icmp_input>
        break;
 8015034:	e01c      	b.n	8015070 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015036:	4b1a      	ldr	r3, [pc, #104]	@ (80150a0 <ip4_input+0x240>)
 8015038:	695b      	ldr	r3, [r3, #20]
 801503a:	6939      	ldr	r1, [r7, #16]
 801503c:	4618      	mov	r0, r3
 801503e:	f000 f90b 	bl	8015258 <ip4_addr_isbroadcast_u32>
 8015042:	4603      	mov	r3, r0
 8015044:	2b00      	cmp	r3, #0
 8015046:	d10f      	bne.n	8015068 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015048:	4b15      	ldr	r3, [pc, #84]	@ (80150a0 <ip4_input+0x240>)
 801504a:	695b      	ldr	r3, [r3, #20]
 801504c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015050:	2be0      	cmp	r3, #224	@ 0xe0
 8015052:	d009      	beq.n	8015068 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015054:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015058:	4619      	mov	r1, r3
 801505a:	6878      	ldr	r0, [r7, #4]
 801505c:	f7f7 fdbd 	bl	800cbda <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015060:	2102      	movs	r1, #2
 8015062:	6878      	ldr	r0, [r7, #4]
 8015064:	f7ff fdce 	bl	8014c04 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015068:	6878      	ldr	r0, [r7, #4]
 801506a:	f7f7 fdc9 	bl	800cc00 <pbuf_free>
        break;
 801506e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015070:	4b0b      	ldr	r3, [pc, #44]	@ (80150a0 <ip4_input+0x240>)
 8015072:	2200      	movs	r2, #0
 8015074:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015076:	4b0a      	ldr	r3, [pc, #40]	@ (80150a0 <ip4_input+0x240>)
 8015078:	2200      	movs	r2, #0
 801507a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801507c:	4b08      	ldr	r3, [pc, #32]	@ (80150a0 <ip4_input+0x240>)
 801507e:	2200      	movs	r2, #0
 8015080:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015082:	4b07      	ldr	r3, [pc, #28]	@ (80150a0 <ip4_input+0x240>)
 8015084:	2200      	movs	r2, #0
 8015086:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015088:	4b05      	ldr	r3, [pc, #20]	@ (80150a0 <ip4_input+0x240>)
 801508a:	2200      	movs	r2, #0
 801508c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801508e:	4b04      	ldr	r3, [pc, #16]	@ (80150a0 <ip4_input+0x240>)
 8015090:	2200      	movs	r2, #0
 8015092:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015094:	2300      	movs	r3, #0
}
 8015096:	4618      	mov	r0, r3
 8015098:	3718      	adds	r7, #24
 801509a:	46bd      	mov	sp, r7
 801509c:	bd80      	pop	{r7, pc}
 801509e:	bf00      	nop
 80150a0:	24004dec 	.word	0x24004dec
 80150a4:	24007ef0 	.word	0x24007ef0

080150a8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80150a8:	b580      	push	{r7, lr}
 80150aa:	b08a      	sub	sp, #40	@ 0x28
 80150ac:	af04      	add	r7, sp, #16
 80150ae:	60f8      	str	r0, [r7, #12]
 80150b0:	60b9      	str	r1, [r7, #8]
 80150b2:	607a      	str	r2, [r7, #4]
 80150b4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80150b6:	68bb      	ldr	r3, [r7, #8]
 80150b8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d009      	beq.n	80150d4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80150c0:	68bb      	ldr	r3, [r7, #8]
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d003      	beq.n	80150ce <ip4_output_if+0x26>
 80150c6:	68bb      	ldr	r3, [r7, #8]
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d102      	bne.n	80150d4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80150ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80150d0:	3304      	adds	r3, #4
 80150d2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80150d4:	78fa      	ldrb	r2, [r7, #3]
 80150d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80150d8:	9302      	str	r3, [sp, #8]
 80150da:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80150de:	9301      	str	r3, [sp, #4]
 80150e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80150e4:	9300      	str	r3, [sp, #0]
 80150e6:	4613      	mov	r3, r2
 80150e8:	687a      	ldr	r2, [r7, #4]
 80150ea:	6979      	ldr	r1, [r7, #20]
 80150ec:	68f8      	ldr	r0, [r7, #12]
 80150ee:	f000 f805 	bl	80150fc <ip4_output_if_src>
 80150f2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80150f4:	4618      	mov	r0, r3
 80150f6:	3718      	adds	r7, #24
 80150f8:	46bd      	mov	sp, r7
 80150fa:	bd80      	pop	{r7, pc}

080150fc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80150fc:	b580      	push	{r7, lr}
 80150fe:	b088      	sub	sp, #32
 8015100:	af00      	add	r7, sp, #0
 8015102:	60f8      	str	r0, [r7, #12]
 8015104:	60b9      	str	r1, [r7, #8]
 8015106:	607a      	str	r2, [r7, #4]
 8015108:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	7b9b      	ldrb	r3, [r3, #14]
 801510e:	2b01      	cmp	r3, #1
 8015110:	d006      	beq.n	8015120 <ip4_output_if_src+0x24>
 8015112:	4b4b      	ldr	r3, [pc, #300]	@ (8015240 <ip4_output_if_src+0x144>)
 8015114:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8015118:	494a      	ldr	r1, [pc, #296]	@ (8015244 <ip4_output_if_src+0x148>)
 801511a:	484b      	ldr	r0, [pc, #300]	@ (8015248 <ip4_output_if_src+0x14c>)
 801511c:	f001 faa8 	bl	8016670 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	2b00      	cmp	r3, #0
 8015124:	d060      	beq.n	80151e8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015126:	2314      	movs	r3, #20
 8015128:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801512a:	2114      	movs	r1, #20
 801512c:	68f8      	ldr	r0, [r7, #12]
 801512e:	f7f7 fcd1 	bl	800cad4 <pbuf_add_header>
 8015132:	4603      	mov	r3, r0
 8015134:	2b00      	cmp	r3, #0
 8015136:	d002      	beq.n	801513e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015138:	f06f 0301 	mvn.w	r3, #1
 801513c:	e07c      	b.n	8015238 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	685b      	ldr	r3, [r3, #4]
 8015142:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015144:	68fb      	ldr	r3, [r7, #12]
 8015146:	895b      	ldrh	r3, [r3, #10]
 8015148:	2b13      	cmp	r3, #19
 801514a:	d806      	bhi.n	801515a <ip4_output_if_src+0x5e>
 801514c:	4b3c      	ldr	r3, [pc, #240]	@ (8015240 <ip4_output_if_src+0x144>)
 801514e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8015152:	493e      	ldr	r1, [pc, #248]	@ (801524c <ip4_output_if_src+0x150>)
 8015154:	483c      	ldr	r0, [pc, #240]	@ (8015248 <ip4_output_if_src+0x14c>)
 8015156:	f001 fa8b 	bl	8016670 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801515a:	69fb      	ldr	r3, [r7, #28]
 801515c:	78fa      	ldrb	r2, [r7, #3]
 801515e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015160:	69fb      	ldr	r3, [r7, #28]
 8015162:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8015166:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	681a      	ldr	r2, [r3, #0]
 801516c:	69fb      	ldr	r3, [r7, #28]
 801516e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015170:	8b7b      	ldrh	r3, [r7, #26]
 8015172:	089b      	lsrs	r3, r3, #2
 8015174:	b29b      	uxth	r3, r3
 8015176:	b2db      	uxtb	r3, r3
 8015178:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801517c:	b2da      	uxtb	r2, r3
 801517e:	69fb      	ldr	r3, [r7, #28]
 8015180:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015182:	69fb      	ldr	r3, [r7, #28]
 8015184:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8015188:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	891b      	ldrh	r3, [r3, #8]
 801518e:	4618      	mov	r0, r3
 8015190:	f7f6 f88c 	bl	800b2ac <lwip_htons>
 8015194:	4603      	mov	r3, r0
 8015196:	461a      	mov	r2, r3
 8015198:	69fb      	ldr	r3, [r7, #28]
 801519a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801519c:	69fb      	ldr	r3, [r7, #28]
 801519e:	2200      	movs	r2, #0
 80151a0:	719a      	strb	r2, [r3, #6]
 80151a2:	2200      	movs	r2, #0
 80151a4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80151a6:	4b2a      	ldr	r3, [pc, #168]	@ (8015250 <ip4_output_if_src+0x154>)
 80151a8:	881b      	ldrh	r3, [r3, #0]
 80151aa:	4618      	mov	r0, r3
 80151ac:	f7f6 f87e 	bl	800b2ac <lwip_htons>
 80151b0:	4603      	mov	r3, r0
 80151b2:	461a      	mov	r2, r3
 80151b4:	69fb      	ldr	r3, [r7, #28]
 80151b6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80151b8:	4b25      	ldr	r3, [pc, #148]	@ (8015250 <ip4_output_if_src+0x154>)
 80151ba:	881b      	ldrh	r3, [r3, #0]
 80151bc:	3301      	adds	r3, #1
 80151be:	b29a      	uxth	r2, r3
 80151c0:	4b23      	ldr	r3, [pc, #140]	@ (8015250 <ip4_output_if_src+0x154>)
 80151c2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80151c4:	68bb      	ldr	r3, [r7, #8]
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d104      	bne.n	80151d4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80151ca:	4b22      	ldr	r3, [pc, #136]	@ (8015254 <ip4_output_if_src+0x158>)
 80151cc:	681a      	ldr	r2, [r3, #0]
 80151ce:	69fb      	ldr	r3, [r7, #28]
 80151d0:	60da      	str	r2, [r3, #12]
 80151d2:	e003      	b.n	80151dc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80151d4:	68bb      	ldr	r3, [r7, #8]
 80151d6:	681a      	ldr	r2, [r3, #0]
 80151d8:	69fb      	ldr	r3, [r7, #28]
 80151da:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80151dc:	69fb      	ldr	r3, [r7, #28]
 80151de:	2200      	movs	r2, #0
 80151e0:	729a      	strb	r2, [r3, #10]
 80151e2:	2200      	movs	r2, #0
 80151e4:	72da      	strb	r2, [r3, #11]
 80151e6:	e00f      	b.n	8015208 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80151e8:	68fb      	ldr	r3, [r7, #12]
 80151ea:	895b      	ldrh	r3, [r3, #10]
 80151ec:	2b13      	cmp	r3, #19
 80151ee:	d802      	bhi.n	80151f6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80151f0:	f06f 0301 	mvn.w	r3, #1
 80151f4:	e020      	b.n	8015238 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	685b      	ldr	r3, [r3, #4]
 80151fa:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80151fc:	69fb      	ldr	r3, [r7, #28]
 80151fe:	691b      	ldr	r3, [r3, #16]
 8015200:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015202:	f107 0314 	add.w	r3, r7, #20
 8015206:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801520a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801520c:	2b00      	cmp	r3, #0
 801520e:	d00c      	beq.n	801522a <ip4_output_if_src+0x12e>
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	891a      	ldrh	r2, [r3, #8]
 8015214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015216:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015218:	429a      	cmp	r2, r3
 801521a:	d906      	bls.n	801522a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801521c:	687a      	ldr	r2, [r7, #4]
 801521e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015220:	68f8      	ldr	r0, [r7, #12]
 8015222:	f000 fd53 	bl	8015ccc <ip4_frag>
 8015226:	4603      	mov	r3, r0
 8015228:	e006      	b.n	8015238 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801522a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801522c:	695b      	ldr	r3, [r3, #20]
 801522e:	687a      	ldr	r2, [r7, #4]
 8015230:	68f9      	ldr	r1, [r7, #12]
 8015232:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015234:	4798      	blx	r3
 8015236:	4603      	mov	r3, r0
}
 8015238:	4618      	mov	r0, r3
 801523a:	3720      	adds	r7, #32
 801523c:	46bd      	mov	sp, r7
 801523e:	bd80      	pop	{r7, pc}
 8015240:	0801a758 	.word	0x0801a758
 8015244:	0801a78c 	.word	0x0801a78c
 8015248:	0801a798 	.word	0x0801a798
 801524c:	0801a7c0 	.word	0x0801a7c0
 8015250:	2400804e 	.word	0x2400804e
 8015254:	0801ac00 	.word	0x0801ac00

08015258 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015258:	b480      	push	{r7}
 801525a:	b085      	sub	sp, #20
 801525c:	af00      	add	r7, sp, #0
 801525e:	6078      	str	r0, [r7, #4]
 8015260:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	f1b3 3fff 	cmp.w	r3, #4294967295
 801526c:	d002      	beq.n	8015274 <ip4_addr_isbroadcast_u32+0x1c>
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	2b00      	cmp	r3, #0
 8015272:	d101      	bne.n	8015278 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015274:	2301      	movs	r3, #1
 8015276:	e02a      	b.n	80152ce <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015278:	683b      	ldr	r3, [r7, #0]
 801527a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801527e:	f003 0302 	and.w	r3, r3, #2
 8015282:	2b00      	cmp	r3, #0
 8015284:	d101      	bne.n	801528a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015286:	2300      	movs	r3, #0
 8015288:	e021      	b.n	80152ce <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801528a:	683b      	ldr	r3, [r7, #0]
 801528c:	3304      	adds	r3, #4
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	687a      	ldr	r2, [r7, #4]
 8015292:	429a      	cmp	r2, r3
 8015294:	d101      	bne.n	801529a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015296:	2300      	movs	r3, #0
 8015298:	e019      	b.n	80152ce <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801529a:	68fa      	ldr	r2, [r7, #12]
 801529c:	683b      	ldr	r3, [r7, #0]
 801529e:	3304      	adds	r3, #4
 80152a0:	681b      	ldr	r3, [r3, #0]
 80152a2:	405a      	eors	r2, r3
 80152a4:	683b      	ldr	r3, [r7, #0]
 80152a6:	3308      	adds	r3, #8
 80152a8:	681b      	ldr	r3, [r3, #0]
 80152aa:	4013      	ands	r3, r2
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d10d      	bne.n	80152cc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80152b0:	683b      	ldr	r3, [r7, #0]
 80152b2:	3308      	adds	r3, #8
 80152b4:	681b      	ldr	r3, [r3, #0]
 80152b6:	43da      	mvns	r2, r3
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80152bc:	683b      	ldr	r3, [r7, #0]
 80152be:	3308      	adds	r3, #8
 80152c0:	681b      	ldr	r3, [r3, #0]
 80152c2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80152c4:	429a      	cmp	r2, r3
 80152c6:	d101      	bne.n	80152cc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80152c8:	2301      	movs	r3, #1
 80152ca:	e000      	b.n	80152ce <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80152cc:	2300      	movs	r3, #0
  }
}
 80152ce:	4618      	mov	r0, r3
 80152d0:	3714      	adds	r7, #20
 80152d2:	46bd      	mov	sp, r7
 80152d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152d8:	4770      	bx	lr
	...

080152dc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80152dc:	b580      	push	{r7, lr}
 80152de:	b084      	sub	sp, #16
 80152e0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80152e2:	2300      	movs	r3, #0
 80152e4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80152e6:	4b12      	ldr	r3, [pc, #72]	@ (8015330 <ip_reass_tmr+0x54>)
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80152ec:	e018      	b.n	8015320 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80152ee:	68fb      	ldr	r3, [r7, #12]
 80152f0:	7fdb      	ldrb	r3, [r3, #31]
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d00b      	beq.n	801530e <ip_reass_tmr+0x32>
      r->timer--;
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	7fdb      	ldrb	r3, [r3, #31]
 80152fa:	3b01      	subs	r3, #1
 80152fc:	b2da      	uxtb	r2, r3
 80152fe:	68fb      	ldr	r3, [r7, #12]
 8015300:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015302:	68fb      	ldr	r3, [r7, #12]
 8015304:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	60fb      	str	r3, [r7, #12]
 801530c:	e008      	b.n	8015320 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015318:	68b9      	ldr	r1, [r7, #8]
 801531a:	6878      	ldr	r0, [r7, #4]
 801531c:	f000 f80a 	bl	8015334 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015320:	68fb      	ldr	r3, [r7, #12]
 8015322:	2b00      	cmp	r3, #0
 8015324:	d1e3      	bne.n	80152ee <ip_reass_tmr+0x12>
    }
  }
}
 8015326:	bf00      	nop
 8015328:	bf00      	nop
 801532a:	3710      	adds	r7, #16
 801532c:	46bd      	mov	sp, r7
 801532e:	bd80      	pop	{r7, pc}
 8015330:	24008050 	.word	0x24008050

08015334 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015334:	b580      	push	{r7, lr}
 8015336:	b088      	sub	sp, #32
 8015338:	af00      	add	r7, sp, #0
 801533a:	6078      	str	r0, [r7, #4]
 801533c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801533e:	2300      	movs	r3, #0
 8015340:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015342:	683a      	ldr	r2, [r7, #0]
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	429a      	cmp	r2, r3
 8015348:	d105      	bne.n	8015356 <ip_reass_free_complete_datagram+0x22>
 801534a:	4b45      	ldr	r3, [pc, #276]	@ (8015460 <ip_reass_free_complete_datagram+0x12c>)
 801534c:	22ab      	movs	r2, #171	@ 0xab
 801534e:	4945      	ldr	r1, [pc, #276]	@ (8015464 <ip_reass_free_complete_datagram+0x130>)
 8015350:	4845      	ldr	r0, [pc, #276]	@ (8015468 <ip_reass_free_complete_datagram+0x134>)
 8015352:	f001 f98d 	bl	8016670 <iprintf>
  if (prev != NULL) {
 8015356:	683b      	ldr	r3, [r7, #0]
 8015358:	2b00      	cmp	r3, #0
 801535a:	d00a      	beq.n	8015372 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801535c:	683b      	ldr	r3, [r7, #0]
 801535e:	681b      	ldr	r3, [r3, #0]
 8015360:	687a      	ldr	r2, [r7, #4]
 8015362:	429a      	cmp	r2, r3
 8015364:	d005      	beq.n	8015372 <ip_reass_free_complete_datagram+0x3e>
 8015366:	4b3e      	ldr	r3, [pc, #248]	@ (8015460 <ip_reass_free_complete_datagram+0x12c>)
 8015368:	22ad      	movs	r2, #173	@ 0xad
 801536a:	4940      	ldr	r1, [pc, #256]	@ (801546c <ip_reass_free_complete_datagram+0x138>)
 801536c:	483e      	ldr	r0, [pc, #248]	@ (8015468 <ip_reass_free_complete_datagram+0x134>)
 801536e:	f001 f97f 	bl	8016670 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	685b      	ldr	r3, [r3, #4]
 8015376:	685b      	ldr	r3, [r3, #4]
 8015378:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801537a:	697b      	ldr	r3, [r7, #20]
 801537c:	889b      	ldrh	r3, [r3, #4]
 801537e:	b29b      	uxth	r3, r3
 8015380:	2b00      	cmp	r3, #0
 8015382:	d12a      	bne.n	80153da <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	685b      	ldr	r3, [r3, #4]
 8015388:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801538a:	697b      	ldr	r3, [r7, #20]
 801538c:	681a      	ldr	r2, [r3, #0]
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015392:	69bb      	ldr	r3, [r7, #24]
 8015394:	6858      	ldr	r0, [r3, #4]
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	3308      	adds	r3, #8
 801539a:	2214      	movs	r2, #20
 801539c:	4619      	mov	r1, r3
 801539e:	f001 fa98 	bl	80168d2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80153a2:	2101      	movs	r1, #1
 80153a4:	69b8      	ldr	r0, [r7, #24]
 80153a6:	f7ff fc3d 	bl	8014c24 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80153aa:	69b8      	ldr	r0, [r7, #24]
 80153ac:	f7f7 fcb6 	bl	800cd1c <pbuf_clen>
 80153b0:	4603      	mov	r3, r0
 80153b2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80153b4:	8bfa      	ldrh	r2, [r7, #30]
 80153b6:	8a7b      	ldrh	r3, [r7, #18]
 80153b8:	4413      	add	r3, r2
 80153ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80153be:	db05      	blt.n	80153cc <ip_reass_free_complete_datagram+0x98>
 80153c0:	4b27      	ldr	r3, [pc, #156]	@ (8015460 <ip_reass_free_complete_datagram+0x12c>)
 80153c2:	22bc      	movs	r2, #188	@ 0xbc
 80153c4:	492a      	ldr	r1, [pc, #168]	@ (8015470 <ip_reass_free_complete_datagram+0x13c>)
 80153c6:	4828      	ldr	r0, [pc, #160]	@ (8015468 <ip_reass_free_complete_datagram+0x134>)
 80153c8:	f001 f952 	bl	8016670 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80153cc:	8bfa      	ldrh	r2, [r7, #30]
 80153ce:	8a7b      	ldrh	r3, [r7, #18]
 80153d0:	4413      	add	r3, r2
 80153d2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80153d4:	69b8      	ldr	r0, [r7, #24]
 80153d6:	f7f7 fc13 	bl	800cc00 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	685b      	ldr	r3, [r3, #4]
 80153de:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80153e0:	e01f      	b.n	8015422 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80153e2:	69bb      	ldr	r3, [r7, #24]
 80153e4:	685b      	ldr	r3, [r3, #4]
 80153e6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80153e8:	69bb      	ldr	r3, [r7, #24]
 80153ea:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80153ec:	697b      	ldr	r3, [r7, #20]
 80153ee:	681b      	ldr	r3, [r3, #0]
 80153f0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80153f2:	68f8      	ldr	r0, [r7, #12]
 80153f4:	f7f7 fc92 	bl	800cd1c <pbuf_clen>
 80153f8:	4603      	mov	r3, r0
 80153fa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80153fc:	8bfa      	ldrh	r2, [r7, #30]
 80153fe:	8a7b      	ldrh	r3, [r7, #18]
 8015400:	4413      	add	r3, r2
 8015402:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015406:	db05      	blt.n	8015414 <ip_reass_free_complete_datagram+0xe0>
 8015408:	4b15      	ldr	r3, [pc, #84]	@ (8015460 <ip_reass_free_complete_datagram+0x12c>)
 801540a:	22cc      	movs	r2, #204	@ 0xcc
 801540c:	4918      	ldr	r1, [pc, #96]	@ (8015470 <ip_reass_free_complete_datagram+0x13c>)
 801540e:	4816      	ldr	r0, [pc, #88]	@ (8015468 <ip_reass_free_complete_datagram+0x134>)
 8015410:	f001 f92e 	bl	8016670 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015414:	8bfa      	ldrh	r2, [r7, #30]
 8015416:	8a7b      	ldrh	r3, [r7, #18]
 8015418:	4413      	add	r3, r2
 801541a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801541c:	68f8      	ldr	r0, [r7, #12]
 801541e:	f7f7 fbef 	bl	800cc00 <pbuf_free>
  while (p != NULL) {
 8015422:	69bb      	ldr	r3, [r7, #24]
 8015424:	2b00      	cmp	r3, #0
 8015426:	d1dc      	bne.n	80153e2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015428:	6839      	ldr	r1, [r7, #0]
 801542a:	6878      	ldr	r0, [r7, #4]
 801542c:	f000 f8c2 	bl	80155b4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015430:	4b10      	ldr	r3, [pc, #64]	@ (8015474 <ip_reass_free_complete_datagram+0x140>)
 8015432:	881b      	ldrh	r3, [r3, #0]
 8015434:	8bfa      	ldrh	r2, [r7, #30]
 8015436:	429a      	cmp	r2, r3
 8015438:	d905      	bls.n	8015446 <ip_reass_free_complete_datagram+0x112>
 801543a:	4b09      	ldr	r3, [pc, #36]	@ (8015460 <ip_reass_free_complete_datagram+0x12c>)
 801543c:	22d2      	movs	r2, #210	@ 0xd2
 801543e:	490e      	ldr	r1, [pc, #56]	@ (8015478 <ip_reass_free_complete_datagram+0x144>)
 8015440:	4809      	ldr	r0, [pc, #36]	@ (8015468 <ip_reass_free_complete_datagram+0x134>)
 8015442:	f001 f915 	bl	8016670 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015446:	4b0b      	ldr	r3, [pc, #44]	@ (8015474 <ip_reass_free_complete_datagram+0x140>)
 8015448:	881a      	ldrh	r2, [r3, #0]
 801544a:	8bfb      	ldrh	r3, [r7, #30]
 801544c:	1ad3      	subs	r3, r2, r3
 801544e:	b29a      	uxth	r2, r3
 8015450:	4b08      	ldr	r3, [pc, #32]	@ (8015474 <ip_reass_free_complete_datagram+0x140>)
 8015452:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015454:	8bfb      	ldrh	r3, [r7, #30]
}
 8015456:	4618      	mov	r0, r3
 8015458:	3720      	adds	r7, #32
 801545a:	46bd      	mov	sp, r7
 801545c:	bd80      	pop	{r7, pc}
 801545e:	bf00      	nop
 8015460:	0801a7f0 	.word	0x0801a7f0
 8015464:	0801a82c 	.word	0x0801a82c
 8015468:	0801a838 	.word	0x0801a838
 801546c:	0801a860 	.word	0x0801a860
 8015470:	0801a874 	.word	0x0801a874
 8015474:	24008054 	.word	0x24008054
 8015478:	0801a894 	.word	0x0801a894

0801547c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801547c:	b580      	push	{r7, lr}
 801547e:	b08a      	sub	sp, #40	@ 0x28
 8015480:	af00      	add	r7, sp, #0
 8015482:	6078      	str	r0, [r7, #4]
 8015484:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015486:	2300      	movs	r3, #0
 8015488:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801548a:	2300      	movs	r3, #0
 801548c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801548e:	2300      	movs	r3, #0
 8015490:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015492:	2300      	movs	r3, #0
 8015494:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015496:	2300      	movs	r3, #0
 8015498:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801549a:	4b28      	ldr	r3, [pc, #160]	@ (801553c <ip_reass_remove_oldest_datagram+0xc0>)
 801549c:	681b      	ldr	r3, [r3, #0]
 801549e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80154a0:	e030      	b.n	8015504 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80154a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154a4:	695a      	ldr	r2, [r3, #20]
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	68db      	ldr	r3, [r3, #12]
 80154aa:	429a      	cmp	r2, r3
 80154ac:	d10c      	bne.n	80154c8 <ip_reass_remove_oldest_datagram+0x4c>
 80154ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154b0:	699a      	ldr	r2, [r3, #24]
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	691b      	ldr	r3, [r3, #16]
 80154b6:	429a      	cmp	r2, r3
 80154b8:	d106      	bne.n	80154c8 <ip_reass_remove_oldest_datagram+0x4c>
 80154ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154bc:	899a      	ldrh	r2, [r3, #12]
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	889b      	ldrh	r3, [r3, #4]
 80154c2:	b29b      	uxth	r3, r3
 80154c4:	429a      	cmp	r2, r3
 80154c6:	d014      	beq.n	80154f2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80154c8:	693b      	ldr	r3, [r7, #16]
 80154ca:	3301      	adds	r3, #1
 80154cc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80154ce:	6a3b      	ldr	r3, [r7, #32]
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d104      	bne.n	80154de <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80154d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154d6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80154d8:	69fb      	ldr	r3, [r7, #28]
 80154da:	61bb      	str	r3, [r7, #24]
 80154dc:	e009      	b.n	80154f2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80154de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154e0:	7fda      	ldrb	r2, [r3, #31]
 80154e2:	6a3b      	ldr	r3, [r7, #32]
 80154e4:	7fdb      	ldrb	r3, [r3, #31]
 80154e6:	429a      	cmp	r2, r3
 80154e8:	d803      	bhi.n	80154f2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80154ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154ec:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80154ee:	69fb      	ldr	r3, [r7, #28]
 80154f0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80154f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154f4:	681b      	ldr	r3, [r3, #0]
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d001      	beq.n	80154fe <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80154fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154fc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80154fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015500:	681b      	ldr	r3, [r3, #0]
 8015502:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8015504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015506:	2b00      	cmp	r3, #0
 8015508:	d1cb      	bne.n	80154a2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801550a:	6a3b      	ldr	r3, [r7, #32]
 801550c:	2b00      	cmp	r3, #0
 801550e:	d008      	beq.n	8015522 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015510:	69b9      	ldr	r1, [r7, #24]
 8015512:	6a38      	ldr	r0, [r7, #32]
 8015514:	f7ff ff0e 	bl	8015334 <ip_reass_free_complete_datagram>
 8015518:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801551a:	697a      	ldr	r2, [r7, #20]
 801551c:	68fb      	ldr	r3, [r7, #12]
 801551e:	4413      	add	r3, r2
 8015520:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015522:	697a      	ldr	r2, [r7, #20]
 8015524:	683b      	ldr	r3, [r7, #0]
 8015526:	429a      	cmp	r2, r3
 8015528:	da02      	bge.n	8015530 <ip_reass_remove_oldest_datagram+0xb4>
 801552a:	693b      	ldr	r3, [r7, #16]
 801552c:	2b01      	cmp	r3, #1
 801552e:	dcac      	bgt.n	801548a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015530:	697b      	ldr	r3, [r7, #20]
}
 8015532:	4618      	mov	r0, r3
 8015534:	3728      	adds	r7, #40	@ 0x28
 8015536:	46bd      	mov	sp, r7
 8015538:	bd80      	pop	{r7, pc}
 801553a:	bf00      	nop
 801553c:	24008050 	.word	0x24008050

08015540 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015540:	b580      	push	{r7, lr}
 8015542:	b084      	sub	sp, #16
 8015544:	af00      	add	r7, sp, #0
 8015546:	6078      	str	r0, [r7, #4]
 8015548:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801554a:	2004      	movs	r0, #4
 801554c:	f7f6 fc3e 	bl	800bdcc <memp_malloc>
 8015550:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015552:	68fb      	ldr	r3, [r7, #12]
 8015554:	2b00      	cmp	r3, #0
 8015556:	d110      	bne.n	801557a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015558:	6839      	ldr	r1, [r7, #0]
 801555a:	6878      	ldr	r0, [r7, #4]
 801555c:	f7ff ff8e 	bl	801547c <ip_reass_remove_oldest_datagram>
 8015560:	4602      	mov	r2, r0
 8015562:	683b      	ldr	r3, [r7, #0]
 8015564:	4293      	cmp	r3, r2
 8015566:	dc03      	bgt.n	8015570 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015568:	2004      	movs	r0, #4
 801556a:	f7f6 fc2f 	bl	800bdcc <memp_malloc>
 801556e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015570:	68fb      	ldr	r3, [r7, #12]
 8015572:	2b00      	cmp	r3, #0
 8015574:	d101      	bne.n	801557a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015576:	2300      	movs	r3, #0
 8015578:	e016      	b.n	80155a8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801557a:	2220      	movs	r2, #32
 801557c:	2100      	movs	r1, #0
 801557e:	68f8      	ldr	r0, [r7, #12]
 8015580:	f001 f8db 	bl	801673a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	220f      	movs	r2, #15
 8015588:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801558a:	4b09      	ldr	r3, [pc, #36]	@ (80155b0 <ip_reass_enqueue_new_datagram+0x70>)
 801558c:	681a      	ldr	r2, [r3, #0]
 801558e:	68fb      	ldr	r3, [r7, #12]
 8015590:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015592:	4a07      	ldr	r2, [pc, #28]	@ (80155b0 <ip_reass_enqueue_new_datagram+0x70>)
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015598:	68fb      	ldr	r3, [r7, #12]
 801559a:	3308      	adds	r3, #8
 801559c:	2214      	movs	r2, #20
 801559e:	6879      	ldr	r1, [r7, #4]
 80155a0:	4618      	mov	r0, r3
 80155a2:	f001 f996 	bl	80168d2 <memcpy>
  return ipr;
 80155a6:	68fb      	ldr	r3, [r7, #12]
}
 80155a8:	4618      	mov	r0, r3
 80155aa:	3710      	adds	r7, #16
 80155ac:	46bd      	mov	sp, r7
 80155ae:	bd80      	pop	{r7, pc}
 80155b0:	24008050 	.word	0x24008050

080155b4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80155b4:	b580      	push	{r7, lr}
 80155b6:	b082      	sub	sp, #8
 80155b8:	af00      	add	r7, sp, #0
 80155ba:	6078      	str	r0, [r7, #4]
 80155bc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80155be:	4b10      	ldr	r3, [pc, #64]	@ (8015600 <ip_reass_dequeue_datagram+0x4c>)
 80155c0:	681b      	ldr	r3, [r3, #0]
 80155c2:	687a      	ldr	r2, [r7, #4]
 80155c4:	429a      	cmp	r2, r3
 80155c6:	d104      	bne.n	80155d2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	681b      	ldr	r3, [r3, #0]
 80155cc:	4a0c      	ldr	r2, [pc, #48]	@ (8015600 <ip_reass_dequeue_datagram+0x4c>)
 80155ce:	6013      	str	r3, [r2, #0]
 80155d0:	e00d      	b.n	80155ee <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80155d2:	683b      	ldr	r3, [r7, #0]
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d106      	bne.n	80155e6 <ip_reass_dequeue_datagram+0x32>
 80155d8:	4b0a      	ldr	r3, [pc, #40]	@ (8015604 <ip_reass_dequeue_datagram+0x50>)
 80155da:	f240 1245 	movw	r2, #325	@ 0x145
 80155de:	490a      	ldr	r1, [pc, #40]	@ (8015608 <ip_reass_dequeue_datagram+0x54>)
 80155e0:	480a      	ldr	r0, [pc, #40]	@ (801560c <ip_reass_dequeue_datagram+0x58>)
 80155e2:	f001 f845 	bl	8016670 <iprintf>
    prev->next = ipr->next;
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	681a      	ldr	r2, [r3, #0]
 80155ea:	683b      	ldr	r3, [r7, #0]
 80155ec:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80155ee:	6879      	ldr	r1, [r7, #4]
 80155f0:	2004      	movs	r0, #4
 80155f2:	f7f6 fc61 	bl	800beb8 <memp_free>
}
 80155f6:	bf00      	nop
 80155f8:	3708      	adds	r7, #8
 80155fa:	46bd      	mov	sp, r7
 80155fc:	bd80      	pop	{r7, pc}
 80155fe:	bf00      	nop
 8015600:	24008050 	.word	0x24008050
 8015604:	0801a7f0 	.word	0x0801a7f0
 8015608:	0801a8b8 	.word	0x0801a8b8
 801560c:	0801a838 	.word	0x0801a838

08015610 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015610:	b580      	push	{r7, lr}
 8015612:	b08c      	sub	sp, #48	@ 0x30
 8015614:	af00      	add	r7, sp, #0
 8015616:	60f8      	str	r0, [r7, #12]
 8015618:	60b9      	str	r1, [r7, #8]
 801561a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801561c:	2300      	movs	r3, #0
 801561e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015620:	2301      	movs	r3, #1
 8015622:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015624:	68bb      	ldr	r3, [r7, #8]
 8015626:	685b      	ldr	r3, [r3, #4]
 8015628:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801562a:	69fb      	ldr	r3, [r7, #28]
 801562c:	885b      	ldrh	r3, [r3, #2]
 801562e:	b29b      	uxth	r3, r3
 8015630:	4618      	mov	r0, r3
 8015632:	f7f5 fe3b 	bl	800b2ac <lwip_htons>
 8015636:	4603      	mov	r3, r0
 8015638:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801563a:	69fb      	ldr	r3, [r7, #28]
 801563c:	781b      	ldrb	r3, [r3, #0]
 801563e:	f003 030f 	and.w	r3, r3, #15
 8015642:	b2db      	uxtb	r3, r3
 8015644:	009b      	lsls	r3, r3, #2
 8015646:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015648:	7e7b      	ldrb	r3, [r7, #25]
 801564a:	b29b      	uxth	r3, r3
 801564c:	8b7a      	ldrh	r2, [r7, #26]
 801564e:	429a      	cmp	r2, r3
 8015650:	d202      	bcs.n	8015658 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015652:	f04f 33ff 	mov.w	r3, #4294967295
 8015656:	e135      	b.n	80158c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015658:	7e7b      	ldrb	r3, [r7, #25]
 801565a:	b29b      	uxth	r3, r3
 801565c:	8b7a      	ldrh	r2, [r7, #26]
 801565e:	1ad3      	subs	r3, r2, r3
 8015660:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015662:	69fb      	ldr	r3, [r7, #28]
 8015664:	88db      	ldrh	r3, [r3, #6]
 8015666:	b29b      	uxth	r3, r3
 8015668:	4618      	mov	r0, r3
 801566a:	f7f5 fe1f 	bl	800b2ac <lwip_htons>
 801566e:	4603      	mov	r3, r0
 8015670:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015674:	b29b      	uxth	r3, r3
 8015676:	00db      	lsls	r3, r3, #3
 8015678:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801567a:	68bb      	ldr	r3, [r7, #8]
 801567c:	685b      	ldr	r3, [r3, #4]
 801567e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8015680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015682:	2200      	movs	r2, #0
 8015684:	701a      	strb	r2, [r3, #0]
 8015686:	2200      	movs	r2, #0
 8015688:	705a      	strb	r2, [r3, #1]
 801568a:	2200      	movs	r2, #0
 801568c:	709a      	strb	r2, [r3, #2]
 801568e:	2200      	movs	r2, #0
 8015690:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015694:	8afa      	ldrh	r2, [r7, #22]
 8015696:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015698:	8afa      	ldrh	r2, [r7, #22]
 801569a:	8b7b      	ldrh	r3, [r7, #26]
 801569c:	4413      	add	r3, r2
 801569e:	b29a      	uxth	r2, r3
 80156a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156a2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80156a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156a6:	88db      	ldrh	r3, [r3, #6]
 80156a8:	b29b      	uxth	r3, r3
 80156aa:	8afa      	ldrh	r2, [r7, #22]
 80156ac:	429a      	cmp	r2, r3
 80156ae:	d902      	bls.n	80156b6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80156b0:	f04f 33ff 	mov.w	r3, #4294967295
 80156b4:	e106      	b.n	80158c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80156b6:	68fb      	ldr	r3, [r7, #12]
 80156b8:	685b      	ldr	r3, [r3, #4]
 80156ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80156bc:	e068      	b.n	8015790 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80156be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156c0:	685b      	ldr	r3, [r3, #4]
 80156c2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80156c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156c6:	889b      	ldrh	r3, [r3, #4]
 80156c8:	b29a      	uxth	r2, r3
 80156ca:	693b      	ldr	r3, [r7, #16]
 80156cc:	889b      	ldrh	r3, [r3, #4]
 80156ce:	b29b      	uxth	r3, r3
 80156d0:	429a      	cmp	r2, r3
 80156d2:	d235      	bcs.n	8015740 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80156d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80156d8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80156da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d020      	beq.n	8015722 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80156e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156e2:	889b      	ldrh	r3, [r3, #4]
 80156e4:	b29a      	uxth	r2, r3
 80156e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156e8:	88db      	ldrh	r3, [r3, #6]
 80156ea:	b29b      	uxth	r3, r3
 80156ec:	429a      	cmp	r2, r3
 80156ee:	d307      	bcc.n	8015700 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80156f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156f2:	88db      	ldrh	r3, [r3, #6]
 80156f4:	b29a      	uxth	r2, r3
 80156f6:	693b      	ldr	r3, [r7, #16]
 80156f8:	889b      	ldrh	r3, [r3, #4]
 80156fa:	b29b      	uxth	r3, r3
 80156fc:	429a      	cmp	r2, r3
 80156fe:	d902      	bls.n	8015706 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015700:	f04f 33ff 	mov.w	r3, #4294967295
 8015704:	e0de      	b.n	80158c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015708:	68ba      	ldr	r2, [r7, #8]
 801570a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801570c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801570e:	88db      	ldrh	r3, [r3, #6]
 8015710:	b29a      	uxth	r2, r3
 8015712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015714:	889b      	ldrh	r3, [r3, #4]
 8015716:	b29b      	uxth	r3, r3
 8015718:	429a      	cmp	r2, r3
 801571a:	d03d      	beq.n	8015798 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801571c:	2300      	movs	r3, #0
 801571e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015720:	e03a      	b.n	8015798 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015724:	88db      	ldrh	r3, [r3, #6]
 8015726:	b29a      	uxth	r2, r3
 8015728:	693b      	ldr	r3, [r7, #16]
 801572a:	889b      	ldrh	r3, [r3, #4]
 801572c:	b29b      	uxth	r3, r3
 801572e:	429a      	cmp	r2, r3
 8015730:	d902      	bls.n	8015738 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015732:	f04f 33ff 	mov.w	r3, #4294967295
 8015736:	e0c5      	b.n	80158c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015738:	68fb      	ldr	r3, [r7, #12]
 801573a:	68ba      	ldr	r2, [r7, #8]
 801573c:	605a      	str	r2, [r3, #4]
      break;
 801573e:	e02b      	b.n	8015798 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015742:	889b      	ldrh	r3, [r3, #4]
 8015744:	b29a      	uxth	r2, r3
 8015746:	693b      	ldr	r3, [r7, #16]
 8015748:	889b      	ldrh	r3, [r3, #4]
 801574a:	b29b      	uxth	r3, r3
 801574c:	429a      	cmp	r2, r3
 801574e:	d102      	bne.n	8015756 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015750:	f04f 33ff 	mov.w	r3, #4294967295
 8015754:	e0b6      	b.n	80158c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015758:	889b      	ldrh	r3, [r3, #4]
 801575a:	b29a      	uxth	r2, r3
 801575c:	693b      	ldr	r3, [r7, #16]
 801575e:	88db      	ldrh	r3, [r3, #6]
 8015760:	b29b      	uxth	r3, r3
 8015762:	429a      	cmp	r2, r3
 8015764:	d202      	bcs.n	801576c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015766:	f04f 33ff 	mov.w	r3, #4294967295
 801576a:	e0ab      	b.n	80158c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801576c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801576e:	2b00      	cmp	r3, #0
 8015770:	d009      	beq.n	8015786 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015774:	88db      	ldrh	r3, [r3, #6]
 8015776:	b29a      	uxth	r2, r3
 8015778:	693b      	ldr	r3, [r7, #16]
 801577a:	889b      	ldrh	r3, [r3, #4]
 801577c:	b29b      	uxth	r3, r3
 801577e:	429a      	cmp	r2, r3
 8015780:	d001      	beq.n	8015786 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015782:	2300      	movs	r3, #0
 8015784:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015786:	693b      	ldr	r3, [r7, #16]
 8015788:	681b      	ldr	r3, [r3, #0]
 801578a:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801578c:	693b      	ldr	r3, [r7, #16]
 801578e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8015790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015792:	2b00      	cmp	r3, #0
 8015794:	d193      	bne.n	80156be <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015796:	e000      	b.n	801579a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015798:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801579a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801579c:	2b00      	cmp	r3, #0
 801579e:	d12d      	bne.n	80157fc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80157a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d01c      	beq.n	80157e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80157a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157a8:	88db      	ldrh	r3, [r3, #6]
 80157aa:	b29a      	uxth	r2, r3
 80157ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157ae:	889b      	ldrh	r3, [r3, #4]
 80157b0:	b29b      	uxth	r3, r3
 80157b2:	429a      	cmp	r2, r3
 80157b4:	d906      	bls.n	80157c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80157b6:	4b45      	ldr	r3, [pc, #276]	@ (80158cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80157b8:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 80157bc:	4944      	ldr	r1, [pc, #272]	@ (80158d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80157be:	4845      	ldr	r0, [pc, #276]	@ (80158d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80157c0:	f000 ff56 	bl	8016670 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80157c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157c6:	68ba      	ldr	r2, [r7, #8]
 80157c8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80157ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157cc:	88db      	ldrh	r3, [r3, #6]
 80157ce:	b29a      	uxth	r2, r3
 80157d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157d2:	889b      	ldrh	r3, [r3, #4]
 80157d4:	b29b      	uxth	r3, r3
 80157d6:	429a      	cmp	r2, r3
 80157d8:	d010      	beq.n	80157fc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80157da:	2300      	movs	r3, #0
 80157dc:	623b      	str	r3, [r7, #32]
 80157de:	e00d      	b.n	80157fc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	685b      	ldr	r3, [r3, #4]
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d006      	beq.n	80157f6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80157e8:	4b38      	ldr	r3, [pc, #224]	@ (80158cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80157ea:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 80157ee:	493a      	ldr	r1, [pc, #232]	@ (80158d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80157f0:	4838      	ldr	r0, [pc, #224]	@ (80158d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80157f2:	f000 ff3d 	bl	8016670 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	68ba      	ldr	r2, [r7, #8]
 80157fa:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d105      	bne.n	801580e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	7f9b      	ldrb	r3, [r3, #30]
 8015806:	f003 0301 	and.w	r3, r3, #1
 801580a:	2b00      	cmp	r3, #0
 801580c:	d059      	beq.n	80158c2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801580e:	6a3b      	ldr	r3, [r7, #32]
 8015810:	2b00      	cmp	r3, #0
 8015812:	d04f      	beq.n	80158b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	685b      	ldr	r3, [r3, #4]
 8015818:	2b00      	cmp	r3, #0
 801581a:	d006      	beq.n	801582a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801581c:	68fb      	ldr	r3, [r7, #12]
 801581e:	685b      	ldr	r3, [r3, #4]
 8015820:	685b      	ldr	r3, [r3, #4]
 8015822:	889b      	ldrh	r3, [r3, #4]
 8015824:	b29b      	uxth	r3, r3
 8015826:	2b00      	cmp	r3, #0
 8015828:	d002      	beq.n	8015830 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801582a:	2300      	movs	r3, #0
 801582c:	623b      	str	r3, [r7, #32]
 801582e:	e041      	b.n	80158b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015832:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8015834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015836:	681b      	ldr	r3, [r3, #0]
 8015838:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801583a:	e012      	b.n	8015862 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801583c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801583e:	685b      	ldr	r3, [r3, #4]
 8015840:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8015842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015844:	88db      	ldrh	r3, [r3, #6]
 8015846:	b29a      	uxth	r2, r3
 8015848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801584a:	889b      	ldrh	r3, [r3, #4]
 801584c:	b29b      	uxth	r3, r3
 801584e:	429a      	cmp	r2, r3
 8015850:	d002      	beq.n	8015858 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015852:	2300      	movs	r3, #0
 8015854:	623b      	str	r3, [r7, #32]
            break;
 8015856:	e007      	b.n	8015868 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801585a:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801585c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801585e:	681b      	ldr	r3, [r3, #0]
 8015860:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8015862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015864:	2b00      	cmp	r3, #0
 8015866:	d1e9      	bne.n	801583c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015868:	6a3b      	ldr	r3, [r7, #32]
 801586a:	2b00      	cmp	r3, #0
 801586c:	d022      	beq.n	80158b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	685b      	ldr	r3, [r3, #4]
 8015872:	2b00      	cmp	r3, #0
 8015874:	d106      	bne.n	8015884 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015876:	4b15      	ldr	r3, [pc, #84]	@ (80158cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015878:	f240 12df 	movw	r2, #479	@ 0x1df
 801587c:	4917      	ldr	r1, [pc, #92]	@ (80158dc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801587e:	4815      	ldr	r0, [pc, #84]	@ (80158d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015880:	f000 fef6 	bl	8016670 <iprintf>
          LWIP_ASSERT("sanity check",
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	685b      	ldr	r3, [r3, #4]
 8015888:	685b      	ldr	r3, [r3, #4]
 801588a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801588c:	429a      	cmp	r2, r3
 801588e:	d106      	bne.n	801589e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015890:	4b0e      	ldr	r3, [pc, #56]	@ (80158cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015892:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8015896:	4911      	ldr	r1, [pc, #68]	@ (80158dc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015898:	480e      	ldr	r0, [pc, #56]	@ (80158d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801589a:	f000 fee9 	bl	8016670 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801589e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158a0:	681b      	ldr	r3, [r3, #0]
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d006      	beq.n	80158b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80158a6:	4b09      	ldr	r3, [pc, #36]	@ (80158cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80158a8:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80158ac:	490c      	ldr	r1, [pc, #48]	@ (80158e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80158ae:	4809      	ldr	r0, [pc, #36]	@ (80158d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80158b0:	f000 fede 	bl	8016670 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80158b4:	6a3b      	ldr	r3, [r7, #32]
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	bf14      	ite	ne
 80158ba:	2301      	movne	r3, #1
 80158bc:	2300      	moveq	r3, #0
 80158be:	b2db      	uxtb	r3, r3
 80158c0:	e000      	b.n	80158c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80158c2:	2300      	movs	r3, #0
}
 80158c4:	4618      	mov	r0, r3
 80158c6:	3730      	adds	r7, #48	@ 0x30
 80158c8:	46bd      	mov	sp, r7
 80158ca:	bd80      	pop	{r7, pc}
 80158cc:	0801a7f0 	.word	0x0801a7f0
 80158d0:	0801a8d4 	.word	0x0801a8d4
 80158d4:	0801a838 	.word	0x0801a838
 80158d8:	0801a8f4 	.word	0x0801a8f4
 80158dc:	0801a92c 	.word	0x0801a92c
 80158e0:	0801a93c 	.word	0x0801a93c

080158e4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80158e4:	b580      	push	{r7, lr}
 80158e6:	b08e      	sub	sp, #56	@ 0x38
 80158e8:	af00      	add	r7, sp, #0
 80158ea:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	685b      	ldr	r3, [r3, #4]
 80158f0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80158f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80158f4:	781b      	ldrb	r3, [r3, #0]
 80158f6:	f003 030f 	and.w	r3, r3, #15
 80158fa:	b2db      	uxtb	r3, r3
 80158fc:	009b      	lsls	r3, r3, #2
 80158fe:	b2db      	uxtb	r3, r3
 8015900:	2b14      	cmp	r3, #20
 8015902:	f040 8171 	bne.w	8015be8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015908:	88db      	ldrh	r3, [r3, #6]
 801590a:	b29b      	uxth	r3, r3
 801590c:	4618      	mov	r0, r3
 801590e:	f7f5 fccd 	bl	800b2ac <lwip_htons>
 8015912:	4603      	mov	r3, r0
 8015914:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015918:	b29b      	uxth	r3, r3
 801591a:	00db      	lsls	r3, r3, #3
 801591c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801591e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015920:	885b      	ldrh	r3, [r3, #2]
 8015922:	b29b      	uxth	r3, r3
 8015924:	4618      	mov	r0, r3
 8015926:	f7f5 fcc1 	bl	800b2ac <lwip_htons>
 801592a:	4603      	mov	r3, r0
 801592c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801592e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015930:	781b      	ldrb	r3, [r3, #0]
 8015932:	f003 030f 	and.w	r3, r3, #15
 8015936:	b2db      	uxtb	r3, r3
 8015938:	009b      	lsls	r3, r3, #2
 801593a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801593e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015942:	b29b      	uxth	r3, r3
 8015944:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8015946:	429a      	cmp	r2, r3
 8015948:	f0c0 8150 	bcc.w	8015bec <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801594c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015950:	b29b      	uxth	r3, r3
 8015952:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8015954:	1ad3      	subs	r3, r2, r3
 8015956:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015958:	6878      	ldr	r0, [r7, #4]
 801595a:	f7f7 f9df 	bl	800cd1c <pbuf_clen>
 801595e:	4603      	mov	r3, r0
 8015960:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015962:	4b8c      	ldr	r3, [pc, #560]	@ (8015b94 <ip4_reass+0x2b0>)
 8015964:	881b      	ldrh	r3, [r3, #0]
 8015966:	461a      	mov	r2, r3
 8015968:	8c3b      	ldrh	r3, [r7, #32]
 801596a:	4413      	add	r3, r2
 801596c:	2b0a      	cmp	r3, #10
 801596e:	dd10      	ble.n	8015992 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015970:	8c3b      	ldrh	r3, [r7, #32]
 8015972:	4619      	mov	r1, r3
 8015974:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015976:	f7ff fd81 	bl	801547c <ip_reass_remove_oldest_datagram>
 801597a:	4603      	mov	r3, r0
 801597c:	2b00      	cmp	r3, #0
 801597e:	f000 8137 	beq.w	8015bf0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015982:	4b84      	ldr	r3, [pc, #528]	@ (8015b94 <ip4_reass+0x2b0>)
 8015984:	881b      	ldrh	r3, [r3, #0]
 8015986:	461a      	mov	r2, r3
 8015988:	8c3b      	ldrh	r3, [r7, #32]
 801598a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801598c:	2b0a      	cmp	r3, #10
 801598e:	f300 812f 	bgt.w	8015bf0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015992:	4b81      	ldr	r3, [pc, #516]	@ (8015b98 <ip4_reass+0x2b4>)
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	633b      	str	r3, [r7, #48]	@ 0x30
 8015998:	e015      	b.n	80159c6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801599a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801599c:	695a      	ldr	r2, [r3, #20]
 801599e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159a0:	68db      	ldr	r3, [r3, #12]
 80159a2:	429a      	cmp	r2, r3
 80159a4:	d10c      	bne.n	80159c0 <ip4_reass+0xdc>
 80159a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159a8:	699a      	ldr	r2, [r3, #24]
 80159aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159ac:	691b      	ldr	r3, [r3, #16]
 80159ae:	429a      	cmp	r2, r3
 80159b0:	d106      	bne.n	80159c0 <ip4_reass+0xdc>
 80159b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159b4:	899a      	ldrh	r2, [r3, #12]
 80159b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159b8:	889b      	ldrh	r3, [r3, #4]
 80159ba:	b29b      	uxth	r3, r3
 80159bc:	429a      	cmp	r2, r3
 80159be:	d006      	beq.n	80159ce <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80159c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80159c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d1e6      	bne.n	801599a <ip4_reass+0xb6>
 80159cc:	e000      	b.n	80159d0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80159ce:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80159d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d109      	bne.n	80159ea <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80159d6:	8c3b      	ldrh	r3, [r7, #32]
 80159d8:	4619      	mov	r1, r3
 80159da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80159dc:	f7ff fdb0 	bl	8015540 <ip_reass_enqueue_new_datagram>
 80159e0:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80159e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d11c      	bne.n	8015a22 <ip4_reass+0x13e>
      goto nullreturn;
 80159e8:	e105      	b.n	8015bf6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80159ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159ec:	88db      	ldrh	r3, [r3, #6]
 80159ee:	b29b      	uxth	r3, r3
 80159f0:	4618      	mov	r0, r3
 80159f2:	f7f5 fc5b 	bl	800b2ac <lwip_htons>
 80159f6:	4603      	mov	r3, r0
 80159f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d110      	bne.n	8015a22 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a02:	89db      	ldrh	r3, [r3, #14]
 8015a04:	4618      	mov	r0, r3
 8015a06:	f7f5 fc51 	bl	800b2ac <lwip_htons>
 8015a0a:	4603      	mov	r3, r0
 8015a0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d006      	beq.n	8015a22 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a16:	3308      	adds	r3, #8
 8015a18:	2214      	movs	r2, #20
 8015a1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015a1c:	4618      	mov	r0, r3
 8015a1e:	f000 ff58 	bl	80168d2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a24:	88db      	ldrh	r3, [r3, #6]
 8015a26:	b29b      	uxth	r3, r3
 8015a28:	f003 0320 	and.w	r3, r3, #32
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	bf0c      	ite	eq
 8015a30:	2301      	moveq	r3, #1
 8015a32:	2300      	movne	r3, #0
 8015a34:	b2db      	uxtb	r3, r3
 8015a36:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015a38:	69fb      	ldr	r3, [r7, #28]
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	d00e      	beq.n	8015a5c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015a3e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8015a40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015a42:	4413      	add	r3, r2
 8015a44:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015a46:	8b7a      	ldrh	r2, [r7, #26]
 8015a48:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015a4a:	429a      	cmp	r2, r3
 8015a4c:	f0c0 80a0 	bcc.w	8015b90 <ip4_reass+0x2ac>
 8015a50:	8b7b      	ldrh	r3, [r7, #26]
 8015a52:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8015a56:	4293      	cmp	r3, r2
 8015a58:	f200 809a 	bhi.w	8015b90 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015a5c:	69fa      	ldr	r2, [r7, #28]
 8015a5e:	6879      	ldr	r1, [r7, #4]
 8015a60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015a62:	f7ff fdd5 	bl	8015610 <ip_reass_chain_frag_into_datagram_and_validate>
 8015a66:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015a68:	697b      	ldr	r3, [r7, #20]
 8015a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a6e:	f000 809b 	beq.w	8015ba8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015a72:	4b48      	ldr	r3, [pc, #288]	@ (8015b94 <ip4_reass+0x2b0>)
 8015a74:	881a      	ldrh	r2, [r3, #0]
 8015a76:	8c3b      	ldrh	r3, [r7, #32]
 8015a78:	4413      	add	r3, r2
 8015a7a:	b29a      	uxth	r2, r3
 8015a7c:	4b45      	ldr	r3, [pc, #276]	@ (8015b94 <ip4_reass+0x2b0>)
 8015a7e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015a80:	69fb      	ldr	r3, [r7, #28]
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d00d      	beq.n	8015aa2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8015a86:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8015a88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015a8a:	4413      	add	r3, r2
 8015a8c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8015a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a90:	8a7a      	ldrh	r2, [r7, #18]
 8015a92:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a96:	7f9b      	ldrb	r3, [r3, #30]
 8015a98:	f043 0301 	orr.w	r3, r3, #1
 8015a9c:	b2da      	uxtb	r2, r3
 8015a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015aa0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015aa2:	697b      	ldr	r3, [r7, #20]
 8015aa4:	2b01      	cmp	r3, #1
 8015aa6:	d171      	bne.n	8015b8c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015aaa:	8b9b      	ldrh	r3, [r3, #28]
 8015aac:	3314      	adds	r3, #20
 8015aae:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ab2:	685b      	ldr	r3, [r3, #4]
 8015ab4:	685b      	ldr	r3, [r3, #4]
 8015ab6:	681b      	ldr	r3, [r3, #0]
 8015ab8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015abc:	685b      	ldr	r3, [r3, #4]
 8015abe:	685b      	ldr	r3, [r3, #4]
 8015ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ac4:	3308      	adds	r3, #8
 8015ac6:	2214      	movs	r2, #20
 8015ac8:	4619      	mov	r1, r3
 8015aca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015acc:	f000 ff01 	bl	80168d2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015ad0:	8a3b      	ldrh	r3, [r7, #16]
 8015ad2:	4618      	mov	r0, r3
 8015ad4:	f7f5 fbea 	bl	800b2ac <lwip_htons>
 8015ad8:	4603      	mov	r3, r0
 8015ada:	461a      	mov	r2, r3
 8015adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ade:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ae2:	2200      	movs	r2, #0
 8015ae4:	719a      	strb	r2, [r3, #6]
 8015ae6:	2200      	movs	r2, #0
 8015ae8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015aec:	2200      	movs	r2, #0
 8015aee:	729a      	strb	r2, [r3, #10]
 8015af0:	2200      	movs	r2, #0
 8015af2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015af6:	685b      	ldr	r3, [r3, #4]
 8015af8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015afa:	e00d      	b.n	8015b18 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015afe:	685b      	ldr	r3, [r3, #4]
 8015b00:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8015b02:	2114      	movs	r1, #20
 8015b04:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8015b06:	f7f6 fff5 	bl	800caf4 <pbuf_remove_header>
      pbuf_cat(p, r);
 8015b0a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8015b0c:	6878      	ldr	r0, [r7, #4]
 8015b0e:	f7f7 f945 	bl	800cd9c <pbuf_cat>
      r = iprh->next_pbuf;
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	681b      	ldr	r3, [r3, #0]
 8015b16:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8015b18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d1ee      	bne.n	8015afc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8015b98 <ip4_reass+0x2b4>)
 8015b20:	681b      	ldr	r3, [r3, #0]
 8015b22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015b24:	429a      	cmp	r2, r3
 8015b26:	d102      	bne.n	8015b2e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015b28:	2300      	movs	r3, #0
 8015b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015b2c:	e010      	b.n	8015b50 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8015b98 <ip4_reass+0x2b4>)
 8015b30:	681b      	ldr	r3, [r3, #0]
 8015b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015b34:	e007      	b.n	8015b46 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b38:	681b      	ldr	r3, [r3, #0]
 8015b3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015b3c:	429a      	cmp	r2, r3
 8015b3e:	d006      	beq.n	8015b4e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d1f4      	bne.n	8015b36 <ip4_reass+0x252>
 8015b4c:	e000      	b.n	8015b50 <ip4_reass+0x26c>
          break;
 8015b4e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015b50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015b52:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015b54:	f7ff fd2e 	bl	80155b4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015b58:	6878      	ldr	r0, [r7, #4]
 8015b5a:	f7f7 f8df 	bl	800cd1c <pbuf_clen>
 8015b5e:	4603      	mov	r3, r0
 8015b60:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8015b62:	4b0c      	ldr	r3, [pc, #48]	@ (8015b94 <ip4_reass+0x2b0>)
 8015b64:	881b      	ldrh	r3, [r3, #0]
 8015b66:	8c3a      	ldrh	r2, [r7, #32]
 8015b68:	429a      	cmp	r2, r3
 8015b6a:	d906      	bls.n	8015b7a <ip4_reass+0x296>
 8015b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8015b9c <ip4_reass+0x2b8>)
 8015b6e:	f240 229b 	movw	r2, #667	@ 0x29b
 8015b72:	490b      	ldr	r1, [pc, #44]	@ (8015ba0 <ip4_reass+0x2bc>)
 8015b74:	480b      	ldr	r0, [pc, #44]	@ (8015ba4 <ip4_reass+0x2c0>)
 8015b76:	f000 fd7b 	bl	8016670 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8015b7a:	4b06      	ldr	r3, [pc, #24]	@ (8015b94 <ip4_reass+0x2b0>)
 8015b7c:	881a      	ldrh	r2, [r3, #0]
 8015b7e:	8c3b      	ldrh	r3, [r7, #32]
 8015b80:	1ad3      	subs	r3, r2, r3
 8015b82:	b29a      	uxth	r2, r3
 8015b84:	4b03      	ldr	r3, [pc, #12]	@ (8015b94 <ip4_reass+0x2b0>)
 8015b86:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	e038      	b.n	8015bfe <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015b8c:	2300      	movs	r3, #0
 8015b8e:	e036      	b.n	8015bfe <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8015b90:	bf00      	nop
 8015b92:	e00a      	b.n	8015baa <ip4_reass+0x2c6>
 8015b94:	24008054 	.word	0x24008054
 8015b98:	24008050 	.word	0x24008050
 8015b9c:	0801a7f0 	.word	0x0801a7f0
 8015ba0:	0801a960 	.word	0x0801a960
 8015ba4:	0801a838 	.word	0x0801a838
    goto nullreturn_ipr;
 8015ba8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8015baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d106      	bne.n	8015bbe <ip4_reass+0x2da>
 8015bb0:	4b15      	ldr	r3, [pc, #84]	@ (8015c08 <ip4_reass+0x324>)
 8015bb2:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8015bb6:	4915      	ldr	r1, [pc, #84]	@ (8015c0c <ip4_reass+0x328>)
 8015bb8:	4815      	ldr	r0, [pc, #84]	@ (8015c10 <ip4_reass+0x32c>)
 8015bba:	f000 fd59 	bl	8016670 <iprintf>
  if (ipr->p == NULL) {
 8015bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015bc0:	685b      	ldr	r3, [r3, #4]
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d116      	bne.n	8015bf4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8015bc6:	4b13      	ldr	r3, [pc, #76]	@ (8015c14 <ip4_reass+0x330>)
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015bcc:	429a      	cmp	r2, r3
 8015bce:	d006      	beq.n	8015bde <ip4_reass+0x2fa>
 8015bd0:	4b0d      	ldr	r3, [pc, #52]	@ (8015c08 <ip4_reass+0x324>)
 8015bd2:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8015bd6:	4910      	ldr	r1, [pc, #64]	@ (8015c18 <ip4_reass+0x334>)
 8015bd8:	480d      	ldr	r0, [pc, #52]	@ (8015c10 <ip4_reass+0x32c>)
 8015bda:	f000 fd49 	bl	8016670 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015bde:	2100      	movs	r1, #0
 8015be0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015be2:	f7ff fce7 	bl	80155b4 <ip_reass_dequeue_datagram>
 8015be6:	e006      	b.n	8015bf6 <ip4_reass+0x312>
    goto nullreturn;
 8015be8:	bf00      	nop
 8015bea:	e004      	b.n	8015bf6 <ip4_reass+0x312>
    goto nullreturn;
 8015bec:	bf00      	nop
 8015bee:	e002      	b.n	8015bf6 <ip4_reass+0x312>
      goto nullreturn;
 8015bf0:	bf00      	nop
 8015bf2:	e000      	b.n	8015bf6 <ip4_reass+0x312>
  }

nullreturn:
 8015bf4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015bf6:	6878      	ldr	r0, [r7, #4]
 8015bf8:	f7f7 f802 	bl	800cc00 <pbuf_free>
  return NULL;
 8015bfc:	2300      	movs	r3, #0
}
 8015bfe:	4618      	mov	r0, r3
 8015c00:	3738      	adds	r7, #56	@ 0x38
 8015c02:	46bd      	mov	sp, r7
 8015c04:	bd80      	pop	{r7, pc}
 8015c06:	bf00      	nop
 8015c08:	0801a7f0 	.word	0x0801a7f0
 8015c0c:	0801a97c 	.word	0x0801a97c
 8015c10:	0801a838 	.word	0x0801a838
 8015c14:	24008050 	.word	0x24008050
 8015c18:	0801a988 	.word	0x0801a988

08015c1c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015c1c:	b580      	push	{r7, lr}
 8015c1e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015c20:	2005      	movs	r0, #5
 8015c22:	f7f6 f8d3 	bl	800bdcc <memp_malloc>
 8015c26:	4603      	mov	r3, r0
}
 8015c28:	4618      	mov	r0, r3
 8015c2a:	bd80      	pop	{r7, pc}

08015c2c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015c2c:	b580      	push	{r7, lr}
 8015c2e:	b082      	sub	sp, #8
 8015c30:	af00      	add	r7, sp, #0
 8015c32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d106      	bne.n	8015c48 <ip_frag_free_pbuf_custom_ref+0x1c>
 8015c3a:	4b07      	ldr	r3, [pc, #28]	@ (8015c58 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015c3c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8015c40:	4906      	ldr	r1, [pc, #24]	@ (8015c5c <ip_frag_free_pbuf_custom_ref+0x30>)
 8015c42:	4807      	ldr	r0, [pc, #28]	@ (8015c60 <ip_frag_free_pbuf_custom_ref+0x34>)
 8015c44:	f000 fd14 	bl	8016670 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015c48:	6879      	ldr	r1, [r7, #4]
 8015c4a:	2005      	movs	r0, #5
 8015c4c:	f7f6 f934 	bl	800beb8 <memp_free>
}
 8015c50:	bf00      	nop
 8015c52:	3708      	adds	r7, #8
 8015c54:	46bd      	mov	sp, r7
 8015c56:	bd80      	pop	{r7, pc}
 8015c58:	0801a7f0 	.word	0x0801a7f0
 8015c5c:	0801a9a8 	.word	0x0801a9a8
 8015c60:	0801a838 	.word	0x0801a838

08015c64 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015c64:	b580      	push	{r7, lr}
 8015c66:	b084      	sub	sp, #16
 8015c68:	af00      	add	r7, sp, #0
 8015c6a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8015c70:	68fb      	ldr	r3, [r7, #12]
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d106      	bne.n	8015c84 <ipfrag_free_pbuf_custom+0x20>
 8015c76:	4b11      	ldr	r3, [pc, #68]	@ (8015cbc <ipfrag_free_pbuf_custom+0x58>)
 8015c78:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8015c7c:	4910      	ldr	r1, [pc, #64]	@ (8015cc0 <ipfrag_free_pbuf_custom+0x5c>)
 8015c7e:	4811      	ldr	r0, [pc, #68]	@ (8015cc4 <ipfrag_free_pbuf_custom+0x60>)
 8015c80:	f000 fcf6 	bl	8016670 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8015c84:	68fa      	ldr	r2, [r7, #12]
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	429a      	cmp	r2, r3
 8015c8a:	d006      	beq.n	8015c9a <ipfrag_free_pbuf_custom+0x36>
 8015c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8015cbc <ipfrag_free_pbuf_custom+0x58>)
 8015c8e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8015c92:	490d      	ldr	r1, [pc, #52]	@ (8015cc8 <ipfrag_free_pbuf_custom+0x64>)
 8015c94:	480b      	ldr	r0, [pc, #44]	@ (8015cc4 <ipfrag_free_pbuf_custom+0x60>)
 8015c96:	f000 fceb 	bl	8016670 <iprintf>
  if (pcr->original != NULL) {
 8015c9a:	68fb      	ldr	r3, [r7, #12]
 8015c9c:	695b      	ldr	r3, [r3, #20]
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	d004      	beq.n	8015cac <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8015ca2:	68fb      	ldr	r3, [r7, #12]
 8015ca4:	695b      	ldr	r3, [r3, #20]
 8015ca6:	4618      	mov	r0, r3
 8015ca8:	f7f6 ffaa 	bl	800cc00 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8015cac:	68f8      	ldr	r0, [r7, #12]
 8015cae:	f7ff ffbd 	bl	8015c2c <ip_frag_free_pbuf_custom_ref>
}
 8015cb2:	bf00      	nop
 8015cb4:	3710      	adds	r7, #16
 8015cb6:	46bd      	mov	sp, r7
 8015cb8:	bd80      	pop	{r7, pc}
 8015cba:	bf00      	nop
 8015cbc:	0801a7f0 	.word	0x0801a7f0
 8015cc0:	0801a9b4 	.word	0x0801a9b4
 8015cc4:	0801a838 	.word	0x0801a838
 8015cc8:	0801a9c0 	.word	0x0801a9c0

08015ccc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8015ccc:	b580      	push	{r7, lr}
 8015cce:	b094      	sub	sp, #80	@ 0x50
 8015cd0:	af02      	add	r7, sp, #8
 8015cd2:	60f8      	str	r0, [r7, #12]
 8015cd4:	60b9      	str	r1, [r7, #8]
 8015cd6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015cd8:	2300      	movs	r3, #0
 8015cda:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8015cde:	68bb      	ldr	r3, [r7, #8]
 8015ce0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015ce2:	3b14      	subs	r3, #20
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	da00      	bge.n	8015cea <ip4_frag+0x1e>
 8015ce8:	3307      	adds	r3, #7
 8015cea:	10db      	asrs	r3, r3, #3
 8015cec:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8015cee:	2314      	movs	r3, #20
 8015cf0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	685b      	ldr	r3, [r3, #4]
 8015cf6:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8015cf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015cfa:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8015cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015cfe:	781b      	ldrb	r3, [r3, #0]
 8015d00:	f003 030f 	and.w	r3, r3, #15
 8015d04:	b2db      	uxtb	r3, r3
 8015d06:	009b      	lsls	r3, r3, #2
 8015d08:	b2db      	uxtb	r3, r3
 8015d0a:	2b14      	cmp	r3, #20
 8015d0c:	d002      	beq.n	8015d14 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8015d0e:	f06f 0305 	mvn.w	r3, #5
 8015d12:	e110      	b.n	8015f36 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	895b      	ldrh	r3, [r3, #10]
 8015d18:	2b13      	cmp	r3, #19
 8015d1a:	d809      	bhi.n	8015d30 <ip4_frag+0x64>
 8015d1c:	4b88      	ldr	r3, [pc, #544]	@ (8015f40 <ip4_frag+0x274>)
 8015d1e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8015d22:	4988      	ldr	r1, [pc, #544]	@ (8015f44 <ip4_frag+0x278>)
 8015d24:	4888      	ldr	r0, [pc, #544]	@ (8015f48 <ip4_frag+0x27c>)
 8015d26:	f000 fca3 	bl	8016670 <iprintf>
 8015d2a:	f06f 0305 	mvn.w	r3, #5
 8015d2e:	e102      	b.n	8015f36 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d32:	88db      	ldrh	r3, [r3, #6]
 8015d34:	b29b      	uxth	r3, r3
 8015d36:	4618      	mov	r0, r3
 8015d38:	f7f5 fab8 	bl	800b2ac <lwip_htons>
 8015d3c:	4603      	mov	r3, r0
 8015d3e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8015d40:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8015d42:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015d46:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8015d4a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8015d4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8015d50:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	891b      	ldrh	r3, [r3, #8]
 8015d56:	3b14      	subs	r3, #20
 8015d58:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8015d5c:	e0e1      	b.n	8015f22 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8015d5e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015d60:	00db      	lsls	r3, r3, #3
 8015d62:	b29b      	uxth	r3, r3
 8015d64:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015d68:	4293      	cmp	r3, r2
 8015d6a:	bf28      	it	cs
 8015d6c:	4613      	movcs	r3, r2
 8015d6e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015d70:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015d74:	2114      	movs	r1, #20
 8015d76:	200e      	movs	r0, #14
 8015d78:	f7f6 fc5e 	bl	800c638 <pbuf_alloc>
 8015d7c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8015d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	f000 80d5 	beq.w	8015f30 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8015d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d88:	895b      	ldrh	r3, [r3, #10]
 8015d8a:	2b13      	cmp	r3, #19
 8015d8c:	d806      	bhi.n	8015d9c <ip4_frag+0xd0>
 8015d8e:	4b6c      	ldr	r3, [pc, #432]	@ (8015f40 <ip4_frag+0x274>)
 8015d90:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8015d94:	496d      	ldr	r1, [pc, #436]	@ (8015f4c <ip4_frag+0x280>)
 8015d96:	486c      	ldr	r0, [pc, #432]	@ (8015f48 <ip4_frag+0x27c>)
 8015d98:	f000 fc6a 	bl	8016670 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8015d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d9e:	685b      	ldr	r3, [r3, #4]
 8015da0:	2214      	movs	r2, #20
 8015da2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8015da4:	4618      	mov	r0, r3
 8015da6:	f000 fd94 	bl	80168d2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8015daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015dac:	685b      	ldr	r3, [r3, #4]
 8015dae:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8015db0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015db2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8015db6:	e064      	b.n	8015e82 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8015db8:	68fb      	ldr	r3, [r7, #12]
 8015dba:	895a      	ldrh	r2, [r3, #10]
 8015dbc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8015dbe:	1ad3      	subs	r3, r2, r3
 8015dc0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8015dc2:	68fb      	ldr	r3, [r7, #12]
 8015dc4:	895b      	ldrh	r3, [r3, #10]
 8015dc6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8015dc8:	429a      	cmp	r2, r3
 8015dca:	d906      	bls.n	8015dda <ip4_frag+0x10e>
 8015dcc:	4b5c      	ldr	r3, [pc, #368]	@ (8015f40 <ip4_frag+0x274>)
 8015dce:	f240 322d 	movw	r2, #813	@ 0x32d
 8015dd2:	495f      	ldr	r1, [pc, #380]	@ (8015f50 <ip4_frag+0x284>)
 8015dd4:	485c      	ldr	r0, [pc, #368]	@ (8015f48 <ip4_frag+0x27c>)
 8015dd6:	f000 fc4b 	bl	8016670 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8015dda:	8bfa      	ldrh	r2, [r7, #30]
 8015ddc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8015de0:	4293      	cmp	r3, r2
 8015de2:	bf28      	it	cs
 8015de4:	4613      	movcs	r3, r2
 8015de6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8015dea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d105      	bne.n	8015dfe <ip4_frag+0x132>
        poff = 0;
 8015df2:	2300      	movs	r3, #0
 8015df4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8015df6:	68fb      	ldr	r3, [r7, #12]
 8015df8:	681b      	ldr	r3, [r3, #0]
 8015dfa:	60fb      	str	r3, [r7, #12]
        continue;
 8015dfc:	e041      	b.n	8015e82 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8015dfe:	f7ff ff0d 	bl	8015c1c <ip_frag_alloc_pbuf_custom_ref>
 8015e02:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8015e04:	69bb      	ldr	r3, [r7, #24]
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d103      	bne.n	8015e12 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8015e0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015e0c:	f7f6 fef8 	bl	800cc00 <pbuf_free>
        goto memerr;
 8015e10:	e08f      	b.n	8015f32 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015e12:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015e18:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8015e1a:	4413      	add	r3, r2
 8015e1c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8015e20:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8015e24:	9201      	str	r2, [sp, #4]
 8015e26:	9300      	str	r3, [sp, #0]
 8015e28:	4603      	mov	r3, r0
 8015e2a:	2241      	movs	r2, #65	@ 0x41
 8015e2c:	2000      	movs	r0, #0
 8015e2e:	f7f6 fd2d 	bl	800c88c <pbuf_alloced_custom>
 8015e32:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8015e34:	697b      	ldr	r3, [r7, #20]
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d106      	bne.n	8015e48 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8015e3a:	69b8      	ldr	r0, [r7, #24]
 8015e3c:	f7ff fef6 	bl	8015c2c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015e40:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015e42:	f7f6 fedd 	bl	800cc00 <pbuf_free>
        goto memerr;
 8015e46:	e074      	b.n	8015f32 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8015e48:	68f8      	ldr	r0, [r7, #12]
 8015e4a:	f7f6 ff7f 	bl	800cd4c <pbuf_ref>
      pcr->original = p;
 8015e4e:	69bb      	ldr	r3, [r7, #24]
 8015e50:	68fa      	ldr	r2, [r7, #12]
 8015e52:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015e54:	69bb      	ldr	r3, [r7, #24]
 8015e56:	4a3f      	ldr	r2, [pc, #252]	@ (8015f54 <ip4_frag+0x288>)
 8015e58:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8015e5a:	6979      	ldr	r1, [r7, #20]
 8015e5c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015e5e:	f7f6 ff9d 	bl	800cd9c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8015e62:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8015e66:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015e6a:	1ad3      	subs	r3, r2, r3
 8015e6c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8015e70:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d004      	beq.n	8015e82 <ip4_frag+0x1b6>
        poff = 0;
 8015e78:	2300      	movs	r3, #0
 8015e7a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8015e7c:	68fb      	ldr	r3, [r7, #12]
 8015e7e:	681b      	ldr	r3, [r3, #0]
 8015e80:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8015e82:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d196      	bne.n	8015db8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8015e8a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8015e8c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015e90:	4413      	add	r3, r2
 8015e92:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8015e94:	68bb      	ldr	r3, [r7, #8]
 8015e96:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015e98:	f1a3 0213 	sub.w	r2, r3, #19
 8015e9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015ea0:	429a      	cmp	r2, r3
 8015ea2:	bfcc      	ite	gt
 8015ea4:	2301      	movgt	r3, #1
 8015ea6:	2300      	movle	r3, #0
 8015ea8:	b2db      	uxtb	r3, r3
 8015eaa:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8015eac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8015eb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015eb4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8015eb6:	6a3b      	ldr	r3, [r7, #32]
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d002      	beq.n	8015ec2 <ip4_frag+0x1f6>
 8015ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d003      	beq.n	8015eca <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8015ec2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8015ec4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8015ec8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8015eca:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8015ecc:	4618      	mov	r0, r3
 8015ece:	f7f5 f9ed 	bl	800b2ac <lwip_htons>
 8015ed2:	4603      	mov	r3, r0
 8015ed4:	461a      	mov	r2, r3
 8015ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ed8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8015eda:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015edc:	3314      	adds	r3, #20
 8015ede:	b29b      	uxth	r3, r3
 8015ee0:	4618      	mov	r0, r3
 8015ee2:	f7f5 f9e3 	bl	800b2ac <lwip_htons>
 8015ee6:	4603      	mov	r3, r0
 8015ee8:	461a      	mov	r2, r3
 8015eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015eec:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8015eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ef0:	2200      	movs	r2, #0
 8015ef2:	729a      	strb	r2, [r3, #10]
 8015ef4:	2200      	movs	r2, #0
 8015ef6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8015ef8:	68bb      	ldr	r3, [r7, #8]
 8015efa:	695b      	ldr	r3, [r3, #20]
 8015efc:	687a      	ldr	r2, [r7, #4]
 8015efe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015f00:	68b8      	ldr	r0, [r7, #8]
 8015f02:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8015f04:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015f06:	f7f6 fe7b 	bl	800cc00 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8015f0a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015f0e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015f10:	1ad3      	subs	r3, r2, r3
 8015f12:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8015f16:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8015f1a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015f1c:	4413      	add	r3, r2
 8015f1e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8015f22:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	f47f af19 	bne.w	8015d5e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	e002      	b.n	8015f36 <ip4_frag+0x26a>
      goto memerr;
 8015f30:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8015f32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015f36:	4618      	mov	r0, r3
 8015f38:	3748      	adds	r7, #72	@ 0x48
 8015f3a:	46bd      	mov	sp, r7
 8015f3c:	bd80      	pop	{r7, pc}
 8015f3e:	bf00      	nop
 8015f40:	0801a7f0 	.word	0x0801a7f0
 8015f44:	0801a9cc 	.word	0x0801a9cc
 8015f48:	0801a838 	.word	0x0801a838
 8015f4c:	0801a9e8 	.word	0x0801a9e8
 8015f50:	0801aa08 	.word	0x0801aa08
 8015f54:	08015c65 	.word	0x08015c65

08015f58 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8015f58:	b580      	push	{r7, lr}
 8015f5a:	b086      	sub	sp, #24
 8015f5c:	af00      	add	r7, sp, #0
 8015f5e:	6078      	str	r0, [r7, #4]
 8015f60:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8015f62:	230e      	movs	r3, #14
 8015f64:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	895b      	ldrh	r3, [r3, #10]
 8015f6a:	2b0e      	cmp	r3, #14
 8015f6c:	d96e      	bls.n	801604c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	7bdb      	ldrb	r3, [r3, #15]
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d106      	bne.n	8015f84 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8015f76:	683b      	ldr	r3, [r7, #0]
 8015f78:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015f7c:	3301      	adds	r3, #1
 8015f7e:	b2da      	uxtb	r2, r3
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	685b      	ldr	r3, [r3, #4]
 8015f88:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8015f8a:	693b      	ldr	r3, [r7, #16]
 8015f8c:	7b1a      	ldrb	r2, [r3, #12]
 8015f8e:	7b5b      	ldrb	r3, [r3, #13]
 8015f90:	021b      	lsls	r3, r3, #8
 8015f92:	4313      	orrs	r3, r2
 8015f94:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8015f96:	693b      	ldr	r3, [r7, #16]
 8015f98:	781b      	ldrb	r3, [r3, #0]
 8015f9a:	f003 0301 	and.w	r3, r3, #1
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d023      	beq.n	8015fea <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8015fa2:	693b      	ldr	r3, [r7, #16]
 8015fa4:	781b      	ldrb	r3, [r3, #0]
 8015fa6:	2b01      	cmp	r3, #1
 8015fa8:	d10f      	bne.n	8015fca <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015faa:	693b      	ldr	r3, [r7, #16]
 8015fac:	785b      	ldrb	r3, [r3, #1]
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d11b      	bne.n	8015fea <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8015fb2:	693b      	ldr	r3, [r7, #16]
 8015fb4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015fb6:	2b5e      	cmp	r3, #94	@ 0x5e
 8015fb8:	d117      	bne.n	8015fea <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	7b5b      	ldrb	r3, [r3, #13]
 8015fbe:	f043 0310 	orr.w	r3, r3, #16
 8015fc2:	b2da      	uxtb	r2, r3
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	735a      	strb	r2, [r3, #13]
 8015fc8:	e00f      	b.n	8015fea <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8015fca:	693b      	ldr	r3, [r7, #16]
 8015fcc:	2206      	movs	r2, #6
 8015fce:	4928      	ldr	r1, [pc, #160]	@ (8016070 <ethernet_input+0x118>)
 8015fd0:	4618      	mov	r0, r3
 8015fd2:	f000 fba2 	bl	801671a <memcmp>
 8015fd6:	4603      	mov	r3, r0
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d106      	bne.n	8015fea <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	7b5b      	ldrb	r3, [r3, #13]
 8015fe0:	f043 0308 	orr.w	r3, r3, #8
 8015fe4:	b2da      	uxtb	r2, r3
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8015fea:	89fb      	ldrh	r3, [r7, #14]
 8015fec:	2b08      	cmp	r3, #8
 8015fee:	d003      	beq.n	8015ff8 <ethernet_input+0xa0>
 8015ff0:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8015ff4:	d014      	beq.n	8016020 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8015ff6:	e032      	b.n	801605e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015ff8:	683b      	ldr	r3, [r7, #0]
 8015ffa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015ffe:	f003 0308 	and.w	r3, r3, #8
 8016002:	2b00      	cmp	r3, #0
 8016004:	d024      	beq.n	8016050 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016006:	8afb      	ldrh	r3, [r7, #22]
 8016008:	4619      	mov	r1, r3
 801600a:	6878      	ldr	r0, [r7, #4]
 801600c:	f7f6 fd72 	bl	800caf4 <pbuf_remove_header>
 8016010:	4603      	mov	r3, r0
 8016012:	2b00      	cmp	r3, #0
 8016014:	d11e      	bne.n	8016054 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016016:	6839      	ldr	r1, [r7, #0]
 8016018:	6878      	ldr	r0, [r7, #4]
 801601a:	f7fe ff21 	bl	8014e60 <ip4_input>
      break;
 801601e:	e013      	b.n	8016048 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016020:	683b      	ldr	r3, [r7, #0]
 8016022:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016026:	f003 0308 	and.w	r3, r3, #8
 801602a:	2b00      	cmp	r3, #0
 801602c:	d014      	beq.n	8016058 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801602e:	8afb      	ldrh	r3, [r7, #22]
 8016030:	4619      	mov	r1, r3
 8016032:	6878      	ldr	r0, [r7, #4]
 8016034:	f7f6 fd5e 	bl	800caf4 <pbuf_remove_header>
 8016038:	4603      	mov	r3, r0
 801603a:	2b00      	cmp	r3, #0
 801603c:	d10e      	bne.n	801605c <ethernet_input+0x104>
        etharp_input(p, netif);
 801603e:	6839      	ldr	r1, [r7, #0]
 8016040:	6878      	ldr	r0, [r7, #4]
 8016042:	f7fe f89b 	bl	801417c <etharp_input>
      break;
 8016046:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016048:	2300      	movs	r3, #0
 801604a:	e00c      	b.n	8016066 <ethernet_input+0x10e>
    goto free_and_return;
 801604c:	bf00      	nop
 801604e:	e006      	b.n	801605e <ethernet_input+0x106>
        goto free_and_return;
 8016050:	bf00      	nop
 8016052:	e004      	b.n	801605e <ethernet_input+0x106>
        goto free_and_return;
 8016054:	bf00      	nop
 8016056:	e002      	b.n	801605e <ethernet_input+0x106>
        goto free_and_return;
 8016058:	bf00      	nop
 801605a:	e000      	b.n	801605e <ethernet_input+0x106>
        goto free_and_return;
 801605c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801605e:	6878      	ldr	r0, [r7, #4]
 8016060:	f7f6 fdce 	bl	800cc00 <pbuf_free>
  return ERR_OK;
 8016064:	2300      	movs	r3, #0
}
 8016066:	4618      	mov	r0, r3
 8016068:	3718      	adds	r7, #24
 801606a:	46bd      	mov	sp, r7
 801606c:	bd80      	pop	{r7, pc}
 801606e:	bf00      	nop
 8016070:	0801ac04 	.word	0x0801ac04

08016074 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016074:	b580      	push	{r7, lr}
 8016076:	b086      	sub	sp, #24
 8016078:	af00      	add	r7, sp, #0
 801607a:	60f8      	str	r0, [r7, #12]
 801607c:	60b9      	str	r1, [r7, #8]
 801607e:	607a      	str	r2, [r7, #4]
 8016080:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016082:	8c3b      	ldrh	r3, [r7, #32]
 8016084:	4618      	mov	r0, r3
 8016086:	f7f5 f911 	bl	800b2ac <lwip_htons>
 801608a:	4603      	mov	r3, r0
 801608c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801608e:	210e      	movs	r1, #14
 8016090:	68b8      	ldr	r0, [r7, #8]
 8016092:	f7f6 fd1f 	bl	800cad4 <pbuf_add_header>
 8016096:	4603      	mov	r3, r0
 8016098:	2b00      	cmp	r3, #0
 801609a:	d125      	bne.n	80160e8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801609c:	68bb      	ldr	r3, [r7, #8]
 801609e:	685b      	ldr	r3, [r3, #4]
 80160a0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80160a2:	693b      	ldr	r3, [r7, #16]
 80160a4:	8afa      	ldrh	r2, [r7, #22]
 80160a6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80160a8:	693b      	ldr	r3, [r7, #16]
 80160aa:	2206      	movs	r2, #6
 80160ac:	6839      	ldr	r1, [r7, #0]
 80160ae:	4618      	mov	r0, r3
 80160b0:	f000 fc0f 	bl	80168d2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80160b4:	693b      	ldr	r3, [r7, #16]
 80160b6:	3306      	adds	r3, #6
 80160b8:	2206      	movs	r2, #6
 80160ba:	6879      	ldr	r1, [r7, #4]
 80160bc:	4618      	mov	r0, r3
 80160be:	f000 fc08 	bl	80168d2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80160c2:	68fb      	ldr	r3, [r7, #12]
 80160c4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80160c8:	2b06      	cmp	r3, #6
 80160ca:	d006      	beq.n	80160da <ethernet_output+0x66>
 80160cc:	4b0a      	ldr	r3, [pc, #40]	@ (80160f8 <ethernet_output+0x84>)
 80160ce:	f44f 7299 	mov.w	r2, #306	@ 0x132
 80160d2:	490a      	ldr	r1, [pc, #40]	@ (80160fc <ethernet_output+0x88>)
 80160d4:	480a      	ldr	r0, [pc, #40]	@ (8016100 <ethernet_output+0x8c>)
 80160d6:	f000 facb 	bl	8016670 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80160da:	68fb      	ldr	r3, [r7, #12]
 80160dc:	699b      	ldr	r3, [r3, #24]
 80160de:	68b9      	ldr	r1, [r7, #8]
 80160e0:	68f8      	ldr	r0, [r7, #12]
 80160e2:	4798      	blx	r3
 80160e4:	4603      	mov	r3, r0
 80160e6:	e002      	b.n	80160ee <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80160e8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80160ea:	f06f 0301 	mvn.w	r3, #1
}
 80160ee:	4618      	mov	r0, r3
 80160f0:	3718      	adds	r7, #24
 80160f2:	46bd      	mov	sp, r7
 80160f4:	bd80      	pop	{r7, pc}
 80160f6:	bf00      	nop
 80160f8:	0801aa18 	.word	0x0801aa18
 80160fc:	0801aa50 	.word	0x0801aa50
 8016100:	0801aa84 	.word	0x0801aa84

08016104 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8016104:	b580      	push	{r7, lr}
 8016106:	b082      	sub	sp, #8
 8016108:	af00      	add	r7, sp, #0
 801610a:	6078      	str	r0, [r7, #4]
 801610c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801610e:	683b      	ldr	r3, [r7, #0]
 8016110:	2200      	movs	r2, #0
 8016112:	2104      	movs	r1, #4
 8016114:	4618      	mov	r0, r3
 8016116:	f7ef fecd 	bl	8005eb4 <osMessageQueueNew>
 801611a:	4602      	mov	r2, r0
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	681b      	ldr	r3, [r3, #0]
 8016124:	2b00      	cmp	r3, #0
 8016126:	d102      	bne.n	801612e <sys_mbox_new+0x2a>
    return ERR_MEM;
 8016128:	f04f 33ff 	mov.w	r3, #4294967295
 801612c:	e000      	b.n	8016130 <sys_mbox_new+0x2c>

  return ERR_OK;
 801612e:	2300      	movs	r3, #0
}
 8016130:	4618      	mov	r0, r3
 8016132:	3708      	adds	r7, #8
 8016134:	46bd      	mov	sp, r7
 8016136:	bd80      	pop	{r7, pc}

08016138 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8016138:	b580      	push	{r7, lr}
 801613a:	b082      	sub	sp, #8
 801613c:	af00      	add	r7, sp, #0
 801613e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	681b      	ldr	r3, [r3, #0]
 8016144:	4618      	mov	r0, r3
 8016146:	f7ef ffe7 	bl	8006118 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	681b      	ldr	r3, [r3, #0]
 801614e:	4618      	mov	r0, r3
 8016150:	f7f0 f802 	bl	8006158 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8016154:	bf00      	nop
 8016156:	3708      	adds	r7, #8
 8016158:	46bd      	mov	sp, r7
 801615a:	bd80      	pop	{r7, pc}

0801615c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801615c:	b580      	push	{r7, lr}
 801615e:	b084      	sub	sp, #16
 8016160:	af00      	add	r7, sp, #0
 8016162:	6078      	str	r0, [r7, #4]
 8016164:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	6818      	ldr	r0, [r3, #0]
 801616a:	4639      	mov	r1, r7
 801616c:	2300      	movs	r3, #0
 801616e:	2200      	movs	r2, #0
 8016170:	f7ef ff14 	bl	8005f9c <osMessageQueuePut>
 8016174:	4603      	mov	r3, r0
 8016176:	2b00      	cmp	r3, #0
 8016178:	d102      	bne.n	8016180 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801617a:	2300      	movs	r3, #0
 801617c:	73fb      	strb	r3, [r7, #15]
 801617e:	e001      	b.n	8016184 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8016180:	23ff      	movs	r3, #255	@ 0xff
 8016182:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8016184:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016188:	4618      	mov	r0, r3
 801618a:	3710      	adds	r7, #16
 801618c:	46bd      	mov	sp, r7
 801618e:	bd80      	pop	{r7, pc}

08016190 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8016190:	b580      	push	{r7, lr}
 8016192:	b086      	sub	sp, #24
 8016194:	af00      	add	r7, sp, #0
 8016196:	60f8      	str	r0, [r7, #12]
 8016198:	60b9      	str	r1, [r7, #8]
 801619a:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801619c:	f7ef fb76 	bl	800588c <osKernelGetTickCount>
 80161a0:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	d013      	beq.n	80161d0 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80161a8:	68fb      	ldr	r3, [r7, #12]
 80161aa:	6818      	ldr	r0, [r3, #0]
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	2200      	movs	r2, #0
 80161b0:	68b9      	ldr	r1, [r7, #8]
 80161b2:	f7ef ff53 	bl	800605c <osMessageQueueGet>
 80161b6:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 80161b8:	693b      	ldr	r3, [r7, #16]
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d105      	bne.n	80161ca <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 80161be:	f7ef fb65 	bl	800588c <osKernelGetTickCount>
 80161c2:	4602      	mov	r2, r0
 80161c4:	697b      	ldr	r3, [r7, #20]
 80161c6:	1ad3      	subs	r3, r2, r3
 80161c8:	e00f      	b.n	80161ea <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80161ca:	f04f 33ff 	mov.w	r3, #4294967295
 80161ce:	e00c      	b.n	80161ea <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 80161d0:	68fb      	ldr	r3, [r7, #12]
 80161d2:	6818      	ldr	r0, [r3, #0]
 80161d4:	f04f 33ff 	mov.w	r3, #4294967295
 80161d8:	2200      	movs	r2, #0
 80161da:	68b9      	ldr	r1, [r7, #8]
 80161dc:	f7ef ff3e 	bl	800605c <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 80161e0:	f7ef fb54 	bl	800588c <osKernelGetTickCount>
 80161e4:	4602      	mov	r2, r0
 80161e6:	697b      	ldr	r3, [r7, #20]
 80161e8:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80161ea:	4618      	mov	r0, r3
 80161ec:	3718      	adds	r7, #24
 80161ee:	46bd      	mov	sp, r7
 80161f0:	bd80      	pop	{r7, pc}

080161f2 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80161f2:	b580      	push	{r7, lr}
 80161f4:	b082      	sub	sp, #8
 80161f6:	af00      	add	r7, sp, #0
 80161f8:	6078      	str	r0, [r7, #4]
 80161fa:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	6818      	ldr	r0, [r3, #0]
 8016200:	2300      	movs	r3, #0
 8016202:	2200      	movs	r2, #0
 8016204:	6839      	ldr	r1, [r7, #0]
 8016206:	f7ef ff29 	bl	800605c <osMessageQueueGet>
 801620a:	4603      	mov	r3, r0
 801620c:	2b00      	cmp	r3, #0
 801620e:	d101      	bne.n	8016214 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8016210:	2300      	movs	r3, #0
 8016212:	e001      	b.n	8016218 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8016214:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8016218:	4618      	mov	r0, r3
 801621a:	3708      	adds	r7, #8
 801621c:	46bd      	mov	sp, r7
 801621e:	bd80      	pop	{r7, pc}

08016220 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8016220:	b480      	push	{r7}
 8016222:	b083      	sub	sp, #12
 8016224:	af00      	add	r7, sp, #0
 8016226:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	681b      	ldr	r3, [r3, #0]
 801622c:	2b00      	cmp	r3, #0
 801622e:	d101      	bne.n	8016234 <sys_mbox_valid+0x14>
    return 0;
 8016230:	2300      	movs	r3, #0
 8016232:	e000      	b.n	8016236 <sys_mbox_valid+0x16>
  else
    return 1;
 8016234:	2301      	movs	r3, #1
}
 8016236:	4618      	mov	r0, r3
 8016238:	370c      	adds	r7, #12
 801623a:	46bd      	mov	sp, r7
 801623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016240:	4770      	bx	lr

08016242 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8016242:	b480      	push	{r7}
 8016244:	b083      	sub	sp, #12
 8016246:	af00      	add	r7, sp, #0
 8016248:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	2200      	movs	r2, #0
 801624e:	601a      	str	r2, [r3, #0]
}
 8016250:	bf00      	nop
 8016252:	370c      	adds	r7, #12
 8016254:	46bd      	mov	sp, r7
 8016256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801625a:	4770      	bx	lr

0801625c <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801625c:	b580      	push	{r7, lr}
 801625e:	b082      	sub	sp, #8
 8016260:	af00      	add	r7, sp, #0
 8016262:	6078      	str	r0, [r7, #4]
 8016264:	460b      	mov	r3, r1
 8016266:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 8016268:	78fb      	ldrb	r3, [r7, #3]
 801626a:	2200      	movs	r2, #0
 801626c:	4619      	mov	r1, r3
 801626e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8016272:	f7ef fcdb 	bl	8005c2c <osSemaphoreNew>
 8016276:	4602      	mov	r2, r0
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	681b      	ldr	r3, [r3, #0]
 8016280:	2b00      	cmp	r3, #0
 8016282:	d102      	bne.n	801628a <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016284:	f04f 33ff 	mov.w	r3, #4294967295
 8016288:	e009      	b.n	801629e <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801628a:	78fb      	ldrb	r3, [r7, #3]
 801628c:	2b00      	cmp	r3, #0
 801628e:	d105      	bne.n	801629c <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	681b      	ldr	r3, [r3, #0]
 8016294:	2100      	movs	r1, #0
 8016296:	4618      	mov	r0, r3
 8016298:	f7ef fd52 	bl	8005d40 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801629c:	2300      	movs	r3, #0
}
 801629e:	4618      	mov	r0, r3
 80162a0:	3708      	adds	r7, #8
 80162a2:	46bd      	mov	sp, r7
 80162a4:	bd80      	pop	{r7, pc}

080162a6 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80162a6:	b580      	push	{r7, lr}
 80162a8:	b084      	sub	sp, #16
 80162aa:	af00      	add	r7, sp, #0
 80162ac:	6078      	str	r0, [r7, #4]
 80162ae:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 80162b0:	f7ef faec 	bl	800588c <osKernelGetTickCount>
 80162b4:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 80162b6:	683b      	ldr	r3, [r7, #0]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d011      	beq.n	80162e0 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	6839      	ldr	r1, [r7, #0]
 80162c2:	4618      	mov	r0, r3
 80162c4:	f7ef fd3c 	bl	8005d40 <osSemaphoreAcquire>
 80162c8:	4603      	mov	r3, r0
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d105      	bne.n	80162da <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 80162ce:	f7ef fadd 	bl	800588c <osKernelGetTickCount>
 80162d2:	4602      	mov	r2, r0
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	1ad3      	subs	r3, r2, r3
 80162d8:	e012      	b.n	8016300 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80162da:	f04f 33ff 	mov.w	r3, #4294967295
 80162de:	e00f      	b.n	8016300 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 80162e0:	bf00      	nop
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	681b      	ldr	r3, [r3, #0]
 80162e6:	f04f 31ff 	mov.w	r1, #4294967295
 80162ea:	4618      	mov	r0, r3
 80162ec:	f7ef fd28 	bl	8005d40 <osSemaphoreAcquire>
 80162f0:	4603      	mov	r3, r0
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d1f5      	bne.n	80162e2 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 80162f6:	f7ef fac9 	bl	800588c <osKernelGetTickCount>
 80162fa:	4602      	mov	r2, r0
 80162fc:	68fb      	ldr	r3, [r7, #12]
 80162fe:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8016300:	4618      	mov	r0, r3
 8016302:	3710      	adds	r7, #16
 8016304:	46bd      	mov	sp, r7
 8016306:	bd80      	pop	{r7, pc}

08016308 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8016308:	b580      	push	{r7, lr}
 801630a:	b082      	sub	sp, #8
 801630c:	af00      	add	r7, sp, #0
 801630e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	681b      	ldr	r3, [r3, #0]
 8016314:	4618      	mov	r0, r3
 8016316:	f7ef fd65 	bl	8005de4 <osSemaphoreRelease>
}
 801631a:	bf00      	nop
 801631c:	3708      	adds	r7, #8
 801631e:	46bd      	mov	sp, r7
 8016320:	bd80      	pop	{r7, pc}

08016322 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8016322:	b580      	push	{r7, lr}
 8016324:	b082      	sub	sp, #8
 8016326:	af00      	add	r7, sp, #0
 8016328:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	681b      	ldr	r3, [r3, #0]
 801632e:	4618      	mov	r0, r3
 8016330:	f7ef fd9c 	bl	8005e6c <osSemaphoreDelete>
}
 8016334:	bf00      	nop
 8016336:	3708      	adds	r7, #8
 8016338:	46bd      	mov	sp, r7
 801633a:	bd80      	pop	{r7, pc}

0801633c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801633c:	b480      	push	{r7}
 801633e:	b083      	sub	sp, #12
 8016340:	af00      	add	r7, sp, #0
 8016342:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	681b      	ldr	r3, [r3, #0]
 8016348:	2b00      	cmp	r3, #0
 801634a:	d101      	bne.n	8016350 <sys_sem_valid+0x14>
    return 0;
 801634c:	2300      	movs	r3, #0
 801634e:	e000      	b.n	8016352 <sys_sem_valid+0x16>
  else
    return 1;
 8016350:	2301      	movs	r3, #1
}
 8016352:	4618      	mov	r0, r3
 8016354:	370c      	adds	r7, #12
 8016356:	46bd      	mov	sp, r7
 8016358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801635c:	4770      	bx	lr

0801635e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801635e:	b480      	push	{r7}
 8016360:	b083      	sub	sp, #12
 8016362:	af00      	add	r7, sp, #0
 8016364:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	2200      	movs	r2, #0
 801636a:	601a      	str	r2, [r3, #0]
}
 801636c:	bf00      	nop
 801636e:	370c      	adds	r7, #12
 8016370:	46bd      	mov	sp, r7
 8016372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016376:	4770      	bx	lr

08016378 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8016378:	b580      	push	{r7, lr}
 801637a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801637c:	2000      	movs	r0, #0
 801637e:	f7ef fb47 	bl	8005a10 <osMutexNew>
 8016382:	4603      	mov	r3, r0
 8016384:	4a01      	ldr	r2, [pc, #4]	@ (801638c <sys_init+0x14>)
 8016386:	6013      	str	r3, [r2, #0]
#endif
}
 8016388:	bf00      	nop
 801638a:	bd80      	pop	{r7, pc}
 801638c:	24008058 	.word	0x24008058

08016390 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8016390:	b580      	push	{r7, lr}
 8016392:	b082      	sub	sp, #8
 8016394:	af00      	add	r7, sp, #0
 8016396:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8016398:	2000      	movs	r0, #0
 801639a:	f7ef fb39 	bl	8005a10 <osMutexNew>
 801639e:	4602      	mov	r2, r0
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d102      	bne.n	80163b2 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80163ac:	f04f 33ff 	mov.w	r3, #4294967295
 80163b0:	e000      	b.n	80163b4 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80163b2:	2300      	movs	r3, #0
}
 80163b4:	4618      	mov	r0, r3
 80163b6:	3708      	adds	r7, #8
 80163b8:	46bd      	mov	sp, r7
 80163ba:	bd80      	pop	{r7, pc}

080163bc <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80163bc:	b580      	push	{r7, lr}
 80163be:	b082      	sub	sp, #8
 80163c0:	af00      	add	r7, sp, #0
 80163c2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	681b      	ldr	r3, [r3, #0]
 80163c8:	f04f 31ff 	mov.w	r1, #4294967295
 80163cc:	4618      	mov	r0, r3
 80163ce:	f7ef fba5 	bl	8005b1c <osMutexAcquire>
#endif
}
 80163d2:	bf00      	nop
 80163d4:	3708      	adds	r7, #8
 80163d6:	46bd      	mov	sp, r7
 80163d8:	bd80      	pop	{r7, pc}

080163da <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80163da:	b580      	push	{r7, lr}
 80163dc:	b082      	sub	sp, #8
 80163de:	af00      	add	r7, sp, #0
 80163e0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	681b      	ldr	r3, [r3, #0]
 80163e6:	4618      	mov	r0, r3
 80163e8:	f7ef fbe3 	bl	8005bb2 <osMutexRelease>
}
 80163ec:	bf00      	nop
 80163ee:	3708      	adds	r7, #8
 80163f0:	46bd      	mov	sp, r7
 80163f2:	bd80      	pop	{r7, pc}

080163f4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80163f4:	b580      	push	{r7, lr}
 80163f6:	b08e      	sub	sp, #56	@ 0x38
 80163f8:	af00      	add	r7, sp, #0
 80163fa:	60f8      	str	r0, [r7, #12]
 80163fc:	60b9      	str	r1, [r7, #8]
 80163fe:	607a      	str	r2, [r7, #4]
 8016400:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8016402:	f107 0314 	add.w	r3, r7, #20
 8016406:	2224      	movs	r2, #36	@ 0x24
 8016408:	2100      	movs	r1, #0
 801640a:	4618      	mov	r0, r3
 801640c:	f000 f995 	bl	801673a <memset>
 8016410:	68fb      	ldr	r3, [r7, #12]
 8016412:	617b      	str	r3, [r7, #20]
 8016414:	683b      	ldr	r3, [r7, #0]
 8016416:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016418:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801641a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801641c:	f107 0314 	add.w	r3, r7, #20
 8016420:	461a      	mov	r2, r3
 8016422:	6879      	ldr	r1, [r7, #4]
 8016424:	68b8      	ldr	r0, [r7, #8]
 8016426:	f7ef fa46 	bl	80058b6 <osThreadNew>
 801642a:	4603      	mov	r3, r0
#endif
}
 801642c:	4618      	mov	r0, r3
 801642e:	3738      	adds	r7, #56	@ 0x38
 8016430:	46bd      	mov	sp, r7
 8016432:	bd80      	pop	{r7, pc}

08016434 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016434:	b580      	push	{r7, lr}
 8016436:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8016438:	4b04      	ldr	r3, [pc, #16]	@ (801644c <sys_arch_protect+0x18>)
 801643a:	681b      	ldr	r3, [r3, #0]
 801643c:	f04f 31ff 	mov.w	r1, #4294967295
 8016440:	4618      	mov	r0, r3
 8016442:	f7ef fb6b 	bl	8005b1c <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8016446:	2301      	movs	r3, #1
}
 8016448:	4618      	mov	r0, r3
 801644a:	bd80      	pop	{r7, pc}
 801644c:	24008058 	.word	0x24008058

08016450 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016450:	b580      	push	{r7, lr}
 8016452:	b082      	sub	sp, #8
 8016454:	af00      	add	r7, sp, #0
 8016456:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016458:	4b04      	ldr	r3, [pc, #16]	@ (801646c <sys_arch_unprotect+0x1c>)
 801645a:	681b      	ldr	r3, [r3, #0]
 801645c:	4618      	mov	r0, r3
 801645e:	f7ef fba8 	bl	8005bb2 <osMutexRelease>
}
 8016462:	bf00      	nop
 8016464:	3708      	adds	r7, #8
 8016466:	46bd      	mov	sp, r7
 8016468:	bd80      	pop	{r7, pc}
 801646a:	bf00      	nop
 801646c:	24008058 	.word	0x24008058

08016470 <rand>:
 8016470:	4b16      	ldr	r3, [pc, #88]	@ (80164cc <rand+0x5c>)
 8016472:	b510      	push	{r4, lr}
 8016474:	681c      	ldr	r4, [r3, #0]
 8016476:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016478:	b9b3      	cbnz	r3, 80164a8 <rand+0x38>
 801647a:	2018      	movs	r0, #24
 801647c:	f000 faa0 	bl	80169c0 <malloc>
 8016480:	4602      	mov	r2, r0
 8016482:	6320      	str	r0, [r4, #48]	@ 0x30
 8016484:	b920      	cbnz	r0, 8016490 <rand+0x20>
 8016486:	4b12      	ldr	r3, [pc, #72]	@ (80164d0 <rand+0x60>)
 8016488:	4812      	ldr	r0, [pc, #72]	@ (80164d4 <rand+0x64>)
 801648a:	2152      	movs	r1, #82	@ 0x52
 801648c:	f000 fa30 	bl	80168f0 <__assert_func>
 8016490:	4911      	ldr	r1, [pc, #68]	@ (80164d8 <rand+0x68>)
 8016492:	4b12      	ldr	r3, [pc, #72]	@ (80164dc <rand+0x6c>)
 8016494:	e9c0 1300 	strd	r1, r3, [r0]
 8016498:	4b11      	ldr	r3, [pc, #68]	@ (80164e0 <rand+0x70>)
 801649a:	6083      	str	r3, [r0, #8]
 801649c:	230b      	movs	r3, #11
 801649e:	8183      	strh	r3, [r0, #12]
 80164a0:	2100      	movs	r1, #0
 80164a2:	2001      	movs	r0, #1
 80164a4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80164a8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80164aa:	480e      	ldr	r0, [pc, #56]	@ (80164e4 <rand+0x74>)
 80164ac:	690b      	ldr	r3, [r1, #16]
 80164ae:	694c      	ldr	r4, [r1, #20]
 80164b0:	4a0d      	ldr	r2, [pc, #52]	@ (80164e8 <rand+0x78>)
 80164b2:	4358      	muls	r0, r3
 80164b4:	fb02 0004 	mla	r0, r2, r4, r0
 80164b8:	fba3 3202 	umull	r3, r2, r3, r2
 80164bc:	3301      	adds	r3, #1
 80164be:	eb40 0002 	adc.w	r0, r0, r2
 80164c2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80164c6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80164ca:	bd10      	pop	{r4, pc}
 80164cc:	24000040 	.word	0x24000040
 80164d0:	0801ac12 	.word	0x0801ac12
 80164d4:	0801ac29 	.word	0x0801ac29
 80164d8:	abcd330e 	.word	0xabcd330e
 80164dc:	e66d1234 	.word	0xe66d1234
 80164e0:	0005deec 	.word	0x0005deec
 80164e4:	5851f42d 	.word	0x5851f42d
 80164e8:	4c957f2d 	.word	0x4c957f2d

080164ec <std>:
 80164ec:	2300      	movs	r3, #0
 80164ee:	b510      	push	{r4, lr}
 80164f0:	4604      	mov	r4, r0
 80164f2:	e9c0 3300 	strd	r3, r3, [r0]
 80164f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80164fa:	6083      	str	r3, [r0, #8]
 80164fc:	8181      	strh	r1, [r0, #12]
 80164fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8016500:	81c2      	strh	r2, [r0, #14]
 8016502:	6183      	str	r3, [r0, #24]
 8016504:	4619      	mov	r1, r3
 8016506:	2208      	movs	r2, #8
 8016508:	305c      	adds	r0, #92	@ 0x5c
 801650a:	f000 f916 	bl	801673a <memset>
 801650e:	4b0d      	ldr	r3, [pc, #52]	@ (8016544 <std+0x58>)
 8016510:	6263      	str	r3, [r4, #36]	@ 0x24
 8016512:	4b0d      	ldr	r3, [pc, #52]	@ (8016548 <std+0x5c>)
 8016514:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016516:	4b0d      	ldr	r3, [pc, #52]	@ (801654c <std+0x60>)
 8016518:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801651a:	4b0d      	ldr	r3, [pc, #52]	@ (8016550 <std+0x64>)
 801651c:	6323      	str	r3, [r4, #48]	@ 0x30
 801651e:	4b0d      	ldr	r3, [pc, #52]	@ (8016554 <std+0x68>)
 8016520:	6224      	str	r4, [r4, #32]
 8016522:	429c      	cmp	r4, r3
 8016524:	d006      	beq.n	8016534 <std+0x48>
 8016526:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801652a:	4294      	cmp	r4, r2
 801652c:	d002      	beq.n	8016534 <std+0x48>
 801652e:	33d0      	adds	r3, #208	@ 0xd0
 8016530:	429c      	cmp	r4, r3
 8016532:	d105      	bne.n	8016540 <std+0x54>
 8016534:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801653c:	f000 b9c6 	b.w	80168cc <__retarget_lock_init_recursive>
 8016540:	bd10      	pop	{r4, pc}
 8016542:	bf00      	nop
 8016544:	08016695 	.word	0x08016695
 8016548:	080166b7 	.word	0x080166b7
 801654c:	080166ef 	.word	0x080166ef
 8016550:	08016713 	.word	0x08016713
 8016554:	2400805c 	.word	0x2400805c

08016558 <stdio_exit_handler>:
 8016558:	4a02      	ldr	r2, [pc, #8]	@ (8016564 <stdio_exit_handler+0xc>)
 801655a:	4903      	ldr	r1, [pc, #12]	@ (8016568 <stdio_exit_handler+0x10>)
 801655c:	4803      	ldr	r0, [pc, #12]	@ (801656c <stdio_exit_handler+0x14>)
 801655e:	f000 b869 	b.w	8016634 <_fwalk_sglue>
 8016562:	bf00      	nop
 8016564:	24000034 	.word	0x24000034
 8016568:	080171d5 	.word	0x080171d5
 801656c:	24000044 	.word	0x24000044

08016570 <cleanup_stdio>:
 8016570:	6841      	ldr	r1, [r0, #4]
 8016572:	4b0c      	ldr	r3, [pc, #48]	@ (80165a4 <cleanup_stdio+0x34>)
 8016574:	4299      	cmp	r1, r3
 8016576:	b510      	push	{r4, lr}
 8016578:	4604      	mov	r4, r0
 801657a:	d001      	beq.n	8016580 <cleanup_stdio+0x10>
 801657c:	f000 fe2a 	bl	80171d4 <_fflush_r>
 8016580:	68a1      	ldr	r1, [r4, #8]
 8016582:	4b09      	ldr	r3, [pc, #36]	@ (80165a8 <cleanup_stdio+0x38>)
 8016584:	4299      	cmp	r1, r3
 8016586:	d002      	beq.n	801658e <cleanup_stdio+0x1e>
 8016588:	4620      	mov	r0, r4
 801658a:	f000 fe23 	bl	80171d4 <_fflush_r>
 801658e:	68e1      	ldr	r1, [r4, #12]
 8016590:	4b06      	ldr	r3, [pc, #24]	@ (80165ac <cleanup_stdio+0x3c>)
 8016592:	4299      	cmp	r1, r3
 8016594:	d004      	beq.n	80165a0 <cleanup_stdio+0x30>
 8016596:	4620      	mov	r0, r4
 8016598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801659c:	f000 be1a 	b.w	80171d4 <_fflush_r>
 80165a0:	bd10      	pop	{r4, pc}
 80165a2:	bf00      	nop
 80165a4:	2400805c 	.word	0x2400805c
 80165a8:	240080c4 	.word	0x240080c4
 80165ac:	2400812c 	.word	0x2400812c

080165b0 <global_stdio_init.part.0>:
 80165b0:	b510      	push	{r4, lr}
 80165b2:	4b0b      	ldr	r3, [pc, #44]	@ (80165e0 <global_stdio_init.part.0+0x30>)
 80165b4:	4c0b      	ldr	r4, [pc, #44]	@ (80165e4 <global_stdio_init.part.0+0x34>)
 80165b6:	4a0c      	ldr	r2, [pc, #48]	@ (80165e8 <global_stdio_init.part.0+0x38>)
 80165b8:	601a      	str	r2, [r3, #0]
 80165ba:	4620      	mov	r0, r4
 80165bc:	2200      	movs	r2, #0
 80165be:	2104      	movs	r1, #4
 80165c0:	f7ff ff94 	bl	80164ec <std>
 80165c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80165c8:	2201      	movs	r2, #1
 80165ca:	2109      	movs	r1, #9
 80165cc:	f7ff ff8e 	bl	80164ec <std>
 80165d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80165d4:	2202      	movs	r2, #2
 80165d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80165da:	2112      	movs	r1, #18
 80165dc:	f7ff bf86 	b.w	80164ec <std>
 80165e0:	24008194 	.word	0x24008194
 80165e4:	2400805c 	.word	0x2400805c
 80165e8:	08016559 	.word	0x08016559

080165ec <__sfp_lock_acquire>:
 80165ec:	4801      	ldr	r0, [pc, #4]	@ (80165f4 <__sfp_lock_acquire+0x8>)
 80165ee:	f000 b96e 	b.w	80168ce <__retarget_lock_acquire_recursive>
 80165f2:	bf00      	nop
 80165f4:	2400819d 	.word	0x2400819d

080165f8 <__sfp_lock_release>:
 80165f8:	4801      	ldr	r0, [pc, #4]	@ (8016600 <__sfp_lock_release+0x8>)
 80165fa:	f000 b969 	b.w	80168d0 <__retarget_lock_release_recursive>
 80165fe:	bf00      	nop
 8016600:	2400819d 	.word	0x2400819d

08016604 <__sinit>:
 8016604:	b510      	push	{r4, lr}
 8016606:	4604      	mov	r4, r0
 8016608:	f7ff fff0 	bl	80165ec <__sfp_lock_acquire>
 801660c:	6a23      	ldr	r3, [r4, #32]
 801660e:	b11b      	cbz	r3, 8016618 <__sinit+0x14>
 8016610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016614:	f7ff bff0 	b.w	80165f8 <__sfp_lock_release>
 8016618:	4b04      	ldr	r3, [pc, #16]	@ (801662c <__sinit+0x28>)
 801661a:	6223      	str	r3, [r4, #32]
 801661c:	4b04      	ldr	r3, [pc, #16]	@ (8016630 <__sinit+0x2c>)
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	2b00      	cmp	r3, #0
 8016622:	d1f5      	bne.n	8016610 <__sinit+0xc>
 8016624:	f7ff ffc4 	bl	80165b0 <global_stdio_init.part.0>
 8016628:	e7f2      	b.n	8016610 <__sinit+0xc>
 801662a:	bf00      	nop
 801662c:	08016571 	.word	0x08016571
 8016630:	24008194 	.word	0x24008194

08016634 <_fwalk_sglue>:
 8016634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016638:	4607      	mov	r7, r0
 801663a:	4688      	mov	r8, r1
 801663c:	4614      	mov	r4, r2
 801663e:	2600      	movs	r6, #0
 8016640:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016644:	f1b9 0901 	subs.w	r9, r9, #1
 8016648:	d505      	bpl.n	8016656 <_fwalk_sglue+0x22>
 801664a:	6824      	ldr	r4, [r4, #0]
 801664c:	2c00      	cmp	r4, #0
 801664e:	d1f7      	bne.n	8016640 <_fwalk_sglue+0xc>
 8016650:	4630      	mov	r0, r6
 8016652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016656:	89ab      	ldrh	r3, [r5, #12]
 8016658:	2b01      	cmp	r3, #1
 801665a:	d907      	bls.n	801666c <_fwalk_sglue+0x38>
 801665c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016660:	3301      	adds	r3, #1
 8016662:	d003      	beq.n	801666c <_fwalk_sglue+0x38>
 8016664:	4629      	mov	r1, r5
 8016666:	4638      	mov	r0, r7
 8016668:	47c0      	blx	r8
 801666a:	4306      	orrs	r6, r0
 801666c:	3568      	adds	r5, #104	@ 0x68
 801666e:	e7e9      	b.n	8016644 <_fwalk_sglue+0x10>

08016670 <iprintf>:
 8016670:	b40f      	push	{r0, r1, r2, r3}
 8016672:	b507      	push	{r0, r1, r2, lr}
 8016674:	4906      	ldr	r1, [pc, #24]	@ (8016690 <iprintf+0x20>)
 8016676:	ab04      	add	r3, sp, #16
 8016678:	6808      	ldr	r0, [r1, #0]
 801667a:	f853 2b04 	ldr.w	r2, [r3], #4
 801667e:	6881      	ldr	r1, [r0, #8]
 8016680:	9301      	str	r3, [sp, #4]
 8016682:	f000 fa7d 	bl	8016b80 <_vfiprintf_r>
 8016686:	b003      	add	sp, #12
 8016688:	f85d eb04 	ldr.w	lr, [sp], #4
 801668c:	b004      	add	sp, #16
 801668e:	4770      	bx	lr
 8016690:	24000040 	.word	0x24000040

08016694 <__sread>:
 8016694:	b510      	push	{r4, lr}
 8016696:	460c      	mov	r4, r1
 8016698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801669c:	f000 f8ce 	bl	801683c <_read_r>
 80166a0:	2800      	cmp	r0, #0
 80166a2:	bfab      	itete	ge
 80166a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80166a6:	89a3      	ldrhlt	r3, [r4, #12]
 80166a8:	181b      	addge	r3, r3, r0
 80166aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80166ae:	bfac      	ite	ge
 80166b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80166b2:	81a3      	strhlt	r3, [r4, #12]
 80166b4:	bd10      	pop	{r4, pc}

080166b6 <__swrite>:
 80166b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166ba:	461f      	mov	r7, r3
 80166bc:	898b      	ldrh	r3, [r1, #12]
 80166be:	05db      	lsls	r3, r3, #23
 80166c0:	4605      	mov	r5, r0
 80166c2:	460c      	mov	r4, r1
 80166c4:	4616      	mov	r6, r2
 80166c6:	d505      	bpl.n	80166d4 <__swrite+0x1e>
 80166c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80166cc:	2302      	movs	r3, #2
 80166ce:	2200      	movs	r2, #0
 80166d0:	f000 f8a2 	bl	8016818 <_lseek_r>
 80166d4:	89a3      	ldrh	r3, [r4, #12]
 80166d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80166da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80166de:	81a3      	strh	r3, [r4, #12]
 80166e0:	4632      	mov	r2, r6
 80166e2:	463b      	mov	r3, r7
 80166e4:	4628      	mov	r0, r5
 80166e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80166ea:	f000 b8b9 	b.w	8016860 <_write_r>

080166ee <__sseek>:
 80166ee:	b510      	push	{r4, lr}
 80166f0:	460c      	mov	r4, r1
 80166f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80166f6:	f000 f88f 	bl	8016818 <_lseek_r>
 80166fa:	1c43      	adds	r3, r0, #1
 80166fc:	89a3      	ldrh	r3, [r4, #12]
 80166fe:	bf15      	itete	ne
 8016700:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016702:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016706:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801670a:	81a3      	strheq	r3, [r4, #12]
 801670c:	bf18      	it	ne
 801670e:	81a3      	strhne	r3, [r4, #12]
 8016710:	bd10      	pop	{r4, pc}

08016712 <__sclose>:
 8016712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016716:	f000 b819 	b.w	801674c <_close_r>

0801671a <memcmp>:
 801671a:	b510      	push	{r4, lr}
 801671c:	3901      	subs	r1, #1
 801671e:	4402      	add	r2, r0
 8016720:	4290      	cmp	r0, r2
 8016722:	d101      	bne.n	8016728 <memcmp+0xe>
 8016724:	2000      	movs	r0, #0
 8016726:	e005      	b.n	8016734 <memcmp+0x1a>
 8016728:	7803      	ldrb	r3, [r0, #0]
 801672a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801672e:	42a3      	cmp	r3, r4
 8016730:	d001      	beq.n	8016736 <memcmp+0x1c>
 8016732:	1b18      	subs	r0, r3, r4
 8016734:	bd10      	pop	{r4, pc}
 8016736:	3001      	adds	r0, #1
 8016738:	e7f2      	b.n	8016720 <memcmp+0x6>

0801673a <memset>:
 801673a:	4402      	add	r2, r0
 801673c:	4603      	mov	r3, r0
 801673e:	4293      	cmp	r3, r2
 8016740:	d100      	bne.n	8016744 <memset+0xa>
 8016742:	4770      	bx	lr
 8016744:	f803 1b01 	strb.w	r1, [r3], #1
 8016748:	e7f9      	b.n	801673e <memset+0x4>
	...

0801674c <_close_r>:
 801674c:	b538      	push	{r3, r4, r5, lr}
 801674e:	4d06      	ldr	r5, [pc, #24]	@ (8016768 <_close_r+0x1c>)
 8016750:	2300      	movs	r3, #0
 8016752:	4604      	mov	r4, r0
 8016754:	4608      	mov	r0, r1
 8016756:	602b      	str	r3, [r5, #0]
 8016758:	f7ea f948 	bl	80009ec <_close>
 801675c:	1c43      	adds	r3, r0, #1
 801675e:	d102      	bne.n	8016766 <_close_r+0x1a>
 8016760:	682b      	ldr	r3, [r5, #0]
 8016762:	b103      	cbz	r3, 8016766 <_close_r+0x1a>
 8016764:	6023      	str	r3, [r4, #0]
 8016766:	bd38      	pop	{r3, r4, r5, pc}
 8016768:	24008198 	.word	0x24008198

0801676c <_reclaim_reent>:
 801676c:	4b29      	ldr	r3, [pc, #164]	@ (8016814 <_reclaim_reent+0xa8>)
 801676e:	681b      	ldr	r3, [r3, #0]
 8016770:	4283      	cmp	r3, r0
 8016772:	b570      	push	{r4, r5, r6, lr}
 8016774:	4604      	mov	r4, r0
 8016776:	d04b      	beq.n	8016810 <_reclaim_reent+0xa4>
 8016778:	69c3      	ldr	r3, [r0, #28]
 801677a:	b1ab      	cbz	r3, 80167a8 <_reclaim_reent+0x3c>
 801677c:	68db      	ldr	r3, [r3, #12]
 801677e:	b16b      	cbz	r3, 801679c <_reclaim_reent+0x30>
 8016780:	2500      	movs	r5, #0
 8016782:	69e3      	ldr	r3, [r4, #28]
 8016784:	68db      	ldr	r3, [r3, #12]
 8016786:	5959      	ldr	r1, [r3, r5]
 8016788:	2900      	cmp	r1, #0
 801678a:	d13b      	bne.n	8016804 <_reclaim_reent+0x98>
 801678c:	3504      	adds	r5, #4
 801678e:	2d80      	cmp	r5, #128	@ 0x80
 8016790:	d1f7      	bne.n	8016782 <_reclaim_reent+0x16>
 8016792:	69e3      	ldr	r3, [r4, #28]
 8016794:	4620      	mov	r0, r4
 8016796:	68d9      	ldr	r1, [r3, #12]
 8016798:	f000 f8c8 	bl	801692c <_free_r>
 801679c:	69e3      	ldr	r3, [r4, #28]
 801679e:	6819      	ldr	r1, [r3, #0]
 80167a0:	b111      	cbz	r1, 80167a8 <_reclaim_reent+0x3c>
 80167a2:	4620      	mov	r0, r4
 80167a4:	f000 f8c2 	bl	801692c <_free_r>
 80167a8:	6961      	ldr	r1, [r4, #20]
 80167aa:	b111      	cbz	r1, 80167b2 <_reclaim_reent+0x46>
 80167ac:	4620      	mov	r0, r4
 80167ae:	f000 f8bd 	bl	801692c <_free_r>
 80167b2:	69e1      	ldr	r1, [r4, #28]
 80167b4:	b111      	cbz	r1, 80167bc <_reclaim_reent+0x50>
 80167b6:	4620      	mov	r0, r4
 80167b8:	f000 f8b8 	bl	801692c <_free_r>
 80167bc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80167be:	b111      	cbz	r1, 80167c6 <_reclaim_reent+0x5a>
 80167c0:	4620      	mov	r0, r4
 80167c2:	f000 f8b3 	bl	801692c <_free_r>
 80167c6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80167c8:	b111      	cbz	r1, 80167d0 <_reclaim_reent+0x64>
 80167ca:	4620      	mov	r0, r4
 80167cc:	f000 f8ae 	bl	801692c <_free_r>
 80167d0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80167d2:	b111      	cbz	r1, 80167da <_reclaim_reent+0x6e>
 80167d4:	4620      	mov	r0, r4
 80167d6:	f000 f8a9 	bl	801692c <_free_r>
 80167da:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80167dc:	b111      	cbz	r1, 80167e4 <_reclaim_reent+0x78>
 80167de:	4620      	mov	r0, r4
 80167e0:	f000 f8a4 	bl	801692c <_free_r>
 80167e4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80167e6:	b111      	cbz	r1, 80167ee <_reclaim_reent+0x82>
 80167e8:	4620      	mov	r0, r4
 80167ea:	f000 f89f 	bl	801692c <_free_r>
 80167ee:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80167f0:	b111      	cbz	r1, 80167f8 <_reclaim_reent+0x8c>
 80167f2:	4620      	mov	r0, r4
 80167f4:	f000 f89a 	bl	801692c <_free_r>
 80167f8:	6a23      	ldr	r3, [r4, #32]
 80167fa:	b14b      	cbz	r3, 8016810 <_reclaim_reent+0xa4>
 80167fc:	4620      	mov	r0, r4
 80167fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016802:	4718      	bx	r3
 8016804:	680e      	ldr	r6, [r1, #0]
 8016806:	4620      	mov	r0, r4
 8016808:	f000 f890 	bl	801692c <_free_r>
 801680c:	4631      	mov	r1, r6
 801680e:	e7bb      	b.n	8016788 <_reclaim_reent+0x1c>
 8016810:	bd70      	pop	{r4, r5, r6, pc}
 8016812:	bf00      	nop
 8016814:	24000040 	.word	0x24000040

08016818 <_lseek_r>:
 8016818:	b538      	push	{r3, r4, r5, lr}
 801681a:	4d07      	ldr	r5, [pc, #28]	@ (8016838 <_lseek_r+0x20>)
 801681c:	4604      	mov	r4, r0
 801681e:	4608      	mov	r0, r1
 8016820:	4611      	mov	r1, r2
 8016822:	2200      	movs	r2, #0
 8016824:	602a      	str	r2, [r5, #0]
 8016826:	461a      	mov	r2, r3
 8016828:	f7ea f907 	bl	8000a3a <_lseek>
 801682c:	1c43      	adds	r3, r0, #1
 801682e:	d102      	bne.n	8016836 <_lseek_r+0x1e>
 8016830:	682b      	ldr	r3, [r5, #0]
 8016832:	b103      	cbz	r3, 8016836 <_lseek_r+0x1e>
 8016834:	6023      	str	r3, [r4, #0]
 8016836:	bd38      	pop	{r3, r4, r5, pc}
 8016838:	24008198 	.word	0x24008198

0801683c <_read_r>:
 801683c:	b538      	push	{r3, r4, r5, lr}
 801683e:	4d07      	ldr	r5, [pc, #28]	@ (801685c <_read_r+0x20>)
 8016840:	4604      	mov	r4, r0
 8016842:	4608      	mov	r0, r1
 8016844:	4611      	mov	r1, r2
 8016846:	2200      	movs	r2, #0
 8016848:	602a      	str	r2, [r5, #0]
 801684a:	461a      	mov	r2, r3
 801684c:	f7ea f895 	bl	800097a <_read>
 8016850:	1c43      	adds	r3, r0, #1
 8016852:	d102      	bne.n	801685a <_read_r+0x1e>
 8016854:	682b      	ldr	r3, [r5, #0]
 8016856:	b103      	cbz	r3, 801685a <_read_r+0x1e>
 8016858:	6023      	str	r3, [r4, #0]
 801685a:	bd38      	pop	{r3, r4, r5, pc}
 801685c:	24008198 	.word	0x24008198

08016860 <_write_r>:
 8016860:	b538      	push	{r3, r4, r5, lr}
 8016862:	4d07      	ldr	r5, [pc, #28]	@ (8016880 <_write_r+0x20>)
 8016864:	4604      	mov	r4, r0
 8016866:	4608      	mov	r0, r1
 8016868:	4611      	mov	r1, r2
 801686a:	2200      	movs	r2, #0
 801686c:	602a      	str	r2, [r5, #0]
 801686e:	461a      	mov	r2, r3
 8016870:	f7ea f8a0 	bl	80009b4 <_write>
 8016874:	1c43      	adds	r3, r0, #1
 8016876:	d102      	bne.n	801687e <_write_r+0x1e>
 8016878:	682b      	ldr	r3, [r5, #0]
 801687a:	b103      	cbz	r3, 801687e <_write_r+0x1e>
 801687c:	6023      	str	r3, [r4, #0]
 801687e:	bd38      	pop	{r3, r4, r5, pc}
 8016880:	24008198 	.word	0x24008198

08016884 <__libc_init_array>:
 8016884:	b570      	push	{r4, r5, r6, lr}
 8016886:	4d0d      	ldr	r5, [pc, #52]	@ (80168bc <__libc_init_array+0x38>)
 8016888:	4c0d      	ldr	r4, [pc, #52]	@ (80168c0 <__libc_init_array+0x3c>)
 801688a:	1b64      	subs	r4, r4, r5
 801688c:	10a4      	asrs	r4, r4, #2
 801688e:	2600      	movs	r6, #0
 8016890:	42a6      	cmp	r6, r4
 8016892:	d109      	bne.n	80168a8 <__libc_init_array+0x24>
 8016894:	4d0b      	ldr	r5, [pc, #44]	@ (80168c4 <__libc_init_array+0x40>)
 8016896:	4c0c      	ldr	r4, [pc, #48]	@ (80168c8 <__libc_init_array+0x44>)
 8016898:	f000 fe4a 	bl	8017530 <_init>
 801689c:	1b64      	subs	r4, r4, r5
 801689e:	10a4      	asrs	r4, r4, #2
 80168a0:	2600      	movs	r6, #0
 80168a2:	42a6      	cmp	r6, r4
 80168a4:	d105      	bne.n	80168b2 <__libc_init_array+0x2e>
 80168a6:	bd70      	pop	{r4, r5, r6, pc}
 80168a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80168ac:	4798      	blx	r3
 80168ae:	3601      	adds	r6, #1
 80168b0:	e7ee      	b.n	8016890 <__libc_init_array+0xc>
 80168b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80168b6:	4798      	blx	r3
 80168b8:	3601      	adds	r6, #1
 80168ba:	e7f2      	b.n	80168a2 <__libc_init_array+0x1e>
 80168bc:	0801acf8 	.word	0x0801acf8
 80168c0:	0801acf8 	.word	0x0801acf8
 80168c4:	0801acf8 	.word	0x0801acf8
 80168c8:	0801acfc 	.word	0x0801acfc

080168cc <__retarget_lock_init_recursive>:
 80168cc:	4770      	bx	lr

080168ce <__retarget_lock_acquire_recursive>:
 80168ce:	4770      	bx	lr

080168d0 <__retarget_lock_release_recursive>:
 80168d0:	4770      	bx	lr

080168d2 <memcpy>:
 80168d2:	440a      	add	r2, r1
 80168d4:	4291      	cmp	r1, r2
 80168d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80168da:	d100      	bne.n	80168de <memcpy+0xc>
 80168dc:	4770      	bx	lr
 80168de:	b510      	push	{r4, lr}
 80168e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80168e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80168e8:	4291      	cmp	r1, r2
 80168ea:	d1f9      	bne.n	80168e0 <memcpy+0xe>
 80168ec:	bd10      	pop	{r4, pc}
	...

080168f0 <__assert_func>:
 80168f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80168f2:	4614      	mov	r4, r2
 80168f4:	461a      	mov	r2, r3
 80168f6:	4b09      	ldr	r3, [pc, #36]	@ (801691c <__assert_func+0x2c>)
 80168f8:	681b      	ldr	r3, [r3, #0]
 80168fa:	4605      	mov	r5, r0
 80168fc:	68d8      	ldr	r0, [r3, #12]
 80168fe:	b954      	cbnz	r4, 8016916 <__assert_func+0x26>
 8016900:	4b07      	ldr	r3, [pc, #28]	@ (8016920 <__assert_func+0x30>)
 8016902:	461c      	mov	r4, r3
 8016904:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016908:	9100      	str	r1, [sp, #0]
 801690a:	462b      	mov	r3, r5
 801690c:	4905      	ldr	r1, [pc, #20]	@ (8016924 <__assert_func+0x34>)
 801690e:	f000 fc89 	bl	8017224 <fiprintf>
 8016912:	f000 fd3d 	bl	8017390 <abort>
 8016916:	4b04      	ldr	r3, [pc, #16]	@ (8016928 <__assert_func+0x38>)
 8016918:	e7f4      	b.n	8016904 <__assert_func+0x14>
 801691a:	bf00      	nop
 801691c:	24000040 	.word	0x24000040
 8016920:	0801acbc 	.word	0x0801acbc
 8016924:	0801ac8e 	.word	0x0801ac8e
 8016928:	0801ac81 	.word	0x0801ac81

0801692c <_free_r>:
 801692c:	b538      	push	{r3, r4, r5, lr}
 801692e:	4605      	mov	r5, r0
 8016930:	2900      	cmp	r1, #0
 8016932:	d041      	beq.n	80169b8 <_free_r+0x8c>
 8016934:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016938:	1f0c      	subs	r4, r1, #4
 801693a:	2b00      	cmp	r3, #0
 801693c:	bfb8      	it	lt
 801693e:	18e4      	addlt	r4, r4, r3
 8016940:	f000 f8e8 	bl	8016b14 <__malloc_lock>
 8016944:	4a1d      	ldr	r2, [pc, #116]	@ (80169bc <_free_r+0x90>)
 8016946:	6813      	ldr	r3, [r2, #0]
 8016948:	b933      	cbnz	r3, 8016958 <_free_r+0x2c>
 801694a:	6063      	str	r3, [r4, #4]
 801694c:	6014      	str	r4, [r2, #0]
 801694e:	4628      	mov	r0, r5
 8016950:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016954:	f000 b8e4 	b.w	8016b20 <__malloc_unlock>
 8016958:	42a3      	cmp	r3, r4
 801695a:	d908      	bls.n	801696e <_free_r+0x42>
 801695c:	6820      	ldr	r0, [r4, #0]
 801695e:	1821      	adds	r1, r4, r0
 8016960:	428b      	cmp	r3, r1
 8016962:	bf01      	itttt	eq
 8016964:	6819      	ldreq	r1, [r3, #0]
 8016966:	685b      	ldreq	r3, [r3, #4]
 8016968:	1809      	addeq	r1, r1, r0
 801696a:	6021      	streq	r1, [r4, #0]
 801696c:	e7ed      	b.n	801694a <_free_r+0x1e>
 801696e:	461a      	mov	r2, r3
 8016970:	685b      	ldr	r3, [r3, #4]
 8016972:	b10b      	cbz	r3, 8016978 <_free_r+0x4c>
 8016974:	42a3      	cmp	r3, r4
 8016976:	d9fa      	bls.n	801696e <_free_r+0x42>
 8016978:	6811      	ldr	r1, [r2, #0]
 801697a:	1850      	adds	r0, r2, r1
 801697c:	42a0      	cmp	r0, r4
 801697e:	d10b      	bne.n	8016998 <_free_r+0x6c>
 8016980:	6820      	ldr	r0, [r4, #0]
 8016982:	4401      	add	r1, r0
 8016984:	1850      	adds	r0, r2, r1
 8016986:	4283      	cmp	r3, r0
 8016988:	6011      	str	r1, [r2, #0]
 801698a:	d1e0      	bne.n	801694e <_free_r+0x22>
 801698c:	6818      	ldr	r0, [r3, #0]
 801698e:	685b      	ldr	r3, [r3, #4]
 8016990:	6053      	str	r3, [r2, #4]
 8016992:	4408      	add	r0, r1
 8016994:	6010      	str	r0, [r2, #0]
 8016996:	e7da      	b.n	801694e <_free_r+0x22>
 8016998:	d902      	bls.n	80169a0 <_free_r+0x74>
 801699a:	230c      	movs	r3, #12
 801699c:	602b      	str	r3, [r5, #0]
 801699e:	e7d6      	b.n	801694e <_free_r+0x22>
 80169a0:	6820      	ldr	r0, [r4, #0]
 80169a2:	1821      	adds	r1, r4, r0
 80169a4:	428b      	cmp	r3, r1
 80169a6:	bf04      	itt	eq
 80169a8:	6819      	ldreq	r1, [r3, #0]
 80169aa:	685b      	ldreq	r3, [r3, #4]
 80169ac:	6063      	str	r3, [r4, #4]
 80169ae:	bf04      	itt	eq
 80169b0:	1809      	addeq	r1, r1, r0
 80169b2:	6021      	streq	r1, [r4, #0]
 80169b4:	6054      	str	r4, [r2, #4]
 80169b6:	e7ca      	b.n	801694e <_free_r+0x22>
 80169b8:	bd38      	pop	{r3, r4, r5, pc}
 80169ba:	bf00      	nop
 80169bc:	240081a4 	.word	0x240081a4

080169c0 <malloc>:
 80169c0:	4b02      	ldr	r3, [pc, #8]	@ (80169cc <malloc+0xc>)
 80169c2:	4601      	mov	r1, r0
 80169c4:	6818      	ldr	r0, [r3, #0]
 80169c6:	f000 b825 	b.w	8016a14 <_malloc_r>
 80169ca:	bf00      	nop
 80169cc:	24000040 	.word	0x24000040

080169d0 <sbrk_aligned>:
 80169d0:	b570      	push	{r4, r5, r6, lr}
 80169d2:	4e0f      	ldr	r6, [pc, #60]	@ (8016a10 <sbrk_aligned+0x40>)
 80169d4:	460c      	mov	r4, r1
 80169d6:	6831      	ldr	r1, [r6, #0]
 80169d8:	4605      	mov	r5, r0
 80169da:	b911      	cbnz	r1, 80169e2 <sbrk_aligned+0x12>
 80169dc:	f000 fcc8 	bl	8017370 <_sbrk_r>
 80169e0:	6030      	str	r0, [r6, #0]
 80169e2:	4621      	mov	r1, r4
 80169e4:	4628      	mov	r0, r5
 80169e6:	f000 fcc3 	bl	8017370 <_sbrk_r>
 80169ea:	1c43      	adds	r3, r0, #1
 80169ec:	d103      	bne.n	80169f6 <sbrk_aligned+0x26>
 80169ee:	f04f 34ff 	mov.w	r4, #4294967295
 80169f2:	4620      	mov	r0, r4
 80169f4:	bd70      	pop	{r4, r5, r6, pc}
 80169f6:	1cc4      	adds	r4, r0, #3
 80169f8:	f024 0403 	bic.w	r4, r4, #3
 80169fc:	42a0      	cmp	r0, r4
 80169fe:	d0f8      	beq.n	80169f2 <sbrk_aligned+0x22>
 8016a00:	1a21      	subs	r1, r4, r0
 8016a02:	4628      	mov	r0, r5
 8016a04:	f000 fcb4 	bl	8017370 <_sbrk_r>
 8016a08:	3001      	adds	r0, #1
 8016a0a:	d1f2      	bne.n	80169f2 <sbrk_aligned+0x22>
 8016a0c:	e7ef      	b.n	80169ee <sbrk_aligned+0x1e>
 8016a0e:	bf00      	nop
 8016a10:	240081a0 	.word	0x240081a0

08016a14 <_malloc_r>:
 8016a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016a18:	1ccd      	adds	r5, r1, #3
 8016a1a:	f025 0503 	bic.w	r5, r5, #3
 8016a1e:	3508      	adds	r5, #8
 8016a20:	2d0c      	cmp	r5, #12
 8016a22:	bf38      	it	cc
 8016a24:	250c      	movcc	r5, #12
 8016a26:	2d00      	cmp	r5, #0
 8016a28:	4606      	mov	r6, r0
 8016a2a:	db01      	blt.n	8016a30 <_malloc_r+0x1c>
 8016a2c:	42a9      	cmp	r1, r5
 8016a2e:	d904      	bls.n	8016a3a <_malloc_r+0x26>
 8016a30:	230c      	movs	r3, #12
 8016a32:	6033      	str	r3, [r6, #0]
 8016a34:	2000      	movs	r0, #0
 8016a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016a3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016b10 <_malloc_r+0xfc>
 8016a3e:	f000 f869 	bl	8016b14 <__malloc_lock>
 8016a42:	f8d8 3000 	ldr.w	r3, [r8]
 8016a46:	461c      	mov	r4, r3
 8016a48:	bb44      	cbnz	r4, 8016a9c <_malloc_r+0x88>
 8016a4a:	4629      	mov	r1, r5
 8016a4c:	4630      	mov	r0, r6
 8016a4e:	f7ff ffbf 	bl	80169d0 <sbrk_aligned>
 8016a52:	1c43      	adds	r3, r0, #1
 8016a54:	4604      	mov	r4, r0
 8016a56:	d158      	bne.n	8016b0a <_malloc_r+0xf6>
 8016a58:	f8d8 4000 	ldr.w	r4, [r8]
 8016a5c:	4627      	mov	r7, r4
 8016a5e:	2f00      	cmp	r7, #0
 8016a60:	d143      	bne.n	8016aea <_malloc_r+0xd6>
 8016a62:	2c00      	cmp	r4, #0
 8016a64:	d04b      	beq.n	8016afe <_malloc_r+0xea>
 8016a66:	6823      	ldr	r3, [r4, #0]
 8016a68:	4639      	mov	r1, r7
 8016a6a:	4630      	mov	r0, r6
 8016a6c:	eb04 0903 	add.w	r9, r4, r3
 8016a70:	f000 fc7e 	bl	8017370 <_sbrk_r>
 8016a74:	4581      	cmp	r9, r0
 8016a76:	d142      	bne.n	8016afe <_malloc_r+0xea>
 8016a78:	6821      	ldr	r1, [r4, #0]
 8016a7a:	1a6d      	subs	r5, r5, r1
 8016a7c:	4629      	mov	r1, r5
 8016a7e:	4630      	mov	r0, r6
 8016a80:	f7ff ffa6 	bl	80169d0 <sbrk_aligned>
 8016a84:	3001      	adds	r0, #1
 8016a86:	d03a      	beq.n	8016afe <_malloc_r+0xea>
 8016a88:	6823      	ldr	r3, [r4, #0]
 8016a8a:	442b      	add	r3, r5
 8016a8c:	6023      	str	r3, [r4, #0]
 8016a8e:	f8d8 3000 	ldr.w	r3, [r8]
 8016a92:	685a      	ldr	r2, [r3, #4]
 8016a94:	bb62      	cbnz	r2, 8016af0 <_malloc_r+0xdc>
 8016a96:	f8c8 7000 	str.w	r7, [r8]
 8016a9a:	e00f      	b.n	8016abc <_malloc_r+0xa8>
 8016a9c:	6822      	ldr	r2, [r4, #0]
 8016a9e:	1b52      	subs	r2, r2, r5
 8016aa0:	d420      	bmi.n	8016ae4 <_malloc_r+0xd0>
 8016aa2:	2a0b      	cmp	r2, #11
 8016aa4:	d917      	bls.n	8016ad6 <_malloc_r+0xc2>
 8016aa6:	1961      	adds	r1, r4, r5
 8016aa8:	42a3      	cmp	r3, r4
 8016aaa:	6025      	str	r5, [r4, #0]
 8016aac:	bf18      	it	ne
 8016aae:	6059      	strne	r1, [r3, #4]
 8016ab0:	6863      	ldr	r3, [r4, #4]
 8016ab2:	bf08      	it	eq
 8016ab4:	f8c8 1000 	streq.w	r1, [r8]
 8016ab8:	5162      	str	r2, [r4, r5]
 8016aba:	604b      	str	r3, [r1, #4]
 8016abc:	4630      	mov	r0, r6
 8016abe:	f000 f82f 	bl	8016b20 <__malloc_unlock>
 8016ac2:	f104 000b 	add.w	r0, r4, #11
 8016ac6:	1d23      	adds	r3, r4, #4
 8016ac8:	f020 0007 	bic.w	r0, r0, #7
 8016acc:	1ac2      	subs	r2, r0, r3
 8016ace:	bf1c      	itt	ne
 8016ad0:	1a1b      	subne	r3, r3, r0
 8016ad2:	50a3      	strne	r3, [r4, r2]
 8016ad4:	e7af      	b.n	8016a36 <_malloc_r+0x22>
 8016ad6:	6862      	ldr	r2, [r4, #4]
 8016ad8:	42a3      	cmp	r3, r4
 8016ada:	bf0c      	ite	eq
 8016adc:	f8c8 2000 	streq.w	r2, [r8]
 8016ae0:	605a      	strne	r2, [r3, #4]
 8016ae2:	e7eb      	b.n	8016abc <_malloc_r+0xa8>
 8016ae4:	4623      	mov	r3, r4
 8016ae6:	6864      	ldr	r4, [r4, #4]
 8016ae8:	e7ae      	b.n	8016a48 <_malloc_r+0x34>
 8016aea:	463c      	mov	r4, r7
 8016aec:	687f      	ldr	r7, [r7, #4]
 8016aee:	e7b6      	b.n	8016a5e <_malloc_r+0x4a>
 8016af0:	461a      	mov	r2, r3
 8016af2:	685b      	ldr	r3, [r3, #4]
 8016af4:	42a3      	cmp	r3, r4
 8016af6:	d1fb      	bne.n	8016af0 <_malloc_r+0xdc>
 8016af8:	2300      	movs	r3, #0
 8016afa:	6053      	str	r3, [r2, #4]
 8016afc:	e7de      	b.n	8016abc <_malloc_r+0xa8>
 8016afe:	230c      	movs	r3, #12
 8016b00:	6033      	str	r3, [r6, #0]
 8016b02:	4630      	mov	r0, r6
 8016b04:	f000 f80c 	bl	8016b20 <__malloc_unlock>
 8016b08:	e794      	b.n	8016a34 <_malloc_r+0x20>
 8016b0a:	6005      	str	r5, [r0, #0]
 8016b0c:	e7d6      	b.n	8016abc <_malloc_r+0xa8>
 8016b0e:	bf00      	nop
 8016b10:	240081a4 	.word	0x240081a4

08016b14 <__malloc_lock>:
 8016b14:	4801      	ldr	r0, [pc, #4]	@ (8016b1c <__malloc_lock+0x8>)
 8016b16:	f7ff beda 	b.w	80168ce <__retarget_lock_acquire_recursive>
 8016b1a:	bf00      	nop
 8016b1c:	2400819c 	.word	0x2400819c

08016b20 <__malloc_unlock>:
 8016b20:	4801      	ldr	r0, [pc, #4]	@ (8016b28 <__malloc_unlock+0x8>)
 8016b22:	f7ff bed5 	b.w	80168d0 <__retarget_lock_release_recursive>
 8016b26:	bf00      	nop
 8016b28:	2400819c 	.word	0x2400819c

08016b2c <__sfputc_r>:
 8016b2c:	6893      	ldr	r3, [r2, #8]
 8016b2e:	3b01      	subs	r3, #1
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	b410      	push	{r4}
 8016b34:	6093      	str	r3, [r2, #8]
 8016b36:	da08      	bge.n	8016b4a <__sfputc_r+0x1e>
 8016b38:	6994      	ldr	r4, [r2, #24]
 8016b3a:	42a3      	cmp	r3, r4
 8016b3c:	db01      	blt.n	8016b42 <__sfputc_r+0x16>
 8016b3e:	290a      	cmp	r1, #10
 8016b40:	d103      	bne.n	8016b4a <__sfputc_r+0x1e>
 8016b42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016b46:	f000 bb7f 	b.w	8017248 <__swbuf_r>
 8016b4a:	6813      	ldr	r3, [r2, #0]
 8016b4c:	1c58      	adds	r0, r3, #1
 8016b4e:	6010      	str	r0, [r2, #0]
 8016b50:	7019      	strb	r1, [r3, #0]
 8016b52:	4608      	mov	r0, r1
 8016b54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016b58:	4770      	bx	lr

08016b5a <__sfputs_r>:
 8016b5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b5c:	4606      	mov	r6, r0
 8016b5e:	460f      	mov	r7, r1
 8016b60:	4614      	mov	r4, r2
 8016b62:	18d5      	adds	r5, r2, r3
 8016b64:	42ac      	cmp	r4, r5
 8016b66:	d101      	bne.n	8016b6c <__sfputs_r+0x12>
 8016b68:	2000      	movs	r0, #0
 8016b6a:	e007      	b.n	8016b7c <__sfputs_r+0x22>
 8016b6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016b70:	463a      	mov	r2, r7
 8016b72:	4630      	mov	r0, r6
 8016b74:	f7ff ffda 	bl	8016b2c <__sfputc_r>
 8016b78:	1c43      	adds	r3, r0, #1
 8016b7a:	d1f3      	bne.n	8016b64 <__sfputs_r+0xa>
 8016b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016b80 <_vfiprintf_r>:
 8016b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b84:	460d      	mov	r5, r1
 8016b86:	b09d      	sub	sp, #116	@ 0x74
 8016b88:	4614      	mov	r4, r2
 8016b8a:	4698      	mov	r8, r3
 8016b8c:	4606      	mov	r6, r0
 8016b8e:	b118      	cbz	r0, 8016b98 <_vfiprintf_r+0x18>
 8016b90:	6a03      	ldr	r3, [r0, #32]
 8016b92:	b90b      	cbnz	r3, 8016b98 <_vfiprintf_r+0x18>
 8016b94:	f7ff fd36 	bl	8016604 <__sinit>
 8016b98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016b9a:	07d9      	lsls	r1, r3, #31
 8016b9c:	d405      	bmi.n	8016baa <_vfiprintf_r+0x2a>
 8016b9e:	89ab      	ldrh	r3, [r5, #12]
 8016ba0:	059a      	lsls	r2, r3, #22
 8016ba2:	d402      	bmi.n	8016baa <_vfiprintf_r+0x2a>
 8016ba4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016ba6:	f7ff fe92 	bl	80168ce <__retarget_lock_acquire_recursive>
 8016baa:	89ab      	ldrh	r3, [r5, #12]
 8016bac:	071b      	lsls	r3, r3, #28
 8016bae:	d501      	bpl.n	8016bb4 <_vfiprintf_r+0x34>
 8016bb0:	692b      	ldr	r3, [r5, #16]
 8016bb2:	b99b      	cbnz	r3, 8016bdc <_vfiprintf_r+0x5c>
 8016bb4:	4629      	mov	r1, r5
 8016bb6:	4630      	mov	r0, r6
 8016bb8:	f000 fb84 	bl	80172c4 <__swsetup_r>
 8016bbc:	b170      	cbz	r0, 8016bdc <_vfiprintf_r+0x5c>
 8016bbe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016bc0:	07dc      	lsls	r4, r3, #31
 8016bc2:	d504      	bpl.n	8016bce <_vfiprintf_r+0x4e>
 8016bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8016bc8:	b01d      	add	sp, #116	@ 0x74
 8016bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bce:	89ab      	ldrh	r3, [r5, #12]
 8016bd0:	0598      	lsls	r0, r3, #22
 8016bd2:	d4f7      	bmi.n	8016bc4 <_vfiprintf_r+0x44>
 8016bd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016bd6:	f7ff fe7b 	bl	80168d0 <__retarget_lock_release_recursive>
 8016bda:	e7f3      	b.n	8016bc4 <_vfiprintf_r+0x44>
 8016bdc:	2300      	movs	r3, #0
 8016bde:	9309      	str	r3, [sp, #36]	@ 0x24
 8016be0:	2320      	movs	r3, #32
 8016be2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016be6:	f8cd 800c 	str.w	r8, [sp, #12]
 8016bea:	2330      	movs	r3, #48	@ 0x30
 8016bec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016d9c <_vfiprintf_r+0x21c>
 8016bf0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016bf4:	f04f 0901 	mov.w	r9, #1
 8016bf8:	4623      	mov	r3, r4
 8016bfa:	469a      	mov	sl, r3
 8016bfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016c00:	b10a      	cbz	r2, 8016c06 <_vfiprintf_r+0x86>
 8016c02:	2a25      	cmp	r2, #37	@ 0x25
 8016c04:	d1f9      	bne.n	8016bfa <_vfiprintf_r+0x7a>
 8016c06:	ebba 0b04 	subs.w	fp, sl, r4
 8016c0a:	d00b      	beq.n	8016c24 <_vfiprintf_r+0xa4>
 8016c0c:	465b      	mov	r3, fp
 8016c0e:	4622      	mov	r2, r4
 8016c10:	4629      	mov	r1, r5
 8016c12:	4630      	mov	r0, r6
 8016c14:	f7ff ffa1 	bl	8016b5a <__sfputs_r>
 8016c18:	3001      	adds	r0, #1
 8016c1a:	f000 80a7 	beq.w	8016d6c <_vfiprintf_r+0x1ec>
 8016c1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016c20:	445a      	add	r2, fp
 8016c22:	9209      	str	r2, [sp, #36]	@ 0x24
 8016c24:	f89a 3000 	ldrb.w	r3, [sl]
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	f000 809f 	beq.w	8016d6c <_vfiprintf_r+0x1ec>
 8016c2e:	2300      	movs	r3, #0
 8016c30:	f04f 32ff 	mov.w	r2, #4294967295
 8016c34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016c38:	f10a 0a01 	add.w	sl, sl, #1
 8016c3c:	9304      	str	r3, [sp, #16]
 8016c3e:	9307      	str	r3, [sp, #28]
 8016c40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016c44:	931a      	str	r3, [sp, #104]	@ 0x68
 8016c46:	4654      	mov	r4, sl
 8016c48:	2205      	movs	r2, #5
 8016c4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016c4e:	4853      	ldr	r0, [pc, #332]	@ (8016d9c <_vfiprintf_r+0x21c>)
 8016c50:	f7e9 fb5e 	bl	8000310 <memchr>
 8016c54:	9a04      	ldr	r2, [sp, #16]
 8016c56:	b9d8      	cbnz	r0, 8016c90 <_vfiprintf_r+0x110>
 8016c58:	06d1      	lsls	r1, r2, #27
 8016c5a:	bf44      	itt	mi
 8016c5c:	2320      	movmi	r3, #32
 8016c5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016c62:	0713      	lsls	r3, r2, #28
 8016c64:	bf44      	itt	mi
 8016c66:	232b      	movmi	r3, #43	@ 0x2b
 8016c68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016c6c:	f89a 3000 	ldrb.w	r3, [sl]
 8016c70:	2b2a      	cmp	r3, #42	@ 0x2a
 8016c72:	d015      	beq.n	8016ca0 <_vfiprintf_r+0x120>
 8016c74:	9a07      	ldr	r2, [sp, #28]
 8016c76:	4654      	mov	r4, sl
 8016c78:	2000      	movs	r0, #0
 8016c7a:	f04f 0c0a 	mov.w	ip, #10
 8016c7e:	4621      	mov	r1, r4
 8016c80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016c84:	3b30      	subs	r3, #48	@ 0x30
 8016c86:	2b09      	cmp	r3, #9
 8016c88:	d94b      	bls.n	8016d22 <_vfiprintf_r+0x1a2>
 8016c8a:	b1b0      	cbz	r0, 8016cba <_vfiprintf_r+0x13a>
 8016c8c:	9207      	str	r2, [sp, #28]
 8016c8e:	e014      	b.n	8016cba <_vfiprintf_r+0x13a>
 8016c90:	eba0 0308 	sub.w	r3, r0, r8
 8016c94:	fa09 f303 	lsl.w	r3, r9, r3
 8016c98:	4313      	orrs	r3, r2
 8016c9a:	9304      	str	r3, [sp, #16]
 8016c9c:	46a2      	mov	sl, r4
 8016c9e:	e7d2      	b.n	8016c46 <_vfiprintf_r+0xc6>
 8016ca0:	9b03      	ldr	r3, [sp, #12]
 8016ca2:	1d19      	adds	r1, r3, #4
 8016ca4:	681b      	ldr	r3, [r3, #0]
 8016ca6:	9103      	str	r1, [sp, #12]
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	bfbb      	ittet	lt
 8016cac:	425b      	neglt	r3, r3
 8016cae:	f042 0202 	orrlt.w	r2, r2, #2
 8016cb2:	9307      	strge	r3, [sp, #28]
 8016cb4:	9307      	strlt	r3, [sp, #28]
 8016cb6:	bfb8      	it	lt
 8016cb8:	9204      	strlt	r2, [sp, #16]
 8016cba:	7823      	ldrb	r3, [r4, #0]
 8016cbc:	2b2e      	cmp	r3, #46	@ 0x2e
 8016cbe:	d10a      	bne.n	8016cd6 <_vfiprintf_r+0x156>
 8016cc0:	7863      	ldrb	r3, [r4, #1]
 8016cc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8016cc4:	d132      	bne.n	8016d2c <_vfiprintf_r+0x1ac>
 8016cc6:	9b03      	ldr	r3, [sp, #12]
 8016cc8:	1d1a      	adds	r2, r3, #4
 8016cca:	681b      	ldr	r3, [r3, #0]
 8016ccc:	9203      	str	r2, [sp, #12]
 8016cce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016cd2:	3402      	adds	r4, #2
 8016cd4:	9305      	str	r3, [sp, #20]
 8016cd6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016dac <_vfiprintf_r+0x22c>
 8016cda:	7821      	ldrb	r1, [r4, #0]
 8016cdc:	2203      	movs	r2, #3
 8016cde:	4650      	mov	r0, sl
 8016ce0:	f7e9 fb16 	bl	8000310 <memchr>
 8016ce4:	b138      	cbz	r0, 8016cf6 <_vfiprintf_r+0x176>
 8016ce6:	9b04      	ldr	r3, [sp, #16]
 8016ce8:	eba0 000a 	sub.w	r0, r0, sl
 8016cec:	2240      	movs	r2, #64	@ 0x40
 8016cee:	4082      	lsls	r2, r0
 8016cf0:	4313      	orrs	r3, r2
 8016cf2:	3401      	adds	r4, #1
 8016cf4:	9304      	str	r3, [sp, #16]
 8016cf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016cfa:	4829      	ldr	r0, [pc, #164]	@ (8016da0 <_vfiprintf_r+0x220>)
 8016cfc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016d00:	2206      	movs	r2, #6
 8016d02:	f7e9 fb05 	bl	8000310 <memchr>
 8016d06:	2800      	cmp	r0, #0
 8016d08:	d03f      	beq.n	8016d8a <_vfiprintf_r+0x20a>
 8016d0a:	4b26      	ldr	r3, [pc, #152]	@ (8016da4 <_vfiprintf_r+0x224>)
 8016d0c:	bb1b      	cbnz	r3, 8016d56 <_vfiprintf_r+0x1d6>
 8016d0e:	9b03      	ldr	r3, [sp, #12]
 8016d10:	3307      	adds	r3, #7
 8016d12:	f023 0307 	bic.w	r3, r3, #7
 8016d16:	3308      	adds	r3, #8
 8016d18:	9303      	str	r3, [sp, #12]
 8016d1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016d1c:	443b      	add	r3, r7
 8016d1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8016d20:	e76a      	b.n	8016bf8 <_vfiprintf_r+0x78>
 8016d22:	fb0c 3202 	mla	r2, ip, r2, r3
 8016d26:	460c      	mov	r4, r1
 8016d28:	2001      	movs	r0, #1
 8016d2a:	e7a8      	b.n	8016c7e <_vfiprintf_r+0xfe>
 8016d2c:	2300      	movs	r3, #0
 8016d2e:	3401      	adds	r4, #1
 8016d30:	9305      	str	r3, [sp, #20]
 8016d32:	4619      	mov	r1, r3
 8016d34:	f04f 0c0a 	mov.w	ip, #10
 8016d38:	4620      	mov	r0, r4
 8016d3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016d3e:	3a30      	subs	r2, #48	@ 0x30
 8016d40:	2a09      	cmp	r2, #9
 8016d42:	d903      	bls.n	8016d4c <_vfiprintf_r+0x1cc>
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d0c6      	beq.n	8016cd6 <_vfiprintf_r+0x156>
 8016d48:	9105      	str	r1, [sp, #20]
 8016d4a:	e7c4      	b.n	8016cd6 <_vfiprintf_r+0x156>
 8016d4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8016d50:	4604      	mov	r4, r0
 8016d52:	2301      	movs	r3, #1
 8016d54:	e7f0      	b.n	8016d38 <_vfiprintf_r+0x1b8>
 8016d56:	ab03      	add	r3, sp, #12
 8016d58:	9300      	str	r3, [sp, #0]
 8016d5a:	462a      	mov	r2, r5
 8016d5c:	4b12      	ldr	r3, [pc, #72]	@ (8016da8 <_vfiprintf_r+0x228>)
 8016d5e:	a904      	add	r1, sp, #16
 8016d60:	4630      	mov	r0, r6
 8016d62:	f3af 8000 	nop.w
 8016d66:	4607      	mov	r7, r0
 8016d68:	1c78      	adds	r0, r7, #1
 8016d6a:	d1d6      	bne.n	8016d1a <_vfiprintf_r+0x19a>
 8016d6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016d6e:	07d9      	lsls	r1, r3, #31
 8016d70:	d405      	bmi.n	8016d7e <_vfiprintf_r+0x1fe>
 8016d72:	89ab      	ldrh	r3, [r5, #12]
 8016d74:	059a      	lsls	r2, r3, #22
 8016d76:	d402      	bmi.n	8016d7e <_vfiprintf_r+0x1fe>
 8016d78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016d7a:	f7ff fda9 	bl	80168d0 <__retarget_lock_release_recursive>
 8016d7e:	89ab      	ldrh	r3, [r5, #12]
 8016d80:	065b      	lsls	r3, r3, #25
 8016d82:	f53f af1f 	bmi.w	8016bc4 <_vfiprintf_r+0x44>
 8016d86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016d88:	e71e      	b.n	8016bc8 <_vfiprintf_r+0x48>
 8016d8a:	ab03      	add	r3, sp, #12
 8016d8c:	9300      	str	r3, [sp, #0]
 8016d8e:	462a      	mov	r2, r5
 8016d90:	4b05      	ldr	r3, [pc, #20]	@ (8016da8 <_vfiprintf_r+0x228>)
 8016d92:	a904      	add	r1, sp, #16
 8016d94:	4630      	mov	r0, r6
 8016d96:	f000 f879 	bl	8016e8c <_printf_i>
 8016d9a:	e7e4      	b.n	8016d66 <_vfiprintf_r+0x1e6>
 8016d9c:	0801acbd 	.word	0x0801acbd
 8016da0:	0801acc7 	.word	0x0801acc7
 8016da4:	00000000 	.word	0x00000000
 8016da8:	08016b5b 	.word	0x08016b5b
 8016dac:	0801acc3 	.word	0x0801acc3

08016db0 <_printf_common>:
 8016db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016db4:	4616      	mov	r6, r2
 8016db6:	4698      	mov	r8, r3
 8016db8:	688a      	ldr	r2, [r1, #8]
 8016dba:	690b      	ldr	r3, [r1, #16]
 8016dbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016dc0:	4293      	cmp	r3, r2
 8016dc2:	bfb8      	it	lt
 8016dc4:	4613      	movlt	r3, r2
 8016dc6:	6033      	str	r3, [r6, #0]
 8016dc8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016dcc:	4607      	mov	r7, r0
 8016dce:	460c      	mov	r4, r1
 8016dd0:	b10a      	cbz	r2, 8016dd6 <_printf_common+0x26>
 8016dd2:	3301      	adds	r3, #1
 8016dd4:	6033      	str	r3, [r6, #0]
 8016dd6:	6823      	ldr	r3, [r4, #0]
 8016dd8:	0699      	lsls	r1, r3, #26
 8016dda:	bf42      	ittt	mi
 8016ddc:	6833      	ldrmi	r3, [r6, #0]
 8016dde:	3302      	addmi	r3, #2
 8016de0:	6033      	strmi	r3, [r6, #0]
 8016de2:	6825      	ldr	r5, [r4, #0]
 8016de4:	f015 0506 	ands.w	r5, r5, #6
 8016de8:	d106      	bne.n	8016df8 <_printf_common+0x48>
 8016dea:	f104 0a19 	add.w	sl, r4, #25
 8016dee:	68e3      	ldr	r3, [r4, #12]
 8016df0:	6832      	ldr	r2, [r6, #0]
 8016df2:	1a9b      	subs	r3, r3, r2
 8016df4:	42ab      	cmp	r3, r5
 8016df6:	dc26      	bgt.n	8016e46 <_printf_common+0x96>
 8016df8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016dfc:	6822      	ldr	r2, [r4, #0]
 8016dfe:	3b00      	subs	r3, #0
 8016e00:	bf18      	it	ne
 8016e02:	2301      	movne	r3, #1
 8016e04:	0692      	lsls	r2, r2, #26
 8016e06:	d42b      	bmi.n	8016e60 <_printf_common+0xb0>
 8016e08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016e0c:	4641      	mov	r1, r8
 8016e0e:	4638      	mov	r0, r7
 8016e10:	47c8      	blx	r9
 8016e12:	3001      	adds	r0, #1
 8016e14:	d01e      	beq.n	8016e54 <_printf_common+0xa4>
 8016e16:	6823      	ldr	r3, [r4, #0]
 8016e18:	6922      	ldr	r2, [r4, #16]
 8016e1a:	f003 0306 	and.w	r3, r3, #6
 8016e1e:	2b04      	cmp	r3, #4
 8016e20:	bf02      	ittt	eq
 8016e22:	68e5      	ldreq	r5, [r4, #12]
 8016e24:	6833      	ldreq	r3, [r6, #0]
 8016e26:	1aed      	subeq	r5, r5, r3
 8016e28:	68a3      	ldr	r3, [r4, #8]
 8016e2a:	bf0c      	ite	eq
 8016e2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016e30:	2500      	movne	r5, #0
 8016e32:	4293      	cmp	r3, r2
 8016e34:	bfc4      	itt	gt
 8016e36:	1a9b      	subgt	r3, r3, r2
 8016e38:	18ed      	addgt	r5, r5, r3
 8016e3a:	2600      	movs	r6, #0
 8016e3c:	341a      	adds	r4, #26
 8016e3e:	42b5      	cmp	r5, r6
 8016e40:	d11a      	bne.n	8016e78 <_printf_common+0xc8>
 8016e42:	2000      	movs	r0, #0
 8016e44:	e008      	b.n	8016e58 <_printf_common+0xa8>
 8016e46:	2301      	movs	r3, #1
 8016e48:	4652      	mov	r2, sl
 8016e4a:	4641      	mov	r1, r8
 8016e4c:	4638      	mov	r0, r7
 8016e4e:	47c8      	blx	r9
 8016e50:	3001      	adds	r0, #1
 8016e52:	d103      	bne.n	8016e5c <_printf_common+0xac>
 8016e54:	f04f 30ff 	mov.w	r0, #4294967295
 8016e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e5c:	3501      	adds	r5, #1
 8016e5e:	e7c6      	b.n	8016dee <_printf_common+0x3e>
 8016e60:	18e1      	adds	r1, r4, r3
 8016e62:	1c5a      	adds	r2, r3, #1
 8016e64:	2030      	movs	r0, #48	@ 0x30
 8016e66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8016e6a:	4422      	add	r2, r4
 8016e6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8016e70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8016e74:	3302      	adds	r3, #2
 8016e76:	e7c7      	b.n	8016e08 <_printf_common+0x58>
 8016e78:	2301      	movs	r3, #1
 8016e7a:	4622      	mov	r2, r4
 8016e7c:	4641      	mov	r1, r8
 8016e7e:	4638      	mov	r0, r7
 8016e80:	47c8      	blx	r9
 8016e82:	3001      	adds	r0, #1
 8016e84:	d0e6      	beq.n	8016e54 <_printf_common+0xa4>
 8016e86:	3601      	adds	r6, #1
 8016e88:	e7d9      	b.n	8016e3e <_printf_common+0x8e>
	...

08016e8c <_printf_i>:
 8016e8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016e90:	7e0f      	ldrb	r7, [r1, #24]
 8016e92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8016e94:	2f78      	cmp	r7, #120	@ 0x78
 8016e96:	4691      	mov	r9, r2
 8016e98:	4680      	mov	r8, r0
 8016e9a:	460c      	mov	r4, r1
 8016e9c:	469a      	mov	sl, r3
 8016e9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8016ea2:	d807      	bhi.n	8016eb4 <_printf_i+0x28>
 8016ea4:	2f62      	cmp	r7, #98	@ 0x62
 8016ea6:	d80a      	bhi.n	8016ebe <_printf_i+0x32>
 8016ea8:	2f00      	cmp	r7, #0
 8016eaa:	f000 80d2 	beq.w	8017052 <_printf_i+0x1c6>
 8016eae:	2f58      	cmp	r7, #88	@ 0x58
 8016eb0:	f000 80b9 	beq.w	8017026 <_printf_i+0x19a>
 8016eb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016eb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016ebc:	e03a      	b.n	8016f34 <_printf_i+0xa8>
 8016ebe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8016ec2:	2b15      	cmp	r3, #21
 8016ec4:	d8f6      	bhi.n	8016eb4 <_printf_i+0x28>
 8016ec6:	a101      	add	r1, pc, #4	@ (adr r1, 8016ecc <_printf_i+0x40>)
 8016ec8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016ecc:	08016f25 	.word	0x08016f25
 8016ed0:	08016f39 	.word	0x08016f39
 8016ed4:	08016eb5 	.word	0x08016eb5
 8016ed8:	08016eb5 	.word	0x08016eb5
 8016edc:	08016eb5 	.word	0x08016eb5
 8016ee0:	08016eb5 	.word	0x08016eb5
 8016ee4:	08016f39 	.word	0x08016f39
 8016ee8:	08016eb5 	.word	0x08016eb5
 8016eec:	08016eb5 	.word	0x08016eb5
 8016ef0:	08016eb5 	.word	0x08016eb5
 8016ef4:	08016eb5 	.word	0x08016eb5
 8016ef8:	08017039 	.word	0x08017039
 8016efc:	08016f63 	.word	0x08016f63
 8016f00:	08016ff3 	.word	0x08016ff3
 8016f04:	08016eb5 	.word	0x08016eb5
 8016f08:	08016eb5 	.word	0x08016eb5
 8016f0c:	0801705b 	.word	0x0801705b
 8016f10:	08016eb5 	.word	0x08016eb5
 8016f14:	08016f63 	.word	0x08016f63
 8016f18:	08016eb5 	.word	0x08016eb5
 8016f1c:	08016eb5 	.word	0x08016eb5
 8016f20:	08016ffb 	.word	0x08016ffb
 8016f24:	6833      	ldr	r3, [r6, #0]
 8016f26:	1d1a      	adds	r2, r3, #4
 8016f28:	681b      	ldr	r3, [r3, #0]
 8016f2a:	6032      	str	r2, [r6, #0]
 8016f2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016f30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016f34:	2301      	movs	r3, #1
 8016f36:	e09d      	b.n	8017074 <_printf_i+0x1e8>
 8016f38:	6833      	ldr	r3, [r6, #0]
 8016f3a:	6820      	ldr	r0, [r4, #0]
 8016f3c:	1d19      	adds	r1, r3, #4
 8016f3e:	6031      	str	r1, [r6, #0]
 8016f40:	0606      	lsls	r6, r0, #24
 8016f42:	d501      	bpl.n	8016f48 <_printf_i+0xbc>
 8016f44:	681d      	ldr	r5, [r3, #0]
 8016f46:	e003      	b.n	8016f50 <_printf_i+0xc4>
 8016f48:	0645      	lsls	r5, r0, #25
 8016f4a:	d5fb      	bpl.n	8016f44 <_printf_i+0xb8>
 8016f4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016f50:	2d00      	cmp	r5, #0
 8016f52:	da03      	bge.n	8016f5c <_printf_i+0xd0>
 8016f54:	232d      	movs	r3, #45	@ 0x2d
 8016f56:	426d      	negs	r5, r5
 8016f58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016f5c:	4859      	ldr	r0, [pc, #356]	@ (80170c4 <_printf_i+0x238>)
 8016f5e:	230a      	movs	r3, #10
 8016f60:	e011      	b.n	8016f86 <_printf_i+0xfa>
 8016f62:	6821      	ldr	r1, [r4, #0]
 8016f64:	6833      	ldr	r3, [r6, #0]
 8016f66:	0608      	lsls	r0, r1, #24
 8016f68:	f853 5b04 	ldr.w	r5, [r3], #4
 8016f6c:	d402      	bmi.n	8016f74 <_printf_i+0xe8>
 8016f6e:	0649      	lsls	r1, r1, #25
 8016f70:	bf48      	it	mi
 8016f72:	b2ad      	uxthmi	r5, r5
 8016f74:	2f6f      	cmp	r7, #111	@ 0x6f
 8016f76:	4853      	ldr	r0, [pc, #332]	@ (80170c4 <_printf_i+0x238>)
 8016f78:	6033      	str	r3, [r6, #0]
 8016f7a:	bf14      	ite	ne
 8016f7c:	230a      	movne	r3, #10
 8016f7e:	2308      	moveq	r3, #8
 8016f80:	2100      	movs	r1, #0
 8016f82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8016f86:	6866      	ldr	r6, [r4, #4]
 8016f88:	60a6      	str	r6, [r4, #8]
 8016f8a:	2e00      	cmp	r6, #0
 8016f8c:	bfa2      	ittt	ge
 8016f8e:	6821      	ldrge	r1, [r4, #0]
 8016f90:	f021 0104 	bicge.w	r1, r1, #4
 8016f94:	6021      	strge	r1, [r4, #0]
 8016f96:	b90d      	cbnz	r5, 8016f9c <_printf_i+0x110>
 8016f98:	2e00      	cmp	r6, #0
 8016f9a:	d04b      	beq.n	8017034 <_printf_i+0x1a8>
 8016f9c:	4616      	mov	r6, r2
 8016f9e:	fbb5 f1f3 	udiv	r1, r5, r3
 8016fa2:	fb03 5711 	mls	r7, r3, r1, r5
 8016fa6:	5dc7      	ldrb	r7, [r0, r7]
 8016fa8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016fac:	462f      	mov	r7, r5
 8016fae:	42bb      	cmp	r3, r7
 8016fb0:	460d      	mov	r5, r1
 8016fb2:	d9f4      	bls.n	8016f9e <_printf_i+0x112>
 8016fb4:	2b08      	cmp	r3, #8
 8016fb6:	d10b      	bne.n	8016fd0 <_printf_i+0x144>
 8016fb8:	6823      	ldr	r3, [r4, #0]
 8016fba:	07df      	lsls	r7, r3, #31
 8016fbc:	d508      	bpl.n	8016fd0 <_printf_i+0x144>
 8016fbe:	6923      	ldr	r3, [r4, #16]
 8016fc0:	6861      	ldr	r1, [r4, #4]
 8016fc2:	4299      	cmp	r1, r3
 8016fc4:	bfde      	ittt	le
 8016fc6:	2330      	movle	r3, #48	@ 0x30
 8016fc8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016fcc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016fd0:	1b92      	subs	r2, r2, r6
 8016fd2:	6122      	str	r2, [r4, #16]
 8016fd4:	f8cd a000 	str.w	sl, [sp]
 8016fd8:	464b      	mov	r3, r9
 8016fda:	aa03      	add	r2, sp, #12
 8016fdc:	4621      	mov	r1, r4
 8016fde:	4640      	mov	r0, r8
 8016fe0:	f7ff fee6 	bl	8016db0 <_printf_common>
 8016fe4:	3001      	adds	r0, #1
 8016fe6:	d14a      	bne.n	801707e <_printf_i+0x1f2>
 8016fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8016fec:	b004      	add	sp, #16
 8016fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ff2:	6823      	ldr	r3, [r4, #0]
 8016ff4:	f043 0320 	orr.w	r3, r3, #32
 8016ff8:	6023      	str	r3, [r4, #0]
 8016ffa:	4833      	ldr	r0, [pc, #204]	@ (80170c8 <_printf_i+0x23c>)
 8016ffc:	2778      	movs	r7, #120	@ 0x78
 8016ffe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017002:	6823      	ldr	r3, [r4, #0]
 8017004:	6831      	ldr	r1, [r6, #0]
 8017006:	061f      	lsls	r7, r3, #24
 8017008:	f851 5b04 	ldr.w	r5, [r1], #4
 801700c:	d402      	bmi.n	8017014 <_printf_i+0x188>
 801700e:	065f      	lsls	r7, r3, #25
 8017010:	bf48      	it	mi
 8017012:	b2ad      	uxthmi	r5, r5
 8017014:	6031      	str	r1, [r6, #0]
 8017016:	07d9      	lsls	r1, r3, #31
 8017018:	bf44      	itt	mi
 801701a:	f043 0320 	orrmi.w	r3, r3, #32
 801701e:	6023      	strmi	r3, [r4, #0]
 8017020:	b11d      	cbz	r5, 801702a <_printf_i+0x19e>
 8017022:	2310      	movs	r3, #16
 8017024:	e7ac      	b.n	8016f80 <_printf_i+0xf4>
 8017026:	4827      	ldr	r0, [pc, #156]	@ (80170c4 <_printf_i+0x238>)
 8017028:	e7e9      	b.n	8016ffe <_printf_i+0x172>
 801702a:	6823      	ldr	r3, [r4, #0]
 801702c:	f023 0320 	bic.w	r3, r3, #32
 8017030:	6023      	str	r3, [r4, #0]
 8017032:	e7f6      	b.n	8017022 <_printf_i+0x196>
 8017034:	4616      	mov	r6, r2
 8017036:	e7bd      	b.n	8016fb4 <_printf_i+0x128>
 8017038:	6833      	ldr	r3, [r6, #0]
 801703a:	6825      	ldr	r5, [r4, #0]
 801703c:	6961      	ldr	r1, [r4, #20]
 801703e:	1d18      	adds	r0, r3, #4
 8017040:	6030      	str	r0, [r6, #0]
 8017042:	062e      	lsls	r6, r5, #24
 8017044:	681b      	ldr	r3, [r3, #0]
 8017046:	d501      	bpl.n	801704c <_printf_i+0x1c0>
 8017048:	6019      	str	r1, [r3, #0]
 801704a:	e002      	b.n	8017052 <_printf_i+0x1c6>
 801704c:	0668      	lsls	r0, r5, #25
 801704e:	d5fb      	bpl.n	8017048 <_printf_i+0x1bc>
 8017050:	8019      	strh	r1, [r3, #0]
 8017052:	2300      	movs	r3, #0
 8017054:	6123      	str	r3, [r4, #16]
 8017056:	4616      	mov	r6, r2
 8017058:	e7bc      	b.n	8016fd4 <_printf_i+0x148>
 801705a:	6833      	ldr	r3, [r6, #0]
 801705c:	1d1a      	adds	r2, r3, #4
 801705e:	6032      	str	r2, [r6, #0]
 8017060:	681e      	ldr	r6, [r3, #0]
 8017062:	6862      	ldr	r2, [r4, #4]
 8017064:	2100      	movs	r1, #0
 8017066:	4630      	mov	r0, r6
 8017068:	f7e9 f952 	bl	8000310 <memchr>
 801706c:	b108      	cbz	r0, 8017072 <_printf_i+0x1e6>
 801706e:	1b80      	subs	r0, r0, r6
 8017070:	6060      	str	r0, [r4, #4]
 8017072:	6863      	ldr	r3, [r4, #4]
 8017074:	6123      	str	r3, [r4, #16]
 8017076:	2300      	movs	r3, #0
 8017078:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801707c:	e7aa      	b.n	8016fd4 <_printf_i+0x148>
 801707e:	6923      	ldr	r3, [r4, #16]
 8017080:	4632      	mov	r2, r6
 8017082:	4649      	mov	r1, r9
 8017084:	4640      	mov	r0, r8
 8017086:	47d0      	blx	sl
 8017088:	3001      	adds	r0, #1
 801708a:	d0ad      	beq.n	8016fe8 <_printf_i+0x15c>
 801708c:	6823      	ldr	r3, [r4, #0]
 801708e:	079b      	lsls	r3, r3, #30
 8017090:	d413      	bmi.n	80170ba <_printf_i+0x22e>
 8017092:	68e0      	ldr	r0, [r4, #12]
 8017094:	9b03      	ldr	r3, [sp, #12]
 8017096:	4298      	cmp	r0, r3
 8017098:	bfb8      	it	lt
 801709a:	4618      	movlt	r0, r3
 801709c:	e7a6      	b.n	8016fec <_printf_i+0x160>
 801709e:	2301      	movs	r3, #1
 80170a0:	4632      	mov	r2, r6
 80170a2:	4649      	mov	r1, r9
 80170a4:	4640      	mov	r0, r8
 80170a6:	47d0      	blx	sl
 80170a8:	3001      	adds	r0, #1
 80170aa:	d09d      	beq.n	8016fe8 <_printf_i+0x15c>
 80170ac:	3501      	adds	r5, #1
 80170ae:	68e3      	ldr	r3, [r4, #12]
 80170b0:	9903      	ldr	r1, [sp, #12]
 80170b2:	1a5b      	subs	r3, r3, r1
 80170b4:	42ab      	cmp	r3, r5
 80170b6:	dcf2      	bgt.n	801709e <_printf_i+0x212>
 80170b8:	e7eb      	b.n	8017092 <_printf_i+0x206>
 80170ba:	2500      	movs	r5, #0
 80170bc:	f104 0619 	add.w	r6, r4, #25
 80170c0:	e7f5      	b.n	80170ae <_printf_i+0x222>
 80170c2:	bf00      	nop
 80170c4:	0801acce 	.word	0x0801acce
 80170c8:	0801acdf 	.word	0x0801acdf

080170cc <__sflush_r>:
 80170cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80170d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170d4:	0716      	lsls	r6, r2, #28
 80170d6:	4605      	mov	r5, r0
 80170d8:	460c      	mov	r4, r1
 80170da:	d454      	bmi.n	8017186 <__sflush_r+0xba>
 80170dc:	684b      	ldr	r3, [r1, #4]
 80170de:	2b00      	cmp	r3, #0
 80170e0:	dc02      	bgt.n	80170e8 <__sflush_r+0x1c>
 80170e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	dd48      	ble.n	801717a <__sflush_r+0xae>
 80170e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80170ea:	2e00      	cmp	r6, #0
 80170ec:	d045      	beq.n	801717a <__sflush_r+0xae>
 80170ee:	2300      	movs	r3, #0
 80170f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80170f4:	682f      	ldr	r7, [r5, #0]
 80170f6:	6a21      	ldr	r1, [r4, #32]
 80170f8:	602b      	str	r3, [r5, #0]
 80170fa:	d030      	beq.n	801715e <__sflush_r+0x92>
 80170fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80170fe:	89a3      	ldrh	r3, [r4, #12]
 8017100:	0759      	lsls	r1, r3, #29
 8017102:	d505      	bpl.n	8017110 <__sflush_r+0x44>
 8017104:	6863      	ldr	r3, [r4, #4]
 8017106:	1ad2      	subs	r2, r2, r3
 8017108:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801710a:	b10b      	cbz	r3, 8017110 <__sflush_r+0x44>
 801710c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801710e:	1ad2      	subs	r2, r2, r3
 8017110:	2300      	movs	r3, #0
 8017112:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017114:	6a21      	ldr	r1, [r4, #32]
 8017116:	4628      	mov	r0, r5
 8017118:	47b0      	blx	r6
 801711a:	1c43      	adds	r3, r0, #1
 801711c:	89a3      	ldrh	r3, [r4, #12]
 801711e:	d106      	bne.n	801712e <__sflush_r+0x62>
 8017120:	6829      	ldr	r1, [r5, #0]
 8017122:	291d      	cmp	r1, #29
 8017124:	d82b      	bhi.n	801717e <__sflush_r+0xb2>
 8017126:	4a2a      	ldr	r2, [pc, #168]	@ (80171d0 <__sflush_r+0x104>)
 8017128:	410a      	asrs	r2, r1
 801712a:	07d6      	lsls	r6, r2, #31
 801712c:	d427      	bmi.n	801717e <__sflush_r+0xb2>
 801712e:	2200      	movs	r2, #0
 8017130:	6062      	str	r2, [r4, #4]
 8017132:	04d9      	lsls	r1, r3, #19
 8017134:	6922      	ldr	r2, [r4, #16]
 8017136:	6022      	str	r2, [r4, #0]
 8017138:	d504      	bpl.n	8017144 <__sflush_r+0x78>
 801713a:	1c42      	adds	r2, r0, #1
 801713c:	d101      	bne.n	8017142 <__sflush_r+0x76>
 801713e:	682b      	ldr	r3, [r5, #0]
 8017140:	b903      	cbnz	r3, 8017144 <__sflush_r+0x78>
 8017142:	6560      	str	r0, [r4, #84]	@ 0x54
 8017144:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017146:	602f      	str	r7, [r5, #0]
 8017148:	b1b9      	cbz	r1, 801717a <__sflush_r+0xae>
 801714a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801714e:	4299      	cmp	r1, r3
 8017150:	d002      	beq.n	8017158 <__sflush_r+0x8c>
 8017152:	4628      	mov	r0, r5
 8017154:	f7ff fbea 	bl	801692c <_free_r>
 8017158:	2300      	movs	r3, #0
 801715a:	6363      	str	r3, [r4, #52]	@ 0x34
 801715c:	e00d      	b.n	801717a <__sflush_r+0xae>
 801715e:	2301      	movs	r3, #1
 8017160:	4628      	mov	r0, r5
 8017162:	47b0      	blx	r6
 8017164:	4602      	mov	r2, r0
 8017166:	1c50      	adds	r0, r2, #1
 8017168:	d1c9      	bne.n	80170fe <__sflush_r+0x32>
 801716a:	682b      	ldr	r3, [r5, #0]
 801716c:	2b00      	cmp	r3, #0
 801716e:	d0c6      	beq.n	80170fe <__sflush_r+0x32>
 8017170:	2b1d      	cmp	r3, #29
 8017172:	d001      	beq.n	8017178 <__sflush_r+0xac>
 8017174:	2b16      	cmp	r3, #22
 8017176:	d11e      	bne.n	80171b6 <__sflush_r+0xea>
 8017178:	602f      	str	r7, [r5, #0]
 801717a:	2000      	movs	r0, #0
 801717c:	e022      	b.n	80171c4 <__sflush_r+0xf8>
 801717e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017182:	b21b      	sxth	r3, r3
 8017184:	e01b      	b.n	80171be <__sflush_r+0xf2>
 8017186:	690f      	ldr	r7, [r1, #16]
 8017188:	2f00      	cmp	r7, #0
 801718a:	d0f6      	beq.n	801717a <__sflush_r+0xae>
 801718c:	0793      	lsls	r3, r2, #30
 801718e:	680e      	ldr	r6, [r1, #0]
 8017190:	bf08      	it	eq
 8017192:	694b      	ldreq	r3, [r1, #20]
 8017194:	600f      	str	r7, [r1, #0]
 8017196:	bf18      	it	ne
 8017198:	2300      	movne	r3, #0
 801719a:	eba6 0807 	sub.w	r8, r6, r7
 801719e:	608b      	str	r3, [r1, #8]
 80171a0:	f1b8 0f00 	cmp.w	r8, #0
 80171a4:	dde9      	ble.n	801717a <__sflush_r+0xae>
 80171a6:	6a21      	ldr	r1, [r4, #32]
 80171a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80171aa:	4643      	mov	r3, r8
 80171ac:	463a      	mov	r2, r7
 80171ae:	4628      	mov	r0, r5
 80171b0:	47b0      	blx	r6
 80171b2:	2800      	cmp	r0, #0
 80171b4:	dc08      	bgt.n	80171c8 <__sflush_r+0xfc>
 80171b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80171ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80171be:	81a3      	strh	r3, [r4, #12]
 80171c0:	f04f 30ff 	mov.w	r0, #4294967295
 80171c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171c8:	4407      	add	r7, r0
 80171ca:	eba8 0800 	sub.w	r8, r8, r0
 80171ce:	e7e7      	b.n	80171a0 <__sflush_r+0xd4>
 80171d0:	dfbffffe 	.word	0xdfbffffe

080171d4 <_fflush_r>:
 80171d4:	b538      	push	{r3, r4, r5, lr}
 80171d6:	690b      	ldr	r3, [r1, #16]
 80171d8:	4605      	mov	r5, r0
 80171da:	460c      	mov	r4, r1
 80171dc:	b913      	cbnz	r3, 80171e4 <_fflush_r+0x10>
 80171de:	2500      	movs	r5, #0
 80171e0:	4628      	mov	r0, r5
 80171e2:	bd38      	pop	{r3, r4, r5, pc}
 80171e4:	b118      	cbz	r0, 80171ee <_fflush_r+0x1a>
 80171e6:	6a03      	ldr	r3, [r0, #32]
 80171e8:	b90b      	cbnz	r3, 80171ee <_fflush_r+0x1a>
 80171ea:	f7ff fa0b 	bl	8016604 <__sinit>
 80171ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d0f3      	beq.n	80171de <_fflush_r+0xa>
 80171f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80171f8:	07d0      	lsls	r0, r2, #31
 80171fa:	d404      	bmi.n	8017206 <_fflush_r+0x32>
 80171fc:	0599      	lsls	r1, r3, #22
 80171fe:	d402      	bmi.n	8017206 <_fflush_r+0x32>
 8017200:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017202:	f7ff fb64 	bl	80168ce <__retarget_lock_acquire_recursive>
 8017206:	4628      	mov	r0, r5
 8017208:	4621      	mov	r1, r4
 801720a:	f7ff ff5f 	bl	80170cc <__sflush_r>
 801720e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017210:	07da      	lsls	r2, r3, #31
 8017212:	4605      	mov	r5, r0
 8017214:	d4e4      	bmi.n	80171e0 <_fflush_r+0xc>
 8017216:	89a3      	ldrh	r3, [r4, #12]
 8017218:	059b      	lsls	r3, r3, #22
 801721a:	d4e1      	bmi.n	80171e0 <_fflush_r+0xc>
 801721c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801721e:	f7ff fb57 	bl	80168d0 <__retarget_lock_release_recursive>
 8017222:	e7dd      	b.n	80171e0 <_fflush_r+0xc>

08017224 <fiprintf>:
 8017224:	b40e      	push	{r1, r2, r3}
 8017226:	b503      	push	{r0, r1, lr}
 8017228:	4601      	mov	r1, r0
 801722a:	ab03      	add	r3, sp, #12
 801722c:	4805      	ldr	r0, [pc, #20]	@ (8017244 <fiprintf+0x20>)
 801722e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017232:	6800      	ldr	r0, [r0, #0]
 8017234:	9301      	str	r3, [sp, #4]
 8017236:	f7ff fca3 	bl	8016b80 <_vfiprintf_r>
 801723a:	b002      	add	sp, #8
 801723c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017240:	b003      	add	sp, #12
 8017242:	4770      	bx	lr
 8017244:	24000040 	.word	0x24000040

08017248 <__swbuf_r>:
 8017248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801724a:	460e      	mov	r6, r1
 801724c:	4614      	mov	r4, r2
 801724e:	4605      	mov	r5, r0
 8017250:	b118      	cbz	r0, 801725a <__swbuf_r+0x12>
 8017252:	6a03      	ldr	r3, [r0, #32]
 8017254:	b90b      	cbnz	r3, 801725a <__swbuf_r+0x12>
 8017256:	f7ff f9d5 	bl	8016604 <__sinit>
 801725a:	69a3      	ldr	r3, [r4, #24]
 801725c:	60a3      	str	r3, [r4, #8]
 801725e:	89a3      	ldrh	r3, [r4, #12]
 8017260:	071a      	lsls	r2, r3, #28
 8017262:	d501      	bpl.n	8017268 <__swbuf_r+0x20>
 8017264:	6923      	ldr	r3, [r4, #16]
 8017266:	b943      	cbnz	r3, 801727a <__swbuf_r+0x32>
 8017268:	4621      	mov	r1, r4
 801726a:	4628      	mov	r0, r5
 801726c:	f000 f82a 	bl	80172c4 <__swsetup_r>
 8017270:	b118      	cbz	r0, 801727a <__swbuf_r+0x32>
 8017272:	f04f 37ff 	mov.w	r7, #4294967295
 8017276:	4638      	mov	r0, r7
 8017278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801727a:	6823      	ldr	r3, [r4, #0]
 801727c:	6922      	ldr	r2, [r4, #16]
 801727e:	1a98      	subs	r0, r3, r2
 8017280:	6963      	ldr	r3, [r4, #20]
 8017282:	b2f6      	uxtb	r6, r6
 8017284:	4283      	cmp	r3, r0
 8017286:	4637      	mov	r7, r6
 8017288:	dc05      	bgt.n	8017296 <__swbuf_r+0x4e>
 801728a:	4621      	mov	r1, r4
 801728c:	4628      	mov	r0, r5
 801728e:	f7ff ffa1 	bl	80171d4 <_fflush_r>
 8017292:	2800      	cmp	r0, #0
 8017294:	d1ed      	bne.n	8017272 <__swbuf_r+0x2a>
 8017296:	68a3      	ldr	r3, [r4, #8]
 8017298:	3b01      	subs	r3, #1
 801729a:	60a3      	str	r3, [r4, #8]
 801729c:	6823      	ldr	r3, [r4, #0]
 801729e:	1c5a      	adds	r2, r3, #1
 80172a0:	6022      	str	r2, [r4, #0]
 80172a2:	701e      	strb	r6, [r3, #0]
 80172a4:	6962      	ldr	r2, [r4, #20]
 80172a6:	1c43      	adds	r3, r0, #1
 80172a8:	429a      	cmp	r2, r3
 80172aa:	d004      	beq.n	80172b6 <__swbuf_r+0x6e>
 80172ac:	89a3      	ldrh	r3, [r4, #12]
 80172ae:	07db      	lsls	r3, r3, #31
 80172b0:	d5e1      	bpl.n	8017276 <__swbuf_r+0x2e>
 80172b2:	2e0a      	cmp	r6, #10
 80172b4:	d1df      	bne.n	8017276 <__swbuf_r+0x2e>
 80172b6:	4621      	mov	r1, r4
 80172b8:	4628      	mov	r0, r5
 80172ba:	f7ff ff8b 	bl	80171d4 <_fflush_r>
 80172be:	2800      	cmp	r0, #0
 80172c0:	d0d9      	beq.n	8017276 <__swbuf_r+0x2e>
 80172c2:	e7d6      	b.n	8017272 <__swbuf_r+0x2a>

080172c4 <__swsetup_r>:
 80172c4:	b538      	push	{r3, r4, r5, lr}
 80172c6:	4b29      	ldr	r3, [pc, #164]	@ (801736c <__swsetup_r+0xa8>)
 80172c8:	4605      	mov	r5, r0
 80172ca:	6818      	ldr	r0, [r3, #0]
 80172cc:	460c      	mov	r4, r1
 80172ce:	b118      	cbz	r0, 80172d8 <__swsetup_r+0x14>
 80172d0:	6a03      	ldr	r3, [r0, #32]
 80172d2:	b90b      	cbnz	r3, 80172d8 <__swsetup_r+0x14>
 80172d4:	f7ff f996 	bl	8016604 <__sinit>
 80172d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80172dc:	0719      	lsls	r1, r3, #28
 80172de:	d422      	bmi.n	8017326 <__swsetup_r+0x62>
 80172e0:	06da      	lsls	r2, r3, #27
 80172e2:	d407      	bmi.n	80172f4 <__swsetup_r+0x30>
 80172e4:	2209      	movs	r2, #9
 80172e6:	602a      	str	r2, [r5, #0]
 80172e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80172ec:	81a3      	strh	r3, [r4, #12]
 80172ee:	f04f 30ff 	mov.w	r0, #4294967295
 80172f2:	e033      	b.n	801735c <__swsetup_r+0x98>
 80172f4:	0758      	lsls	r0, r3, #29
 80172f6:	d512      	bpl.n	801731e <__swsetup_r+0x5a>
 80172f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80172fa:	b141      	cbz	r1, 801730e <__swsetup_r+0x4a>
 80172fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017300:	4299      	cmp	r1, r3
 8017302:	d002      	beq.n	801730a <__swsetup_r+0x46>
 8017304:	4628      	mov	r0, r5
 8017306:	f7ff fb11 	bl	801692c <_free_r>
 801730a:	2300      	movs	r3, #0
 801730c:	6363      	str	r3, [r4, #52]	@ 0x34
 801730e:	89a3      	ldrh	r3, [r4, #12]
 8017310:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017314:	81a3      	strh	r3, [r4, #12]
 8017316:	2300      	movs	r3, #0
 8017318:	6063      	str	r3, [r4, #4]
 801731a:	6923      	ldr	r3, [r4, #16]
 801731c:	6023      	str	r3, [r4, #0]
 801731e:	89a3      	ldrh	r3, [r4, #12]
 8017320:	f043 0308 	orr.w	r3, r3, #8
 8017324:	81a3      	strh	r3, [r4, #12]
 8017326:	6923      	ldr	r3, [r4, #16]
 8017328:	b94b      	cbnz	r3, 801733e <__swsetup_r+0x7a>
 801732a:	89a3      	ldrh	r3, [r4, #12]
 801732c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017330:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017334:	d003      	beq.n	801733e <__swsetup_r+0x7a>
 8017336:	4621      	mov	r1, r4
 8017338:	4628      	mov	r0, r5
 801733a:	f000 f856 	bl	80173ea <__smakebuf_r>
 801733e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017342:	f013 0201 	ands.w	r2, r3, #1
 8017346:	d00a      	beq.n	801735e <__swsetup_r+0x9a>
 8017348:	2200      	movs	r2, #0
 801734a:	60a2      	str	r2, [r4, #8]
 801734c:	6962      	ldr	r2, [r4, #20]
 801734e:	4252      	negs	r2, r2
 8017350:	61a2      	str	r2, [r4, #24]
 8017352:	6922      	ldr	r2, [r4, #16]
 8017354:	b942      	cbnz	r2, 8017368 <__swsetup_r+0xa4>
 8017356:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801735a:	d1c5      	bne.n	80172e8 <__swsetup_r+0x24>
 801735c:	bd38      	pop	{r3, r4, r5, pc}
 801735e:	0799      	lsls	r1, r3, #30
 8017360:	bf58      	it	pl
 8017362:	6962      	ldrpl	r2, [r4, #20]
 8017364:	60a2      	str	r2, [r4, #8]
 8017366:	e7f4      	b.n	8017352 <__swsetup_r+0x8e>
 8017368:	2000      	movs	r0, #0
 801736a:	e7f7      	b.n	801735c <__swsetup_r+0x98>
 801736c:	24000040 	.word	0x24000040

08017370 <_sbrk_r>:
 8017370:	b538      	push	{r3, r4, r5, lr}
 8017372:	4d06      	ldr	r5, [pc, #24]	@ (801738c <_sbrk_r+0x1c>)
 8017374:	2300      	movs	r3, #0
 8017376:	4604      	mov	r4, r0
 8017378:	4608      	mov	r0, r1
 801737a:	602b      	str	r3, [r5, #0]
 801737c:	f7e9 fb6a 	bl	8000a54 <_sbrk>
 8017380:	1c43      	adds	r3, r0, #1
 8017382:	d102      	bne.n	801738a <_sbrk_r+0x1a>
 8017384:	682b      	ldr	r3, [r5, #0]
 8017386:	b103      	cbz	r3, 801738a <_sbrk_r+0x1a>
 8017388:	6023      	str	r3, [r4, #0]
 801738a:	bd38      	pop	{r3, r4, r5, pc}
 801738c:	24008198 	.word	0x24008198

08017390 <abort>:
 8017390:	b508      	push	{r3, lr}
 8017392:	2006      	movs	r0, #6
 8017394:	f000 f88e 	bl	80174b4 <raise>
 8017398:	2001      	movs	r0, #1
 801739a:	f7e9 fae3 	bl	8000964 <_exit>

0801739e <__swhatbuf_r>:
 801739e:	b570      	push	{r4, r5, r6, lr}
 80173a0:	460c      	mov	r4, r1
 80173a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80173a6:	2900      	cmp	r1, #0
 80173a8:	b096      	sub	sp, #88	@ 0x58
 80173aa:	4615      	mov	r5, r2
 80173ac:	461e      	mov	r6, r3
 80173ae:	da0d      	bge.n	80173cc <__swhatbuf_r+0x2e>
 80173b0:	89a3      	ldrh	r3, [r4, #12]
 80173b2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80173b6:	f04f 0100 	mov.w	r1, #0
 80173ba:	bf14      	ite	ne
 80173bc:	2340      	movne	r3, #64	@ 0x40
 80173be:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80173c2:	2000      	movs	r0, #0
 80173c4:	6031      	str	r1, [r6, #0]
 80173c6:	602b      	str	r3, [r5, #0]
 80173c8:	b016      	add	sp, #88	@ 0x58
 80173ca:	bd70      	pop	{r4, r5, r6, pc}
 80173cc:	466a      	mov	r2, sp
 80173ce:	f000 f879 	bl	80174c4 <_fstat_r>
 80173d2:	2800      	cmp	r0, #0
 80173d4:	dbec      	blt.n	80173b0 <__swhatbuf_r+0x12>
 80173d6:	9901      	ldr	r1, [sp, #4]
 80173d8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80173dc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80173e0:	4259      	negs	r1, r3
 80173e2:	4159      	adcs	r1, r3
 80173e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80173e8:	e7eb      	b.n	80173c2 <__swhatbuf_r+0x24>

080173ea <__smakebuf_r>:
 80173ea:	898b      	ldrh	r3, [r1, #12]
 80173ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80173ee:	079d      	lsls	r5, r3, #30
 80173f0:	4606      	mov	r6, r0
 80173f2:	460c      	mov	r4, r1
 80173f4:	d507      	bpl.n	8017406 <__smakebuf_r+0x1c>
 80173f6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80173fa:	6023      	str	r3, [r4, #0]
 80173fc:	6123      	str	r3, [r4, #16]
 80173fe:	2301      	movs	r3, #1
 8017400:	6163      	str	r3, [r4, #20]
 8017402:	b003      	add	sp, #12
 8017404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017406:	ab01      	add	r3, sp, #4
 8017408:	466a      	mov	r2, sp
 801740a:	f7ff ffc8 	bl	801739e <__swhatbuf_r>
 801740e:	9f00      	ldr	r7, [sp, #0]
 8017410:	4605      	mov	r5, r0
 8017412:	4639      	mov	r1, r7
 8017414:	4630      	mov	r0, r6
 8017416:	f7ff fafd 	bl	8016a14 <_malloc_r>
 801741a:	b948      	cbnz	r0, 8017430 <__smakebuf_r+0x46>
 801741c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017420:	059a      	lsls	r2, r3, #22
 8017422:	d4ee      	bmi.n	8017402 <__smakebuf_r+0x18>
 8017424:	f023 0303 	bic.w	r3, r3, #3
 8017428:	f043 0302 	orr.w	r3, r3, #2
 801742c:	81a3      	strh	r3, [r4, #12]
 801742e:	e7e2      	b.n	80173f6 <__smakebuf_r+0xc>
 8017430:	89a3      	ldrh	r3, [r4, #12]
 8017432:	6020      	str	r0, [r4, #0]
 8017434:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017438:	81a3      	strh	r3, [r4, #12]
 801743a:	9b01      	ldr	r3, [sp, #4]
 801743c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017440:	b15b      	cbz	r3, 801745a <__smakebuf_r+0x70>
 8017442:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017446:	4630      	mov	r0, r6
 8017448:	f000 f84e 	bl	80174e8 <_isatty_r>
 801744c:	b128      	cbz	r0, 801745a <__smakebuf_r+0x70>
 801744e:	89a3      	ldrh	r3, [r4, #12]
 8017450:	f023 0303 	bic.w	r3, r3, #3
 8017454:	f043 0301 	orr.w	r3, r3, #1
 8017458:	81a3      	strh	r3, [r4, #12]
 801745a:	89a3      	ldrh	r3, [r4, #12]
 801745c:	431d      	orrs	r5, r3
 801745e:	81a5      	strh	r5, [r4, #12]
 8017460:	e7cf      	b.n	8017402 <__smakebuf_r+0x18>

08017462 <_raise_r>:
 8017462:	291f      	cmp	r1, #31
 8017464:	b538      	push	{r3, r4, r5, lr}
 8017466:	4605      	mov	r5, r0
 8017468:	460c      	mov	r4, r1
 801746a:	d904      	bls.n	8017476 <_raise_r+0x14>
 801746c:	2316      	movs	r3, #22
 801746e:	6003      	str	r3, [r0, #0]
 8017470:	f04f 30ff 	mov.w	r0, #4294967295
 8017474:	bd38      	pop	{r3, r4, r5, pc}
 8017476:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017478:	b112      	cbz	r2, 8017480 <_raise_r+0x1e>
 801747a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801747e:	b94b      	cbnz	r3, 8017494 <_raise_r+0x32>
 8017480:	4628      	mov	r0, r5
 8017482:	f000 f853 	bl	801752c <_getpid_r>
 8017486:	4622      	mov	r2, r4
 8017488:	4601      	mov	r1, r0
 801748a:	4628      	mov	r0, r5
 801748c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017490:	f000 b83a 	b.w	8017508 <_kill_r>
 8017494:	2b01      	cmp	r3, #1
 8017496:	d00a      	beq.n	80174ae <_raise_r+0x4c>
 8017498:	1c59      	adds	r1, r3, #1
 801749a:	d103      	bne.n	80174a4 <_raise_r+0x42>
 801749c:	2316      	movs	r3, #22
 801749e:	6003      	str	r3, [r0, #0]
 80174a0:	2001      	movs	r0, #1
 80174a2:	e7e7      	b.n	8017474 <_raise_r+0x12>
 80174a4:	2100      	movs	r1, #0
 80174a6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80174aa:	4620      	mov	r0, r4
 80174ac:	4798      	blx	r3
 80174ae:	2000      	movs	r0, #0
 80174b0:	e7e0      	b.n	8017474 <_raise_r+0x12>
	...

080174b4 <raise>:
 80174b4:	4b02      	ldr	r3, [pc, #8]	@ (80174c0 <raise+0xc>)
 80174b6:	4601      	mov	r1, r0
 80174b8:	6818      	ldr	r0, [r3, #0]
 80174ba:	f7ff bfd2 	b.w	8017462 <_raise_r>
 80174be:	bf00      	nop
 80174c0:	24000040 	.word	0x24000040

080174c4 <_fstat_r>:
 80174c4:	b538      	push	{r3, r4, r5, lr}
 80174c6:	4d07      	ldr	r5, [pc, #28]	@ (80174e4 <_fstat_r+0x20>)
 80174c8:	2300      	movs	r3, #0
 80174ca:	4604      	mov	r4, r0
 80174cc:	4608      	mov	r0, r1
 80174ce:	4611      	mov	r1, r2
 80174d0:	602b      	str	r3, [r5, #0]
 80174d2:	f7e9 fa97 	bl	8000a04 <_fstat>
 80174d6:	1c43      	adds	r3, r0, #1
 80174d8:	d102      	bne.n	80174e0 <_fstat_r+0x1c>
 80174da:	682b      	ldr	r3, [r5, #0]
 80174dc:	b103      	cbz	r3, 80174e0 <_fstat_r+0x1c>
 80174de:	6023      	str	r3, [r4, #0]
 80174e0:	bd38      	pop	{r3, r4, r5, pc}
 80174e2:	bf00      	nop
 80174e4:	24008198 	.word	0x24008198

080174e8 <_isatty_r>:
 80174e8:	b538      	push	{r3, r4, r5, lr}
 80174ea:	4d06      	ldr	r5, [pc, #24]	@ (8017504 <_isatty_r+0x1c>)
 80174ec:	2300      	movs	r3, #0
 80174ee:	4604      	mov	r4, r0
 80174f0:	4608      	mov	r0, r1
 80174f2:	602b      	str	r3, [r5, #0]
 80174f4:	f7e9 fa96 	bl	8000a24 <_isatty>
 80174f8:	1c43      	adds	r3, r0, #1
 80174fa:	d102      	bne.n	8017502 <_isatty_r+0x1a>
 80174fc:	682b      	ldr	r3, [r5, #0]
 80174fe:	b103      	cbz	r3, 8017502 <_isatty_r+0x1a>
 8017500:	6023      	str	r3, [r4, #0]
 8017502:	bd38      	pop	{r3, r4, r5, pc}
 8017504:	24008198 	.word	0x24008198

08017508 <_kill_r>:
 8017508:	b538      	push	{r3, r4, r5, lr}
 801750a:	4d07      	ldr	r5, [pc, #28]	@ (8017528 <_kill_r+0x20>)
 801750c:	2300      	movs	r3, #0
 801750e:	4604      	mov	r4, r0
 8017510:	4608      	mov	r0, r1
 8017512:	4611      	mov	r1, r2
 8017514:	602b      	str	r3, [r5, #0]
 8017516:	f7e9 fa13 	bl	8000940 <_kill>
 801751a:	1c43      	adds	r3, r0, #1
 801751c:	d102      	bne.n	8017524 <_kill_r+0x1c>
 801751e:	682b      	ldr	r3, [r5, #0]
 8017520:	b103      	cbz	r3, 8017524 <_kill_r+0x1c>
 8017522:	6023      	str	r3, [r4, #0]
 8017524:	bd38      	pop	{r3, r4, r5, pc}
 8017526:	bf00      	nop
 8017528:	24008198 	.word	0x24008198

0801752c <_getpid_r>:
 801752c:	f7e9 ba00 	b.w	8000930 <_getpid>

08017530 <_init>:
 8017530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017532:	bf00      	nop
 8017534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017536:	bc08      	pop	{r3}
 8017538:	469e      	mov	lr, r3
 801753a:	4770      	bx	lr

0801753c <_fini>:
 801753c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801753e:	bf00      	nop
 8017540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017542:	bc08      	pop	{r3}
 8017544:	469e      	mov	lr, r3
 8017546:	4770      	bx	lr
