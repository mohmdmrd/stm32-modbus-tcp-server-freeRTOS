
nucleo_H723_modbusTCP_server_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017838  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000037b8  08017b08  08017b08  00018b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801b2c0  0801b2c0  0001c2c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801b2c8  0801b2c8  0001c2c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801b2cc  0801b2cc  0001c2cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000090  24000000  0801b2d0  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00008120  24000090  0801b360  0001d090  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240081b0  0801b360  0001d1b0  2**0
                  ALLOC
  9 .lwip_sec     00004a83  30000000  30000000  0001e000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0001d090  2**0
                  CONTENTS, READONLY
 11 .debug_info   00034dee  00000000  00000000  0001d0be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00007e06  00000000  00000000  00051eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000025e0  00000000  00000000  00059cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001dd0  00000000  00000000  0005c298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00013a46  00000000  00000000  0005e068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003ac5d  00000000  00000000  00071aae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016aa27  00000000  00000000  000ac70b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00217132  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000a4e8  00000000  00000000  00217178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000005a  00000000  00000000  00221660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000090 	.word	0x24000090
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08017af0 	.word	0x08017af0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000094 	.word	0x24000094
 800030c:	08017af0 	.word	0x08017af0

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80003b6:	f000 f999 	bl	80006ec <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003ba:	4b46      	ldr	r3, [pc, #280]	@ (80004d4 <main+0x124>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d11b      	bne.n	80003fe <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003c6:	f3bf 8f4f 	dsb	sy
}
 80003ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003cc:	f3bf 8f6f 	isb	sy
}
 80003d0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003d2:	4b40      	ldr	r3, [pc, #256]	@ (80004d4 <main+0x124>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003da:	f3bf 8f4f 	dsb	sy
}
 80003de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003e0:	f3bf 8f6f 	isb	sy
}
 80003e4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003e6:	4b3b      	ldr	r3, [pc, #236]	@ (80004d4 <main+0x124>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	4a3a      	ldr	r2, [pc, #232]	@ (80004d4 <main+0x124>)
 80003ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003f0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003f2:	f3bf 8f4f 	dsb	sy
}
 80003f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003f8:	f3bf 8f6f 	isb	sy
}
 80003fc:	e000      	b.n	8000400 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003fe:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000400:	4b34      	ldr	r3, [pc, #208]	@ (80004d4 <main+0x124>)
 8000402:	695b      	ldr	r3, [r3, #20]
 8000404:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000408:	2b00      	cmp	r3, #0
 800040a:	d138      	bne.n	800047e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800040c:	4b31      	ldr	r3, [pc, #196]	@ (80004d4 <main+0x124>)
 800040e:	2200      	movs	r2, #0
 8000410:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000414:	f3bf 8f4f 	dsb	sy
}
 8000418:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800041a:	4b2e      	ldr	r3, [pc, #184]	@ (80004d4 <main+0x124>)
 800041c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000420:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	0b5b      	lsrs	r3, r3, #13
 8000426:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800042a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	08db      	lsrs	r3, r3, #3
 8000430:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000434:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000436:	68bb      	ldr	r3, [r7, #8]
 8000438:	015a      	lsls	r2, r3, #5
 800043a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800043e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000440:	687a      	ldr	r2, [r7, #4]
 8000442:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000444:	4923      	ldr	r1, [pc, #140]	@ (80004d4 <main+0x124>)
 8000446:	4313      	orrs	r3, r2
 8000448:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	1e5a      	subs	r2, r3, #1
 8000450:	607a      	str	r2, [r7, #4]
 8000452:	2b00      	cmp	r3, #0
 8000454:	d1ef      	bne.n	8000436 <main+0x86>
    } while(sets-- != 0U);
 8000456:	68bb      	ldr	r3, [r7, #8]
 8000458:	1e5a      	subs	r2, r3, #1
 800045a:	60ba      	str	r2, [r7, #8]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d1e5      	bne.n	800042c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000460:	f3bf 8f4f 	dsb	sy
}
 8000464:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000466:	4b1b      	ldr	r3, [pc, #108]	@ (80004d4 <main+0x124>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	4a1a      	ldr	r2, [pc, #104]	@ (80004d4 <main+0x124>)
 800046c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000470:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000472:	f3bf 8f4f 	dsb	sy
}
 8000476:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000478:	f3bf 8f6f 	isb	sy
}
 800047c:	e000      	b.n	8000480 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800047e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000480:	f000 ffba 	bl	80013f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000484:	f000 f832 	bl	80004ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000488:	f000 f8a0 	bl	80005cc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  myModbus.u16Port=502;//port Address
 800048c:	4b12      	ldr	r3, [pc, #72]	@ (80004d8 <main+0x128>)
 800048e:	f44f 72fb 	mov.w	r2, #502	@ 0x1f6
 8000492:	80da      	strh	r2, [r3, #6]
  myModbus.u8slaveID=0x01;//slave Address for modbus
 8000494:	4b10      	ldr	r3, [pc, #64]	@ (80004d8 <main+0x128>)
 8000496:	2201      	movs	r2, #1
 8000498:	721a      	strb	r2, [r3, #8]
  myModbus.Timeout=1000;//timeout
 800049a:	4b0f      	ldr	r3, [pc, #60]	@ (80004d8 <main+0x128>)
 800049c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80004a0:	815a      	strh	r2, [r3, #10]
  myModbus.u16reg=ModbusData;//buffer register
 80004a2:	4b0d      	ldr	r3, [pc, #52]	@ (80004d8 <main+0x128>)
 80004a4:	4a0d      	ldr	r2, [pc, #52]	@ (80004dc <main+0x12c>)
 80004a6:	601a      	str	r2, [r3, #0]
  myModbus.u16regsize= sizeof(ModbusData)/sizeof(ModbusData[0]);//get buffer size
 80004a8:	4b0b      	ldr	r3, [pc, #44]	@ (80004d8 <main+0x128>)
 80004aa:	2228      	movs	r2, #40	@ 0x28
 80004ac:	809a      	strh	r2, [r3, #4]

  HAL_Delay(1000);//must used
 80004ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004b2:	f000 fffd 	bl	80014b0 <HAL_Delay>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004b6:	f005 fa09 	bl	80058cc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004ba:	4a09      	ldr	r2, [pc, #36]	@ (80004e0 <main+0x130>)
 80004bc:	2100      	movs	r1, #0
 80004be:	4809      	ldr	r0, [pc, #36]	@ (80004e4 <main+0x134>)
 80004c0:	f005 fa63 	bl	800598a <osThreadNew>
 80004c4:	4603      	mov	r3, r0
 80004c6:	4a08      	ldr	r2, [pc, #32]	@ (80004e8 <main+0x138>)
 80004c8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004ca:	f005 fa23 	bl	8005914 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ce:	bf00      	nop
 80004d0:	e7fd      	b.n	80004ce <main+0x11e>
 80004d2:	bf00      	nop
 80004d4:	e000ed00 	.word	0xe000ed00
 80004d8:	240000b0 	.word	0x240000b0
 80004dc:	240000bc 	.word	0x240000bc
 80004e0:	0801b07c 	.word	0x0801b07c
 80004e4:	080006cd 	.word	0x080006cd
 80004e8:	240000ac 	.word	0x240000ac

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b09c      	sub	sp, #112	@ 0x70
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004f6:	224c      	movs	r2, #76	@ 0x4c
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f016 fbfd 	bl	8016cfa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000500:	1d3b      	adds	r3, r7, #4
 8000502:	2220      	movs	r2, #32
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f016 fbf7 	bl	8016cfa <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800050c:	2002      	movs	r0, #2
 800050e:	f003 f889 	bl	8003624 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000512:	2300      	movs	r3, #0
 8000514:	603b      	str	r3, [r7, #0]
 8000516:	4b2c      	ldr	r3, [pc, #176]	@ (80005c8 <SystemClock_Config+0xdc>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	4a2b      	ldr	r2, [pc, #172]	@ (80005c8 <SystemClock_Config+0xdc>)
 800051c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000520:	6193      	str	r3, [r2, #24]
 8000522:	4b29      	ldr	r3, [pc, #164]	@ (80005c8 <SystemClock_Config+0xdc>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800052a:	603b      	str	r3, [r7, #0]
 800052c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800052e:	bf00      	nop
 8000530:	4b25      	ldr	r3, [pc, #148]	@ (80005c8 <SystemClock_Config+0xdc>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000538:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800053c:	d1f8      	bne.n	8000530 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800053e:	2302      	movs	r3, #2
 8000540:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000542:	2301      	movs	r3, #1
 8000544:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000546:	2340      	movs	r3, #64	@ 0x40
 8000548:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054a:	2302      	movs	r3, #2
 800054c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800054e:	2300      	movs	r3, #0
 8000550:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000552:	2304      	movs	r3, #4
 8000554:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 34;
 8000556:	2322      	movs	r3, #34	@ 0x22
 8000558:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800055a:	2301      	movs	r3, #1
 800055c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800055e:	2302      	movs	r3, #2
 8000560:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000562:	2302      	movs	r3, #2
 8000564:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000566:	230c      	movs	r3, #12
 8000568:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800056a:	2300      	movs	r3, #0
 800056c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 800056e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000572:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000574:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000578:	4618      	mov	r0, r3
 800057a:	f003 f88d 	bl	8003698 <HAL_RCC_OscConfig>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000584:	f000 f918 	bl	80007b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000588:	233f      	movs	r3, #63	@ 0x3f
 800058a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058c:	2303      	movs	r3, #3
 800058e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000594:	2308      	movs	r3, #8
 8000596:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000598:	2340      	movs	r3, #64	@ 0x40
 800059a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800059c:	2340      	movs	r3, #64	@ 0x40
 800059e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80005a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005a4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80005a6:	2340      	movs	r3, #64	@ 0x40
 80005a8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	2103      	movs	r1, #3
 80005ae:	4618      	mov	r0, r3
 80005b0:	f003 fc4c 	bl	8003e4c <HAL_RCC_ClockConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80005ba:	f000 f8fd 	bl	80007b8 <Error_Handler>
  }
}
 80005be:	bf00      	nop
 80005c0:	3770      	adds	r7, #112	@ 0x70
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	58024800 	.word	0x58024800

080005cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08c      	sub	sp, #48	@ 0x30
 80005d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d2:	f107 031c 	add.w	r3, r7, #28
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	60da      	str	r2, [r3, #12]
 80005e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005e2:	4b38      	ldr	r3, [pc, #224]	@ (80006c4 <MX_GPIO_Init+0xf8>)
 80005e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005e8:	4a36      	ldr	r2, [pc, #216]	@ (80006c4 <MX_GPIO_Init+0xf8>)
 80005ea:	f043 0320 	orr.w	r3, r3, #32
 80005ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005f2:	4b34      	ldr	r3, [pc, #208]	@ (80006c4 <MX_GPIO_Init+0xf8>)
 80005f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005f8:	f003 0320 	and.w	r3, r3, #32
 80005fc:	61bb      	str	r3, [r7, #24]
 80005fe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000600:	4b30      	ldr	r3, [pc, #192]	@ (80006c4 <MX_GPIO_Init+0xf8>)
 8000602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000606:	4a2f      	ldr	r2, [pc, #188]	@ (80006c4 <MX_GPIO_Init+0xf8>)
 8000608:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800060c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000610:	4b2c      	ldr	r3, [pc, #176]	@ (80006c4 <MX_GPIO_Init+0xf8>)
 8000612:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800061a:	617b      	str	r3, [r7, #20]
 800061c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061e:	4b29      	ldr	r3, [pc, #164]	@ (80006c4 <MX_GPIO_Init+0xf8>)
 8000620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000624:	4a27      	ldr	r2, [pc, #156]	@ (80006c4 <MX_GPIO_Init+0xf8>)
 8000626:	f043 0304 	orr.w	r3, r3, #4
 800062a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800062e:	4b25      	ldr	r3, [pc, #148]	@ (80006c4 <MX_GPIO_Init+0xf8>)
 8000630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000634:	f003 0304 	and.w	r3, r3, #4
 8000638:	613b      	str	r3, [r7, #16]
 800063a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063c:	4b21      	ldr	r3, [pc, #132]	@ (80006c4 <MX_GPIO_Init+0xf8>)
 800063e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000642:	4a20      	ldr	r2, [pc, #128]	@ (80006c4 <MX_GPIO_Init+0xf8>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800064c:	4b1d      	ldr	r3, [pc, #116]	@ (80006c4 <MX_GPIO_Init+0xf8>)
 800064e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065a:	4b1a      	ldr	r3, [pc, #104]	@ (80006c4 <MX_GPIO_Init+0xf8>)
 800065c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000660:	4a18      	ldr	r2, [pc, #96]	@ (80006c4 <MX_GPIO_Init+0xf8>)
 8000662:	f043 0302 	orr.w	r3, r3, #2
 8000666:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800066a:	4b16      	ldr	r3, [pc, #88]	@ (80006c4 <MX_GPIO_Init+0xf8>)
 800066c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000670:	f003 0302 	and.w	r3, r3, #2
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000678:	4b12      	ldr	r3, [pc, #72]	@ (80006c4 <MX_GPIO_Init+0xf8>)
 800067a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800067e:	4a11      	ldr	r2, [pc, #68]	@ (80006c4 <MX_GPIO_Init+0xf8>)
 8000680:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000684:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000688:	4b0e      	ldr	r3, [pc, #56]	@ (80006c4 <MX_GPIO_Init+0xf8>)
 800068a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800068e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	2101      	movs	r1, #1
 800069a:	480b      	ldr	r0, [pc, #44]	@ (80006c8 <MX_GPIO_Init+0xfc>)
 800069c:	f002 ffa8 	bl	80035f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006a0:	2301      	movs	r3, #1
 80006a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a4:	2301      	movs	r3, #1
 80006a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ac:	2300      	movs	r3, #0
 80006ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006b0:	f107 031c 	add.w	r3, r7, #28
 80006b4:	4619      	mov	r1, r3
 80006b6:	4804      	ldr	r0, [pc, #16]	@ (80006c8 <MX_GPIO_Init+0xfc>)
 80006b8:	f002 fdf2 	bl	80032a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006bc:	bf00      	nop
 80006be:	3730      	adds	r7, #48	@ 0x30
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	58024400 	.word	0x58024400
 80006c8:	58021400 	.word	0x58021400

080006cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80006d4:	f004 fa54 	bl	8004b80 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  tcpserver_init(&myModbus);
 80006d8:	4803      	ldr	r0, [pc, #12]	@ (80006e8 <StartDefaultTask+0x1c>)
 80006da:	f000 fba1 	bl	8000e20 <tcpserver_init>
  /* Infinite loop */
  for(;;)
  {
    HAL_Delay(100);
 80006de:	2064      	movs	r0, #100	@ 0x64
 80006e0:	f000 fee6 	bl	80014b0 <HAL_Delay>
 80006e4:	e7fb      	b.n	80006de <StartDefaultTask+0x12>
 80006e6:	bf00      	nop
 80006e8:	240000b0 	.word	0x240000b0

080006ec <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80006f2:	463b      	mov	r3, r7
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80006fe:	f000 ffef 	bl	80016e0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000702:	2301      	movs	r3, #1
 8000704:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000706:	2300      	movs	r3, #0
 8000708:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800070e:	231f      	movs	r3, #31
 8000710:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000712:	2387      	movs	r3, #135	@ 0x87
 8000714:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000716:	2300      	movs	r3, #0
 8000718:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800071a:	2300      	movs	r3, #0
 800071c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800071e:	2301      	movs	r3, #1
 8000720:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000722:	2301      	movs	r3, #1
 8000724:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000726:	2300      	movs	r3, #0
 8000728:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800072a:	2300      	movs	r3, #0
 800072c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800072e:	463b      	mov	r3, r7
 8000730:	4618      	mov	r0, r3
 8000732:	f001 f80d 	bl	8001750 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000736:	2301      	movs	r3, #1
 8000738:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 800073a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800073e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000740:	2307      	movs	r3, #7
 8000742:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000744:	2300      	movs	r3, #0
 8000746:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000748:	2303      	movs	r3, #3
 800074a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800074c:	2300      	movs	r3, #0
 800074e:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000750:	2300      	movs	r3, #0
 8000752:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000754:	2301      	movs	r3, #1
 8000756:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000758:	463b      	mov	r3, r7
 800075a:	4618      	mov	r0, r3
 800075c:	f000 fff8 	bl	8001750 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000760:	2302      	movs	r3, #2
 8000762:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30004000;
 8000764:	4b0a      	ldr	r3, [pc, #40]	@ (8000790 <MPU_Config+0xa4>)
 8000766:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000768:	230d      	movs	r3, #13
 800076a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800076c:	2301      	movs	r3, #1
 800076e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000770:	2301      	movs	r3, #1
 8000772:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000774:	2300      	movs	r3, #0
 8000776:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000778:	463b      	mov	r3, r7
 800077a:	4618      	mov	r0, r3
 800077c:	f000 ffe8 	bl	8001750 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000780:	2004      	movs	r0, #4
 8000782:	f000 ffc5 	bl	8001710 <HAL_MPU_Enable>

}
 8000786:	bf00      	nop
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	30004000 	.word	0x30004000

08000794 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a04      	ldr	r2, [pc, #16]	@ (80007b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d101      	bne.n	80007aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007a6:	f000 fe63 	bl	8001470 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40001000 	.word	0x40001000

080007b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80007bc:	b672      	cpsid	i
}
 80007be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <Error_Handler+0x8>

080007c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ca:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <HAL_MspInit+0x38>)
 80007cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80007d0:	4a0a      	ldr	r2, [pc, #40]	@ (80007fc <HAL_MspInit+0x38>)
 80007d2:	f043 0302 	orr.w	r3, r3, #2
 80007d6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80007da:	4b08      	ldr	r3, [pc, #32]	@ (80007fc <HAL_MspInit+0x38>)
 80007dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80007e0:	f003 0302 	and.w	r3, r3, #2
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007e8:	2200      	movs	r2, #0
 80007ea:	210f      	movs	r1, #15
 80007ec:	f06f 0001 	mvn.w	r0, #1
 80007f0:	f000 ff4e 	bl	8001690 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	58024400 	.word	0x58024400

08000800 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b090      	sub	sp, #64	@ 0x40
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2b0f      	cmp	r3, #15
 800080c:	d827      	bhi.n	800085e <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800080e:	2200      	movs	r2, #0
 8000810:	6879      	ldr	r1, [r7, #4]
 8000812:	2036      	movs	r0, #54	@ 0x36
 8000814:	f000 ff3c 	bl	8001690 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000818:	2036      	movs	r0, #54	@ 0x36
 800081a:	f000 ff53 	bl	80016c4 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800081e:	4a29      	ldr	r2, [pc, #164]	@ (80008c4 <HAL_InitTick+0xc4>)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000824:	4b28      	ldr	r3, [pc, #160]	@ (80008c8 <HAL_InitTick+0xc8>)
 8000826:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800082a:	4a27      	ldr	r2, [pc, #156]	@ (80008c8 <HAL_InitTick+0xc8>)
 800082c:	f043 0310 	orr.w	r3, r3, #16
 8000830:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000834:	4b24      	ldr	r3, [pc, #144]	@ (80008c8 <HAL_InitTick+0xc8>)
 8000836:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800083a:	f003 0310 	and.w	r3, r3, #16
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000842:	f107 0210 	add.w	r2, r7, #16
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	4611      	mov	r1, r2
 800084c:	4618      	mov	r0, r3
 800084e:	f003 fe73 	bl	8004538 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000854:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000858:	2b00      	cmp	r3, #0
 800085a:	d106      	bne.n	800086a <HAL_InitTick+0x6a>
 800085c:	e001      	b.n	8000862 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800085e:	2301      	movs	r3, #1
 8000860:	e02b      	b.n	80008ba <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000862:	f003 fe53 	bl	800450c <HAL_RCC_GetPCLK1Freq>
 8000866:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000868:	e004      	b.n	8000874 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800086a:	f003 fe4f 	bl	800450c <HAL_RCC_GetPCLK1Freq>
 800086e:	4603      	mov	r3, r0
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000876:	4a15      	ldr	r2, [pc, #84]	@ (80008cc <HAL_InitTick+0xcc>)
 8000878:	fba2 2303 	umull	r2, r3, r2, r3
 800087c:	0c9b      	lsrs	r3, r3, #18
 800087e:	3b01      	subs	r3, #1
 8000880:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000882:	4b13      	ldr	r3, [pc, #76]	@ (80008d0 <HAL_InitTick+0xd0>)
 8000884:	4a13      	ldr	r2, [pc, #76]	@ (80008d4 <HAL_InitTick+0xd4>)
 8000886:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000888:	4b11      	ldr	r3, [pc, #68]	@ (80008d0 <HAL_InitTick+0xd0>)
 800088a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800088e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000890:	4a0f      	ldr	r2, [pc, #60]	@ (80008d0 <HAL_InitTick+0xd0>)
 8000892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000894:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000896:	4b0e      	ldr	r3, [pc, #56]	@ (80008d0 <HAL_InitTick+0xd0>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089c:	4b0c      	ldr	r3, [pc, #48]	@ (80008d0 <HAL_InitTick+0xd0>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80008a2:	480b      	ldr	r0, [pc, #44]	@ (80008d0 <HAL_InitTick+0xd0>)
 80008a4:	f003 fe8a 	bl	80045bc <HAL_TIM_Base_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d104      	bne.n	80008b8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80008ae:	4808      	ldr	r0, [pc, #32]	@ (80008d0 <HAL_InitTick+0xd0>)
 80008b0:	f003 fee6 	bl	8004680 <HAL_TIM_Base_Start_IT>
 80008b4:	4603      	mov	r3, r0
 80008b6:	e000      	b.n	80008ba <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80008b8:	2301      	movs	r3, #1
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3740      	adds	r7, #64	@ 0x40
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	24000008 	.word	0x24000008
 80008c8:	58024400 	.word	0x58024400
 80008cc:	431bde83 	.word	0x431bde83
 80008d0:	2400010c 	.word	0x2400010c
 80008d4:	40001000 	.word	0x40001000

080008d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <NMI_Handler+0x4>

080008e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <HardFault_Handler+0x4>

080008e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <MemManage_Handler+0x4>

080008f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <BusFault_Handler+0x4>

080008f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <UsageFault_Handler+0x4>

08000900 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
	...

08000910 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000914:	4802      	ldr	r0, [pc, #8]	@ (8000920 <TIM6_DAC_IRQHandler+0x10>)
 8000916:	f003 ff39 	bl	800478c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	2400010c 	.word	0x2400010c

08000924 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000928:	4802      	ldr	r0, [pc, #8]	@ (8000934 <ETH_IRQHandler+0x10>)
 800092a:	f001 fb25 	bl	8001f78 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	240002d4 	.word	0x240002d4

08000938 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  return 1;
 800093c:	2301      	movs	r3, #1
}
 800093e:	4618      	mov	r0, r3
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <_kill>:

int _kill(int pid, int sig)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000952:	4b05      	ldr	r3, [pc, #20]	@ (8000968 <_kill+0x20>)
 8000954:	2216      	movs	r2, #22
 8000956:	601a      	str	r2, [r3, #0]
  return -1;
 8000958:	f04f 33ff 	mov.w	r3, #4294967295
}
 800095c:	4618      	mov	r0, r3
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	240081a0 	.word	0x240081a0

0800096c <_exit>:

void _exit (int status)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000974:	f04f 31ff 	mov.w	r1, #4294967295
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f7ff ffe5 	bl	8000948 <_kill>
  while (1) {}    /* Make sure we hang here */
 800097e:	bf00      	nop
 8000980:	e7fd      	b.n	800097e <_exit+0x12>

08000982 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b086      	sub	sp, #24
 8000986:	af00      	add	r7, sp, #0
 8000988:	60f8      	str	r0, [r7, #12]
 800098a:	60b9      	str	r1, [r7, #8]
 800098c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
 8000992:	e00a      	b.n	80009aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000994:	f3af 8000 	nop.w
 8000998:	4601      	mov	r1, r0
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	1c5a      	adds	r2, r3, #1
 800099e:	60ba      	str	r2, [r7, #8]
 80009a0:	b2ca      	uxtb	r2, r1
 80009a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	3301      	adds	r3, #1
 80009a8:	617b      	str	r3, [r7, #20]
 80009aa:	697a      	ldr	r2, [r7, #20]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	dbf0      	blt.n	8000994 <_read+0x12>
  }

  return len;
 80009b2:	687b      	ldr	r3, [r7, #4]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3718      	adds	r7, #24
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	e009      	b.n	80009e2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	1c5a      	adds	r2, r3, #1
 80009d2:	60ba      	str	r2, [r7, #8]
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	3301      	adds	r3, #1
 80009e0:	617b      	str	r3, [r7, #20]
 80009e2:	697a      	ldr	r2, [r7, #20]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	dbf1      	blt.n	80009ce <_write+0x12>
  }
  return len;
 80009ea:	687b      	ldr	r3, [r7, #4]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3718      	adds	r7, #24
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <_close>:

int _close(int file)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a1c:	605a      	str	r2, [r3, #4]
  return 0;
 8000a1e:	2300      	movs	r3, #0
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <_isatty>:

int _isatty(int file)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a34:	2301      	movs	r3, #1
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a42:	b480      	push	{r7}
 8000a44:	b085      	sub	sp, #20
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	60f8      	str	r0, [r7, #12]
 8000a4a:	60b9      	str	r1, [r7, #8]
 8000a4c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a4e:	2300      	movs	r3, #0
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b087      	sub	sp, #28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a64:	4a14      	ldr	r2, [pc, #80]	@ (8000ab8 <_sbrk+0x5c>)
 8000a66:	4b15      	ldr	r3, [pc, #84]	@ (8000abc <_sbrk+0x60>)
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a70:	4b13      	ldr	r3, [pc, #76]	@ (8000ac0 <_sbrk+0x64>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d102      	bne.n	8000a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a78:	4b11      	ldr	r3, [pc, #68]	@ (8000ac0 <_sbrk+0x64>)
 8000a7a:	4a12      	ldr	r2, [pc, #72]	@ (8000ac4 <_sbrk+0x68>)
 8000a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a7e:	4b10      	ldr	r3, [pc, #64]	@ (8000ac0 <_sbrk+0x64>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4413      	add	r3, r2
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d205      	bcs.n	8000a98 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac8 <_sbrk+0x6c>)
 8000a8e:	220c      	movs	r2, #12
 8000a90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a92:	f04f 33ff 	mov.w	r3, #4294967295
 8000a96:	e009      	b.n	8000aac <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a98:	4b09      	ldr	r3, [pc, #36]	@ (8000ac0 <_sbrk+0x64>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a9e:	4b08      	ldr	r3, [pc, #32]	@ (8000ac0 <_sbrk+0x64>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	4a06      	ldr	r2, [pc, #24]	@ (8000ac0 <_sbrk+0x64>)
 8000aa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	371c      	adds	r7, #28
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	24050000 	.word	0x24050000
 8000abc:	00000400 	.word	0x00000400
 8000ac0:	24000158 	.word	0x24000158
 8000ac4:	240081b0 	.word	0x240081b0
 8000ac8:	240081a0 	.word	0x240081a0

08000acc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ad0:	4b32      	ldr	r3, [pc, #200]	@ (8000b9c <SystemInit+0xd0>)
 8000ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ad6:	4a31      	ldr	r2, [pc, #196]	@ (8000b9c <SystemInit+0xd0>)
 8000ad8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000adc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ae0:	4b2f      	ldr	r3, [pc, #188]	@ (8000ba0 <SystemInit+0xd4>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f003 030f 	and.w	r3, r3, #15
 8000ae8:	2b06      	cmp	r3, #6
 8000aea:	d807      	bhi.n	8000afc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000aec:	4b2c      	ldr	r3, [pc, #176]	@ (8000ba0 <SystemInit+0xd4>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f023 030f 	bic.w	r3, r3, #15
 8000af4:	4a2a      	ldr	r2, [pc, #168]	@ (8000ba0 <SystemInit+0xd4>)
 8000af6:	f043 0307 	orr.w	r3, r3, #7
 8000afa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000afc:	4b29      	ldr	r3, [pc, #164]	@ (8000ba4 <SystemInit+0xd8>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a28      	ldr	r2, [pc, #160]	@ (8000ba4 <SystemInit+0xd8>)
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b08:	4b26      	ldr	r3, [pc, #152]	@ (8000ba4 <SystemInit+0xd8>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b0e:	4b25      	ldr	r3, [pc, #148]	@ (8000ba4 <SystemInit+0xd8>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	4924      	ldr	r1, [pc, #144]	@ (8000ba4 <SystemInit+0xd8>)
 8000b14:	4b24      	ldr	r3, [pc, #144]	@ (8000ba8 <SystemInit+0xdc>)
 8000b16:	4013      	ands	r3, r2
 8000b18:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b1a:	4b21      	ldr	r3, [pc, #132]	@ (8000ba0 <SystemInit+0xd4>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f003 0308 	and.w	r3, r3, #8
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d007      	beq.n	8000b36 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b26:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba0 <SystemInit+0xd4>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f023 030f 	bic.w	r3, r3, #15
 8000b2e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ba0 <SystemInit+0xd4>)
 8000b30:	f043 0307 	orr.w	r3, r3, #7
 8000b34:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b36:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba4 <SystemInit+0xd8>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b3c:	4b19      	ldr	r3, [pc, #100]	@ (8000ba4 <SystemInit+0xd8>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b42:	4b18      	ldr	r3, [pc, #96]	@ (8000ba4 <SystemInit+0xd8>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b48:	4b16      	ldr	r3, [pc, #88]	@ (8000ba4 <SystemInit+0xd8>)
 8000b4a:	4a18      	ldr	r2, [pc, #96]	@ (8000bac <SystemInit+0xe0>)
 8000b4c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ba4 <SystemInit+0xd8>)
 8000b50:	4a17      	ldr	r2, [pc, #92]	@ (8000bb0 <SystemInit+0xe4>)
 8000b52:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b54:	4b13      	ldr	r3, [pc, #76]	@ (8000ba4 <SystemInit+0xd8>)
 8000b56:	4a17      	ldr	r2, [pc, #92]	@ (8000bb4 <SystemInit+0xe8>)
 8000b58:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b5a:	4b12      	ldr	r3, [pc, #72]	@ (8000ba4 <SystemInit+0xd8>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b60:	4b10      	ldr	r3, [pc, #64]	@ (8000ba4 <SystemInit+0xd8>)
 8000b62:	4a14      	ldr	r2, [pc, #80]	@ (8000bb4 <SystemInit+0xe8>)
 8000b64:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b66:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba4 <SystemInit+0xd8>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba4 <SystemInit+0xd8>)
 8000b6e:	4a11      	ldr	r2, [pc, #68]	@ (8000bb4 <SystemInit+0xe8>)
 8000b70:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <SystemInit+0xd8>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b78:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba4 <SystemInit+0xd8>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a09      	ldr	r2, [pc, #36]	@ (8000ba4 <SystemInit+0xd8>)
 8000b7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b82:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b84:	4b07      	ldr	r3, [pc, #28]	@ (8000ba4 <SystemInit+0xd8>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb8 <SystemInit+0xec>)
 8000b8c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000b90:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000ed00 	.word	0xe000ed00
 8000ba0:	52002000 	.word	0x52002000
 8000ba4:	58024400 	.word	0x58024400
 8000ba8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000bac:	02020200 	.word	0x02020200
 8000bb0:	01ff0000 	.word	0x01ff0000
 8000bb4:	01010280 	.word	0x01010280
 8000bb8:	52004000 	.word	0x52004000

08000bbc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000bc0:	4b09      	ldr	r3, [pc, #36]	@ (8000be8 <ExitRun0Mode+0x2c>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	4a08      	ldr	r2, [pc, #32]	@ (8000be8 <ExitRun0Mode+0x2c>)
 8000bc6:	f043 0302 	orr.w	r3, r3, #2
 8000bca:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000bcc:	bf00      	nop
 8000bce:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <ExitRun0Mode+0x2c>)
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d0f9      	beq.n	8000bce <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000bda:	bf00      	nop
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	58024800 	.word	0x58024800

08000bec <tcp_thread>:
static void writeInputMultiRegs(void);
void processing_task(void *arg);
//////////////////////////

static void tcp_thread(void *arg)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]

    err_t err, accept_err;

    conn = netconn_new(NETCONN_TCP);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	2010      	movs	r0, #16
 8000bfa:	f008 fb2b 	bl	8009254 <netconn_new_with_proto_and_callback>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	4a49      	ldr	r2, [pc, #292]	@ (8000d28 <tcp_thread+0x13c>)
 8000c02:	6013      	str	r3, [r2, #0]
    if (conn != NULL)
 8000c04:	4b48      	ldr	r3, [pc, #288]	@ (8000d28 <tcp_thread+0x13c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	f000 8088 	beq.w	8000d1e <tcp_thread+0x132>
    {
        err = netconn_bind(conn, IP_ADDR_ANY, modbus.u16Port);
 8000c0e:	4b46      	ldr	r3, [pc, #280]	@ (8000d28 <tcp_thread+0x13c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a46      	ldr	r2, [pc, #280]	@ (8000d2c <tcp_thread+0x140>)
 8000c14:	88d2      	ldrh	r2, [r2, #6]
 8000c16:	4946      	ldr	r1, [pc, #280]	@ (8000d30 <tcp_thread+0x144>)
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f008 fbd7 	bl	80093cc <netconn_bind>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_OK)
 8000c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d171      	bne.n	8000d0e <tcp_thread+0x122>
        {
            netconn_listen(conn);
 8000c2a:	4b3f      	ldr	r3, [pc, #252]	@ (8000d28 <tcp_thread+0x13c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	21ff      	movs	r1, #255	@ 0xff
 8000c30:	4618      	mov	r0, r3
 8000c32:	f008 fc03 	bl	800943c <netconn_listen_with_backlog>

            while (1)
            {

                accept_err = netconn_accept(conn, &clientconn);
 8000c36:	4b3c      	ldr	r3, [pc, #240]	@ (8000d28 <tcp_thread+0x13c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	493e      	ldr	r1, [pc, #248]	@ (8000d34 <tcp_thread+0x148>)
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f008 fc29 	bl	8009494 <netconn_accept>
 8000c42:	4603      	mov	r3, r0
 8000c44:	73bb      	strb	r3, [r7, #14]
                if (accept_err == ERR_OK && clientconn != NULL)
 8000c46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d1f3      	bne.n	8000c36 <tcp_thread+0x4a>
 8000c4e:	4b39      	ldr	r3, [pc, #228]	@ (8000d34 <tcp_thread+0x148>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d0ef      	beq.n	8000c36 <tcp_thread+0x4a>
                {

                    while (netconn_recv(clientconn, &buf) == ERR_OK)
 8000c56:	e046      	b.n	8000ce6 <tcp_thread+0xfa>
                    {
                        addr = netbuf_fromaddr(buf);
 8000c58:	4b37      	ldr	r3, [pc, #220]	@ (8000d38 <tcp_thread+0x14c>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	3308      	adds	r3, #8
 8000c5e:	4a37      	ldr	r2, [pc, #220]	@ (8000d3c <tcp_thread+0x150>)
 8000c60:	6013      	str	r3, [r2, #0]
                        port = netbuf_fromport(buf);
 8000c62:	4b35      	ldr	r3, [pc, #212]	@ (8000d38 <tcp_thread+0x14c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	899a      	ldrh	r2, [r3, #12]
 8000c68:	4b35      	ldr	r3, [pc, #212]	@ (8000d40 <tcp_thread+0x154>)
 8000c6a:	801a      	strh	r2, [r3, #0]

                        do
                        {
                        	memset (msgc, '\0', sizeof(smsgc));  // clear the buffer
 8000c6c:	2264      	movs	r2, #100	@ 0x64
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4834      	ldr	r0, [pc, #208]	@ (8000d44 <tcp_thread+0x158>)
 8000c72:	f016 f842 	bl	8016cfa <memset>
                        	memset (smsgc, '\0', sizeof(smsgc));  // clear the buffer
 8000c76:	2264      	movs	r2, #100	@ 0x64
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4833      	ldr	r0, [pc, #204]	@ (8000d48 <tcp_thread+0x15c>)
 8000c7c:	f016 f83d 	bl	8016cfa <memset>

                            copyString(msgc, (char *)buf->p->payload, buf->p->len > sizeof(msgc) ? sizeof(msgc) : buf->p->len);
 8000c80:	4b2d      	ldr	r3, [pc, #180]	@ (8000d38 <tcp_thread+0x14c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	6859      	ldr	r1, [r3, #4]
 8000c88:	4b2b      	ldr	r3, [pc, #172]	@ (8000d38 <tcp_thread+0x14c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	895b      	ldrh	r3, [r3, #10]
 8000c90:	2b64      	cmp	r3, #100	@ 0x64
 8000c92:	bf28      	it	cs
 8000c94:	2364      	movcs	r3, #100	@ 0x64
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	461a      	mov	r2, r3
 8000c9a:	482a      	ldr	r0, [pc, #168]	@ (8000d44 <tcp_thread+0x158>)
 8000c9c:	f000 f900 	bl	8000ea0 <copyString>
                            osThreadFlagsSet(processingTaskHandle, 1);
 8000ca0:	4b2a      	ldr	r3, [pc, #168]	@ (8000d4c <tcp_thread+0x160>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f004 ff02 	bl	8005ab0 <osThreadFlagsSet>
//                            modbus_parse(clientconn);
                            u32_t wait = sys_arch_sem_wait(&tcpsem, modbus.Timeout);
 8000cac:	4b1f      	ldr	r3, [pc, #124]	@ (8000d2c <tcp_thread+0x140>)
 8000cae:	895b      	ldrh	r3, [r3, #10]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4827      	ldr	r0, [pc, #156]	@ (8000d50 <tcp_thread+0x164>)
 8000cb4:	f015 fdd7 	bl	8016866 <sys_arch_sem_wait>
 8000cb8:	60b8      	str	r0, [r7, #8]
							if (wait >= modbus.Timeout) {
 8000cba:	4b1c      	ldr	r3, [pc, #112]	@ (8000d2c <tcp_thread+0x140>)
 8000cbc:	895b      	ldrh	r3, [r3, #10]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d302      	bcc.n	8000ccc <tcp_thread+0xe0>

								eror_handler(ERR_Slave_Device_Busy);
 8000cc6:	2006      	movs	r0, #6
 8000cc8:	f000 f980 	bl	8000fcc <eror_handler>
							}
                        }
                        while (netbuf_next(buf) > 0);
 8000ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d38 <tcp_thread+0x14c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f00a fbe3 	bl	800b49c <netbuf_next>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	dcc7      	bgt.n	8000c6c <tcp_thread+0x80>

                        netbuf_delete(buf);
 8000cdc:	4b16      	ldr	r3, [pc, #88]	@ (8000d38 <tcp_thread+0x14c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f00a fbbb 	bl	800b45c <netbuf_delete>
                    while (netconn_recv(clientconn, &buf) == ERR_OK)
 8000ce6:	4b13      	ldr	r3, [pc, #76]	@ (8000d34 <tcp_thread+0x148>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4913      	ldr	r1, [pc, #76]	@ (8000d38 <tcp_thread+0x14c>)
 8000cec:	4618      	mov	r0, r3
 8000cee:	f008 fdf5 	bl	80098dc <netconn_recv>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d0af      	beq.n	8000c58 <tcp_thread+0x6c>
                    }

                    netconn_close(clientconn);
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d34 <tcp_thread+0x148>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f008 ff7d 	bl	8009bfc <netconn_close>
                    netconn_delete(clientconn);
 8000d02:	4b0c      	ldr	r3, [pc, #48]	@ (8000d34 <tcp_thread+0x148>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f008 fb44 	bl	8009394 <netconn_delete>
                accept_err = netconn_accept(conn, &clientconn);
 8000d0c:	e793      	b.n	8000c36 <tcp_thread+0x4a>
                }
            }
        }
        else
        {
            netconn_delete(conn);
 8000d0e:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <tcp_thread+0x13c>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4618      	mov	r0, r3
 8000d14:	f008 fb3e 	bl	8009394 <netconn_delete>
            conn = NULL;
 8000d18:	4b03      	ldr	r3, [pc, #12]	@ (8000d28 <tcp_thread+0x13c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
        }
    }
}
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	2400015c 	.word	0x2400015c
 8000d2c:	24000234 	.word	0x24000234
 8000d30:	0801b1d0 	.word	0x0801b1d0
 8000d34:	2400024c 	.word	0x2400024c
 8000d38:	24000160 	.word	0x24000160
 8000d3c:	24000164 	.word	0x24000164
 8000d40:	24000168 	.word	0x24000168
 8000d44:	2400016c 	.word	0x2400016c
 8000d48:	240001d0 	.word	0x240001d0
 8000d4c:	24000244 	.word	0x24000244
 8000d50:	24000248 	.word	0x24000248

08000d54 <modbus_parse>:

static void modbus_parse(struct netconn *client)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af02      	add	r7, sp, #8
 8000d5a:	6078      	str	r0, [r7, #4]
    if (msgc[2] == 0 && msgc[3] == 0 && msgc[6] == modbus.u8slaveID)
 8000d5c:	4b2c      	ldr	r3, [pc, #176]	@ (8000e10 <modbus_parse+0xbc>)
 8000d5e:	789b      	ldrb	r3, [r3, #2]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d151      	bne.n	8000e08 <modbus_parse+0xb4>
 8000d64:	4b2a      	ldr	r3, [pc, #168]	@ (8000e10 <modbus_parse+0xbc>)
 8000d66:	78db      	ldrb	r3, [r3, #3]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d14d      	bne.n	8000e08 <modbus_parse+0xb4>
 8000d6c:	4b28      	ldr	r3, [pc, #160]	@ (8000e10 <modbus_parse+0xbc>)
 8000d6e:	799a      	ldrb	r2, [r3, #6]
 8000d70:	4b28      	ldr	r3, [pc, #160]	@ (8000e14 <modbus_parse+0xc0>)
 8000d72:	7a1b      	ldrb	r3, [r3, #8]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d147      	bne.n	8000e08 <modbus_parse+0xb4>
    {
        for (uint8_t i = 0; i < 4; i++)
 8000d78:	2300      	movs	r3, #0
 8000d7a:	73fb      	strb	r3, [r7, #15]
 8000d7c:	e008      	b.n	8000d90 <modbus_parse+0x3c>
        {
            smsgc[i] = msgc[i];
 8000d7e:	7bfa      	ldrb	r2, [r7, #15]
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
 8000d82:	4923      	ldr	r1, [pc, #140]	@ (8000e10 <modbus_parse+0xbc>)
 8000d84:	5c89      	ldrb	r1, [r1, r2]
 8000d86:	4a24      	ldr	r2, [pc, #144]	@ (8000e18 <modbus_parse+0xc4>)
 8000d88:	54d1      	strb	r1, [r2, r3]
        for (uint8_t i = 0; i < 4; i++)
 8000d8a:	7bfb      	ldrb	r3, [r7, #15]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	73fb      	strb	r3, [r7, #15]
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
 8000d92:	2b03      	cmp	r3, #3
 8000d94:	d9f3      	bls.n	8000d7e <modbus_parse+0x2a>
        }

        switch (msgc[7])
 8000d96:	4b1e      	ldr	r3, [pc, #120]	@ (8000e10 <modbus_parse+0xbc>)
 8000d98:	79db      	ldrb	r3, [r3, #7]
 8000d9a:	2b10      	cmp	r3, #16
 8000d9c:	d00f      	beq.n	8000dbe <modbus_parse+0x6a>
 8000d9e:	2b10      	cmp	r3, #16
 8000da0:	dc10      	bgt.n	8000dc4 <modbus_parse+0x70>
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	dc02      	bgt.n	8000dac <modbus_parse+0x58>
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	da03      	bge.n	8000db2 <modbus_parse+0x5e>
 8000daa:	e00b      	b.n	8000dc4 <modbus_parse+0x70>
 8000dac:	2b06      	cmp	r3, #6
 8000dae:	d003      	beq.n	8000db8 <modbus_parse+0x64>
 8000db0:	e008      	b.n	8000dc4 <modbus_parse+0x70>
        {
            case MB_FC_READ_INPUT_REGISTER:
            case MB_FC_READ_REGISTERS:
                readInputRegs();
 8000db2:	f000 f895 	bl	8000ee0 <readInputRegs>
                break;
 8000db6:	e009      	b.n	8000dcc <modbus_parse+0x78>

            case MB_FC_WRITE_REGISTER:
                writeInputReg();
 8000db8:	f000 f932 	bl	8001020 <writeInputReg>
                break;
 8000dbc:	e006      	b.n	8000dcc <modbus_parse+0x78>

            case MB_FC_WRITE_MULTIPLE_REGISTERS:
                writeInputMultiRegs();
 8000dbe:	f000 f965 	bl	800108c <writeInputMultiRegs>
                break;
 8000dc2:	e003      	b.n	8000dcc <modbus_parse+0x78>

            default:
                eror_handler(ERR_Illegal_Function);
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	f000 f901 	bl	8000fcc <eror_handler>
                break;
 8000dca:	bf00      	nop
        }

        netconn_write(client, smsgc, length_send, NETCONN_COPY);
 8000dcc:	4b13      	ldr	r3, [pc, #76]	@ (8000e1c <modbus_parse+0xc8>)
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	9300      	str	r3, [sp, #0]
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	490f      	ldr	r1, [pc, #60]	@ (8000e18 <modbus_parse+0xc4>)
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f008 fdf8 	bl	80099d0 <netconn_write_partly>
        modbus.u16reg[8]++;
 8000de0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e14 <modbus_parse+0xc0>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	3310      	adds	r3, #16
 8000de6:	881a      	ldrh	r2, [r3, #0]
 8000de8:	3201      	adds	r2, #1
 8000dea:	b292      	uxth	r2, r2
 8000dec:	801a      	strh	r2, [r3, #0]
        if(modbus.u16reg[8]==0x00)
 8000dee:	4b09      	ldr	r3, [pc, #36]	@ (8000e14 <modbus_parse+0xc0>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	3310      	adds	r3, #16
 8000df4:	881b      	ldrh	r3, [r3, #0]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d106      	bne.n	8000e08 <modbus_parse+0xb4>
        {
        	modbus.u16reg[9]++;
 8000dfa:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <modbus_parse+0xc0>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	3312      	adds	r3, #18
 8000e00:	881a      	ldrh	r2, [r3, #0]
 8000e02:	3201      	adds	r2, #1
 8000e04:	b292      	uxth	r2, r2
 8000e06:	801a      	strh	r2, [r3, #0]
        }
    }
}
 8000e08:	bf00      	nop
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	2400016c 	.word	0x2400016c
 8000e14:	24000234 	.word	0x24000234
 8000e18:	240001d0 	.word	0x240001d0
 8000e1c:	24000240 	.word	0x24000240

08000e20 <tcpserver_init>:

void tcpserver_init(modbus_t* usermodbus)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08e      	sub	sp, #56	@ 0x38
 8000e24:	af02      	add	r7, sp, #8
 8000e26:	6078      	str	r0, [r7, #4]
    modbus = *usermodbus;
 8000e28:	4b16      	ldr	r3, [pc, #88]	@ (8000e84 <tcpserver_init+0x64>)
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    sys_thread_new("tcp_thread", tcp_thread, NULL, DEFAULT_THREAD_STACKSIZE, osPriorityNormal);
 8000e32:	2318      	movs	r3, #24
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	4912      	ldr	r1, [pc, #72]	@ (8000e88 <tcpserver_init+0x68>)
 8000e3e:	4813      	ldr	r0, [pc, #76]	@ (8000e8c <tcpserver_init+0x6c>)
 8000e40:	f015 fdb8 	bl	80169b4 <sys_thread_new>
    const osThreadAttr_t procTaskAttr = {
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	2224      	movs	r2, #36	@ 0x24
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f015 ff54 	bl	8016cfa <memset>
 8000e52:	4b0f      	ldr	r3, [pc, #60]	@ (8000e90 <tcpserver_init+0x70>)
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e5a:	623b      	str	r3, [r7, #32]
 8000e5c:	2320      	movs	r3, #32
 8000e5e:	627b      	str	r3, [r7, #36]	@ 0x24
        .name = "processingTask",
        .stack_size = 1024,
        .priority = osPriorityAboveNormal
    };
    sys_sem_new(&tcpsem, 0);  // the semaphore would prevent simultaneous access to tcpsend
 8000e60:	2100      	movs	r1, #0
 8000e62:	480c      	ldr	r0, [pc, #48]	@ (8000e94 <tcpserver_init+0x74>)
 8000e64:	f015 fcda 	bl	801681c <sys_sem_new>
    processingTaskHandle = osThreadNew(processing_task, NULL, &procTaskAttr);
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4809      	ldr	r0, [pc, #36]	@ (8000e98 <tcpserver_init+0x78>)
 8000e72:	f004 fd8a 	bl	800598a <osThreadNew>
 8000e76:	4603      	mov	r3, r0
 8000e78:	4a08      	ldr	r2, [pc, #32]	@ (8000e9c <tcpserver_init+0x7c>)
 8000e7a:	6013      	str	r3, [r2, #0]
}
 8000e7c:	bf00      	nop
 8000e7e:	3730      	adds	r7, #48	@ 0x30
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	24000234 	.word	0x24000234
 8000e88:	08000bed 	.word	0x08000bed
 8000e8c:	08017b14 	.word	0x08017b14
 8000e90:	08017b20 	.word	0x08017b20
 8000e94:	24000248 	.word	0x24000248
 8000e98:	08001165 	.word	0x08001165
 8000e9c:	24000244 	.word	0x24000244

08000ea0 <copyString>:

static void copyString(char* dest, char* src, unsigned num)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b087      	sub	sp, #28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
    for (unsigned i = 0; i < num; ++i)
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	e00a      	b.n	8000ec8 <copyString+0x28>
    {
        dest[i] = src[i];
 8000eb2:	68ba      	ldr	r2, [r7, #8]
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	441a      	add	r2, r3
 8000eb8:	68f9      	ldr	r1, [r7, #12]
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	440b      	add	r3, r1
 8000ebe:	7812      	ldrb	r2, [r2, #0]
 8000ec0:	701a      	strb	r2, [r3, #0]
    for (unsigned i = 0; i < num; ++i)
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	617b      	str	r3, [r7, #20]
 8000ec8:	697a      	ldr	r2, [r7, #20]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d3f0      	bcc.n	8000eb2 <copyString+0x12>
    }
}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	371c      	adds	r7, #28
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
	...

08000ee0 <readInputRegs>:

static void readInputRegs()
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
    uint16_t count = (msgc[10] << 8) + msgc[11];
 8000ee6:	4b35      	ldr	r3, [pc, #212]	@ (8000fbc <readInputRegs+0xdc>)
 8000ee8:	7a9b      	ldrb	r3, [r3, #10]
 8000eea:	021b      	lsls	r3, r3, #8
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	4a33      	ldr	r2, [pc, #204]	@ (8000fbc <readInputRegs+0xdc>)
 8000ef0:	7ad2      	ldrb	r2, [r2, #11]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	80bb      	strh	r3, [r7, #4]
    uint16_t start_address = (msgc[8] << 8) + msgc[9];
 8000ef6:	4b31      	ldr	r3, [pc, #196]	@ (8000fbc <readInputRegs+0xdc>)
 8000ef8:	7a1b      	ldrb	r3, [r3, #8]
 8000efa:	021b      	lsls	r3, r3, #8
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	4a2f      	ldr	r2, [pc, #188]	@ (8000fbc <readInputRegs+0xdc>)
 8000f00:	7a52      	ldrb	r2, [r2, #9]
 8000f02:	4413      	add	r3, r2
 8000f04:	807b      	strh	r3, [r7, #2]

    if (start_address + count > modbus.u16regsize)
 8000f06:	887a      	ldrh	r2, [r7, #2]
 8000f08:	88bb      	ldrh	r3, [r7, #4]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	4a2c      	ldr	r2, [pc, #176]	@ (8000fc0 <readInputRegs+0xe0>)
 8000f0e:	8892      	ldrh	r2, [r2, #4]
 8000f10:	4293      	cmp	r3, r2
 8000f12:	dd03      	ble.n	8000f1c <readInputRegs+0x3c>
    {
        eror_handler(ERR_Illegal_Data_Address);
 8000f14:	2002      	movs	r0, #2
 8000f16:	f000 f859 	bl	8000fcc <eror_handler>
        return;
 8000f1a:	e04b      	b.n	8000fb4 <readInputRegs+0xd4>
    }

    smsgc[4] = ((3 + count * 2) >> 8);
 8000f1c:	88bb      	ldrh	r3, [r7, #4]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	3303      	adds	r3, #3
 8000f22:	121b      	asrs	r3, r3, #8
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4b27      	ldr	r3, [pc, #156]	@ (8000fc4 <readInputRegs+0xe4>)
 8000f28:	711a      	strb	r2, [r3, #4]
    smsgc[5] = ((3 + count * 2) & 0xFF);
 8000f2a:	88bb      	ldrh	r3, [r7, #4]
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	3303      	adds	r3, #3
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4b23      	ldr	r3, [pc, #140]	@ (8000fc4 <readInputRegs+0xe4>)
 8000f38:	715a      	strb	r2, [r3, #5]
    smsgc[6] = modbus.u8slaveID;
 8000f3a:	4b21      	ldr	r3, [pc, #132]	@ (8000fc0 <readInputRegs+0xe0>)
 8000f3c:	7a1a      	ldrb	r2, [r3, #8]
 8000f3e:	4b21      	ldr	r3, [pc, #132]	@ (8000fc4 <readInputRegs+0xe4>)
 8000f40:	719a      	strb	r2, [r3, #6]
    smsgc[7] = msgc[7];
 8000f42:	4b1e      	ldr	r3, [pc, #120]	@ (8000fbc <readInputRegs+0xdc>)
 8000f44:	79da      	ldrb	r2, [r3, #7]
 8000f46:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc4 <readInputRegs+0xe4>)
 8000f48:	71da      	strb	r2, [r3, #7]
    smsgc[8] = count * 2;
 8000f4a:	88bb      	ldrh	r3, [r7, #4]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc4 <readInputRegs+0xe4>)
 8000f54:	721a      	strb	r2, [r3, #8]

    for (uint8_t i = 0; i < count; i++)
 8000f56:	2300      	movs	r3, #0
 8000f58:	71fb      	strb	r3, [r7, #7]
 8000f5a:	e020      	b.n	8000f9e <readInputRegs+0xbe>
    {
        smsgc[9 + i * 2] = modbus.u16reg[start_address + i] >> 8;
 8000f5c:	4b18      	ldr	r3, [pc, #96]	@ (8000fc0 <readInputRegs+0xe0>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	8879      	ldrh	r1, [r7, #2]
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	440b      	add	r3, r1
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	4413      	add	r3, r2
 8000f6a:	881b      	ldrh	r3, [r3, #0]
 8000f6c:	0a1b      	lsrs	r3, r3, #8
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	3309      	adds	r3, #9
 8000f76:	b2d1      	uxtb	r1, r2
 8000f78:	4a12      	ldr	r2, [pc, #72]	@ (8000fc4 <readInputRegs+0xe4>)
 8000f7a:	54d1      	strb	r1, [r2, r3]
        smsgc[10 + i * 2] = modbus.u16reg[start_address + i] & 0xFF;
 8000f7c:	4b10      	ldr	r3, [pc, #64]	@ (8000fc0 <readInputRegs+0xe0>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	8879      	ldrh	r1, [r7, #2]
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	440b      	add	r3, r1
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	4413      	add	r3, r2
 8000f8a:	881a      	ldrh	r2, [r3, #0]
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	3305      	adds	r3, #5
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	b2d1      	uxtb	r1, r2
 8000f94:	4a0b      	ldr	r2, [pc, #44]	@ (8000fc4 <readInputRegs+0xe4>)
 8000f96:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < count; i++)
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	71fb      	strb	r3, [r7, #7]
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	88ba      	ldrh	r2, [r7, #4]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d8d9      	bhi.n	8000f5c <readInputRegs+0x7c>
    }

    length_send = 9 + smsgc[8];
 8000fa8:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <readInputRegs+0xe4>)
 8000faa:	7a1b      	ldrb	r3, [r3, #8]
 8000fac:	3309      	adds	r3, #9
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	4b05      	ldr	r3, [pc, #20]	@ (8000fc8 <readInputRegs+0xe8>)
 8000fb2:	801a      	strh	r2, [r3, #0]
}
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	2400016c 	.word	0x2400016c
 8000fc0:	24000234 	.word	0x24000234
 8000fc4:	240001d0 	.word	0x240001d0
 8000fc8:	24000240 	.word	0x24000240

08000fcc <eror_handler>:

static void eror_handler(uint8_t Exception_code)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
    smsgc[4] = 0;
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001010 <eror_handler+0x44>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	711a      	strb	r2, [r3, #4]
    smsgc[5] = 3;
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <eror_handler+0x44>)
 8000fde:	2203      	movs	r2, #3
 8000fe0:	715a      	strb	r2, [r3, #5]
    smsgc[6] = modbus.u8slaveID;
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8001014 <eror_handler+0x48>)
 8000fe4:	7a1a      	ldrb	r2, [r3, #8]
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8001010 <eror_handler+0x44>)
 8000fe8:	719a      	strb	r2, [r3, #6]
    smsgc[7] = 0x80 + msgc[7];
 8000fea:	4b0b      	ldr	r3, [pc, #44]	@ (8001018 <eror_handler+0x4c>)
 8000fec:	79db      	ldrb	r3, [r3, #7]
 8000fee:	3b80      	subs	r3, #128	@ 0x80
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4b07      	ldr	r3, [pc, #28]	@ (8001010 <eror_handler+0x44>)
 8000ff4:	71da      	strb	r2, [r3, #7]
    smsgc[8] = Exception_code;
 8000ff6:	4a06      	ldr	r2, [pc, #24]	@ (8001010 <eror_handler+0x44>)
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	7213      	strb	r3, [r2, #8]
    length_send = 9;
 8000ffc:	4b07      	ldr	r3, [pc, #28]	@ (800101c <eror_handler+0x50>)
 8000ffe:	2209      	movs	r2, #9
 8001000:	801a      	strh	r2, [r3, #0]
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	240001d0 	.word	0x240001d0
 8001014:	24000234 	.word	0x24000234
 8001018:	2400016c 	.word	0x2400016c
 800101c:	24000240 	.word	0x24000240

08001020 <writeInputReg>:

static void writeInputReg()
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
    uint16_t start_address = (msgc[8] << 8) + msgc[9];
 8001026:	4b15      	ldr	r3, [pc, #84]	@ (800107c <writeInputReg+0x5c>)
 8001028:	7a1b      	ldrb	r3, [r3, #8]
 800102a:	021b      	lsls	r3, r3, #8
 800102c:	b29b      	uxth	r3, r3
 800102e:	4a13      	ldr	r2, [pc, #76]	@ (800107c <writeInputReg+0x5c>)
 8001030:	7a52      	ldrb	r2, [r2, #9]
 8001032:	4413      	add	r3, r2
 8001034:	80fb      	strh	r3, [r7, #6]
    if (start_address >= modbus.u16regsize)
 8001036:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <writeInputReg+0x60>)
 8001038:	889b      	ldrh	r3, [r3, #4]
 800103a:	88fa      	ldrh	r2, [r7, #6]
 800103c:	429a      	cmp	r2, r3
 800103e:	d303      	bcc.n	8001048 <writeInputReg+0x28>
    {
        eror_handler(ERR_Illegal_Data_Address);
 8001040:	2002      	movs	r0, #2
 8001042:	f7ff ffc3 	bl	8000fcc <eror_handler>
        return;
 8001046:	e016      	b.n	8001076 <writeInputReg+0x56>
    }
    modbus.u16reg[start_address] = (msgc[10] << 8) + msgc[11];
 8001048:	4b0c      	ldr	r3, [pc, #48]	@ (800107c <writeInputReg+0x5c>)
 800104a:	7a9b      	ldrb	r3, [r3, #10]
 800104c:	021b      	lsls	r3, r3, #8
 800104e:	b29a      	uxth	r2, r3
 8001050:	4b0a      	ldr	r3, [pc, #40]	@ (800107c <writeInputReg+0x5c>)
 8001052:	7adb      	ldrb	r3, [r3, #11]
 8001054:	4618      	mov	r0, r3
 8001056:	4b0a      	ldr	r3, [pc, #40]	@ (8001080 <writeInputReg+0x60>)
 8001058:	6819      	ldr	r1, [r3, #0]
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	440b      	add	r3, r1
 8001060:	4402      	add	r2, r0
 8001062:	b292      	uxth	r2, r2
 8001064:	801a      	strh	r2, [r3, #0]
    copyString(smsgc, msgc, 12);
 8001066:	220c      	movs	r2, #12
 8001068:	4904      	ldr	r1, [pc, #16]	@ (800107c <writeInputReg+0x5c>)
 800106a:	4806      	ldr	r0, [pc, #24]	@ (8001084 <writeInputReg+0x64>)
 800106c:	f7ff ff18 	bl	8000ea0 <copyString>
    length_send = 12;
 8001070:	4b05      	ldr	r3, [pc, #20]	@ (8001088 <writeInputReg+0x68>)
 8001072:	220c      	movs	r2, #12
 8001074:	801a      	strh	r2, [r3, #0]
}
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	2400016c 	.word	0x2400016c
 8001080:	24000234 	.word	0x24000234
 8001084:	240001d0 	.word	0x240001d0
 8001088:	24000240 	.word	0x24000240

0800108c <writeInputMultiRegs>:

static void writeInputMultiRegs()
{
 800108c:	b590      	push	{r4, r7, lr}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
    uint16_t start_address = (msgc[8] << 8) + msgc[9];
 8001092:	4b30      	ldr	r3, [pc, #192]	@ (8001154 <writeInputMultiRegs+0xc8>)
 8001094:	7a1b      	ldrb	r3, [r3, #8]
 8001096:	021b      	lsls	r3, r3, #8
 8001098:	b29b      	uxth	r3, r3
 800109a:	4a2e      	ldr	r2, [pc, #184]	@ (8001154 <writeInputMultiRegs+0xc8>)
 800109c:	7a52      	ldrb	r2, [r2, #9]
 800109e:	4413      	add	r3, r2
 80010a0:	80bb      	strh	r3, [r7, #4]
    uint16_t count = (msgc[10] << 8) + msgc[11];
 80010a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001154 <writeInputMultiRegs+0xc8>)
 80010a4:	7a9b      	ldrb	r3, [r3, #10]
 80010a6:	021b      	lsls	r3, r3, #8
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	4a2a      	ldr	r2, [pc, #168]	@ (8001154 <writeInputMultiRegs+0xc8>)
 80010ac:	7ad2      	ldrb	r2, [r2, #11]
 80010ae:	4413      	add	r3, r2
 80010b0:	807b      	strh	r3, [r7, #2]

    if (start_address + count > modbus.u16regsize)
 80010b2:	88ba      	ldrh	r2, [r7, #4]
 80010b4:	887b      	ldrh	r3, [r7, #2]
 80010b6:	4413      	add	r3, r2
 80010b8:	4a27      	ldr	r2, [pc, #156]	@ (8001158 <writeInputMultiRegs+0xcc>)
 80010ba:	8892      	ldrh	r2, [r2, #4]
 80010bc:	4293      	cmp	r3, r2
 80010be:	dd03      	ble.n	80010c8 <writeInputMultiRegs+0x3c>
    {
        eror_handler(ERR_Illegal_Data_Address);
 80010c0:	2002      	movs	r0, #2
 80010c2:	f7ff ff83 	bl	8000fcc <eror_handler>
        return;
 80010c6:	e042      	b.n	800114e <writeInputMultiRegs+0xc2>
    }

    for (uint8_t i = 0; i < count; i++)
 80010c8:	2300      	movs	r3, #0
 80010ca:	71fb      	strb	r3, [r7, #7]
 80010cc:	e019      	b.n	8001102 <writeInputMultiRegs+0x76>
    {
        modbus.u16reg[start_address + i] = (msgc[13 + i * 2] << 8) + msgc[14 + i * 2];
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	330d      	adds	r3, #13
 80010d4:	4a1f      	ldr	r2, [pc, #124]	@ (8001154 <writeInputMultiRegs+0xc8>)
 80010d6:	5cd3      	ldrb	r3, [r2, r3]
 80010d8:	021b      	lsls	r3, r3, #8
 80010da:	b29a      	uxth	r2, r3
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	3307      	adds	r3, #7
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	491c      	ldr	r1, [pc, #112]	@ (8001154 <writeInputMultiRegs+0xc8>)
 80010e4:	5ccb      	ldrb	r3, [r1, r3]
 80010e6:	461c      	mov	r4, r3
 80010e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001158 <writeInputMultiRegs+0xcc>)
 80010ea:	6819      	ldr	r1, [r3, #0]
 80010ec:	88b8      	ldrh	r0, [r7, #4]
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	4403      	add	r3, r0
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	440b      	add	r3, r1
 80010f6:	4422      	add	r2, r4
 80010f8:	b292      	uxth	r2, r2
 80010fa:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++)
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	3301      	adds	r3, #1
 8001100:	71fb      	strb	r3, [r7, #7]
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	b29b      	uxth	r3, r3
 8001106:	887a      	ldrh	r2, [r7, #2]
 8001108:	429a      	cmp	r2, r3
 800110a:	d8e0      	bhi.n	80010ce <writeInputMultiRegs+0x42>
    }

    smsgc[4] = 0;
 800110c:	4b13      	ldr	r3, [pc, #76]	@ (800115c <writeInputMultiRegs+0xd0>)
 800110e:	2200      	movs	r2, #0
 8001110:	711a      	strb	r2, [r3, #4]
    smsgc[5] = 6;
 8001112:	4b12      	ldr	r3, [pc, #72]	@ (800115c <writeInputMultiRegs+0xd0>)
 8001114:	2206      	movs	r2, #6
 8001116:	715a      	strb	r2, [r3, #5]
    smsgc[6] = modbus.u8slaveID;
 8001118:	4b0f      	ldr	r3, [pc, #60]	@ (8001158 <writeInputMultiRegs+0xcc>)
 800111a:	7a1a      	ldrb	r2, [r3, #8]
 800111c:	4b0f      	ldr	r3, [pc, #60]	@ (800115c <writeInputMultiRegs+0xd0>)
 800111e:	719a      	strb	r2, [r3, #6]
    smsgc[7] = msgc[7];
 8001120:	4b0c      	ldr	r3, [pc, #48]	@ (8001154 <writeInputMultiRegs+0xc8>)
 8001122:	79da      	ldrb	r2, [r3, #7]
 8001124:	4b0d      	ldr	r3, [pc, #52]	@ (800115c <writeInputMultiRegs+0xd0>)
 8001126:	71da      	strb	r2, [r3, #7]
    smsgc[8] = msgc[8];
 8001128:	4b0a      	ldr	r3, [pc, #40]	@ (8001154 <writeInputMultiRegs+0xc8>)
 800112a:	7a1a      	ldrb	r2, [r3, #8]
 800112c:	4b0b      	ldr	r3, [pc, #44]	@ (800115c <writeInputMultiRegs+0xd0>)
 800112e:	721a      	strb	r2, [r3, #8]
    smsgc[9] = msgc[9];
 8001130:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <writeInputMultiRegs+0xc8>)
 8001132:	7a5a      	ldrb	r2, [r3, #9]
 8001134:	4b09      	ldr	r3, [pc, #36]	@ (800115c <writeInputMultiRegs+0xd0>)
 8001136:	725a      	strb	r2, [r3, #9]
    smsgc[10] = msgc[10];
 8001138:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <writeInputMultiRegs+0xc8>)
 800113a:	7a9a      	ldrb	r2, [r3, #10]
 800113c:	4b07      	ldr	r3, [pc, #28]	@ (800115c <writeInputMultiRegs+0xd0>)
 800113e:	729a      	strb	r2, [r3, #10]
    smsgc[11] = msgc[11];
 8001140:	4b04      	ldr	r3, [pc, #16]	@ (8001154 <writeInputMultiRegs+0xc8>)
 8001142:	7ada      	ldrb	r2, [r3, #11]
 8001144:	4b05      	ldr	r3, [pc, #20]	@ (800115c <writeInputMultiRegs+0xd0>)
 8001146:	72da      	strb	r2, [r3, #11]

    length_send = 12;
 8001148:	4b05      	ldr	r3, [pc, #20]	@ (8001160 <writeInputMultiRegs+0xd4>)
 800114a:	220c      	movs	r2, #12
 800114c:	801a      	strh	r2, [r3, #0]
}
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	bd90      	pop	{r4, r7, pc}
 8001154:	2400016c 	.word	0x2400016c
 8001158:	24000234 	.word	0x24000234
 800115c:	240001d0 	.word	0x240001d0
 8001160:	24000240 	.word	0x24000240

08001164 <processing_task>:
void processing_task(void *arg) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
    for (;;) {
        osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 800116c:	f04f 32ff 	mov.w	r2, #4294967295
 8001170:	2100      	movs	r1, #0
 8001172:	2001      	movs	r0, #1
 8001174:	f004 fcea 	bl	8005b4c <osThreadFlagsWait>

        modbus_parse(clientconn);
 8001178:	4b04      	ldr	r3, [pc, #16]	@ (800118c <processing_task+0x28>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff fde9 	bl	8000d54 <modbus_parse>

        sys_sem_signal(&tcpsem);
 8001182:	4803      	ldr	r0, [pc, #12]	@ (8001190 <processing_task+0x2c>)
 8001184:	f015 fba0 	bl	80168c8 <sys_sem_signal>
        osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8001188:	bf00      	nop
 800118a:	e7ef      	b.n	800116c <processing_task+0x8>
 800118c:	2400024c 	.word	0x2400024c
 8001190:	24000248 	.word	0x24000248

08001194 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001194:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80011d0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001198:	f7ff fd10 	bl	8000bbc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800119c:	f7ff fc96 	bl	8000acc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011a0:	480c      	ldr	r0, [pc, #48]	@ (80011d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011a2:	490d      	ldr	r1, [pc, #52]	@ (80011d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011a4:	4a0d      	ldr	r2, [pc, #52]	@ (80011dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a8:	e002      	b.n	80011b0 <LoopCopyDataInit>

080011aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ae:	3304      	adds	r3, #4

080011b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b4:	d3f9      	bcc.n	80011aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b6:	4a0a      	ldr	r2, [pc, #40]	@ (80011e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011b8:	4c0a      	ldr	r4, [pc, #40]	@ (80011e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011bc:	e001      	b.n	80011c2 <LoopFillZerobss>

080011be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c0:	3204      	adds	r2, #4

080011c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c4:	d3fb      	bcc.n	80011be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011c6:	f015 fe3d 	bl	8016e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ca:	f7ff f8f1 	bl	80003b0 <main>
  bx  lr
 80011ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011d0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80011d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011d8:	24000090 	.word	0x24000090
  ldr r2, =_sidata
 80011dc:	0801b2d0 	.word	0x0801b2d0
  ldr r2, =_sbss
 80011e0:	24000090 	.word	0x24000090
  ldr r4, =_ebss
 80011e4:	240081b0 	.word	0x240081b0

080011e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011e8:	e7fe      	b.n	80011e8 <ADC3_IRQHandler>

080011ea <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80011ea:	b480      	push	{r7}
 80011ec:	b083      	sub	sp, #12
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d00b      	beq.n	8001212 <LAN8742_RegisterBusIO+0x28>
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d007      	beq.n	8001212 <LAN8742_RegisterBusIO+0x28>
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <LAN8742_RegisterBusIO+0x28>
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d102      	bne.n	8001218 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001212:	f04f 33ff 	mov.w	r3, #4294967295
 8001216:	e014      	b.n	8001242 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	68da      	ldr	r2, [r3, #12]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	691a      	ldr	r2, [r3, #16]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800124e:	b580      	push	{r7, lr}
 8001250:	b086      	sub	sp, #24
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d139      	bne.n	80012de <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d002      	beq.n	8001278 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2220      	movs	r2, #32
 800127c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
 8001282:	e01c      	b.n	80012be <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	f107 020c 	add.w	r2, r7, #12
 800128c:	2112      	movs	r1, #18
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	4798      	blx	r3
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	da03      	bge.n	80012a0 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001298:	f06f 0304 	mvn.w	r3, #4
 800129c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800129e:	e00b      	b.n	80012b8 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f003 031f 	and.w	r3, r3, #31
 80012a6:	697a      	ldr	r2, [r7, #20]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d105      	bne.n	80012b8 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
         break;
 80012b6:	e005      	b.n	80012c4 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	3301      	adds	r3, #1
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	2b1f      	cmp	r3, #31
 80012c2:	d9df      	bls.n	8001284 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b1f      	cmp	r3, #31
 80012ca:	d902      	bls.n	80012d2 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80012cc:	f06f 0302 	mvn.w	r3, #2
 80012d0:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d102      	bne.n	80012de <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2201      	movs	r2, #1
 80012dc:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 80012de:	693b      	ldr	r3, [r7, #16]
 }
 80012e0:	4618      	mov	r0, r3
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	6810      	ldr	r0, [r2, #0]
 80012fc:	f107 020c 	add.w	r2, r7, #12
 8001300:	2101      	movs	r1, #1
 8001302:	4798      	blx	r3
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	da02      	bge.n	8001310 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800130a:	f06f 0304 	mvn.w	r3, #4
 800130e:	e06e      	b.n	80013ee <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	695b      	ldr	r3, [r3, #20]
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	6810      	ldr	r0, [r2, #0]
 8001318:	f107 020c 	add.w	r2, r7, #12
 800131c:	2101      	movs	r1, #1
 800131e:	4798      	blx	r3
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	da02      	bge.n	800132c <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001326:	f06f 0304 	mvn.w	r3, #4
 800132a:	e060      	b.n	80013ee <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f003 0304 	and.w	r3, r3, #4
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001336:	2301      	movs	r3, #1
 8001338:	e059      	b.n	80013ee <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	6810      	ldr	r0, [r2, #0]
 8001342:	f107 020c 	add.w	r2, r7, #12
 8001346:	2100      	movs	r1, #0
 8001348:	4798      	blx	r3
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	da02      	bge.n	8001356 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001350:	f06f 0304 	mvn.w	r3, #4
 8001354:	e04b      	b.n	80013ee <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d11b      	bne.n	8001398 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d006      	beq.n	8001378 <LAN8742_GetLinkState+0x90>
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001374:	2302      	movs	r3, #2
 8001376:	e03a      	b.n	80013ee <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001382:	2303      	movs	r3, #3
 8001384:	e033      	b.n	80013ee <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001390:	2304      	movs	r3, #4
 8001392:	e02c      	b.n	80013ee <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001394:	2305      	movs	r3, #5
 8001396:	e02a      	b.n	80013ee <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	6810      	ldr	r0, [r2, #0]
 80013a0:	f107 020c 	add.w	r2, r7, #12
 80013a4:	211f      	movs	r1, #31
 80013a6:	4798      	blx	r3
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	da02      	bge.n	80013b4 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80013ae:	f06f 0304 	mvn.w	r3, #4
 80013b2:	e01c      	b.n	80013ee <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80013be:	2306      	movs	r3, #6
 80013c0:	e015      	b.n	80013ee <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	f003 031c 	and.w	r3, r3, #28
 80013c8:	2b18      	cmp	r3, #24
 80013ca:	d101      	bne.n	80013d0 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80013cc:	2302      	movs	r3, #2
 80013ce:	e00e      	b.n	80013ee <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f003 031c 	and.w	r3, r3, #28
 80013d6:	2b08      	cmp	r3, #8
 80013d8:	d101      	bne.n	80013de <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80013da:	2303      	movs	r3, #3
 80013dc:	e007      	b.n	80013ee <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f003 031c 	and.w	r3, r3, #28
 80013e4:	2b14      	cmp	r3, #20
 80013e6:	d101      	bne.n	80013ec <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80013e8:	2304      	movs	r3, #4
 80013ea:	e000      	b.n	80013ee <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80013ec:	2305      	movs	r3, #5
    }
  }
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013fe:	2003      	movs	r0, #3
 8001400:	f000 f93b 	bl	800167a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001404:	f002 fed8 	bl	80041b8 <HAL_RCC_GetSysClockFreq>
 8001408:	4602      	mov	r2, r0
 800140a:	4b15      	ldr	r3, [pc, #84]	@ (8001460 <HAL_Init+0x68>)
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	0a1b      	lsrs	r3, r3, #8
 8001410:	f003 030f 	and.w	r3, r3, #15
 8001414:	4913      	ldr	r1, [pc, #76]	@ (8001464 <HAL_Init+0x6c>)
 8001416:	5ccb      	ldrb	r3, [r1, r3]
 8001418:	f003 031f 	and.w	r3, r3, #31
 800141c:	fa22 f303 	lsr.w	r3, r2, r3
 8001420:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001422:	4b0f      	ldr	r3, [pc, #60]	@ (8001460 <HAL_Init+0x68>)
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	f003 030f 	and.w	r3, r3, #15
 800142a:	4a0e      	ldr	r2, [pc, #56]	@ (8001464 <HAL_Init+0x6c>)
 800142c:	5cd3      	ldrb	r3, [r2, r3]
 800142e:	f003 031f 	and.w	r3, r3, #31
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	fa22 f303 	lsr.w	r3, r2, r3
 8001438:	4a0b      	ldr	r2, [pc, #44]	@ (8001468 <HAL_Init+0x70>)
 800143a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800143c:	4a0b      	ldr	r2, [pc, #44]	@ (800146c <HAL_Init+0x74>)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001442:	200f      	movs	r0, #15
 8001444:	f7ff f9dc 	bl	8000800 <HAL_InitTick>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e002      	b.n	8001458 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001452:	f7ff f9b7 	bl	80007c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	58024400 	.word	0x58024400
 8001464:	0801b0a0 	.word	0x0801b0a0
 8001468:	24000004 	.word	0x24000004
 800146c:	24000000 	.word	0x24000000

08001470 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001474:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <HAL_IncTick+0x20>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <HAL_IncTick+0x24>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4413      	add	r3, r2
 8001480:	4a04      	ldr	r2, [pc, #16]	@ (8001494 <HAL_IncTick+0x24>)
 8001482:	6013      	str	r3, [r2, #0]
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	2400000c 	.word	0x2400000c
 8001494:	24000250 	.word	0x24000250

08001498 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return uwTick;
 800149c:	4b03      	ldr	r3, [pc, #12]	@ (80014ac <HAL_GetTick+0x14>)
 800149e:	681b      	ldr	r3, [r3, #0]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	24000250 	.word	0x24000250

080014b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b8:	f7ff ffee 	bl	8001498 <HAL_GetTick>
 80014bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c8:	d005      	beq.n	80014d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ca:	4b0a      	ldr	r3, [pc, #40]	@ (80014f4 <HAL_Delay+0x44>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	461a      	mov	r2, r3
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4413      	add	r3, r2
 80014d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014d6:	bf00      	nop
 80014d8:	f7ff ffde 	bl	8001498 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d8f7      	bhi.n	80014d8 <HAL_Delay+0x28>
  {
  }
}
 80014e8:	bf00      	nop
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	2400000c 	.word	0x2400000c

080014f8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001500:	4b06      	ldr	r3, [pc, #24]	@ (800151c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001508:	4904      	ldr	r1, [pc, #16]	@ (800151c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4313      	orrs	r3, r2
 800150e:	604b      	str	r3, [r1, #4]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	58000400 	.word	0x58000400

08001520 <__NVIC_SetPriorityGrouping>:
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001530:	4b0b      	ldr	r3, [pc, #44]	@ (8001560 <__NVIC_SetPriorityGrouping+0x40>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001536:	68ba      	ldr	r2, [r7, #8]
 8001538:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800153c:	4013      	ands	r3, r2
 800153e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001548:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <__NVIC_SetPriorityGrouping+0x44>)
 800154a:	4313      	orrs	r3, r2
 800154c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800154e:	4a04      	ldr	r2, [pc, #16]	@ (8001560 <__NVIC_SetPriorityGrouping+0x40>)
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	60d3      	str	r3, [r2, #12]
}
 8001554:	bf00      	nop
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000ed00 	.word	0xe000ed00
 8001564:	05fa0000 	.word	0x05fa0000

08001568 <__NVIC_GetPriorityGrouping>:
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800156c:	4b04      	ldr	r3, [pc, #16]	@ (8001580 <__NVIC_GetPriorityGrouping+0x18>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	0a1b      	lsrs	r3, r3, #8
 8001572:	f003 0307 	and.w	r3, r3, #7
}
 8001576:	4618      	mov	r0, r3
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <__NVIC_EnableIRQ>:
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800158e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001592:	2b00      	cmp	r3, #0
 8001594:	db0b      	blt.n	80015ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001596:	88fb      	ldrh	r3, [r7, #6]
 8001598:	f003 021f 	and.w	r2, r3, #31
 800159c:	4907      	ldr	r1, [pc, #28]	@ (80015bc <__NVIC_EnableIRQ+0x38>)
 800159e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015a2:	095b      	lsrs	r3, r3, #5
 80015a4:	2001      	movs	r0, #1
 80015a6:	fa00 f202 	lsl.w	r2, r0, r2
 80015aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	e000e100 	.word	0xe000e100

080015c0 <__NVIC_SetPriority>:
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	6039      	str	r1, [r7, #0]
 80015ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	db0a      	blt.n	80015ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	490c      	ldr	r1, [pc, #48]	@ (800160c <__NVIC_SetPriority+0x4c>)
 80015da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015de:	0112      	lsls	r2, r2, #4
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	440b      	add	r3, r1
 80015e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80015e8:	e00a      	b.n	8001600 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	4908      	ldr	r1, [pc, #32]	@ (8001610 <__NVIC_SetPriority+0x50>)
 80015f0:	88fb      	ldrh	r3, [r7, #6]
 80015f2:	f003 030f 	and.w	r3, r3, #15
 80015f6:	3b04      	subs	r3, #4
 80015f8:	0112      	lsls	r2, r2, #4
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	440b      	add	r3, r1
 80015fe:	761a      	strb	r2, [r3, #24]
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	e000e100 	.word	0xe000e100
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <NVIC_EncodePriority>:
{
 8001614:	b480      	push	{r7}
 8001616:	b089      	sub	sp, #36	@ 0x24
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	f1c3 0307 	rsb	r3, r3, #7
 800162e:	2b04      	cmp	r3, #4
 8001630:	bf28      	it	cs
 8001632:	2304      	movcs	r3, #4
 8001634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	3304      	adds	r3, #4
 800163a:	2b06      	cmp	r3, #6
 800163c:	d902      	bls.n	8001644 <NVIC_EncodePriority+0x30>
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3b03      	subs	r3, #3
 8001642:	e000      	b.n	8001646 <NVIC_EncodePriority+0x32>
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001648:	f04f 32ff 	mov.w	r2, #4294967295
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43da      	mvns	r2, r3
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	401a      	ands	r2, r3
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800165c:	f04f 31ff 	mov.w	r1, #4294967295
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	fa01 f303 	lsl.w	r3, r1, r3
 8001666:	43d9      	mvns	r1, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800166c:	4313      	orrs	r3, r2
}
 800166e:	4618      	mov	r0, r3
 8001670:	3724      	adds	r7, #36	@ 0x24
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff ff4c 	bl	8001520 <__NVIC_SetPriorityGrouping>
}
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
 800169c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800169e:	f7ff ff63 	bl	8001568 <__NVIC_GetPriorityGrouping>
 80016a2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	68b9      	ldr	r1, [r7, #8]
 80016a8:	6978      	ldr	r0, [r7, #20]
 80016aa:	f7ff ffb3 	bl	8001614 <NVIC_EncodePriority>
 80016ae:	4602      	mov	r2, r0
 80016b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016b4:	4611      	mov	r1, r2
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff ff82 	bl	80015c0 <__NVIC_SetPriority>
}
 80016bc:	bf00      	nop
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff ff56 	bl	8001584 <__NVIC_EnableIRQ>
}
 80016d8:	bf00      	nop
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80016e4:	f3bf 8f5f 	dmb	sy
}
 80016e8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80016ea:	4b07      	ldr	r3, [pc, #28]	@ (8001708 <HAL_MPU_Disable+0x28>)
 80016ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ee:	4a06      	ldr	r2, [pc, #24]	@ (8001708 <HAL_MPU_Disable+0x28>)
 80016f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016f4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80016f6:	4b05      	ldr	r3, [pc, #20]	@ (800170c <HAL_MPU_Disable+0x2c>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	605a      	str	r2, [r3, #4]
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000ed00 	.word	0xe000ed00
 800170c:	e000ed90 	.word	0xe000ed90

08001710 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001718:	4a0b      	ldr	r2, [pc, #44]	@ (8001748 <HAL_MPU_Enable+0x38>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001722:	4b0a      	ldr	r3, [pc, #40]	@ (800174c <HAL_MPU_Enable+0x3c>)
 8001724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001726:	4a09      	ldr	r2, [pc, #36]	@ (800174c <HAL_MPU_Enable+0x3c>)
 8001728:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800172c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800172e:	f3bf 8f4f 	dsb	sy
}
 8001732:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001734:	f3bf 8f6f 	isb	sy
}
 8001738:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	e000ed90 	.word	0xe000ed90
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	785a      	ldrb	r2, [r3, #1]
 800175c:	4b1b      	ldr	r3, [pc, #108]	@ (80017cc <HAL_MPU_ConfigRegion+0x7c>)
 800175e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001760:	4b1a      	ldr	r3, [pc, #104]	@ (80017cc <HAL_MPU_ConfigRegion+0x7c>)
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	4a19      	ldr	r2, [pc, #100]	@ (80017cc <HAL_MPU_ConfigRegion+0x7c>)
 8001766:	f023 0301 	bic.w	r3, r3, #1
 800176a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800176c:	4a17      	ldr	r2, [pc, #92]	@ (80017cc <HAL_MPU_ConfigRegion+0x7c>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	7b1b      	ldrb	r3, [r3, #12]
 8001778:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	7adb      	ldrb	r3, [r3, #11]
 800177e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001780:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	7a9b      	ldrb	r3, [r3, #10]
 8001786:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001788:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	7b5b      	ldrb	r3, [r3, #13]
 800178e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001790:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	7b9b      	ldrb	r3, [r3, #14]
 8001796:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001798:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	7bdb      	ldrb	r3, [r3, #15]
 800179e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80017a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	7a5b      	ldrb	r3, [r3, #9]
 80017a6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80017a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	7a1b      	ldrb	r3, [r3, #8]
 80017ae:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017b0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	7812      	ldrb	r2, [r2, #0]
 80017b6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017b8:	4a04      	ldr	r2, [pc, #16]	@ (80017cc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017ba:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017bc:	6113      	str	r3, [r2, #16]
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000ed90 	.word	0xe000ed90

080017d0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e0e3      	b.n	80019aa <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d106      	bne.n	80017fa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2220      	movs	r2, #32
 80017f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f003 fdcf 	bl	8005398 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fa:	4b6e      	ldr	r3, [pc, #440]	@ (80019b4 <HAL_ETH_Init+0x1e4>)
 80017fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001800:	4a6c      	ldr	r2, [pc, #432]	@ (80019b4 <HAL_ETH_Init+0x1e4>)
 8001802:	f043 0302 	orr.w	r3, r3, #2
 8001806:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800180a:	4b6a      	ldr	r3, [pc, #424]	@ (80019b4 <HAL_ETH_Init+0x1e4>)
 800180c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	7a1b      	ldrb	r3, [r3, #8]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d103      	bne.n	8001828 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001820:	2000      	movs	r0, #0
 8001822:	f7ff fe69 	bl	80014f8 <HAL_SYSCFG_ETHInterfaceSelect>
 8001826:	e003      	b.n	8001830 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001828:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800182c:	f7ff fe64 	bl	80014f8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001830:	4b61      	ldr	r3, [pc, #388]	@ (80019b8 <HAL_ETH_Init+0x1e8>)
 8001832:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	6812      	ldr	r2, [r2, #0]
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800184a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800184c:	f7ff fe24 	bl	8001498 <HAL_GetTick>
 8001850:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001852:	e011      	b.n	8001878 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001854:	f7ff fe20 	bl	8001498 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001862:	d909      	bls.n	8001878 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2204      	movs	r2, #4
 8001868:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	22e0      	movs	r2, #224	@ 0xe0
 8001870:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e098      	b.n	80019aa <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1e4      	bne.n	8001854 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 ff1c 	bl	80026c8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001890:	f002 fe0c 	bl	80044ac <HAL_RCC_GetHCLKFreq>
 8001894:	4603      	mov	r3, r0
 8001896:	4a49      	ldr	r2, [pc, #292]	@ (80019bc <HAL_ETH_Init+0x1ec>)
 8001898:	fba2 2303 	umull	r2, r3, r2, r3
 800189c:	0c9a      	lsrs	r2, r3, #18
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	3a01      	subs	r2, #1
 80018a4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f001 f919 	bl	8002ae0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018b6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80018ba:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	6812      	ldr	r2, [r2, #0]
 80018c2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80018c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018ca:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d009      	beq.n	80018ee <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2201      	movs	r2, #1
 80018de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	22e0      	movs	r2, #224	@ 0xe0
 80018e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e05d      	b.n	80019aa <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018f6:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80018fa:	4b31      	ldr	r3, [pc, #196]	@ (80019c0 <HAL_ETH_Init+0x1f0>)
 80018fc:	4013      	ands	r3, r2
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6952      	ldr	r2, [r2, #20]
 8001902:	0051      	lsls	r1, r2, #1
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	6812      	ldr	r2, [r2, #0]
 8001908:	430b      	orrs	r3, r1
 800190a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800190e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f001 f981 	bl	8002c1a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f001 f9c7 	bl	8002cac <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	3305      	adds	r3, #5
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	021a      	lsls	r2, r3, #8
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	3304      	adds	r3, #4
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	4619      	mov	r1, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	430a      	orrs	r2, r1
 8001938:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	3303      	adds	r3, #3
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	061a      	lsls	r2, r3, #24
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	3302      	adds	r3, #2
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	041b      	lsls	r3, r3, #16
 8001950:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	3301      	adds	r3, #1
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800195c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800196a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800196c:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4b11      	ldr	r3, [pc, #68]	@ (80019c4 <HAL_ETH_Init+0x1f4>)
 800197e:	430b      	orrs	r3, r1
 8001980:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	4b0d      	ldr	r3, [pc, #52]	@ (80019c8 <HAL_ETH_Init+0x1f8>)
 8001992:	430b      	orrs	r3, r1
 8001994:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2210      	movs	r2, #16
 80019a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	58024400 	.word	0x58024400
 80019b8:	58000400 	.word	0x58000400
 80019bc:	431bde83 	.word	0x431bde83
 80019c0:	ffff8001 	.word	0xffff8001
 80019c4:	0c020060 	.word	0x0c020060
 80019c8:	0c20c000 	.word	0x0c20c000

080019cc <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80019da:	2b10      	cmp	r3, #16
 80019dc:	d165      	bne.n	8001aaa <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2220      	movs	r2, #32
 80019e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2201      	movs	r2, #1
 80019ea:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2204      	movs	r2, #4
 80019f0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 f9e4 	bl	8001dc0 <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a00:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6812      	ldr	r2, [r2, #0]
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a10:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a1c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	6812      	ldr	r2, [r2, #0]
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a2c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a38:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	6812      	ldr	r2, [r2, #0]
 8001a40:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8001a44:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a48:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f042 0201 	orr.w	r2, r2, #1
 8001a5c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f042 0202 	orr.w	r2, r2, #2
 8001a6e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f042 0201 	orr.w	r2, r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a88:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 8001a94:	430b      	orrs	r3, r1
 8001a96:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a9a:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2240      	movs	r2, #64	@ 0x40
 8001aa2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	e000      	b.n	8001aac <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
  }
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ac2:	2b40      	cmp	r3, #64	@ 0x40
 8001ac4:	d165      	bne.n	8001b92 <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2220      	movs	r2, #32
 8001aca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ad6:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	4b30      	ldr	r3, [pc, #192]	@ (8001ba0 <HAL_ETH_Stop_IT+0xec>)
 8001ae0:	400b      	ands	r3, r1
 8001ae2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ae6:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001af2:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	6812      	ldr	r2, [r2, #0]
 8001afa:	f023 0301 	bic.w	r3, r3, #1
 8001afe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b02:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b0e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	6812      	ldr	r2, [r2, #0]
 8001b16:	f023 0301 	bic.w	r3, r3, #1
 8001b1a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b1e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f022 0201 	bic.w	r2, r2, #1
 8001b30:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f042 0201 	orr.w	r2, r2, #1
 8001b42:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 0202 	bic.w	r2, r2, #2
 8001b54:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	e00e      	b.n	8001b7a <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	3212      	adds	r2, #18
 8001b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b66:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	3301      	adds	r3, #1
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	d9ed      	bls.n	8001b5c <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2210      	movs	r2, #16
 8001b8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	e000      	b.n	8001b94 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
  }
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	ffff2f3e 	.word	0xffff2f3e

08001ba4 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d109      	bne.n	8001bc8 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bba:	f043 0201 	orr.w	r2, r3, #1
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e03a      	b.n	8001c3e <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001bce:	2b40      	cmp	r3, #64	@ 0x40
 8001bd0:	d134      	bne.n	8001c3c <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	6839      	ldr	r1, [r7, #0]
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f001 f8c2 	bl	8002d68 <ETH_Prepare_Tx_Descriptors>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d009      	beq.n	8001bfe <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bf0:	f043 0202 	orr.w	r2, r3, #2
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e01f      	b.n	8001c3e <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8001bfe:	f3bf 8f4f 	dsb	sy
}
 8001c02:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c08:	1c5a      	adds	r2, r3, #1
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	629a      	str	r2, [r3, #40]	@ 0x28
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c12:	2b03      	cmp	r3, #3
 8001c14:	d904      	bls.n	8001c20 <HAL_ETH_Transmit_IT+0x7c>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c1a:	1f1a      	subs	r2, r3, #4
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3106      	adds	r1, #6
 8001c2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c30:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c34:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	e000      	b.n	8001c3e <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
  }
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b088      	sub	sp, #32
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
 8001c4e:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001c54:	2300      	movs	r3, #0
 8001c56:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d109      	bne.n	8001c72 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c64:	f043 0201 	orr.w	r2, r3, #1
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e0a2      	b.n	8001db8 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c78:	2b40      	cmp	r3, #64	@ 0x40
 8001c7a:	d001      	beq.n	8001c80 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e09b      	b.n	8001db8 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c84:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69fa      	ldr	r2, [r7, #28]
 8001c8a:	3212      	adds	r2, #18
 8001c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c90:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c96:	f1c3 0304 	rsb	r3, r3, #4
 8001c9a:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001c9c:	e064      	b.n	8001d68 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d007      	beq.n	8001cba <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d103      	bne.n	8001cce <HAL_ETH_ReadData+0x88>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d03a      	beq.n	8001d44 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d005      	beq.n	8001ce6 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d005      	beq.n	8001d0e <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001d1e:	461a      	mov	r2, r3
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	f003 fd1a 	bl	800575c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d2c:	1c5a      	adds	r2, r3, #1
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	441a      	add	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	2200      	movs	r2, #0
 8001d42:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	3301      	adds	r3, #1
 8001d48:	61fb      	str	r3, [r7, #28]
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	d902      	bls.n	8001d56 <HAL_ETH_ReadData+0x110>
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	3b04      	subs	r3, #4
 8001d54:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69fa      	ldr	r2, [r7, #28]
 8001d5a:	3212      	adds	r2, #18
 8001d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d60:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	3301      	adds	r3, #1
 8001d66:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	db06      	blt.n	8001d7e <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d202      	bcs.n	8001d7e <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 8001d78:	7cfb      	ldrb	r3, [r7, #19]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d08f      	beq.n	8001c9e <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	441a      	add	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d002      	beq.n	8001d98 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f814 	bl	8001dc0 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69fa      	ldr	r2, [r7, #28]
 8001d9c:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001d9e:	7cfb      	ldrb	r3, [r7, #19]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d108      	bne.n	8001db6 <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001db2:	2300      	movs	r3, #0
 8001db4:	e000      	b.n	8001db8 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3720      	adds	r7, #32
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b088      	sub	sp, #32
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001dd4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69fa      	ldr	r2, [r7, #28]
 8001dda:	3212      	adds	r2, #18
 8001ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001de6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001de8:	e038      	b.n	8001e5c <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d112      	bne.n	8001e18 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001df2:	f107 0308 	add.w	r3, r7, #8
 8001df6:	4618      	mov	r0, r3
 8001df8:	f003 fc80 	bl	80056fc <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d102      	bne.n	8001e08 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	74fb      	strb	r3, [r7, #19]
 8001e06:	e007      	b.n	8001e18 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	461a      	mov	r2, r3
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8001e18:	7cfb      	ldrb	r3, [r7, #19]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d01e      	beq.n	8001e5c <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d004      	beq.n	8001e30 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8001e2c:	60da      	str	r2, [r3, #12]
 8001e2e:	e003      	b.n	8001e38 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 8001e36:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	61fb      	str	r3, [r7, #28]
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	2b03      	cmp	r3, #3
 8001e42:	d902      	bls.n	8001e4a <ETH_UpdateDescriptor+0x8a>
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	3b04      	subs	r3, #4
 8001e48:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69fa      	ldr	r2, [r7, #28]
 8001e4e:	3212      	adds	r2, #18
 8001e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e54:	617b      	str	r3, [r7, #20]
      desccount--;
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d002      	beq.n	8001e68 <ETH_UpdateDescriptor+0xa8>
 8001e62:	7cfb      	ldrb	r3, [r7, #19]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1c0      	bne.n	8001dea <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d01b      	beq.n	8001eaa <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	3303      	adds	r3, #3
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001e7c:	f3bf 8f5f 	dmb	sy
}
 8001e80:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6919      	ldr	r1, [r3, #16]
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	4413      	add	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	18ca      	adds	r2, r1, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e9a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	69fa      	ldr	r2, [r7, #28]
 8001ea2:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001eaa:	bf00      	nop
 8001eac:	3720      	adds	r7, #32
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b086      	sub	sp, #24
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	3318      	adds	r3, #24
 8001ebe:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec4:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eca:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001ed0:	e047      	b.n	8001f62 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001edc:	68ba      	ldr	r2, [r7, #8]
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10a      	bne.n	8001f02 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	d902      	bls.n	8001efe <HAL_ETH_ReleaseTxPacket+0x4c>
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	3b04      	subs	r3, #4
 8001efc:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001f02:	7bbb      	ldrb	r3, [r7, #14]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d02c      	beq.n	8001f62 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68d9      	ldr	r1, [r3, #12]
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	4413      	add	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	440b      	add	r3, r1
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	db1f      	blt.n	8001f5e <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	3304      	adds	r3, #4
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f003 fc7e 	bl	800582c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001f30:	68ba      	ldr	r2, [r7, #8]
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	3304      	adds	r3, #4
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	3301      	adds	r3, #1
 8001f42:	613b      	str	r3, [r7, #16]
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	2b03      	cmp	r3, #3
 8001f48:	d902      	bls.n	8001f50 <HAL_ETH_ReleaseTxPacket+0x9e>
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	3b04      	subs	r3, #4
 8001f4e:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001f5c:	e001      	b.n	8001f62 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d002      	beq.n	8001f6e <HAL_ETH_ReleaseTxPacket+0xbc>
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1b1      	bne.n	8001ed2 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001f88:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f92:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001f96:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fa0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001fa4:	60fb      	str	r3, [r7, #12]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 8001fa6:	4b6d      	ldr	r3, [pc, #436]	@ (800215c <HAL_ETH_IRQHandler+0x1e4>)
 8001fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001faa:	60bb      	str	r3, [r7, #8]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d010      	beq.n	8001fd8 <HAL_ETH_IRQHandler+0x60>
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00b      	beq.n	8001fd8 <HAL_ETH_IRQHandler+0x60>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fc8:	461a      	mov	r2, r3
 8001fca:	f248 0340 	movw	r3, #32832	@ 0x8040
 8001fce:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f002 ff20 	bl	8004e18 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d010      	beq.n	8002004 <HAL_ETH_IRQHandler+0x8c>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00b      	beq.n	8002004 <HAL_ETH_IRQHandler+0x8c>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	f248 0301 	movw	r3, #32769	@ 0x8001
 8001ffa:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f002 ff1a 	bl	8004e38 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d047      	beq.n	800209e <HAL_ETH_IRQHandler+0x126>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d042      	beq.n	800209e <HAL_ETH_IRQHandler+0x126>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800201e:	f043 0208 	orr.w	r2, r3, #8
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d01e      	beq.n	8002070 <HAL_ETH_IRQHandler+0xf8>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800203a:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 800203e:	f241 1302 	movw	r3, #4354	@ 0x1102
 8002042:	4013      	ands	r3, r2
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002052:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6812      	ldr	r2, [r2, #0]
 800205a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800205e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002062:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	22e0      	movs	r2, #224	@ 0xe0
 800206a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800206e:	e013      	b.n	8002098 <HAL_ETH_IRQHandler+0x120>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002078:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 800207c:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800208e:	461a      	mov	r2, r3
 8002090:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8002094:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f002 fedd 	bl	8004e58 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d104      	bne.n	80020b2 <HAL_ETH_IRQHandler+0x13a>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d019      	beq.n	80020e6 <HAL_ETH_IRQHandler+0x16e>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b8:	f043 0210 	orr.w	r2, r3, #16
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	22e0      	movs	r2, #224	@ 0xe0
 80020d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f002 febd 	bl	8004e58 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f003 0310 	and.w	r3, r3, #16
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00f      	beq.n	8002110 <HAL_ETH_IRQHandler+0x198>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80020f8:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f82c 	bl	8002160 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f003 0320 	and.w	r3, r3, #32
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00f      	beq.n	800213a <HAL_ETH_IRQHandler+0x1c2>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8002122:	f003 020f 	and.w	r2, r3, #15
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 f821 	bl	8002174 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* DUAL_CORE not defined */
  /* check ETH WAKEUP exti flag */
  if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d006      	beq.n	8002152 <HAL_ETH_IRQHandler+0x1da>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002144:	4b05      	ldr	r3, [pc, #20]	@ (800215c <HAL_ETH_IRQHandler+0x1e4>)
 8002146:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800214a:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 f81b 	bl	8002188 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 8002152:	bf00      	nop
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	58000080 	.word	0x58000080

08002160 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
 80021a8:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e03e      	b.n	800223c <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80021c6:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	055b      	lsls	r3, r3, #21
 80021d2:	4313      	orrs	r3, r2
 80021d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	041b      	lsls	r3, r3, #16
 80021e0:	4313      	orrs	r3, r2
 80021e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	f043 030c 	orr.w	r3, r3, #12
 80021ea:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 80021fe:	f7ff f94b 	bl	8001498 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002204:	e009      	b.n	800221a <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8002206:	f7ff f947 	bl	8001498 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002214:	d901      	bls.n	800221a <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e010      	b.n	800223c <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1ed      	bne.n	8002206 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002232:	b29b      	uxth	r3, r3
 8002234:	461a      	mov	r2, r3
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
 8002250:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e03c      	b.n	80022e0 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800226e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	055b      	lsls	r3, r3, #21
 800227a:	4313      	orrs	r3, r2
 800227c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	041b      	lsls	r3, r3, #16
 8002288:	4313      	orrs	r3, r2
 800228a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f023 030c 	bic.w	r3, r3, #12
 8002292:	f043 0304 	orr.w	r3, r3, #4
 8002296:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	4b10      	ldr	r3, [pc, #64]	@ (80022e8 <HAL_ETH_WritePHYRegister+0xa4>)
 80022a6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80022aa:	4a0f      	ldr	r2, [pc, #60]	@ (80022e8 <HAL_ETH_WritePHYRegister+0xa4>)
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 80022b2:	f7ff f8f1 	bl	8001498 <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80022b8:	e009      	b.n	80022ce <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80022ba:	f7ff f8ed 	bl	8001498 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80022c8:	d901      	bls.n	80022ce <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e008      	b.n	80022e0 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1ed      	bne.n	80022ba <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3718      	adds	r7, #24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40028000 	.word	0x40028000

080022ec <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e1c3      	b.n	8002688 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 020c 	and.w	r2, r3, #12
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0310 	and.w	r3, r3, #16
 8002318:	2b00      	cmp	r3, #0
 800231a:	bf14      	ite	ne
 800231c:	2301      	movne	r3, #1
 800231e:	2300      	moveq	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	461a      	mov	r2, r3
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002342:	2b00      	cmp	r3, #0
 8002344:	bf0c      	ite	eq
 8002346:	2301      	moveq	r3, #1
 8002348:	2300      	movne	r3, #0
 800234a:	b2db      	uxtb	r3, r3
 800234c:	461a      	mov	r2, r3
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 800235e:	2b00      	cmp	r3, #0
 8002360:	bf14      	ite	ne
 8002362:	2301      	movne	r3, #1
 8002364:	2300      	moveq	r3, #0
 8002366:	b2db      	uxtb	r3, r3
 8002368:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002378:	2b00      	cmp	r3, #0
 800237a:	bf0c      	ite	eq
 800237c:	2301      	moveq	r3, #1
 800237e:	2300      	movne	r3, #0
 8002380:	b2db      	uxtb	r3, r3
 8002382:	461a      	mov	r2, r3
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800238e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002392:	2b00      	cmp	r3, #0
 8002394:	bf14      	ite	ne
 8002396:	2301      	movne	r3, #1
 8002398:	2300      	moveq	r3, #0
 800239a:	b2db      	uxtb	r3, r3
 800239c:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	bf14      	ite	ne
 80023b0:	2301      	movne	r3, #1
 80023b2:	2300      	moveq	r3, #0
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	461a      	mov	r2, r3
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	bf14      	ite	ne
 80023e6:	2301      	movne	r3, #1
 80023e8:	2300      	moveq	r3, #0
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	461a      	mov	r2, r3
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	bf0c      	ite	eq
 8002400:	2301      	moveq	r3, #1
 8002402:	2300      	movne	r3, #0
 8002404:	b2db      	uxtb	r3, r3
 8002406:	461a      	mov	r2, r3
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002416:	2b00      	cmp	r3, #0
 8002418:	bf0c      	ite	eq
 800241a:	2301      	moveq	r3, #1
 800241c:	2300      	movne	r3, #0
 800241e:	b2db      	uxtb	r3, r3
 8002420:	461a      	mov	r2, r3
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002430:	2b00      	cmp	r3, #0
 8002432:	bf14      	ite	ne
 8002434:	2301      	movne	r3, #1
 8002436:	2300      	moveq	r3, #0
 8002438:	b2db      	uxtb	r3, r3
 800243a:	461a      	mov	r2, r3
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800244a:	2b00      	cmp	r3, #0
 800244c:	bf14      	ite	ne
 800244e:	2301      	movne	r3, #1
 8002450:	2300      	moveq	r3, #0
 8002452:	b2db      	uxtb	r3, r3
 8002454:	461a      	mov	r2, r3
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002464:	2b00      	cmp	r3, #0
 8002466:	bf14      	ite	ne
 8002468:	2301      	movne	r3, #1
 800246a:	2300      	moveq	r3, #0
 800246c:	b2db      	uxtb	r3, r3
 800246e:	461a      	mov	r2, r3
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 800247a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800247e:	2b00      	cmp	r3, #0
 8002480:	bf14      	ite	ne
 8002482:	2301      	movne	r3, #1
 8002484:	2300      	moveq	r3, #0
 8002486:	b2db      	uxtb	r3, r3
 8002488:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	bf14      	ite	ne
 80024aa:	2301      	movne	r3, #1
 80024ac:	2300      	moveq	r3, #0
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	461a      	mov	r2, r3
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	bf0c      	ite	eq
 80024e0:	2301      	moveq	r3, #1
 80024e2:	2300      	movne	r3, #0
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	461a      	mov	r2, r3
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	bf14      	ite	ne
 80024fc:	2301      	movne	r3, #1
 80024fe:	2300      	moveq	r3, #0
 8002500:	b2db      	uxtb	r3, r3
 8002502:	461a      	mov	r2, r3
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002510:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002514:	2b00      	cmp	r3, #0
 8002516:	bf14      	ite	ne
 8002518:	2301      	movne	r3, #1
 800251a:	2300      	moveq	r3, #0
 800251c:	b2db      	uxtb	r3, r3
 800251e:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8002530:	2b00      	cmp	r3, #0
 8002532:	bf14      	ite	ne
 8002534:	2301      	movne	r3, #1
 8002536:	2300      	moveq	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	0e5b      	lsrs	r3, r3, #25
 800254a:	f003 021f 	and.w	r2, r3, #31
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800255c:	2b00      	cmp	r3, #0
 800255e:	bf14      	ite	ne
 8002560:	2301      	movne	r3, #1
 8002562:	2300      	moveq	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	461a      	mov	r2, r3
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	f003 020f 	and.w	r2, r3, #15
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	bf14      	ite	ne
 800258a:	2301      	movne	r3, #1
 800258c:	2300      	moveq	r3, #0
 800258e:	b2db      	uxtb	r3, r3
 8002590:	461a      	mov	r2, r3
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800259e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	bf0c      	ite	eq
 80025a6:	2301      	moveq	r3, #1
 80025a8:	2300      	movne	r3, #0
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ba:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c8:	0c1b      	lsrs	r3, r3, #16
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b00      	cmp	r3, #0
 80025de:	bf14      	ite	ne
 80025e0:	2301      	movne	r3, #1
 80025e2:	2300      	moveq	r3, #0
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	461a      	mov	r2, r3
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025f6:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	bf14      	ite	ne
 80025fe:	2301      	movne	r3, #1
 8002600:	2300      	moveq	r3, #0
 8002602:	b2db      	uxtb	r3, r3
 8002604:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002614:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002624:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002634:	f003 0308 	and.w	r3, r3, #8
 8002638:	2b00      	cmp	r3, #0
 800263a:	bf14      	ite	ne
 800263c:	2301      	movne	r3, #1
 800263e:	2300      	moveq	r3, #0
 8002640:	b2db      	uxtb	r3, r3
 8002642:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002652:	f003 0310 	and.w	r3, r3, #16
 8002656:	2b00      	cmp	r3, #0
 8002658:	bf14      	ite	ne
 800265a:	2301      	movne	r3, #1
 800265c:	2300      	moveq	r3, #0
 800265e:	b2db      	uxtb	r3, r3
 8002660:	461a      	mov	r2, r3
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002674:	2b00      	cmp	r3, #0
 8002676:	bf0c      	ite	eq
 8002678:	2301      	moveq	r3, #1
 800267a:	2300      	movne	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e00b      	b.n	80026c0 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026ae:	2b10      	cmp	r3, #16
 80026b0:	d105      	bne.n	80026be <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80026b2:	6839      	ldr	r1, [r7, #0]
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 f871 	bl	800279c <ETH_SetMACConfig>

    return HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	e000      	b.n	80026c0 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
  }
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80026d8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80026e0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80026e2:	f001 fee3 	bl	80044ac <HAL_RCC_GetHCLKFreq>
 80026e6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	4a1a      	ldr	r2, [pc, #104]	@ (8002754 <HAL_ETH_SetMDIOClockRange+0x8c>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d804      	bhi.n	80026fa <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	e022      	b.n	8002740 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	4a16      	ldr	r2, [pc, #88]	@ (8002758 <HAL_ETH_SetMDIOClockRange+0x90>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d204      	bcs.n	800270c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	e019      	b.n	8002740 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	4a13      	ldr	r2, [pc, #76]	@ (800275c <HAL_ETH_SetMDIOClockRange+0x94>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d915      	bls.n	8002740 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	4a12      	ldr	r2, [pc, #72]	@ (8002760 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d804      	bhi.n	8002726 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	e00c      	b.n	8002740 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	4a0e      	ldr	r2, [pc, #56]	@ (8002764 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d804      	bhi.n	8002738 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	e003      	b.n	8002740 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800273e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800274a:	bf00      	nop
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	02160ebf 	.word	0x02160ebf
 8002758:	03938700 	.word	0x03938700
 800275c:	05f5e0ff 	.word	0x05f5e0ff
 8002760:	08f0d17f 	.word	0x08f0d17f
 8002764:	0ee6b27f 	.word	0x0ee6b27f

08002768 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8002776:	4618      	mov	r0, r3
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8002790:	4618      	mov	r0, r3
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80027ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	791b      	ldrb	r3, [r3, #4]
 80027b4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80027b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	7b1b      	ldrb	r3, [r3, #12]
 80027bc:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80027be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	7b5b      	ldrb	r3, [r3, #13]
 80027c4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80027c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	7b9b      	ldrb	r3, [r3, #14]
 80027cc:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80027ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	7bdb      	ldrb	r3, [r3, #15]
 80027d4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80027d6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	7c12      	ldrb	r2, [r2, #16]
 80027dc:	2a00      	cmp	r2, #0
 80027de:	d102      	bne.n	80027e6 <ETH_SetMACConfig+0x4a>
 80027e0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80027e4:	e000      	b.n	80027e8 <ETH_SetMACConfig+0x4c>
 80027e6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80027e8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	7c52      	ldrb	r2, [r2, #17]
 80027ee:	2a00      	cmp	r2, #0
 80027f0:	d102      	bne.n	80027f8 <ETH_SetMACConfig+0x5c>
 80027f2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80027f6:	e000      	b.n	80027fa <ETH_SetMACConfig+0x5e>
 80027f8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80027fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	7c9b      	ldrb	r3, [r3, #18]
 8002800:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002802:	431a      	orrs	r2, r3
               macconf->Speed |
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002808:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800280e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	7f1b      	ldrb	r3, [r3, #28]
 8002814:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002816:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	7f5b      	ldrb	r3, [r3, #29]
 800281c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800281e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	7f92      	ldrb	r2, [r2, #30]
 8002824:	2a00      	cmp	r2, #0
 8002826:	d102      	bne.n	800282e <ETH_SetMACConfig+0x92>
 8002828:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800282c:	e000      	b.n	8002830 <ETH_SetMACConfig+0x94>
 800282e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002830:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	7fdb      	ldrb	r3, [r3, #31]
 8002836:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002838:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002840:	2a00      	cmp	r2, #0
 8002842:	d102      	bne.n	800284a <ETH_SetMACConfig+0xae>
 8002844:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002848:	e000      	b.n	800284c <ETH_SetMACConfig+0xb0>
 800284a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800284c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002852:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800285a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800285c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002862:	4313      	orrs	r3, r2
 8002864:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	4b56      	ldr	r3, [pc, #344]	@ (80029c8 <ETH_SetMACConfig+0x22c>)
 800286e:	4013      	ands	r3, r2
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	68f9      	ldr	r1, [r7, #12]
 8002876:	430b      	orrs	r3, r1
 8002878:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800287e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002886:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002888:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002890:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002892:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800289a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800289c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80028a4:	2a00      	cmp	r2, #0
 80028a6:	d102      	bne.n	80028ae <ETH_SetMACConfig+0x112>
 80028a8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80028ac:	e000      	b.n	80028b0 <ETH_SetMACConfig+0x114>
 80028ae:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80028b0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80028b6:	4313      	orrs	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	4b42      	ldr	r3, [pc, #264]	@ (80029cc <ETH_SetMACConfig+0x230>)
 80028c2:	4013      	ands	r3, r2
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6812      	ldr	r2, [r2, #0]
 80028c8:	68f9      	ldr	r1, [r7, #12]
 80028ca:	430b      	orrs	r3, r1
 80028cc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028d4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80028da:	4313      	orrs	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68da      	ldr	r2, [r3, #12]
 80028e4:	4b3a      	ldr	r3, [pc, #232]	@ (80029d0 <ETH_SetMACConfig+0x234>)
 80028e6:	4013      	ands	r3, r2
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6812      	ldr	r2, [r2, #0]
 80028ec:	68f9      	ldr	r1, [r7, #12]
 80028ee:	430b      	orrs	r3, r1
 80028f0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80028f8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80028fe:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002906:	2a00      	cmp	r2, #0
 8002908:	d101      	bne.n	800290e <ETH_SetMACConfig+0x172>
 800290a:	2280      	movs	r2, #128	@ 0x80
 800290c:	e000      	b.n	8002910 <ETH_SetMACConfig+0x174>
 800290e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002910:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002916:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002918:	4313      	orrs	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002922:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8002926:	4013      	ands	r3, r2
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6812      	ldr	r2, [r2, #0]
 800292c:	68f9      	ldr	r1, [r7, #12]
 800292e:	430b      	orrs	r3, r1
 8002930:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8002938:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002940:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002942:	4313      	orrs	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800294e:	f023 0103 	bic.w	r1, r3, #3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	430a      	orrs	r2, r1
 800295a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002966:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	430a      	orrs	r2, r1
 8002974:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8002982:	2a00      	cmp	r2, #0
 8002984:	d101      	bne.n	800298a <ETH_SetMACConfig+0x1ee>
 8002986:	2240      	movs	r2, #64	@ 0x40
 8002988:	e000      	b.n	800298c <ETH_SetMACConfig+0x1f0>
 800298a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800298c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002994:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002996:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800299e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80029a0:	4313      	orrs	r3, r2
 80029a2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80029ac:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80029bc:	bf00      	nop
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	00048083 	.word	0x00048083
 80029cc:	c0f88000 	.word	0xc0f88000
 80029d0:	fffffef0 	.word	0xfffffef0

080029d4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	4b38      	ldr	r3, [pc, #224]	@ (8002acc <ETH_SetDMAConfig+0xf8>)
 80029ea:	4013      	ands	r3, r2
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	6811      	ldr	r1, [r2, #0]
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6812      	ldr	r2, [r2, #0]
 80029f4:	430b      	orrs	r3, r1
 80029f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80029fa:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	791b      	ldrb	r3, [r3, #4]
 8002a00:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002a06:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	7b1b      	ldrb	r3, [r3, #12]
 8002a0c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	4b2c      	ldr	r3, [pc, #176]	@ (8002ad0 <ETH_SetDMAConfig+0xfc>)
 8002a1e:	4013      	ands	r3, r2
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6812      	ldr	r2, [r2, #0]
 8002a24:	68f9      	ldr	r1, [r7, #12]
 8002a26:	430b      	orrs	r3, r1
 8002a28:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a2c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	7b5b      	ldrb	r3, [r3, #13]
 8002a32:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a44:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002a48:	4b22      	ldr	r3, [pc, #136]	@ (8002ad4 <ETH_SetDMAConfig+0x100>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6812      	ldr	r2, [r2, #0]
 8002a50:	68f9      	ldr	r1, [r7, #12]
 8002a52:	430b      	orrs	r3, r1
 8002a54:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a58:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	7d1b      	ldrb	r3, [r3, #20]
 8002a64:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002a66:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	7f5b      	ldrb	r3, [r3, #29]
 8002a6c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a7a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8002a7e:	4b16      	ldr	r3, [pc, #88]	@ (8002ad8 <ETH_SetDMAConfig+0x104>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6812      	ldr	r2, [r2, #0]
 8002a86:	68f9      	ldr	r1, [r7, #12]
 8002a88:	430b      	orrs	r3, r1
 8002a8a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a8e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	7f1b      	ldrb	r3, [r3, #28]
 8002a96:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002aa8:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002aac:	4b0b      	ldr	r3, [pc, #44]	@ (8002adc <ETH_SetDMAConfig+0x108>)
 8002aae:	4013      	ands	r3, r2
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6812      	ldr	r2, [r2, #0]
 8002ab4:	68f9      	ldr	r1, [r7, #12]
 8002ab6:	430b      	orrs	r3, r1
 8002ab8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002abc:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8002ac0:	bf00      	nop
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	ffff87fd 	.word	0xffff87fd
 8002ad0:	ffff2ffe 	.word	0xffff2ffe
 8002ad4:	fffec000 	.word	0xfffec000
 8002ad8:	ffc0efef 	.word	0xffc0efef
 8002adc:	7fc0ffff 	.word	0x7fc0ffff

08002ae0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b0a4      	sub	sp, #144	@ 0x90
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002aee:	2300      	movs	r3, #0
 8002af0:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002af2:	2300      	movs	r3, #0
 8002af4:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002af8:	2300      	movs	r3, #0
 8002afa:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002afe:	2301      	movs	r3, #1
 8002b00:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002b04:	2301      	movs	r3, #1
 8002b06:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002b10:	2300      	movs	r3, #0
 8002b12:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002b16:	2301      	movs	r3, #1
 8002b18:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002b1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b20:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002b22:	2300      	movs	r3, #0
 8002b24:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002b32:	2300      	movs	r3, #0
 8002b34:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002b38:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8002b3c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002b44:	2300      	movs	r3, #0
 8002b46:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002b54:	2300      	movs	r3, #0
 8002b56:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002b62:	2300      	movs	r3, #0
 8002b64:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002b66:	2300      	movs	r3, #0
 8002b68:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002b72:	2301      	movs	r3, #1
 8002b74:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002b78:	2320      	movs	r3, #32
 8002b7a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002b84:	2300      	movs	r3, #0
 8002b86:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002b8a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002b90:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b94:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002b96:	2300      	movs	r3, #0
 8002b98:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002bc4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bc8:	4619      	mov	r1, r3
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7ff fde6 	bl	800279c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002be2:	2300      	movs	r3, #0
 8002be4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002be6:	2300      	movs	r3, #0
 8002be8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002bea:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002bee:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002bf4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002bf8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002c00:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8002c04:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002c06:	f107 0308 	add.w	r3, r7, #8
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7ff fee1 	bl	80029d4 <ETH_SetDMAConfig>
}
 8002c12:	bf00      	nop
 8002c14:	3790      	adds	r7, #144	@ 0x90
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b085      	sub	sp, #20
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c22:	2300      	movs	r3, #0
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	e01d      	b.n	8002c64 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68d9      	ldr	r1, [r3, #12]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	4413      	add	r3, r2
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	440b      	add	r3, r1
 8002c38:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2200      	movs	r2, #0
 8002c44:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002c52:	68b9      	ldr	r1, [r7, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	3206      	adds	r2, #6
 8002c5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	3301      	adds	r3, #1
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2b03      	cmp	r3, #3
 8002c68:	d9de      	bls.n	8002c28 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c78:	461a      	mov	r2, r3
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c8c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68da      	ldr	r2, [r3, #12]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c9c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8002ca0:	bf00      	nop
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	e023      	b.n	8002d02 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6919      	ldr	r1, [r3, #16]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	4413      	add	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	440b      	add	r3, r1
 8002cca:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	2200      	movs	r2, #0
 8002cee:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002cf0:	68b9      	ldr	r1, [r7, #8]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	3212      	adds	r2, #18
 8002cf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2b03      	cmp	r3, #3
 8002d06:	d9d8      	bls.n	8002cba <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d2e:	461a      	mov	r2, r3
 8002d30:	2303      	movs	r3, #3
 8002d32:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691a      	ldr	r2, [r3, #16]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d42:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d56:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8002d5a:	bf00      	nop
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
	...

08002d68 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b091      	sub	sp, #68	@ 0x44
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	3318      	adds	r3, #24
 8002d78:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002d86:	2300      	movs	r3, #0
 8002d88:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d92:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002da6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002daa:	d007      	beq.n	8002dbc <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002dac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002db0:	3304      	adds	r3, #4
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e266      	b.n	800328e <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d044      	beq.n	8002e56 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	4b75      	ldr	r3, [pc, #468]	@ (8002fa8 <ETH_Prepare_Tx_Descriptors+0x240>)
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ddc:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de8:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002df8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d027      	beq.n	8002e56 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e10:	041b      	lsls	r3, r3, #16
 8002e12:	431a      	orrs	r2, r3
 8002e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e16:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e22:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e30:	431a      	orrs	r2, r3
 8002e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e34:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002e44:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002e54:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0310 	and.w	r3, r3, #16
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00e      	beq.n	8002e80 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	4b51      	ldr	r3, [pc, #324]	@ (8002fac <ETH_Prepare_Tx_Descriptors+0x244>)
 8002e68:	4013      	ands	r3, r2
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	6992      	ldr	r2, [r2, #24]
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e72:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8002e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e7e:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d105      	bne.n	8002e98 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0310 	and.w	r3, r3, #16
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d036      	beq.n	8002f06 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002ea4:	f3bf 8f5f 	dmb	sy
}
 8002ea8:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb4:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002eb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002eb8:	3301      	adds	r3, #1
 8002eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ebc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ebe:	2b03      	cmp	r3, #3
 8002ec0:	d902      	bls.n	8002ec8 <ETH_Prepare_Tx_Descriptors+0x160>
 8002ec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ec4:	3b04      	subs	r3, #4
 8002ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ed0:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 8002ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ee0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ee4:	d10f      	bne.n	8002f06 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee8:	6a3a      	ldr	r2, [r7, #32]
 8002eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eee:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8002ef0:	f3bf 8f5f 	dmb	sy
}
 8002ef4:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f00:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002f02:	2302      	movs	r3, #2
 8002f04:	e1c3      	b.n	800328e <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002f06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f08:	3301      	adds	r3, #1
 8002f0a:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	461a      	mov	r2, r3
 8002f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f14:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f18:	689a      	ldr	r2, [r3, #8]
 8002f1a:	4b24      	ldr	r3, [pc, #144]	@ (8002fac <ETH_Prepare_Tx_Descriptors+0x244>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f20:	6852      	ldr	r2, [r2, #4]
 8002f22:	431a      	orrs	r2, r3
 8002f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f26:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8002f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d012      	beq.n	8002f56 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8002f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f3e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	4b1a      	ldr	r3, [pc, #104]	@ (8002fb0 <ETH_Prepare_Tx_Descriptors+0x248>)
 8002f46:	4013      	ands	r3, r2
 8002f48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f4a:	6852      	ldr	r2, [r2, #4]
 8002f4c:	0412      	lsls	r2, r2, #16
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f52:	609a      	str	r2, [r3, #8]
 8002f54:	e008      	b.n	8002f68 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f58:	2200      	movs	r2, #0
 8002f5a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	4b13      	ldr	r3, [pc, #76]	@ (8002fb0 <ETH_Prepare_Tx_Descriptors+0x248>)
 8002f62:	4013      	ands	r3, r2
 8002f64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f66:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0310 	and.w	r3, r3, #16
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d021      	beq.n	8002fb8 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	04db      	lsls	r3, r3, #19
 8002f82:	431a      	orrs	r2, r3
 8002f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f86:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f8a:	68da      	ldr	r2, [r3, #12]
 8002f8c:	4b09      	ldr	r3, [pc, #36]	@ (8002fb4 <ETH_Prepare_Tx_Descriptors+0x24c>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	68ba      	ldr	r2, [r7, #8]
 8002f92:	69d2      	ldr	r2, [r2, #28]
 8002f94:	431a      	orrs	r2, r3
 8002f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f98:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa4:	60da      	str	r2, [r3, #12]
 8002fa6:	e02e      	b.n	8003006 <ETH_Prepare_Tx_Descriptors+0x29e>
 8002fa8:	ffff0000 	.word	0xffff0000
 8002fac:	ffffc000 	.word	0xffffc000
 8002fb0:	c000ffff 	.word	0xc000ffff
 8002fb4:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	4b7b      	ldr	r3, [pc, #492]	@ (80031ac <ETH_Prepare_Tx_Descriptors+0x444>)
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	6852      	ldr	r2, [r2, #4]
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc8:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d008      	beq.n	8002fe8 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe6:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0320 	and.w	r3, r3, #32
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d008      	beq.n	8003006 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	431a      	orrs	r2, r3
 8003002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003004:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0304 	and.w	r3, r3, #4
 800300e:	2b00      	cmp	r3, #0
 8003010:	d008      	beq.n	8003024 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8003012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800301e:	431a      	orrs	r2, r3
 8003020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003022:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800302c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800302e:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800303a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800303c:	f3bf 8f5f 	dmb	sy
}
 8003040:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800304a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800304c:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 80da 	beq.w	8003210 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 800305c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	431a      	orrs	r2, r3
 800306a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800306c:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800306e:	e0cf      	b.n	8003210 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800307a:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800307c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800307e:	3301      	adds	r3, #1
 8003080:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003084:	2b03      	cmp	r3, #3
 8003086:	d902      	bls.n	800308e <ETH_Prepare_Tx_Descriptors+0x326>
 8003088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800308a:	3b04      	subs	r3, #4
 800308c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800308e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003090:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003096:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80030a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a2:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80030a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80030ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80030b0:	d007      	beq.n	80030c2 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80030b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030b6:	3304      	adds	r3, #4
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d029      	beq.n	8003116 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 80030c2:	6a3b      	ldr	r3, [r7, #32]
 80030c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80030c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80030ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ce:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80030d0:	2300      	movs	r3, #0
 80030d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030d4:	e019      	b.n	800310a <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 80030d6:	f3bf 8f5f 	dmb	sy
}
 80030da:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80030dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80030e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030e6:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80030e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030ea:	3301      	adds	r3, #1
 80030ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	d902      	bls.n	80030fa <ETH_Prepare_Tx_Descriptors+0x392>
 80030f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030f6:	3b04      	subs	r3, #4
 80030f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80030fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80030fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003102:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003106:	3301      	adds	r3, #1
 8003108:	63bb      	str	r3, [r7, #56]	@ 0x38
 800310a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800310c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800310e:	429a      	cmp	r2, r3
 8003110:	d3e1      	bcc.n	80030d6 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8003112:	2302      	movs	r3, #2
 8003114:	e0bb      	b.n	800328e <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 8003116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003118:	3301      	adds	r3, #1
 800311a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800311c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	461a      	mov	r2, r3
 8003128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800312a:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800312c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	4b1f      	ldr	r3, [pc, #124]	@ (80031b0 <ETH_Prepare_Tx_Descriptors+0x448>)
 8003132:	4013      	ands	r3, r2
 8003134:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003136:	6852      	ldr	r2, [r2, #4]
 8003138:	431a      	orrs	r2, r3
 800313a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800313c:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 800313e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d012      	beq.n	800316c <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8003146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800314c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	461a      	mov	r2, r3
 8003152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003154:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	4b16      	ldr	r3, [pc, #88]	@ (80031b4 <ETH_Prepare_Tx_Descriptors+0x44c>)
 800315c:	4013      	ands	r3, r2
 800315e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003160:	6852      	ldr	r2, [r2, #4]
 8003162:	0412      	lsls	r2, r2, #16
 8003164:	431a      	orrs	r2, r3
 8003166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003168:	609a      	str	r2, [r3, #8]
 800316a:	e008      	b.n	800317e <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800316c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800316e:	2200      	movs	r2, #0
 8003170:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003174:	689a      	ldr	r2, [r3, #8]
 8003176:	4b0f      	ldr	r3, [pc, #60]	@ (80031b4 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8003178:	4013      	ands	r3, r2
 800317a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800317c:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0310 	and.w	r3, r3, #16
 8003186:	2b00      	cmp	r3, #0
 8003188:	d018      	beq.n	80031bc <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800318a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800318c:	68da      	ldr	r2, [r3, #12]
 800318e:	4b0a      	ldr	r3, [pc, #40]	@ (80031b8 <ETH_Prepare_Tx_Descriptors+0x450>)
 8003190:	4013      	ands	r3, r2
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	69d2      	ldr	r2, [r2, #28]
 8003196:	431a      	orrs	r2, r3
 8003198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800319a:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800319c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80031a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a6:	60da      	str	r2, [r3, #12]
 80031a8:	e020      	b.n	80031ec <ETH_Prepare_Tx_Descriptors+0x484>
 80031aa:	bf00      	nop
 80031ac:	ffff8000 	.word	0xffff8000
 80031b0:	ffffc000 	.word	0xffffc000
 80031b4:	c000ffff 	.word	0xc000ffff
 80031b8:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80031bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031be:	68da      	ldr	r2, [r3, #12]
 80031c0:	4b36      	ldr	r3, [pc, #216]	@ (800329c <ETH_Prepare_Tx_Descriptors+0x534>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	6852      	ldr	r2, [r2, #4]
 80031c8:	431a      	orrs	r2, r3
 80031ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031cc:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d008      	beq.n	80031ec <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80031da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	431a      	orrs	r2, r3
 80031e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ea:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 80031ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ee:	3301      	adds	r3, #1
 80031f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80031f2:	f3bf 8f5f 	dmb	sy
}
 80031f6:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80031f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003202:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800320c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800320e:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8003210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2b00      	cmp	r3, #0
 8003216:	f47f af2b 	bne.w	8003070 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d006      	beq.n	800322e <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800322a:	609a      	str	r2, [r3, #8]
 800322c:	e005      	b.n	800323a <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800322e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003238:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800323a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003244:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003248:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800324a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800324c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800324e:	3304      	adds	r3, #4
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	440b      	add	r3, r1
 8003254:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003258:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800325a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800325c:	f3ef 8310 	mrs	r3, PRIMASK
 8003260:	613b      	str	r3, [r7, #16]
  return(result);
 8003262:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8003264:	61fb      	str	r3, [r7, #28]
 8003266:	2301      	movs	r3, #1
 8003268:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f383 8810 	msr	PRIMASK, r3
}
 8003270:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003274:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003278:	4413      	add	r3, r2
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	f383 8810 	msr	PRIMASK, r3
}
 800328a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3744      	adds	r7, #68	@ 0x44
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	ffff8000 	.word	0xffff8000

080032a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b089      	sub	sp, #36	@ 0x24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80032aa:	2300      	movs	r3, #0
 80032ac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80032ae:	4b86      	ldr	r3, [pc, #536]	@ (80034c8 <HAL_GPIO_Init+0x228>)
 80032b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80032b2:	e18c      	b.n	80035ce <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	2101      	movs	r1, #1
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	fa01 f303 	lsl.w	r3, r1, r3
 80032c0:	4013      	ands	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 817e 	beq.w	80035c8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 0303 	and.w	r3, r3, #3
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d005      	beq.n	80032e4 <HAL_GPIO_Init+0x44>
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f003 0303 	and.w	r3, r3, #3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d130      	bne.n	8003346 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	2203      	movs	r2, #3
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	43db      	mvns	r3, r3
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4013      	ands	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	68da      	ldr	r2, [r3, #12]
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4313      	orrs	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800331a:	2201      	movs	r2, #1
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	fa02 f303 	lsl.w	r3, r2, r3
 8003322:	43db      	mvns	r3, r3
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	4013      	ands	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	091b      	lsrs	r3, r3, #4
 8003330:	f003 0201 	and.w	r2, r3, #1
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4313      	orrs	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	2b03      	cmp	r3, #3
 8003350:	d017      	beq.n	8003382 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	2203      	movs	r2, #3
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	43db      	mvns	r3, r3
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	4013      	ands	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	689a      	ldr	r2, [r3, #8]
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	fa02 f303 	lsl.w	r3, r2, r3
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4313      	orrs	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d123      	bne.n	80033d6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	08da      	lsrs	r2, r3, #3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3208      	adds	r2, #8
 8003396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800339a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	220f      	movs	r2, #15
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	43db      	mvns	r3, r3
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	4013      	ands	r3, r2
 80033b0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	691a      	ldr	r2, [r3, #16]
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	08da      	lsrs	r2, r3, #3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3208      	adds	r2, #8
 80033d0:	69b9      	ldr	r1, [r7, #24]
 80033d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	2203      	movs	r2, #3
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	43db      	mvns	r3, r3
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	4013      	ands	r3, r2
 80033ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f003 0203 	and.w	r2, r3, #3
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4313      	orrs	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003412:	2b00      	cmp	r3, #0
 8003414:	f000 80d8 	beq.w	80035c8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003418:	4b2c      	ldr	r3, [pc, #176]	@ (80034cc <HAL_GPIO_Init+0x22c>)
 800341a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800341e:	4a2b      	ldr	r2, [pc, #172]	@ (80034cc <HAL_GPIO_Init+0x22c>)
 8003420:	f043 0302 	orr.w	r3, r3, #2
 8003424:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003428:	4b28      	ldr	r3, [pc, #160]	@ (80034cc <HAL_GPIO_Init+0x22c>)
 800342a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003436:	4a26      	ldr	r2, [pc, #152]	@ (80034d0 <HAL_GPIO_Init+0x230>)
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	089b      	lsrs	r3, r3, #2
 800343c:	3302      	adds	r3, #2
 800343e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003442:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	220f      	movs	r2, #15
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	43db      	mvns	r3, r3
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	4013      	ands	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a1d      	ldr	r2, [pc, #116]	@ (80034d4 <HAL_GPIO_Init+0x234>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d04a      	beq.n	80034f8 <HAL_GPIO_Init+0x258>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a1c      	ldr	r2, [pc, #112]	@ (80034d8 <HAL_GPIO_Init+0x238>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d02b      	beq.n	80034c2 <HAL_GPIO_Init+0x222>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a1b      	ldr	r2, [pc, #108]	@ (80034dc <HAL_GPIO_Init+0x23c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d025      	beq.n	80034be <HAL_GPIO_Init+0x21e>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a1a      	ldr	r2, [pc, #104]	@ (80034e0 <HAL_GPIO_Init+0x240>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d01f      	beq.n	80034ba <HAL_GPIO_Init+0x21a>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a19      	ldr	r2, [pc, #100]	@ (80034e4 <HAL_GPIO_Init+0x244>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d019      	beq.n	80034b6 <HAL_GPIO_Init+0x216>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a18      	ldr	r2, [pc, #96]	@ (80034e8 <HAL_GPIO_Init+0x248>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d013      	beq.n	80034b2 <HAL_GPIO_Init+0x212>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a17      	ldr	r2, [pc, #92]	@ (80034ec <HAL_GPIO_Init+0x24c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d00d      	beq.n	80034ae <HAL_GPIO_Init+0x20e>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a16      	ldr	r2, [pc, #88]	@ (80034f0 <HAL_GPIO_Init+0x250>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d007      	beq.n	80034aa <HAL_GPIO_Init+0x20a>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a15      	ldr	r2, [pc, #84]	@ (80034f4 <HAL_GPIO_Init+0x254>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d101      	bne.n	80034a6 <HAL_GPIO_Init+0x206>
 80034a2:	2309      	movs	r3, #9
 80034a4:	e029      	b.n	80034fa <HAL_GPIO_Init+0x25a>
 80034a6:	230a      	movs	r3, #10
 80034a8:	e027      	b.n	80034fa <HAL_GPIO_Init+0x25a>
 80034aa:	2307      	movs	r3, #7
 80034ac:	e025      	b.n	80034fa <HAL_GPIO_Init+0x25a>
 80034ae:	2306      	movs	r3, #6
 80034b0:	e023      	b.n	80034fa <HAL_GPIO_Init+0x25a>
 80034b2:	2305      	movs	r3, #5
 80034b4:	e021      	b.n	80034fa <HAL_GPIO_Init+0x25a>
 80034b6:	2304      	movs	r3, #4
 80034b8:	e01f      	b.n	80034fa <HAL_GPIO_Init+0x25a>
 80034ba:	2303      	movs	r3, #3
 80034bc:	e01d      	b.n	80034fa <HAL_GPIO_Init+0x25a>
 80034be:	2302      	movs	r3, #2
 80034c0:	e01b      	b.n	80034fa <HAL_GPIO_Init+0x25a>
 80034c2:	2301      	movs	r3, #1
 80034c4:	e019      	b.n	80034fa <HAL_GPIO_Init+0x25a>
 80034c6:	bf00      	nop
 80034c8:	58000080 	.word	0x58000080
 80034cc:	58024400 	.word	0x58024400
 80034d0:	58000400 	.word	0x58000400
 80034d4:	58020000 	.word	0x58020000
 80034d8:	58020400 	.word	0x58020400
 80034dc:	58020800 	.word	0x58020800
 80034e0:	58020c00 	.word	0x58020c00
 80034e4:	58021000 	.word	0x58021000
 80034e8:	58021400 	.word	0x58021400
 80034ec:	58021800 	.word	0x58021800
 80034f0:	58021c00 	.word	0x58021c00
 80034f4:	58022400 	.word	0x58022400
 80034f8:	2300      	movs	r3, #0
 80034fa:	69fa      	ldr	r2, [r7, #28]
 80034fc:	f002 0203 	and.w	r2, r2, #3
 8003500:	0092      	lsls	r2, r2, #2
 8003502:	4093      	lsls	r3, r2
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4313      	orrs	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800350a:	4938      	ldr	r1, [pc, #224]	@ (80035ec <HAL_GPIO_Init+0x34c>)
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	089b      	lsrs	r3, r3, #2
 8003510:	3302      	adds	r3, #2
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003518:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	43db      	mvns	r3, r3
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	4013      	ands	r3, r2
 8003528:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	4313      	orrs	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800353e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003546:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	43db      	mvns	r3, r3
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	4013      	ands	r3, r2
 8003556:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d003      	beq.n	800356c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	4313      	orrs	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800356c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	43db      	mvns	r3, r3
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	4013      	ands	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	4313      	orrs	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	43db      	mvns	r3, r3
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	4013      	ands	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	4313      	orrs	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	3301      	adds	r3, #1
 80035cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	fa22 f303 	lsr.w	r3, r2, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f47f ae6b 	bne.w	80032b4 <HAL_GPIO_Init+0x14>
  }
}
 80035de:	bf00      	nop
 80035e0:	bf00      	nop
 80035e2:	3724      	adds	r7, #36	@ 0x24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	58000400 	.word	0x58000400

080035f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	460b      	mov	r3, r1
 80035fa:	807b      	strh	r3, [r7, #2]
 80035fc:	4613      	mov	r3, r2
 80035fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003600:	787b      	ldrb	r3, [r7, #1]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003606:	887a      	ldrh	r2, [r7, #2]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800360c:	e003      	b.n	8003616 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800360e:	887b      	ldrh	r3, [r7, #2]
 8003610:	041a      	lsls	r2, r3, #16
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	619a      	str	r2, [r3, #24]
}
 8003616:	bf00      	nop
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
	...

08003624 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800362c:	4b19      	ldr	r3, [pc, #100]	@ (8003694 <HAL_PWREx_ConfigSupply+0x70>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b04      	cmp	r3, #4
 8003636:	d00a      	beq.n	800364e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003638:	4b16      	ldr	r3, [pc, #88]	@ (8003694 <HAL_PWREx_ConfigSupply+0x70>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	429a      	cmp	r2, r3
 8003644:	d001      	beq.n	800364a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e01f      	b.n	800368a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800364a:	2300      	movs	r3, #0
 800364c:	e01d      	b.n	800368a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800364e:	4b11      	ldr	r3, [pc, #68]	@ (8003694 <HAL_PWREx_ConfigSupply+0x70>)
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	f023 0207 	bic.w	r2, r3, #7
 8003656:	490f      	ldr	r1, [pc, #60]	@ (8003694 <HAL_PWREx_ConfigSupply+0x70>)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4313      	orrs	r3, r2
 800365c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800365e:	f7fd ff1b 	bl	8001498 <HAL_GetTick>
 8003662:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003664:	e009      	b.n	800367a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003666:	f7fd ff17 	bl	8001498 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003674:	d901      	bls.n	800367a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e007      	b.n	800368a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800367a:	4b06      	ldr	r3, [pc, #24]	@ (8003694 <HAL_PWREx_ConfigSupply+0x70>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003682:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003686:	d1ee      	bne.n	8003666 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	58024800 	.word	0x58024800

08003698 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b08c      	sub	sp, #48	@ 0x30
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e3c8      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 8087 	beq.w	80037c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036b8:	4b88      	ldr	r3, [pc, #544]	@ (80038dc <HAL_RCC_OscConfig+0x244>)
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80036c2:	4b86      	ldr	r3, [pc, #536]	@ (80038dc <HAL_RCC_OscConfig+0x244>)
 80036c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80036c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ca:	2b10      	cmp	r3, #16
 80036cc:	d007      	beq.n	80036de <HAL_RCC_OscConfig+0x46>
 80036ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036d0:	2b18      	cmp	r3, #24
 80036d2:	d110      	bne.n	80036f6 <HAL_RCC_OscConfig+0x5e>
 80036d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d6:	f003 0303 	and.w	r3, r3, #3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d10b      	bne.n	80036f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036de:	4b7f      	ldr	r3, [pc, #508]	@ (80038dc <HAL_RCC_OscConfig+0x244>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d06c      	beq.n	80037c4 <HAL_RCC_OscConfig+0x12c>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d168      	bne.n	80037c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e3a2      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036fe:	d106      	bne.n	800370e <HAL_RCC_OscConfig+0x76>
 8003700:	4b76      	ldr	r3, [pc, #472]	@ (80038dc <HAL_RCC_OscConfig+0x244>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a75      	ldr	r2, [pc, #468]	@ (80038dc <HAL_RCC_OscConfig+0x244>)
 8003706:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800370a:	6013      	str	r3, [r2, #0]
 800370c:	e02e      	b.n	800376c <HAL_RCC_OscConfig+0xd4>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10c      	bne.n	8003730 <HAL_RCC_OscConfig+0x98>
 8003716:	4b71      	ldr	r3, [pc, #452]	@ (80038dc <HAL_RCC_OscConfig+0x244>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a70      	ldr	r2, [pc, #448]	@ (80038dc <HAL_RCC_OscConfig+0x244>)
 800371c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003720:	6013      	str	r3, [r2, #0]
 8003722:	4b6e      	ldr	r3, [pc, #440]	@ (80038dc <HAL_RCC_OscConfig+0x244>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a6d      	ldr	r2, [pc, #436]	@ (80038dc <HAL_RCC_OscConfig+0x244>)
 8003728:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800372c:	6013      	str	r3, [r2, #0]
 800372e:	e01d      	b.n	800376c <HAL_RCC_OscConfig+0xd4>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003738:	d10c      	bne.n	8003754 <HAL_RCC_OscConfig+0xbc>
 800373a:	4b68      	ldr	r3, [pc, #416]	@ (80038dc <HAL_RCC_OscConfig+0x244>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a67      	ldr	r2, [pc, #412]	@ (80038dc <HAL_RCC_OscConfig+0x244>)
 8003740:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003744:	6013      	str	r3, [r2, #0]
 8003746:	4b65      	ldr	r3, [pc, #404]	@ (80038dc <HAL_RCC_OscConfig+0x244>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a64      	ldr	r2, [pc, #400]	@ (80038dc <HAL_RCC_OscConfig+0x244>)
 800374c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003750:	6013      	str	r3, [r2, #0]
 8003752:	e00b      	b.n	800376c <HAL_RCC_OscConfig+0xd4>
 8003754:	4b61      	ldr	r3, [pc, #388]	@ (80038dc <HAL_RCC_OscConfig+0x244>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a60      	ldr	r2, [pc, #384]	@ (80038dc <HAL_RCC_OscConfig+0x244>)
 800375a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800375e:	6013      	str	r3, [r2, #0]
 8003760:	4b5e      	ldr	r3, [pc, #376]	@ (80038dc <HAL_RCC_OscConfig+0x244>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a5d      	ldr	r2, [pc, #372]	@ (80038dc <HAL_RCC_OscConfig+0x244>)
 8003766:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800376a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d013      	beq.n	800379c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003774:	f7fd fe90 	bl	8001498 <HAL_GetTick>
 8003778:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800377c:	f7fd fe8c 	bl	8001498 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b64      	cmp	r3, #100	@ 0x64
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e356      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800378e:	4b53      	ldr	r3, [pc, #332]	@ (80038dc <HAL_RCC_OscConfig+0x244>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f0      	beq.n	800377c <HAL_RCC_OscConfig+0xe4>
 800379a:	e014      	b.n	80037c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379c:	f7fd fe7c 	bl	8001498 <HAL_GetTick>
 80037a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037a4:	f7fd fe78 	bl	8001498 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b64      	cmp	r3, #100	@ 0x64
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e342      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80037b6:	4b49      	ldr	r3, [pc, #292]	@ (80038dc <HAL_RCC_OscConfig+0x244>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1f0      	bne.n	80037a4 <HAL_RCC_OscConfig+0x10c>
 80037c2:	e000      	b.n	80037c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 808c 	beq.w	80038ec <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037d4:	4b41      	ldr	r3, [pc, #260]	@ (80038dc <HAL_RCC_OscConfig+0x244>)
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80037dc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037de:	4b3f      	ldr	r3, [pc, #252]	@ (80038dc <HAL_RCC_OscConfig+0x244>)
 80037e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d007      	beq.n	80037fa <HAL_RCC_OscConfig+0x162>
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	2b18      	cmp	r3, #24
 80037ee:	d137      	bne.n	8003860 <HAL_RCC_OscConfig+0x1c8>
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d132      	bne.n	8003860 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037fa:	4b38      	ldr	r3, [pc, #224]	@ (80038dc <HAL_RCC_OscConfig+0x244>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0304 	and.w	r3, r3, #4
 8003802:	2b00      	cmp	r3, #0
 8003804:	d005      	beq.n	8003812 <HAL_RCC_OscConfig+0x17a>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e314      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003812:	4b32      	ldr	r3, [pc, #200]	@ (80038dc <HAL_RCC_OscConfig+0x244>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f023 0219 	bic.w	r2, r3, #25
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	492f      	ldr	r1, [pc, #188]	@ (80038dc <HAL_RCC_OscConfig+0x244>)
 8003820:	4313      	orrs	r3, r2
 8003822:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003824:	f7fd fe38 	bl	8001498 <HAL_GetTick>
 8003828:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800382c:	f7fd fe34 	bl	8001498 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e2fe      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800383e:	4b27      	ldr	r3, [pc, #156]	@ (80038dc <HAL_RCC_OscConfig+0x244>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0304 	and.w	r3, r3, #4
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0f0      	beq.n	800382c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800384a:	4b24      	ldr	r3, [pc, #144]	@ (80038dc <HAL_RCC_OscConfig+0x244>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	061b      	lsls	r3, r3, #24
 8003858:	4920      	ldr	r1, [pc, #128]	@ (80038dc <HAL_RCC_OscConfig+0x244>)
 800385a:	4313      	orrs	r3, r2
 800385c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800385e:	e045      	b.n	80038ec <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d026      	beq.n	80038b6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003868:	4b1c      	ldr	r3, [pc, #112]	@ (80038dc <HAL_RCC_OscConfig+0x244>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f023 0219 	bic.w	r2, r3, #25
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	4919      	ldr	r1, [pc, #100]	@ (80038dc <HAL_RCC_OscConfig+0x244>)
 8003876:	4313      	orrs	r3, r2
 8003878:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387a:	f7fd fe0d 	bl	8001498 <HAL_GetTick>
 800387e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003880:	e008      	b.n	8003894 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003882:	f7fd fe09 	bl	8001498 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e2d3      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003894:	4b11      	ldr	r3, [pc, #68]	@ (80038dc <HAL_RCC_OscConfig+0x244>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0f0      	beq.n	8003882 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a0:	4b0e      	ldr	r3, [pc, #56]	@ (80038dc <HAL_RCC_OscConfig+0x244>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	061b      	lsls	r3, r3, #24
 80038ae:	490b      	ldr	r1, [pc, #44]	@ (80038dc <HAL_RCC_OscConfig+0x244>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	604b      	str	r3, [r1, #4]
 80038b4:	e01a      	b.n	80038ec <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038b6:	4b09      	ldr	r3, [pc, #36]	@ (80038dc <HAL_RCC_OscConfig+0x244>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a08      	ldr	r2, [pc, #32]	@ (80038dc <HAL_RCC_OscConfig+0x244>)
 80038bc:	f023 0301 	bic.w	r3, r3, #1
 80038c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c2:	f7fd fde9 	bl	8001498 <HAL_GetTick>
 80038c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038c8:	e00a      	b.n	80038e0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ca:	f7fd fde5 	bl	8001498 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d903      	bls.n	80038e0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e2af      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a4>
 80038dc:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038e0:	4b96      	ldr	r3, [pc, #600]	@ (8003b3c <HAL_RCC_OscConfig+0x4a4>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1ee      	bne.n	80038ca <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0310 	and.w	r3, r3, #16
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d06a      	beq.n	80039ce <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038f8:	4b90      	ldr	r3, [pc, #576]	@ (8003b3c <HAL_RCC_OscConfig+0x4a4>)
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003900:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003902:	4b8e      	ldr	r3, [pc, #568]	@ (8003b3c <HAL_RCC_OscConfig+0x4a4>)
 8003904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003906:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	2b08      	cmp	r3, #8
 800390c:	d007      	beq.n	800391e <HAL_RCC_OscConfig+0x286>
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	2b18      	cmp	r3, #24
 8003912:	d11b      	bne.n	800394c <HAL_RCC_OscConfig+0x2b4>
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	2b01      	cmp	r3, #1
 800391c:	d116      	bne.n	800394c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800391e:	4b87      	ldr	r3, [pc, #540]	@ (8003b3c <HAL_RCC_OscConfig+0x4a4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003926:	2b00      	cmp	r3, #0
 8003928:	d005      	beq.n	8003936 <HAL_RCC_OscConfig+0x29e>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	2b80      	cmp	r3, #128	@ 0x80
 8003930:	d001      	beq.n	8003936 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e282      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003936:	4b81      	ldr	r3, [pc, #516]	@ (8003b3c <HAL_RCC_OscConfig+0x4a4>)
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	061b      	lsls	r3, r3, #24
 8003944:	497d      	ldr	r1, [pc, #500]	@ (8003b3c <HAL_RCC_OscConfig+0x4a4>)
 8003946:	4313      	orrs	r3, r2
 8003948:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800394a:	e040      	b.n	80039ce <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	69db      	ldr	r3, [r3, #28]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d023      	beq.n	800399c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003954:	4b79      	ldr	r3, [pc, #484]	@ (8003b3c <HAL_RCC_OscConfig+0x4a4>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a78      	ldr	r2, [pc, #480]	@ (8003b3c <HAL_RCC_OscConfig+0x4a4>)
 800395a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800395e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003960:	f7fd fd9a 	bl	8001498 <HAL_GetTick>
 8003964:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003968:	f7fd fd96 	bl	8001498 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e260      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800397a:	4b70      	ldr	r3, [pc, #448]	@ (8003b3c <HAL_RCC_OscConfig+0x4a4>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0f0      	beq.n	8003968 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003986:	4b6d      	ldr	r3, [pc, #436]	@ (8003b3c <HAL_RCC_OscConfig+0x4a4>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	061b      	lsls	r3, r3, #24
 8003994:	4969      	ldr	r1, [pc, #420]	@ (8003b3c <HAL_RCC_OscConfig+0x4a4>)
 8003996:	4313      	orrs	r3, r2
 8003998:	60cb      	str	r3, [r1, #12]
 800399a:	e018      	b.n	80039ce <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800399c:	4b67      	ldr	r3, [pc, #412]	@ (8003b3c <HAL_RCC_OscConfig+0x4a4>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a66      	ldr	r2, [pc, #408]	@ (8003b3c <HAL_RCC_OscConfig+0x4a4>)
 80039a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a8:	f7fd fd76 	bl	8001498 <HAL_GetTick>
 80039ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80039b0:	f7fd fd72 	bl	8001498 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e23c      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80039c2:	4b5e      	ldr	r3, [pc, #376]	@ (8003b3c <HAL_RCC_OscConfig+0x4a4>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1f0      	bne.n	80039b0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d036      	beq.n	8003a48 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d019      	beq.n	8003a16 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039e2:	4b56      	ldr	r3, [pc, #344]	@ (8003b3c <HAL_RCC_OscConfig+0x4a4>)
 80039e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039e6:	4a55      	ldr	r2, [pc, #340]	@ (8003b3c <HAL_RCC_OscConfig+0x4a4>)
 80039e8:	f043 0301 	orr.w	r3, r3, #1
 80039ec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ee:	f7fd fd53 	bl	8001498 <HAL_GetTick>
 80039f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039f4:	e008      	b.n	8003a08 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039f6:	f7fd fd4f 	bl	8001498 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d901      	bls.n	8003a08 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e219      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a08:	4b4c      	ldr	r3, [pc, #304]	@ (8003b3c <HAL_RCC_OscConfig+0x4a4>)
 8003a0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d0f0      	beq.n	80039f6 <HAL_RCC_OscConfig+0x35e>
 8003a14:	e018      	b.n	8003a48 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a16:	4b49      	ldr	r3, [pc, #292]	@ (8003b3c <HAL_RCC_OscConfig+0x4a4>)
 8003a18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a1a:	4a48      	ldr	r2, [pc, #288]	@ (8003b3c <HAL_RCC_OscConfig+0x4a4>)
 8003a1c:	f023 0301 	bic.w	r3, r3, #1
 8003a20:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a22:	f7fd fd39 	bl	8001498 <HAL_GetTick>
 8003a26:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a28:	e008      	b.n	8003a3c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a2a:	f7fd fd35 	bl	8001498 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e1ff      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a3c:	4b3f      	ldr	r3, [pc, #252]	@ (8003b3c <HAL_RCC_OscConfig+0x4a4>)
 8003a3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1f0      	bne.n	8003a2a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0320 	and.w	r3, r3, #32
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d036      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d019      	beq.n	8003a90 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a5c:	4b37      	ldr	r3, [pc, #220]	@ (8003b3c <HAL_RCC_OscConfig+0x4a4>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a36      	ldr	r2, [pc, #216]	@ (8003b3c <HAL_RCC_OscConfig+0x4a4>)
 8003a62:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003a66:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a68:	f7fd fd16 	bl	8001498 <HAL_GetTick>
 8003a6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a70:	f7fd fd12 	bl	8001498 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e1dc      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a82:	4b2e      	ldr	r3, [pc, #184]	@ (8003b3c <HAL_RCC_OscConfig+0x4a4>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0f0      	beq.n	8003a70 <HAL_RCC_OscConfig+0x3d8>
 8003a8e:	e018      	b.n	8003ac2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a90:	4b2a      	ldr	r3, [pc, #168]	@ (8003b3c <HAL_RCC_OscConfig+0x4a4>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a29      	ldr	r2, [pc, #164]	@ (8003b3c <HAL_RCC_OscConfig+0x4a4>)
 8003a96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a9a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a9c:	f7fd fcfc 	bl	8001498 <HAL_GetTick>
 8003aa0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003aa4:	f7fd fcf8 	bl	8001498 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e1c2      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ab6:	4b21      	ldr	r3, [pc, #132]	@ (8003b3c <HAL_RCC_OscConfig+0x4a4>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1f0      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0304 	and.w	r3, r3, #4
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 8086 	beq.w	8003bdc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8003b40 <HAL_RCC_OscConfig+0x4a8>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a1a      	ldr	r2, [pc, #104]	@ (8003b40 <HAL_RCC_OscConfig+0x4a8>)
 8003ad6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ada:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003adc:	f7fd fcdc 	bl	8001498 <HAL_GetTick>
 8003ae0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ae4:	f7fd fcd8 	bl	8001498 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b64      	cmp	r3, #100	@ 0x64
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e1a2      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003af6:	4b12      	ldr	r3, [pc, #72]	@ (8003b40 <HAL_RCC_OscConfig+0x4a8>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0f0      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d106      	bne.n	8003b18 <HAL_RCC_OscConfig+0x480>
 8003b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8003b3c <HAL_RCC_OscConfig+0x4a4>)
 8003b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b0e:	4a0b      	ldr	r2, [pc, #44]	@ (8003b3c <HAL_RCC_OscConfig+0x4a4>)
 8003b10:	f043 0301 	orr.w	r3, r3, #1
 8003b14:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b16:	e032      	b.n	8003b7e <HAL_RCC_OscConfig+0x4e6>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d111      	bne.n	8003b44 <HAL_RCC_OscConfig+0x4ac>
 8003b20:	4b06      	ldr	r3, [pc, #24]	@ (8003b3c <HAL_RCC_OscConfig+0x4a4>)
 8003b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b24:	4a05      	ldr	r2, [pc, #20]	@ (8003b3c <HAL_RCC_OscConfig+0x4a4>)
 8003b26:	f023 0301 	bic.w	r3, r3, #1
 8003b2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b2c:	4b03      	ldr	r3, [pc, #12]	@ (8003b3c <HAL_RCC_OscConfig+0x4a4>)
 8003b2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b30:	4a02      	ldr	r2, [pc, #8]	@ (8003b3c <HAL_RCC_OscConfig+0x4a4>)
 8003b32:	f023 0304 	bic.w	r3, r3, #4
 8003b36:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b38:	e021      	b.n	8003b7e <HAL_RCC_OscConfig+0x4e6>
 8003b3a:	bf00      	nop
 8003b3c:	58024400 	.word	0x58024400
 8003b40:	58024800 	.word	0x58024800
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	2b05      	cmp	r3, #5
 8003b4a:	d10c      	bne.n	8003b66 <HAL_RCC_OscConfig+0x4ce>
 8003b4c:	4b83      	ldr	r3, [pc, #524]	@ (8003d5c <HAL_RCC_OscConfig+0x6c4>)
 8003b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b50:	4a82      	ldr	r2, [pc, #520]	@ (8003d5c <HAL_RCC_OscConfig+0x6c4>)
 8003b52:	f043 0304 	orr.w	r3, r3, #4
 8003b56:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b58:	4b80      	ldr	r3, [pc, #512]	@ (8003d5c <HAL_RCC_OscConfig+0x6c4>)
 8003b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5c:	4a7f      	ldr	r2, [pc, #508]	@ (8003d5c <HAL_RCC_OscConfig+0x6c4>)
 8003b5e:	f043 0301 	orr.w	r3, r3, #1
 8003b62:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b64:	e00b      	b.n	8003b7e <HAL_RCC_OscConfig+0x4e6>
 8003b66:	4b7d      	ldr	r3, [pc, #500]	@ (8003d5c <HAL_RCC_OscConfig+0x6c4>)
 8003b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b6a:	4a7c      	ldr	r2, [pc, #496]	@ (8003d5c <HAL_RCC_OscConfig+0x6c4>)
 8003b6c:	f023 0301 	bic.w	r3, r3, #1
 8003b70:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b72:	4b7a      	ldr	r3, [pc, #488]	@ (8003d5c <HAL_RCC_OscConfig+0x6c4>)
 8003b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b76:	4a79      	ldr	r2, [pc, #484]	@ (8003d5c <HAL_RCC_OscConfig+0x6c4>)
 8003b78:	f023 0304 	bic.w	r3, r3, #4
 8003b7c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d015      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b86:	f7fd fc87 	bl	8001498 <HAL_GetTick>
 8003b8a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b8c:	e00a      	b.n	8003ba4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b8e:	f7fd fc83 	bl	8001498 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e14b      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ba4:	4b6d      	ldr	r3, [pc, #436]	@ (8003d5c <HAL_RCC_OscConfig+0x6c4>)
 8003ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0ee      	beq.n	8003b8e <HAL_RCC_OscConfig+0x4f6>
 8003bb0:	e014      	b.n	8003bdc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb2:	f7fd fc71 	bl	8001498 <HAL_GetTick>
 8003bb6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003bb8:	e00a      	b.n	8003bd0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bba:	f7fd fc6d 	bl	8001498 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e135      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003bd0:	4b62      	ldr	r3, [pc, #392]	@ (8003d5c <HAL_RCC_OscConfig+0x6c4>)
 8003bd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1ee      	bne.n	8003bba <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 812a 	beq.w	8003e3a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003be6:	4b5d      	ldr	r3, [pc, #372]	@ (8003d5c <HAL_RCC_OscConfig+0x6c4>)
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bee:	2b18      	cmp	r3, #24
 8003bf0:	f000 80ba 	beq.w	8003d68 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	f040 8095 	bne.w	8003d28 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bfe:	4b57      	ldr	r3, [pc, #348]	@ (8003d5c <HAL_RCC_OscConfig+0x6c4>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a56      	ldr	r2, [pc, #344]	@ (8003d5c <HAL_RCC_OscConfig+0x6c4>)
 8003c04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0a:	f7fd fc45 	bl	8001498 <HAL_GetTick>
 8003c0e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c10:	e008      	b.n	8003c24 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c12:	f7fd fc41 	bl	8001498 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e10b      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c24:	4b4d      	ldr	r3, [pc, #308]	@ (8003d5c <HAL_RCC_OscConfig+0x6c4>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1f0      	bne.n	8003c12 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c30:	4b4a      	ldr	r3, [pc, #296]	@ (8003d5c <HAL_RCC_OscConfig+0x6c4>)
 8003c32:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c34:	4b4a      	ldr	r3, [pc, #296]	@ (8003d60 <HAL_RCC_OscConfig+0x6c8>)
 8003c36:	4013      	ands	r3, r2
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003c40:	0112      	lsls	r2, r2, #4
 8003c42:	430a      	orrs	r2, r1
 8003c44:	4945      	ldr	r1, [pc, #276]	@ (8003d5c <HAL_RCC_OscConfig+0x6c4>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	628b      	str	r3, [r1, #40]	@ 0x28
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	025b      	lsls	r3, r3, #9
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c64:	3b01      	subs	r3, #1
 8003c66:	041b      	lsls	r3, r3, #16
 8003c68:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c72:	3b01      	subs	r3, #1
 8003c74:	061b      	lsls	r3, r3, #24
 8003c76:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003c7a:	4938      	ldr	r1, [pc, #224]	@ (8003d5c <HAL_RCC_OscConfig+0x6c4>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003c80:	4b36      	ldr	r3, [pc, #216]	@ (8003d5c <HAL_RCC_OscConfig+0x6c4>)
 8003c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c84:	4a35      	ldr	r2, [pc, #212]	@ (8003d5c <HAL_RCC_OscConfig+0x6c4>)
 8003c86:	f023 0301 	bic.w	r3, r3, #1
 8003c8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003c8c:	4b33      	ldr	r3, [pc, #204]	@ (8003d5c <HAL_RCC_OscConfig+0x6c4>)
 8003c8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c90:	4b34      	ldr	r3, [pc, #208]	@ (8003d64 <HAL_RCC_OscConfig+0x6cc>)
 8003c92:	4013      	ands	r3, r2
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003c98:	00d2      	lsls	r2, r2, #3
 8003c9a:	4930      	ldr	r1, [pc, #192]	@ (8003d5c <HAL_RCC_OscConfig+0x6c4>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003ca0:	4b2e      	ldr	r3, [pc, #184]	@ (8003d5c <HAL_RCC_OscConfig+0x6c4>)
 8003ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca4:	f023 020c 	bic.w	r2, r3, #12
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cac:	492b      	ldr	r1, [pc, #172]	@ (8003d5c <HAL_RCC_OscConfig+0x6c4>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003cb2:	4b2a      	ldr	r3, [pc, #168]	@ (8003d5c <HAL_RCC_OscConfig+0x6c4>)
 8003cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb6:	f023 0202 	bic.w	r2, r3, #2
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cbe:	4927      	ldr	r1, [pc, #156]	@ (8003d5c <HAL_RCC_OscConfig+0x6c4>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003cc4:	4b25      	ldr	r3, [pc, #148]	@ (8003d5c <HAL_RCC_OscConfig+0x6c4>)
 8003cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc8:	4a24      	ldr	r2, [pc, #144]	@ (8003d5c <HAL_RCC_OscConfig+0x6c4>)
 8003cca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cd0:	4b22      	ldr	r3, [pc, #136]	@ (8003d5c <HAL_RCC_OscConfig+0x6c4>)
 8003cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd4:	4a21      	ldr	r2, [pc, #132]	@ (8003d5c <HAL_RCC_OscConfig+0x6c4>)
 8003cd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003cdc:	4b1f      	ldr	r3, [pc, #124]	@ (8003d5c <HAL_RCC_OscConfig+0x6c4>)
 8003cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce0:	4a1e      	ldr	r2, [pc, #120]	@ (8003d5c <HAL_RCC_OscConfig+0x6c4>)
 8003ce2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ce6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003ce8:	4b1c      	ldr	r3, [pc, #112]	@ (8003d5c <HAL_RCC_OscConfig+0x6c4>)
 8003cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cec:	4a1b      	ldr	r2, [pc, #108]	@ (8003d5c <HAL_RCC_OscConfig+0x6c4>)
 8003cee:	f043 0301 	orr.w	r3, r3, #1
 8003cf2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cf4:	4b19      	ldr	r3, [pc, #100]	@ (8003d5c <HAL_RCC_OscConfig+0x6c4>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a18      	ldr	r2, [pc, #96]	@ (8003d5c <HAL_RCC_OscConfig+0x6c4>)
 8003cfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d00:	f7fd fbca 	bl	8001498 <HAL_GetTick>
 8003d04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d08:	f7fd fbc6 	bl	8001498 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e090      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d1a:	4b10      	ldr	r3, [pc, #64]	@ (8003d5c <HAL_RCC_OscConfig+0x6c4>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d0f0      	beq.n	8003d08 <HAL_RCC_OscConfig+0x670>
 8003d26:	e088      	b.n	8003e3a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d28:	4b0c      	ldr	r3, [pc, #48]	@ (8003d5c <HAL_RCC_OscConfig+0x6c4>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a0b      	ldr	r2, [pc, #44]	@ (8003d5c <HAL_RCC_OscConfig+0x6c4>)
 8003d2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d34:	f7fd fbb0 	bl	8001498 <HAL_GetTick>
 8003d38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d3c:	f7fd fbac 	bl	8001498 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e076      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d4e:	4b03      	ldr	r3, [pc, #12]	@ (8003d5c <HAL_RCC_OscConfig+0x6c4>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1f0      	bne.n	8003d3c <HAL_RCC_OscConfig+0x6a4>
 8003d5a:	e06e      	b.n	8003e3a <HAL_RCC_OscConfig+0x7a2>
 8003d5c:	58024400 	.word	0x58024400
 8003d60:	fffffc0c 	.word	0xfffffc0c
 8003d64:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003d68:	4b36      	ldr	r3, [pc, #216]	@ (8003e44 <HAL_RCC_OscConfig+0x7ac>)
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d6c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003d6e:	4b35      	ldr	r3, [pc, #212]	@ (8003e44 <HAL_RCC_OscConfig+0x7ac>)
 8003d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d72:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d031      	beq.n	8003de0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	f003 0203 	and.w	r2, r3, #3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d12a      	bne.n	8003de0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	091b      	lsrs	r3, r3, #4
 8003d8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d122      	bne.n	8003de0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d11a      	bne.n	8003de0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	0a5b      	lsrs	r3, r3, #9
 8003dae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003db6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d111      	bne.n	8003de0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	0c1b      	lsrs	r3, r3, #16
 8003dc0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d108      	bne.n	8003de0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	0e1b      	lsrs	r3, r3, #24
 8003dd2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dda:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d001      	beq.n	8003de4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e02b      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003de4:	4b17      	ldr	r3, [pc, #92]	@ (8003e44 <HAL_RCC_OscConfig+0x7ac>)
 8003de6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003de8:	08db      	lsrs	r3, r3, #3
 8003dea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003dee:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d01f      	beq.n	8003e3a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003dfa:	4b12      	ldr	r3, [pc, #72]	@ (8003e44 <HAL_RCC_OscConfig+0x7ac>)
 8003dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dfe:	4a11      	ldr	r2, [pc, #68]	@ (8003e44 <HAL_RCC_OscConfig+0x7ac>)
 8003e00:	f023 0301 	bic.w	r3, r3, #1
 8003e04:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e06:	f7fd fb47 	bl	8001498 <HAL_GetTick>
 8003e0a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003e0c:	bf00      	nop
 8003e0e:	f7fd fb43 	bl	8001498 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d0f9      	beq.n	8003e0e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e44 <HAL_RCC_OscConfig+0x7ac>)
 8003e1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e48 <HAL_RCC_OscConfig+0x7b0>)
 8003e20:	4013      	ands	r3, r2
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003e26:	00d2      	lsls	r2, r2, #3
 8003e28:	4906      	ldr	r1, [pc, #24]	@ (8003e44 <HAL_RCC_OscConfig+0x7ac>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003e2e:	4b05      	ldr	r3, [pc, #20]	@ (8003e44 <HAL_RCC_OscConfig+0x7ac>)
 8003e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e32:	4a04      	ldr	r2, [pc, #16]	@ (8003e44 <HAL_RCC_OscConfig+0x7ac>)
 8003e34:	f043 0301 	orr.w	r3, r3, #1
 8003e38:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3730      	adds	r7, #48	@ 0x30
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	58024400 	.word	0x58024400
 8003e48:	ffff0007 	.word	0xffff0007

08003e4c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e19c      	b.n	800419a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e60:	4b8a      	ldr	r3, [pc, #552]	@ (800408c <HAL_RCC_ClockConfig+0x240>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 030f 	and.w	r3, r3, #15
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d910      	bls.n	8003e90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e6e:	4b87      	ldr	r3, [pc, #540]	@ (800408c <HAL_RCC_ClockConfig+0x240>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f023 020f 	bic.w	r2, r3, #15
 8003e76:	4985      	ldr	r1, [pc, #532]	@ (800408c <HAL_RCC_ClockConfig+0x240>)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e7e:	4b83      	ldr	r3, [pc, #524]	@ (800408c <HAL_RCC_ClockConfig+0x240>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d001      	beq.n	8003e90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e184      	b.n	800419a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d010      	beq.n	8003ebe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	691a      	ldr	r2, [r3, #16]
 8003ea0:	4b7b      	ldr	r3, [pc, #492]	@ (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d908      	bls.n	8003ebe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003eac:	4b78      	ldr	r3, [pc, #480]	@ (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	4975      	ldr	r1, [pc, #468]	@ (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0308 	and.w	r3, r3, #8
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d010      	beq.n	8003eec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	695a      	ldr	r2, [r3, #20]
 8003ece:	4b70      	ldr	r3, [pc, #448]	@ (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003ed0:	69db      	ldr	r3, [r3, #28]
 8003ed2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d908      	bls.n	8003eec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003eda:	4b6d      	ldr	r3, [pc, #436]	@ (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	496a      	ldr	r1, [pc, #424]	@ (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0310 	and.w	r3, r3, #16
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d010      	beq.n	8003f1a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	699a      	ldr	r2, [r3, #24]
 8003efc:	4b64      	ldr	r3, [pc, #400]	@ (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d908      	bls.n	8003f1a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f08:	4b61      	ldr	r3, [pc, #388]	@ (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	495e      	ldr	r1, [pc, #376]	@ (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0320 	and.w	r3, r3, #32
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d010      	beq.n	8003f48 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	69da      	ldr	r2, [r3, #28]
 8003f2a:	4b59      	ldr	r3, [pc, #356]	@ (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d908      	bls.n	8003f48 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003f36:	4b56      	ldr	r3, [pc, #344]	@ (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	4953      	ldr	r1, [pc, #332]	@ (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d010      	beq.n	8003f76 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68da      	ldr	r2, [r3, #12]
 8003f58:	4b4d      	ldr	r3, [pc, #308]	@ (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	f003 030f 	and.w	r3, r3, #15
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d908      	bls.n	8003f76 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f64:	4b4a      	ldr	r3, [pc, #296]	@ (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	f023 020f 	bic.w	r2, r3, #15
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	4947      	ldr	r1, [pc, #284]	@ (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d055      	beq.n	800402e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003f82:	4b43      	ldr	r3, [pc, #268]	@ (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	4940      	ldr	r1, [pc, #256]	@ (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d107      	bne.n	8003fac <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f9c:	4b3c      	ldr	r3, [pc, #240]	@ (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d121      	bne.n	8003fec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e0f6      	b.n	800419a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	2b03      	cmp	r3, #3
 8003fb2:	d107      	bne.n	8003fc4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fb4:	4b36      	ldr	r3, [pc, #216]	@ (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d115      	bne.n	8003fec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e0ea      	b.n	800419a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d107      	bne.n	8003fdc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003fcc:	4b30      	ldr	r3, [pc, #192]	@ (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d109      	bne.n	8003fec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e0de      	b.n	800419a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fdc:	4b2c      	ldr	r3, [pc, #176]	@ (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0304 	and.w	r3, r3, #4
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d101      	bne.n	8003fec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e0d6      	b.n	800419a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fec:	4b28      	ldr	r3, [pc, #160]	@ (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	f023 0207 	bic.w	r2, r3, #7
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	4925      	ldr	r1, [pc, #148]	@ (8004090 <HAL_RCC_ClockConfig+0x244>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ffe:	f7fd fa4b 	bl	8001498 <HAL_GetTick>
 8004002:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004004:	e00a      	b.n	800401c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004006:	f7fd fa47 	bl	8001498 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004014:	4293      	cmp	r3, r2
 8004016:	d901      	bls.n	800401c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e0be      	b.n	800419a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800401c:	4b1c      	ldr	r3, [pc, #112]	@ (8004090 <HAL_RCC_ClockConfig+0x244>)
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	00db      	lsls	r3, r3, #3
 800402a:	429a      	cmp	r2, r3
 800402c:	d1eb      	bne.n	8004006 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d010      	beq.n	800405c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68da      	ldr	r2, [r3, #12]
 800403e:	4b14      	ldr	r3, [pc, #80]	@ (8004090 <HAL_RCC_ClockConfig+0x244>)
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	f003 030f 	and.w	r3, r3, #15
 8004046:	429a      	cmp	r2, r3
 8004048:	d208      	bcs.n	800405c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800404a:	4b11      	ldr	r3, [pc, #68]	@ (8004090 <HAL_RCC_ClockConfig+0x244>)
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	f023 020f 	bic.w	r2, r3, #15
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	490e      	ldr	r1, [pc, #56]	@ (8004090 <HAL_RCC_ClockConfig+0x244>)
 8004058:	4313      	orrs	r3, r2
 800405a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800405c:	4b0b      	ldr	r3, [pc, #44]	@ (800408c <HAL_RCC_ClockConfig+0x240>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 030f 	and.w	r3, r3, #15
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	429a      	cmp	r2, r3
 8004068:	d214      	bcs.n	8004094 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800406a:	4b08      	ldr	r3, [pc, #32]	@ (800408c <HAL_RCC_ClockConfig+0x240>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f023 020f 	bic.w	r2, r3, #15
 8004072:	4906      	ldr	r1, [pc, #24]	@ (800408c <HAL_RCC_ClockConfig+0x240>)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	4313      	orrs	r3, r2
 8004078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800407a:	4b04      	ldr	r3, [pc, #16]	@ (800408c <HAL_RCC_ClockConfig+0x240>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 030f 	and.w	r3, r3, #15
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	429a      	cmp	r2, r3
 8004086:	d005      	beq.n	8004094 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e086      	b.n	800419a <HAL_RCC_ClockConfig+0x34e>
 800408c:	52002000 	.word	0x52002000
 8004090:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b00      	cmp	r3, #0
 800409e:	d010      	beq.n	80040c2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691a      	ldr	r2, [r3, #16]
 80040a4:	4b3f      	ldr	r3, [pc, #252]	@ (80041a4 <HAL_RCC_ClockConfig+0x358>)
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d208      	bcs.n	80040c2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80040b0:	4b3c      	ldr	r3, [pc, #240]	@ (80041a4 <HAL_RCC_ClockConfig+0x358>)
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	4939      	ldr	r1, [pc, #228]	@ (80041a4 <HAL_RCC_ClockConfig+0x358>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0308 	and.w	r3, r3, #8
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d010      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	695a      	ldr	r2, [r3, #20]
 80040d2:	4b34      	ldr	r3, [pc, #208]	@ (80041a4 <HAL_RCC_ClockConfig+0x358>)
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040da:	429a      	cmp	r2, r3
 80040dc:	d208      	bcs.n	80040f0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80040de:	4b31      	ldr	r3, [pc, #196]	@ (80041a4 <HAL_RCC_ClockConfig+0x358>)
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	492e      	ldr	r1, [pc, #184]	@ (80041a4 <HAL_RCC_ClockConfig+0x358>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0310 	and.w	r3, r3, #16
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d010      	beq.n	800411e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	699a      	ldr	r2, [r3, #24]
 8004100:	4b28      	ldr	r3, [pc, #160]	@ (80041a4 <HAL_RCC_ClockConfig+0x358>)
 8004102:	69db      	ldr	r3, [r3, #28]
 8004104:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004108:	429a      	cmp	r2, r3
 800410a:	d208      	bcs.n	800411e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800410c:	4b25      	ldr	r3, [pc, #148]	@ (80041a4 <HAL_RCC_ClockConfig+0x358>)
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	4922      	ldr	r1, [pc, #136]	@ (80041a4 <HAL_RCC_ClockConfig+0x358>)
 800411a:	4313      	orrs	r3, r2
 800411c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0320 	and.w	r3, r3, #32
 8004126:	2b00      	cmp	r3, #0
 8004128:	d010      	beq.n	800414c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	69da      	ldr	r2, [r3, #28]
 800412e:	4b1d      	ldr	r3, [pc, #116]	@ (80041a4 <HAL_RCC_ClockConfig+0x358>)
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004136:	429a      	cmp	r2, r3
 8004138:	d208      	bcs.n	800414c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800413a:	4b1a      	ldr	r3, [pc, #104]	@ (80041a4 <HAL_RCC_ClockConfig+0x358>)
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	4917      	ldr	r1, [pc, #92]	@ (80041a4 <HAL_RCC_ClockConfig+0x358>)
 8004148:	4313      	orrs	r3, r2
 800414a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800414c:	f000 f834 	bl	80041b8 <HAL_RCC_GetSysClockFreq>
 8004150:	4602      	mov	r2, r0
 8004152:	4b14      	ldr	r3, [pc, #80]	@ (80041a4 <HAL_RCC_ClockConfig+0x358>)
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	0a1b      	lsrs	r3, r3, #8
 8004158:	f003 030f 	and.w	r3, r3, #15
 800415c:	4912      	ldr	r1, [pc, #72]	@ (80041a8 <HAL_RCC_ClockConfig+0x35c>)
 800415e:	5ccb      	ldrb	r3, [r1, r3]
 8004160:	f003 031f 	and.w	r3, r3, #31
 8004164:	fa22 f303 	lsr.w	r3, r2, r3
 8004168:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800416a:	4b0e      	ldr	r3, [pc, #56]	@ (80041a4 <HAL_RCC_ClockConfig+0x358>)
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	4a0d      	ldr	r2, [pc, #52]	@ (80041a8 <HAL_RCC_ClockConfig+0x35c>)
 8004174:	5cd3      	ldrb	r3, [r2, r3]
 8004176:	f003 031f 	and.w	r3, r3, #31
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	fa22 f303 	lsr.w	r3, r2, r3
 8004180:	4a0a      	ldr	r2, [pc, #40]	@ (80041ac <HAL_RCC_ClockConfig+0x360>)
 8004182:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004184:	4a0a      	ldr	r2, [pc, #40]	@ (80041b0 <HAL_RCC_ClockConfig+0x364>)
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800418a:	4b0a      	ldr	r3, [pc, #40]	@ (80041b4 <HAL_RCC_ClockConfig+0x368>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f7fc fb36 	bl	8000800 <HAL_InitTick>
 8004194:	4603      	mov	r3, r0
 8004196:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004198:	7bfb      	ldrb	r3, [r7, #15]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3718      	adds	r7, #24
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	58024400 	.word	0x58024400
 80041a8:	0801b0a0 	.word	0x0801b0a0
 80041ac:	24000004 	.word	0x24000004
 80041b0:	24000000 	.word	0x24000000
 80041b4:	24000008 	.word	0x24000008

080041b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b089      	sub	sp, #36	@ 0x24
 80041bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041be:	4bb3      	ldr	r3, [pc, #716]	@ (800448c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041c6:	2b18      	cmp	r3, #24
 80041c8:	f200 8155 	bhi.w	8004476 <HAL_RCC_GetSysClockFreq+0x2be>
 80041cc:	a201      	add	r2, pc, #4	@ (adr r2, 80041d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80041ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d2:	bf00      	nop
 80041d4:	08004239 	.word	0x08004239
 80041d8:	08004477 	.word	0x08004477
 80041dc:	08004477 	.word	0x08004477
 80041e0:	08004477 	.word	0x08004477
 80041e4:	08004477 	.word	0x08004477
 80041e8:	08004477 	.word	0x08004477
 80041ec:	08004477 	.word	0x08004477
 80041f0:	08004477 	.word	0x08004477
 80041f4:	0800425f 	.word	0x0800425f
 80041f8:	08004477 	.word	0x08004477
 80041fc:	08004477 	.word	0x08004477
 8004200:	08004477 	.word	0x08004477
 8004204:	08004477 	.word	0x08004477
 8004208:	08004477 	.word	0x08004477
 800420c:	08004477 	.word	0x08004477
 8004210:	08004477 	.word	0x08004477
 8004214:	08004265 	.word	0x08004265
 8004218:	08004477 	.word	0x08004477
 800421c:	08004477 	.word	0x08004477
 8004220:	08004477 	.word	0x08004477
 8004224:	08004477 	.word	0x08004477
 8004228:	08004477 	.word	0x08004477
 800422c:	08004477 	.word	0x08004477
 8004230:	08004477 	.word	0x08004477
 8004234:	0800426b 	.word	0x0800426b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004238:	4b94      	ldr	r3, [pc, #592]	@ (800448c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0320 	and.w	r3, r3, #32
 8004240:	2b00      	cmp	r3, #0
 8004242:	d009      	beq.n	8004258 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004244:	4b91      	ldr	r3, [pc, #580]	@ (800448c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	08db      	lsrs	r3, r3, #3
 800424a:	f003 0303 	and.w	r3, r3, #3
 800424e:	4a90      	ldr	r2, [pc, #576]	@ (8004490 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004250:	fa22 f303 	lsr.w	r3, r2, r3
 8004254:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004256:	e111      	b.n	800447c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004258:	4b8d      	ldr	r3, [pc, #564]	@ (8004490 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800425a:	61bb      	str	r3, [r7, #24]
      break;
 800425c:	e10e      	b.n	800447c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800425e:	4b8d      	ldr	r3, [pc, #564]	@ (8004494 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004260:	61bb      	str	r3, [r7, #24]
      break;
 8004262:	e10b      	b.n	800447c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004264:	4b8c      	ldr	r3, [pc, #560]	@ (8004498 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004266:	61bb      	str	r3, [r7, #24]
      break;
 8004268:	e108      	b.n	800447c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800426a:	4b88      	ldr	r3, [pc, #544]	@ (800448c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800426c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800426e:	f003 0303 	and.w	r3, r3, #3
 8004272:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004274:	4b85      	ldr	r3, [pc, #532]	@ (800448c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004278:	091b      	lsrs	r3, r3, #4
 800427a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800427e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004280:	4b82      	ldr	r3, [pc, #520]	@ (800448c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800428a:	4b80      	ldr	r3, [pc, #512]	@ (800448c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800428c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800428e:	08db      	lsrs	r3, r3, #3
 8004290:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	fb02 f303 	mul.w	r3, r2, r3
 800429a:	ee07 3a90 	vmov	s15, r3
 800429e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042a2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 80e1 	beq.w	8004470 <HAL_RCC_GetSysClockFreq+0x2b8>
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	f000 8083 	beq.w	80043bc <HAL_RCC_GetSysClockFreq+0x204>
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	f200 80a1 	bhi.w	8004400 <HAL_RCC_GetSysClockFreq+0x248>
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d003      	beq.n	80042cc <HAL_RCC_GetSysClockFreq+0x114>
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d056      	beq.n	8004378 <HAL_RCC_GetSysClockFreq+0x1c0>
 80042ca:	e099      	b.n	8004400 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042cc:	4b6f      	ldr	r3, [pc, #444]	@ (800448c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0320 	and.w	r3, r3, #32
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d02d      	beq.n	8004334 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80042d8:	4b6c      	ldr	r3, [pc, #432]	@ (800448c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	08db      	lsrs	r3, r3, #3
 80042de:	f003 0303 	and.w	r3, r3, #3
 80042e2:	4a6b      	ldr	r2, [pc, #428]	@ (8004490 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042e4:	fa22 f303 	lsr.w	r3, r2, r3
 80042e8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	ee07 3a90 	vmov	s15, r3
 80042f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	ee07 3a90 	vmov	s15, r3
 80042fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004302:	4b62      	ldr	r3, [pc, #392]	@ (800448c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800430a:	ee07 3a90 	vmov	s15, r3
 800430e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004312:	ed97 6a02 	vldr	s12, [r7, #8]
 8004316:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800449c <HAL_RCC_GetSysClockFreq+0x2e4>
 800431a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800431e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004322:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800432a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800432e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004332:	e087      	b.n	8004444 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	ee07 3a90 	vmov	s15, r3
 800433a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800433e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80044a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004346:	4b51      	ldr	r3, [pc, #324]	@ (800448c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800434e:	ee07 3a90 	vmov	s15, r3
 8004352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004356:	ed97 6a02 	vldr	s12, [r7, #8]
 800435a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800449c <HAL_RCC_GetSysClockFreq+0x2e4>
 800435e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004366:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800436a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800436e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004372:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004376:	e065      	b.n	8004444 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	ee07 3a90 	vmov	s15, r3
 800437e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004382:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80044a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800438a:	4b40      	ldr	r3, [pc, #256]	@ (800448c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800438c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004392:	ee07 3a90 	vmov	s15, r3
 8004396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800439a:	ed97 6a02 	vldr	s12, [r7, #8]
 800439e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800449c <HAL_RCC_GetSysClockFreq+0x2e4>
 80043a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80043ba:	e043      	b.n	8004444 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	ee07 3a90 	vmov	s15, r3
 80043c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043c6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80044a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80043ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ce:	4b2f      	ldr	r3, [pc, #188]	@ (800448c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043d6:	ee07 3a90 	vmov	s15, r3
 80043da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043de:	ed97 6a02 	vldr	s12, [r7, #8]
 80043e2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800449c <HAL_RCC_GetSysClockFreq+0x2e4>
 80043e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80043fe:	e021      	b.n	8004444 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	ee07 3a90 	vmov	s15, r3
 8004406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800440a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80044a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800440e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004412:	4b1e      	ldr	r3, [pc, #120]	@ (800448c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800441a:	ee07 3a90 	vmov	s15, r3
 800441e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004422:	ed97 6a02 	vldr	s12, [r7, #8]
 8004426:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800449c <HAL_RCC_GetSysClockFreq+0x2e4>
 800442a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800442e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004432:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800443a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800443e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004442:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004444:	4b11      	ldr	r3, [pc, #68]	@ (800448c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004448:	0a5b      	lsrs	r3, r3, #9
 800444a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800444e:	3301      	adds	r3, #1
 8004450:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	ee07 3a90 	vmov	s15, r3
 8004458:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800445c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004460:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004464:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004468:	ee17 3a90 	vmov	r3, s15
 800446c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800446e:	e005      	b.n	800447c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004470:	2300      	movs	r3, #0
 8004472:	61bb      	str	r3, [r7, #24]
      break;
 8004474:	e002      	b.n	800447c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004476:	4b07      	ldr	r3, [pc, #28]	@ (8004494 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004478:	61bb      	str	r3, [r7, #24]
      break;
 800447a:	bf00      	nop
  }

  return sysclockfreq;
 800447c:	69bb      	ldr	r3, [r7, #24]
}
 800447e:	4618      	mov	r0, r3
 8004480:	3724      	adds	r7, #36	@ 0x24
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	58024400 	.word	0x58024400
 8004490:	03d09000 	.word	0x03d09000
 8004494:	003d0900 	.word	0x003d0900
 8004498:	017d7840 	.word	0x017d7840
 800449c:	46000000 	.word	0x46000000
 80044a0:	4c742400 	.word	0x4c742400
 80044a4:	4a742400 	.word	0x4a742400
 80044a8:	4bbebc20 	.word	0x4bbebc20

080044ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80044b2:	f7ff fe81 	bl	80041b8 <HAL_RCC_GetSysClockFreq>
 80044b6:	4602      	mov	r2, r0
 80044b8:	4b10      	ldr	r3, [pc, #64]	@ (80044fc <HAL_RCC_GetHCLKFreq+0x50>)
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	0a1b      	lsrs	r3, r3, #8
 80044be:	f003 030f 	and.w	r3, r3, #15
 80044c2:	490f      	ldr	r1, [pc, #60]	@ (8004500 <HAL_RCC_GetHCLKFreq+0x54>)
 80044c4:	5ccb      	ldrb	r3, [r1, r3]
 80044c6:	f003 031f 	and.w	r3, r3, #31
 80044ca:	fa22 f303 	lsr.w	r3, r2, r3
 80044ce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80044d0:	4b0a      	ldr	r3, [pc, #40]	@ (80044fc <HAL_RCC_GetHCLKFreq+0x50>)
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	f003 030f 	and.w	r3, r3, #15
 80044d8:	4a09      	ldr	r2, [pc, #36]	@ (8004500 <HAL_RCC_GetHCLKFreq+0x54>)
 80044da:	5cd3      	ldrb	r3, [r2, r3]
 80044dc:	f003 031f 	and.w	r3, r3, #31
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	fa22 f303 	lsr.w	r3, r2, r3
 80044e6:	4a07      	ldr	r2, [pc, #28]	@ (8004504 <HAL_RCC_GetHCLKFreq+0x58>)
 80044e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80044ea:	4a07      	ldr	r2, [pc, #28]	@ (8004508 <HAL_RCC_GetHCLKFreq+0x5c>)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80044f0:	4b04      	ldr	r3, [pc, #16]	@ (8004504 <HAL_RCC_GetHCLKFreq+0x58>)
 80044f2:	681b      	ldr	r3, [r3, #0]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3708      	adds	r7, #8
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	58024400 	.word	0x58024400
 8004500:	0801b0a0 	.word	0x0801b0a0
 8004504:	24000004 	.word	0x24000004
 8004508:	24000000 	.word	0x24000000

0800450c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004510:	f7ff ffcc 	bl	80044ac <HAL_RCC_GetHCLKFreq>
 8004514:	4602      	mov	r2, r0
 8004516:	4b06      	ldr	r3, [pc, #24]	@ (8004530 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	091b      	lsrs	r3, r3, #4
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	4904      	ldr	r1, [pc, #16]	@ (8004534 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004522:	5ccb      	ldrb	r3, [r1, r3]
 8004524:	f003 031f 	and.w	r3, r3, #31
 8004528:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800452c:	4618      	mov	r0, r3
 800452e:	bd80      	pop	{r7, pc}
 8004530:	58024400 	.word	0x58024400
 8004534:	0801b0a0 	.word	0x0801b0a0

08004538 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	223f      	movs	r2, #63	@ 0x3f
 8004546:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004548:	4b1a      	ldr	r3, [pc, #104]	@ (80045b4 <HAL_RCC_GetClockConfig+0x7c>)
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	f003 0207 	and.w	r2, r3, #7
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004554:	4b17      	ldr	r3, [pc, #92]	@ (80045b4 <HAL_RCC_GetClockConfig+0x7c>)
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004560:	4b14      	ldr	r3, [pc, #80]	@ (80045b4 <HAL_RCC_GetClockConfig+0x7c>)
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	f003 020f 	and.w	r2, r3, #15
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800456c:	4b11      	ldr	r3, [pc, #68]	@ (80045b4 <HAL_RCC_GetClockConfig+0x7c>)
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004578:	4b0e      	ldr	r3, [pc, #56]	@ (80045b4 <HAL_RCC_GetClockConfig+0x7c>)
 800457a:	69db      	ldr	r3, [r3, #28]
 800457c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004584:	4b0b      	ldr	r3, [pc, #44]	@ (80045b4 <HAL_RCC_GetClockConfig+0x7c>)
 8004586:	69db      	ldr	r3, [r3, #28]
 8004588:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004590:	4b08      	ldr	r3, [pc, #32]	@ (80045b4 <HAL_RCC_GetClockConfig+0x7c>)
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800459c:	4b06      	ldr	r3, [pc, #24]	@ (80045b8 <HAL_RCC_GetClockConfig+0x80>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 020f 	and.w	r2, r3, #15
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	601a      	str	r2, [r3, #0]
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr
 80045b4:	58024400 	.word	0x58024400
 80045b8:	52002000 	.word	0x52002000

080045bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e049      	b.n	8004662 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d106      	bne.n	80045e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f841 	bl	800466a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2202      	movs	r2, #2
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	3304      	adds	r3, #4
 80045f8:	4619      	mov	r1, r3
 80045fa:	4610      	mov	r0, r2
 80045fc:	f000 f9f6 	bl	80049ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800466a:	b480      	push	{r7}
 800466c:	b083      	sub	sp, #12
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
	...

08004680 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b01      	cmp	r3, #1
 8004692:	d001      	beq.n	8004698 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e05e      	b.n	8004756 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f042 0201 	orr.w	r2, r2, #1
 80046ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a2b      	ldr	r2, [pc, #172]	@ (8004764 <HAL_TIM_Base_Start_IT+0xe4>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d02c      	beq.n	8004714 <HAL_TIM_Base_Start_IT+0x94>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046c2:	d027      	beq.n	8004714 <HAL_TIM_Base_Start_IT+0x94>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a27      	ldr	r2, [pc, #156]	@ (8004768 <HAL_TIM_Base_Start_IT+0xe8>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d022      	beq.n	8004714 <HAL_TIM_Base_Start_IT+0x94>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a26      	ldr	r2, [pc, #152]	@ (800476c <HAL_TIM_Base_Start_IT+0xec>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d01d      	beq.n	8004714 <HAL_TIM_Base_Start_IT+0x94>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a24      	ldr	r2, [pc, #144]	@ (8004770 <HAL_TIM_Base_Start_IT+0xf0>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d018      	beq.n	8004714 <HAL_TIM_Base_Start_IT+0x94>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a23      	ldr	r2, [pc, #140]	@ (8004774 <HAL_TIM_Base_Start_IT+0xf4>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d013      	beq.n	8004714 <HAL_TIM_Base_Start_IT+0x94>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a21      	ldr	r2, [pc, #132]	@ (8004778 <HAL_TIM_Base_Start_IT+0xf8>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d00e      	beq.n	8004714 <HAL_TIM_Base_Start_IT+0x94>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a20      	ldr	r2, [pc, #128]	@ (800477c <HAL_TIM_Base_Start_IT+0xfc>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d009      	beq.n	8004714 <HAL_TIM_Base_Start_IT+0x94>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a1e      	ldr	r2, [pc, #120]	@ (8004780 <HAL_TIM_Base_Start_IT+0x100>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d004      	beq.n	8004714 <HAL_TIM_Base_Start_IT+0x94>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a1d      	ldr	r2, [pc, #116]	@ (8004784 <HAL_TIM_Base_Start_IT+0x104>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d115      	bne.n	8004740 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689a      	ldr	r2, [r3, #8]
 800471a:	4b1b      	ldr	r3, [pc, #108]	@ (8004788 <HAL_TIM_Base_Start_IT+0x108>)
 800471c:	4013      	ands	r3, r2
 800471e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2b06      	cmp	r3, #6
 8004724:	d015      	beq.n	8004752 <HAL_TIM_Base_Start_IT+0xd2>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800472c:	d011      	beq.n	8004752 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f042 0201 	orr.w	r2, r2, #1
 800473c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800473e:	e008      	b.n	8004752 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0201 	orr.w	r2, r2, #1
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	e000      	b.n	8004754 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004752:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	40010000 	.word	0x40010000
 8004768:	40000400 	.word	0x40000400
 800476c:	40000800 	.word	0x40000800
 8004770:	40000c00 	.word	0x40000c00
 8004774:	40010400 	.word	0x40010400
 8004778:	40001800 	.word	0x40001800
 800477c:	40014000 	.word	0x40014000
 8004780:	4000e000 	.word	0x4000e000
 8004784:	4000e400 	.word	0x4000e400
 8004788:	00010007 	.word	0x00010007

0800478c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d020      	beq.n	80047f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d01b      	beq.n	80047f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f06f 0202 	mvn.w	r2, #2
 80047c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	f003 0303 	and.w	r3, r3, #3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f8e9 	bl	80049ae <HAL_TIM_IC_CaptureCallback>
 80047dc:	e005      	b.n	80047ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f8db 	bl	800499a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f8ec 	bl	80049c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	f003 0304 	and.w	r3, r3, #4
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d020      	beq.n	800483c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	2b00      	cmp	r3, #0
 8004802:	d01b      	beq.n	800483c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f06f 0204 	mvn.w	r2, #4
 800480c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2202      	movs	r2, #2
 8004812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800481e:	2b00      	cmp	r3, #0
 8004820:	d003      	beq.n	800482a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f8c3 	bl	80049ae <HAL_TIM_IC_CaptureCallback>
 8004828:	e005      	b.n	8004836 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f8b5 	bl	800499a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 f8c6 	bl	80049c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	f003 0308 	and.w	r3, r3, #8
 8004842:	2b00      	cmp	r3, #0
 8004844:	d020      	beq.n	8004888 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f003 0308 	and.w	r3, r3, #8
 800484c:	2b00      	cmp	r3, #0
 800484e:	d01b      	beq.n	8004888 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f06f 0208 	mvn.w	r2, #8
 8004858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2204      	movs	r2, #4
 800485e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	f003 0303 	and.w	r3, r3, #3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f89d 	bl	80049ae <HAL_TIM_IC_CaptureCallback>
 8004874:	e005      	b.n	8004882 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f88f 	bl	800499a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 f8a0 	bl	80049c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	f003 0310 	and.w	r3, r3, #16
 800488e:	2b00      	cmp	r3, #0
 8004890:	d020      	beq.n	80048d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f003 0310 	and.w	r3, r3, #16
 8004898:	2b00      	cmp	r3, #0
 800489a:	d01b      	beq.n	80048d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f06f 0210 	mvn.w	r2, #16
 80048a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2208      	movs	r2, #8
 80048aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f877 	bl	80049ae <HAL_TIM_IC_CaptureCallback>
 80048c0:	e005      	b.n	80048ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f869 	bl	800499a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f87a 	bl	80049c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00c      	beq.n	80048f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d007      	beq.n	80048f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f06f 0201 	mvn.w	r2, #1
 80048f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7fb ff4e 	bl	8000794 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d104      	bne.n	800490c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00c      	beq.n	8004926 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004912:	2b00      	cmp	r3, #0
 8004914:	d007      	beq.n	8004926 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800491e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 f919 	bl	8004b58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00c      	beq.n	800494a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004936:	2b00      	cmp	r3, #0
 8004938:	d007      	beq.n	800494a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 f911 	bl	8004b6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00c      	beq.n	800496e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800495a:	2b00      	cmp	r3, #0
 800495c:	d007      	beq.n	800496e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 f834 	bl	80049d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	f003 0320 	and.w	r3, r3, #32
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00c      	beq.n	8004992 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f003 0320 	and.w	r3, r3, #32
 800497e:	2b00      	cmp	r3, #0
 8004980:	d007      	beq.n	8004992 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f06f 0220 	mvn.w	r2, #32
 800498a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 f8d9 	bl	8004b44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004992:	bf00      	nop
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800499a:	b480      	push	{r7}
 800499c:	b083      	sub	sp, #12
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049a2:	bf00      	nop
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b083      	sub	sp, #12
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049ca:	bf00      	nop
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049de:	bf00      	nop
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
	...

080049ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a47      	ldr	r2, [pc, #284]	@ (8004b1c <TIM_Base_SetConfig+0x130>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d013      	beq.n	8004a2c <TIM_Base_SetConfig+0x40>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a0a:	d00f      	beq.n	8004a2c <TIM_Base_SetConfig+0x40>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a44      	ldr	r2, [pc, #272]	@ (8004b20 <TIM_Base_SetConfig+0x134>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d00b      	beq.n	8004a2c <TIM_Base_SetConfig+0x40>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a43      	ldr	r2, [pc, #268]	@ (8004b24 <TIM_Base_SetConfig+0x138>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d007      	beq.n	8004a2c <TIM_Base_SetConfig+0x40>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a42      	ldr	r2, [pc, #264]	@ (8004b28 <TIM_Base_SetConfig+0x13c>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d003      	beq.n	8004a2c <TIM_Base_SetConfig+0x40>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a41      	ldr	r2, [pc, #260]	@ (8004b2c <TIM_Base_SetConfig+0x140>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d108      	bne.n	8004a3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a36      	ldr	r2, [pc, #216]	@ (8004b1c <TIM_Base_SetConfig+0x130>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d027      	beq.n	8004a96 <TIM_Base_SetConfig+0xaa>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a4c:	d023      	beq.n	8004a96 <TIM_Base_SetConfig+0xaa>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a33      	ldr	r2, [pc, #204]	@ (8004b20 <TIM_Base_SetConfig+0x134>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d01f      	beq.n	8004a96 <TIM_Base_SetConfig+0xaa>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a32      	ldr	r2, [pc, #200]	@ (8004b24 <TIM_Base_SetConfig+0x138>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d01b      	beq.n	8004a96 <TIM_Base_SetConfig+0xaa>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a31      	ldr	r2, [pc, #196]	@ (8004b28 <TIM_Base_SetConfig+0x13c>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d017      	beq.n	8004a96 <TIM_Base_SetConfig+0xaa>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a30      	ldr	r2, [pc, #192]	@ (8004b2c <TIM_Base_SetConfig+0x140>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d013      	beq.n	8004a96 <TIM_Base_SetConfig+0xaa>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a2f      	ldr	r2, [pc, #188]	@ (8004b30 <TIM_Base_SetConfig+0x144>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d00f      	beq.n	8004a96 <TIM_Base_SetConfig+0xaa>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a2e      	ldr	r2, [pc, #184]	@ (8004b34 <TIM_Base_SetConfig+0x148>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d00b      	beq.n	8004a96 <TIM_Base_SetConfig+0xaa>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a2d      	ldr	r2, [pc, #180]	@ (8004b38 <TIM_Base_SetConfig+0x14c>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d007      	beq.n	8004a96 <TIM_Base_SetConfig+0xaa>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a2c      	ldr	r2, [pc, #176]	@ (8004b3c <TIM_Base_SetConfig+0x150>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d003      	beq.n	8004a96 <TIM_Base_SetConfig+0xaa>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a2b      	ldr	r2, [pc, #172]	@ (8004b40 <TIM_Base_SetConfig+0x154>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d108      	bne.n	8004aa8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	689a      	ldr	r2, [r3, #8]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a14      	ldr	r2, [pc, #80]	@ (8004b1c <TIM_Base_SetConfig+0x130>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d00f      	beq.n	8004aee <TIM_Base_SetConfig+0x102>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a16      	ldr	r2, [pc, #88]	@ (8004b2c <TIM_Base_SetConfig+0x140>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d00b      	beq.n	8004aee <TIM_Base_SetConfig+0x102>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a15      	ldr	r2, [pc, #84]	@ (8004b30 <TIM_Base_SetConfig+0x144>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d007      	beq.n	8004aee <TIM_Base_SetConfig+0x102>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a14      	ldr	r2, [pc, #80]	@ (8004b34 <TIM_Base_SetConfig+0x148>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d003      	beq.n	8004aee <TIM_Base_SetConfig+0x102>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a13      	ldr	r2, [pc, #76]	@ (8004b38 <TIM_Base_SetConfig+0x14c>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d103      	bne.n	8004af6 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	691a      	ldr	r2, [r3, #16]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f043 0204 	orr.w	r2, r3, #4
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	601a      	str	r2, [r3, #0]
}
 8004b0e:	bf00      	nop
 8004b10:	3714      	adds	r7, #20
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	40010000 	.word	0x40010000
 8004b20:	40000400 	.word	0x40000400
 8004b24:	40000800 	.word	0x40000800
 8004b28:	40000c00 	.word	0x40000c00
 8004b2c:	40010400 	.word	0x40010400
 8004b30:	40014000 	.word	0x40014000
 8004b34:	40014400 	.word	0x40014400
 8004b38:	40014800 	.word	0x40014800
 8004b3c:	4000e000 	.word	0x4000e000
 8004b40:	4000e400 	.word	0x4000e400

08004b44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004b86:	4b92      	ldr	r3, [pc, #584]	@ (8004dd0 <MX_LWIP_Init+0x250>)
 8004b88:	22c0      	movs	r2, #192	@ 0xc0
 8004b8a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004b8c:	4b90      	ldr	r3, [pc, #576]	@ (8004dd0 <MX_LWIP_Init+0x250>)
 8004b8e:	22a8      	movs	r2, #168	@ 0xa8
 8004b90:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8004b92:	4b8f      	ldr	r3, [pc, #572]	@ (8004dd0 <MX_LWIP_Init+0x250>)
 8004b94:	2201      	movs	r2, #1
 8004b96:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 151;
 8004b98:	4b8d      	ldr	r3, [pc, #564]	@ (8004dd0 <MX_LWIP_Init+0x250>)
 8004b9a:	2297      	movs	r2, #151	@ 0x97
 8004b9c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004b9e:	4b8d      	ldr	r3, [pc, #564]	@ (8004dd4 <MX_LWIP_Init+0x254>)
 8004ba0:	22ff      	movs	r2, #255	@ 0xff
 8004ba2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004ba4:	4b8b      	ldr	r3, [pc, #556]	@ (8004dd4 <MX_LWIP_Init+0x254>)
 8004ba6:	22ff      	movs	r2, #255	@ 0xff
 8004ba8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004baa:	4b8a      	ldr	r3, [pc, #552]	@ (8004dd4 <MX_LWIP_Init+0x254>)
 8004bac:	22ff      	movs	r2, #255	@ 0xff
 8004bae:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004bb0:	4b88      	ldr	r3, [pc, #544]	@ (8004dd4 <MX_LWIP_Init+0x254>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004bb6:	4b88      	ldr	r3, [pc, #544]	@ (8004dd8 <MX_LWIP_Init+0x258>)
 8004bb8:	22c0      	movs	r2, #192	@ 0xc0
 8004bba:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004bbc:	4b86      	ldr	r3, [pc, #536]	@ (8004dd8 <MX_LWIP_Init+0x258>)
 8004bbe:	22a8      	movs	r2, #168	@ 0xa8
 8004bc0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8004bc2:	4b85      	ldr	r3, [pc, #532]	@ (8004dd8 <MX_LWIP_Init+0x258>)
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004bc8:	4b83      	ldr	r3, [pc, #524]	@ (8004dd8 <MX_LWIP_Init+0x258>)
 8004bca:	2201      	movs	r2, #1
 8004bcc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004bce:	2100      	movs	r1, #0
 8004bd0:	2000      	movs	r0, #0
 8004bd2:	f006 fe01 	bl	800b7d8 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004bd6:	4b7e      	ldr	r3, [pc, #504]	@ (8004dd0 <MX_LWIP_Init+0x250>)
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	061a      	lsls	r2, r3, #24
 8004bdc:	4b7c      	ldr	r3, [pc, #496]	@ (8004dd0 <MX_LWIP_Init+0x250>)
 8004bde:	785b      	ldrb	r3, [r3, #1]
 8004be0:	041b      	lsls	r3, r3, #16
 8004be2:	431a      	orrs	r2, r3
 8004be4:	4b7a      	ldr	r3, [pc, #488]	@ (8004dd0 <MX_LWIP_Init+0x250>)
 8004be6:	789b      	ldrb	r3, [r3, #2]
 8004be8:	021b      	lsls	r3, r3, #8
 8004bea:	4313      	orrs	r3, r2
 8004bec:	4a78      	ldr	r2, [pc, #480]	@ (8004dd0 <MX_LWIP_Init+0x250>)
 8004bee:	78d2      	ldrb	r2, [r2, #3]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	061a      	lsls	r2, r3, #24
 8004bf4:	4b76      	ldr	r3, [pc, #472]	@ (8004dd0 <MX_LWIP_Init+0x250>)
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	0619      	lsls	r1, r3, #24
 8004bfa:	4b75      	ldr	r3, [pc, #468]	@ (8004dd0 <MX_LWIP_Init+0x250>)
 8004bfc:	785b      	ldrb	r3, [r3, #1]
 8004bfe:	041b      	lsls	r3, r3, #16
 8004c00:	4319      	orrs	r1, r3
 8004c02:	4b73      	ldr	r3, [pc, #460]	@ (8004dd0 <MX_LWIP_Init+0x250>)
 8004c04:	789b      	ldrb	r3, [r3, #2]
 8004c06:	021b      	lsls	r3, r3, #8
 8004c08:	430b      	orrs	r3, r1
 8004c0a:	4971      	ldr	r1, [pc, #452]	@ (8004dd0 <MX_LWIP_Init+0x250>)
 8004c0c:	78c9      	ldrb	r1, [r1, #3]
 8004c0e:	430b      	orrs	r3, r1
 8004c10:	021b      	lsls	r3, r3, #8
 8004c12:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004c16:	431a      	orrs	r2, r3
 8004c18:	4b6d      	ldr	r3, [pc, #436]	@ (8004dd0 <MX_LWIP_Init+0x250>)
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	0619      	lsls	r1, r3, #24
 8004c1e:	4b6c      	ldr	r3, [pc, #432]	@ (8004dd0 <MX_LWIP_Init+0x250>)
 8004c20:	785b      	ldrb	r3, [r3, #1]
 8004c22:	041b      	lsls	r3, r3, #16
 8004c24:	4319      	orrs	r1, r3
 8004c26:	4b6a      	ldr	r3, [pc, #424]	@ (8004dd0 <MX_LWIP_Init+0x250>)
 8004c28:	789b      	ldrb	r3, [r3, #2]
 8004c2a:	021b      	lsls	r3, r3, #8
 8004c2c:	430b      	orrs	r3, r1
 8004c2e:	4968      	ldr	r1, [pc, #416]	@ (8004dd0 <MX_LWIP_Init+0x250>)
 8004c30:	78c9      	ldrb	r1, [r1, #3]
 8004c32:	430b      	orrs	r3, r1
 8004c34:	0a1b      	lsrs	r3, r3, #8
 8004c36:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	4b64      	ldr	r3, [pc, #400]	@ (8004dd0 <MX_LWIP_Init+0x250>)
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	0619      	lsls	r1, r3, #24
 8004c42:	4b63      	ldr	r3, [pc, #396]	@ (8004dd0 <MX_LWIP_Init+0x250>)
 8004c44:	785b      	ldrb	r3, [r3, #1]
 8004c46:	041b      	lsls	r3, r3, #16
 8004c48:	4319      	orrs	r1, r3
 8004c4a:	4b61      	ldr	r3, [pc, #388]	@ (8004dd0 <MX_LWIP_Init+0x250>)
 8004c4c:	789b      	ldrb	r3, [r3, #2]
 8004c4e:	021b      	lsls	r3, r3, #8
 8004c50:	430b      	orrs	r3, r1
 8004c52:	495f      	ldr	r1, [pc, #380]	@ (8004dd0 <MX_LWIP_Init+0x250>)
 8004c54:	78c9      	ldrb	r1, [r1, #3]
 8004c56:	430b      	orrs	r3, r1
 8004c58:	0e1b      	lsrs	r3, r3, #24
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	4a5f      	ldr	r2, [pc, #380]	@ (8004ddc <MX_LWIP_Init+0x25c>)
 8004c5e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004c60:	4b5c      	ldr	r3, [pc, #368]	@ (8004dd4 <MX_LWIP_Init+0x254>)
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	061a      	lsls	r2, r3, #24
 8004c66:	4b5b      	ldr	r3, [pc, #364]	@ (8004dd4 <MX_LWIP_Init+0x254>)
 8004c68:	785b      	ldrb	r3, [r3, #1]
 8004c6a:	041b      	lsls	r3, r3, #16
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	4b59      	ldr	r3, [pc, #356]	@ (8004dd4 <MX_LWIP_Init+0x254>)
 8004c70:	789b      	ldrb	r3, [r3, #2]
 8004c72:	021b      	lsls	r3, r3, #8
 8004c74:	4313      	orrs	r3, r2
 8004c76:	4a57      	ldr	r2, [pc, #348]	@ (8004dd4 <MX_LWIP_Init+0x254>)
 8004c78:	78d2      	ldrb	r2, [r2, #3]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	061a      	lsls	r2, r3, #24
 8004c7e:	4b55      	ldr	r3, [pc, #340]	@ (8004dd4 <MX_LWIP_Init+0x254>)
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	0619      	lsls	r1, r3, #24
 8004c84:	4b53      	ldr	r3, [pc, #332]	@ (8004dd4 <MX_LWIP_Init+0x254>)
 8004c86:	785b      	ldrb	r3, [r3, #1]
 8004c88:	041b      	lsls	r3, r3, #16
 8004c8a:	4319      	orrs	r1, r3
 8004c8c:	4b51      	ldr	r3, [pc, #324]	@ (8004dd4 <MX_LWIP_Init+0x254>)
 8004c8e:	789b      	ldrb	r3, [r3, #2]
 8004c90:	021b      	lsls	r3, r3, #8
 8004c92:	430b      	orrs	r3, r1
 8004c94:	494f      	ldr	r1, [pc, #316]	@ (8004dd4 <MX_LWIP_Init+0x254>)
 8004c96:	78c9      	ldrb	r1, [r1, #3]
 8004c98:	430b      	orrs	r3, r1
 8004c9a:	021b      	lsls	r3, r3, #8
 8004c9c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	4b4c      	ldr	r3, [pc, #304]	@ (8004dd4 <MX_LWIP_Init+0x254>)
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	0619      	lsls	r1, r3, #24
 8004ca8:	4b4a      	ldr	r3, [pc, #296]	@ (8004dd4 <MX_LWIP_Init+0x254>)
 8004caa:	785b      	ldrb	r3, [r3, #1]
 8004cac:	041b      	lsls	r3, r3, #16
 8004cae:	4319      	orrs	r1, r3
 8004cb0:	4b48      	ldr	r3, [pc, #288]	@ (8004dd4 <MX_LWIP_Init+0x254>)
 8004cb2:	789b      	ldrb	r3, [r3, #2]
 8004cb4:	021b      	lsls	r3, r3, #8
 8004cb6:	430b      	orrs	r3, r1
 8004cb8:	4946      	ldr	r1, [pc, #280]	@ (8004dd4 <MX_LWIP_Init+0x254>)
 8004cba:	78c9      	ldrb	r1, [r1, #3]
 8004cbc:	430b      	orrs	r3, r1
 8004cbe:	0a1b      	lsrs	r3, r3, #8
 8004cc0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	4b43      	ldr	r3, [pc, #268]	@ (8004dd4 <MX_LWIP_Init+0x254>)
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	0619      	lsls	r1, r3, #24
 8004ccc:	4b41      	ldr	r3, [pc, #260]	@ (8004dd4 <MX_LWIP_Init+0x254>)
 8004cce:	785b      	ldrb	r3, [r3, #1]
 8004cd0:	041b      	lsls	r3, r3, #16
 8004cd2:	4319      	orrs	r1, r3
 8004cd4:	4b3f      	ldr	r3, [pc, #252]	@ (8004dd4 <MX_LWIP_Init+0x254>)
 8004cd6:	789b      	ldrb	r3, [r3, #2]
 8004cd8:	021b      	lsls	r3, r3, #8
 8004cda:	430b      	orrs	r3, r1
 8004cdc:	493d      	ldr	r1, [pc, #244]	@ (8004dd4 <MX_LWIP_Init+0x254>)
 8004cde:	78c9      	ldrb	r1, [r1, #3]
 8004ce0:	430b      	orrs	r3, r1
 8004ce2:	0e1b      	lsrs	r3, r3, #24
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	4a3e      	ldr	r2, [pc, #248]	@ (8004de0 <MX_LWIP_Init+0x260>)
 8004ce8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004cea:	4b3b      	ldr	r3, [pc, #236]	@ (8004dd8 <MX_LWIP_Init+0x258>)
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	061a      	lsls	r2, r3, #24
 8004cf0:	4b39      	ldr	r3, [pc, #228]	@ (8004dd8 <MX_LWIP_Init+0x258>)
 8004cf2:	785b      	ldrb	r3, [r3, #1]
 8004cf4:	041b      	lsls	r3, r3, #16
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	4b37      	ldr	r3, [pc, #220]	@ (8004dd8 <MX_LWIP_Init+0x258>)
 8004cfa:	789b      	ldrb	r3, [r3, #2]
 8004cfc:	021b      	lsls	r3, r3, #8
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	4a35      	ldr	r2, [pc, #212]	@ (8004dd8 <MX_LWIP_Init+0x258>)
 8004d02:	78d2      	ldrb	r2, [r2, #3]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	061a      	lsls	r2, r3, #24
 8004d08:	4b33      	ldr	r3, [pc, #204]	@ (8004dd8 <MX_LWIP_Init+0x258>)
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	0619      	lsls	r1, r3, #24
 8004d0e:	4b32      	ldr	r3, [pc, #200]	@ (8004dd8 <MX_LWIP_Init+0x258>)
 8004d10:	785b      	ldrb	r3, [r3, #1]
 8004d12:	041b      	lsls	r3, r3, #16
 8004d14:	4319      	orrs	r1, r3
 8004d16:	4b30      	ldr	r3, [pc, #192]	@ (8004dd8 <MX_LWIP_Init+0x258>)
 8004d18:	789b      	ldrb	r3, [r3, #2]
 8004d1a:	021b      	lsls	r3, r3, #8
 8004d1c:	430b      	orrs	r3, r1
 8004d1e:	492e      	ldr	r1, [pc, #184]	@ (8004dd8 <MX_LWIP_Init+0x258>)
 8004d20:	78c9      	ldrb	r1, [r1, #3]
 8004d22:	430b      	orrs	r3, r1
 8004d24:	021b      	lsls	r3, r3, #8
 8004d26:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	4b2a      	ldr	r3, [pc, #168]	@ (8004dd8 <MX_LWIP_Init+0x258>)
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	0619      	lsls	r1, r3, #24
 8004d32:	4b29      	ldr	r3, [pc, #164]	@ (8004dd8 <MX_LWIP_Init+0x258>)
 8004d34:	785b      	ldrb	r3, [r3, #1]
 8004d36:	041b      	lsls	r3, r3, #16
 8004d38:	4319      	orrs	r1, r3
 8004d3a:	4b27      	ldr	r3, [pc, #156]	@ (8004dd8 <MX_LWIP_Init+0x258>)
 8004d3c:	789b      	ldrb	r3, [r3, #2]
 8004d3e:	021b      	lsls	r3, r3, #8
 8004d40:	430b      	orrs	r3, r1
 8004d42:	4925      	ldr	r1, [pc, #148]	@ (8004dd8 <MX_LWIP_Init+0x258>)
 8004d44:	78c9      	ldrb	r1, [r1, #3]
 8004d46:	430b      	orrs	r3, r1
 8004d48:	0a1b      	lsrs	r3, r3, #8
 8004d4a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004d4e:	431a      	orrs	r2, r3
 8004d50:	4b21      	ldr	r3, [pc, #132]	@ (8004dd8 <MX_LWIP_Init+0x258>)
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	0619      	lsls	r1, r3, #24
 8004d56:	4b20      	ldr	r3, [pc, #128]	@ (8004dd8 <MX_LWIP_Init+0x258>)
 8004d58:	785b      	ldrb	r3, [r3, #1]
 8004d5a:	041b      	lsls	r3, r3, #16
 8004d5c:	4319      	orrs	r1, r3
 8004d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8004dd8 <MX_LWIP_Init+0x258>)
 8004d60:	789b      	ldrb	r3, [r3, #2]
 8004d62:	021b      	lsls	r3, r3, #8
 8004d64:	430b      	orrs	r3, r1
 8004d66:	491c      	ldr	r1, [pc, #112]	@ (8004dd8 <MX_LWIP_Init+0x258>)
 8004d68:	78c9      	ldrb	r1, [r1, #3]
 8004d6a:	430b      	orrs	r3, r1
 8004d6c:	0e1b      	lsrs	r3, r3, #24
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	4a1c      	ldr	r2, [pc, #112]	@ (8004de4 <MX_LWIP_Init+0x264>)
 8004d72:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004d74:	4b1c      	ldr	r3, [pc, #112]	@ (8004de8 <MX_LWIP_Init+0x268>)
 8004d76:	9302      	str	r3, [sp, #8]
 8004d78:	4b1c      	ldr	r3, [pc, #112]	@ (8004dec <MX_LWIP_Init+0x26c>)
 8004d7a:	9301      	str	r3, [sp, #4]
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	9300      	str	r3, [sp, #0]
 8004d80:	4b18      	ldr	r3, [pc, #96]	@ (8004de4 <MX_LWIP_Init+0x264>)
 8004d82:	4a17      	ldr	r2, [pc, #92]	@ (8004de0 <MX_LWIP_Init+0x260>)
 8004d84:	4915      	ldr	r1, [pc, #84]	@ (8004ddc <MX_LWIP_Init+0x25c>)
 8004d86:	481a      	ldr	r0, [pc, #104]	@ (8004df0 <MX_LWIP_Init+0x270>)
 8004d88:	f007 fba8 	bl	800c4dc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004d8c:	4818      	ldr	r0, [pc, #96]	@ (8004df0 <MX_LWIP_Init+0x270>)
 8004d8e:	f007 fd57 	bl	800c840 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8004d92:	4817      	ldr	r0, [pc, #92]	@ (8004df0 <MX_LWIP_Init+0x270>)
 8004d94:	f007 fd64 	bl	800c860 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004d98:	4916      	ldr	r1, [pc, #88]	@ (8004df4 <MX_LWIP_Init+0x274>)
 8004d9a:	4815      	ldr	r0, [pc, #84]	@ (8004df0 <MX_LWIP_Init+0x270>)
 8004d9c:	f007 fe62 	bl	800ca64 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004da0:	2224      	movs	r2, #36	@ 0x24
 8004da2:	2100      	movs	r1, #0
 8004da4:	4814      	ldr	r0, [pc, #80]	@ (8004df8 <MX_LWIP_Init+0x278>)
 8004da6:	f011 ffa8 	bl	8016cfa <memset>
  attributes.name = "EthLink";
 8004daa:	4b13      	ldr	r3, [pc, #76]	@ (8004df8 <MX_LWIP_Init+0x278>)
 8004dac:	4a13      	ldr	r2, [pc, #76]	@ (8004dfc <MX_LWIP_Init+0x27c>)
 8004dae:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004db0:	4b11      	ldr	r3, [pc, #68]	@ (8004df8 <MX_LWIP_Init+0x278>)
 8004db2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004db6:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8004db8:	4b0f      	ldr	r3, [pc, #60]	@ (8004df8 <MX_LWIP_Init+0x278>)
 8004dba:	2210      	movs	r2, #16
 8004dbc:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8004dbe:	4a0e      	ldr	r2, [pc, #56]	@ (8004df8 <MX_LWIP_Init+0x278>)
 8004dc0:	490b      	ldr	r1, [pc, #44]	@ (8004df0 <MX_LWIP_Init+0x270>)
 8004dc2:	480f      	ldr	r0, [pc, #60]	@ (8004e00 <MX_LWIP_Init+0x280>)
 8004dc4:	f000 fde1 	bl	800598a <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004dc8:	bf00      	nop
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	24000294 	.word	0x24000294
 8004dd4:	24000298 	.word	0x24000298
 8004dd8:	2400029c 	.word	0x2400029c
 8004ddc:	24000288 	.word	0x24000288
 8004de0:	2400028c 	.word	0x2400028c
 8004de4:	24000290 	.word	0x24000290
 8004de8:	0800b6e9 	.word	0x0800b6e9
 8004dec:	080052ed 	.word	0x080052ed
 8004df0:	24000254 	.word	0x24000254
 8004df4:	08004e05 	.word	0x08004e05
 8004df8:	240002a0 	.word	0x240002a0
 8004dfc:	08017b30 	.word	0x08017b30
 8004e00:	080055e1 	.word	0x080055e1

08004e04 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8004e20:	4b04      	ldr	r3, [pc, #16]	@ (8004e34 <HAL_ETH_RxCpltCallback+0x1c>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4618      	mov	r0, r3
 8004e26:	f001 f917 	bl	8006058 <osSemaphoreRelease>
}
 8004e2a:	bf00      	nop
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	240002cc 	.word	0x240002cc

08004e38 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8004e40:	4b04      	ldr	r3, [pc, #16]	@ (8004e54 <HAL_ETH_TxCpltCallback+0x1c>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4618      	mov	r0, r3
 8004e46:	f001 f907 	bl	8006058 <osSemaphoreRelease>
}
 8004e4a:	bf00      	nop
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	240002d0 	.word	0x240002d0

08004e58 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f7fd fc8e 	bl	8002782 <HAL_ETH_GetDMAError>
 8004e66:	4603      	mov	r3, r0
 8004e68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e6c:	2b80      	cmp	r3, #128	@ 0x80
 8004e6e:	d104      	bne.n	8004e7a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8004e70:	4b04      	ldr	r3, [pc, #16]	@ (8004e84 <HAL_ETH_ErrorCallback+0x2c>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f001 f8ef 	bl	8006058 <osSemaphoreRelease>
  }
}
 8004e7a:	bf00      	nop
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	240002cc 	.word	0x240002cc

08004e88 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b0aa      	sub	sp, #168	@ 0xa8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004e90:	2300      	movs	r3, #0
 8004e92:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8004e96:	2300      	movs	r3, #0
 8004e98:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8004ea2:	f107 0310 	add.w	r3, r7, #16
 8004ea6:	2264      	movs	r2, #100	@ 0x64
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f011 ff25 	bl	8016cfa <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004eb0:	4b89      	ldr	r3, [pc, #548]	@ (80050d8 <low_level_init+0x250>)
 8004eb2:	4a8a      	ldr	r2, [pc, #552]	@ (80050dc <low_level_init+0x254>)
 8004eb4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004eba:	2380      	movs	r3, #128	@ 0x80
 8004ebc:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004ebe:	23e1      	movs	r3, #225	@ 0xe1
 8004ec0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004ece:	4a82      	ldr	r2, [pc, #520]	@ (80050d8 <low_level_init+0x250>)
 8004ed0:	f107 0308 	add.w	r3, r7, #8
 8004ed4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004ed6:	4b80      	ldr	r3, [pc, #512]	@ (80050d8 <low_level_init+0x250>)
 8004ed8:	2201      	movs	r2, #1
 8004eda:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004edc:	4b7e      	ldr	r3, [pc, #504]	@ (80050d8 <low_level_init+0x250>)
 8004ede:	4a80      	ldr	r2, [pc, #512]	@ (80050e0 <low_level_init+0x258>)
 8004ee0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004ee2:	4b7d      	ldr	r3, [pc, #500]	@ (80050d8 <low_level_init+0x250>)
 8004ee4:	4a7f      	ldr	r2, [pc, #508]	@ (80050e4 <low_level_init+0x25c>)
 8004ee6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004ee8:	4b7b      	ldr	r3, [pc, #492]	@ (80050d8 <low_level_init+0x250>)
 8004eea:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8004eee:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004ef0:	4879      	ldr	r0, [pc, #484]	@ (80050d8 <low_level_init+0x250>)
 8004ef2:	f7fc fc6d 	bl	80017d0 <HAL_ETH_Init>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004efc:	2238      	movs	r2, #56	@ 0x38
 8004efe:	2100      	movs	r1, #0
 8004f00:	4879      	ldr	r0, [pc, #484]	@ (80050e8 <low_level_init+0x260>)
 8004f02:	f011 fefa 	bl	8016cfa <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004f06:	4b78      	ldr	r3, [pc, #480]	@ (80050e8 <low_level_init+0x260>)
 8004f08:	2221      	movs	r2, #33	@ 0x21
 8004f0a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004f0c:	4b76      	ldr	r3, [pc, #472]	@ (80050e8 <low_level_init+0x260>)
 8004f0e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004f12:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004f14:	4b74      	ldr	r3, [pc, #464]	@ (80050e8 <low_level_init+0x260>)
 8004f16:	2200      	movs	r2, #0
 8004f18:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004f1a:	4874      	ldr	r0, [pc, #464]	@ (80050ec <low_level_init+0x264>)
 8004f1c:	f007 f998 	bl	800c250 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2206      	movs	r2, #6
 8004f24:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004f28:	4b6b      	ldr	r3, [pc, #428]	@ (80050d8 <low_level_init+0x250>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	781a      	ldrb	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004f34:	4b68      	ldr	r3, [pc, #416]	@ (80050d8 <low_level_init+0x250>)
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	785a      	ldrb	r2, [r3, #1]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004f40:	4b65      	ldr	r3, [pc, #404]	@ (80050d8 <low_level_init+0x250>)
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	789a      	ldrb	r2, [r3, #2]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004f4c:	4b62      	ldr	r3, [pc, #392]	@ (80050d8 <low_level_init+0x250>)
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	78da      	ldrb	r2, [r3, #3]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004f58:	4b5f      	ldr	r3, [pc, #380]	@ (80050d8 <low_level_init+0x250>)
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	791a      	ldrb	r2, [r3, #4]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004f64:	4b5c      	ldr	r3, [pc, #368]	@ (80050d8 <low_level_init+0x250>)
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	795a      	ldrb	r2, [r3, #5]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004f76:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004f7e:	f043 030a 	orr.w	r3, r3, #10
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	2001      	movs	r0, #1
 8004f90:	f000 ff86 	bl	8005ea0 <osSemaphoreNew>
 8004f94:	4603      	mov	r3, r0
 8004f96:	4a56      	ldr	r2, [pc, #344]	@ (80050f0 <low_level_init+0x268>)
 8004f98:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	2001      	movs	r0, #1
 8004fa0:	f000 ff7e 	bl	8005ea0 <osSemaphoreNew>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	4a53      	ldr	r2, [pc, #332]	@ (80050f4 <low_level_init+0x26c>)
 8004fa8:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004faa:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8004fae:	2224      	movs	r2, #36	@ 0x24
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f011 fea1 	bl	8016cfa <memset>
  attributes.name = "EthIf";
 8004fb8:	4b4f      	ldr	r3, [pc, #316]	@ (80050f8 <low_level_init+0x270>)
 8004fba:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004fbc:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8004fc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 8004fc4:	2330      	movs	r3, #48	@ 0x30
 8004fc6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8004fca:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8004fce:	461a      	mov	r2, r3
 8004fd0:	6879      	ldr	r1, [r7, #4]
 8004fd2:	484a      	ldr	r0, [pc, #296]	@ (80050fc <low_level_init+0x274>)
 8004fd4:	f000 fcd9 	bl	800598a <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004fd8:	4949      	ldr	r1, [pc, #292]	@ (8005100 <low_level_init+0x278>)
 8004fda:	484a      	ldr	r0, [pc, #296]	@ (8005104 <low_level_init+0x27c>)
 8004fdc:	f7fc f905 	bl	80011ea <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8004fe0:	4848      	ldr	r0, [pc, #288]	@ (8005104 <low_level_init+0x27c>)
 8004fe2:	f7fc f934 	bl	800124e <LAN8742_Init>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d006      	beq.n	8004ffa <low_level_init+0x172>
  {
    netif_set_link_down(netif);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f007 fd09 	bl	800ca04 <netif_set_link_down>
    netif_set_down(netif);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f007 fca0 	bl	800c938 <netif_set_down>
 8004ff8:	e06b      	b.n	80050d2 <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8004ffa:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d165      	bne.n	80050ce <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005002:	4840      	ldr	r0, [pc, #256]	@ (8005104 <low_level_init+0x27c>)
 8005004:	f7fc f970 	bl	80012e8 <LAN8742_GetLinkState>
 8005008:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800500c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005010:	2b01      	cmp	r3, #1
 8005012:	dc06      	bgt.n	8005022 <low_level_init+0x19a>
    {
      netif_set_link_down(netif);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f007 fcf5 	bl	800ca04 <netif_set_link_down>
      netif_set_down(netif);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f007 fc8c 	bl	800c938 <netif_set_down>
 8005020:	e057      	b.n	80050d2 <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 8005022:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005026:	3b02      	subs	r3, #2
 8005028:	2b03      	cmp	r3, #3
 800502a:	d82b      	bhi.n	8005084 <low_level_init+0x1fc>
 800502c:	a201      	add	r2, pc, #4	@ (adr r2, 8005034 <low_level_init+0x1ac>)
 800502e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005032:	bf00      	nop
 8005034:	08005045 	.word	0x08005045
 8005038:	08005057 	.word	0x08005057
 800503c:	08005067 	.word	0x08005067
 8005040:	08005077 	.word	0x08005077
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8005044:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005048:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800504c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005050:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8005054:	e01f      	b.n	8005096 <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8005056:	2300      	movs	r3, #0
 8005058:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800505c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005060:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8005064:	e017      	b.n	8005096 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8005066:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800506a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800506e:	2300      	movs	r3, #0
 8005070:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8005074:	e00f      	b.n	8005096 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8005076:	2300      	movs	r3, #0
 8005078:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800507c:	2300      	movs	r3, #0
 800507e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8005082:	e008      	b.n	8005096 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8005084:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005088:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800508c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005090:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8005094:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005096:	f107 0310 	add.w	r3, r7, #16
 800509a:	4619      	mov	r1, r3
 800509c:	480e      	ldr	r0, [pc, #56]	@ (80050d8 <low_level_init+0x250>)
 800509e:	f7fd f925 	bl	80022ec <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80050a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80050a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 80050a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80050ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80050ae:	f107 0310 	add.w	r3, r7, #16
 80050b2:	4619      	mov	r1, r3
 80050b4:	4808      	ldr	r0, [pc, #32]	@ (80050d8 <low_level_init+0x250>)
 80050b6:	f7fd faed 	bl	8002694 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 80050ba:	4807      	ldr	r0, [pc, #28]	@ (80050d8 <low_level_init+0x250>)
 80050bc:	f7fc fc86 	bl	80019cc <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f007 fbcd 	bl	800c860 <netif_set_up>
    netif_set_link_up(netif);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f007 fc68 	bl	800c99c <netif_set_link_up>
 80050cc:	e001      	b.n	80050d2 <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 80050ce:	f7fb fb73 	bl	80007b8 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80050d2:	37a8      	adds	r7, #168	@ 0xa8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	240002d4 	.word	0x240002d4
 80050dc:	40028000 	.word	0x40028000
 80050e0:	30000080 	.word	0x30000080
 80050e4:	30000000 	.word	0x30000000
 80050e8:	24000384 	.word	0x24000384
 80050ec:	0801b0b0 	.word	0x0801b0b0
 80050f0:	240002cc 	.word	0x240002cc
 80050f4:	240002d0 	.word	0x240002d0
 80050f8:	08017b38 	.word	0x08017b38
 80050fc:	08005299 	.word	0x08005299
 8005100:	24000010 	.word	0x24000010
 8005104:	240003bc 	.word	0x240003bc

08005108 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b092      	sub	sp, #72	@ 0x48
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005112:	2300      	movs	r3, #0
 8005114:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8005116:	2300      	movs	r3, #0
 8005118:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800511a:	2300      	movs	r3, #0
 800511c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005120:	f107 030c 	add.w	r3, r7, #12
 8005124:	2230      	movs	r2, #48	@ 0x30
 8005126:	2100      	movs	r1, #0
 8005128:	4618      	mov	r0, r3
 800512a:	f011 fde6 	bl	8016cfa <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800512e:	f107 030c 	add.w	r3, r7, #12
 8005132:	2230      	movs	r2, #48	@ 0x30
 8005134:	2100      	movs	r1, #0
 8005136:	4618      	mov	r0, r3
 8005138:	f011 fddf 	bl	8016cfa <memset>

  for(q = p; q != NULL; q = q->next)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005140:	e045      	b.n	80051ce <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005142:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005144:	2b03      	cmp	r3, #3
 8005146:	d902      	bls.n	800514e <low_level_output+0x46>
      return ERR_IF;
 8005148:	f06f 030b 	mvn.w	r3, #11
 800514c:	e07f      	b.n	800524e <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800514e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005150:	6859      	ldr	r1, [r3, #4]
 8005152:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005154:	4613      	mov	r3, r2
 8005156:	005b      	lsls	r3, r3, #1
 8005158:	4413      	add	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	3348      	adds	r3, #72	@ 0x48
 800515e:	443b      	add	r3, r7
 8005160:	3b3c      	subs	r3, #60	@ 0x3c
 8005162:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005164:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005166:	895b      	ldrh	r3, [r3, #10]
 8005168:	4619      	mov	r1, r3
 800516a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800516c:	4613      	mov	r3, r2
 800516e:	005b      	lsls	r3, r3, #1
 8005170:	4413      	add	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	3348      	adds	r3, #72	@ 0x48
 8005176:	443b      	add	r3, r7
 8005178:	3b38      	subs	r3, #56	@ 0x38
 800517a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800517c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800517e:	2b00      	cmp	r3, #0
 8005180:	d011      	beq.n	80051a6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005182:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005184:	1e5a      	subs	r2, r3, #1
 8005186:	f107 000c 	add.w	r0, r7, #12
 800518a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800518c:	460b      	mov	r3, r1
 800518e:	005b      	lsls	r3, r3, #1
 8005190:	440b      	add	r3, r1
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	18c1      	adds	r1, r0, r3
 8005196:	4613      	mov	r3, r2
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	4413      	add	r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	3348      	adds	r3, #72	@ 0x48
 80051a0:	443b      	add	r3, r7
 80051a2:	3b34      	subs	r3, #52	@ 0x34
 80051a4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80051a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d109      	bne.n	80051c2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80051ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051b0:	4613      	mov	r3, r2
 80051b2:	005b      	lsls	r3, r3, #1
 80051b4:	4413      	add	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	3348      	adds	r3, #72	@ 0x48
 80051ba:	443b      	add	r3, r7
 80051bc:	3b34      	subs	r3, #52	@ 0x34
 80051be:	2200      	movs	r2, #0
 80051c0:	601a      	str	r2, [r3, #0]
    }

    i++;
 80051c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051c4:	3301      	adds	r3, #1
 80051c6:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 80051c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80051ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1b6      	bne.n	8005142 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	891b      	ldrh	r3, [r3, #8]
 80051d8:	461a      	mov	r2, r3
 80051da:	4b1f      	ldr	r3, [pc, #124]	@ (8005258 <low_level_output+0x150>)
 80051dc:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80051de:	4a1e      	ldr	r2, [pc, #120]	@ (8005258 <low_level_output+0x150>)
 80051e0:	f107 030c 	add.w	r3, r7, #12
 80051e4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80051e6:	4a1c      	ldr	r2, [pc, #112]	@ (8005258 <low_level_output+0x150>)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 80051ec:	6838      	ldr	r0, [r7, #0]
 80051ee:	f008 f88d 	bl	800d30c <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 80051f2:	4919      	ldr	r1, [pc, #100]	@ (8005258 <low_level_output+0x150>)
 80051f4:	4819      	ldr	r0, [pc, #100]	@ (800525c <low_level_output+0x154>)
 80051f6:	f7fc fcd5 	bl	8001ba4 <HAL_ETH_Transmit_IT>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d103      	bne.n	8005208 <low_level_output+0x100>
    {
      errval = ERR_OK;
 8005200:	2300      	movs	r3, #0
 8005202:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8005206:	e01b      	b.n	8005240 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8005208:	4814      	ldr	r0, [pc, #80]	@ (800525c <low_level_output+0x154>)
 800520a:	f7fd faad 	bl	8002768 <HAL_ETH_GetError>
 800520e:	4603      	mov	r3, r0
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00d      	beq.n	8005234 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8005218:	4b11      	ldr	r3, [pc, #68]	@ (8005260 <low_level_output+0x158>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8005220:	4618      	mov	r0, r3
 8005222:	f000 fec7 	bl	8005fb4 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 8005226:	480d      	ldr	r0, [pc, #52]	@ (800525c <low_level_output+0x154>)
 8005228:	f7fc fe43 	bl	8001eb2 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800522c:	23fe      	movs	r3, #254	@ 0xfe
 800522e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8005232:	e005      	b.n	8005240 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8005234:	6838      	ldr	r0, [r7, #0]
 8005236:	f007 ffc3 	bl	800d1c0 <pbuf_free>
        errval =  ERR_IF;
 800523a:	23f4      	movs	r3, #244	@ 0xf4
 800523c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 8005240:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8005244:	f113 0f02 	cmn.w	r3, #2
 8005248:	d0d3      	beq.n	80051f2 <low_level_output+0xea>

  return errval;
 800524a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800524e:	4618      	mov	r0, r3
 8005250:	3748      	adds	r7, #72	@ 0x48
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	24000384 	.word	0x24000384
 800525c:	240002d4 	.word	0x240002d4
 8005260:	240002d0 	.word	0x240002d0

08005264 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800526c:	2300      	movs	r3, #0
 800526e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005270:	4b07      	ldr	r3, [pc, #28]	@ (8005290 <low_level_input+0x2c>)
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d105      	bne.n	8005284 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005278:	f107 030c 	add.w	r3, r7, #12
 800527c:	4619      	mov	r1, r3
 800527e:	4805      	ldr	r0, [pc, #20]	@ (8005294 <low_level_input+0x30>)
 8005280:	f7fc fce1 	bl	8001c46 <HAL_ETH_ReadData>
  }

  return p;
 8005284:	68fb      	ldr	r3, [r7, #12]
}
 8005286:	4618      	mov	r0, r3
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	240002c8 	.word	0x240002c8
 8005294:	240002d4 	.word	0x240002d4

08005298 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80052a0:	2300      	movs	r3, #0
 80052a2:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80052a8:	4b0f      	ldr	r3, [pc, #60]	@ (80052e8 <ethernetif_input+0x50>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f04f 31ff 	mov.w	r1, #4294967295
 80052b0:	4618      	mov	r0, r3
 80052b2:	f000 fe7f 	bl	8005fb4 <osSemaphoreAcquire>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1f5      	bne.n	80052a8 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80052bc:	68b8      	ldr	r0, [r7, #8]
 80052be:	f7ff ffd1 	bl	8005264 <low_level_input>
 80052c2:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00a      	beq.n	80052e0 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	68b9      	ldr	r1, [r7, #8]
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	4798      	blx	r3
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d002      	beq.n	80052e0 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f007 ff70 	bl	800d1c0 <pbuf_free>
          }
        }
      } while(p!=NULL);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1ea      	bne.n	80052bc <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80052e6:	e7df      	b.n	80052a8 <ethernetif_input+0x10>
 80052e8:	240002cc 	.word	0x240002cc

080052ec <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d106      	bne.n	8005308 <ethernetif_init+0x1c>
 80052fa:	4b0e      	ldr	r3, [pc, #56]	@ (8005334 <ethernetif_init+0x48>)
 80052fc:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8005300:	490d      	ldr	r1, [pc, #52]	@ (8005338 <ethernetif_init+0x4c>)
 8005302:	480e      	ldr	r0, [pc, #56]	@ (800533c <ethernetif_init+0x50>)
 8005304:	f011 fc94 	bl	8016c30 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2273      	movs	r2, #115	@ 0x73
 800530c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2274      	movs	r2, #116	@ 0x74
 8005314:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a09      	ldr	r2, [pc, #36]	@ (8005340 <ethernetif_init+0x54>)
 800531c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a08      	ldr	r2, [pc, #32]	@ (8005344 <ethernetif_init+0x58>)
 8005322:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f7ff fdaf 	bl	8004e88 <low_level_init>

  return ERR_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3708      	adds	r7, #8
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	08017b40 	.word	0x08017b40
 8005338:	08017b5c 	.word	0x08017b5c
 800533c:	08017b6c 	.word	0x08017b6c
 8005340:	08014985 	.word	0x08014985
 8005344:	08005109 	.word	0x08005109

08005348 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005354:	68f9      	ldr	r1, [r7, #12]
 8005356:	4809      	ldr	r0, [pc, #36]	@ (800537c <pbuf_free_custom+0x34>)
 8005358:	f007 f86a 	bl	800c430 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800535c:	4b08      	ldr	r3, [pc, #32]	@ (8005380 <pbuf_free_custom+0x38>)
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d107      	bne.n	8005374 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005364:	4b06      	ldr	r3, [pc, #24]	@ (8005380 <pbuf_free_custom+0x38>)
 8005366:	2200      	movs	r2, #0
 8005368:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800536a:	4b06      	ldr	r3, [pc, #24]	@ (8005384 <pbuf_free_custom+0x3c>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4618      	mov	r0, r3
 8005370:	f000 fe72 	bl	8006058 <osSemaphoreRelease>
  }
}
 8005374:	bf00      	nop
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	0801b0b0 	.word	0x0801b0b0
 8005380:	240002c8 	.word	0x240002c8
 8005384:	240002cc 	.word	0x240002cc

08005388 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800538c:	f7fc f884 	bl	8001498 <HAL_GetTick>
 8005390:	4603      	mov	r3, r0
}
 8005392:	4618      	mov	r0, r3
 8005394:	bd80      	pop	{r7, pc}
	...

08005398 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b08e      	sub	sp, #56	@ 0x38
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80053a4:	2200      	movs	r2, #0
 80053a6:	601a      	str	r2, [r3, #0]
 80053a8:	605a      	str	r2, [r3, #4]
 80053aa:	609a      	str	r2, [r3, #8]
 80053ac:	60da      	str	r2, [r3, #12]
 80053ae:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a5d      	ldr	r2, [pc, #372]	@ (800552c <HAL_ETH_MspInit+0x194>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	f040 80b3 	bne.w	8005522 <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80053bc:	4b5c      	ldr	r3, [pc, #368]	@ (8005530 <HAL_ETH_MspInit+0x198>)
 80053be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80053c2:	4a5b      	ldr	r2, [pc, #364]	@ (8005530 <HAL_ETH_MspInit+0x198>)
 80053c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053c8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80053cc:	4b58      	ldr	r3, [pc, #352]	@ (8005530 <HAL_ETH_MspInit+0x198>)
 80053ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80053d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053d6:	623b      	str	r3, [r7, #32]
 80053d8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80053da:	4b55      	ldr	r3, [pc, #340]	@ (8005530 <HAL_ETH_MspInit+0x198>)
 80053dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80053e0:	4a53      	ldr	r2, [pc, #332]	@ (8005530 <HAL_ETH_MspInit+0x198>)
 80053e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053e6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80053ea:	4b51      	ldr	r3, [pc, #324]	@ (8005530 <HAL_ETH_MspInit+0x198>)
 80053ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80053f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053f4:	61fb      	str	r3, [r7, #28]
 80053f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80053f8:	4b4d      	ldr	r3, [pc, #308]	@ (8005530 <HAL_ETH_MspInit+0x198>)
 80053fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80053fe:	4a4c      	ldr	r2, [pc, #304]	@ (8005530 <HAL_ETH_MspInit+0x198>)
 8005400:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005404:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005408:	4b49      	ldr	r3, [pc, #292]	@ (8005530 <HAL_ETH_MspInit+0x198>)
 800540a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800540e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005412:	61bb      	str	r3, [r7, #24]
 8005414:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005416:	4b46      	ldr	r3, [pc, #280]	@ (8005530 <HAL_ETH_MspInit+0x198>)
 8005418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800541c:	4a44      	ldr	r2, [pc, #272]	@ (8005530 <HAL_ETH_MspInit+0x198>)
 800541e:	f043 0304 	orr.w	r3, r3, #4
 8005422:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005426:	4b42      	ldr	r3, [pc, #264]	@ (8005530 <HAL_ETH_MspInit+0x198>)
 8005428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800542c:	f003 0304 	and.w	r3, r3, #4
 8005430:	617b      	str	r3, [r7, #20]
 8005432:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005434:	4b3e      	ldr	r3, [pc, #248]	@ (8005530 <HAL_ETH_MspInit+0x198>)
 8005436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800543a:	4a3d      	ldr	r2, [pc, #244]	@ (8005530 <HAL_ETH_MspInit+0x198>)
 800543c:	f043 0301 	orr.w	r3, r3, #1
 8005440:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005444:	4b3a      	ldr	r3, [pc, #232]	@ (8005530 <HAL_ETH_MspInit+0x198>)
 8005446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	613b      	str	r3, [r7, #16]
 8005450:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005452:	4b37      	ldr	r3, [pc, #220]	@ (8005530 <HAL_ETH_MspInit+0x198>)
 8005454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005458:	4a35      	ldr	r2, [pc, #212]	@ (8005530 <HAL_ETH_MspInit+0x198>)
 800545a:	f043 0302 	orr.w	r3, r3, #2
 800545e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005462:	4b33      	ldr	r3, [pc, #204]	@ (8005530 <HAL_ETH_MspInit+0x198>)
 8005464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005468:	f003 0302 	and.w	r3, r3, #2
 800546c:	60fb      	str	r3, [r7, #12]
 800546e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005470:	4b2f      	ldr	r3, [pc, #188]	@ (8005530 <HAL_ETH_MspInit+0x198>)
 8005472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005476:	4a2e      	ldr	r2, [pc, #184]	@ (8005530 <HAL_ETH_MspInit+0x198>)
 8005478:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800547c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005480:	4b2b      	ldr	r3, [pc, #172]	@ (8005530 <HAL_ETH_MspInit+0x198>)
 8005482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005486:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800548a:	60bb      	str	r3, [r7, #8]
 800548c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800548e:	2332      	movs	r3, #50	@ 0x32
 8005490:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005492:	2302      	movs	r3, #2
 8005494:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005496:	2300      	movs	r3, #0
 8005498:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800549a:	2303      	movs	r3, #3
 800549c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800549e:	230b      	movs	r3, #11
 80054a0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80054a6:	4619      	mov	r1, r3
 80054a8:	4822      	ldr	r0, [pc, #136]	@ (8005534 <HAL_ETH_MspInit+0x19c>)
 80054aa:	f7fd fef9 	bl	80032a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80054ae:	2386      	movs	r3, #134	@ 0x86
 80054b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054b2:	2302      	movs	r3, #2
 80054b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054b6:	2300      	movs	r3, #0
 80054b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054ba:	2303      	movs	r3, #3
 80054bc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80054be:	230b      	movs	r3, #11
 80054c0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80054c6:	4619      	mov	r1, r3
 80054c8:	481b      	ldr	r0, [pc, #108]	@ (8005538 <HAL_ETH_MspInit+0x1a0>)
 80054ca:	f7fd fee9 	bl	80032a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80054ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80054d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054d4:	2302      	movs	r3, #2
 80054d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054d8:	2300      	movs	r3, #0
 80054da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054dc:	2303      	movs	r3, #3
 80054de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80054e0:	230b      	movs	r3, #11
 80054e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80054e8:	4619      	mov	r1, r3
 80054ea:	4814      	ldr	r0, [pc, #80]	@ (800553c <HAL_ETH_MspInit+0x1a4>)
 80054ec:	f7fd fed8 	bl	80032a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80054f0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80054f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054f6:	2302      	movs	r3, #2
 80054f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054fa:	2300      	movs	r3, #0
 80054fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054fe:	2303      	movs	r3, #3
 8005500:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005502:	230b      	movs	r3, #11
 8005504:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005506:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800550a:	4619      	mov	r1, r3
 800550c:	480c      	ldr	r0, [pc, #48]	@ (8005540 <HAL_ETH_MspInit+0x1a8>)
 800550e:	f7fd fec7 	bl	80032a0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 15, 0);
 8005512:	2200      	movs	r2, #0
 8005514:	210f      	movs	r1, #15
 8005516:	203d      	movs	r0, #61	@ 0x3d
 8005518:	f7fc f8ba 	bl	8001690 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800551c:	203d      	movs	r0, #61	@ 0x3d
 800551e:	f7fc f8d1 	bl	80016c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005522:	bf00      	nop
 8005524:	3738      	adds	r7, #56	@ 0x38
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	40028000 	.word	0x40028000
 8005530:	58024400 	.word	0x58024400
 8005534:	58020800 	.word	0x58020800
 8005538:	58020000 	.word	0x58020000
 800553c:	58020400 	.word	0x58020400
 8005540:	58021800 	.word	0x58021800

08005544 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005548:	4802      	ldr	r0, [pc, #8]	@ (8005554 <ETH_PHY_IO_Init+0x10>)
 800554a:	f7fd f8bd 	bl	80026c8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	bd80      	pop	{r7, pc}
 8005554:	240002d4 	.word	0x240002d4

08005558 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005558:	b480      	push	{r7}
 800555a:	af00      	add	r7, sp, #0
  return 0;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	68f9      	ldr	r1, [r7, #12]
 800557a:	4807      	ldr	r0, [pc, #28]	@ (8005598 <ETH_PHY_IO_ReadReg+0x30>)
 800557c:	f7fc fe0e 	bl	800219c <HAL_ETH_ReadPHYRegister>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d002      	beq.n	800558c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8005586:	f04f 33ff 	mov.w	r3, #4294967295
 800558a:	e000      	b.n	800558e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	240002d4 	.word	0x240002d4

0800559c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	68f9      	ldr	r1, [r7, #12]
 80055ae:	4807      	ldr	r0, [pc, #28]	@ (80055cc <ETH_PHY_IO_WriteReg+0x30>)
 80055b0:	f7fc fe48 	bl	8002244 <HAL_ETH_WritePHYRegister>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d002      	beq.n	80055c0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80055ba:	f04f 33ff 	mov.w	r3, #4294967295
 80055be:	e000      	b.n	80055c2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	240002d4 	.word	0x240002d4

080055d0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80055d4:	f7fb ff60 	bl	8001498 <HAL_GetTick>
 80055d8:	4603      	mov	r3, r0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	bd80      	pop	{r7, pc}
	...

080055e0 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b0a0      	sub	sp, #128	@ 0x80
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80055e8:	f107 0308 	add.w	r3, r7, #8
 80055ec:	2264      	movs	r2, #100	@ 0x64
 80055ee:	2100      	movs	r1, #0
 80055f0:	4618      	mov	r0, r3
 80055f2:	f011 fb82 	bl	8016cfa <memset>
  int32_t PHYLinkState = 0;
 80055f6:	2300      	movs	r3, #0
 80055f8:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80055fa:	2300      	movs	r3, #0
 80055fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80055fe:	2300      	movs	r3, #0
 8005600:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005602:	2300      	movs	r3, #0
 8005604:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800560a:	483a      	ldr	r0, [pc, #232]	@ (80056f4 <ethernet_link_thread+0x114>)
 800560c:	f7fb fe6c 	bl	80012e8 <LAN8742_GetLinkState>
 8005610:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8005612:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005614:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005618:	089b      	lsrs	r3, r3, #2
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	b2db      	uxtb	r3, r3
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00c      	beq.n	800563e <ethernet_link_thread+0x5e>
 8005624:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005626:	2b01      	cmp	r3, #1
 8005628:	dc09      	bgt.n	800563e <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800562a:	4833      	ldr	r0, [pc, #204]	@ (80056f8 <ethernet_link_thread+0x118>)
 800562c:	f7fc fa42 	bl	8001ab4 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8005630:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005632:	f007 f981 	bl	800c938 <netif_set_down>
    netif_set_link_down(netif);
 8005636:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005638:	f007 f9e4 	bl	800ca04 <netif_set_link_down>
 800563c:	e055      	b.n	80056ea <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800563e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005640:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005644:	f003 0304 	and.w	r3, r3, #4
 8005648:	2b00      	cmp	r3, #0
 800564a:	d14e      	bne.n	80056ea <ethernet_link_thread+0x10a>
 800564c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800564e:	2b01      	cmp	r3, #1
 8005650:	dd4b      	ble.n	80056ea <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8005652:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005654:	3b02      	subs	r3, #2
 8005656:	2b03      	cmp	r3, #3
 8005658:	d82a      	bhi.n	80056b0 <ethernet_link_thread+0xd0>
 800565a:	a201      	add	r2, pc, #4	@ (adr r2, 8005660 <ethernet_link_thread+0x80>)
 800565c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005660:	08005671 	.word	0x08005671
 8005664:	08005683 	.word	0x08005683
 8005668:	08005693 	.word	0x08005693
 800566c:	080056a3 	.word	0x080056a3
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005670:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005674:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8005676:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800567a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800567c:	2301      	movs	r3, #1
 800567e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005680:	e017      	b.n	80056b2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005682:	2300      	movs	r3, #0
 8005684:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8005686:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800568a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800568c:	2301      	movs	r3, #1
 800568e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005690:	e00f      	b.n	80056b2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005692:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005696:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8005698:	2300      	movs	r3, #0
 800569a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800569c:	2301      	movs	r3, #1
 800569e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80056a0:	e007      	b.n	80056b2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80056a2:	2300      	movs	r3, #0
 80056a4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80056a6:	2300      	movs	r3, #0
 80056a8:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80056aa:	2301      	movs	r3, #1
 80056ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80056ae:	e000      	b.n	80056b2 <ethernet_link_thread+0xd2>
    default:
      break;
 80056b0:	bf00      	nop
    }

    if(linkchanged)
 80056b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d018      	beq.n	80056ea <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80056b8:	f107 0308 	add.w	r3, r7, #8
 80056bc:	4619      	mov	r1, r3
 80056be:	480e      	ldr	r0, [pc, #56]	@ (80056f8 <ethernet_link_thread+0x118>)
 80056c0:	f7fc fe14 	bl	80022ec <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80056c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056c6:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80056c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056ca:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80056cc:	f107 0308 	add.w	r3, r7, #8
 80056d0:	4619      	mov	r1, r3
 80056d2:	4809      	ldr	r0, [pc, #36]	@ (80056f8 <ethernet_link_thread+0x118>)
 80056d4:	f7fc ffde 	bl	8002694 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 80056d8:	4807      	ldr	r0, [pc, #28]	@ (80056f8 <ethernet_link_thread+0x118>)
 80056da:	f7fc f977 	bl	80019cc <HAL_ETH_Start_IT>
      netif_set_up(netif);
 80056de:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80056e0:	f007 f8be 	bl	800c860 <netif_set_up>
      netif_set_link_up(netif);
 80056e4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80056e6:	f007 f959 	bl	800c99c <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80056ea:	2064      	movs	r0, #100	@ 0x64
 80056ec:	f000 faaf 	bl	8005c4e <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80056f0:	e78b      	b.n	800560a <ethernet_link_thread+0x2a>
 80056f2:	bf00      	nop
 80056f4:	240003bc 	.word	0x240003bc
 80056f8:	240002d4 	.word	0x240002d4

080056fc <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b086      	sub	sp, #24
 8005700:	af02      	add	r7, sp, #8
 8005702:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005704:	4812      	ldr	r0, [pc, #72]	@ (8005750 <HAL_ETH_RxAllocateCallback+0x54>)
 8005706:	f006 fe1f 	bl	800c348 <memp_malloc_pool>
 800570a:	60f8      	str	r0, [r7, #12]
  if (p)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d014      	beq.n	800573c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f103 0220 	add.w	r2, r3, #32
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	4a0d      	ldr	r2, [pc, #52]	@ (8005754 <HAL_ETH_RxAllocateCallback+0x58>)
 8005720:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800572a:	9201      	str	r2, [sp, #4]
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2241      	movs	r2, #65	@ 0x41
 8005732:	2100      	movs	r1, #0
 8005734:	2000      	movs	r0, #0
 8005736:	f007 fb89 	bl	800ce4c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800573a:	e005      	b.n	8005748 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800573c:	4b06      	ldr	r3, [pc, #24]	@ (8005758 <HAL_ETH_RxAllocateCallback+0x5c>)
 800573e:	2201      	movs	r2, #1
 8005740:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	601a      	str	r2, [r3, #0]
}
 8005748:	bf00      	nop
 800574a:	3710      	adds	r7, #16
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	0801b0b0 	.word	0x0801b0b0
 8005754:	08005349 	.word	0x08005349
 8005758:	240002c8 	.word	0x240002c8

0800575c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800575c:	b480      	push	{r7}
 800575e:	b08d      	sub	sp, #52	@ 0x34
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
 8005768:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 8005772:	2300      	movs	r3, #0
 8005774:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	3b20      	subs	r3, #32
 800577a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 800577c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800577e:	2200      	movs	r2, #0
 8005780:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8005782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005784:	2200      	movs	r2, #0
 8005786:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800578a:	887a      	ldrh	r2, [r7, #2]
 800578c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800578e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d103      	bne.n	800579e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005798:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800579a:	601a      	str	r2, [r3, #0]
 800579c:	e003      	b.n	80057a6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800579e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057a4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80057a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057aa:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80057ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057b2:	e009      	b.n	80057c8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80057b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057b6:	891a      	ldrh	r2, [r3, #8]
 80057b8:	887b      	ldrh	r3, [r7, #2]
 80057ba:	4413      	add	r3, r2
 80057bc:	b29a      	uxth	r2, r3
 80057be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057c0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80057c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1f2      	bne.n	80057b4 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80057ce:	887b      	ldrh	r3, [r7, #2]
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	623a      	str	r2, [r7, #32]
 80057d4:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	dd1d      	ble.n	8005818 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80057dc:	6a3b      	ldr	r3, [r7, #32]
 80057de:	f003 021f 	and.w	r2, r3, #31
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	4413      	add	r3, r2
 80057e6:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80057e8:	6a3b      	ldr	r3, [r7, #32]
 80057ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80057ec:	f3bf 8f4f 	dsb	sy
}
 80057f0:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80057f2:	4a0d      	ldr	r2, [pc, #52]	@ (8005828 <HAL_ETH_RxLinkCallback+0xcc>)
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	3320      	adds	r3, #32
 80057fe:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	3b20      	subs	r3, #32
 8005804:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	2b00      	cmp	r3, #0
 800580a:	dcf2      	bgt.n	80057f2 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 800580c:	f3bf 8f4f 	dsb	sy
}
 8005810:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005812:	f3bf 8f6f 	isb	sy
}
 8005816:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8005818:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 800581a:	bf00      	nop
 800581c:	3734      	adds	r7, #52	@ 0x34
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	e000ed00 	.word	0xe000ed00

0800582c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f007 fcc3 	bl	800d1c0 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800583a:	bf00      	nop
 800583c:	3708      	adds	r7, #8
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
	...

08005844 <__NVIC_SetPriority>:
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	4603      	mov	r3, r0
 800584c:	6039      	str	r1, [r7, #0]
 800584e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005850:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005854:	2b00      	cmp	r3, #0
 8005856:	db0a      	blt.n	800586e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	b2da      	uxtb	r2, r3
 800585c:	490c      	ldr	r1, [pc, #48]	@ (8005890 <__NVIC_SetPriority+0x4c>)
 800585e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005862:	0112      	lsls	r2, r2, #4
 8005864:	b2d2      	uxtb	r2, r2
 8005866:	440b      	add	r3, r1
 8005868:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800586c:	e00a      	b.n	8005884 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	b2da      	uxtb	r2, r3
 8005872:	4908      	ldr	r1, [pc, #32]	@ (8005894 <__NVIC_SetPriority+0x50>)
 8005874:	88fb      	ldrh	r3, [r7, #6]
 8005876:	f003 030f 	and.w	r3, r3, #15
 800587a:	3b04      	subs	r3, #4
 800587c:	0112      	lsls	r2, r2, #4
 800587e:	b2d2      	uxtb	r2, r2
 8005880:	440b      	add	r3, r1
 8005882:	761a      	strb	r2, [r3, #24]
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr
 8005890:	e000e100 	.word	0xe000e100
 8005894:	e000ed00 	.word	0xe000ed00

08005898 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005898:	b580      	push	{r7, lr}
 800589a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800589c:	4b05      	ldr	r3, [pc, #20]	@ (80058b4 <SysTick_Handler+0x1c>)
 800589e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80058a0:	f002 fb22 	bl	8007ee8 <xTaskGetSchedulerState>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d001      	beq.n	80058ae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80058aa:	f003 fab5 	bl	8008e18 <xPortSysTickHandler>
  }
}
 80058ae:	bf00      	nop
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	e000e010 	.word	0xe000e010

080058b8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80058b8:	b580      	push	{r7, lr}
 80058ba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80058bc:	2100      	movs	r1, #0
 80058be:	f06f 0004 	mvn.w	r0, #4
 80058c2:	f7ff ffbf 	bl	8005844 <__NVIC_SetPriority>
#endif
}
 80058c6:	bf00      	nop
 80058c8:	bd80      	pop	{r7, pc}
	...

080058cc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058d2:	f3ef 8305 	mrs	r3, IPSR
 80058d6:	603b      	str	r3, [r7, #0]
  return(result);
 80058d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80058de:	f06f 0305 	mvn.w	r3, #5
 80058e2:	607b      	str	r3, [r7, #4]
 80058e4:	e00c      	b.n	8005900 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80058e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005910 <osKernelInitialize+0x44>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d105      	bne.n	80058fa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80058ee:	4b08      	ldr	r3, [pc, #32]	@ (8005910 <osKernelInitialize+0x44>)
 80058f0:	2201      	movs	r2, #1
 80058f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80058f4:	2300      	movs	r3, #0
 80058f6:	607b      	str	r3, [r7, #4]
 80058f8:	e002      	b.n	8005900 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80058fa:	f04f 33ff 	mov.w	r3, #4294967295
 80058fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005900:	687b      	ldr	r3, [r7, #4]
}
 8005902:	4618      	mov	r0, r3
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	240003dc 	.word	0x240003dc

08005914 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800591a:	f3ef 8305 	mrs	r3, IPSR
 800591e:	603b      	str	r3, [r7, #0]
  return(result);
 8005920:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005926:	f06f 0305 	mvn.w	r3, #5
 800592a:	607b      	str	r3, [r7, #4]
 800592c:	e010      	b.n	8005950 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800592e:	4b0b      	ldr	r3, [pc, #44]	@ (800595c <osKernelStart+0x48>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d109      	bne.n	800594a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005936:	f7ff ffbf 	bl	80058b8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800593a:	4b08      	ldr	r3, [pc, #32]	@ (800595c <osKernelStart+0x48>)
 800593c:	2202      	movs	r2, #2
 800593e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005940:	f001 fee4 	bl	800770c <vTaskStartScheduler>
      stat = osOK;
 8005944:	2300      	movs	r3, #0
 8005946:	607b      	str	r3, [r7, #4]
 8005948:	e002      	b.n	8005950 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800594a:	f04f 33ff 	mov.w	r3, #4294967295
 800594e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005950:	687b      	ldr	r3, [r7, #4]
}
 8005952:	4618      	mov	r0, r3
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	240003dc 	.word	0x240003dc

08005960 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005966:	f3ef 8305 	mrs	r3, IPSR
 800596a:	603b      	str	r3, [r7, #0]
  return(result);
 800596c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8005972:	f001 ffd9 	bl	8007928 <xTaskGetTickCountFromISR>
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	e002      	b.n	8005980 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800597a:	f001 ffc5 	bl	8007908 <xTaskGetTickCount>
 800597e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8005980:	687b      	ldr	r3, [r7, #4]
}
 8005982:	4618      	mov	r0, r3
 8005984:	3708      	adds	r7, #8
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800598a:	b580      	push	{r7, lr}
 800598c:	b08e      	sub	sp, #56	@ 0x38
 800598e:	af04      	add	r7, sp, #16
 8005990:	60f8      	str	r0, [r7, #12]
 8005992:	60b9      	str	r1, [r7, #8]
 8005994:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005996:	2300      	movs	r3, #0
 8005998:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800599a:	f3ef 8305 	mrs	r3, IPSR
 800599e:	617b      	str	r3, [r7, #20]
  return(result);
 80059a0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d17e      	bne.n	8005aa4 <osThreadNew+0x11a>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d07b      	beq.n	8005aa4 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80059ac:	2380      	movs	r3, #128	@ 0x80
 80059ae:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80059b0:	2318      	movs	r3, #24
 80059b2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80059b4:	2300      	movs	r3, #0
 80059b6:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80059b8:	f04f 33ff 	mov.w	r3, #4294967295
 80059bc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d045      	beq.n	8005a50 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d002      	beq.n	80059d2 <osThreadNew+0x48>
        name = attr->name;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d002      	beq.n	80059e0 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d008      	beq.n	80059f8 <osThreadNew+0x6e>
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	2b38      	cmp	r3, #56	@ 0x38
 80059ea:	d805      	bhi.n	80059f8 <osThreadNew+0x6e>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f003 0301 	and.w	r3, r3, #1
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d001      	beq.n	80059fc <osThreadNew+0x72>
        return (NULL);
 80059f8:	2300      	movs	r3, #0
 80059fa:	e054      	b.n	8005aa6 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d003      	beq.n	8005a0c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	089b      	lsrs	r3, r3, #2
 8005a0a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00e      	beq.n	8005a32 <osThreadNew+0xa8>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	2ba7      	cmp	r3, #167	@ 0xa7
 8005a1a:	d90a      	bls.n	8005a32 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d006      	beq.n	8005a32 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d002      	beq.n	8005a32 <osThreadNew+0xa8>
        mem = 1;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	61bb      	str	r3, [r7, #24]
 8005a30:	e010      	b.n	8005a54 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10c      	bne.n	8005a54 <osThreadNew+0xca>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d108      	bne.n	8005a54 <osThreadNew+0xca>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d104      	bne.n	8005a54 <osThreadNew+0xca>
          mem = 0;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	61bb      	str	r3, [r7, #24]
 8005a4e:	e001      	b.n	8005a54 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005a50:	2300      	movs	r3, #0
 8005a52:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d110      	bne.n	8005a7c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a62:	9202      	str	r2, [sp, #8]
 8005a64:	9301      	str	r3, [sp, #4]
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	9300      	str	r3, [sp, #0]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	6a3a      	ldr	r2, [r7, #32]
 8005a6e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f001 fca3 	bl	80073bc <xTaskCreateStatic>
 8005a76:	4603      	mov	r3, r0
 8005a78:	613b      	str	r3, [r7, #16]
 8005a7a:	e013      	b.n	8005aa4 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d110      	bne.n	8005aa4 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005a82:	6a3b      	ldr	r3, [r7, #32]
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	f107 0310 	add.w	r3, r7, #16
 8005a8a:	9301      	str	r3, [sp, #4]
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f001 fcc5 	bl	8007424 <xTaskCreate>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d001      	beq.n	8005aa4 <osThreadNew+0x11a>
            hTask = NULL;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005aa4:	693b      	ldr	r3, [r7, #16]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3728      	adds	r7, #40	@ 0x28
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
	...

08005ab0 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b088      	sub	sp, #32
 8005ab4:	af02      	add	r7, sp, #8
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d002      	beq.n	8005aca <osThreadFlagsSet+0x1a>
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	da03      	bge.n	8005ad2 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8005aca:	f06f 0303 	mvn.w	r3, #3
 8005ace:	60fb      	str	r3, [r7, #12]
 8005ad0:	e035      	b.n	8005b3e <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8005ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ad6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ad8:	f3ef 8305 	mrs	r3, IPSR
 8005adc:	613b      	str	r3, [r7, #16]
  return(result);
 8005ade:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d01f      	beq.n	8005b24 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8005ae8:	f107 0308 	add.w	r3, r7, #8
 8005aec:	9300      	str	r3, [sp, #0]
 8005aee:	2300      	movs	r3, #0
 8005af0:	2201      	movs	r2, #1
 8005af2:	6839      	ldr	r1, [r7, #0]
 8005af4:	6978      	ldr	r0, [r7, #20]
 8005af6:	f002 fc37 	bl	8008368 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8005afa:	f107 030c 	add.w	r3, r7, #12
 8005afe:	2200      	movs	r2, #0
 8005b00:	9200      	str	r2, [sp, #0]
 8005b02:	2200      	movs	r2, #0
 8005b04:	2100      	movs	r1, #0
 8005b06:	6978      	ldr	r0, [r7, #20]
 8005b08:	f002 fc2e 	bl	8008368 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d015      	beq.n	8005b3e <osThreadFlagsSet+0x8e>
 8005b12:	4b0d      	ldr	r3, [pc, #52]	@ (8005b48 <osThreadFlagsSet+0x98>)
 8005b14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b18:	601a      	str	r2, [r3, #0]
 8005b1a:	f3bf 8f4f 	dsb	sy
 8005b1e:	f3bf 8f6f 	isb	sy
 8005b22:	e00c      	b.n	8005b3e <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8005b24:	2300      	movs	r3, #0
 8005b26:	2201      	movs	r2, #1
 8005b28:	6839      	ldr	r1, [r7, #0]
 8005b2a:	6978      	ldr	r0, [r7, #20]
 8005b2c:	f002 fb8a 	bl	8008244 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8005b30:	f107 030c 	add.w	r3, r7, #12
 8005b34:	2200      	movs	r2, #0
 8005b36:	2100      	movs	r1, #0
 8005b38:	6978      	ldr	r0, [r7, #20]
 8005b3a:	f002 fb83 	bl	8008244 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3718      	adds	r7, #24
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	e000ed04 	.word	0xe000ed04

08005b4c <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b08c      	sub	sp, #48	@ 0x30
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b58:	f3ef 8305 	mrs	r3, IPSR
 8005b5c:	617b      	str	r3, [r7, #20]
  return(result);
 8005b5e:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d003      	beq.n	8005b6c <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8005b64:	f06f 0305 	mvn.w	r3, #5
 8005b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b6a:	e06b      	b.n	8005c44 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	da03      	bge.n	8005b7a <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8005b72:	f06f 0303 	mvn.w	r3, #3
 8005b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b78:	e064      	b.n	8005c44 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	f003 0302 	and.w	r3, r3, #2
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d002      	beq.n	8005b8a <osThreadFlagsWait+0x3e>
      clear = 0U;
 8005b84:	2300      	movs	r3, #0
 8005b86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b88:	e001      	b.n	8005b8e <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 8005b96:	f001 feb7 	bl	8007908 <xTaskGetTickCount>
 8005b9a:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8005b9c:	f107 0210 	add.w	r2, r7, #16
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ba4:	2000      	movs	r0, #0
 8005ba6:	f002 faed 	bl	8008184 <xTaskNotifyWait>
 8005baa:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d137      	bne.n	8005c22 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8005bb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00c      	beq.n	8005be6 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d032      	beq.n	8005c3e <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d10f      	bne.n	8005bfe <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8005bde:	f06f 0302 	mvn.w	r3, #2
 8005be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8005be4:	e02e      	b.n	8005c44 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bea:	4013      	ands	r3, r2
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d128      	bne.n	8005c42 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d103      	bne.n	8005bfe <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8005bf6:	f06f 0302 	mvn.w	r3, #2
 8005bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8005bfc:	e022      	b.n	8005c44 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8005bfe:	f001 fe83 	bl	8007908 <xTaskGetTickCount>
 8005c02:	4602      	mov	r2, r0
 8005c04:	6a3b      	ldr	r3, [r7, #32]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8005c0a:	69ba      	ldr	r2, [r7, #24]
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d902      	bls.n	8005c18 <osThreadFlagsWait+0xcc>
          tout  = 0;
 8005c12:	2300      	movs	r3, #0
 8005c14:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c16:	e00e      	b.n	8005c36 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8005c18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c20:	e009      	b.n	8005c36 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d103      	bne.n	8005c30 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8005c28:	f06f 0302 	mvn.w	r3, #2
 8005c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c2e:	e002      	b.n	8005c36 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8005c30:	f06f 0301 	mvn.w	r3, #1
 8005c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1af      	bne.n	8005b9c <osThreadFlagsWait+0x50>
 8005c3c:	e002      	b.n	8005c44 <osThreadFlagsWait+0xf8>
            break;
 8005c3e:	bf00      	nop
 8005c40:	e000      	b.n	8005c44 <osThreadFlagsWait+0xf8>
            break;
 8005c42:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8005c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3730      	adds	r7, #48	@ 0x30
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b084      	sub	sp, #16
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c56:	f3ef 8305 	mrs	r3, IPSR
 8005c5a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c5c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d003      	beq.n	8005c6a <osDelay+0x1c>
    stat = osErrorISR;
 8005c62:	f06f 0305 	mvn.w	r3, #5
 8005c66:	60fb      	str	r3, [r7, #12]
 8005c68:	e007      	b.n	8005c7a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d002      	beq.n	8005c7a <osDelay+0x2c>
      vTaskDelay(ticks);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f001 fd21 	bl	80076bc <vTaskDelay>
    }
  }

  return (stat);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3710      	adds	r7, #16
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b088      	sub	sp, #32
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c90:	f3ef 8305 	mrs	r3, IPSR
 8005c94:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c96:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d174      	bne.n	8005d86 <osMutexNew+0x102>
    if (attr != NULL) {
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d003      	beq.n	8005caa <osMutexNew+0x26>
      type = attr->attr_bits;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	61bb      	str	r3, [r7, #24]
 8005ca8:	e001      	b.n	8005cae <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005caa:	2300      	movs	r3, #0
 8005cac:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	f003 0301 	and.w	r3, r3, #1
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d002      	beq.n	8005cbe <osMutexNew+0x3a>
      rmtx = 1U;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	617b      	str	r3, [r7, #20]
 8005cbc:	e001      	b.n	8005cc2 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	f003 0308 	and.w	r3, r3, #8
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d15c      	bne.n	8005d86 <osMutexNew+0x102>
      mem = -1;
 8005ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd0:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d015      	beq.n	8005d04 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d006      	beq.n	8005cee <osMutexNew+0x6a>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	2b4f      	cmp	r3, #79	@ 0x4f
 8005ce6:	d902      	bls.n	8005cee <osMutexNew+0x6a>
          mem = 1;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	613b      	str	r3, [r7, #16]
 8005cec:	e00c      	b.n	8005d08 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d108      	bne.n	8005d08 <osMutexNew+0x84>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d104      	bne.n	8005d08 <osMutexNew+0x84>
            mem = 0;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	613b      	str	r3, [r7, #16]
 8005d02:	e001      	b.n	8005d08 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005d04:	2300      	movs	r3, #0
 8005d06:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d112      	bne.n	8005d34 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d007      	beq.n	8005d24 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	4619      	mov	r1, r3
 8005d1a:	2004      	movs	r0, #4
 8005d1c:	f000 fd6a 	bl	80067f4 <xQueueCreateMutexStatic>
 8005d20:	61f8      	str	r0, [r7, #28]
 8005d22:	e016      	b.n	8005d52 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	4619      	mov	r1, r3
 8005d2a:	2001      	movs	r0, #1
 8005d2c:	f000 fd62 	bl	80067f4 <xQueueCreateMutexStatic>
 8005d30:	61f8      	str	r0, [r7, #28]
 8005d32:	e00e      	b.n	8005d52 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10b      	bne.n	8005d52 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d004      	beq.n	8005d4a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005d40:	2004      	movs	r0, #4
 8005d42:	f000 fd3f 	bl	80067c4 <xQueueCreateMutex>
 8005d46:	61f8      	str	r0, [r7, #28]
 8005d48:	e003      	b.n	8005d52 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005d4a:	2001      	movs	r0, #1
 8005d4c:	f000 fd3a 	bl	80067c4 <xQueueCreateMutex>
 8005d50:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00c      	beq.n	8005d72 <osMutexNew+0xee>
        if (attr != NULL) {
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d003      	beq.n	8005d66 <osMutexNew+0xe2>
          name = attr->name;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	60fb      	str	r3, [r7, #12]
 8005d64:	e001      	b.n	8005d6a <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005d66:	2300      	movs	r3, #0
 8005d68:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005d6a:	68f9      	ldr	r1, [r7, #12]
 8005d6c:	69f8      	ldr	r0, [r7, #28]
 8005d6e:	f001 fa9d 	bl	80072ac <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d006      	beq.n	8005d86 <osMutexNew+0x102>
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d003      	beq.n	8005d86 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	f043 0301 	orr.w	r3, r3, #1
 8005d84:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005d86:	69fb      	ldr	r3, [r7, #28]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3720      	adds	r7, #32
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f023 0301 	bic.w	r3, r3, #1
 8005da0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f003 0301 	and.w	r3, r3, #1
 8005da8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005daa:	2300      	movs	r3, #0
 8005dac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dae:	f3ef 8305 	mrs	r3, IPSR
 8005db2:	60bb      	str	r3, [r7, #8]
  return(result);
 8005db4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d003      	beq.n	8005dc2 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005dba:	f06f 0305 	mvn.w	r3, #5
 8005dbe:	617b      	str	r3, [r7, #20]
 8005dc0:	e02c      	b.n	8005e1c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d103      	bne.n	8005dd0 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005dc8:	f06f 0303 	mvn.w	r3, #3
 8005dcc:	617b      	str	r3, [r7, #20]
 8005dce:	e025      	b.n	8005e1c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d011      	beq.n	8005dfa <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005dd6:	6839      	ldr	r1, [r7, #0]
 8005dd8:	6938      	ldr	r0, [r7, #16]
 8005dda:	f000 fd4c 	bl	8006876 <xQueueTakeMutexRecursive>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d01b      	beq.n	8005e1c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d003      	beq.n	8005df2 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005dea:	f06f 0301 	mvn.w	r3, #1
 8005dee:	617b      	str	r3, [r7, #20]
 8005df0:	e014      	b.n	8005e1c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005df2:	f06f 0302 	mvn.w	r3, #2
 8005df6:	617b      	str	r3, [r7, #20]
 8005df8:	e010      	b.n	8005e1c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005dfa:	6839      	ldr	r1, [r7, #0]
 8005dfc:	6938      	ldr	r0, [r7, #16]
 8005dfe:	f000 ffc9 	bl	8006d94 <xQueueSemaphoreTake>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d009      	beq.n	8005e1c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d003      	beq.n	8005e16 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005e0e:	f06f 0301 	mvn.w	r3, #1
 8005e12:	617b      	str	r3, [r7, #20]
 8005e14:	e002      	b.n	8005e1c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005e16:	f06f 0302 	mvn.w	r3, #2
 8005e1a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005e1c:	697b      	ldr	r3, [r7, #20]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3718      	adds	r7, #24
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b086      	sub	sp, #24
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f023 0301 	bic.w	r3, r3, #1
 8005e34:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e42:	f3ef 8305 	mrs	r3, IPSR
 8005e46:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e48:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d003      	beq.n	8005e56 <osMutexRelease+0x30>
    stat = osErrorISR;
 8005e4e:	f06f 0305 	mvn.w	r3, #5
 8005e52:	617b      	str	r3, [r7, #20]
 8005e54:	e01f      	b.n	8005e96 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d103      	bne.n	8005e64 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005e5c:	f06f 0303 	mvn.w	r3, #3
 8005e60:	617b      	str	r3, [r7, #20]
 8005e62:	e018      	b.n	8005e96 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d009      	beq.n	8005e7e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005e6a:	6938      	ldr	r0, [r7, #16]
 8005e6c:	f000 fcdd 	bl	800682a <xQueueGiveMutexRecursive>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d00f      	beq.n	8005e96 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005e76:	f06f 0302 	mvn.w	r3, #2
 8005e7a:	617b      	str	r3, [r7, #20]
 8005e7c:	e00b      	b.n	8005e96 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005e7e:	2300      	movs	r3, #0
 8005e80:	2200      	movs	r2, #0
 8005e82:	2100      	movs	r1, #0
 8005e84:	6938      	ldr	r0, [r7, #16]
 8005e86:	f000 fd4f 	bl	8006928 <xQueueGenericSend>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d002      	beq.n	8005e96 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005e90:	f06f 0302 	mvn.w	r3, #2
 8005e94:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005e96:	697b      	ldr	r3, [r7, #20]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3718      	adds	r7, #24
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b08a      	sub	sp, #40	@ 0x28
 8005ea4:	af02      	add	r7, sp, #8
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005eac:	2300      	movs	r3, #0
 8005eae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005eb0:	f3ef 8305 	mrs	r3, IPSR
 8005eb4:	613b      	str	r3, [r7, #16]
  return(result);
 8005eb6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d175      	bne.n	8005fa8 <osSemaphoreNew+0x108>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d072      	beq.n	8005fa8 <osSemaphoreNew+0x108>
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d86e      	bhi.n	8005fa8 <osSemaphoreNew+0x108>
    mem = -1;
 8005eca:	f04f 33ff 	mov.w	r3, #4294967295
 8005ece:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d015      	beq.n	8005f02 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d006      	beq.n	8005eec <osSemaphoreNew+0x4c>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	2b4f      	cmp	r3, #79	@ 0x4f
 8005ee4:	d902      	bls.n	8005eec <osSemaphoreNew+0x4c>
        mem = 1;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	61bb      	str	r3, [r7, #24]
 8005eea:	e00c      	b.n	8005f06 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d108      	bne.n	8005f06 <osSemaphoreNew+0x66>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d104      	bne.n	8005f06 <osSemaphoreNew+0x66>
          mem = 0;
 8005efc:	2300      	movs	r3, #0
 8005efe:	61bb      	str	r3, [r7, #24]
 8005f00:	e001      	b.n	8005f06 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005f02:	2300      	movs	r3, #0
 8005f04:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f0c:	d04c      	beq.n	8005fa8 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d128      	bne.n	8005f66 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d10a      	bne.n	8005f30 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	2203      	movs	r2, #3
 8005f20:	9200      	str	r2, [sp, #0]
 8005f22:	2200      	movs	r2, #0
 8005f24:	2100      	movs	r1, #0
 8005f26:	2001      	movs	r0, #1
 8005f28:	f000 fbb6 	bl	8006698 <xQueueGenericCreateStatic>
 8005f2c:	61f8      	str	r0, [r7, #28]
 8005f2e:	e005      	b.n	8005f3c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005f30:	2203      	movs	r2, #3
 8005f32:	2100      	movs	r1, #0
 8005f34:	2001      	movs	r0, #1
 8005f36:	f000 fbdc 	bl	80066f2 <xQueueGenericCreate>
 8005f3a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d022      	beq.n	8005f88 <osSemaphoreNew+0xe8>
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d01f      	beq.n	8005f88 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005f48:	2300      	movs	r3, #0
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	2100      	movs	r1, #0
 8005f4e:	69f8      	ldr	r0, [r7, #28]
 8005f50:	f000 fcea 	bl	8006928 <xQueueGenericSend>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d016      	beq.n	8005f88 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005f5a:	69f8      	ldr	r0, [r7, #28]
 8005f5c:	f001 f869 	bl	8007032 <vQueueDelete>
            hSemaphore = NULL;
 8005f60:	2300      	movs	r3, #0
 8005f62:	61fb      	str	r3, [r7, #28]
 8005f64:	e010      	b.n	8005f88 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d108      	bne.n	8005f7e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	461a      	mov	r2, r3
 8005f72:	68b9      	ldr	r1, [r7, #8]
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f000 fca6 	bl	80068c6 <xQueueCreateCountingSemaphoreStatic>
 8005f7a:	61f8      	str	r0, [r7, #28]
 8005f7c:	e004      	b.n	8005f88 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005f7e:	68b9      	ldr	r1, [r7, #8]
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f000 fcba 	bl	80068fa <xQueueCreateCountingSemaphore>
 8005f86:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00c      	beq.n	8005fa8 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d003      	beq.n	8005f9c <osSemaphoreNew+0xfc>
          name = attr->name;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	617b      	str	r3, [r7, #20]
 8005f9a:	e001      	b.n	8005fa0 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005fa0:	6979      	ldr	r1, [r7, #20]
 8005fa2:	69f8      	ldr	r0, [r7, #28]
 8005fa4:	f001 f982 	bl	80072ac <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005fa8:	69fb      	ldr	r3, [r7, #28]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3720      	adds	r7, #32
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
	...

08005fb4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b086      	sub	sp, #24
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d103      	bne.n	8005fd4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005fcc:	f06f 0303 	mvn.w	r3, #3
 8005fd0:	617b      	str	r3, [r7, #20]
 8005fd2:	e039      	b.n	8006048 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fd4:	f3ef 8305 	mrs	r3, IPSR
 8005fd8:	60fb      	str	r3, [r7, #12]
  return(result);
 8005fda:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d022      	beq.n	8006026 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d003      	beq.n	8005fee <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005fe6:	f06f 0303 	mvn.w	r3, #3
 8005fea:	617b      	str	r3, [r7, #20]
 8005fec:	e02c      	b.n	8006048 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005ff2:	f107 0308 	add.w	r3, r7, #8
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	6938      	ldr	r0, [r7, #16]
 8005ffc:	f000 ff9a 	bl	8006f34 <xQueueReceiveFromISR>
 8006000:	4603      	mov	r3, r0
 8006002:	2b01      	cmp	r3, #1
 8006004:	d003      	beq.n	800600e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8006006:	f06f 0302 	mvn.w	r3, #2
 800600a:	617b      	str	r3, [r7, #20]
 800600c:	e01c      	b.n	8006048 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d019      	beq.n	8006048 <osSemaphoreAcquire+0x94>
 8006014:	4b0f      	ldr	r3, [pc, #60]	@ (8006054 <osSemaphoreAcquire+0xa0>)
 8006016:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800601a:	601a      	str	r2, [r3, #0]
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	f3bf 8f6f 	isb	sy
 8006024:	e010      	b.n	8006048 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006026:	6839      	ldr	r1, [r7, #0]
 8006028:	6938      	ldr	r0, [r7, #16]
 800602a:	f000 feb3 	bl	8006d94 <xQueueSemaphoreTake>
 800602e:	4603      	mov	r3, r0
 8006030:	2b01      	cmp	r3, #1
 8006032:	d009      	beq.n	8006048 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d003      	beq.n	8006042 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800603a:	f06f 0301 	mvn.w	r3, #1
 800603e:	617b      	str	r3, [r7, #20]
 8006040:	e002      	b.n	8006048 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8006042:	f06f 0302 	mvn.w	r3, #2
 8006046:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006048:	697b      	ldr	r3, [r7, #20]
}
 800604a:	4618      	mov	r0, r3
 800604c:	3718      	adds	r7, #24
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	e000ed04 	.word	0xe000ed04

08006058 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006064:	2300      	movs	r3, #0
 8006066:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d103      	bne.n	8006076 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800606e:	f06f 0303 	mvn.w	r3, #3
 8006072:	617b      	str	r3, [r7, #20]
 8006074:	e02c      	b.n	80060d0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006076:	f3ef 8305 	mrs	r3, IPSR
 800607a:	60fb      	str	r3, [r7, #12]
  return(result);
 800607c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800607e:	2b00      	cmp	r3, #0
 8006080:	d01a      	beq.n	80060b8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006082:	2300      	movs	r3, #0
 8006084:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006086:	f107 0308 	add.w	r3, r7, #8
 800608a:	4619      	mov	r1, r3
 800608c:	6938      	ldr	r0, [r7, #16]
 800608e:	f000 fd74 	bl	8006b7a <xQueueGiveFromISR>
 8006092:	4603      	mov	r3, r0
 8006094:	2b01      	cmp	r3, #1
 8006096:	d003      	beq.n	80060a0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006098:	f06f 0302 	mvn.w	r3, #2
 800609c:	617b      	str	r3, [r7, #20]
 800609e:	e017      	b.n	80060d0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d014      	beq.n	80060d0 <osSemaphoreRelease+0x78>
 80060a6:	4b0d      	ldr	r3, [pc, #52]	@ (80060dc <osSemaphoreRelease+0x84>)
 80060a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060ac:	601a      	str	r2, [r3, #0]
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	f3bf 8f6f 	isb	sy
 80060b6:	e00b      	b.n	80060d0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80060b8:	2300      	movs	r3, #0
 80060ba:	2200      	movs	r2, #0
 80060bc:	2100      	movs	r1, #0
 80060be:	6938      	ldr	r0, [r7, #16]
 80060c0:	f000 fc32 	bl	8006928 <xQueueGenericSend>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d002      	beq.n	80060d0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80060ca:	f06f 0302 	mvn.w	r3, #2
 80060ce:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80060d0:	697b      	ldr	r3, [r7, #20]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3718      	adds	r7, #24
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	e000ed04 	.word	0xe000ed04

080060e0 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060ec:	f3ef 8305 	mrs	r3, IPSR
 80060f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80060f2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d003      	beq.n	8006100 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 80060f8:	f06f 0305 	mvn.w	r3, #5
 80060fc:	617b      	str	r3, [r7, #20]
 80060fe:	e00e      	b.n	800611e <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d103      	bne.n	800610e <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8006106:	f06f 0303 	mvn.w	r3, #3
 800610a:	617b      	str	r3, [r7, #20]
 800610c:	e007      	b.n	800611e <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800610e:	6938      	ldr	r0, [r7, #16]
 8006110:	f001 f8f6 	bl	8007300 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8006114:	2300      	movs	r3, #0
 8006116:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8006118:	6938      	ldr	r0, [r7, #16]
 800611a:	f000 ff8a 	bl	8007032 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800611e:	697b      	ldr	r3, [r7, #20]
}
 8006120:	4618      	mov	r0, r3
 8006122:	3718      	adds	r7, #24
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006128:	b580      	push	{r7, lr}
 800612a:	b08a      	sub	sp, #40	@ 0x28
 800612c:	af02      	add	r7, sp, #8
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006134:	2300      	movs	r3, #0
 8006136:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006138:	f3ef 8305 	mrs	r3, IPSR
 800613c:	613b      	str	r3, [r7, #16]
  return(result);
 800613e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006140:	2b00      	cmp	r3, #0
 8006142:	d15f      	bne.n	8006204 <osMessageQueueNew+0xdc>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d05c      	beq.n	8006204 <osMessageQueueNew+0xdc>
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d059      	beq.n	8006204 <osMessageQueueNew+0xdc>
    mem = -1;
 8006150:	f04f 33ff 	mov.w	r3, #4294967295
 8006154:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d029      	beq.n	80061b0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d012      	beq.n	800618a <osMessageQueueNew+0x62>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	2b4f      	cmp	r3, #79	@ 0x4f
 800616a:	d90e      	bls.n	800618a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00a      	beq.n	800618a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	695a      	ldr	r2, [r3, #20]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	68b9      	ldr	r1, [r7, #8]
 800617c:	fb01 f303 	mul.w	r3, r1, r3
 8006180:	429a      	cmp	r2, r3
 8006182:	d302      	bcc.n	800618a <osMessageQueueNew+0x62>
        mem = 1;
 8006184:	2301      	movs	r3, #1
 8006186:	61bb      	str	r3, [r7, #24]
 8006188:	e014      	b.n	80061b4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d110      	bne.n	80061b4 <osMessageQueueNew+0x8c>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10c      	bne.n	80061b4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d108      	bne.n	80061b4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d104      	bne.n	80061b4 <osMessageQueueNew+0x8c>
          mem = 0;
 80061aa:	2300      	movs	r3, #0
 80061ac:	61bb      	str	r3, [r7, #24]
 80061ae:	e001      	b.n	80061b4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80061b0:	2300      	movs	r3, #0
 80061b2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d10b      	bne.n	80061d2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	691a      	ldr	r2, [r3, #16]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	2100      	movs	r1, #0
 80061c4:	9100      	str	r1, [sp, #0]
 80061c6:	68b9      	ldr	r1, [r7, #8]
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	f000 fa65 	bl	8006698 <xQueueGenericCreateStatic>
 80061ce:	61f8      	str	r0, [r7, #28]
 80061d0:	e008      	b.n	80061e4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d105      	bne.n	80061e4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80061d8:	2200      	movs	r2, #0
 80061da:	68b9      	ldr	r1, [r7, #8]
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 fa88 	bl	80066f2 <xQueueGenericCreate>
 80061e2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00c      	beq.n	8006204 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d003      	beq.n	80061f8 <osMessageQueueNew+0xd0>
        name = attr->name;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	617b      	str	r3, [r7, #20]
 80061f6:	e001      	b.n	80061fc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80061f8:	2300      	movs	r3, #0
 80061fa:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80061fc:	6979      	ldr	r1, [r7, #20]
 80061fe:	69f8      	ldr	r0, [r7, #28]
 8006200:	f001 f854 	bl	80072ac <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006204:	69fb      	ldr	r3, [r7, #28]
}
 8006206:	4618      	mov	r0, r3
 8006208:	3720      	adds	r7, #32
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
	...

08006210 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006210:	b580      	push	{r7, lr}
 8006212:	b088      	sub	sp, #32
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	603b      	str	r3, [r7, #0]
 800621c:	4613      	mov	r3, r2
 800621e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006224:	2300      	movs	r3, #0
 8006226:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006228:	f3ef 8305 	mrs	r3, IPSR
 800622c:	617b      	str	r3, [r7, #20]
  return(result);
 800622e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006230:	2b00      	cmp	r3, #0
 8006232:	d028      	beq.n	8006286 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d005      	beq.n	8006246 <osMessageQueuePut+0x36>
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d002      	beq.n	8006246 <osMessageQueuePut+0x36>
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d003      	beq.n	800624e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006246:	f06f 0303 	mvn.w	r3, #3
 800624a:	61fb      	str	r3, [r7, #28]
 800624c:	e038      	b.n	80062c0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800624e:	2300      	movs	r3, #0
 8006250:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006252:	f107 0210 	add.w	r2, r7, #16
 8006256:	2300      	movs	r3, #0
 8006258:	68b9      	ldr	r1, [r7, #8]
 800625a:	69b8      	ldr	r0, [r7, #24]
 800625c:	f000 fc22 	bl	8006aa4 <xQueueGenericSendFromISR>
 8006260:	4603      	mov	r3, r0
 8006262:	2b01      	cmp	r3, #1
 8006264:	d003      	beq.n	800626e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006266:	f06f 0302 	mvn.w	r3, #2
 800626a:	61fb      	str	r3, [r7, #28]
 800626c:	e028      	b.n	80062c0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d025      	beq.n	80062c0 <osMessageQueuePut+0xb0>
 8006274:	4b15      	ldr	r3, [pc, #84]	@ (80062cc <osMessageQueuePut+0xbc>)
 8006276:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800627a:	601a      	str	r2, [r3, #0]
 800627c:	f3bf 8f4f 	dsb	sy
 8006280:	f3bf 8f6f 	isb	sy
 8006284:	e01c      	b.n	80062c0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d002      	beq.n	8006292 <osMessageQueuePut+0x82>
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d103      	bne.n	800629a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006292:	f06f 0303 	mvn.w	r3, #3
 8006296:	61fb      	str	r3, [r7, #28]
 8006298:	e012      	b.n	80062c0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800629a:	2300      	movs	r3, #0
 800629c:	683a      	ldr	r2, [r7, #0]
 800629e:	68b9      	ldr	r1, [r7, #8]
 80062a0:	69b8      	ldr	r0, [r7, #24]
 80062a2:	f000 fb41 	bl	8006928 <xQueueGenericSend>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d009      	beq.n	80062c0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d003      	beq.n	80062ba <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80062b2:	f06f 0301 	mvn.w	r3, #1
 80062b6:	61fb      	str	r3, [r7, #28]
 80062b8:	e002      	b.n	80062c0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80062ba:	f06f 0302 	mvn.w	r3, #2
 80062be:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80062c0:	69fb      	ldr	r3, [r7, #28]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3720      	adds	r7, #32
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	e000ed04 	.word	0xe000ed04

080062d0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b088      	sub	sp, #32
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
 80062dc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80062e2:	2300      	movs	r3, #0
 80062e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062e6:	f3ef 8305 	mrs	r3, IPSR
 80062ea:	617b      	str	r3, [r7, #20]
  return(result);
 80062ec:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d028      	beq.n	8006344 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d005      	beq.n	8006304 <osMessageQueueGet+0x34>
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d002      	beq.n	8006304 <osMessageQueueGet+0x34>
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d003      	beq.n	800630c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006304:	f06f 0303 	mvn.w	r3, #3
 8006308:	61fb      	str	r3, [r7, #28]
 800630a:	e037      	b.n	800637c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800630c:	2300      	movs	r3, #0
 800630e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006310:	f107 0310 	add.w	r3, r7, #16
 8006314:	461a      	mov	r2, r3
 8006316:	68b9      	ldr	r1, [r7, #8]
 8006318:	69b8      	ldr	r0, [r7, #24]
 800631a:	f000 fe0b 	bl	8006f34 <xQueueReceiveFromISR>
 800631e:	4603      	mov	r3, r0
 8006320:	2b01      	cmp	r3, #1
 8006322:	d003      	beq.n	800632c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006324:	f06f 0302 	mvn.w	r3, #2
 8006328:	61fb      	str	r3, [r7, #28]
 800632a:	e027      	b.n	800637c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d024      	beq.n	800637c <osMessageQueueGet+0xac>
 8006332:	4b15      	ldr	r3, [pc, #84]	@ (8006388 <osMessageQueueGet+0xb8>)
 8006334:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006338:	601a      	str	r2, [r3, #0]
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	e01b      	b.n	800637c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d002      	beq.n	8006350 <osMessageQueueGet+0x80>
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d103      	bne.n	8006358 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006350:	f06f 0303 	mvn.w	r3, #3
 8006354:	61fb      	str	r3, [r7, #28]
 8006356:	e011      	b.n	800637c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006358:	683a      	ldr	r2, [r7, #0]
 800635a:	68b9      	ldr	r1, [r7, #8]
 800635c:	69b8      	ldr	r0, [r7, #24]
 800635e:	f000 fc69 	bl	8006c34 <xQueueReceive>
 8006362:	4603      	mov	r3, r0
 8006364:	2b01      	cmp	r3, #1
 8006366:	d009      	beq.n	800637c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d003      	beq.n	8006376 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800636e:	f06f 0301 	mvn.w	r3, #1
 8006372:	61fb      	str	r3, [r7, #28]
 8006374:	e002      	b.n	800637c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006376:	f06f 0302 	mvn.w	r3, #2
 800637a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800637c:	69fb      	ldr	r3, [r7, #28]
}
 800637e:	4618      	mov	r0, r3
 8006380:	3720      	adds	r7, #32
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	e000ed04 	.word	0xe000ed04

0800638c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800638c:	b580      	push	{r7, lr}
 800638e:	b086      	sub	sp, #24
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d102      	bne.n	80063a4 <osMessageQueueGetCount+0x18>
    count = 0U;
 800639e:	2300      	movs	r3, #0
 80063a0:	617b      	str	r3, [r7, #20]
 80063a2:	e00e      	b.n	80063c2 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063a4:	f3ef 8305 	mrs	r3, IPSR
 80063a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80063aa:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d004      	beq.n	80063ba <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80063b0:	6938      	ldr	r0, [r7, #16]
 80063b2:	f000 fe2e 	bl	8007012 <uxQueueMessagesWaitingFromISR>
 80063b6:	6178      	str	r0, [r7, #20]
 80063b8:	e003      	b.n	80063c2 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80063ba:	6938      	ldr	r0, [r7, #16]
 80063bc:	f000 fe19 	bl	8006ff2 <uxQueueMessagesWaiting>
 80063c0:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 80063c2:	697b      	ldr	r3, [r7, #20]
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3718      	adds	r7, #24
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063d8:	f3ef 8305 	mrs	r3, IPSR
 80063dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80063de:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d003      	beq.n	80063ec <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 80063e4:	f06f 0305 	mvn.w	r3, #5
 80063e8:	617b      	str	r3, [r7, #20]
 80063ea:	e00e      	b.n	800640a <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d103      	bne.n	80063fa <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 80063f2:	f06f 0303 	mvn.w	r3, #3
 80063f6:	617b      	str	r3, [r7, #20]
 80063f8:	e007      	b.n	800640a <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 80063fa:	6938      	ldr	r0, [r7, #16]
 80063fc:	f000 ff80 	bl	8007300 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8006400:	2300      	movs	r3, #0
 8006402:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 8006404:	6938      	ldr	r0, [r7, #16]
 8006406:	f000 fe14 	bl	8007032 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800640a:	697b      	ldr	r3, [r7, #20]
}
 800640c:	4618      	mov	r0, r3
 800640e:	3718      	adds	r7, #24
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	4a07      	ldr	r2, [pc, #28]	@ (8006440 <vApplicationGetIdleTaskMemory+0x2c>)
 8006424:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	4a06      	ldr	r2, [pc, #24]	@ (8006444 <vApplicationGetIdleTaskMemory+0x30>)
 800642a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2280      	movs	r2, #128	@ 0x80
 8006430:	601a      	str	r2, [r3, #0]
}
 8006432:	bf00      	nop
 8006434:	3714      	adds	r7, #20
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	240003e0 	.word	0x240003e0
 8006444:	24000488 	.word	0x24000488

08006448 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	4a07      	ldr	r2, [pc, #28]	@ (8006474 <vApplicationGetTimerTaskMemory+0x2c>)
 8006458:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	4a06      	ldr	r2, [pc, #24]	@ (8006478 <vApplicationGetTimerTaskMemory+0x30>)
 800645e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006466:	601a      	str	r2, [r3, #0]
}
 8006468:	bf00      	nop
 800646a:	3714      	adds	r7, #20
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr
 8006474:	24000688 	.word	0x24000688
 8006478:	24000730 	.word	0x24000730

0800647c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f103 0208 	add.w	r2, r3, #8
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f04f 32ff 	mov.w	r2, #4294967295
 8006494:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f103 0208 	add.w	r2, r3, #8
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f103 0208 	add.w	r2, r3, #8
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80064ca:	bf00      	nop
 80064cc:	370c      	adds	r7, #12
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80064d6:	b480      	push	{r7}
 80064d8:	b085      	sub	sp, #20
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
 80064de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	689a      	ldr	r2, [r3, #8]
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	683a      	ldr	r2, [r7, #0]
 80064fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	683a      	ldr	r2, [r7, #0]
 8006500:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	1c5a      	adds	r2, r3, #1
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	601a      	str	r2, [r3, #0]
}
 8006512:	bf00      	nop
 8006514:	3714      	adds	r7, #20
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr

0800651e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800651e:	b480      	push	{r7}
 8006520:	b085      	sub	sp, #20
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006534:	d103      	bne.n	800653e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	60fb      	str	r3, [r7, #12]
 800653c:	e00c      	b.n	8006558 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	3308      	adds	r3, #8
 8006542:	60fb      	str	r3, [r7, #12]
 8006544:	e002      	b.n	800654c <vListInsert+0x2e>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	60fb      	str	r3, [r7, #12]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68ba      	ldr	r2, [r7, #8]
 8006554:	429a      	cmp	r2, r3
 8006556:	d2f6      	bcs.n	8006546 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	685a      	ldr	r2, [r3, #4]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	683a      	ldr	r2, [r7, #0]
 8006566:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	683a      	ldr	r2, [r7, #0]
 8006572:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	1c5a      	adds	r2, r3, #1
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	601a      	str	r2, [r3, #0]
}
 8006584:	bf00      	nop
 8006586:	3714      	adds	r7, #20
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	6892      	ldr	r2, [r2, #8]
 80065a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	6852      	ldr	r2, [r2, #4]
 80065b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d103      	bne.n	80065c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	689a      	ldr	r2, [r3, #8]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	1e5a      	subs	r2, r3, #1
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3714      	adds	r7, #20
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 80065f2:	f002 fb9d 	bl	8008d30 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065fe:	68f9      	ldr	r1, [r7, #12]
 8006600:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006602:	fb01 f303 	mul.w	r3, r1, r3
 8006606:	441a      	add	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006622:	3b01      	subs	r3, #1
 8006624:	68f9      	ldr	r1, [r7, #12]
 8006626:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006628:	fb01 f303 	mul.w	r3, r1, r3
 800662c:	441a      	add	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	22ff      	movs	r2, #255	@ 0xff
 8006636:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	22ff      	movs	r2, #255	@ 0xff
 800663e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d114      	bne.n	8006672 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d01a      	beq.n	8006686 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	3310      	adds	r3, #16
 8006654:	4618      	mov	r0, r3
 8006656:	f001 faaf 	bl	8007bb8 <xTaskRemoveFromEventList>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d012      	beq.n	8006686 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006660:	4b0c      	ldr	r3, [pc, #48]	@ (8006694 <xQueueGenericReset+0xb0>)
 8006662:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006666:	601a      	str	r2, [r3, #0]
 8006668:	f3bf 8f4f 	dsb	sy
 800666c:	f3bf 8f6f 	isb	sy
 8006670:	e009      	b.n	8006686 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	3310      	adds	r3, #16
 8006676:	4618      	mov	r0, r3
 8006678:	f7ff ff00 	bl	800647c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	3324      	adds	r3, #36	@ 0x24
 8006680:	4618      	mov	r0, r3
 8006682:	f7ff fefb 	bl	800647c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006686:	f002 fb75 	bl	8008d74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800668a:	2301      	movs	r3, #1
}
 800668c:	4618      	mov	r0, r3
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	e000ed04 	.word	0xe000ed04

08006698 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006698:	b580      	push	{r7, lr}
 800669a:	b088      	sub	sp, #32
 800669c:	af02      	add	r7, sp, #8
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
 80066a4:	603b      	str	r3, [r7, #0]
		supplied. */
		configASSERT( pxStaticQueue != NULL );

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d001      	beq.n	80066b0 <xQueueGenericCreateStatic+0x18>
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	2b00      	cmp	r3, #0
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d101      	bne.n	80066ba <xQueueGenericCreateStatic+0x22>
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	2b00      	cmp	r3, #0
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80066ba:	2350      	movs	r3, #80	@ 0x50
 80066bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 80066be:	693b      	ldr	r3, [r7, #16]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80066c0:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00d      	beq.n	80066e8 <xQueueGenericCreateStatic+0x50>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80066d4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	9300      	str	r3, [sp, #0]
 80066dc:	4613      	mov	r3, r2
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	68b9      	ldr	r1, [r7, #8]
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f000 f831 	bl	800674a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80066e8:	697b      	ldr	r3, [r7, #20]
	}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3718      	adds	r7, #24
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b08a      	sub	sp, #40	@ 0x28
 80066f6:	af02      	add	r7, sp, #8
 80066f8:	60f8      	str	r0, [r7, #12]
 80066fa:	60b9      	str	r1, [r7, #8]
 80066fc:	4613      	mov	r3, r2
 80066fe:	71fb      	strb	r3, [r7, #7]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	fb02 f303 	mul.w	r3, r2, r3
 8006708:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	3350      	adds	r3, #80	@ 0x50
 800670e:	4618      	mov	r0, r3
 8006710:	f002 fbec 	bl	8008eec <pvPortMalloc>
 8006714:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d011      	beq.n	8006740 <xQueueGenericCreate+0x4e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	3350      	adds	r3, #80	@ 0x50
 8006724:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800672e:	79fa      	ldrb	r2, [r7, #7]
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	9300      	str	r3, [sp, #0]
 8006734:	4613      	mov	r3, r2
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	68b9      	ldr	r1, [r7, #8]
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	f000 f805 	bl	800674a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006740:	69bb      	ldr	r3, [r7, #24]
	}
 8006742:	4618      	mov	r0, r3
 8006744:	3720      	adds	r7, #32
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b084      	sub	sp, #16
 800674e:	af00      	add	r7, sp, #0
 8006750:	60f8      	str	r0, [r7, #12]
 8006752:	60b9      	str	r1, [r7, #8]
 8006754:	607a      	str	r2, [r7, #4]
 8006756:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d103      	bne.n	8006766 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	69ba      	ldr	r2, [r7, #24]
 8006762:	601a      	str	r2, [r3, #0]
 8006764:	e002      	b.n	800676c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006778:	2101      	movs	r1, #1
 800677a:	69b8      	ldr	r0, [r7, #24]
 800677c:	f7ff ff32 	bl	80065e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	78fa      	ldrb	r2, [r7, #3]
 8006784:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006788:	bf00      	nop
 800678a:	3710      	adds	r7, #16
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00e      	beq.n	80067bc <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80067b0:	2300      	movs	r3, #0
 80067b2:	2200      	movs	r2, #0
 80067b4:	2100      	movs	r1, #0
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 f8b6 	bl	8006928 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80067bc:	bf00      	nop
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b086      	sub	sp, #24
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	4603      	mov	r3, r0
 80067cc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80067ce:	2301      	movs	r3, #1
 80067d0:	617b      	str	r3, [r7, #20]
 80067d2:	2300      	movs	r3, #0
 80067d4:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80067d6:	79fb      	ldrb	r3, [r7, #7]
 80067d8:	461a      	mov	r2, r3
 80067da:	6939      	ldr	r1, [r7, #16]
 80067dc:	6978      	ldr	r0, [r7, #20]
 80067de:	f7ff ff88 	bl	80066f2 <xQueueGenericCreate>
 80067e2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80067e4:	68f8      	ldr	r0, [r7, #12]
 80067e6:	f7ff ffd3 	bl	8006790 <prvInitialiseMutex>

		return xNewQueue;
 80067ea:	68fb      	ldr	r3, [r7, #12]
	}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3718      	adds	r7, #24
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b088      	sub	sp, #32
 80067f8:	af02      	add	r7, sp, #8
 80067fa:	4603      	mov	r3, r0
 80067fc:	6039      	str	r1, [r7, #0]
 80067fe:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006800:	2301      	movs	r3, #1
 8006802:	617b      	str	r3, [r7, #20]
 8006804:	2300      	movs	r3, #0
 8006806:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006808:	79fb      	ldrb	r3, [r7, #7]
 800680a:	9300      	str	r3, [sp, #0]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	2200      	movs	r2, #0
 8006810:	6939      	ldr	r1, [r7, #16]
 8006812:	6978      	ldr	r0, [r7, #20]
 8006814:	f7ff ff40 	bl	8006698 <xQueueGenericCreateStatic>
 8006818:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	f7ff ffb8 	bl	8006790 <prvInitialiseMutex>

		return xNewQueue;
 8006820:	68fb      	ldr	r3, [r7, #12]
	}
 8006822:	4618      	mov	r0, r3
 8006824:	3718      	adds	r7, #24
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800682a:	b590      	push	{r4, r7, lr}
 800682c:	b085      	sub	sp, #20
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	60bb      	str	r3, [r7, #8]
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	689c      	ldr	r4, [r3, #8]
 800683a:	f001 fb45 	bl	8007ec8 <xTaskGetCurrentTaskHandle>
 800683e:	4603      	mov	r3, r0
 8006840:	429c      	cmp	r4, r3
 8006842:	d111      	bne.n	8006868 <xQueueGiveMutexRecursive+0x3e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	1e5a      	subs	r2, r3, #1
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d105      	bne.n	8006862 <xQueueGiveMutexRecursive+0x38>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006856:	2300      	movs	r3, #0
 8006858:	2200      	movs	r2, #0
 800685a:	2100      	movs	r1, #0
 800685c:	68b8      	ldr	r0, [r7, #8]
 800685e:	f000 f863 	bl	8006928 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006862:	2301      	movs	r3, #1
 8006864:	60fb      	str	r3, [r7, #12]
 8006866:	e001      	b.n	800686c <xQueueGiveMutexRecursive+0x42>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006868:	2300      	movs	r3, #0
 800686a:	60fb      	str	r3, [r7, #12]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800686c:	68fb      	ldr	r3, [r7, #12]
	}
 800686e:	4618      	mov	r0, r3
 8006870:	3714      	adds	r7, #20
 8006872:	46bd      	mov	sp, r7
 8006874:	bd90      	pop	{r4, r7, pc}

08006876 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006876:	b590      	push	{r4, r7, lr}
 8006878:	b085      	sub	sp, #20
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
 800687e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	60bb      	str	r3, [r7, #8]
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	689c      	ldr	r4, [r3, #8]
 8006888:	f001 fb1e 	bl	8007ec8 <xTaskGetCurrentTaskHandle>
 800688c:	4603      	mov	r3, r0
 800688e:	429c      	cmp	r4, r3
 8006890:	d107      	bne.n	80068a2 <xQueueTakeMutexRecursive+0x2c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	1c5a      	adds	r2, r3, #1
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800689c:	2301      	movs	r3, #1
 800689e:	60fb      	str	r3, [r7, #12]
 80068a0:	e00c      	b.n	80068bc <xQueueTakeMutexRecursive+0x46>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80068a2:	6839      	ldr	r1, [r7, #0]
 80068a4:	68b8      	ldr	r0, [r7, #8]
 80068a6:	f000 fa75 	bl	8006d94 <xQueueSemaphoreTake>
 80068aa:	60f8      	str	r0, [r7, #12]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d004      	beq.n	80068bc <xQueueTakeMutexRecursive+0x46>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	1c5a      	adds	r2, r3, #1
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80068bc:	68fb      	ldr	r3, [r7, #12]
	}
 80068be:	4618      	mov	r0, r3
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd90      	pop	{r4, r7, pc}

080068c6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b088      	sub	sp, #32
 80068ca:	af02      	add	r7, sp, #8
 80068cc:	60f8      	str	r0, [r7, #12]
 80068ce:	60b9      	str	r1, [r7, #8]
 80068d0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80068d2:	2302      	movs	r3, #2
 80068d4:	9300      	str	r3, [sp, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	2100      	movs	r1, #0
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f7ff fedb 	bl	8006698 <xQueueGenericCreateStatic>
 80068e2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d002      	beq.n	80068f0 <xQueueCreateCountingSemaphoreStatic+0x2a>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	68ba      	ldr	r2, [r7, #8]
 80068ee:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80068f0:	697b      	ldr	r3, [r7, #20]
	}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3718      	adds	r7, #24
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b084      	sub	sp, #16
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
 8006902:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006904:	2202      	movs	r2, #2
 8006906:	2100      	movs	r1, #0
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f7ff fef2 	bl	80066f2 <xQueueGenericCreate>
 800690e:	60f8      	str	r0, [r7, #12]

		if( xHandle != NULL )
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d002      	beq.n	800691c <xQueueCreateCountingSemaphore+0x22>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	683a      	ldr	r2, [r7, #0]
 800691a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800691c:	68fb      	ldr	r3, [r7, #12]
	}
 800691e:	4618      	mov	r0, r3
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
	...

08006928 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b08a      	sub	sp, #40	@ 0x28
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
 8006934:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006936:	2300      	movs	r3, #0
 8006938:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d102      	bne.n	800694a <xQueueGenericSend+0x22>
 8006944:	6a3b      	ldr	r3, [r7, #32]
 8006946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006948:	2b00      	cmp	r3, #0
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2b02      	cmp	r3, #2
 800694e:	d102      	bne.n	8006956 <xQueueGenericSend+0x2e>
 8006950:	6a3b      	ldr	r3, [r7, #32]
 8006952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006954:	2b01      	cmp	r3, #1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006956:	f001 fac7 	bl	8007ee8 <xTaskGetSchedulerState>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d101      	bne.n	8006964 <xQueueGenericSend+0x3c>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2b00      	cmp	r3, #0
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006964:	f002 f9e4 	bl	8008d30 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006968:	6a3b      	ldr	r3, [r7, #32]
 800696a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800696c:	6a3b      	ldr	r3, [r7, #32]
 800696e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006970:	429a      	cmp	r2, r3
 8006972:	d302      	bcc.n	800697a <xQueueGenericSend+0x52>
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	2b02      	cmp	r3, #2
 8006978:	d129      	bne.n	80069ce <xQueueGenericSend+0xa6>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800697a:	683a      	ldr	r2, [r7, #0]
 800697c:	68b9      	ldr	r1, [r7, #8]
 800697e:	6a38      	ldr	r0, [r7, #32]
 8006980:	f000 fb84 	bl	800708c <prvCopyDataToQueue>
 8006984:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006986:	6a3b      	ldr	r3, [r7, #32]
 8006988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800698a:	2b00      	cmp	r3, #0
 800698c:	d010      	beq.n	80069b0 <xQueueGenericSend+0x88>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800698e:	6a3b      	ldr	r3, [r7, #32]
 8006990:	3324      	adds	r3, #36	@ 0x24
 8006992:	4618      	mov	r0, r3
 8006994:	f001 f910 	bl	8007bb8 <xTaskRemoveFromEventList>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d013      	beq.n	80069c6 <xQueueGenericSend+0x9e>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800699e:	4b40      	ldr	r3, [pc, #256]	@ (8006aa0 <xQueueGenericSend+0x178>)
 80069a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069a4:	601a      	str	r2, [r3, #0]
 80069a6:	f3bf 8f4f 	dsb	sy
 80069aa:	f3bf 8f6f 	isb	sy
 80069ae:	e00a      	b.n	80069c6 <xQueueGenericSend+0x9e>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d007      	beq.n	80069c6 <xQueueGenericSend+0x9e>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80069b6:	4b3a      	ldr	r3, [pc, #232]	@ (8006aa0 <xQueueGenericSend+0x178>)
 80069b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069bc:	601a      	str	r2, [r3, #0]
 80069be:	f3bf 8f4f 	dsb	sy
 80069c2:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80069c6:	f002 f9d5 	bl	8008d74 <vPortExitCritical>
				return pdPASS;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e063      	b.n	8006a96 <xQueueGenericSend+0x16e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d103      	bne.n	80069dc <xQueueGenericSend+0xb4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80069d4:	f002 f9ce 	bl	8008d74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80069d8:	2300      	movs	r3, #0
 80069da:	e05c      	b.n	8006a96 <xQueueGenericSend+0x16e>
				}
				else if( xEntryTimeSet == pdFALSE )
 80069dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d106      	bne.n	80069f0 <xQueueGenericSend+0xc8>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80069e2:	f107 0314 	add.w	r3, r7, #20
 80069e6:	4618      	mov	r0, r3
 80069e8:	f001 f93c 	bl	8007c64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80069ec:	2301      	movs	r3, #1
 80069ee:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80069f0:	f002 f9c0 	bl	8008d74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80069f4:	f000 feea 	bl	80077cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80069f8:	f002 f99a 	bl	8008d30 <vPortEnterCritical>
 80069fc:	6a3b      	ldr	r3, [r7, #32]
 80069fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a02:	b25b      	sxtb	r3, r3
 8006a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a08:	d103      	bne.n	8006a12 <xQueueGenericSend+0xea>
 8006a0a:	6a3b      	ldr	r3, [r7, #32]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a12:	6a3b      	ldr	r3, [r7, #32]
 8006a14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a18:	b25b      	sxtb	r3, r3
 8006a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a1e:	d103      	bne.n	8006a28 <xQueueGenericSend+0x100>
 8006a20:	6a3b      	ldr	r3, [r7, #32]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a28:	f002 f9a4 	bl	8008d74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a2c:	1d3a      	adds	r2, r7, #4
 8006a2e:	f107 0314 	add.w	r3, r7, #20
 8006a32:	4611      	mov	r1, r2
 8006a34:	4618      	mov	r0, r3
 8006a36:	f001 f92b 	bl	8007c90 <xTaskCheckForTimeOut>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d124      	bne.n	8006a8a <xQueueGenericSend+0x162>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006a40:	6a38      	ldr	r0, [r7, #32]
 8006a42:	f000 fc1b 	bl	800727c <prvIsQueueFull>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d018      	beq.n	8006a7e <xQueueGenericSend+0x156>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006a4c:	6a3b      	ldr	r3, [r7, #32]
 8006a4e:	3310      	adds	r3, #16
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	4611      	mov	r1, r2
 8006a54:	4618      	mov	r0, r3
 8006a56:	f001 f87b 	bl	8007b50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006a5a:	6a38      	ldr	r0, [r7, #32]
 8006a5c:	f000 fba6 	bl	80071ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006a60:	f000 fec2 	bl	80077e8 <xTaskResumeAll>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f47f af7c 	bne.w	8006964 <xQueueGenericSend+0x3c>
				{
					portYIELD_WITHIN_API();
 8006a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8006aa0 <xQueueGenericSend+0x178>)
 8006a6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	f3bf 8f4f 	dsb	sy
 8006a78:	f3bf 8f6f 	isb	sy
 8006a7c:	e772      	b.n	8006964 <xQueueGenericSend+0x3c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006a7e:	6a38      	ldr	r0, [r7, #32]
 8006a80:	f000 fb94 	bl	80071ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a84:	f000 feb0 	bl	80077e8 <xTaskResumeAll>
 8006a88:	e76c      	b.n	8006964 <xQueueGenericSend+0x3c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006a8a:	6a38      	ldr	r0, [r7, #32]
 8006a8c:	f000 fb8e 	bl	80071ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a90:	f000 feaa 	bl	80077e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006a94:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3728      	adds	r7, #40	@ 0x28
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	e000ed04 	.word	0xe000ed04

08006aa4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b08c      	sub	sp, #48	@ 0x30
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
 8006ab0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	62bb      	str	r3, [r7, #40]	@ 0x28

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d102      	bne.n	8006ac2 <xQueueGenericSendFromISR+0x1e>
 8006abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ac0:	2b00      	cmp	r3, #0
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d102      	bne.n	8006ace <xQueueGenericSendFromISR+0x2a>
 8006ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006acc:	2b01      	cmp	r3, #1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ace:	f002 f9f3 	bl	8008eb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006ad2:	f3ef 8211 	mrs	r2, BASEPRI
 8006ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ada:	f383 8811 	msr	BASEPRI, r3
 8006ade:	f3bf 8f6f 	isb	sy
 8006ae2:	f3bf 8f4f 	dsb	sy
 8006ae6:	61ba      	str	r2, [r7, #24]
 8006ae8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006aea:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006aec:	627b      	str	r3, [r7, #36]	@ 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d302      	bcc.n	8006b00 <xQueueGenericSendFromISR+0x5c>
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d12f      	bne.n	8006b60 <xQueueGenericSendFromISR+0xbc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b0e:	61fb      	str	r3, [r7, #28]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b10:	683a      	ldr	r2, [r7, #0]
 8006b12:	68b9      	ldr	r1, [r7, #8]
 8006b14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b16:	f000 fab9 	bl	800708c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006b1a:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8006b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b22:	d112      	bne.n	8006b4a <xQueueGenericSendFromISR+0xa6>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d016      	beq.n	8006b5a <xQueueGenericSendFromISR+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b2e:	3324      	adds	r3, #36	@ 0x24
 8006b30:	4618      	mov	r0, r3
 8006b32:	f001 f841 	bl	8007bb8 <xTaskRemoveFromEventList>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d00e      	beq.n	8006b5a <xQueueGenericSendFromISR+0xb6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00b      	beq.n	8006b5a <xQueueGenericSendFromISR+0xb6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2201      	movs	r2, #1
 8006b46:	601a      	str	r2, [r3, #0]
 8006b48:	e007      	b.n	8006b5a <xQueueGenericSendFromISR+0xb6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b4a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006b4e:	3301      	adds	r3, #1
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	b25a      	sxtb	r2, r3
 8006b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
 8006b5e:	e001      	b.n	8006b64 <xQueueGenericSendFromISR+0xc0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006b60:	2300      	movs	r3, #0
 8006b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b66:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006b6e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3730      	adds	r7, #48	@ 0x30
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b08a      	sub	sp, #40	@ 0x28
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
 8006b82:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	623b      	str	r3, [r7, #32]
	configASSERT( pxQueue->uxItemSize == 0 );

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006b88:	6a3b      	ldr	r3, [r7, #32]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d102      	bne.n	8006b96 <xQueueGiveFromISR+0x1c>
 8006b90:	6a3b      	ldr	r3, [r7, #32]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	2b00      	cmp	r3, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b96:	f002 f98f 	bl	8008eb8 <vPortValidateInterruptPriority>
	__asm volatile
 8006b9a:	f3ef 8211 	mrs	r2, BASEPRI
 8006b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	613a      	str	r2, [r7, #16]
 8006bb0:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8006bb2:	693b      	ldr	r3, [r7, #16]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006bb4:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bb6:	6a3b      	ldr	r3, [r7, #32]
 8006bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bba:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006bbc:	6a3b      	ldr	r3, [r7, #32]
 8006bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bc0:	69ba      	ldr	r2, [r7, #24]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d229      	bcs.n	8006c1a <xQueueGiveFromISR+0xa0>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006bc6:	6a3b      	ldr	r3, [r7, #32]
 8006bc8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006bcc:	75fb      	strb	r3, [r7, #23]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	1c5a      	adds	r2, r3, #1
 8006bd2:	6a3b      	ldr	r3, [r7, #32]
 8006bd4:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006bd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bde:	d112      	bne.n	8006c06 <xQueueGiveFromISR+0x8c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006be0:	6a3b      	ldr	r3, [r7, #32]
 8006be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d015      	beq.n	8006c14 <xQueueGiveFromISR+0x9a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006be8:	6a3b      	ldr	r3, [r7, #32]
 8006bea:	3324      	adds	r3, #36	@ 0x24
 8006bec:	4618      	mov	r0, r3
 8006bee:	f000 ffe3 	bl	8007bb8 <xTaskRemoveFromEventList>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00d      	beq.n	8006c14 <xQueueGiveFromISR+0x9a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00a      	beq.n	8006c14 <xQueueGiveFromISR+0x9a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	2201      	movs	r2, #1
 8006c02:	601a      	str	r2, [r3, #0]
 8006c04:	e006      	b.n	8006c14 <xQueueGiveFromISR+0x9a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006c06:	7dfb      	ldrb	r3, [r7, #23]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	b25a      	sxtb	r2, r3
 8006c0e:	6a3b      	ldr	r3, [r7, #32]
 8006c10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006c14:	2301      	movs	r3, #1
 8006c16:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c18:	e001      	b.n	8006c1e <xQueueGiveFromISR+0xa4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	f383 8811 	msr	BASEPRI, r3
}
 8006c28:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3728      	adds	r7, #40	@ 0x28
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b08a      	sub	sp, #40	@ 0x28
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006c40:	2300      	movs	r3, #0
 8006c42:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	623b      	str	r3, [r7, #32]
	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d102      	bne.n	8006c54 <xQueueReceive+0x20>
 8006c4e:	6a3b      	ldr	r3, [r7, #32]
 8006c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c52:	2b00      	cmp	r3, #0

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c54:	f001 f948 	bl	8007ee8 <xTaskGetSchedulerState>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d101      	bne.n	8006c62 <xQueueReceive+0x2e>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2b00      	cmp	r3, #0
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c62:	f002 f865 	bl	8008d30 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c66:	6a3b      	ldr	r3, [r7, #32]
 8006c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c6a:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d01f      	beq.n	8006cb2 <xQueueReceive+0x7e>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c72:	68b9      	ldr	r1, [r7, #8]
 8006c74:	6a38      	ldr	r0, [r7, #32]
 8006c76:	f000 fa73 	bl	8007160 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	1e5a      	subs	r2, r3, #1
 8006c7e:	6a3b      	ldr	r3, [r7, #32]
 8006c80:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c82:	6a3b      	ldr	r3, [r7, #32]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00f      	beq.n	8006caa <xQueueReceive+0x76>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c8a:	6a3b      	ldr	r3, [r7, #32]
 8006c8c:	3310      	adds	r3, #16
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f000 ff92 	bl	8007bb8 <xTaskRemoveFromEventList>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d007      	beq.n	8006caa <xQueueReceive+0x76>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c9a:	4b3d      	ldr	r3, [pc, #244]	@ (8006d90 <xQueueReceive+0x15c>)
 8006c9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ca0:	601a      	str	r2, [r3, #0]
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006caa:	f002 f863 	bl	8008d74 <vPortExitCritical>
				return pdPASS;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e069      	b.n	8006d86 <xQueueReceive+0x152>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d103      	bne.n	8006cc0 <xQueueReceive+0x8c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006cb8:	f002 f85c 	bl	8008d74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	e062      	b.n	8006d86 <xQueueReceive+0x152>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d106      	bne.n	8006cd4 <xQueueReceive+0xa0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006cc6:	f107 0314 	add.w	r3, r7, #20
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f000 ffca 	bl	8007c64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006cd4:	f002 f84e 	bl	8008d74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006cd8:	f000 fd78 	bl	80077cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006cdc:	f002 f828 	bl	8008d30 <vPortEnterCritical>
 8006ce0:	6a3b      	ldr	r3, [r7, #32]
 8006ce2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ce6:	b25b      	sxtb	r3, r3
 8006ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cec:	d103      	bne.n	8006cf6 <xQueueReceive+0xc2>
 8006cee:	6a3b      	ldr	r3, [r7, #32]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006cf6:	6a3b      	ldr	r3, [r7, #32]
 8006cf8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006cfc:	b25b      	sxtb	r3, r3
 8006cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d02:	d103      	bne.n	8006d0c <xQueueReceive+0xd8>
 8006d04:	6a3b      	ldr	r3, [r7, #32]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d0c:	f002 f832 	bl	8008d74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d10:	1d3a      	adds	r2, r7, #4
 8006d12:	f107 0314 	add.w	r3, r7, #20
 8006d16:	4611      	mov	r1, r2
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f000 ffb9 	bl	8007c90 <xTaskCheckForTimeOut>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d123      	bne.n	8006d6c <xQueueReceive+0x138>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d24:	6a38      	ldr	r0, [r7, #32]
 8006d26:	f000 fa93 	bl	8007250 <prvIsQueueEmpty>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d017      	beq.n	8006d60 <xQueueReceive+0x12c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d30:	6a3b      	ldr	r3, [r7, #32]
 8006d32:	3324      	adds	r3, #36	@ 0x24
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	4611      	mov	r1, r2
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f000 ff09 	bl	8007b50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006d3e:	6a38      	ldr	r0, [r7, #32]
 8006d40:	f000 fa34 	bl	80071ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d44:	f000 fd50 	bl	80077e8 <xTaskResumeAll>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d189      	bne.n	8006c62 <xQueueReceive+0x2e>
				{
					portYIELD_WITHIN_API();
 8006d4e:	4b10      	ldr	r3, [pc, #64]	@ (8006d90 <xQueueReceive+0x15c>)
 8006d50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d54:	601a      	str	r2, [r3, #0]
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	f3bf 8f6f 	isb	sy
 8006d5e:	e780      	b.n	8006c62 <xQueueReceive+0x2e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006d60:	6a38      	ldr	r0, [r7, #32]
 8006d62:	f000 fa23 	bl	80071ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d66:	f000 fd3f 	bl	80077e8 <xTaskResumeAll>
 8006d6a:	e77a      	b.n	8006c62 <xQueueReceive+0x2e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006d6c:	6a38      	ldr	r0, [r7, #32]
 8006d6e:	f000 fa1d 	bl	80071ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d72:	f000 fd39 	bl	80077e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d76:	6a38      	ldr	r0, [r7, #32]
 8006d78:	f000 fa6a 	bl	8007250 <prvIsQueueEmpty>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	f43f af6f 	beq.w	8006c62 <xQueueReceive+0x2e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3728      	adds	r7, #40	@ 0x28
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	e000ed04 	.word	0xe000ed04

08006d94 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b08a      	sub	sp, #40	@ 0x28
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006da6:	2300      	movs	r3, #0
 8006da8:	623b      	str	r3, [r7, #32]
	configASSERT( pxQueue->uxItemSize == 0 );

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006daa:	f001 f89d 	bl	8007ee8 <xTaskGetSchedulerState>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d101      	bne.n	8006db8 <xQueueSemaphoreTake+0x24>
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	2b00      	cmp	r3, #0
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006db8:	f001 ffba 	bl	8008d30 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dc0:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d024      	beq.n	8006e12 <xQueueSemaphoreTake+0x7e>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	1e5a      	subs	r2, r3, #1
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d104      	bne.n	8006de2 <xQueueSemaphoreTake+0x4e>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006dd8:	f001 f9c0 	bl	800815c <pvTaskIncrementMutexHeldCount>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00f      	beq.n	8006e0a <xQueueSemaphoreTake+0x76>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	3310      	adds	r3, #16
 8006dee:	4618      	mov	r0, r3
 8006df0:	f000 fee2 	bl	8007bb8 <xTaskRemoveFromEventList>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d007      	beq.n	8006e0a <xQueueSemaphoreTake+0x76>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006dfa:	4b4d      	ldr	r3, [pc, #308]	@ (8006f30 <xQueueSemaphoreTake+0x19c>)
 8006dfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e00:	601a      	str	r2, [r3, #0]
 8006e02:	f3bf 8f4f 	dsb	sy
 8006e06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e0a:	f001 ffb3 	bl	8008d74 <vPortExitCritical>
				return pdPASS;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e089      	b.n	8006f26 <xQueueSemaphoreTake+0x192>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d103      	bne.n	8006e20 <xQueueSemaphoreTake+0x8c>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006e18:	f001 ffac 	bl	8008d74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	e082      	b.n	8006f26 <xQueueSemaphoreTake+0x192>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d106      	bne.n	8006e34 <xQueueSemaphoreTake+0xa0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e26:	f107 030c 	add.w	r3, r7, #12
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f000 ff1a 	bl	8007c64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e30:	2301      	movs	r3, #1
 8006e32:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e34:	f001 ff9e 	bl	8008d74 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e38:	f000 fcc8 	bl	80077cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e3c:	f001 ff78 	bl	8008d30 <vPortEnterCritical>
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e46:	b25b      	sxtb	r3, r3
 8006e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e4c:	d103      	bne.n	8006e56 <xQueueSemaphoreTake+0xc2>
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e5c:	b25b      	sxtb	r3, r3
 8006e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e62:	d103      	bne.n	8006e6c <xQueueSemaphoreTake+0xd8>
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e6c:	f001 ff82 	bl	8008d74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e70:	463a      	mov	r2, r7
 8006e72:	f107 030c 	add.w	r3, r7, #12
 8006e76:	4611      	mov	r1, r2
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f000 ff09 	bl	8007c90 <xTaskCheckForTimeOut>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d132      	bne.n	8006eea <xQueueSemaphoreTake+0x156>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e84:	69f8      	ldr	r0, [r7, #28]
 8006e86:	f000 f9e3 	bl	8007250 <prvIsQueueEmpty>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d026      	beq.n	8006ede <xQueueSemaphoreTake+0x14a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d109      	bne.n	8006eac <xQueueSemaphoreTake+0x118>
					{
						taskENTER_CRITICAL();
 8006e98:	f001 ff4a 	bl	8008d30 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f001 f83f 	bl	8007f24 <xTaskPriorityInherit>
 8006ea6:	6238      	str	r0, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8006ea8:	f001 ff64 	bl	8008d74 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	3324      	adds	r3, #36	@ 0x24
 8006eb0:	683a      	ldr	r2, [r7, #0]
 8006eb2:	4611      	mov	r1, r2
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f000 fe4b 	bl	8007b50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006eba:	69f8      	ldr	r0, [r7, #28]
 8006ebc:	f000 f976 	bl	80071ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ec0:	f000 fc92 	bl	80077e8 <xTaskResumeAll>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f47f af76 	bne.w	8006db8 <xQueueSemaphoreTake+0x24>
				{
					portYIELD_WITHIN_API();
 8006ecc:	4b18      	ldr	r3, [pc, #96]	@ (8006f30 <xQueueSemaphoreTake+0x19c>)
 8006ece:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ed2:	601a      	str	r2, [r3, #0]
 8006ed4:	f3bf 8f4f 	dsb	sy
 8006ed8:	f3bf 8f6f 	isb	sy
 8006edc:	e76c      	b.n	8006db8 <xQueueSemaphoreTake+0x24>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006ede:	69f8      	ldr	r0, [r7, #28]
 8006ee0:	f000 f964 	bl	80071ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ee4:	f000 fc80 	bl	80077e8 <xTaskResumeAll>
 8006ee8:	e766      	b.n	8006db8 <xQueueSemaphoreTake+0x24>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006eea:	69f8      	ldr	r0, [r7, #28]
 8006eec:	f000 f95e 	bl	80071ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ef0:	f000 fc7a 	bl	80077e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ef4:	69f8      	ldr	r0, [r7, #28]
 8006ef6:	f000 f9ab 	bl	8007250 <prvIsQueueEmpty>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f43f af5b 	beq.w	8006db8 <xQueueSemaphoreTake+0x24>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006f02:	6a3b      	ldr	r3, [r7, #32]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00d      	beq.n	8006f24 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006f08:	f001 ff12 	bl	8008d30 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006f0c:	69f8      	ldr	r0, [r7, #28]
 8006f0e:	f000 f8a5 	bl	800705c <prvGetDisinheritPriorityAfterTimeout>
 8006f12:	6178      	str	r0, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	6979      	ldr	r1, [r7, #20]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f001 f8ba 	bl	8008094 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006f20:	f001 ff28 	bl	8008d74 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3728      	adds	r7, #40	@ 0x28
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	e000ed04 	.word	0xe000ed04

08006f34 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b08c      	sub	sp, #48	@ 0x30
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	62bb      	str	r3, [r7, #40]	@ 0x28

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d102      	bne.n	8006f50 <xQueueReceiveFromISR+0x1c>
 8006f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f4e:	2b00      	cmp	r3, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f50:	f001 ffb2 	bl	8008eb8 <vPortValidateInterruptPriority>
	__asm volatile
 8006f54:	f3ef 8211 	mrs	r2, BASEPRI
 8006f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f5c:	f383 8811 	msr	BASEPRI, r3
 8006f60:	f3bf 8f6f 	isb	sy
 8006f64:	f3bf 8f4f 	dsb	sy
 8006f68:	61ba      	str	r2, [r7, #24]
 8006f6a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006f6c:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f6e:	627b      	str	r3, [r7, #36]	@ 0x24
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f74:	623b      	str	r3, [r7, #32]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f76:	6a3b      	ldr	r3, [r7, #32]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d02d      	beq.n	8006fd8 <xQueueReceiveFromISR+0xa4>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f7e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f82:	77fb      	strb	r3, [r7, #31]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f84:	68b9      	ldr	r1, [r7, #8]
 8006f86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f88:	f000 f8ea 	bl	8007160 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006f8c:	6a3b      	ldr	r3, [r7, #32]
 8006f8e:	1e5a      	subs	r2, r3, #1
 8006f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f92:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006f94:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f9c:	d112      	bne.n	8006fc4 <xQueueReceiveFromISR+0x90>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d015      	beq.n	8006fd2 <xQueueReceiveFromISR+0x9e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fa8:	3310      	adds	r3, #16
 8006faa:	4618      	mov	r0, r3
 8006fac:	f000 fe04 	bl	8007bb8 <xTaskRemoveFromEventList>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00d      	beq.n	8006fd2 <xQueueReceiveFromISR+0x9e>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d00a      	beq.n	8006fd2 <xQueueReceiveFromISR+0x9e>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	601a      	str	r2, [r3, #0]
 8006fc2:	e006      	b.n	8006fd2 <xQueueReceiveFromISR+0x9e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006fc4:	7ffb      	ldrb	r3, [r7, #31]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	b25a      	sxtb	r2, r3
 8006fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fd6:	e001      	b.n	8006fdc <xQueueReceiveFromISR+0xa8>
		}
		else
		{
			xReturn = pdFAIL;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fde:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	f383 8811 	msr	BASEPRI, r3
}
 8006fe6:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3730      	adds	r7, #48	@ 0x30
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b084      	sub	sp, #16
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
 8006ffa:	f001 fe99 	bl	8008d30 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007002:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007004:	f001 feb6 	bl	8008d74 <vPortExitCritical>

	return uxReturn;
 8007008:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800700a:	4618      	mov	r0, r3
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8007012:	b480      	push	{r7}
 8007014:	b085      	sub	sp, #20
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
	uxReturn = pxQueue->uxMessagesWaiting;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007022:	60bb      	str	r3, [r7, #8]

	return uxReturn;
 8007024:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007026:	4618      	mov	r0, r3
 8007028:	3714      	adds	r7, #20
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr

08007032 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b084      	sub	sp, #16
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	60fb      	str	r3, [r7, #12]
	configASSERT( pxQueue );
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f000 f95e 	bl	8007300 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800704a:	2b00      	cmp	r3, #0
 800704c:	d102      	bne.n	8007054 <vQueueDelete+0x22>
		{
			vPortFree( pxQueue );
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f001 ffe6 	bl	8009020 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007054:	bf00      	nop
 8007056:	3710      	adds	r7, #16
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007068:	2b00      	cmp	r3, #0
 800706a:	d006      	beq.n	800707a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8007076:	60fb      	str	r3, [r7, #12]
 8007078:	e001      	b.n	800707e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800707a:	2300      	movs	r3, #0
 800707c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800707e:	68fb      	ldr	r3, [r7, #12]
	}
 8007080:	4618      	mov	r0, r3
 8007082:	3714      	adds	r7, #20
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b086      	sub	sp, #24
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007098:	2300      	movs	r3, #0
 800709a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10d      	bne.n	80070c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d14d      	bne.n	800714e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	4618      	mov	r0, r3
 80070b8:	f000 ff9c 	bl	8007ff4 <xTaskPriorityDisinherit>
 80070bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2200      	movs	r2, #0
 80070c2:	609a      	str	r2, [r3, #8]
 80070c4:	e043      	b.n	800714e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d119      	bne.n	8007100 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6858      	ldr	r0, [r3, #4]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070d4:	461a      	mov	r2, r3
 80070d6:	68b9      	ldr	r1, [r7, #8]
 80070d8:	f00f fedb 	bl	8016e92 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	685a      	ldr	r2, [r3, #4]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070e4:	441a      	add	r2, r3
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	685a      	ldr	r2, [r3, #4]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d32b      	bcc.n	800714e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	605a      	str	r2, [r3, #4]
 80070fe:	e026      	b.n	800714e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	68d8      	ldr	r0, [r3, #12]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007108:	461a      	mov	r2, r3
 800710a:	68b9      	ldr	r1, [r7, #8]
 800710c:	f00f fec1 	bl	8016e92 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	68da      	ldr	r2, [r3, #12]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007118:	425b      	negs	r3, r3
 800711a:	441a      	add	r2, r3
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	68da      	ldr	r2, [r3, #12]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	429a      	cmp	r2, r3
 800712a:	d207      	bcs.n	800713c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	689a      	ldr	r2, [r3, #8]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007134:	425b      	negs	r3, r3
 8007136:	441a      	add	r2, r3
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2b02      	cmp	r3, #2
 8007140:	d105      	bne.n	800714e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d002      	beq.n	800714e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	3b01      	subs	r3, #1
 800714c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	1c5a      	adds	r2, r3, #1
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007156:	697b      	ldr	r3, [r7, #20]
}
 8007158:	4618      	mov	r0, r3
 800715a:	3718      	adds	r7, #24
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800716e:	2b00      	cmp	r3, #0
 8007170:	d018      	beq.n	80071a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	68da      	ldr	r2, [r3, #12]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800717a:	441a      	add	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	68da      	ldr	r2, [r3, #12]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	429a      	cmp	r2, r3
 800718a:	d303      	bcc.n	8007194 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	68d9      	ldr	r1, [r3, #12]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800719c:	461a      	mov	r2, r3
 800719e:	6838      	ldr	r0, [r7, #0]
 80071a0:	f00f fe77 	bl	8016e92 <memcpy>
	}
}
 80071a4:	bf00      	nop
 80071a6:	3708      	adds	r7, #8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80071b4:	f001 fdbc 	bl	8008d30 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80071be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071c0:	e011      	b.n	80071e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d012      	beq.n	80071f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	3324      	adds	r3, #36	@ 0x24
 80071ce:	4618      	mov	r0, r3
 80071d0:	f000 fcf2 	bl	8007bb8 <xTaskRemoveFromEventList>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d001      	beq.n	80071de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80071da:	f000 fd9f 	bl	8007d1c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80071de:	7bfb      	ldrb	r3, [r7, #15]
 80071e0:	3b01      	subs	r3, #1
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	dce9      	bgt.n	80071c2 <prvUnlockQueue+0x16>
 80071ee:	e000      	b.n	80071f2 <prvUnlockQueue+0x46>
					break;
 80071f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	22ff      	movs	r2, #255	@ 0xff
 80071f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80071fa:	f001 fdbb 	bl	8008d74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80071fe:	f001 fd97 	bl	8008d30 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007208:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800720a:	e011      	b.n	8007230 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d012      	beq.n	800723a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	3310      	adds	r3, #16
 8007218:	4618      	mov	r0, r3
 800721a:	f000 fccd 	bl	8007bb8 <xTaskRemoveFromEventList>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d001      	beq.n	8007228 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007224:	f000 fd7a 	bl	8007d1c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007228:	7bbb      	ldrb	r3, [r7, #14]
 800722a:	3b01      	subs	r3, #1
 800722c:	b2db      	uxtb	r3, r3
 800722e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007230:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007234:	2b00      	cmp	r3, #0
 8007236:	dce9      	bgt.n	800720c <prvUnlockQueue+0x60>
 8007238:	e000      	b.n	800723c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800723a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	22ff      	movs	r2, #255	@ 0xff
 8007240:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007244:	f001 fd96 	bl	8008d74 <vPortExitCritical>
}
 8007248:	bf00      	nop
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007258:	f001 fd6a 	bl	8008d30 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007260:	2b00      	cmp	r3, #0
 8007262:	d102      	bne.n	800726a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007264:	2301      	movs	r3, #1
 8007266:	60fb      	str	r3, [r7, #12]
 8007268:	e001      	b.n	800726e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800726a:	2300      	movs	r3, #0
 800726c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800726e:	f001 fd81 	bl	8008d74 <vPortExitCritical>

	return xReturn;
 8007272:	68fb      	ldr	r3, [r7, #12]
}
 8007274:	4618      	mov	r0, r3
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007284:	f001 fd54 	bl	8008d30 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007290:	429a      	cmp	r2, r3
 8007292:	d102      	bne.n	800729a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007294:	2301      	movs	r3, #1
 8007296:	60fb      	str	r3, [r7, #12]
 8007298:	e001      	b.n	800729e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800729a:	2300      	movs	r3, #0
 800729c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800729e:	f001 fd69 	bl	8008d74 <vPortExitCritical>

	return xReturn;
 80072a2:	68fb      	ldr	r3, [r7, #12]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072b6:	2300      	movs	r3, #0
 80072b8:	60fb      	str	r3, [r7, #12]
 80072ba:	e014      	b.n	80072e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80072bc:	4a0f      	ldr	r2, [pc, #60]	@ (80072fc <vQueueAddToRegistry+0x50>)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10b      	bne.n	80072e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80072c8:	490c      	ldr	r1, [pc, #48]	@ (80072fc <vQueueAddToRegistry+0x50>)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	683a      	ldr	r2, [r7, #0]
 80072ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80072d2:	4a0a      	ldr	r2, [pc, #40]	@ (80072fc <vQueueAddToRegistry+0x50>)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	00db      	lsls	r3, r3, #3
 80072d8:	4413      	add	r3, r2
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80072de:	e006      	b.n	80072ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	3301      	adds	r3, #1
 80072e4:	60fb      	str	r3, [r7, #12]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2b0b      	cmp	r3, #11
 80072ea:	d9e7      	bls.n	80072bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80072ec:	bf00      	nop
 80072ee:	bf00      	nop
 80072f0:	3714      	adds	r7, #20
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	24000b30 	.word	0x24000b30

08007300 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007300:	b480      	push	{r7}
 8007302:	b085      	sub	sp, #20
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007308:	2300      	movs	r3, #0
 800730a:	60fb      	str	r3, [r7, #12]
 800730c:	e016      	b.n	800733c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800730e:	4a10      	ldr	r2, [pc, #64]	@ (8007350 <vQueueUnregisterQueue+0x50>)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	00db      	lsls	r3, r3, #3
 8007314:	4413      	add	r3, r2
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	429a      	cmp	r2, r3
 800731c:	d10b      	bne.n	8007336 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800731e:	4a0c      	ldr	r2, [pc, #48]	@ (8007350 <vQueueUnregisterQueue+0x50>)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2100      	movs	r1, #0
 8007324:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007328:	4a09      	ldr	r2, [pc, #36]	@ (8007350 <vQueueUnregisterQueue+0x50>)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	00db      	lsls	r3, r3, #3
 800732e:	4413      	add	r3, r2
 8007330:	2200      	movs	r2, #0
 8007332:	605a      	str	r2, [r3, #4]
				break;
 8007334:	e006      	b.n	8007344 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	3301      	adds	r3, #1
 800733a:	60fb      	str	r3, [r7, #12]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2b0b      	cmp	r3, #11
 8007340:	d9e5      	bls.n	800730e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007342:	bf00      	nop
 8007344:	bf00      	nop
 8007346:	3714      	adds	r7, #20
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	24000b30 	.word	0x24000b30

08007354 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007354:	b580      	push	{r7, lr}
 8007356:	b086      	sub	sp, #24
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007364:	f001 fce4 	bl	8008d30 <vPortEnterCritical>
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800736e:	b25b      	sxtb	r3, r3
 8007370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007374:	d103      	bne.n	800737e <vQueueWaitForMessageRestricted+0x2a>
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007384:	b25b      	sxtb	r3, r3
 8007386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800738a:	d103      	bne.n	8007394 <vQueueWaitForMessageRestricted+0x40>
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	2200      	movs	r2, #0
 8007390:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007394:	f001 fcee 	bl	8008d74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800739c:	2b00      	cmp	r3, #0
 800739e:	d106      	bne.n	80073ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	3324      	adds	r3, #36	@ 0x24
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	68b9      	ldr	r1, [r7, #8]
 80073a8:	4618      	mov	r0, r3
 80073aa:	f000 fbe7 	bl	8007b7c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80073ae:	6978      	ldr	r0, [r7, #20]
 80073b0:	f7ff fefc 	bl	80071ac <prvUnlockQueue>
	}
 80073b4:	bf00      	nop
 80073b6:	3718      	adds	r7, #24
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b08c      	sub	sp, #48	@ 0x30
 80073c0:	af04      	add	r7, sp, #16
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	607a      	str	r2, [r7, #4]
 80073c8:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80073ca:	23a8      	movs	r3, #168	@ 0xa8
 80073cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80073ce:	697b      	ldr	r3, [r7, #20]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80073d0:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80073d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d01e      	beq.n	8007416 <xTaskCreateStatic+0x5a>
 80073d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d01b      	beq.n	8007416 <xTaskCreateStatic+0x5a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80073de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e0:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073e6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	2202      	movs	r2, #2
 80073ec:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80073f0:	2300      	movs	r3, #0
 80073f2:	9303      	str	r3, [sp, #12]
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	9302      	str	r3, [sp, #8]
 80073f8:	f107 0318 	add.w	r3, r7, #24
 80073fc:	9301      	str	r3, [sp, #4]
 80073fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007400:	9300      	str	r3, [sp, #0]
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	68b9      	ldr	r1, [r7, #8]
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	f000 f851 	bl	80074b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800740e:	69f8      	ldr	r0, [r7, #28]
 8007410:	f000 f8e4 	bl	80075dc <prvAddNewTaskToReadyList>
 8007414:	e001      	b.n	800741a <xTaskCreateStatic+0x5e>
		}
		else
		{
			xReturn = NULL;
 8007416:	2300      	movs	r3, #0
 8007418:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800741a:	69bb      	ldr	r3, [r7, #24]
	}
 800741c:	4618      	mov	r0, r3
 800741e:	3720      	adds	r7, #32
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007424:	b580      	push	{r7, lr}
 8007426:	b08c      	sub	sp, #48	@ 0x30
 8007428:	af04      	add	r7, sp, #16
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	603b      	str	r3, [r7, #0]
 8007430:	4613      	mov	r3, r2
 8007432:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007434:	88fb      	ldrh	r3, [r7, #6]
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	4618      	mov	r0, r3
 800743a:	f001 fd57 	bl	8008eec <pvPortMalloc>
 800743e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00e      	beq.n	8007464 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007446:	20a8      	movs	r0, #168	@ 0xa8
 8007448:	f001 fd50 	bl	8008eec <pvPortMalloc>
 800744c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d003      	beq.n	800745c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	631a      	str	r2, [r3, #48]	@ 0x30
 800745a:	e005      	b.n	8007468 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800745c:	6978      	ldr	r0, [r7, #20]
 800745e:	f001 fddf 	bl	8009020 <vPortFree>
 8007462:	e001      	b.n	8007468 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007464:	2300      	movs	r3, #0
 8007466:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d017      	beq.n	800749e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007476:	88fa      	ldrh	r2, [r7, #6]
 8007478:	2300      	movs	r3, #0
 800747a:	9303      	str	r3, [sp, #12]
 800747c:	69fb      	ldr	r3, [r7, #28]
 800747e:	9302      	str	r3, [sp, #8]
 8007480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007482:	9301      	str	r3, [sp, #4]
 8007484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007486:	9300      	str	r3, [sp, #0]
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	68b9      	ldr	r1, [r7, #8]
 800748c:	68f8      	ldr	r0, [r7, #12]
 800748e:	f000 f80f 	bl	80074b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007492:	69f8      	ldr	r0, [r7, #28]
 8007494:	f000 f8a2 	bl	80075dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007498:	2301      	movs	r3, #1
 800749a:	61bb      	str	r3, [r7, #24]
 800749c:	e002      	b.n	80074a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800749e:	f04f 33ff 	mov.w	r3, #4294967295
 80074a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80074a4:	69bb      	ldr	r3, [r7, #24]
	}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3720      	adds	r7, #32
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
	...

080074b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b086      	sub	sp, #24
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	607a      	str	r2, [r7, #4]
 80074bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80074be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074c0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	461a      	mov	r2, r3
 80074c8:	21a5      	movs	r1, #165	@ 0xa5
 80074ca:	f00f fc16 	bl	8016cfa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80074ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074d2:	6879      	ldr	r1, [r7, #4]
 80074d4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80074d8:	440b      	add	r3, r1
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	4413      	add	r3, r2
 80074de:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	f023 0307 	bic.w	r3, r3, #7
 80074e6:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d01f      	beq.n	800752e <prvInitialiseNewTask+0x7e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074ee:	2300      	movs	r3, #0
 80074f0:	617b      	str	r3, [r7, #20]
 80074f2:	e012      	b.n	800751a <prvInitialiseNewTask+0x6a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80074f4:	68ba      	ldr	r2, [r7, #8]
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	4413      	add	r3, r2
 80074fa:	7819      	ldrb	r1, [r3, #0]
 80074fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	4413      	add	r3, r2
 8007502:	3334      	adds	r3, #52	@ 0x34
 8007504:	460a      	mov	r2, r1
 8007506:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007508:	68ba      	ldr	r2, [r7, #8]
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	4413      	add	r3, r2
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d006      	beq.n	8007522 <prvInitialiseNewTask+0x72>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	3301      	adds	r3, #1
 8007518:	617b      	str	r3, [r7, #20]
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	2b0f      	cmp	r3, #15
 800751e:	d9e9      	bls.n	80074f4 <prvInitialiseNewTask+0x44>
 8007520:	e000      	b.n	8007524 <prvInitialiseNewTask+0x74>
			{
				break;
 8007522:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007526:	2200      	movs	r2, #0
 8007528:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800752c:	e003      	b.n	8007536 <prvInitialiseNewTask+0x86>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800752e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007530:	2200      	movs	r2, #0
 8007532:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007536:	6a3b      	ldr	r3, [r7, #32]
 8007538:	2b37      	cmp	r3, #55	@ 0x37
 800753a:	d901      	bls.n	8007540 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800753c:	2337      	movs	r3, #55	@ 0x37
 800753e:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007542:	6a3a      	ldr	r2, [r7, #32]
 8007544:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007548:	6a3a      	ldr	r2, [r7, #32]
 800754a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800754c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800754e:	2200      	movs	r2, #0
 8007550:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007554:	3304      	adds	r3, #4
 8007556:	4618      	mov	r0, r3
 8007558:	f7fe ffb0 	bl	80064bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800755c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800755e:	3318      	adds	r3, #24
 8007560:	4618      	mov	r0, r3
 8007562:	f7fe ffab 	bl	80064bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007568:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800756a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800756c:	6a3b      	ldr	r3, [r7, #32]
 800756e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007574:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007578:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800757a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800757c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800757e:	2200      	movs	r2, #0
 8007580:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007586:	2200      	movs	r2, #0
 8007588:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800758c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800758e:	3354      	adds	r3, #84	@ 0x54
 8007590:	224c      	movs	r2, #76	@ 0x4c
 8007592:	2100      	movs	r1, #0
 8007594:	4618      	mov	r0, r3
 8007596:	f00f fbb0 	bl	8016cfa <memset>
 800759a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800759c:	4a0c      	ldr	r2, [pc, #48]	@ (80075d0 <prvInitialiseNewTask+0x120>)
 800759e:	659a      	str	r2, [r3, #88]	@ 0x58
 80075a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075a2:	4a0c      	ldr	r2, [pc, #48]	@ (80075d4 <prvInitialiseNewTask+0x124>)
 80075a4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80075a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075a8:	4a0b      	ldr	r2, [pc, #44]	@ (80075d8 <prvInitialiseNewTask+0x128>)
 80075aa:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80075ac:	683a      	ldr	r2, [r7, #0]
 80075ae:	68f9      	ldr	r1, [r7, #12]
 80075b0:	6938      	ldr	r0, [r7, #16]
 80075b2:	f001 fad7 	bl	8008b64 <pxPortInitialiseStack>
 80075b6:	4602      	mov	r2, r0
 80075b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80075bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d002      	beq.n	80075c8 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80075c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075c8:	bf00      	nop
 80075ca:	3718      	adds	r7, #24
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	24008064 	.word	0x24008064
 80075d4:	240080cc 	.word	0x240080cc
 80075d8:	24008134 	.word	0x24008134

080075dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80075e4:	f001 fba4 	bl	8008d30 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80075e8:	4b2d      	ldr	r3, [pc, #180]	@ (80076a0 <prvAddNewTaskToReadyList+0xc4>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	3301      	adds	r3, #1
 80075ee:	4a2c      	ldr	r2, [pc, #176]	@ (80076a0 <prvAddNewTaskToReadyList+0xc4>)
 80075f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80075f2:	4b2c      	ldr	r3, [pc, #176]	@ (80076a4 <prvAddNewTaskToReadyList+0xc8>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d109      	bne.n	800760e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80075fa:	4a2a      	ldr	r2, [pc, #168]	@ (80076a4 <prvAddNewTaskToReadyList+0xc8>)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007600:	4b27      	ldr	r3, [pc, #156]	@ (80076a0 <prvAddNewTaskToReadyList+0xc4>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2b01      	cmp	r3, #1
 8007606:	d110      	bne.n	800762a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007608:	f000 fbac 	bl	8007d64 <prvInitialiseTaskLists>
 800760c:	e00d      	b.n	800762a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800760e:	4b26      	ldr	r3, [pc, #152]	@ (80076a8 <prvAddNewTaskToReadyList+0xcc>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d109      	bne.n	800762a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007616:	4b23      	ldr	r3, [pc, #140]	@ (80076a4 <prvAddNewTaskToReadyList+0xc8>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007620:	429a      	cmp	r2, r3
 8007622:	d802      	bhi.n	800762a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007624:	4a1f      	ldr	r2, [pc, #124]	@ (80076a4 <prvAddNewTaskToReadyList+0xc8>)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800762a:	4b20      	ldr	r3, [pc, #128]	@ (80076ac <prvAddNewTaskToReadyList+0xd0>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	3301      	adds	r3, #1
 8007630:	4a1e      	ldr	r2, [pc, #120]	@ (80076ac <prvAddNewTaskToReadyList+0xd0>)
 8007632:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007634:	4b1d      	ldr	r3, [pc, #116]	@ (80076ac <prvAddNewTaskToReadyList+0xd0>)
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007640:	4b1b      	ldr	r3, [pc, #108]	@ (80076b0 <prvAddNewTaskToReadyList+0xd4>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	429a      	cmp	r2, r3
 8007646:	d903      	bls.n	8007650 <prvAddNewTaskToReadyList+0x74>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800764c:	4a18      	ldr	r2, [pc, #96]	@ (80076b0 <prvAddNewTaskToReadyList+0xd4>)
 800764e:	6013      	str	r3, [r2, #0]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007654:	4613      	mov	r3, r2
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	4413      	add	r3, r2
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	4a15      	ldr	r2, [pc, #84]	@ (80076b4 <prvAddNewTaskToReadyList+0xd8>)
 800765e:	441a      	add	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	3304      	adds	r3, #4
 8007664:	4619      	mov	r1, r3
 8007666:	4610      	mov	r0, r2
 8007668:	f7fe ff35 	bl	80064d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800766c:	f001 fb82 	bl	8008d74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007670:	4b0d      	ldr	r3, [pc, #52]	@ (80076a8 <prvAddNewTaskToReadyList+0xcc>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00e      	beq.n	8007696 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007678:	4b0a      	ldr	r3, [pc, #40]	@ (80076a4 <prvAddNewTaskToReadyList+0xc8>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007682:	429a      	cmp	r2, r3
 8007684:	d207      	bcs.n	8007696 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007686:	4b0c      	ldr	r3, [pc, #48]	@ (80076b8 <prvAddNewTaskToReadyList+0xdc>)
 8007688:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800768c:	601a      	str	r2, [r3, #0]
 800768e:	f3bf 8f4f 	dsb	sy
 8007692:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007696:	bf00      	nop
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	24001064 	.word	0x24001064
 80076a4:	24000b90 	.word	0x24000b90
 80076a8:	24001070 	.word	0x24001070
 80076ac:	24001080 	.word	0x24001080
 80076b0:	2400106c 	.word	0x2400106c
 80076b4:	24000b94 	.word	0x24000b94
 80076b8:	e000ed04 	.word	0xe000ed04

080076bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80076c4:	2300      	movs	r3, #0
 80076c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00a      	beq.n	80076e4 <vTaskDelay+0x28>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80076ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007704 <vTaskDelay+0x48>)
 80076d0:	681b      	ldr	r3, [r3, #0]
			vTaskSuspendAll();
 80076d2:	f000 f87b 	bl	80077cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80076d6:	2100      	movs	r1, #0
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 fefd 	bl	80084d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80076de:	f000 f883 	bl	80077e8 <xTaskResumeAll>
 80076e2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d107      	bne.n	80076fa <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80076ea:	4b07      	ldr	r3, [pc, #28]	@ (8007708 <vTaskDelay+0x4c>)
 80076ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076f0:	601a      	str	r2, [r3, #0]
 80076f2:	f3bf 8f4f 	dsb	sy
 80076f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80076fa:	bf00      	nop
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	2400108c 	.word	0x2400108c
 8007708:	e000ed04 	.word	0xe000ed04

0800770c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b08a      	sub	sp, #40	@ 0x28
 8007710:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007712:	2300      	movs	r3, #0
 8007714:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007716:	2300      	movs	r3, #0
 8007718:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800771a:	1d3a      	adds	r2, r7, #4
 800771c:	f107 0108 	add.w	r1, r7, #8
 8007720:	f107 030c 	add.w	r3, r7, #12
 8007724:	4618      	mov	r0, r3
 8007726:	f7fe fe75 	bl	8006414 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800772a:	6879      	ldr	r1, [r7, #4]
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	9202      	str	r2, [sp, #8]
 8007732:	9301      	str	r3, [sp, #4]
 8007734:	2300      	movs	r3, #0
 8007736:	9300      	str	r3, [sp, #0]
 8007738:	2300      	movs	r3, #0
 800773a:	460a      	mov	r2, r1
 800773c:	491b      	ldr	r1, [pc, #108]	@ (80077ac <vTaskStartScheduler+0xa0>)
 800773e:	481c      	ldr	r0, [pc, #112]	@ (80077b0 <vTaskStartScheduler+0xa4>)
 8007740:	f7ff fe3c 	bl	80073bc <xTaskCreateStatic>
 8007744:	4603      	mov	r3, r0
 8007746:	4a1b      	ldr	r2, [pc, #108]	@ (80077b4 <vTaskStartScheduler+0xa8>)
 8007748:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800774a:	4b1a      	ldr	r3, [pc, #104]	@ (80077b4 <vTaskStartScheduler+0xa8>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d002      	beq.n	8007758 <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
 8007752:	2301      	movs	r3, #1
 8007754:	617b      	str	r3, [r7, #20]
 8007756:	e001      	b.n	800775c <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
 8007758:	2300      	movs	r3, #0
 800775a:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	2b01      	cmp	r3, #1
 8007760:	d102      	bne.n	8007768 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8007762:	f000 ff0d 	bl	8008580 <xTimerCreateTimerTask>
 8007766:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	2b01      	cmp	r3, #1
 800776c:	d11a      	bne.n	80077a4 <vTaskStartScheduler+0x98>
	__asm volatile
 800776e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	613b      	str	r3, [r7, #16]
}
 8007780:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007782:	4b0d      	ldr	r3, [pc, #52]	@ (80077b8 <vTaskStartScheduler+0xac>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	3354      	adds	r3, #84	@ 0x54
 8007788:	4a0c      	ldr	r2, [pc, #48]	@ (80077bc <vTaskStartScheduler+0xb0>)
 800778a:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800778c:	4b0c      	ldr	r3, [pc, #48]	@ (80077c0 <vTaskStartScheduler+0xb4>)
 800778e:	f04f 32ff 	mov.w	r2, #4294967295
 8007792:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007794:	4b0b      	ldr	r3, [pc, #44]	@ (80077c4 <vTaskStartScheduler+0xb8>)
 8007796:	2201      	movs	r2, #1
 8007798:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800779a:	4b0b      	ldr	r3, [pc, #44]	@ (80077c8 <vTaskStartScheduler+0xbc>)
 800779c:	2200      	movs	r2, #0
 800779e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80077a0:	f001 fa56 	bl	8008c50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80077a4:	bf00      	nop
 80077a6:	3718      	adds	r7, #24
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	08017b94 	.word	0x08017b94
 80077b0:	08007d35 	.word	0x08007d35
 80077b4:	24001088 	.word	0x24001088
 80077b8:	24000b90 	.word	0x24000b90
 80077bc:	24000040 	.word	0x24000040
 80077c0:	24001084 	.word	0x24001084
 80077c4:	24001070 	.word	0x24001070
 80077c8:	24001068 	.word	0x24001068

080077cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80077cc:	b480      	push	{r7}
 80077ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80077d0:	4b04      	ldr	r3, [pc, #16]	@ (80077e4 <vTaskSuspendAll+0x18>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	3301      	adds	r3, #1
 80077d6:	4a03      	ldr	r2, [pc, #12]	@ (80077e4 <vTaskSuspendAll+0x18>)
 80077d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80077da:	bf00      	nop
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr
 80077e4:	2400108c 	.word	0x2400108c

080077e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80077ee:	2300      	movs	r3, #0
 80077f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80077f2:	2300      	movs	r3, #0
 80077f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80077f6:	4b3b      	ldr	r3, [pc, #236]	@ (80078e4 <xTaskResumeAll+0xfc>)
 80077f8:	681b      	ldr	r3, [r3, #0]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80077fa:	f001 fa99 	bl	8008d30 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80077fe:	4b39      	ldr	r3, [pc, #228]	@ (80078e4 <xTaskResumeAll+0xfc>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	3b01      	subs	r3, #1
 8007804:	4a37      	ldr	r2, [pc, #220]	@ (80078e4 <xTaskResumeAll+0xfc>)
 8007806:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007808:	4b36      	ldr	r3, [pc, #216]	@ (80078e4 <xTaskResumeAll+0xfc>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d162      	bne.n	80078d6 <xTaskResumeAll+0xee>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007810:	4b35      	ldr	r3, [pc, #212]	@ (80078e8 <xTaskResumeAll+0x100>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d05e      	beq.n	80078d6 <xTaskResumeAll+0xee>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007818:	e02f      	b.n	800787a <xTaskResumeAll+0x92>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800781a:	4b34      	ldr	r3, [pc, #208]	@ (80078ec <xTaskResumeAll+0x104>)
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	3318      	adds	r3, #24
 8007826:	4618      	mov	r0, r3
 8007828:	f7fe feb2 	bl	8006590 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	3304      	adds	r3, #4
 8007830:	4618      	mov	r0, r3
 8007832:	f7fe fead 	bl	8006590 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800783a:	4b2d      	ldr	r3, [pc, #180]	@ (80078f0 <xTaskResumeAll+0x108>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	429a      	cmp	r2, r3
 8007840:	d903      	bls.n	800784a <xTaskResumeAll+0x62>
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007846:	4a2a      	ldr	r2, [pc, #168]	@ (80078f0 <xTaskResumeAll+0x108>)
 8007848:	6013      	str	r3, [r2, #0]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800784e:	4613      	mov	r3, r2
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4413      	add	r3, r2
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	4a27      	ldr	r2, [pc, #156]	@ (80078f4 <xTaskResumeAll+0x10c>)
 8007858:	441a      	add	r2, r3
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	3304      	adds	r3, #4
 800785e:	4619      	mov	r1, r3
 8007860:	4610      	mov	r0, r2
 8007862:	f7fe fe38 	bl	80064d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800786a:	4b23      	ldr	r3, [pc, #140]	@ (80078f8 <xTaskResumeAll+0x110>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007870:	429a      	cmp	r2, r3
 8007872:	d302      	bcc.n	800787a <xTaskResumeAll+0x92>
					{
						xYieldPending = pdTRUE;
 8007874:	4b21      	ldr	r3, [pc, #132]	@ (80078fc <xTaskResumeAll+0x114>)
 8007876:	2201      	movs	r2, #1
 8007878:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800787a:	4b1c      	ldr	r3, [pc, #112]	@ (80078ec <xTaskResumeAll+0x104>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d1cb      	bne.n	800781a <xTaskResumeAll+0x32>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d001      	beq.n	800788c <xTaskResumeAll+0xa4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007888:	f000 fafe 	bl	8007e88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800788c:	4b1c      	ldr	r3, [pc, #112]	@ (8007900 <xTaskResumeAll+0x118>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d010      	beq.n	80078ba <xTaskResumeAll+0xd2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007898:	f000 f858 	bl	800794c <xTaskIncrementTick>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d002      	beq.n	80078a8 <xTaskResumeAll+0xc0>
							{
								xYieldPending = pdTRUE;
 80078a2:	4b16      	ldr	r3, [pc, #88]	@ (80078fc <xTaskResumeAll+0x114>)
 80078a4:	2201      	movs	r2, #1
 80078a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	3b01      	subs	r3, #1
 80078ac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1f1      	bne.n	8007898 <xTaskResumeAll+0xb0>

						xPendedTicks = 0;
 80078b4:	4b12      	ldr	r3, [pc, #72]	@ (8007900 <xTaskResumeAll+0x118>)
 80078b6:	2200      	movs	r2, #0
 80078b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80078ba:	4b10      	ldr	r3, [pc, #64]	@ (80078fc <xTaskResumeAll+0x114>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d009      	beq.n	80078d6 <xTaskResumeAll+0xee>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80078c2:	2301      	movs	r3, #1
 80078c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80078c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007904 <xTaskResumeAll+0x11c>)
 80078c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078cc:	601a      	str	r2, [r3, #0]
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80078d6:	f001 fa4d 	bl	8008d74 <vPortExitCritical>

	return xAlreadyYielded;
 80078da:	68bb      	ldr	r3, [r7, #8]
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3710      	adds	r7, #16
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	2400108c 	.word	0x2400108c
 80078e8:	24001064 	.word	0x24001064
 80078ec:	24001024 	.word	0x24001024
 80078f0:	2400106c 	.word	0x2400106c
 80078f4:	24000b94 	.word	0x24000b94
 80078f8:	24000b90 	.word	0x24000b90
 80078fc:	24001078 	.word	0x24001078
 8007900:	24001074 	.word	0x24001074
 8007904:	e000ed04 	.word	0xe000ed04

08007908 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800790e:	4b05      	ldr	r3, [pc, #20]	@ (8007924 <xTaskGetTickCount+0x1c>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007914:	687b      	ldr	r3, [r7, #4]
}
 8007916:	4618      	mov	r0, r3
 8007918:	370c      	adds	r7, #12
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	24001068 	.word	0x24001068

08007928 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800792e:	f001 fac3 	bl	8008eb8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007932:	2300      	movs	r3, #0
 8007934:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007936:	4b04      	ldr	r3, [pc, #16]	@ (8007948 <xTaskGetTickCountFromISR+0x20>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800793c:	683b      	ldr	r3, [r7, #0]
}
 800793e:	4618      	mov	r0, r3
 8007940:	3708      	adds	r7, #8
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	24001068 	.word	0x24001068

0800794c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b086      	sub	sp, #24
 8007950:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007952:	2300      	movs	r3, #0
 8007954:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007956:	4b48      	ldr	r3, [pc, #288]	@ (8007a78 <xTaskIncrementTick+0x12c>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	f040 8082 	bne.w	8007a64 <xTaskIncrementTick+0x118>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007960:	4b46      	ldr	r3, [pc, #280]	@ (8007a7c <xTaskIncrementTick+0x130>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	3301      	adds	r3, #1
 8007966:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007968:	4a44      	ldr	r2, [pc, #272]	@ (8007a7c <xTaskIncrementTick+0x130>)
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d113      	bne.n	800799c <xTaskIncrementTick+0x50>
		{
			taskSWITCH_DELAYED_LISTS();
 8007974:	4b42      	ldr	r3, [pc, #264]	@ (8007a80 <xTaskIncrementTick+0x134>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4b41      	ldr	r3, [pc, #260]	@ (8007a80 <xTaskIncrementTick+0x134>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	60fb      	str	r3, [r7, #12]
 8007980:	4b40      	ldr	r3, [pc, #256]	@ (8007a84 <xTaskIncrementTick+0x138>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a3e      	ldr	r2, [pc, #248]	@ (8007a80 <xTaskIncrementTick+0x134>)
 8007986:	6013      	str	r3, [r2, #0]
 8007988:	4a3e      	ldr	r2, [pc, #248]	@ (8007a84 <xTaskIncrementTick+0x138>)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6013      	str	r3, [r2, #0]
 800798e:	4b3e      	ldr	r3, [pc, #248]	@ (8007a88 <xTaskIncrementTick+0x13c>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	3301      	adds	r3, #1
 8007994:	4a3c      	ldr	r2, [pc, #240]	@ (8007a88 <xTaskIncrementTick+0x13c>)
 8007996:	6013      	str	r3, [r2, #0]
 8007998:	f000 fa76 	bl	8007e88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800799c:	4b3b      	ldr	r3, [pc, #236]	@ (8007a8c <xTaskIncrementTick+0x140>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	693a      	ldr	r2, [r7, #16]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d349      	bcc.n	8007a3a <xTaskIncrementTick+0xee>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079a6:	4b36      	ldr	r3, [pc, #216]	@ (8007a80 <xTaskIncrementTick+0x134>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d104      	bne.n	80079ba <xTaskIncrementTick+0x6e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079b0:	4b36      	ldr	r3, [pc, #216]	@ (8007a8c <xTaskIncrementTick+0x140>)
 80079b2:	f04f 32ff 	mov.w	r2, #4294967295
 80079b6:	601a      	str	r2, [r3, #0]
					break;
 80079b8:	e03f      	b.n	8007a3a <xTaskIncrementTick+0xee>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079ba:	4b31      	ldr	r3, [pc, #196]	@ (8007a80 <xTaskIncrementTick+0x134>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80079ca:	693a      	ldr	r2, [r7, #16]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d203      	bcs.n	80079da <xTaskIncrementTick+0x8e>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80079d2:	4a2e      	ldr	r2, [pc, #184]	@ (8007a8c <xTaskIncrementTick+0x140>)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80079d8:	e02f      	b.n	8007a3a <xTaskIncrementTick+0xee>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	3304      	adds	r3, #4
 80079de:	4618      	mov	r0, r3
 80079e0:	f7fe fdd6 	bl	8006590 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d004      	beq.n	80079f6 <xTaskIncrementTick+0xaa>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	3318      	adds	r3, #24
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7fe fdcd 	bl	8006590 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079fa:	4b25      	ldr	r3, [pc, #148]	@ (8007a90 <xTaskIncrementTick+0x144>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d903      	bls.n	8007a0a <xTaskIncrementTick+0xbe>
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a06:	4a22      	ldr	r2, [pc, #136]	@ (8007a90 <xTaskIncrementTick+0x144>)
 8007a08:	6013      	str	r3, [r2, #0]
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a0e:	4613      	mov	r3, r2
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	4413      	add	r3, r2
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	4a1f      	ldr	r2, [pc, #124]	@ (8007a94 <xTaskIncrementTick+0x148>)
 8007a18:	441a      	add	r2, r3
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	3304      	adds	r3, #4
 8007a1e:	4619      	mov	r1, r3
 8007a20:	4610      	mov	r0, r2
 8007a22:	f7fe fd58 	bl	80064d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a2a:	4b1b      	ldr	r3, [pc, #108]	@ (8007a98 <xTaskIncrementTick+0x14c>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d3b8      	bcc.n	80079a6 <xTaskIncrementTick+0x5a>
						{
							xSwitchRequired = pdTRUE;
 8007a34:	2301      	movs	r3, #1
 8007a36:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a38:	e7b5      	b.n	80079a6 <xTaskIncrementTick+0x5a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007a3a:	4b17      	ldr	r3, [pc, #92]	@ (8007a98 <xTaskIncrementTick+0x14c>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a40:	4914      	ldr	r1, [pc, #80]	@ (8007a94 <xTaskIncrementTick+0x148>)
 8007a42:	4613      	mov	r3, r2
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	4413      	add	r3, r2
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	440b      	add	r3, r1
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d901      	bls.n	8007a56 <xTaskIncrementTick+0x10a>
			{
				xSwitchRequired = pdTRUE;
 8007a52:	2301      	movs	r3, #1
 8007a54:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007a56:	4b11      	ldr	r3, [pc, #68]	@ (8007a9c <xTaskIncrementTick+0x150>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d007      	beq.n	8007a6e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	617b      	str	r3, [r7, #20]
 8007a62:	e004      	b.n	8007a6e <xTaskIncrementTick+0x122>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007a64:	4b0e      	ldr	r3, [pc, #56]	@ (8007aa0 <xTaskIncrementTick+0x154>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	4a0d      	ldr	r2, [pc, #52]	@ (8007aa0 <xTaskIncrementTick+0x154>)
 8007a6c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007a6e:	697b      	ldr	r3, [r7, #20]
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3718      	adds	r7, #24
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	2400108c 	.word	0x2400108c
 8007a7c:	24001068 	.word	0x24001068
 8007a80:	2400101c 	.word	0x2400101c
 8007a84:	24001020 	.word	0x24001020
 8007a88:	2400107c 	.word	0x2400107c
 8007a8c:	24001084 	.word	0x24001084
 8007a90:	2400106c 	.word	0x2400106c
 8007a94:	24000b94 	.word	0x24000b94
 8007a98:	24000b90 	.word	0x24000b90
 8007a9c:	24001078 	.word	0x24001078
 8007aa0:	24001074 	.word	0x24001074

08007aa4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007aaa:	4b23      	ldr	r3, [pc, #140]	@ (8007b38 <vTaskSwitchContext+0x94>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d003      	beq.n	8007aba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007ab2:	4b22      	ldr	r3, [pc, #136]	@ (8007b3c <vTaskSwitchContext+0x98>)
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007ab8:	e038      	b.n	8007b2c <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 8007aba:	4b20      	ldr	r3, [pc, #128]	@ (8007b3c <vTaskSwitchContext+0x98>)
 8007abc:	2200      	movs	r2, #0
 8007abe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ac0:	4b1f      	ldr	r3, [pc, #124]	@ (8007b40 <vTaskSwitchContext+0x9c>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	607b      	str	r3, [r7, #4]
 8007ac6:	e002      	b.n	8007ace <vTaskSwitchContext+0x2a>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	3b01      	subs	r3, #1
 8007acc:	607b      	str	r3, [r7, #4]
 8007ace:	491d      	ldr	r1, [pc, #116]	@ (8007b44 <vTaskSwitchContext+0xa0>)
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	4413      	add	r3, r2
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	440b      	add	r3, r1
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d0f2      	beq.n	8007ac8 <vTaskSwitchContext+0x24>
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	4413      	add	r3, r2
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	4a15      	ldr	r2, [pc, #84]	@ (8007b44 <vTaskSwitchContext+0xa0>)
 8007aee:	4413      	add	r3, r2
 8007af0:	603b      	str	r3, [r7, #0]
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	685a      	ldr	r2, [r3, #4]
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	605a      	str	r2, [r3, #4]
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	685a      	ldr	r2, [r3, #4]
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	3308      	adds	r3, #8
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d104      	bne.n	8007b12 <vTaskSwitchContext+0x6e>
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	605a      	str	r2, [r3, #4]
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	4a0b      	ldr	r2, [pc, #44]	@ (8007b48 <vTaskSwitchContext+0xa4>)
 8007b1a:	6013      	str	r3, [r2, #0]
 8007b1c:	4a08      	ldr	r2, [pc, #32]	@ (8007b40 <vTaskSwitchContext+0x9c>)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007b22:	4b09      	ldr	r3, [pc, #36]	@ (8007b48 <vTaskSwitchContext+0xa4>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	3354      	adds	r3, #84	@ 0x54
 8007b28:	4a08      	ldr	r2, [pc, #32]	@ (8007b4c <vTaskSwitchContext+0xa8>)
 8007b2a:	6013      	str	r3, [r2, #0]
}
 8007b2c:	bf00      	nop
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr
 8007b38:	2400108c 	.word	0x2400108c
 8007b3c:	24001078 	.word	0x24001078
 8007b40:	2400106c 	.word	0x2400106c
 8007b44:	24000b94 	.word	0x24000b94
 8007b48:	24000b90 	.word	0x24000b90
 8007b4c:	24000040 	.word	0x24000040

08007b50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b5a:	4b07      	ldr	r3, [pc, #28]	@ (8007b78 <vTaskPlaceOnEventList+0x28>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	3318      	adds	r3, #24
 8007b60:	4619      	mov	r1, r3
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f7fe fcdb 	bl	800651e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b68:	2101      	movs	r1, #1
 8007b6a:	6838      	ldr	r0, [r7, #0]
 8007b6c:	f000 fcb4 	bl	80084d8 <prvAddCurrentTaskToDelayedList>
}
 8007b70:	bf00      	nop
 8007b72:	3708      	adds	r7, #8
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	24000b90 	.word	0x24000b90

08007b7c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	607a      	str	r2, [r7, #4]

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b88:	4b0a      	ldr	r3, [pc, #40]	@ (8007bb4 <vTaskPlaceOnEventListRestricted+0x38>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	3318      	adds	r3, #24
 8007b8e:	4619      	mov	r1, r3
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f7fe fca0 	bl	80064d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d002      	beq.n	8007ba2 <vTaskPlaceOnEventListRestricted+0x26>
		{
			xTicksToWait = portMAX_DELAY;
 8007b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8007ba0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007ba2:	6879      	ldr	r1, [r7, #4]
 8007ba4:	68b8      	ldr	r0, [r7, #8]
 8007ba6:	f000 fc97 	bl	80084d8 <prvAddCurrentTaskToDelayedList>
	}
 8007baa:	bf00      	nop
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	24000b90 	.word	0x24000b90

08007bb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	3318      	adds	r3, #24
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7fe fcdf 	bl	8006590 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bd2:	4b1e      	ldr	r3, [pc, #120]	@ (8007c4c <xTaskRemoveFromEventList+0x94>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d11d      	bne.n	8007c16 <xTaskRemoveFromEventList+0x5e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	3304      	adds	r3, #4
 8007bde:	4618      	mov	r0, r3
 8007be0:	f7fe fcd6 	bl	8006590 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007be8:	4b19      	ldr	r3, [pc, #100]	@ (8007c50 <xTaskRemoveFromEventList+0x98>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d903      	bls.n	8007bf8 <xTaskRemoveFromEventList+0x40>
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bf4:	4a16      	ldr	r2, [pc, #88]	@ (8007c50 <xTaskRemoveFromEventList+0x98>)
 8007bf6:	6013      	str	r3, [r2, #0]
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bfc:	4613      	mov	r3, r2
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	4413      	add	r3, r2
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	4a13      	ldr	r2, [pc, #76]	@ (8007c54 <xTaskRemoveFromEventList+0x9c>)
 8007c06:	441a      	add	r2, r3
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	3304      	adds	r3, #4
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	4610      	mov	r0, r2
 8007c10:	f7fe fc61 	bl	80064d6 <vListInsertEnd>
 8007c14:	e005      	b.n	8007c22 <xTaskRemoveFromEventList+0x6a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	3318      	adds	r3, #24
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	480e      	ldr	r0, [pc, #56]	@ (8007c58 <xTaskRemoveFromEventList+0xa0>)
 8007c1e:	f7fe fc5a 	bl	80064d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c26:	4b0d      	ldr	r3, [pc, #52]	@ (8007c5c <xTaskRemoveFromEventList+0xa4>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d905      	bls.n	8007c3c <xTaskRemoveFromEventList+0x84>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007c30:	2301      	movs	r3, #1
 8007c32:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007c34:	4b0a      	ldr	r3, [pc, #40]	@ (8007c60 <xTaskRemoveFromEventList+0xa8>)
 8007c36:	2201      	movs	r2, #1
 8007c38:	601a      	str	r2, [r3, #0]
 8007c3a:	e001      	b.n	8007c40 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		xReturn = pdFALSE;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8007c40:	68fb      	ldr	r3, [r7, #12]
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3710      	adds	r7, #16
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	bf00      	nop
 8007c4c:	2400108c 	.word	0x2400108c
 8007c50:	2400106c 	.word	0x2400106c
 8007c54:	24000b94 	.word	0x24000b94
 8007c58:	24001024 	.word	0x24001024
 8007c5c:	24000b90 	.word	0x24000b90
 8007c60:	24001078 	.word	0x24001078

08007c64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c6c:	4b06      	ldr	r3, [pc, #24]	@ (8007c88 <vTaskInternalSetTimeOutState+0x24>)
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007c74:	4b05      	ldr	r3, [pc, #20]	@ (8007c8c <vTaskInternalSetTimeOutState+0x28>)
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	605a      	str	r2, [r3, #4]
}
 8007c7c:	bf00      	nop
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr
 8007c88:	2400107c 	.word	0x2400107c
 8007c8c:	24001068 	.word	0x24001068

08007c90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 8007c9a:	f001 f849 	bl	8008d30 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007c9e:	4b1d      	ldr	r3, [pc, #116]	@ (8007d14 <xTaskCheckForTimeOut+0x84>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	693a      	ldr	r2, [r7, #16]
 8007caa:	1ad3      	subs	r3, r2, r3
 8007cac:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cb6:	d102      	bne.n	8007cbe <xTaskCheckForTimeOut+0x2e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	617b      	str	r3, [r7, #20]
 8007cbc:	e023      	b.n	8007d06 <xTaskCheckForTimeOut+0x76>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	4b15      	ldr	r3, [pc, #84]	@ (8007d18 <xTaskCheckForTimeOut+0x88>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d007      	beq.n	8007cda <xTaskCheckForTimeOut+0x4a>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	693a      	ldr	r2, [r7, #16]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d302      	bcc.n	8007cda <xTaskCheckForTimeOut+0x4a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	617b      	str	r3, [r7, #20]
 8007cd8:	e015      	b.n	8007d06 <xTaskCheckForTimeOut+0x76>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d20b      	bcs.n	8007cfc <xTaskCheckForTimeOut+0x6c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	1ad2      	subs	r2, r2, r3
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f7ff ffb7 	bl	8007c64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	617b      	str	r3, [r7, #20]
 8007cfa:	e004      	b.n	8007d06 <xTaskCheckForTimeOut+0x76>
		}
		else
		{
			*pxTicksToWait = 0;
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007d02:	2301      	movs	r3, #1
 8007d04:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8007d06:	f001 f835 	bl	8008d74 <vPortExitCritical>

	return xReturn;
 8007d0a:	697b      	ldr	r3, [r7, #20]
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3718      	adds	r7, #24
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	24001068 	.word	0x24001068
 8007d18:	2400107c 	.word	0x2400107c

08007d1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007d20:	4b03      	ldr	r3, [pc, #12]	@ (8007d30 <vTaskMissedYield+0x14>)
 8007d22:	2201      	movs	r2, #1
 8007d24:	601a      	str	r2, [r3, #0]
}
 8007d26:	bf00      	nop
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr
 8007d30:	24001078 	.word	0x24001078

08007d34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d3c:	f000 f852 	bl	8007de4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d40:	4b06      	ldr	r3, [pc, #24]	@ (8007d5c <prvIdleTask+0x28>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d9f9      	bls.n	8007d3c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d48:	4b05      	ldr	r3, [pc, #20]	@ (8007d60 <prvIdleTask+0x2c>)
 8007d4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d4e:	601a      	str	r2, [r3, #0]
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d58:	e7f0      	b.n	8007d3c <prvIdleTask+0x8>
 8007d5a:	bf00      	nop
 8007d5c:	24000b94 	.word	0x24000b94
 8007d60:	e000ed04 	.word	0xe000ed04

08007d64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	607b      	str	r3, [r7, #4]
 8007d6e:	e00c      	b.n	8007d8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	4613      	mov	r3, r2
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	4413      	add	r3, r2
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	4a12      	ldr	r2, [pc, #72]	@ (8007dc4 <prvInitialiseTaskLists+0x60>)
 8007d7c:	4413      	add	r3, r2
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7fe fb7c 	bl	800647c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	3301      	adds	r3, #1
 8007d88:	607b      	str	r3, [r7, #4]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2b37      	cmp	r3, #55	@ 0x37
 8007d8e:	d9ef      	bls.n	8007d70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007d90:	480d      	ldr	r0, [pc, #52]	@ (8007dc8 <prvInitialiseTaskLists+0x64>)
 8007d92:	f7fe fb73 	bl	800647c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d96:	480d      	ldr	r0, [pc, #52]	@ (8007dcc <prvInitialiseTaskLists+0x68>)
 8007d98:	f7fe fb70 	bl	800647c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007d9c:	480c      	ldr	r0, [pc, #48]	@ (8007dd0 <prvInitialiseTaskLists+0x6c>)
 8007d9e:	f7fe fb6d 	bl	800647c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007da2:	480c      	ldr	r0, [pc, #48]	@ (8007dd4 <prvInitialiseTaskLists+0x70>)
 8007da4:	f7fe fb6a 	bl	800647c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007da8:	480b      	ldr	r0, [pc, #44]	@ (8007dd8 <prvInitialiseTaskLists+0x74>)
 8007daa:	f7fe fb67 	bl	800647c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007dae:	4b0b      	ldr	r3, [pc, #44]	@ (8007ddc <prvInitialiseTaskLists+0x78>)
 8007db0:	4a05      	ldr	r2, [pc, #20]	@ (8007dc8 <prvInitialiseTaskLists+0x64>)
 8007db2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007db4:	4b0a      	ldr	r3, [pc, #40]	@ (8007de0 <prvInitialiseTaskLists+0x7c>)
 8007db6:	4a05      	ldr	r2, [pc, #20]	@ (8007dcc <prvInitialiseTaskLists+0x68>)
 8007db8:	601a      	str	r2, [r3, #0]
}
 8007dba:	bf00      	nop
 8007dbc:	3708      	adds	r7, #8
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	24000b94 	.word	0x24000b94
 8007dc8:	24000ff4 	.word	0x24000ff4
 8007dcc:	24001008 	.word	0x24001008
 8007dd0:	24001024 	.word	0x24001024
 8007dd4:	24001038 	.word	0x24001038
 8007dd8:	24001050 	.word	0x24001050
 8007ddc:	2400101c 	.word	0x2400101c
 8007de0:	24001020 	.word	0x24001020

08007de4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007dea:	e019      	b.n	8007e20 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007dec:	f000 ffa0 	bl	8008d30 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007df0:	4b10      	ldr	r3, [pc, #64]	@ (8007e34 <prvCheckTasksWaitingTermination+0x50>)
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	3304      	adds	r3, #4
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f7fe fbc7 	bl	8006590 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e02:	4b0d      	ldr	r3, [pc, #52]	@ (8007e38 <prvCheckTasksWaitingTermination+0x54>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	3b01      	subs	r3, #1
 8007e08:	4a0b      	ldr	r2, [pc, #44]	@ (8007e38 <prvCheckTasksWaitingTermination+0x54>)
 8007e0a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8007e3c <prvCheckTasksWaitingTermination+0x58>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	3b01      	subs	r3, #1
 8007e12:	4a0a      	ldr	r2, [pc, #40]	@ (8007e3c <prvCheckTasksWaitingTermination+0x58>)
 8007e14:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e16:	f000 ffad 	bl	8008d74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 f810 	bl	8007e40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e20:	4b06      	ldr	r3, [pc, #24]	@ (8007e3c <prvCheckTasksWaitingTermination+0x58>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d1e1      	bne.n	8007dec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e28:	bf00      	nop
 8007e2a:	bf00      	nop
 8007e2c:	3708      	adds	r7, #8
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	24001038 	.word	0x24001038
 8007e38:	24001064 	.word	0x24001064
 8007e3c:	2400104c 	.word	0x2400104c

08007e40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	3354      	adds	r3, #84	@ 0x54
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f00e ff6d 	bl	8016d2c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d108      	bne.n	8007e6e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e60:	4618      	mov	r0, r3
 8007e62:	f001 f8dd 	bl	8009020 <vPortFree>
				vPortFree( pxTCB );
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f001 f8da 	bl	8009020 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007e6c:	e007      	b.n	8007e7e <prvDeleteTCB+0x3e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d102      	bne.n	8007e7e <prvDeleteTCB+0x3e>
				vPortFree( pxTCB );
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f001 f8d1 	bl	8009020 <vPortFree>
	}
 8007e7e:	bf00      	nop
 8007e80:	3708      	adds	r7, #8
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
	...

08007e88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8007ec0 <prvResetNextTaskUnblockTime+0x38>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d104      	bne.n	8007ea2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007e98:	4b0a      	ldr	r3, [pc, #40]	@ (8007ec4 <prvResetNextTaskUnblockTime+0x3c>)
 8007e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ea0:	e008      	b.n	8007eb4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ea2:	4b07      	ldr	r3, [pc, #28]	@ (8007ec0 <prvResetNextTaskUnblockTime+0x38>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	4a04      	ldr	r2, [pc, #16]	@ (8007ec4 <prvResetNextTaskUnblockTime+0x3c>)
 8007eb2:	6013      	str	r3, [r2, #0]
}
 8007eb4:	bf00      	nop
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr
 8007ec0:	2400101c 	.word	0x2400101c
 8007ec4:	24001084 	.word	0x24001084

08007ec8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007ece:	4b05      	ldr	r3, [pc, #20]	@ (8007ee4 <xTaskGetCurrentTaskHandle+0x1c>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007ed4:	687b      	ldr	r3, [r7, #4]
	}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	370c      	adds	r7, #12
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	24000b90 	.word	0x24000b90

08007ee8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007eee:	4b0b      	ldr	r3, [pc, #44]	@ (8007f1c <xTaskGetSchedulerState+0x34>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d102      	bne.n	8007efc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	607b      	str	r3, [r7, #4]
 8007efa:	e008      	b.n	8007f0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007efc:	4b08      	ldr	r3, [pc, #32]	@ (8007f20 <xTaskGetSchedulerState+0x38>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d102      	bne.n	8007f0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f04:	2302      	movs	r3, #2
 8007f06:	607b      	str	r3, [r7, #4]
 8007f08:	e001      	b.n	8007f0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007f0e:	687b      	ldr	r3, [r7, #4]
	}
 8007f10:	4618      	mov	r0, r3
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr
 8007f1c:	24001070 	.word	0x24001070
 8007f20:	2400108c 	.word	0x2400108c

08007f24 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007f30:	2300      	movs	r3, #0
 8007f32:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d051      	beq.n	8007fde <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f3e:	4b2a      	ldr	r3, [pc, #168]	@ (8007fe8 <xTaskPriorityInherit+0xc4>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d241      	bcs.n	8007fcc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	699b      	ldr	r3, [r3, #24]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	db06      	blt.n	8007f5e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f50:	4b25      	ldr	r3, [pc, #148]	@ (8007fe8 <xTaskPriorityInherit+0xc4>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f56:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	6959      	ldr	r1, [r3, #20]
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f66:	4613      	mov	r3, r2
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	4413      	add	r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	4a1f      	ldr	r2, [pc, #124]	@ (8007fec <xTaskPriorityInherit+0xc8>)
 8007f70:	4413      	add	r3, r2
 8007f72:	4299      	cmp	r1, r3
 8007f74:	d122      	bne.n	8007fbc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	3304      	adds	r3, #4
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f7fe fb08 	bl	8006590 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007f80:	4b19      	ldr	r3, [pc, #100]	@ (8007fe8 <xTaskPriorityInherit+0xc4>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f8e:	4b18      	ldr	r3, [pc, #96]	@ (8007ff0 <xTaskPriorityInherit+0xcc>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d903      	bls.n	8007f9e <xTaskPriorityInherit+0x7a>
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f9a:	4a15      	ldr	r2, [pc, #84]	@ (8007ff0 <xTaskPriorityInherit+0xcc>)
 8007f9c:	6013      	str	r3, [r2, #0]
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	4413      	add	r3, r2
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	4a10      	ldr	r2, [pc, #64]	@ (8007fec <xTaskPriorityInherit+0xc8>)
 8007fac:	441a      	add	r2, r3
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	3304      	adds	r3, #4
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	4610      	mov	r0, r2
 8007fb6:	f7fe fa8e 	bl	80064d6 <vListInsertEnd>
 8007fba:	e004      	b.n	8007fc6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8007fe8 <xTaskPriorityInherit+0xc4>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	60fb      	str	r3, [r7, #12]
 8007fca:	e008      	b.n	8007fde <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007fd0:	4b05      	ldr	r3, [pc, #20]	@ (8007fe8 <xTaskPriorityInherit+0xc4>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d201      	bcs.n	8007fde <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007fde:	68fb      	ldr	r3, [r7, #12]
	}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3710      	adds	r7, #16
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}
 8007fe8:	24000b90 	.word	0x24000b90
 8007fec:	24000b94 	.word	0x24000b94
 8007ff0:	2400106c 	.word	0x2400106c

08007ff4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008000:	2300      	movs	r3, #0
 8008002:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d039      	beq.n	800807e <xTaskPriorityDisinherit+0x8a>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800800a:	4b1f      	ldr	r3, [pc, #124]	@ (8008088 <xTaskPriorityDisinherit+0x94>)
 800800c:	681b      	ldr	r3, [r3, #0]
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008012:	1e5a      	subs	r2, r3, #1
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008020:	429a      	cmp	r2, r3
 8008022:	d02c      	beq.n	800807e <xTaskPriorityDisinherit+0x8a>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008028:	2b00      	cmp	r3, #0
 800802a:	d128      	bne.n	800807e <xTaskPriorityDisinherit+0x8a>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	3304      	adds	r3, #4
 8008030:	4618      	mov	r0, r3
 8008032:	f7fe faad 	bl	8006590 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008042:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800804e:	4b0f      	ldr	r3, [pc, #60]	@ (800808c <xTaskPriorityDisinherit+0x98>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	429a      	cmp	r2, r3
 8008054:	d903      	bls.n	800805e <xTaskPriorityDisinherit+0x6a>
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800805a:	4a0c      	ldr	r2, [pc, #48]	@ (800808c <xTaskPriorityDisinherit+0x98>)
 800805c:	6013      	str	r3, [r2, #0]
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008062:	4613      	mov	r3, r2
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	4413      	add	r3, r2
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	4a09      	ldr	r2, [pc, #36]	@ (8008090 <xTaskPriorityDisinherit+0x9c>)
 800806c:	441a      	add	r2, r3
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	3304      	adds	r3, #4
 8008072:	4619      	mov	r1, r3
 8008074:	4610      	mov	r0, r2
 8008076:	f7fe fa2e 	bl	80064d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800807a:	2301      	movs	r3, #1
 800807c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800807e:	68fb      	ldr	r3, [r7, #12]
	}
 8008080:	4618      	mov	r0, r3
 8008082:	3710      	adds	r7, #16
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	24000b90 	.word	0x24000b90
 800808c:	2400106c 	.word	0x2400106c
 8008090:	24000b94 	.word	0x24000b94

08008094 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008094:	b580      	push	{r7, lr}
 8008096:	b086      	sub	sp, #24
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80080a2:	2301      	movs	r3, #1
 80080a4:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d04d      	beq.n	8008148 <vTaskPriorityDisinheritAfterTimeout+0xb4>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080b0:	683a      	ldr	r2, [r7, #0]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d902      	bls.n	80080bc <vTaskPriorityDisinheritAfterTimeout+0x28>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	617b      	str	r3, [r7, #20]
 80080ba:	e002      	b.n	80080c2 <vTaskPriorityDisinheritAfterTimeout+0x2e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080c0:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080c6:	697a      	ldr	r2, [r7, #20]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d03d      	beq.n	8008148 <vTaskPriorityDisinheritAfterTimeout+0xb4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d138      	bne.n	8008148 <vTaskPriorityDisinheritAfterTimeout+0xb4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80080d6:	4b1e      	ldr	r3, [pc, #120]	@ (8008150 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 80080d8:	681b      	ldr	r3, [r3, #0]

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080de:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	697a      	ldr	r2, [r7, #20]
 80080e4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	699b      	ldr	r3, [r3, #24]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	db04      	blt.n	80080f8 <vTaskPriorityDisinheritAfterTimeout+0x64>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	6959      	ldr	r1, [r3, #20]
 80080fc:	68ba      	ldr	r2, [r7, #8]
 80080fe:	4613      	mov	r3, r2
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	4413      	add	r3, r2
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	4a13      	ldr	r2, [pc, #76]	@ (8008154 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 8008108:	4413      	add	r3, r2
 800810a:	4299      	cmp	r1, r3
 800810c:	d11c      	bne.n	8008148 <vTaskPriorityDisinheritAfterTimeout+0xb4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	3304      	adds	r3, #4
 8008112:	4618      	mov	r0, r3
 8008114:	f7fe fa3c 	bl	8006590 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800811c:	4b0e      	ldr	r3, [pc, #56]	@ (8008158 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	429a      	cmp	r2, r3
 8008122:	d903      	bls.n	800812c <vTaskPriorityDisinheritAfterTimeout+0x98>
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008128:	4a0b      	ldr	r2, [pc, #44]	@ (8008158 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 800812a:	6013      	str	r3, [r2, #0]
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008130:	4613      	mov	r3, r2
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	4413      	add	r3, r2
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	4a06      	ldr	r2, [pc, #24]	@ (8008154 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 800813a:	441a      	add	r2, r3
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	3304      	adds	r3, #4
 8008140:	4619      	mov	r1, r3
 8008142:	4610      	mov	r0, r2
 8008144:	f7fe f9c7 	bl	80064d6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008148:	bf00      	nop
 800814a:	3718      	adds	r7, #24
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	24000b90 	.word	0x24000b90
 8008154:	24000b94 	.word	0x24000b94
 8008158:	2400106c 	.word	0x2400106c

0800815c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800815c:	b480      	push	{r7}
 800815e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008160:	4b07      	ldr	r3, [pc, #28]	@ (8008180 <pvTaskIncrementMutexHeldCount+0x24>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d004      	beq.n	8008172 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008168:	4b05      	ldr	r3, [pc, #20]	@ (8008180 <pvTaskIncrementMutexHeldCount+0x24>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800816e:	3201      	adds	r2, #1
 8008170:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8008172:	4b03      	ldr	r3, [pc, #12]	@ (8008180 <pvTaskIncrementMutexHeldCount+0x24>)
 8008174:	681b      	ldr	r3, [r3, #0]
	}
 8008176:	4618      	mov	r0, r3
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr
 8008180:	24000b90 	.word	0x24000b90

08008184 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8008184:	b580      	push	{r7, lr}
 8008186:	b086      	sub	sp, #24
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
 8008190:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8008192:	f000 fdcd 	bl	8008d30 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008196:	4b29      	ldr	r3, [pc, #164]	@ (800823c <xTaskNotifyWait+0xb8>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	2b02      	cmp	r3, #2
 80081a2:	d01c      	beq.n	80081de <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80081a4:	4b25      	ldr	r3, [pc, #148]	@ (800823c <xTaskNotifyWait+0xb8>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	43d2      	mvns	r2, r2
 80081b0:	400a      	ands	r2, r1
 80081b2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80081b6:	4b21      	ldr	r3, [pc, #132]	@ (800823c <xTaskNotifyWait+0xb8>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00b      	beq.n	80081de <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80081c6:	2101      	movs	r1, #1
 80081c8:	6838      	ldr	r0, [r7, #0]
 80081ca:	f000 f985 	bl	80084d8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80081ce:	4b1c      	ldr	r3, [pc, #112]	@ (8008240 <xTaskNotifyWait+0xbc>)
 80081d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081d4:	601a      	str	r2, [r3, #0]
 80081d6:	f3bf 8f4f 	dsb	sy
 80081da:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80081de:	f000 fdc9 	bl	8008d74 <vPortExitCritical>

		taskENTER_CRITICAL();
 80081e2:	f000 fda5 	bl	8008d30 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d005      	beq.n	80081f8 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80081ec:	4b13      	ldr	r3, [pc, #76]	@ (800823c <xTaskNotifyWait+0xb8>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80081f8:	4b10      	ldr	r3, [pc, #64]	@ (800823c <xTaskNotifyWait+0xb8>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8008200:	b2db      	uxtb	r3, r3
 8008202:	2b02      	cmp	r3, #2
 8008204:	d002      	beq.n	800820c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8008206:	2300      	movs	r3, #0
 8008208:	617b      	str	r3, [r7, #20]
 800820a:	e00a      	b.n	8008222 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800820c:	4b0b      	ldr	r3, [pc, #44]	@ (800823c <xTaskNotifyWait+0xb8>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8008214:	68ba      	ldr	r2, [r7, #8]
 8008216:	43d2      	mvns	r2, r2
 8008218:	400a      	ands	r2, r1
 800821a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 800821e:	2301      	movs	r3, #1
 8008220:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008222:	4b06      	ldr	r3, [pc, #24]	@ (800823c <xTaskNotifyWait+0xb8>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2200      	movs	r2, #0
 8008228:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800822c:	f000 fda2 	bl	8008d74 <vPortExitCritical>

		return xReturn;
 8008230:	697b      	ldr	r3, [r7, #20]
	}
 8008232:	4618      	mov	r0, r3
 8008234:	3718      	adds	r7, #24
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	24000b90 	.word	0x24000b90
 8008240:	e000ed04 	.word	0xe000ed04

08008244 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8008244:	b580      	push	{r7, lr}
 8008246:	b088      	sub	sp, #32
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	603b      	str	r3, [r7, #0]
 8008250:	4613      	mov	r3, r2
 8008252:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8008254:	2301      	movs	r3, #1
 8008256:	61fb      	str	r3, [r7, #28]
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = xTaskToNotify;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	61bb      	str	r3, [r7, #24]

		taskENTER_CRITICAL();
 800825c:	f000 fd68 	bl	8008d30 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d004      	beq.n	8008270 <xTaskGenericNotify+0x2c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8008276:	75fb      	strb	r3, [r7, #23]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008278:	69bb      	ldr	r3, [r7, #24]
 800827a:	2202      	movs	r2, #2
 800827c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8008280:	79fb      	ldrb	r3, [r7, #7]
 8008282:	2b04      	cmp	r3, #4
 8008284:	d82d      	bhi.n	80082e2 <xTaskGenericNotify+0x9e>
 8008286:	a201      	add	r2, pc, #4	@ (adr r2, 800828c <xTaskGenericNotify+0x48>)
 8008288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800828c:	080082eb 	.word	0x080082eb
 8008290:	080082a1 	.word	0x080082a1
 8008294:	080082b3 	.word	0x080082b3
 8008298:	080082c3 	.word	0x080082c3
 800829c:	080082cd 	.word	0x080082cd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	431a      	orrs	r2, r3
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80082b0:	e01c      	b.n	80082ec <xTaskGenericNotify+0xa8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80082b8:	1c5a      	adds	r2, r3, #1
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80082c0:	e014      	b.n	80082ec <xTaskGenericNotify+0xa8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	68ba      	ldr	r2, [r7, #8]
 80082c6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80082ca:	e00f      	b.n	80082ec <xTaskGenericNotify+0xa8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80082cc:	7dfb      	ldrb	r3, [r7, #23]
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d004      	beq.n	80082dc <xTaskGenericNotify+0x98>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	68ba      	ldr	r2, [r7, #8]
 80082d6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80082da:	e007      	b.n	80082ec <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 80082dc:	2300      	movs	r3, #0
 80082de:	61fb      	str	r3, [r7, #28]
					break;
 80082e0:	e004      	b.n	80082ec <xTaskGenericNotify+0xa8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0

					break;
 80082e8:	e000      	b.n	80082ec <xTaskGenericNotify+0xa8>
					break;
 80082ea:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80082ec:	7dfb      	ldrb	r3, [r7, #23]
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d12b      	bne.n	800834a <xTaskGenericNotify+0x106>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	3304      	adds	r3, #4
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7fe f94a 	bl	8006590 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008300:	4b15      	ldr	r3, [pc, #84]	@ (8008358 <xTaskGenericNotify+0x114>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	429a      	cmp	r2, r3
 8008306:	d903      	bls.n	8008310 <xTaskGenericNotify+0xcc>
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800830c:	4a12      	ldr	r2, [pc, #72]	@ (8008358 <xTaskGenericNotify+0x114>)
 800830e:	6013      	str	r3, [r2, #0]
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008314:	4613      	mov	r3, r2
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	4413      	add	r3, r2
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	4a0f      	ldr	r2, [pc, #60]	@ (800835c <xTaskGenericNotify+0x118>)
 800831e:	441a      	add	r2, r3
 8008320:	69bb      	ldr	r3, [r7, #24]
 8008322:	3304      	adds	r3, #4
 8008324:	4619      	mov	r1, r3
 8008326:	4610      	mov	r0, r2
 8008328:	f7fe f8d5 	bl	80064d6 <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008330:	4b0b      	ldr	r3, [pc, #44]	@ (8008360 <xTaskGenericNotify+0x11c>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008336:	429a      	cmp	r2, r3
 8008338:	d907      	bls.n	800834a <xTaskGenericNotify+0x106>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800833a:	4b0a      	ldr	r3, [pc, #40]	@ (8008364 <xTaskGenericNotify+0x120>)
 800833c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008340:	601a      	str	r2, [r3, #0]
 8008342:	f3bf 8f4f 	dsb	sy
 8008346:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800834a:	f000 fd13 	bl	8008d74 <vPortExitCritical>

		return xReturn;
 800834e:	69fb      	ldr	r3, [r7, #28]
	}
 8008350:	4618      	mov	r0, r3
 8008352:	3720      	adds	r7, #32
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	2400106c 	.word	0x2400106c
 800835c:	24000b94 	.word	0x24000b94
 8008360:	24000b90 	.word	0x24000b90
 8008364:	e000ed04 	.word	0xe000ed04

08008368 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008368:	b580      	push	{r7, lr}
 800836a:	b08c      	sub	sp, #48	@ 0x30
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	603b      	str	r3, [r7, #0]
 8008374:	4613      	mov	r3, r2
 8008376:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8008378:	2301      	movs	r3, #1
 800837a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800837c:	f000 fd9c 	bl	8008eb8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	62bb      	str	r3, [r7, #40]	@ 0x28
	__asm volatile
 8008384:	f3ef 8211 	mrs	r2, BASEPRI
 8008388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800838c:	f383 8811 	msr	BASEPRI, r3
 8008390:	f3bf 8f6f 	isb	sy
 8008394:	f3bf 8f4f 	dsb	sy
 8008398:	61fa      	str	r2, [r7, #28]
 800839a:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800839c:	69fb      	ldr	r3, [r7, #28]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800839e:	627b      	str	r3, [r7, #36]	@ 0x24
		{
			if( pulPreviousNotificationValue != NULL )
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d004      	beq.n	80083b0 <xTaskGenericNotifyFromISR+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80083a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80083b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b2:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80083b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80083ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083bc:	2202      	movs	r2, #2
 80083be:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 80083c2:	79fb      	ldrb	r3, [r7, #7]
 80083c4:	2b04      	cmp	r3, #4
 80083c6:	d82f      	bhi.n	8008428 <xTaskGenericNotifyFromISR+0xc0>
 80083c8:	a201      	add	r2, pc, #4	@ (adr r2, 80083d0 <xTaskGenericNotifyFromISR+0x68>)
 80083ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ce:	bf00      	nop
 80083d0:	08008431 	.word	0x08008431
 80083d4:	080083e5 	.word	0x080083e5
 80083d8:	080083f7 	.word	0x080083f7
 80083dc:	08008407 	.word	0x08008407
 80083e0:	08008411 	.word	0x08008411
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80083e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	431a      	orrs	r2, r3
 80083ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80083f4:	e01d      	b.n	8008432 <xTaskGenericNotifyFromISR+0xca>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80083f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80083fc:	1c5a      	adds	r2, r3, #1
 80083fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008400:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8008404:	e015      	b.n	8008432 <xTaskGenericNotifyFromISR+0xca>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008408:	68ba      	ldr	r2, [r7, #8]
 800840a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800840e:	e010      	b.n	8008432 <xTaskGenericNotifyFromISR+0xca>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008410:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008414:	2b02      	cmp	r3, #2
 8008416:	d004      	beq.n	8008422 <xTaskGenericNotifyFromISR+0xba>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800841a:	68ba      	ldr	r2, [r7, #8]
 800841c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8008420:	e007      	b.n	8008432 <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 8008422:	2300      	movs	r3, #0
 8008424:	62fb      	str	r3, [r7, #44]	@ 0x2c
					break;
 8008426:	e004      	b.n	8008432 <xTaskGenericNotifyFromISR+0xca>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800842a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
					break;
 800842e:	e000      	b.n	8008432 <xTaskGenericNotifyFromISR+0xca>
					break;
 8008430:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008432:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008436:	2b01      	cmp	r3, #1
 8008438:	d137      	bne.n	80084aa <xTaskGenericNotifyFromISR+0x142>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800843a:	4b21      	ldr	r3, [pc, #132]	@ (80084c0 <xTaskGenericNotifyFromISR+0x158>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d11d      	bne.n	800847e <xTaskGenericNotifyFromISR+0x116>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008444:	3304      	adds	r3, #4
 8008446:	4618      	mov	r0, r3
 8008448:	f7fe f8a2 	bl	8006590 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800844c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800844e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008450:	4b1c      	ldr	r3, [pc, #112]	@ (80084c4 <xTaskGenericNotifyFromISR+0x15c>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	429a      	cmp	r2, r3
 8008456:	d903      	bls.n	8008460 <xTaskGenericNotifyFromISR+0xf8>
 8008458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800845a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800845c:	4a19      	ldr	r2, [pc, #100]	@ (80084c4 <xTaskGenericNotifyFromISR+0x15c>)
 800845e:	6013      	str	r3, [r2, #0]
 8008460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008462:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008464:	4613      	mov	r3, r2
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	4413      	add	r3, r2
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	4a16      	ldr	r2, [pc, #88]	@ (80084c8 <xTaskGenericNotifyFromISR+0x160>)
 800846e:	441a      	add	r2, r3
 8008470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008472:	3304      	adds	r3, #4
 8008474:	4619      	mov	r1, r3
 8008476:	4610      	mov	r0, r2
 8008478:	f7fe f82d 	bl	80064d6 <vListInsertEnd>
 800847c:	e005      	b.n	800848a <xTaskGenericNotifyFromISR+0x122>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800847e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008480:	3318      	adds	r3, #24
 8008482:	4619      	mov	r1, r3
 8008484:	4811      	ldr	r0, [pc, #68]	@ (80084cc <xTaskGenericNotifyFromISR+0x164>)
 8008486:	f7fe f826 	bl	80064d6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800848a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800848c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800848e:	4b10      	ldr	r3, [pc, #64]	@ (80084d0 <xTaskGenericNotifyFromISR+0x168>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008494:	429a      	cmp	r2, r3
 8008496:	d908      	bls.n	80084aa <xTaskGenericNotifyFromISR+0x142>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8008498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800849a:	2b00      	cmp	r3, #0
 800849c:	d002      	beq.n	80084a4 <xTaskGenericNotifyFromISR+0x13c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800849e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a0:	2201      	movs	r2, #1
 80084a2:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80084a4:	4b0b      	ldr	r3, [pc, #44]	@ (80084d4 <xTaskGenericNotifyFromISR+0x16c>)
 80084a6:	2201      	movs	r2, #1
 80084a8:	601a      	str	r2, [r3, #0]
 80084aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ac:	617b      	str	r3, [r7, #20]
	__asm volatile
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	f383 8811 	msr	BASEPRI, r3
}
 80084b4:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80084b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3730      	adds	r7, #48	@ 0x30
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	2400108c 	.word	0x2400108c
 80084c4:	2400106c 	.word	0x2400106c
 80084c8:	24000b94 	.word	0x24000b94
 80084cc:	24001024 	.word	0x24001024
 80084d0:	24000b90 	.word	0x24000b90
 80084d4:	24001078 	.word	0x24001078

080084d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80084e2:	4b21      	ldr	r3, [pc, #132]	@ (8008568 <prvAddCurrentTaskToDelayedList+0x90>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084e8:	4b20      	ldr	r3, [pc, #128]	@ (800856c <prvAddCurrentTaskToDelayedList+0x94>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	3304      	adds	r3, #4
 80084ee:	4618      	mov	r0, r3
 80084f0:	f7fe f84e 	bl	8006590 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084fa:	d10a      	bne.n	8008512 <prvAddCurrentTaskToDelayedList+0x3a>
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d007      	beq.n	8008512 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008502:	4b1a      	ldr	r3, [pc, #104]	@ (800856c <prvAddCurrentTaskToDelayedList+0x94>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	3304      	adds	r3, #4
 8008508:	4619      	mov	r1, r3
 800850a:	4819      	ldr	r0, [pc, #100]	@ (8008570 <prvAddCurrentTaskToDelayedList+0x98>)
 800850c:	f7fd ffe3 	bl	80064d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008510:	e026      	b.n	8008560 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008512:	68fa      	ldr	r2, [r7, #12]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4413      	add	r3, r2
 8008518:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800851a:	4b14      	ldr	r3, [pc, #80]	@ (800856c <prvAddCurrentTaskToDelayedList+0x94>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	68ba      	ldr	r2, [r7, #8]
 8008520:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008522:	68ba      	ldr	r2, [r7, #8]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	429a      	cmp	r2, r3
 8008528:	d209      	bcs.n	800853e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800852a:	4b12      	ldr	r3, [pc, #72]	@ (8008574 <prvAddCurrentTaskToDelayedList+0x9c>)
 800852c:	681a      	ldr	r2, [r3, #0]
 800852e:	4b0f      	ldr	r3, [pc, #60]	@ (800856c <prvAddCurrentTaskToDelayedList+0x94>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	3304      	adds	r3, #4
 8008534:	4619      	mov	r1, r3
 8008536:	4610      	mov	r0, r2
 8008538:	f7fd fff1 	bl	800651e <vListInsert>
}
 800853c:	e010      	b.n	8008560 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800853e:	4b0e      	ldr	r3, [pc, #56]	@ (8008578 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	4b0a      	ldr	r3, [pc, #40]	@ (800856c <prvAddCurrentTaskToDelayedList+0x94>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	3304      	adds	r3, #4
 8008548:	4619      	mov	r1, r3
 800854a:	4610      	mov	r0, r2
 800854c:	f7fd ffe7 	bl	800651e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008550:	4b0a      	ldr	r3, [pc, #40]	@ (800857c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	68ba      	ldr	r2, [r7, #8]
 8008556:	429a      	cmp	r2, r3
 8008558:	d202      	bcs.n	8008560 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800855a:	4a08      	ldr	r2, [pc, #32]	@ (800857c <prvAddCurrentTaskToDelayedList+0xa4>)
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	6013      	str	r3, [r2, #0]
}
 8008560:	bf00      	nop
 8008562:	3710      	adds	r7, #16
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	24001068 	.word	0x24001068
 800856c:	24000b90 	.word	0x24000b90
 8008570:	24001050 	.word	0x24001050
 8008574:	24001020 	.word	0x24001020
 8008578:	2400101c 	.word	0x2400101c
 800857c:	24001084 	.word	0x24001084

08008580 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b088      	sub	sp, #32
 8008584:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008586:	2300      	movs	r3, #0
 8008588:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800858a:	f000 faab 	bl	8008ae4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800858e:	4b15      	ldr	r3, [pc, #84]	@ (80085e4 <xTimerCreateTimerTask+0x64>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d020      	beq.n	80085d8 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008596:	2300      	movs	r3, #0
 8008598:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800859a:	2300      	movs	r3, #0
 800859c:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800859e:	463a      	mov	r2, r7
 80085a0:	1d39      	adds	r1, r7, #4
 80085a2:	f107 0308 	add.w	r3, r7, #8
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7fd ff4e 	bl	8006448 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80085ac:	6839      	ldr	r1, [r7, #0]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	68ba      	ldr	r2, [r7, #8]
 80085b2:	9202      	str	r2, [sp, #8]
 80085b4:	9301      	str	r3, [sp, #4]
 80085b6:	2302      	movs	r3, #2
 80085b8:	9300      	str	r3, [sp, #0]
 80085ba:	2300      	movs	r3, #0
 80085bc:	460a      	mov	r2, r1
 80085be:	490a      	ldr	r1, [pc, #40]	@ (80085e8 <xTimerCreateTimerTask+0x68>)
 80085c0:	480a      	ldr	r0, [pc, #40]	@ (80085ec <xTimerCreateTimerTask+0x6c>)
 80085c2:	f7fe fefb 	bl	80073bc <xTaskCreateStatic>
 80085c6:	4603      	mov	r3, r0
 80085c8:	4a09      	ldr	r2, [pc, #36]	@ (80085f0 <xTimerCreateTimerTask+0x70>)
 80085ca:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80085cc:	4b08      	ldr	r3, [pc, #32]	@ (80085f0 <xTimerCreateTimerTask+0x70>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d001      	beq.n	80085d8 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 80085d4:	2301      	movs	r3, #1
 80085d6:	60fb      	str	r3, [r7, #12]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
 80085d8:	68fb      	ldr	r3, [r7, #12]
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3710      	adds	r7, #16
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	240010c0 	.word	0x240010c0
 80085e8:	08017b9c 	.word	0x08017b9c
 80085ec:	080086f5 	.word	0x080086f5
 80085f0:	240010c4 	.word	0x240010c4

080085f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b08a      	sub	sp, #40	@ 0x28
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	60b9      	str	r1, [r7, #8]
 80085fe:	607a      	str	r2, [r7, #4]
 8008600:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008602:	2300      	movs	r3, #0
 8008604:	627b      	str	r3, [r7, #36]	@ 0x24

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008606:	4b1a      	ldr	r3, [pc, #104]	@ (8008670 <xTimerGenericCommand+0x7c>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d02a      	beq.n	8008664 <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	2b05      	cmp	r3, #5
 800861e:	dc18      	bgt.n	8008652 <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008620:	f7ff fc62 	bl	8007ee8 <xTaskGetSchedulerState>
 8008624:	4603      	mov	r3, r0
 8008626:	2b02      	cmp	r3, #2
 8008628:	d109      	bne.n	800863e <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800862a:	4b11      	ldr	r3, [pc, #68]	@ (8008670 <xTimerGenericCommand+0x7c>)
 800862c:	6818      	ldr	r0, [r3, #0]
 800862e:	f107 0114 	add.w	r1, r7, #20
 8008632:	2300      	movs	r3, #0
 8008634:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008636:	f7fe f977 	bl	8006928 <xQueueGenericSend>
 800863a:	6278      	str	r0, [r7, #36]	@ 0x24
 800863c:	e012      	b.n	8008664 <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800863e:	4b0c      	ldr	r3, [pc, #48]	@ (8008670 <xTimerGenericCommand+0x7c>)
 8008640:	6818      	ldr	r0, [r3, #0]
 8008642:	f107 0114 	add.w	r1, r7, #20
 8008646:	2300      	movs	r3, #0
 8008648:	2200      	movs	r2, #0
 800864a:	f7fe f96d 	bl	8006928 <xQueueGenericSend>
 800864e:	6278      	str	r0, [r7, #36]	@ 0x24
 8008650:	e008      	b.n	8008664 <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008652:	4b07      	ldr	r3, [pc, #28]	@ (8008670 <xTimerGenericCommand+0x7c>)
 8008654:	6818      	ldr	r0, [r3, #0]
 8008656:	f107 0114 	add.w	r1, r7, #20
 800865a:	2300      	movs	r3, #0
 800865c:	683a      	ldr	r2, [r7, #0]
 800865e:	f7fe fa21 	bl	8006aa4 <xQueueGenericSendFromISR>
 8008662:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008666:	4618      	mov	r0, r3
 8008668:	3728      	adds	r7, #40	@ 0x28
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	240010c0 	.word	0x240010c0

08008674 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b086      	sub	sp, #24
 8008678:	af02      	add	r7, sp, #8
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800867e:	4b1c      	ldr	r3, [pc, #112]	@ (80086f0 <prvProcessExpiredTimer+0x7c>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	3304      	adds	r3, #4
 800868c:	4618      	mov	r0, r3
 800868e:	f7fd ff7f 	bl	8006590 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008698:	f003 0304 	and.w	r3, r3, #4
 800869c:	2b00      	cmp	r3, #0
 800869e:	d015      	beq.n	80086cc <prvProcessExpiredTimer+0x58>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	699a      	ldr	r2, [r3, #24]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	18d1      	adds	r1, r2, r3
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	683a      	ldr	r2, [r7, #0]
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f000 f8c7 	bl	8008840 <prvInsertTimerInActiveList>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d012      	beq.n	80086de <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80086b8:	2300      	movs	r3, #0
 80086ba:	9300      	str	r3, [sp, #0]
 80086bc:	2300      	movs	r3, #0
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	2100      	movs	r1, #0
 80086c2:	68f8      	ldr	r0, [r7, #12]
 80086c4:	f7ff ff96 	bl	80085f4 <xTimerGenericCommand>
 80086c8:	60b8      	str	r0, [r7, #8]
 80086ca:	e008      	b.n	80086de <prvProcessExpiredTimer+0x6a>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086d2:	f023 0301 	bic.w	r3, r3, #1
 80086d6:	b2da      	uxtb	r2, r3
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6a1b      	ldr	r3, [r3, #32]
 80086e2:	68f8      	ldr	r0, [r7, #12]
 80086e4:	4798      	blx	r3
}
 80086e6:	bf00      	nop
 80086e8:	3710      	adds	r7, #16
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	240010b8 	.word	0x240010b8

080086f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80086fc:	f107 0308 	add.w	r3, r7, #8
 8008700:	4618      	mov	r0, r3
 8008702:	f000 f859 	bl	80087b8 <prvGetNextExpireTime>
 8008706:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	4619      	mov	r1, r3
 800870c:	68f8      	ldr	r0, [r7, #12]
 800870e:	f000 f805 	bl	800871c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008712:	f000 f8d7 	bl	80088c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008716:	bf00      	nop
 8008718:	e7f0      	b.n	80086fc <prvTimerTask+0x8>
	...

0800871c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008726:	f7ff f851 	bl	80077cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800872a:	f107 0308 	add.w	r3, r7, #8
 800872e:	4618      	mov	r0, r3
 8008730:	f000 f866 	bl	8008800 <prvSampleTimeNow>
 8008734:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d130      	bne.n	800879e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d10a      	bne.n	8008758 <prvProcessTimerOrBlockTask+0x3c>
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	429a      	cmp	r2, r3
 8008748:	d806      	bhi.n	8008758 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800874a:	f7ff f84d 	bl	80077e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800874e:	68f9      	ldr	r1, [r7, #12]
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f7ff ff8f 	bl	8008674 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008756:	e024      	b.n	80087a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d008      	beq.n	8008770 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800875e:	4b13      	ldr	r3, [pc, #76]	@ (80087ac <prvProcessTimerOrBlockTask+0x90>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d101      	bne.n	800876c <prvProcessTimerOrBlockTask+0x50>
 8008768:	2301      	movs	r3, #1
 800876a:	e000      	b.n	800876e <prvProcessTimerOrBlockTask+0x52>
 800876c:	2300      	movs	r3, #0
 800876e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008770:	4b0f      	ldr	r3, [pc, #60]	@ (80087b0 <prvProcessTimerOrBlockTask+0x94>)
 8008772:	6818      	ldr	r0, [r3, #0]
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	1ad3      	subs	r3, r2, r3
 800877a:	683a      	ldr	r2, [r7, #0]
 800877c:	4619      	mov	r1, r3
 800877e:	f7fe fde9 	bl	8007354 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008782:	f7ff f831 	bl	80077e8 <xTaskResumeAll>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d10a      	bne.n	80087a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800878c:	4b09      	ldr	r3, [pc, #36]	@ (80087b4 <prvProcessTimerOrBlockTask+0x98>)
 800878e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008792:	601a      	str	r2, [r3, #0]
 8008794:	f3bf 8f4f 	dsb	sy
 8008798:	f3bf 8f6f 	isb	sy
}
 800879c:	e001      	b.n	80087a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800879e:	f7ff f823 	bl	80077e8 <xTaskResumeAll>
}
 80087a2:	bf00      	nop
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	240010bc 	.word	0x240010bc
 80087b0:	240010c0 	.word	0x240010c0
 80087b4:	e000ed04 	.word	0xe000ed04

080087b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80087b8:	b480      	push	{r7}
 80087ba:	b085      	sub	sp, #20
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80087c0:	4b0e      	ldr	r3, [pc, #56]	@ (80087fc <prvGetNextExpireTime+0x44>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d101      	bne.n	80087ce <prvGetNextExpireTime+0x16>
 80087ca:	2201      	movs	r2, #1
 80087cc:	e000      	b.n	80087d0 <prvGetNextExpireTime+0x18>
 80087ce:	2200      	movs	r2, #0
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d105      	bne.n	80087e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80087dc:	4b07      	ldr	r3, [pc, #28]	@ (80087fc <prvGetNextExpireTime+0x44>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	60fb      	str	r3, [r7, #12]
 80087e6:	e001      	b.n	80087ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80087e8:	2300      	movs	r3, #0
 80087ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80087ec:	68fb      	ldr	r3, [r7, #12]
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3714      	adds	r7, #20
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop
 80087fc:	240010b8 	.word	0x240010b8

08008800 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008808:	f7ff f87e 	bl	8007908 <xTaskGetTickCount>
 800880c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800880e:	4b0b      	ldr	r3, [pc, #44]	@ (800883c <prvSampleTimeNow+0x3c>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	429a      	cmp	r2, r3
 8008816:	d205      	bcs.n	8008824 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008818:	f000 f90e 	bl	8008a38 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	601a      	str	r2, [r3, #0]
 8008822:	e002      	b.n	800882a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800882a:	4a04      	ldr	r2, [pc, #16]	@ (800883c <prvSampleTimeNow+0x3c>)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008830:	68fb      	ldr	r3, [r7, #12]
}
 8008832:	4618      	mov	r0, r3
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	240010c8 	.word	0x240010c8

08008840 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b086      	sub	sp, #24
 8008844:	af00      	add	r7, sp, #0
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	607a      	str	r2, [r7, #4]
 800884c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800884e:	2300      	movs	r3, #0
 8008850:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	68ba      	ldr	r2, [r7, #8]
 8008856:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	68fa      	ldr	r2, [r7, #12]
 800885c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800885e:	68ba      	ldr	r2, [r7, #8]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	429a      	cmp	r2, r3
 8008864:	d812      	bhi.n	800888c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	1ad2      	subs	r2, r2, r3
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	699b      	ldr	r3, [r3, #24]
 8008870:	429a      	cmp	r2, r3
 8008872:	d302      	bcc.n	800887a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008874:	2301      	movs	r3, #1
 8008876:	617b      	str	r3, [r7, #20]
 8008878:	e01b      	b.n	80088b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800887a:	4b10      	ldr	r3, [pc, #64]	@ (80088bc <prvInsertTimerInActiveList+0x7c>)
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	3304      	adds	r3, #4
 8008882:	4619      	mov	r1, r3
 8008884:	4610      	mov	r0, r2
 8008886:	f7fd fe4a 	bl	800651e <vListInsert>
 800888a:	e012      	b.n	80088b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	429a      	cmp	r2, r3
 8008892:	d206      	bcs.n	80088a2 <prvInsertTimerInActiveList+0x62>
 8008894:	68ba      	ldr	r2, [r7, #8]
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	429a      	cmp	r2, r3
 800889a:	d302      	bcc.n	80088a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800889c:	2301      	movs	r3, #1
 800889e:	617b      	str	r3, [r7, #20]
 80088a0:	e007      	b.n	80088b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80088a2:	4b07      	ldr	r3, [pc, #28]	@ (80088c0 <prvInsertTimerInActiveList+0x80>)
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	3304      	adds	r3, #4
 80088aa:	4619      	mov	r1, r3
 80088ac:	4610      	mov	r0, r2
 80088ae:	f7fd fe36 	bl	800651e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80088b2:	697b      	ldr	r3, [r7, #20]
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3718      	adds	r7, #24
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	240010bc 	.word	0x240010bc
 80088c0:	240010b8 	.word	0x240010b8

080088c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b08c      	sub	sp, #48	@ 0x30
 80088c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80088ca:	e0a2      	b.n	8008a12 <prvProcessReceivedCommands+0x14e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	da0b      	bge.n	80088ea <prvProcessReceivedCommands+0x26>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80088d2:	f107 0308 	add.w	r3, r7, #8
 80088d6:	3304      	adds	r3, #4
 80088d8:	627b      	str	r3, [r7, #36]	@ 0x24
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80088da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088e0:	6850      	ldr	r0, [r2, #4]
 80088e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088e4:	6892      	ldr	r2, [r2, #8]
 80088e6:	4611      	mov	r1, r2
 80088e8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	f2c0 8090 	blt.w	8008a12 <prvProcessReceivedCommands+0x14e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80088f6:	6a3b      	ldr	r3, [r7, #32]
 80088f8:	695b      	ldr	r3, [r3, #20]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d004      	beq.n	8008908 <prvProcessReceivedCommands+0x44>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80088fe:	6a3b      	ldr	r3, [r7, #32]
 8008900:	3304      	adds	r3, #4
 8008902:	4618      	mov	r0, r3
 8008904:	f7fd fe44 	bl	8006590 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008908:	1d3b      	adds	r3, r7, #4
 800890a:	4618      	mov	r0, r3
 800890c:	f7ff ff78 	bl	8008800 <prvSampleTimeNow>
 8008910:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	2b09      	cmp	r3, #9
 8008916:	d879      	bhi.n	8008a0c <prvProcessReceivedCommands+0x148>
 8008918:	a201      	add	r2, pc, #4	@ (adr r2, 8008920 <prvProcessReceivedCommands+0x5c>)
 800891a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800891e:	bf00      	nop
 8008920:	08008949 	.word	0x08008949
 8008924:	08008949 	.word	0x08008949
 8008928:	08008949 	.word	0x08008949
 800892c:	080089a3 	.word	0x080089a3
 8008930:	080089b7 	.word	0x080089b7
 8008934:	080089e3 	.word	0x080089e3
 8008938:	08008949 	.word	0x08008949
 800893c:	08008949 	.word	0x08008949
 8008940:	080089a3 	.word	0x080089a3
 8008944:	080089b7 	.word	0x080089b7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008948:	6a3b      	ldr	r3, [r7, #32]
 800894a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800894e:	f043 0301 	orr.w	r3, r3, #1
 8008952:	b2da      	uxtb	r2, r3
 8008954:	6a3b      	ldr	r3, [r7, #32]
 8008956:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800895a:	68fa      	ldr	r2, [r7, #12]
 800895c:	6a3b      	ldr	r3, [r7, #32]
 800895e:	699b      	ldr	r3, [r3, #24]
 8008960:	18d1      	adds	r1, r2, r3
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	69fa      	ldr	r2, [r7, #28]
 8008966:	6a38      	ldr	r0, [r7, #32]
 8008968:	f7ff ff6a 	bl	8008840 <prvInsertTimerInActiveList>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d04e      	beq.n	8008a10 <prvProcessReceivedCommands+0x14c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008972:	6a3b      	ldr	r3, [r7, #32]
 8008974:	6a1b      	ldr	r3, [r3, #32]
 8008976:	6a38      	ldr	r0, [r7, #32]
 8008978:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800897a:	6a3b      	ldr	r3, [r7, #32]
 800897c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008980:	f003 0304 	and.w	r3, r3, #4
 8008984:	2b00      	cmp	r3, #0
 8008986:	d043      	beq.n	8008a10 <prvProcessReceivedCommands+0x14c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008988:	68fa      	ldr	r2, [r7, #12]
 800898a:	6a3b      	ldr	r3, [r7, #32]
 800898c:	699b      	ldr	r3, [r3, #24]
 800898e:	441a      	add	r2, r3
 8008990:	2300      	movs	r3, #0
 8008992:	9300      	str	r3, [sp, #0]
 8008994:	2300      	movs	r3, #0
 8008996:	2100      	movs	r1, #0
 8008998:	6a38      	ldr	r0, [r7, #32]
 800899a:	f7ff fe2b 	bl	80085f4 <xTimerGenericCommand>
 800899e:	61b8      	str	r0, [r7, #24]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 80089a0:	e036      	b.n	8008a10 <prvProcessReceivedCommands+0x14c>

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80089a2:	6a3b      	ldr	r3, [r7, #32]
 80089a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089a8:	f023 0301 	bic.w	r3, r3, #1
 80089ac:	b2da      	uxtb	r2, r3
 80089ae:	6a3b      	ldr	r3, [r7, #32]
 80089b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80089b4:	e02d      	b.n	8008a12 <prvProcessReceivedCommands+0x14e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80089b6:	6a3b      	ldr	r3, [r7, #32]
 80089b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089bc:	f043 0301 	orr.w	r3, r3, #1
 80089c0:	b2da      	uxtb	r2, r3
 80089c2:	6a3b      	ldr	r3, [r7, #32]
 80089c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80089c8:	68fa      	ldr	r2, [r7, #12]
 80089ca:	6a3b      	ldr	r3, [r7, #32]
 80089cc:	619a      	str	r2, [r3, #24]
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80089ce:	6a3b      	ldr	r3, [r7, #32]
 80089d0:	699a      	ldr	r2, [r3, #24]
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	18d1      	adds	r1, r2, r3
 80089d6:	69fb      	ldr	r3, [r7, #28]
 80089d8:	69fa      	ldr	r2, [r7, #28]
 80089da:	6a38      	ldr	r0, [r7, #32]
 80089dc:	f7ff ff30 	bl	8008840 <prvInsertTimerInActiveList>
					break;
 80089e0:	e017      	b.n	8008a12 <prvProcessReceivedCommands+0x14e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80089e2:	6a3b      	ldr	r3, [r7, #32]
 80089e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089e8:	f003 0302 	and.w	r3, r3, #2
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d103      	bne.n	80089f8 <prvProcessReceivedCommands+0x134>
						{
							vPortFree( pxTimer );
 80089f0:	6a38      	ldr	r0, [r7, #32]
 80089f2:	f000 fb15 	bl	8009020 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80089f6:	e00c      	b.n	8008a12 <prvProcessReceivedCommands+0x14e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80089f8:	6a3b      	ldr	r3, [r7, #32]
 80089fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089fe:	f023 0301 	bic.w	r3, r3, #1
 8008a02:	b2da      	uxtb	r2, r3
 8008a04:	6a3b      	ldr	r3, [r7, #32]
 8008a06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008a0a:	e002      	b.n	8008a12 <prvProcessReceivedCommands+0x14e>

				default	:
					/* Don't expect to get here. */
					break;
 8008a0c:	bf00      	nop
 8008a0e:	e000      	b.n	8008a12 <prvProcessReceivedCommands+0x14e>
					break;
 8008a10:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a12:	4b08      	ldr	r3, [pc, #32]	@ (8008a34 <prvProcessReceivedCommands+0x170>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f107 0108 	add.w	r1, r7, #8
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f7fe f909 	bl	8006c34 <xQueueReceive>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	f47f af51 	bne.w	80088cc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008a2a:	bf00      	nop
 8008a2c:	bf00      	nop
 8008a2e:	3728      	adds	r7, #40	@ 0x28
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	240010c0 	.word	0x240010c0

08008a38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b088      	sub	sp, #32
 8008a3c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a3e:	e03a      	b.n	8008ab6 <prvSwitchTimerLists+0x7e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a40:	4b26      	ldr	r3, [pc, #152]	@ (8008adc <prvSwitchTimerLists+0xa4>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a4a:	4b24      	ldr	r3, [pc, #144]	@ (8008adc <prvSwitchTimerLists+0xa4>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	68db      	ldr	r3, [r3, #12]
 8008a52:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	3304      	adds	r3, #4
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f7fd fd99 	bl	8006590 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	6a1b      	ldr	r3, [r3, #32]
 8008a62:	68f8      	ldr	r0, [r7, #12]
 8008a64:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a6c:	f003 0304 	and.w	r3, r3, #4
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d020      	beq.n	8008ab6 <prvSwitchTimerLists+0x7e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	699b      	ldr	r3, [r3, #24]
 8008a78:	693a      	ldr	r2, [r7, #16]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008a7e:	68ba      	ldr	r2, [r7, #8]
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d90e      	bls.n	8008aa4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	68ba      	ldr	r2, [r7, #8]
 8008a8a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	68fa      	ldr	r2, [r7, #12]
 8008a90:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a92:	4b12      	ldr	r3, [pc, #72]	@ (8008adc <prvSwitchTimerLists+0xa4>)
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	3304      	adds	r3, #4
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	4610      	mov	r0, r2
 8008a9e:	f7fd fd3e 	bl	800651e <vListInsert>
 8008aa2:	e008      	b.n	8008ab6 <prvSwitchTimerLists+0x7e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	9300      	str	r3, [sp, #0]
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	693a      	ldr	r2, [r7, #16]
 8008aac:	2100      	movs	r1, #0
 8008aae:	68f8      	ldr	r0, [r7, #12]
 8008ab0:	f7ff fda0 	bl	80085f4 <xTimerGenericCommand>
 8008ab4:	6078      	str	r0, [r7, #4]
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ab6:	4b09      	ldr	r3, [pc, #36]	@ (8008adc <prvSwitchTimerLists+0xa4>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d1bf      	bne.n	8008a40 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008ac0:	4b06      	ldr	r3, [pc, #24]	@ (8008adc <prvSwitchTimerLists+0xa4>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008ac6:	4b06      	ldr	r3, [pc, #24]	@ (8008ae0 <prvSwitchTimerLists+0xa8>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a04      	ldr	r2, [pc, #16]	@ (8008adc <prvSwitchTimerLists+0xa4>)
 8008acc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008ace:	4a04      	ldr	r2, [pc, #16]	@ (8008ae0 <prvSwitchTimerLists+0xa8>)
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	6013      	str	r3, [r2, #0]
}
 8008ad4:	bf00      	nop
 8008ad6:	3718      	adds	r7, #24
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	240010b8 	.word	0x240010b8
 8008ae0:	240010bc 	.word	0x240010bc

08008ae4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008aea:	f000 f921 	bl	8008d30 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008aee:	4b15      	ldr	r3, [pc, #84]	@ (8008b44 <prvCheckForValidListAndQueue+0x60>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d120      	bne.n	8008b38 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008af6:	4814      	ldr	r0, [pc, #80]	@ (8008b48 <prvCheckForValidListAndQueue+0x64>)
 8008af8:	f7fd fcc0 	bl	800647c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008afc:	4813      	ldr	r0, [pc, #76]	@ (8008b4c <prvCheckForValidListAndQueue+0x68>)
 8008afe:	f7fd fcbd 	bl	800647c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008b02:	4b13      	ldr	r3, [pc, #76]	@ (8008b50 <prvCheckForValidListAndQueue+0x6c>)
 8008b04:	4a10      	ldr	r2, [pc, #64]	@ (8008b48 <prvCheckForValidListAndQueue+0x64>)
 8008b06:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008b08:	4b12      	ldr	r3, [pc, #72]	@ (8008b54 <prvCheckForValidListAndQueue+0x70>)
 8008b0a:	4a10      	ldr	r2, [pc, #64]	@ (8008b4c <prvCheckForValidListAndQueue+0x68>)
 8008b0c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008b0e:	2300      	movs	r3, #0
 8008b10:	9300      	str	r3, [sp, #0]
 8008b12:	4b11      	ldr	r3, [pc, #68]	@ (8008b58 <prvCheckForValidListAndQueue+0x74>)
 8008b14:	4a11      	ldr	r2, [pc, #68]	@ (8008b5c <prvCheckForValidListAndQueue+0x78>)
 8008b16:	2110      	movs	r1, #16
 8008b18:	200a      	movs	r0, #10
 8008b1a:	f7fd fdbd 	bl	8006698 <xQueueGenericCreateStatic>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	4a08      	ldr	r2, [pc, #32]	@ (8008b44 <prvCheckForValidListAndQueue+0x60>)
 8008b22:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008b24:	4b07      	ldr	r3, [pc, #28]	@ (8008b44 <prvCheckForValidListAndQueue+0x60>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d005      	beq.n	8008b38 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008b2c:	4b05      	ldr	r3, [pc, #20]	@ (8008b44 <prvCheckForValidListAndQueue+0x60>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	490b      	ldr	r1, [pc, #44]	@ (8008b60 <prvCheckForValidListAndQueue+0x7c>)
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7fe fbba 	bl	80072ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b38:	f000 f91c 	bl	8008d74 <vPortExitCritical>
}
 8008b3c:	bf00      	nop
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	240010c0 	.word	0x240010c0
 8008b48:	24001090 	.word	0x24001090
 8008b4c:	240010a4 	.word	0x240010a4
 8008b50:	240010b8 	.word	0x240010b8
 8008b54:	240010bc 	.word	0x240010bc
 8008b58:	2400116c 	.word	0x2400116c
 8008b5c:	240010cc 	.word	0x240010cc
 8008b60:	08017ba4 	.word	0x08017ba4

08008b64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008b64:	b480      	push	{r7}
 8008b66:	b085      	sub	sp, #20
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	60b9      	str	r1, [r7, #8]
 8008b6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	3b04      	subs	r3, #4
 8008b74:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008b7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	3b04      	subs	r3, #4
 8008b82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	f023 0201 	bic.w	r2, r3, #1
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	3b04      	subs	r3, #4
 8008b92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008b94:	4a0c      	ldr	r2, [pc, #48]	@ (8008bc8 <pxPortInitialiseStack+0x64>)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	3b14      	subs	r3, #20
 8008b9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	3b04      	subs	r3, #4
 8008baa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f06f 0202 	mvn.w	r2, #2
 8008bb2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	3b20      	subs	r3, #32
 8008bb8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008bba:	68fb      	ldr	r3, [r7, #12]
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3714      	adds	r7, #20
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr
 8008bc8:	08008bcd 	.word	0x08008bcd

08008bcc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bda:	f383 8811 	msr	BASEPRI, r3
 8008bde:	f3bf 8f6f 	isb	sy
 8008be2:	f3bf 8f4f 	dsb	sy
 8008be6:	607b      	str	r3, [r7, #4]
}
 8008be8:	bf00      	nop

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008bea:	bf00      	nop
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d0fc      	beq.n	8008bec <prvTaskExitError+0x20>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008bf2:	bf00      	nop
 8008bf4:	bf00      	nop
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008c00:	4b07      	ldr	r3, [pc, #28]	@ (8008c20 <pxCurrentTCBConst2>)
 8008c02:	6819      	ldr	r1, [r3, #0]
 8008c04:	6808      	ldr	r0, [r1, #0]
 8008c06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c0a:	f380 8809 	msr	PSP, r0
 8008c0e:	f3bf 8f6f 	isb	sy
 8008c12:	f04f 0000 	mov.w	r0, #0
 8008c16:	f380 8811 	msr	BASEPRI, r0
 8008c1a:	4770      	bx	lr
 8008c1c:	f3af 8000 	nop.w

08008c20 <pxCurrentTCBConst2>:
 8008c20:	24000b90 	.word	0x24000b90
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008c24:	bf00      	nop
 8008c26:	bf00      	nop

08008c28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008c28:	4808      	ldr	r0, [pc, #32]	@ (8008c4c <prvPortStartFirstTask+0x24>)
 8008c2a:	6800      	ldr	r0, [r0, #0]
 8008c2c:	6800      	ldr	r0, [r0, #0]
 8008c2e:	f380 8808 	msr	MSP, r0
 8008c32:	f04f 0000 	mov.w	r0, #0
 8008c36:	f380 8814 	msr	CONTROL, r0
 8008c3a:	b662      	cpsie	i
 8008c3c:	b661      	cpsie	f
 8008c3e:	f3bf 8f4f 	dsb	sy
 8008c42:	f3bf 8f6f 	isb	sy
 8008c46:	df00      	svc	0
 8008c48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008c4a:	bf00      	nop
 8008c4c:	e000ed08 	.word	0xe000ed08

08008c50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008c56:	4b2f      	ldr	r3, [pc, #188]	@ (8008d14 <xPortStartScheduler+0xc4>)
 8008c58:	681b      	ldr	r3, [r3, #0]
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008c5a:	4b2e      	ldr	r3, [pc, #184]	@ (8008d14 <xPortStartScheduler+0xc4>)
 8008c5c:	681b      	ldr	r3, [r3, #0]

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008c5e:	4b2e      	ldr	r3, [pc, #184]	@ (8008d18 <xPortStartScheduler+0xc8>)
 8008c60:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	22ff      	movs	r2, #255	@ 0xff
 8008c6e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008c78:	79fb      	ldrb	r3, [r7, #7]
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008c80:	b2da      	uxtb	r2, r3
 8008c82:	4b26      	ldr	r3, [pc, #152]	@ (8008d1c <xPortStartScheduler+0xcc>)
 8008c84:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008c86:	4b26      	ldr	r3, [pc, #152]	@ (8008d20 <xPortStartScheduler+0xd0>)
 8008c88:	2207      	movs	r2, #7
 8008c8a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c8c:	e009      	b.n	8008ca2 <xPortStartScheduler+0x52>
		{
			ulMaxPRIGROUPValue--;
 8008c8e:	4b24      	ldr	r3, [pc, #144]	@ (8008d20 <xPortStartScheduler+0xd0>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	3b01      	subs	r3, #1
 8008c94:	4a22      	ldr	r2, [pc, #136]	@ (8008d20 <xPortStartScheduler+0xd0>)
 8008c96:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008c98:	79fb      	ldrb	r3, [r7, #7]
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	005b      	lsls	r3, r3, #1
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ca2:	79fb      	ldrb	r3, [r7, #7]
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008caa:	2b80      	cmp	r3, #128	@ 0x80
 8008cac:	d0ef      	beq.n	8008c8e <xPortStartScheduler+0x3e>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008cae:	4b1c      	ldr	r3, [pc, #112]	@ (8008d20 <xPortStartScheduler+0xd0>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	021b      	lsls	r3, r3, #8
 8008cb4:	4a1a      	ldr	r2, [pc, #104]	@ (8008d20 <xPortStartScheduler+0xd0>)
 8008cb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008cb8:	4b19      	ldr	r3, [pc, #100]	@ (8008d20 <xPortStartScheduler+0xd0>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008cc0:	4a17      	ldr	r2, [pc, #92]	@ (8008d20 <xPortStartScheduler+0xd0>)
 8008cc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	b2da      	uxtb	r2, r3
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008ccc:	4b15      	ldr	r3, [pc, #84]	@ (8008d24 <xPortStartScheduler+0xd4>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a14      	ldr	r2, [pc, #80]	@ (8008d24 <xPortStartScheduler+0xd4>)
 8008cd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008cd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008cd8:	4b12      	ldr	r3, [pc, #72]	@ (8008d24 <xPortStartScheduler+0xd4>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a11      	ldr	r2, [pc, #68]	@ (8008d24 <xPortStartScheduler+0xd4>)
 8008cde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008ce2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ce4:	f000 f8ba 	bl	8008e5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8008d28 <xPortStartScheduler+0xd8>)
 8008cea:	2200      	movs	r2, #0
 8008cec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008cee:	f000 f8d9 	bl	8008ea4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8008d2c <xPortStartScheduler+0xdc>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a0d      	ldr	r2, [pc, #52]	@ (8008d2c <xPortStartScheduler+0xdc>)
 8008cf8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008cfc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008cfe:	f7ff ff93 	bl	8008c28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008d02:	f7fe fecf 	bl	8007aa4 <vTaskSwitchContext>
	prvTaskExitError();
 8008d06:	f7ff ff61 	bl	8008bcc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008d0a:	2300      	movs	r3, #0
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3710      	adds	r7, #16
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	e000ed00 	.word	0xe000ed00
 8008d18:	e000e400 	.word	0xe000e400
 8008d1c:	240011bc 	.word	0x240011bc
 8008d20:	240011c0 	.word	0x240011c0
 8008d24:	e000ed20 	.word	0xe000ed20
 8008d28:	24000024 	.word	0x24000024
 8008d2c:	e000ef34 	.word	0xe000ef34

08008d30 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
	__asm volatile
 8008d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d3a:	f383 8811 	msr	BASEPRI, r3
 8008d3e:	f3bf 8f6f 	isb	sy
 8008d42:	f3bf 8f4f 	dsb	sy
 8008d46:	607b      	str	r3, [r7, #4]
}
 8008d48:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008d4a:	4b08      	ldr	r3, [pc, #32]	@ (8008d6c <vPortEnterCritical+0x3c>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	3301      	adds	r3, #1
 8008d50:	4a06      	ldr	r2, [pc, #24]	@ (8008d6c <vPortEnterCritical+0x3c>)
 8008d52:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008d54:	4b05      	ldr	r3, [pc, #20]	@ (8008d6c <vPortEnterCritical+0x3c>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d101      	bne.n	8008d60 <vPortEnterCritical+0x30>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008d5c:	4b04      	ldr	r3, [pc, #16]	@ (8008d70 <vPortEnterCritical+0x40>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
	}
}
 8008d60:	bf00      	nop
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr
 8008d6c:	24000024 	.word	0x24000024
 8008d70:	e000ed04 	.word	0xe000ed04

08008d74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 8008d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8008da4 <vPortExitCritical+0x30>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	3b01      	subs	r3, #1
 8008d80:	4a08      	ldr	r2, [pc, #32]	@ (8008da4 <vPortExitCritical+0x30>)
 8008d82:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008d84:	4b07      	ldr	r3, [pc, #28]	@ (8008da4 <vPortExitCritical+0x30>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d105      	bne.n	8008d98 <vPortExitCritical+0x24>
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	607b      	str	r3, [r7, #4]
	__asm volatile
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f383 8811 	msr	BASEPRI, r3
}
 8008d96:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008d98:	bf00      	nop
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr
 8008da4:	24000024 	.word	0x24000024
	...

08008db0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008db0:	f3ef 8009 	mrs	r0, PSP
 8008db4:	f3bf 8f6f 	isb	sy
 8008db8:	4b15      	ldr	r3, [pc, #84]	@ (8008e10 <pxCurrentTCBConst>)
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	f01e 0f10 	tst.w	lr, #16
 8008dc0:	bf08      	it	eq
 8008dc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008dc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dca:	6010      	str	r0, [r2, #0]
 8008dcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008dd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008dd4:	f380 8811 	msr	BASEPRI, r0
 8008dd8:	f3bf 8f4f 	dsb	sy
 8008ddc:	f3bf 8f6f 	isb	sy
 8008de0:	f7fe fe60 	bl	8007aa4 <vTaskSwitchContext>
 8008de4:	f04f 0000 	mov.w	r0, #0
 8008de8:	f380 8811 	msr	BASEPRI, r0
 8008dec:	bc09      	pop	{r0, r3}
 8008dee:	6819      	ldr	r1, [r3, #0]
 8008df0:	6808      	ldr	r0, [r1, #0]
 8008df2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df6:	f01e 0f10 	tst.w	lr, #16
 8008dfa:	bf08      	it	eq
 8008dfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008e00:	f380 8809 	msr	PSP, r0
 8008e04:	f3bf 8f6f 	isb	sy
 8008e08:	4770      	bx	lr
 8008e0a:	bf00      	nop
 8008e0c:	f3af 8000 	nop.w

08008e10 <pxCurrentTCBConst>:
 8008e10:	24000b90 	.word	0x24000b90
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008e14:	bf00      	nop
 8008e16:	bf00      	nop

08008e18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
	__asm volatile
 8008e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e22:	f383 8811 	msr	BASEPRI, r3
 8008e26:	f3bf 8f6f 	isb	sy
 8008e2a:	f3bf 8f4f 	dsb	sy
 8008e2e:	607b      	str	r3, [r7, #4]
}
 8008e30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008e32:	f7fe fd8b 	bl	800794c <xTaskIncrementTick>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d003      	beq.n	8008e44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008e3c:	4b06      	ldr	r3, [pc, #24]	@ (8008e58 <xPortSysTickHandler+0x40>)
 8008e3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e42:	601a      	str	r2, [r3, #0]
 8008e44:	2300      	movs	r3, #0
 8008e46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	f383 8811 	msr	BASEPRI, r3
}
 8008e4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008e50:	bf00      	nop
 8008e52:	3708      	adds	r7, #8
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	e000ed04 	.word	0xe000ed04

08008e5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008e60:	4b0b      	ldr	r3, [pc, #44]	@ (8008e90 <vPortSetupTimerInterrupt+0x34>)
 8008e62:	2200      	movs	r2, #0
 8008e64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008e66:	4b0b      	ldr	r3, [pc, #44]	@ (8008e94 <vPortSetupTimerInterrupt+0x38>)
 8008e68:	2200      	movs	r2, #0
 8008e6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8008e98 <vPortSetupTimerInterrupt+0x3c>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a0a      	ldr	r2, [pc, #40]	@ (8008e9c <vPortSetupTimerInterrupt+0x40>)
 8008e72:	fba2 2303 	umull	r2, r3, r2, r3
 8008e76:	099b      	lsrs	r3, r3, #6
 8008e78:	4a09      	ldr	r2, [pc, #36]	@ (8008ea0 <vPortSetupTimerInterrupt+0x44>)
 8008e7a:	3b01      	subs	r3, #1
 8008e7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008e7e:	4b04      	ldr	r3, [pc, #16]	@ (8008e90 <vPortSetupTimerInterrupt+0x34>)
 8008e80:	2207      	movs	r2, #7
 8008e82:	601a      	str	r2, [r3, #0]
}
 8008e84:	bf00      	nop
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	e000e010 	.word	0xe000e010
 8008e94:	e000e018 	.word	0xe000e018
 8008e98:	24000000 	.word	0x24000000
 8008e9c:	10624dd3 	.word	0x10624dd3
 8008ea0:	e000e014 	.word	0xe000e014

08008ea4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008ea4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008eb4 <vPortEnableVFP+0x10>
 8008ea8:	6801      	ldr	r1, [r0, #0]
 8008eaa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008eae:	6001      	str	r1, [r0, #0]
 8008eb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008eb2:	bf00      	nop
 8008eb4:	e000ed88 	.word	0xe000ed88

08008eb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008eb8:	b480      	push	{r7}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008ebe:	f3ef 8305 	mrs	r3, IPSR
 8008ec2:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2b0f      	cmp	r3, #15
 8008ec8:	d904      	bls.n	8008ed4 <vPortValidateInterruptPriority+0x1c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008eca:	4a06      	ldr	r2, [pc, #24]	@ (8008ee4 <vPortValidateInterruptPriority+0x2c>)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4413      	add	r3, r2
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	70fb      	strb	r3, [r7, #3]
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008ed4:	4b04      	ldr	r3, [pc, #16]	@ (8008ee8 <vPortValidateInterruptPriority+0x30>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
	}
 8008ed8:	bf00      	nop
 8008eda:	370c      	adds	r7, #12
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr
 8008ee4:	e000e3f0 	.word	0xe000e3f0
 8008ee8:	e000ed0c 	.word	0xe000ed0c

08008eec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b086      	sub	sp, #24
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8008ef8:	f7fe fc68 	bl	80077cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008efc:	4b42      	ldr	r3, [pc, #264]	@ (8009008 <pvPortMalloc+0x11c>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d101      	bne.n	8008f08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008f04:	f000 f8cc 	bl	80090a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008f08:	4b40      	ldr	r3, [pc, #256]	@ (800900c <pvPortMalloc+0x120>)
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4013      	ands	r3, r2
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d172      	bne.n	8008ffa <pvPortMalloc+0x10e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00d      	beq.n	8008f36 <pvPortMalloc+0x4a>
			{
				xWantedSize += xHeapStructSize;
 8008f1a:	2208      	movs	r2, #8
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	4413      	add	r3, r2
 8008f20:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f003 0307 	and.w	r3, r3, #7
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d004      	beq.n	8008f36 <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f023 0307 	bic.w	r3, r3, #7
 8008f32:	3308      	adds	r3, #8
 8008f34:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d05e      	beq.n	8008ffa <pvPortMalloc+0x10e>
 8008f3c:	4b34      	ldr	r3, [pc, #208]	@ (8009010 <pvPortMalloc+0x124>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d859      	bhi.n	8008ffa <pvPortMalloc+0x10e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008f46:	4b33      	ldr	r3, [pc, #204]	@ (8009014 <pvPortMalloc+0x128>)
 8008f48:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8008f4a:	4b32      	ldr	r3, [pc, #200]	@ (8009014 <pvPortMalloc+0x128>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f50:	e004      	b.n	8008f5c <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d903      	bls.n	8008f6e <pvPortMalloc+0x82>
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d1f1      	bne.n	8008f52 <pvPortMalloc+0x66>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008f6e:	4b26      	ldr	r3, [pc, #152]	@ (8009008 <pvPortMalloc+0x11c>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	697a      	ldr	r2, [r7, #20]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d040      	beq.n	8008ffa <pvPortMalloc+0x10e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	2208      	movs	r2, #8
 8008f7e:	4413      	add	r3, r2
 8008f80:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	685a      	ldr	r2, [r3, #4]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	1ad2      	subs	r2, r2, r3
 8008f92:	2308      	movs	r3, #8
 8008f94:	005b      	lsls	r3, r3, #1
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d90f      	bls.n	8008fba <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008f9a:	697a      	ldr	r2, [r7, #20]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	4413      	add	r3, r2
 8008fa0:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	685a      	ldr	r2, [r3, #4]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	1ad2      	subs	r2, r2, r3
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008fb4:	68b8      	ldr	r0, [r7, #8]
 8008fb6:	f000 f8d5 	bl	8009164 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008fba:	4b15      	ldr	r3, [pc, #84]	@ (8009010 <pvPortMalloc+0x124>)
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	1ad3      	subs	r3, r2, r3
 8008fc4:	4a12      	ldr	r2, [pc, #72]	@ (8009010 <pvPortMalloc+0x124>)
 8008fc6:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008fc8:	4b11      	ldr	r3, [pc, #68]	@ (8009010 <pvPortMalloc+0x124>)
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	4b12      	ldr	r3, [pc, #72]	@ (8009018 <pvPortMalloc+0x12c>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d203      	bcs.n	8008fdc <pvPortMalloc+0xf0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008fd4:	4b0e      	ldr	r3, [pc, #56]	@ (8009010 <pvPortMalloc+0x124>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a0f      	ldr	r2, [pc, #60]	@ (8009018 <pvPortMalloc+0x12c>)
 8008fda:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	685a      	ldr	r2, [r3, #4]
 8008fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800900c <pvPortMalloc+0x120>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	431a      	orrs	r2, r3
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	2200      	movs	r2, #0
 8008fee:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800901c <pvPortMalloc+0x130>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	4a09      	ldr	r2, [pc, #36]	@ (800901c <pvPortMalloc+0x130>)
 8008ff8:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008ffa:	f7fe fbf5 	bl	80077e8 <xTaskResumeAll>
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
}
 8009000:	4618      	mov	r0, r3
 8009002:	3718      	adds	r7, #24
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}
 8009008:	24004dcc 	.word	0x24004dcc
 800900c:	24004de0 	.word	0x24004de0
 8009010:	24004dd0 	.word	0x24004dd0
 8009014:	24004dc4 	.word	0x24004dc4
 8009018:	24004dd4 	.word	0x24004dd4
 800901c:	24004dd8 	.word	0x24004dd8

08009020 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b084      	sub	sp, #16
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d02c      	beq.n	800908c <vPortFree+0x6c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009032:	2308      	movs	r3, #8
 8009034:	425b      	negs	r3, r3
 8009036:	68fa      	ldr	r2, [r7, #12]
 8009038:	4413      	add	r3, r2
 800903a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	685a      	ldr	r2, [r3, #4]
 8009044:	4b13      	ldr	r3, [pc, #76]	@ (8009094 <vPortFree+0x74>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4013      	ands	r3, r2
 800904a:	2b00      	cmp	r3, #0
 800904c:	d01e      	beq.n	800908c <vPortFree+0x6c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d11a      	bne.n	800908c <vPortFree+0x6c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	685a      	ldr	r2, [r3, #4]
 800905a:	4b0e      	ldr	r3, [pc, #56]	@ (8009094 <vPortFree+0x74>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	43db      	mvns	r3, r3
 8009060:	401a      	ands	r2, r3
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009066:	f7fe fbb1 	bl	80077cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	685a      	ldr	r2, [r3, #4]
 800906e:	4b0a      	ldr	r3, [pc, #40]	@ (8009098 <vPortFree+0x78>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4413      	add	r3, r2
 8009074:	4a08      	ldr	r2, [pc, #32]	@ (8009098 <vPortFree+0x78>)
 8009076:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009078:	68b8      	ldr	r0, [r7, #8]
 800907a:	f000 f873 	bl	8009164 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800907e:	4b07      	ldr	r3, [pc, #28]	@ (800909c <vPortFree+0x7c>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	3301      	adds	r3, #1
 8009084:	4a05      	ldr	r2, [pc, #20]	@ (800909c <vPortFree+0x7c>)
 8009086:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009088:	f7fe fbae 	bl	80077e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800908c:	bf00      	nop
 800908e:	3710      	adds	r7, #16
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}
 8009094:	24004de0 	.word	0x24004de0
 8009098:	24004dd0 	.word	0x24004dd0
 800909c:	24004ddc 	.word	0x24004ddc

080090a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80090a0:	b480      	push	{r7}
 80090a2:	b085      	sub	sp, #20
 80090a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80090a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80090aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80090ac:	4b27      	ldr	r3, [pc, #156]	@ (800914c <prvHeapInit+0xac>)
 80090ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f003 0307 	and.w	r3, r3, #7
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d00c      	beq.n	80090d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	3307      	adds	r3, #7
 80090be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f023 0307 	bic.w	r3, r3, #7
 80090c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80090c8:	68ba      	ldr	r2, [r7, #8]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	1ad3      	subs	r3, r2, r3
 80090ce:	4a1f      	ldr	r2, [pc, #124]	@ (800914c <prvHeapInit+0xac>)
 80090d0:	4413      	add	r3, r2
 80090d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80090d8:	4a1d      	ldr	r2, [pc, #116]	@ (8009150 <prvHeapInit+0xb0>)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80090de:	4b1c      	ldr	r3, [pc, #112]	@ (8009150 <prvHeapInit+0xb0>)
 80090e0:	2200      	movs	r2, #0
 80090e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	68ba      	ldr	r2, [r7, #8]
 80090e8:	4413      	add	r3, r2
 80090ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80090ec:	2208      	movs	r2, #8
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	1a9b      	subs	r3, r3, r2
 80090f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f023 0307 	bic.w	r3, r3, #7
 80090fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	4a15      	ldr	r2, [pc, #84]	@ (8009154 <prvHeapInit+0xb4>)
 8009100:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009102:	4b14      	ldr	r3, [pc, #80]	@ (8009154 <prvHeapInit+0xb4>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	2200      	movs	r2, #0
 8009108:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800910a:	4b12      	ldr	r3, [pc, #72]	@ (8009154 <prvHeapInit+0xb4>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2200      	movs	r2, #0
 8009110:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	1ad2      	subs	r2, r2, r3
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009120:	4b0c      	ldr	r3, [pc, #48]	@ (8009154 <prvHeapInit+0xb4>)
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	4a0a      	ldr	r2, [pc, #40]	@ (8009158 <prvHeapInit+0xb8>)
 800912e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	4a09      	ldr	r2, [pc, #36]	@ (800915c <prvHeapInit+0xbc>)
 8009136:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009138:	4b09      	ldr	r3, [pc, #36]	@ (8009160 <prvHeapInit+0xc0>)
 800913a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800913e:	601a      	str	r2, [r3, #0]
}
 8009140:	bf00      	nop
 8009142:	3714      	adds	r7, #20
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr
 800914c:	240011c4 	.word	0x240011c4
 8009150:	24004dc4 	.word	0x24004dc4
 8009154:	24004dcc 	.word	0x24004dcc
 8009158:	24004dd4 	.word	0x24004dd4
 800915c:	24004dd0 	.word	0x24004dd0
 8009160:	24004de0 	.word	0x24004de0

08009164 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009164:	b480      	push	{r7}
 8009166:	b085      	sub	sp, #20
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800916c:	4b28      	ldr	r3, [pc, #160]	@ (8009210 <prvInsertBlockIntoFreeList+0xac>)
 800916e:	60fb      	str	r3, [r7, #12]
 8009170:	e002      	b.n	8009178 <prvInsertBlockIntoFreeList+0x14>
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	60fb      	str	r3, [r7, #12]
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	429a      	cmp	r2, r3
 8009180:	d8f7      	bhi.n	8009172 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	68ba      	ldr	r2, [r7, #8]
 800918c:	4413      	add	r3, r2
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	429a      	cmp	r2, r3
 8009192:	d108      	bne.n	80091a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	685a      	ldr	r2, [r3, #4]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	441a      	add	r2, r3
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	68ba      	ldr	r2, [r7, #8]
 80091b0:	441a      	add	r2, r3
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d118      	bne.n	80091ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	4b15      	ldr	r3, [pc, #84]	@ (8009214 <prvInsertBlockIntoFreeList+0xb0>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d00d      	beq.n	80091e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	685a      	ldr	r2, [r3, #4]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	441a      	add	r2, r3
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	601a      	str	r2, [r3, #0]
 80091e0:	e008      	b.n	80091f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80091e2:	4b0c      	ldr	r3, [pc, #48]	@ (8009214 <prvInsertBlockIntoFreeList+0xb0>)
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	601a      	str	r2, [r3, #0]
 80091ea:	e003      	b.n	80091f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80091f4:	68fa      	ldr	r2, [r7, #12]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d002      	beq.n	8009202 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009202:	bf00      	nop
 8009204:	3714      	adds	r7, #20
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr
 800920e:	bf00      	nop
 8009210:	24004dc4 	.word	0x24004dc4
 8009214:	24004dcc 	.word	0x24004dcc

08009218 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	330c      	adds	r3, #12
 8009228:	461a      	mov	r2, r3
 800922a:	6839      	ldr	r1, [r7, #0]
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f002 fabd 	bl	800b7ac <tcpip_send_msg_wait_sem>
 8009232:	4603      	mov	r3, r0
 8009234:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d103      	bne.n	8009246 <netconn_apimsg+0x2e>
    return apimsg->err;
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009244:	e001      	b.n	800924a <netconn_apimsg+0x32>
  }
  return err;
 8009246:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800924a:	4618      	mov	r0, r3
 800924c:	3710      	adds	r7, #16
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
	...

08009254 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b08e      	sub	sp, #56	@ 0x38
 8009258:	af00      	add	r7, sp, #0
 800925a:	4603      	mov	r3, r0
 800925c:	603a      	str	r2, [r7, #0]
 800925e:	71fb      	strb	r3, [r7, #7]
 8009260:	460b      	mov	r3, r1
 8009262:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8009264:	79fb      	ldrb	r3, [r7, #7]
 8009266:	6839      	ldr	r1, [r7, #0]
 8009268:	4618      	mov	r0, r3
 800926a:	f001 f94f 	bl	800a50c <netconn_alloc>
 800926e:	6378      	str	r0, [r7, #52]	@ 0x34
  if (conn != NULL) {
 8009270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009272:	2b00      	cmp	r3, #0
 8009274:	d054      	beq.n	8009320 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8009276:	79bb      	ldrb	r3, [r7, #6]
 8009278:	753b      	strb	r3, [r7, #20]
    API_MSG_VAR_REF(msg).conn = conn;
 800927a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800927c:	60fb      	str	r3, [r7, #12]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800927e:	f107 030c 	add.w	r3, r7, #12
 8009282:	4619      	mov	r1, r3
 8009284:	4829      	ldr	r0, [pc, #164]	@ (800932c <netconn_new_with_proto_and_callback+0xd8>)
 8009286:	f7ff ffc7 	bl	8009218 <netconn_apimsg>
 800928a:	4603      	mov	r3, r0
 800928c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (err != ERR_OK) {
 8009290:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009294:	2b00      	cmp	r3, #0
 8009296:	d043      	beq.n	8009320 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8009298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d005      	beq.n	80092ac <netconn_new_with_proto_and_callback+0x58>
 80092a0:	4b23      	ldr	r3, [pc, #140]	@ (8009330 <netconn_new_with_proto_and_callback+0xdc>)
 80092a2:	22a3      	movs	r2, #163	@ 0xa3
 80092a4:	4923      	ldr	r1, [pc, #140]	@ (8009334 <netconn_new_with_proto_and_callback+0xe0>)
 80092a6:	4824      	ldr	r0, [pc, #144]	@ (8009338 <netconn_new_with_proto_and_callback+0xe4>)
 80092a8:	f00d fcc2 	bl	8016c30 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80092ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092ae:	3310      	adds	r3, #16
 80092b0:	4618      	mov	r0, r3
 80092b2:	f00d fa95 	bl	80167e0 <sys_mbox_valid>
 80092b6:	4603      	mov	r3, r0
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d105      	bne.n	80092c8 <netconn_new_with_proto_and_callback+0x74>
 80092bc:	4b1c      	ldr	r3, [pc, #112]	@ (8009330 <netconn_new_with_proto_and_callback+0xdc>)
 80092be:	22a4      	movs	r2, #164	@ 0xa4
 80092c0:	491e      	ldr	r1, [pc, #120]	@ (800933c <netconn_new_with_proto_and_callback+0xe8>)
 80092c2:	481d      	ldr	r0, [pc, #116]	@ (8009338 <netconn_new_with_proto_and_callback+0xe4>)
 80092c4:	f00d fcb4 	bl	8016c30 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80092c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092ca:	3314      	adds	r3, #20
 80092cc:	4618      	mov	r0, r3
 80092ce:	f00d fa87 	bl	80167e0 <sys_mbox_valid>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d005      	beq.n	80092e4 <netconn_new_with_proto_and_callback+0x90>
 80092d8:	4b15      	ldr	r3, [pc, #84]	@ (8009330 <netconn_new_with_proto_and_callback+0xdc>)
 80092da:	22a6      	movs	r2, #166	@ 0xa6
 80092dc:	4918      	ldr	r1, [pc, #96]	@ (8009340 <netconn_new_with_proto_and_callback+0xec>)
 80092de:	4816      	ldr	r0, [pc, #88]	@ (8009338 <netconn_new_with_proto_and_callback+0xe4>)
 80092e0:	f00d fca6 	bl	8016c30 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80092e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092e6:	330c      	adds	r3, #12
 80092e8:	4618      	mov	r0, r3
 80092ea:	f00d fb07 	bl	80168fc <sys_sem_valid>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d105      	bne.n	8009300 <netconn_new_with_proto_and_callback+0xac>
 80092f4:	4b0e      	ldr	r3, [pc, #56]	@ (8009330 <netconn_new_with_proto_and_callback+0xdc>)
 80092f6:	22a9      	movs	r2, #169	@ 0xa9
 80092f8:	4912      	ldr	r1, [pc, #72]	@ (8009344 <netconn_new_with_proto_and_callback+0xf0>)
 80092fa:	480f      	ldr	r0, [pc, #60]	@ (8009338 <netconn_new_with_proto_and_callback+0xe4>)
 80092fc:	f00d fc98 	bl	8016c30 <iprintf>
      sys_sem_free(&conn->op_completed);
 8009300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009302:	330c      	adds	r3, #12
 8009304:	4618      	mov	r0, r3
 8009306:	f00d faec 	bl	80168e2 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800930a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800930c:	3310      	adds	r3, #16
 800930e:	4618      	mov	r0, r3
 8009310:	f00d f9f2 	bl	80166f8 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8009314:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009316:	2007      	movs	r0, #7
 8009318:	f003 f8ae 	bl	800c478 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800931c:	2300      	movs	r3, #0
 800931e:	e000      	b.n	8009322 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8009320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009322:	4618      	mov	r0, r3
 8009324:	3738      	adds	r7, #56	@ 0x38
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	0800a4e1 	.word	0x0800a4e1
 8009330:	08017bac 	.word	0x08017bac
 8009334:	08017be0 	.word	0x08017be0
 8009338:	08017c04 	.word	0x08017c04
 800933c:	08017c2c 	.word	0x08017c2c
 8009340:	08017c44 	.word	0x08017c44
 8009344:	08017c68 	.word	0x08017c68

08009348 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b08c      	sub	sp, #48	@ 0x30
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d101      	bne.n	800935a <netconn_prepare_delete+0x12>
    return ERR_OK;
 8009356:	2300      	movs	r3, #0
 8009358:	e016      	b.n	8009388 <netconn_prepare_delete+0x40>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	60bb      	str	r3, [r7, #8]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
 800935e:	f7fc f813 	bl	8005388 <sys_now>
 8009362:	4603      	mov	r3, r0
 8009364:	617b      	str	r3, [r7, #20]
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8009366:	f107 0308 	add.w	r3, r7, #8
 800936a:	4619      	mov	r1, r3
 800936c:	4808      	ldr	r0, [pc, #32]	@ (8009390 <netconn_prepare_delete+0x48>)
 800936e:	f7ff ff53 	bl	8009218 <netconn_apimsg>
 8009372:	4603      	mov	r3, r0
 8009374:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8009378:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800937c:	2b00      	cmp	r3, #0
 800937e:	d002      	beq.n	8009386 <netconn_prepare_delete+0x3e>
    return err;
 8009380:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8009384:	e000      	b.n	8009388 <netconn_prepare_delete+0x40>
  }
  return ERR_OK;
 8009386:	2300      	movs	r3, #0
}
 8009388:	4618      	mov	r0, r3
 800938a:	3730      	adds	r7, #48	@ 0x30
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}
 8009390:	0800aa75 	.word	0x0800aa75

08009394 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d101      	bne.n	80093a6 <netconn_delete+0x12>
    return ERR_OK;
 80093a2:	2300      	movs	r3, #0
 80093a4:	e00d      	b.n	80093c2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f7ff ffce 	bl	8009348 <netconn_prepare_delete>
 80093ac:	4603      	mov	r3, r0
 80093ae:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 80093b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d102      	bne.n	80093be <netconn_delete+0x2a>
    netconn_free(conn);
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f001 f919 	bl	800a5f0 <netconn_free>
  }
  return err;
 80093be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
	...

080093cc <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b08e      	sub	sp, #56	@ 0x38
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	60b9      	str	r1, [r7, #8]
 80093d6:	4613      	mov	r3, r2
 80093d8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d109      	bne.n	80093f4 <netconn_bind+0x28>
 80093e0:	4b11      	ldr	r3, [pc, #68]	@ (8009428 <netconn_bind+0x5c>)
 80093e2:	f44f 729c 	mov.w	r2, #312	@ 0x138
 80093e6:	4911      	ldr	r1, [pc, #68]	@ (800942c <netconn_bind+0x60>)
 80093e8:	4811      	ldr	r0, [pc, #68]	@ (8009430 <netconn_bind+0x64>)
 80093ea:	f00d fc21 	bl	8016c30 <iprintf>
 80093ee:	f06f 030f 	mvn.w	r3, #15
 80093f2:	e015      	b.n	8009420 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d101      	bne.n	80093fe <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80093fa:	4b0e      	ldr	r3, [pc, #56]	@ (8009434 <netconn_bind+0x68>)
 80093fc:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8009406:	88fb      	ldrh	r3, [r7, #6]
 8009408:	83bb      	strh	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800940a:	f107 0310 	add.w	r3, r7, #16
 800940e:	4619      	mov	r1, r3
 8009410:	4809      	ldr	r0, [pc, #36]	@ (8009438 <netconn_bind+0x6c>)
 8009412:	f7ff ff01 	bl	8009218 <netconn_apimsg>
 8009416:	4603      	mov	r3, r0
 8009418:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800941c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8009420:	4618      	mov	r0, r3
 8009422:	3738      	adds	r7, #56	@ 0x38
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}
 8009428:	08017bac 	.word	0x08017bac
 800942c:	08017ce4 	.word	0x08017ce4
 8009430:	08017c04 	.word	0x08017c04
 8009434:	0801b1d0 	.word	0x0801b1d0
 8009438:	0800ac41 	.word	0x0800ac41

0800943c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b08c      	sub	sp, #48	@ 0x30
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	460b      	mov	r3, r1
 8009446:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d109      	bne.n	8009462 <netconn_listen_with_backlog+0x26>
 800944e:	4b0d      	ldr	r3, [pc, #52]	@ (8009484 <netconn_listen_with_backlog+0x48>)
 8009450:	f240 12bb 	movw	r2, #443	@ 0x1bb
 8009454:	490c      	ldr	r1, [pc, #48]	@ (8009488 <netconn_listen_with_backlog+0x4c>)
 8009456:	480d      	ldr	r0, [pc, #52]	@ (800948c <netconn_listen_with_backlog+0x50>)
 8009458:	f00d fbea 	bl	8016c30 <iprintf>
 800945c:	f06f 030f 	mvn.w	r3, #15
 8009460:	e00c      	b.n	800947c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	60bb      	str	r3, [r7, #8]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8009466:	f107 0308 	add.w	r3, r7, #8
 800946a:	4619      	mov	r1, r3
 800946c:	4808      	ldr	r0, [pc, #32]	@ (8009490 <netconn_listen_with_backlog+0x54>)
 800946e:	f7ff fed3 	bl	8009218 <netconn_apimsg>
 8009472:	4603      	mov	r3, r0
 8009474:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009478:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800947c:	4618      	mov	r0, r3
 800947e:	3730      	adds	r7, #48	@ 0x30
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}
 8009484:	08017bac 	.word	0x08017bac
 8009488:	08017d64 	.word	0x08017d64
 800948c:	08017c04 	.word	0x08017c04
 8009490:	0800acb5 	.word	0x0800acb5

08009494 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b086      	sub	sp, #24
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d109      	bne.n	80094b8 <netconn_accept+0x24>
 80094a4:	4b42      	ldr	r3, [pc, #264]	@ (80095b0 <netconn_accept+0x11c>)
 80094a6:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80094aa:	4942      	ldr	r1, [pc, #264]	@ (80095b4 <netconn_accept+0x120>)
 80094ac:	4842      	ldr	r0, [pc, #264]	@ (80095b8 <netconn_accept+0x124>)
 80094ae:	f00d fbbf 	bl	8016c30 <iprintf>
 80094b2:	f06f 030f 	mvn.w	r3, #15
 80094b6:	e077      	b.n	80095a8 <netconn_accept+0x114>
  *new_conn = NULL;
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	2200      	movs	r2, #0
 80094bc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d109      	bne.n	80094d8 <netconn_accept+0x44>
 80094c4:	4b3a      	ldr	r3, [pc, #232]	@ (80095b0 <netconn_accept+0x11c>)
 80094c6:	f240 12e3 	movw	r2, #483	@ 0x1e3
 80094ca:	493c      	ldr	r1, [pc, #240]	@ (80095bc <netconn_accept+0x128>)
 80094cc:	483a      	ldr	r0, [pc, #232]	@ (80095b8 <netconn_accept+0x124>)
 80094ce:	f00d fbaf 	bl	8016c30 <iprintf>
 80094d2:	f06f 030f 	mvn.w	r3, #15
 80094d6:	e067      	b.n	80095a8 <netconn_accept+0x114>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 fb9c 	bl	8009c16 <netconn_err>
 80094de:	4603      	mov	r3, r0
 80094e0:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 80094e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d002      	beq.n	80094f0 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 80094ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80094ee:	e05b      	b.n	80095a8 <netconn_accept+0x114>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	3314      	adds	r3, #20
 80094f4:	4618      	mov	r0, r3
 80094f6:	f00d f973 	bl	80167e0 <sys_mbox_valid>
 80094fa:	4603      	mov	r3, r0
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d006      	beq.n	800950e <netconn_accept+0x7a>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009506:	f003 0301 	and.w	r3, r3, #1
 800950a:	2b00      	cmp	r3, #0
 800950c:	d002      	beq.n	8009514 <netconn_accept+0x80>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800950e:	f06f 030e 	mvn.w	r3, #14
 8009512:	e049      	b.n	80095a8 <netconn_accept+0x114>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f893 3020 	ldrb.w	r3, [r3, #32]
 800951a:	f003 0302 	and.w	r3, r3, #2
 800951e:	2b00      	cmp	r3, #0
 8009520:	d00e      	beq.n	8009540 <netconn_accept+0xac>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	3314      	adds	r3, #20
 8009526:	f107 020c 	add.w	r2, r7, #12
 800952a:	4611      	mov	r1, r2
 800952c:	4618      	mov	r0, r3
 800952e:	f00d f940 	bl	80167b2 <sys_arch_mbox_tryfetch>
 8009532:	4603      	mov	r3, r0
 8009534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009538:	d113      	bne.n	8009562 <netconn_accept+0xce>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800953a:	f06f 0306 	mvn.w	r3, #6
 800953e:	e033      	b.n	80095a8 <netconn_accept+0x114>
    }
  } else {
#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f103 0014 	add.w	r0, r3, #20
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	69da      	ldr	r2, [r3, #28]
 800954a:	f107 030c 	add.w	r3, r7, #12
 800954e:	4619      	mov	r1, r3
 8009550:	f00d f8fe 	bl	8016750 <sys_arch_mbox_fetch>
 8009554:	4603      	mov	r3, r0
 8009556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800955a:	d102      	bne.n	8009562 <netconn_accept+0xce>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
 800955c:	f06f 0302 	mvn.w	r3, #2
 8009560:	e022      	b.n	80095a8 <netconn_accept+0x114>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009566:	2b00      	cmp	r3, #0
 8009568:	d005      	beq.n	8009576 <netconn_accept+0xe2>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800956e:	2200      	movs	r2, #0
 8009570:	2101      	movs	r1, #1
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f107 0213 	add.w	r2, r7, #19
 800957c:	4611      	mov	r1, r2
 800957e:	4618      	mov	r0, r3
 8009580:	f000 fb9a 	bl	8009cb8 <lwip_netconn_is_err_msg>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d002      	beq.n	8009590 <netconn_accept+0xfc>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800958a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800958e:	e00b      	b.n	80095a8 <netconn_accept+0x114>
  }
  if (accept_ptr == NULL) {
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d102      	bne.n	800959c <netconn_accept+0x108>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8009596:	f06f 030e 	mvn.w	r3, #14
 800959a:	e005      	b.n	80095a8 <netconn_accept+0x114>
  }
  newconn = (struct netconn *)accept_ptr;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	697a      	ldr	r2, [r7, #20]
 80095a4:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80095a6:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3718      	adds	r7, #24
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}
 80095b0:	08017bac 	.word	0x08017bac
 80095b4:	08017d84 	.word	0x08017d84
 80095b8:	08017c04 	.word	0x08017c04
 80095bc:	08017da4 	.word	0x08017da4

080095c0 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b088      	sub	sp, #32
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	4613      	mov	r3, r2
 80095cc:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 80095ce:	2300      	movs	r3, #0
 80095d0:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d109      	bne.n	80095ec <netconn_recv_data+0x2c>
 80095d8:	4b5e      	ldr	r3, [pc, #376]	@ (8009754 <netconn_recv_data+0x194>)
 80095da:	f44f 7212 	mov.w	r2, #584	@ 0x248
 80095de:	495e      	ldr	r1, [pc, #376]	@ (8009758 <netconn_recv_data+0x198>)
 80095e0:	485e      	ldr	r0, [pc, #376]	@ (800975c <netconn_recv_data+0x19c>)
 80095e2:	f00d fb25 	bl	8016c30 <iprintf>
 80095e6:	f06f 030f 	mvn.w	r3, #15
 80095ea:	e0ae      	b.n	800974a <netconn_recv_data+0x18a>
  *new_buf = NULL;
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	2200      	movs	r2, #0
 80095f0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d109      	bne.n	800960c <netconn_recv_data+0x4c>
 80095f8:	4b56      	ldr	r3, [pc, #344]	@ (8009754 <netconn_recv_data+0x194>)
 80095fa:	f240 224a 	movw	r2, #586	@ 0x24a
 80095fe:	4958      	ldr	r1, [pc, #352]	@ (8009760 <netconn_recv_data+0x1a0>)
 8009600:	4856      	ldr	r0, [pc, #344]	@ (800975c <netconn_recv_data+0x19c>)
 8009602:	f00d fb15 	bl	8016c30 <iprintf>
 8009606:	f06f 030f 	mvn.w	r3, #15
 800960a:	e09e      	b.n	800974a <netconn_recv_data+0x18a>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	3310      	adds	r3, #16
 8009610:	4618      	mov	r0, r3
 8009612:	f00d f8e5 	bl	80167e0 <sys_mbox_valid>
 8009616:	4603      	mov	r3, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	d10e      	bne.n	800963a <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800961c:	68f8      	ldr	r0, [r7, #12]
 800961e:	f000 fafa 	bl	8009c16 <netconn_err>
 8009622:	4603      	mov	r3, r0
 8009624:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8009626:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d002      	beq.n	8009634 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800962e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8009632:	e08a      	b.n	800974a <netconn_recv_data+0x18a>
    }
    return ERR_CONN;
 8009634:	f06f 030a 	mvn.w	r3, #10
 8009638:	e087      	b.n	800974a <netconn_recv_data+0x18a>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009640:	f003 0302 	and.w	r3, r3, #2
 8009644:	2b00      	cmp	r3, #0
 8009646:	d110      	bne.n	800966a <netconn_recv_data+0xaa>
 8009648:	79fb      	ldrb	r3, [r7, #7]
 800964a:	f003 0304 	and.w	r3, r3, #4
 800964e:	2b00      	cmp	r3, #0
 8009650:	d10b      	bne.n	800966a <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009658:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800965c:	2b00      	cmp	r3, #0
 800965e:	d104      	bne.n	800966a <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d024      	beq.n	80096b4 <netconn_recv_data+0xf4>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	3310      	adds	r3, #16
 800966e:	f107 0218 	add.w	r2, r7, #24
 8009672:	4611      	mov	r1, r2
 8009674:	4618      	mov	r0, r3
 8009676:	f00d f89c 	bl	80167b2 <sys_arch_mbox_tryfetch>
 800967a:	4603      	mov	r3, r0
 800967c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009680:	d129      	bne.n	80096d6 <netconn_recv_data+0x116>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8009682:	68f8      	ldr	r0, [r7, #12]
 8009684:	f000 fac7 	bl	8009c16 <netconn_err>
 8009688:	4603      	mov	r3, r0
 800968a:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800968c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d002      	beq.n	800969a <netconn_recv_data+0xda>
        /* return pending error */
        return err;
 8009694:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009698:	e057      	b.n	800974a <netconn_recv_data+0x18a>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80096a0:	f003 0301 	and.w	r3, r3, #1
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d002      	beq.n	80096ae <netconn_recv_data+0xee>
        return ERR_CONN;
 80096a8:	f06f 030a 	mvn.w	r3, #10
 80096ac:	e04d      	b.n	800974a <netconn_recv_data+0x18a>
      }
      return ERR_WOULDBLOCK;
 80096ae:	f06f 0306 	mvn.w	r3, #6
 80096b2:	e04a      	b.n	800974a <netconn_recv_data+0x18a>
    }
  } else {
#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f103 0010 	add.w	r0, r3, #16
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	69da      	ldr	r2, [r3, #28]
 80096be:	f107 0318 	add.w	r3, r7, #24
 80096c2:	4619      	mov	r1, r3
 80096c4:	f00d f844 	bl	8016750 <sys_arch_mbox_fetch>
 80096c8:	4603      	mov	r3, r0
 80096ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ce:	d102      	bne.n	80096d6 <netconn_recv_data+0x116>
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
 80096d0:	f06f 0302 	mvn.w	r3, #2
 80096d4:	e039      	b.n	800974a <netconn_recv_data+0x18a>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80096de:	2b10      	cmp	r3, #16
 80096e0:	d117      	bne.n	8009712 <netconn_recv_data+0x152>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	f107 0217 	add.w	r2, r7, #23
 80096e8:	4611      	mov	r1, r2
 80096ea:	4618      	mov	r0, r3
 80096ec:	f000 fae4 	bl	8009cb8 <lwip_netconn_is_err_msg>
 80096f0:	4603      	mov	r3, r0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d009      	beq.n	800970a <netconn_recv_data+0x14a>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80096f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80096fa:	f113 0f0f 	cmn.w	r3, #15
 80096fe:	d101      	bne.n	8009704 <netconn_recv_data+0x144>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8009700:	2300      	movs	r3, #0
 8009702:	e022      	b.n	800974a <netconn_recv_data+0x18a>
      }
      return err;
 8009704:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009708:	e01f      	b.n	800974a <netconn_recv_data+0x18a>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800970a:	69bb      	ldr	r3, [r7, #24]
 800970c:	891b      	ldrh	r3, [r3, #8]
 800970e:	83fb      	strh	r3, [r7, #30]
 8009710:	e00d      	b.n	800972e <netconn_recv_data+0x16e>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8009712:	69bb      	ldr	r3, [r7, #24]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d106      	bne.n	8009726 <netconn_recv_data+0x166>
 8009718:	4b0e      	ldr	r3, [pc, #56]	@ (8009754 <netconn_recv_data+0x194>)
 800971a:	f240 2291 	movw	r2, #657	@ 0x291
 800971e:	4911      	ldr	r1, [pc, #68]	@ (8009764 <netconn_recv_data+0x1a4>)
 8009720:	480e      	ldr	r0, [pc, #56]	@ (800975c <netconn_recv_data+0x19c>)
 8009722:	f00d fa85 	bl	8016c30 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8009726:	69bb      	ldr	r3, [r7, #24]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	891b      	ldrh	r3, [r3, #8]
 800972c:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009732:	2b00      	cmp	r3, #0
 8009734:	d005      	beq.n	8009742 <netconn_recv_data+0x182>
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800973a:	8bfa      	ldrh	r2, [r7, #30]
 800973c:	2101      	movs	r1, #1
 800973e:	68f8      	ldr	r0, [r7, #12]
 8009740:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8009742:	69ba      	ldr	r2, [r7, #24]
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8009748:	2300      	movs	r3, #0
}
 800974a:	4618      	mov	r0, r3
 800974c:	3720      	adds	r7, #32
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
 8009752:	bf00      	nop
 8009754:	08017bac 	.word	0x08017bac
 8009758:	08017dc4 	.word	0x08017dc4
 800975c:	08017c04 	.word	0x08017c04
 8009760:	08017de4 	.word	0x08017de4
 8009764:	08017e00 	.word	0x08017e00

08009768 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b084      	sub	sp, #16
 800976c:	af00      	add	r7, sp, #0
 800976e:	60f8      	str	r0, [r7, #12]
 8009770:	60b9      	str	r1, [r7, #8]
 8009772:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d005      	beq.n	8009786 <netconn_tcp_recvd_msg+0x1e>
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009782:	2b10      	cmp	r3, #16
 8009784:	d009      	beq.n	800979a <netconn_tcp_recvd_msg+0x32>
 8009786:	4b0c      	ldr	r3, [pc, #48]	@ (80097b8 <netconn_tcp_recvd_msg+0x50>)
 8009788:	f240 22a7 	movw	r2, #679	@ 0x2a7
 800978c:	490b      	ldr	r1, [pc, #44]	@ (80097bc <netconn_tcp_recvd_msg+0x54>)
 800978e:	480c      	ldr	r0, [pc, #48]	@ (80097c0 <netconn_tcp_recvd_msg+0x58>)
 8009790:	f00d fa4e 	bl	8016c30 <iprintf>
 8009794:	f06f 030f 	mvn.w	r3, #15
 8009798:	e00a      	b.n	80097b0 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	68fa      	ldr	r2, [r7, #12]
 800979e:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	68ba      	ldr	r2, [r7, #8]
 80097a4:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80097a6:	6879      	ldr	r1, [r7, #4]
 80097a8:	4806      	ldr	r0, [pc, #24]	@ (80097c4 <netconn_tcp_recvd_msg+0x5c>)
 80097aa:	f7ff fd35 	bl	8009218 <netconn_apimsg>
 80097ae:	4603      	mov	r3, r0
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3710      	adds	r7, #16
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	08017bac 	.word	0x08017bac
 80097bc:	08017e0c 	.word	0x08017e0c
 80097c0:	08017c04 	.word	0x08017c04
 80097c4:	0800ade5 	.word	0x0800ade5

080097c8 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b090      	sub	sp, #64	@ 0x40
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	60b9      	str	r1, [r7, #8]
 80097d2:	4613      	mov	r3, r2
 80097d4:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	3310      	adds	r3, #16
 80097da:	4618      	mov	r0, r3
 80097dc:	f00d f800 	bl	80167e0 <sys_mbox_valid>
 80097e0:	4603      	mov	r3, r0
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d102      	bne.n	80097ec <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 80097e6:	f06f 030a 	mvn.w	r3, #10
 80097ea:	e072      	b.n	80098d2 <netconn_recv_data_tcp+0x10a>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80097f2:	b25b      	sxtb	r3, r3
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	da09      	bge.n	800980c <netconn_recv_data_tcp+0x44>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80097fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009802:	b2da      	uxtb	r2, r3
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f883 2020 	strb.w	r2, [r3, #32]
    goto handle_fin;
 800980a:	e03b      	b.n	8009884 <netconn_recv_data_tcp+0xbc>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800980c:	79fb      	ldrb	r3, [r7, #7]
 800980e:	461a      	mov	r2, r3
 8009810:	68b9      	ldr	r1, [r7, #8]
 8009812:	68f8      	ldr	r0, [r7, #12]
 8009814:	f7ff fed4 	bl	80095c0 <netconn_recv_data>
 8009818:	4603      	mov	r3, r0
 800981a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 800981e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8009822:	2b00      	cmp	r3, #0
 8009824:	d002      	beq.n	800982c <netconn_recv_data_tcp+0x64>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8009826:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800982a:	e052      	b.n	80098d2 <netconn_recv_data_tcp+0x10a>
  }
  buf = *new_buf;
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8009832:	79fb      	ldrb	r3, [r7, #7]
 8009834:	f003 0308 	and.w	r3, r3, #8
 8009838:	2b00      	cmp	r3, #0
 800983a:	d10e      	bne.n	800985a <netconn_recv_data_tcp+0x92>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800983c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800983e:	2b00      	cmp	r3, #0
 8009840:	d002      	beq.n	8009848 <netconn_recv_data_tcp+0x80>
 8009842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009844:	891b      	ldrh	r3, [r3, #8]
 8009846:	e000      	b.n	800984a <netconn_recv_data_tcp+0x82>
 8009848:	2301      	movs	r3, #1
 800984a:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800984c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800984e:	f107 0210 	add.w	r2, r7, #16
 8009852:	4619      	mov	r1, r3
 8009854:	68f8      	ldr	r0, [r7, #12]
 8009856:	f7ff ff87 	bl	8009768 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800985a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800985c:	2b00      	cmp	r3, #0
 800985e:	d136      	bne.n	80098ce <netconn_recv_data_tcp+0x106>
    if (apiflags & NETCONN_NOFIN) {
 8009860:	79fb      	ldrb	r3, [r7, #7]
 8009862:	f003 0310 	and.w	r3, r3, #16
 8009866:	2b00      	cmp	r3, #0
 8009868:	d00b      	beq.n	8009882 <netconn_recv_data_tcp+0xba>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009870:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009874:	b2da      	uxtb	r2, r3
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f883 2020 	strb.w	r2, [r3, #32]
      return ERR_WOULDBLOCK;
 800987c:	f06f 0306 	mvn.w	r3, #6
 8009880:	e027      	b.n	80098d2 <netconn_recv_data_tcp+0x10a>
    } else {
handle_fin:
 8009882:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009888:	2b00      	cmp	r3, #0
 800988a:	d005      	beq.n	8009898 <netconn_recv_data_tcp+0xd0>
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009890:	2200      	movs	r2, #0
 8009892:	2101      	movs	r1, #1
 8009894:	68f8      	ldr	r0, [r7, #12]
 8009896:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d10f      	bne.n	80098c0 <netconn_recv_data_tcp+0xf8>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 80098a0:	68f8      	ldr	r0, [r7, #12]
 80098a2:	f000 f9b8 	bl	8009c16 <netconn_err>
 80098a6:	4603      	mov	r3, r0
 80098a8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 80098ac:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d002      	beq.n	80098ba <netconn_recv_data_tcp+0xf2>
          return err;
 80098b4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80098b8:	e00b      	b.n	80098d2 <netconn_recv_data_tcp+0x10a>
        }
        return ERR_RST;
 80098ba:	f06f 030d 	mvn.w	r3, #13
 80098be:	e008      	b.n	80098d2 <netconn_recv_data_tcp+0x10a>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80098c0:	2101      	movs	r1, #1
 80098c2:	68f8      	ldr	r0, [r7, #12]
 80098c4:	f000 f968 	bl	8009b98 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80098c8:	f06f 030e 	mvn.w	r3, #14
 80098cc:	e001      	b.n	80098d2 <netconn_recv_data_tcp+0x10a>
    }
  }
  return err;
 80098ce:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3740      	adds	r7, #64	@ 0x40
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
	...

080098dc <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b086      	sub	sp, #24
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 80098e6:	2300      	movs	r3, #0
 80098e8:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d109      	bne.n	8009904 <netconn_recv+0x28>
 80098f0:	4b32      	ldr	r3, [pc, #200]	@ (80099bc <netconn_recv+0xe0>)
 80098f2:	f240 3263 	movw	r2, #867	@ 0x363
 80098f6:	4932      	ldr	r1, [pc, #200]	@ (80099c0 <netconn_recv+0xe4>)
 80098f8:	4832      	ldr	r0, [pc, #200]	@ (80099c4 <netconn_recv+0xe8>)
 80098fa:	f00d f999 	bl	8016c30 <iprintf>
 80098fe:	f06f 030f 	mvn.w	r3, #15
 8009902:	e056      	b.n	80099b2 <netconn_recv+0xd6>
  *new_buf = NULL;
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	2200      	movs	r2, #0
 8009908:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d109      	bne.n	8009924 <netconn_recv+0x48>
 8009910:	4b2a      	ldr	r3, [pc, #168]	@ (80099bc <netconn_recv+0xe0>)
 8009912:	f240 3265 	movw	r2, #869	@ 0x365
 8009916:	492c      	ldr	r1, [pc, #176]	@ (80099c8 <netconn_recv+0xec>)
 8009918:	482a      	ldr	r0, [pc, #168]	@ (80099c4 <netconn_recv+0xe8>)
 800991a:	f00d f989 	bl	8016c30 <iprintf>
 800991e:	f06f 030f 	mvn.w	r3, #15
 8009922:	e046      	b.n	80099b2 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800992c:	2b10      	cmp	r3, #16
 800992e:	d13a      	bne.n	80099a6 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8009930:	2300      	movs	r3, #0
 8009932:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009934:	2006      	movs	r0, #6
 8009936:	f002 fd29 	bl	800c38c <memp_malloc>
 800993a:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d102      	bne.n	8009948 <netconn_recv+0x6c>
      return ERR_MEM;
 8009942:	f04f 33ff 	mov.w	r3, #4294967295
 8009946:	e034      	b.n	80099b2 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8009948:	f107 030c 	add.w	r3, r7, #12
 800994c:	2200      	movs	r2, #0
 800994e:	4619      	mov	r1, r3
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f7ff ff39 	bl	80097c8 <netconn_recv_data_tcp>
 8009956:	4603      	mov	r3, r0
 8009958:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800995a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d006      	beq.n	8009970 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8009962:	6979      	ldr	r1, [r7, #20]
 8009964:	2006      	movs	r0, #6
 8009966:	f002 fd87 	bl	800c478 <memp_free>
      return err;
 800996a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800996e:	e020      	b.n	80099b2 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d106      	bne.n	8009984 <netconn_recv+0xa8>
 8009976:	4b11      	ldr	r3, [pc, #68]	@ (80099bc <netconn_recv+0xe0>)
 8009978:	f240 3279 	movw	r2, #889	@ 0x379
 800997c:	4913      	ldr	r1, [pc, #76]	@ (80099cc <netconn_recv+0xf0>)
 800997e:	4811      	ldr	r0, [pc, #68]	@ (80099c4 <netconn_recv+0xe8>)
 8009980:	f00d f956 	bl	8016c30 <iprintf>

    buf->p = p;
 8009984:	68fa      	ldr	r2, [r7, #12]
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800998a:	68fa      	ldr	r2, [r7, #12]
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	2200      	movs	r2, #0
 8009994:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	2200      	movs	r2, #0
 800999a:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	697a      	ldr	r2, [r7, #20]
 80099a0:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 80099a2:	2300      	movs	r3, #0
 80099a4:	e005      	b.n	80099b2 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 80099a6:	2200      	movs	r2, #0
 80099a8:	6839      	ldr	r1, [r7, #0]
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f7ff fe08 	bl	80095c0 <netconn_recv_data>
 80099b0:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3718      	adds	r7, #24
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
 80099ba:	bf00      	nop
 80099bc:	08017bac 	.word	0x08017bac
 80099c0:	08017dc4 	.word	0x08017dc4
 80099c4:	08017c04 	.word	0x08017c04
 80099c8:	08017de4 	.word	0x08017de4
 80099cc:	08017e5c 	.word	0x08017e5c

080099d0 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b088      	sub	sp, #32
 80099d4:	af02      	add	r7, sp, #8
 80099d6:	60f8      	str	r0, [r7, #12]
 80099d8:	60b9      	str	r1, [r7, #8]
 80099da:	607a      	str	r2, [r7, #4]
 80099dc:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	613b      	str	r3, [r7, #16]
  vector.len = size;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 80099e6:	78fa      	ldrb	r2, [r7, #3]
 80099e8:	f107 0110 	add.w	r1, r7, #16
 80099ec:	6a3b      	ldr	r3, [r7, #32]
 80099ee:	9300      	str	r3, [sp, #0]
 80099f0:	4613      	mov	r3, r2
 80099f2:	2201      	movs	r2, #1
 80099f4:	68f8      	ldr	r0, [r7, #12]
 80099f6:	f000 f805 	bl	8009a04 <netconn_write_vectors_partly>
 80099fa:	4603      	mov	r3, r0
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3718      	adds	r7, #24
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b092      	sub	sp, #72	@ 0x48
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	60b9      	str	r1, [r7, #8]
 8009a0e:	4611      	mov	r1, r2
 8009a10:	461a      	mov	r2, r3
 8009a12:	460b      	mov	r3, r1
 8009a14:	80fb      	strh	r3, [r7, #6]
 8009a16:	4613      	mov	r3, r2
 8009a18:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d109      	bne.n	8009a34 <netconn_write_vectors_partly+0x30>
 8009a20:	4b57      	ldr	r3, [pc, #348]	@ (8009b80 <netconn_write_vectors_partly+0x17c>)
 8009a22:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8009a26:	4957      	ldr	r1, [pc, #348]	@ (8009b84 <netconn_write_vectors_partly+0x180>)
 8009a28:	4857      	ldr	r0, [pc, #348]	@ (8009b88 <netconn_write_vectors_partly+0x184>)
 8009a2a:	f00d f901 	bl	8016c30 <iprintf>
 8009a2e:	f06f 030f 	mvn.w	r3, #15
 8009a32:	e0a1      	b.n	8009b78 <netconn_write_vectors_partly+0x174>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009a3c:	2b10      	cmp	r3, #16
 8009a3e:	d009      	beq.n	8009a54 <netconn_write_vectors_partly+0x50>
 8009a40:	4b4f      	ldr	r3, [pc, #316]	@ (8009b80 <netconn_write_vectors_partly+0x17c>)
 8009a42:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 8009a46:	4951      	ldr	r1, [pc, #324]	@ (8009b8c <netconn_write_vectors_partly+0x188>)
 8009a48:	484f      	ldr	r0, [pc, #316]	@ (8009b88 <netconn_write_vectors_partly+0x184>)
 8009a4a:	f00d f8f1 	bl	8016c30 <iprintf>
 8009a4e:	f06f 0305 	mvn.w	r3, #5
 8009a52:	e091      	b.n	8009b78 <netconn_write_vectors_partly+0x174>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a5a:	f003 0302 	and.w	r3, r3, #2
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d104      	bne.n	8009a6c <netconn_write_vectors_partly+0x68>
 8009a62:	797b      	ldrb	r3, [r7, #5]
 8009a64:	f003 0304 	and.w	r3, r3, #4
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d001      	beq.n	8009a70 <netconn_write_vectors_partly+0x6c>
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	e000      	b.n	8009a72 <netconn_write_vectors_partly+0x6e>
 8009a70:	2300      	movs	r3, #0
 8009a72:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	699b      	ldr	r3, [r3, #24]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d002      	beq.n	8009a84 <netconn_write_vectors_partly+0x80>
    dontblock = 1;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8009a84:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d005      	beq.n	8009a98 <netconn_write_vectors_partly+0x94>
 8009a8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d102      	bne.n	8009a98 <netconn_write_vectors_partly+0x94>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8009a92:	f06f 0305 	mvn.w	r3, #5
 8009a96:	e06f      	b.n	8009b78 <netconn_write_vectors_partly+0x174>
  }

  /* sum up the total size */
  size = 0;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	643b      	str	r3, [r7, #64]	@ 0x40
  for (i = 0; i < vectorcnt; i++) {
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009aa0:	e015      	b.n	8009ace <netconn_write_vectors_partly+0xca>
    size += vectors[i].len;
 8009aa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009aa4:	00db      	lsls	r3, r3, #3
 8009aa6:	68ba      	ldr	r2, [r7, #8]
 8009aa8:	4413      	add	r3, r2
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009aae:	4413      	add	r3, r2
 8009ab0:	643b      	str	r3, [r7, #64]	@ 0x40
    if (size < vectors[i].len) {
 8009ab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ab4:	00db      	lsls	r3, r3, #3
 8009ab6:	68ba      	ldr	r2, [r7, #8]
 8009ab8:	4413      	add	r3, r2
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d202      	bcs.n	8009ac8 <netconn_write_vectors_partly+0xc4>
      /* overflow */
      return ERR_VAL;
 8009ac2:	f06f 0305 	mvn.w	r3, #5
 8009ac6:	e057      	b.n	8009b78 <netconn_write_vectors_partly+0x174>
  for (i = 0; i < vectorcnt; i++) {
 8009ac8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009aca:	3301      	adds	r3, #1
 8009acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ace:	88fb      	ldrh	r3, [r7, #6]
 8009ad0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	dbe5      	blt.n	8009aa2 <netconn_write_vectors_partly+0x9e>
    }
  }
  if (size == 0) {
 8009ad6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d101      	bne.n	8009ae0 <netconn_write_vectors_partly+0xdc>
    return ERR_OK;
 8009adc:	2300      	movs	r3, #0
 8009ade:	e04b      	b.n	8009b78 <netconn_write_vectors_partly+0x174>
  } else if (size > SSIZE_MAX) {
 8009ae0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	da0a      	bge.n	8009afc <netconn_write_vectors_partly+0xf8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8009ae6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d102      	bne.n	8009af2 <netconn_write_vectors_partly+0xee>
      return ERR_VAL;
 8009aec:	f06f 0305 	mvn.w	r3, #5
 8009af0:	e042      	b.n	8009b78 <netconn_write_vectors_partly+0x174>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8009af2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8009af6:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 8009af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009afa:	643b      	str	r3, [r7, #64]	@ 0x40
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8009b04:	88fb      	ldrh	r3, [r7, #6]
 8009b06:	83bb      	strh	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	623b      	str	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8009b0c:	797b      	ldrb	r3, [r7, #5]
 8009b0e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8009b12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b14:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8009b16:	2300      	movs	r3, #0
 8009b18:	62bb      	str	r3, [r7, #40]	@ 0x28
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	699b      	ldr	r3, [r3, #24]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d004      	beq.n	8009b2c <netconn_write_vectors_partly+0x128>
    /* get the time we started, which is later compared to
        sys_now() + conn->send_timeout */
    API_MSG_VAR_REF(msg).msg.w.time_started = sys_now();
 8009b22:	f7fb fc31 	bl	8005388 <sys_now>
 8009b26:	4603      	mov	r3, r0
 8009b28:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b2a:	e001      	b.n	8009b30 <netconn_write_vectors_partly+0x12c>
  } else {
    API_MSG_VAR_REF(msg).msg.w.time_started = 0;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	633b      	str	r3, [r7, #48]	@ 0x30
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8009b30:	f107 0310 	add.w	r3, r7, #16
 8009b34:	4619      	mov	r1, r3
 8009b36:	4816      	ldr	r0, [pc, #88]	@ (8009b90 <netconn_write_vectors_partly+0x18c>)
 8009b38:	f7ff fb6e 	bl	8009218 <netconn_apimsg>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 8009b42:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d114      	bne.n	8009b74 <netconn_write_vectors_partly+0x170>
    if (bytes_written != NULL) {
 8009b4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d002      	beq.n	8009b56 <netconn_write_vectors_partly+0x152>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8009b50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009b52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b54:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8009b56:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d10a      	bne.n	8009b74 <netconn_write_vectors_partly+0x170>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8009b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d006      	beq.n	8009b74 <netconn_write_vectors_partly+0x170>
 8009b66:	4b06      	ldr	r3, [pc, #24]	@ (8009b80 <netconn_write_vectors_partly+0x17c>)
 8009b68:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8009b6c:	4909      	ldr	r1, [pc, #36]	@ (8009b94 <netconn_write_vectors_partly+0x190>)
 8009b6e:	4806      	ldr	r0, [pc, #24]	@ (8009b88 <netconn_write_vectors_partly+0x184>)
 8009b70:	f00d f85e 	bl	8016c30 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8009b74:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3748      	adds	r7, #72	@ 0x48
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}
 8009b80:	08017bac 	.word	0x08017bac
 8009b84:	08017e84 	.word	0x08017e84
 8009b88:	08017c04 	.word	0x08017c04
 8009b8c:	08017ea0 	.word	0x08017ea0
 8009b90:	0800b22d 	.word	0x0800b22d
 8009b94:	08017ec4 	.word	0x08017ec4

08009b98 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b08c      	sub	sp, #48	@ 0x30
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d109      	bne.n	8009bbe <netconn_close_shutdown+0x26>
 8009baa:	4b10      	ldr	r3, [pc, #64]	@ (8009bec <netconn_close_shutdown+0x54>)
 8009bac:	f240 4247 	movw	r2, #1095	@ 0x447
 8009bb0:	490f      	ldr	r1, [pc, #60]	@ (8009bf0 <netconn_close_shutdown+0x58>)
 8009bb2:	4810      	ldr	r0, [pc, #64]	@ (8009bf4 <netconn_close_shutdown+0x5c>)
 8009bb4:	f00d f83c 	bl	8016c30 <iprintf>
 8009bb8:	f06f 030f 	mvn.w	r3, #15
 8009bbc:	e012      	b.n	8009be4 <netconn_close_shutdown+0x4c>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	60bb      	str	r3, [r7, #8]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8009bc2:	78fb      	ldrb	r3, [r7, #3]
 8009bc4:	743b      	strb	r3, [r7, #16]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
 8009bc6:	f7fb fbdf 	bl	8005388 <sys_now>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	617b      	str	r3, [r7, #20]
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8009bce:	f107 0308 	add.w	r3, r7, #8
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	4808      	ldr	r0, [pc, #32]	@ (8009bf8 <netconn_close_shutdown+0x60>)
 8009bd6:	f7ff fb1f 	bl	8009218 <netconn_apimsg>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009be0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3730      	adds	r7, #48	@ 0x30
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	08017bac 	.word	0x08017bac
 8009bf0:	08017ee8 	.word	0x08017ee8
 8009bf4:	08017c04 	.word	0x08017c04
 8009bf8:	0800b345 	.word	0x0800b345

08009bfc <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b082      	sub	sp, #8
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8009c04:	2103      	movs	r1, #3
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f7ff ffc6 	bl	8009b98 <netconn_close_shutdown>
 8009c0c:	4603      	mov	r3, r0
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3708      	adds	r7, #8
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}

08009c16 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8009c16:	b580      	push	{r7, lr}
 8009c18:	b084      	sub	sp, #16
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d101      	bne.n	8009c28 <netconn_err+0x12>
    return ERR_OK;
 8009c24:	2300      	movs	r3, #0
 8009c26:	e00d      	b.n	8009c44 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8009c28:	f00c fee4 	bl	80169f4 <sys_arch_protect>
 8009c2c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	7a1b      	ldrb	r3, [r3, #8]
 8009c32:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2200      	movs	r2, #0
 8009c38:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8009c3a:	68f8      	ldr	r0, [r7, #12]
 8009c3c:	f00c fee8 	bl	8016a10 <sys_arch_unprotect>
  return err;
 8009c40:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3710      	adds	r7, #16
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	4603      	mov	r3, r0
 8009c54:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8009c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c5a:	f113 0f0d 	cmn.w	r3, #13
 8009c5e:	d009      	beq.n	8009c74 <lwip_netconn_err_to_msg+0x28>
 8009c60:	f113 0f0d 	cmn.w	r3, #13
 8009c64:	dc0c      	bgt.n	8009c80 <lwip_netconn_err_to_msg+0x34>
 8009c66:	f113 0f0f 	cmn.w	r3, #15
 8009c6a:	d007      	beq.n	8009c7c <lwip_netconn_err_to_msg+0x30>
 8009c6c:	f113 0f0e 	cmn.w	r3, #14
 8009c70:	d002      	beq.n	8009c78 <lwip_netconn_err_to_msg+0x2c>
 8009c72:	e005      	b.n	8009c80 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8009c74:	4b0a      	ldr	r3, [pc, #40]	@ (8009ca0 <lwip_netconn_err_to_msg+0x54>)
 8009c76:	e00e      	b.n	8009c96 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8009c78:	4b0a      	ldr	r3, [pc, #40]	@ (8009ca4 <lwip_netconn_err_to_msg+0x58>)
 8009c7a:	e00c      	b.n	8009c96 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8009c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8009ca8 <lwip_netconn_err_to_msg+0x5c>)
 8009c7e:	e00a      	b.n	8009c96 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8009c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d005      	beq.n	8009c94 <lwip_netconn_err_to_msg+0x48>
 8009c88:	4b08      	ldr	r3, [pc, #32]	@ (8009cac <lwip_netconn_err_to_msg+0x60>)
 8009c8a:	227d      	movs	r2, #125	@ 0x7d
 8009c8c:	4908      	ldr	r1, [pc, #32]	@ (8009cb0 <lwip_netconn_err_to_msg+0x64>)
 8009c8e:	4809      	ldr	r0, [pc, #36]	@ (8009cb4 <lwip_netconn_err_to_msg+0x68>)
 8009c90:	f00c ffce 	bl	8016c30 <iprintf>
      return NULL;
 8009c94:	2300      	movs	r3, #0
  }
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3708      	adds	r7, #8
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	0801b0bc 	.word	0x0801b0bc
 8009ca4:	0801b0bd 	.word	0x0801b0bd
 8009ca8:	0801b0be 	.word	0x0801b0be
 8009cac:	08017f04 	.word	0x08017f04
 8009cb0:	08017f38 	.word	0x08017f38
 8009cb4:	08017f48 	.word	0x08017f48

08009cb8 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d105      	bne.n	8009cd4 <lwip_netconn_is_err_msg+0x1c>
 8009cc8:	4b12      	ldr	r3, [pc, #72]	@ (8009d14 <lwip_netconn_is_err_msg+0x5c>)
 8009cca:	2285      	movs	r2, #133	@ 0x85
 8009ccc:	4912      	ldr	r1, [pc, #72]	@ (8009d18 <lwip_netconn_is_err_msg+0x60>)
 8009cce:	4813      	ldr	r0, [pc, #76]	@ (8009d1c <lwip_netconn_is_err_msg+0x64>)
 8009cd0:	f00c ffae 	bl	8016c30 <iprintf>

  if (msg == &netconn_aborted) {
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	4a12      	ldr	r2, [pc, #72]	@ (8009d20 <lwip_netconn_is_err_msg+0x68>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d104      	bne.n	8009ce6 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	22f3      	movs	r2, #243	@ 0xf3
 8009ce0:	701a      	strb	r2, [r3, #0]
    return 1;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e012      	b.n	8009d0c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	4a0e      	ldr	r2, [pc, #56]	@ (8009d24 <lwip_netconn_is_err_msg+0x6c>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d104      	bne.n	8009cf8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	22f2      	movs	r2, #242	@ 0xf2
 8009cf2:	701a      	strb	r2, [r3, #0]
    return 1;
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	e009      	b.n	8009d0c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	4a0b      	ldr	r2, [pc, #44]	@ (8009d28 <lwip_netconn_is_err_msg+0x70>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d104      	bne.n	8009d0a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	22f1      	movs	r2, #241	@ 0xf1
 8009d04:	701a      	strb	r2, [r3, #0]
    return 1;
 8009d06:	2301      	movs	r3, #1
 8009d08:	e000      	b.n	8009d0c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8009d0a:	2300      	movs	r3, #0
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3708      	adds	r7, #8
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	08017f04 	.word	0x08017f04
 8009d18:	08017f70 	.word	0x08017f70
 8009d1c:	08017f48 	.word	0x08017f48
 8009d20:	0801b0bc 	.word	0x0801b0bc
 8009d24:	0801b0bd 	.word	0x0801b0bd
 8009d28:	0801b0be 	.word	0x0801b0be

08009d2c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b088      	sub	sp, #32
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	60f8      	str	r0, [r7, #12]
 8009d34:	60b9      	str	r1, [r7, #8]
 8009d36:	607a      	str	r2, [r7, #4]
 8009d38:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d105      	bne.n	8009d4c <recv_udp+0x20>
 8009d40:	4b34      	ldr	r3, [pc, #208]	@ (8009e14 <recv_udp+0xe8>)
 8009d42:	22e5      	movs	r2, #229	@ 0xe5
 8009d44:	4934      	ldr	r1, [pc, #208]	@ (8009e18 <recv_udp+0xec>)
 8009d46:	4835      	ldr	r0, [pc, #212]	@ (8009e1c <recv_udp+0xf0>)
 8009d48:	f00c ff72 	bl	8016c30 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d105      	bne.n	8009d5e <recv_udp+0x32>
 8009d52:	4b30      	ldr	r3, [pc, #192]	@ (8009e14 <recv_udp+0xe8>)
 8009d54:	22e6      	movs	r2, #230	@ 0xe6
 8009d56:	4932      	ldr	r1, [pc, #200]	@ (8009e20 <recv_udp+0xf4>)
 8009d58:	4830      	ldr	r0, [pc, #192]	@ (8009e1c <recv_udp+0xf0>)
 8009d5a:	f00c ff69 	bl	8016c30 <iprintf>
  conn = (struct netconn *)arg;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009d62:	69fb      	ldr	r3, [r7, #28]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d103      	bne.n	8009d70 <recv_udp+0x44>
    pbuf_free(p);
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f003 fa29 	bl	800d1c0 <pbuf_free>
    return;
 8009d6e:	e04d      	b.n	8009e0c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8009d70:	69fb      	ldr	r3, [r7, #28]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	68ba      	ldr	r2, [r7, #8]
 8009d76:	429a      	cmp	r2, r3
 8009d78:	d005      	beq.n	8009d86 <recv_udp+0x5a>
 8009d7a:	4b26      	ldr	r3, [pc, #152]	@ (8009e14 <recv_udp+0xe8>)
 8009d7c:	22ee      	movs	r2, #238	@ 0xee
 8009d7e:	4929      	ldr	r1, [pc, #164]	@ (8009e24 <recv_udp+0xf8>)
 8009d80:	4826      	ldr	r0, [pc, #152]	@ (8009e1c <recv_udp+0xf0>)
 8009d82:	f00c ff55 	bl	8016c30 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009d86:	69fb      	ldr	r3, [r7, #28]
 8009d88:	3310      	adds	r3, #16
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f00c fd28 	bl	80167e0 <sys_mbox_valid>
 8009d90:	4603      	mov	r3, r0
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d103      	bne.n	8009d9e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f003 fa12 	bl	800d1c0 <pbuf_free>
    return;
 8009d9c:	e036      	b.n	8009e0c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009d9e:	2006      	movs	r0, #6
 8009da0:	f002 faf4 	bl	800c38c <memp_malloc>
 8009da4:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8009da6:	69bb      	ldr	r3, [r7, #24]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d103      	bne.n	8009db4 <recv_udp+0x88>
    pbuf_free(p);
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f003 fa07 	bl	800d1c0 <pbuf_free>
    return;
 8009db2:	e02b      	b.n	8009e0c <recv_udp+0xe0>
  } else {
    buf->p = p;
 8009db4:	69bb      	ldr	r3, [r7, #24]
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8009dba:	69bb      	ldr	r3, [r7, #24]
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d002      	beq.n	8009dcc <recv_udp+0xa0>
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	e000      	b.n	8009dce <recv_udp+0xa2>
 8009dcc:	2300      	movs	r3, #0
 8009dce:	69ba      	ldr	r2, [r7, #24]
 8009dd0:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8009dd2:	69bb      	ldr	r3, [r7, #24]
 8009dd4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009dd6:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	891b      	ldrh	r3, [r3, #8]
 8009ddc:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8009dde:	69fb      	ldr	r3, [r7, #28]
 8009de0:	3310      	adds	r3, #16
 8009de2:	69b9      	ldr	r1, [r7, #24]
 8009de4:	4618      	mov	r0, r3
 8009de6:	f00c fc99 	bl	801671c <sys_mbox_trypost>
 8009dea:	4603      	mov	r3, r0
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d003      	beq.n	8009df8 <recv_udp+0xcc>
    netbuf_delete(buf);
 8009df0:	69b8      	ldr	r0, [r7, #24]
 8009df2:	f001 fb33 	bl	800b45c <netbuf_delete>
    return;
 8009df6:	e009      	b.n	8009e0c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009df8:	69fb      	ldr	r3, [r7, #28]
 8009dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d005      	beq.n	8009e0c <recv_udp+0xe0>
 8009e00:	69fb      	ldr	r3, [r7, #28]
 8009e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e04:	8afa      	ldrh	r2, [r7, #22]
 8009e06:	2100      	movs	r1, #0
 8009e08:	69f8      	ldr	r0, [r7, #28]
 8009e0a:	4798      	blx	r3
  }
}
 8009e0c:	3720      	adds	r7, #32
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	08017f04 	.word	0x08017f04
 8009e18:	08017f7c 	.word	0x08017f7c
 8009e1c:	08017f48 	.word	0x08017f48
 8009e20:	08017fa0 	.word	0x08017fa0
 8009e24:	08017fc0 	.word	0x08017fc0

08009e28 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b088      	sub	sp, #32
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	60f8      	str	r0, [r7, #12]
 8009e30:	60b9      	str	r1, [r7, #8]
 8009e32:	607a      	str	r2, [r7, #4]
 8009e34:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d106      	bne.n	8009e4a <recv_tcp+0x22>
 8009e3c:	4b36      	ldr	r3, [pc, #216]	@ (8009f18 <recv_tcp+0xf0>)
 8009e3e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8009e42:	4936      	ldr	r1, [pc, #216]	@ (8009f1c <recv_tcp+0xf4>)
 8009e44:	4836      	ldr	r0, [pc, #216]	@ (8009f20 <recv_tcp+0xf8>)
 8009e46:	f00c fef3 	bl	8016c30 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d106      	bne.n	8009e5e <recv_tcp+0x36>
 8009e50:	4b31      	ldr	r3, [pc, #196]	@ (8009f18 <recv_tcp+0xf0>)
 8009e52:	f240 122d 	movw	r2, #301	@ 0x12d
 8009e56:	4933      	ldr	r1, [pc, #204]	@ (8009f24 <recv_tcp+0xfc>)
 8009e58:	4831      	ldr	r0, [pc, #196]	@ (8009f20 <recv_tcp+0xf8>)
 8009e5a:	f00c fee9 	bl	8016c30 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8009e5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d006      	beq.n	8009e74 <recv_tcp+0x4c>
 8009e66:	4b2c      	ldr	r3, [pc, #176]	@ (8009f18 <recv_tcp+0xf0>)
 8009e68:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8009e6c:	492e      	ldr	r1, [pc, #184]	@ (8009f28 <recv_tcp+0x100>)
 8009e6e:	482c      	ldr	r0, [pc, #176]	@ (8009f20 <recv_tcp+0xf8>)
 8009e70:	f00c fede 	bl	8016c30 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d102      	bne.n	8009e84 <recv_tcp+0x5c>
    return ERR_VAL;
 8009e7e:	f06f 0305 	mvn.w	r3, #5
 8009e82:	e045      	b.n	8009f10 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	68ba      	ldr	r2, [r7, #8]
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d006      	beq.n	8009e9c <recv_tcp+0x74>
 8009e8e:	4b22      	ldr	r3, [pc, #136]	@ (8009f18 <recv_tcp+0xf0>)
 8009e90:	f240 1235 	movw	r2, #309	@ 0x135
 8009e94:	4925      	ldr	r1, [pc, #148]	@ (8009f2c <recv_tcp+0x104>)
 8009e96:	4822      	ldr	r0, [pc, #136]	@ (8009f20 <recv_tcp+0xf8>)
 8009e98:	f00c feca 	bl	8016c30 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	3310      	adds	r3, #16
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f00c fc9d 	bl	80167e0 <sys_mbox_valid>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d10d      	bne.n	8009ec8 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d008      	beq.n	8009ec4 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	891b      	ldrh	r3, [r3, #8]
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	68b8      	ldr	r0, [r7, #8]
 8009eba:	f004 f939 	bl	800e130 <tcp_recved>
      pbuf_free(p);
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f003 f97e 	bl	800d1c0 <pbuf_free>
    }
    return ERR_OK;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	e023      	b.n	8009f10 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d005      	beq.n	8009eda <recv_tcp+0xb2>
    msg = p;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	891b      	ldrh	r3, [r3, #8]
 8009ed6:	83fb      	strh	r3, [r7, #30]
 8009ed8:	e003      	b.n	8009ee2 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8009eda:	4b15      	ldr	r3, [pc, #84]	@ (8009f30 <recv_tcp+0x108>)
 8009edc:	61bb      	str	r3, [r7, #24]
    len = 0;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	3310      	adds	r3, #16
 8009ee6:	69b9      	ldr	r1, [r7, #24]
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f00c fc17 	bl	801671c <sys_mbox_trypost>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d002      	beq.n	8009efa <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8009ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ef8:	e00a      	b.n	8009f10 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d005      	beq.n	8009f0e <recv_tcp+0xe6>
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f06:	8bfa      	ldrh	r2, [r7, #30]
 8009f08:	2100      	movs	r1, #0
 8009f0a:	6978      	ldr	r0, [r7, #20]
 8009f0c:	4798      	blx	r3
  }

  return ERR_OK;
 8009f0e:	2300      	movs	r3, #0
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3720      	adds	r7, #32
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}
 8009f18:	08017f04 	.word	0x08017f04
 8009f1c:	08017fe0 	.word	0x08017fe0
 8009f20:	08017f48 	.word	0x08017f48
 8009f24:	08018004 	.word	0x08018004
 8009f28:	08018024 	.word	0x08018024
 8009f2c:	0801803c 	.word	0x0801803c
 8009f30:	0801b0be 	.word	0x0801b0be

08009f34 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d106      	bne.n	8009f56 <poll_tcp+0x22>
 8009f48:	4b23      	ldr	r3, [pc, #140]	@ (8009fd8 <poll_tcp+0xa4>)
 8009f4a:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 8009f4e:	4923      	ldr	r1, [pc, #140]	@ (8009fdc <poll_tcp+0xa8>)
 8009f50:	4823      	ldr	r0, [pc, #140]	@ (8009fe0 <poll_tcp+0xac>)
 8009f52:	f00c fe6d 	bl	8016c30 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	785b      	ldrb	r3, [r3, #1]
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d104      	bne.n	8009f68 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009f5e:	2101      	movs	r1, #1
 8009f60:	68f8      	ldr	r0, [r7, #12]
 8009f62:	f000 ff75 	bl	800ae50 <lwip_netconn_do_writemore>
 8009f66:	e007      	b.n	8009f78 <poll_tcp+0x44>
  } else if (conn->state == NETCONN_CLOSE) {
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	785b      	ldrb	r3, [r3, #1]
 8009f6c:	2b04      	cmp	r3, #4
 8009f6e:	d103      	bne.n	8009f78 <poll_tcp+0x44>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
      conn->current_msg->msg.sd.polls_left--;
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009f70:	2101      	movs	r1, #1
 8009f72:	68f8      	ldr	r0, [r7, #12]
 8009f74:	f000 fc04 	bl	800a780 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009f7e:	f003 0310 	and.w	r3, r3, #16
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d023      	beq.n	8009fce <poll_tcp+0x9a>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d01f      	beq.n	8009fce <poll_tcp+0x9a>
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8009f96:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8009f9a:	d318      	bcc.n	8009fce <poll_tcp+0x9a>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009fa4:	2b04      	cmp	r3, #4
 8009fa6:	d812      	bhi.n	8009fce <poll_tcp+0x9a>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009fae:	f023 0310 	bic.w	r3, r3, #16
 8009fb2:	b2da      	uxtb	r2, r3
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d005      	beq.n	8009fce <poll_tcp+0x9a>
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	2102      	movs	r1, #2
 8009fca:	68f8      	ldr	r0, [r7, #12]
 8009fcc:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009fce:	2300      	movs	r3, #0
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3710      	adds	r7, #16
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	08017f04 	.word	0x08017f04
 8009fdc:	0801805c 	.word	0x0801805c
 8009fe0:	08017f48 	.word	0x08017f48

08009fe4 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b086      	sub	sp, #24
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	4613      	mov	r3, r2
 8009ff0:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d106      	bne.n	800a00a <sent_tcp+0x26>
 8009ffc:	4b21      	ldr	r3, [pc, #132]	@ (800a084 <sent_tcp+0xa0>)
 8009ffe:	f240 1293 	movw	r2, #403	@ 0x193
 800a002:	4921      	ldr	r1, [pc, #132]	@ (800a088 <sent_tcp+0xa4>)
 800a004:	4821      	ldr	r0, [pc, #132]	@ (800a08c <sent_tcp+0xa8>)
 800a006:	f00c fe13 	bl	8016c30 <iprintf>

  if (conn) {
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d034      	beq.n	800a07a <sent_tcp+0x96>
    if (conn->state == NETCONN_WRITE) {
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	785b      	ldrb	r3, [r3, #1]
 800a014:	2b01      	cmp	r3, #1
 800a016:	d104      	bne.n	800a022 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a018:	2101      	movs	r1, #1
 800a01a:	6978      	ldr	r0, [r7, #20]
 800a01c:	f000 ff18 	bl	800ae50 <lwip_netconn_do_writemore>
 800a020:	e007      	b.n	800a032 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	785b      	ldrb	r3, [r3, #1]
 800a026:	2b04      	cmp	r3, #4
 800a028:	d103      	bne.n	800a032 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a02a:	2101      	movs	r1, #1
 800a02c:	6978      	ldr	r0, [r7, #20]
 800a02e:	f000 fba7 	bl	800a780 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d01f      	beq.n	800a07a <sent_tcp+0x96>
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800a042:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800a046:	d318      	bcc.n	800a07a <sent_tcp+0x96>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a050:	2b04      	cmp	r3, #4
 800a052:	d812      	bhi.n	800a07a <sent_tcp+0x96>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a05a:	f023 0310 	bic.w	r3, r3, #16
 800a05e:	b2da      	uxtb	r2, r3
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d005      	beq.n	800a07a <sent_tcp+0x96>
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a072:	88fa      	ldrh	r2, [r7, #6]
 800a074:	2102      	movs	r1, #2
 800a076:	6978      	ldr	r0, [r7, #20]
 800a078:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a07a:	2300      	movs	r3, #0
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3718      	adds	r7, #24
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}
 800a084:	08017f04 	.word	0x08017f04
 800a088:	0801805c 	.word	0x0801805c
 800a08c:	08017f48 	.word	0x08017f48

0800a090 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b088      	sub	sp, #32
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	460b      	mov	r3, r1
 800a09a:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a0a0:	69fb      	ldr	r3, [r7, #28]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d106      	bne.n	800a0b4 <err_tcp+0x24>
 800a0a6:	4b61      	ldr	r3, [pc, #388]	@ (800a22c <err_tcp+0x19c>)
 800a0a8:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800a0ac:	4960      	ldr	r1, [pc, #384]	@ (800a230 <err_tcp+0x1a0>)
 800a0ae:	4861      	ldr	r0, [pc, #388]	@ (800a234 <err_tcp+0x1a4>)
 800a0b0:	f00c fdbe 	bl	8016c30 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800a0b4:	f00c fc9e 	bl	80169f4 <sys_arch_protect>
 800a0b8:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800a0ba:	69fb      	ldr	r3, [r7, #28]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800a0c0:	69fb      	ldr	r3, [r7, #28]
 800a0c2:	78fa      	ldrb	r2, [r7, #3]
 800a0c4:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800a0c6:	69fb      	ldr	r3, [r7, #28]
 800a0c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a0cc:	f043 0301 	orr.w	r3, r3, #1
 800a0d0:	b2da      	uxtb	r2, r3
 800a0d2:	69fb      	ldr	r3, [r7, #28]
 800a0d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800a0d8:	69fb      	ldr	r3, [r7, #28]
 800a0da:	785b      	ldrb	r3, [r3, #1]
 800a0dc:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800a0de:	69fb      	ldr	r3, [r7, #28]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800a0e4:	69b8      	ldr	r0, [r7, #24]
 800a0e6:	f00c fc93 	bl	8016a10 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a0ea:	69fb      	ldr	r3, [r7, #28]
 800a0ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d005      	beq.n	800a0fe <err_tcp+0x6e>
 800a0f2:	69fb      	ldr	r3, [r7, #28]
 800a0f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	2104      	movs	r1, #4
 800a0fa:	69f8      	ldr	r0, [r7, #28]
 800a0fc:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a0fe:	69fb      	ldr	r3, [r7, #28]
 800a100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a102:	2b00      	cmp	r3, #0
 800a104:	d005      	beq.n	800a112 <err_tcp+0x82>
 800a106:	69fb      	ldr	r3, [r7, #28]
 800a108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a10a:	2200      	movs	r2, #0
 800a10c:	2100      	movs	r1, #0
 800a10e:	69f8      	ldr	r0, [r7, #28]
 800a110:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a116:	2b00      	cmp	r3, #0
 800a118:	d005      	beq.n	800a126 <err_tcp+0x96>
 800a11a:	69fb      	ldr	r3, [r7, #28]
 800a11c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a11e:	2200      	movs	r2, #0
 800a120:	2102      	movs	r1, #2
 800a122:	69f8      	ldr	r0, [r7, #28]
 800a124:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800a126:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a12a:	4618      	mov	r0, r3
 800a12c:	f7ff fd8e 	bl	8009c4c <lwip_netconn_err_to_msg>
 800a130:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a132:	69fb      	ldr	r3, [r7, #28]
 800a134:	3310      	adds	r3, #16
 800a136:	4618      	mov	r0, r3
 800a138:	f00c fb52 	bl	80167e0 <sys_mbox_valid>
 800a13c:	4603      	mov	r3, r0
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d005      	beq.n	800a14e <err_tcp+0xbe>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	3310      	adds	r3, #16
 800a146:	6939      	ldr	r1, [r7, #16]
 800a148:	4618      	mov	r0, r3
 800a14a:	f00c fae7 	bl	801671c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a14e:	69fb      	ldr	r3, [r7, #28]
 800a150:	3314      	adds	r3, #20
 800a152:	4618      	mov	r0, r3
 800a154:	f00c fb44 	bl	80167e0 <sys_mbox_valid>
 800a158:	4603      	mov	r3, r0
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d005      	beq.n	800a16a <err_tcp+0xda>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800a15e:	69fb      	ldr	r3, [r7, #28]
 800a160:	3314      	adds	r3, #20
 800a162:	6939      	ldr	r1, [r7, #16]
 800a164:	4618      	mov	r0, r3
 800a166:	f00c fad9 	bl	801671c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800a16a:	7dfb      	ldrb	r3, [r7, #23]
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d005      	beq.n	800a17c <err_tcp+0xec>
 800a170:	7dfb      	ldrb	r3, [r7, #23]
 800a172:	2b04      	cmp	r3, #4
 800a174:	d002      	beq.n	800a17c <err_tcp+0xec>
 800a176:	7dfb      	ldrb	r3, [r7, #23]
 800a178:	2b03      	cmp	r3, #3
 800a17a:	d146      	bne.n	800a20a <err_tcp+0x17a>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800a17c:	69fb      	ldr	r3, [r7, #28]
 800a17e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a182:	f003 0304 	and.w	r3, r3, #4
 800a186:	2b00      	cmp	r3, #0
 800a188:	bf14      	ite	ne
 800a18a:	2301      	movne	r3, #1
 800a18c:	2300      	moveq	r3, #0
 800a18e:	b2db      	uxtb	r3, r3
 800a190:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800a192:	69fb      	ldr	r3, [r7, #28]
 800a194:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a198:	f023 0304 	bic.w	r3, r3, #4
 800a19c:	b2da      	uxtb	r2, r3
 800a19e:	69fb      	ldr	r3, [r7, #28]
 800a1a0:	f883 2020 	strb.w	r2, [r3, #32]

    if (!was_nonblocking_connect) {
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d13b      	bne.n	800a222 <err_tcp+0x192>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a1aa:	69fb      	ldr	r3, [r7, #28]
 800a1ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d106      	bne.n	800a1c0 <err_tcp+0x130>
 800a1b2:	4b1e      	ldr	r3, [pc, #120]	@ (800a22c <err_tcp+0x19c>)
 800a1b4:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800a1b8:	491f      	ldr	r1, [pc, #124]	@ (800a238 <err_tcp+0x1a8>)
 800a1ba:	481e      	ldr	r0, [pc, #120]	@ (800a234 <err_tcp+0x1a4>)
 800a1bc:	f00c fd38 	bl	8016c30 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800a1c0:	7dfb      	ldrb	r3, [r7, #23]
 800a1c2:	2b04      	cmp	r3, #4
 800a1c4:	d104      	bne.n	800a1d0 <err_tcp+0x140>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800a1c6:	69fb      	ldr	r3, [r7, #28]
 800a1c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	711a      	strb	r2, [r3, #4]
 800a1ce:	e003      	b.n	800a1d8 <err_tcp+0x148>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800a1d0:	69fb      	ldr	r3, [r7, #28]
 800a1d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1d4:	78fa      	ldrb	r2, [r7, #3]
 800a1d6:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a1d8:	69fb      	ldr	r3, [r7, #28]
 800a1da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	330c      	adds	r3, #12
 800a1e0:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800a1e2:	68b8      	ldr	r0, [r7, #8]
 800a1e4:	f00c fb8a 	bl	80168fc <sys_sem_valid>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d106      	bne.n	800a1fc <err_tcp+0x16c>
 800a1ee:	4b0f      	ldr	r3, [pc, #60]	@ (800a22c <err_tcp+0x19c>)
 800a1f0:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800a1f4:	4911      	ldr	r1, [pc, #68]	@ (800a23c <err_tcp+0x1ac>)
 800a1f6:	480f      	ldr	r0, [pc, #60]	@ (800a234 <err_tcp+0x1a4>)
 800a1f8:	f00c fd1a 	bl	8016c30 <iprintf>
      conn->current_msg = NULL;
 800a1fc:	69fb      	ldr	r3, [r7, #28]
 800a1fe:	2200      	movs	r2, #0
 800a200:	625a      	str	r2, [r3, #36]	@ 0x24
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800a202:	68b8      	ldr	r0, [r7, #8]
 800a204:	f00c fb60 	bl	80168c8 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800a208:	e00b      	b.n	800a222 <err_tcp+0x192>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800a20a:	69fb      	ldr	r3, [r7, #28]
 800a20c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d008      	beq.n	800a224 <err_tcp+0x194>
 800a212:	4b06      	ldr	r3, [pc, #24]	@ (800a22c <err_tcp+0x19c>)
 800a214:	f240 12f7 	movw	r2, #503	@ 0x1f7
 800a218:	4909      	ldr	r1, [pc, #36]	@ (800a240 <err_tcp+0x1b0>)
 800a21a:	4806      	ldr	r0, [pc, #24]	@ (800a234 <err_tcp+0x1a4>)
 800a21c:	f00c fd08 	bl	8016c30 <iprintf>
  }
}
 800a220:	e000      	b.n	800a224 <err_tcp+0x194>
      (old_state == NETCONN_CONNECT)) {
 800a222:	bf00      	nop
}
 800a224:	bf00      	nop
 800a226:	3720      	adds	r7, #32
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}
 800a22c:	08017f04 	.word	0x08017f04
 800a230:	0801805c 	.word	0x0801805c
 800a234:	08017f48 	.word	0x08017f48
 800a238:	0801806c 	.word	0x0801806c
 800a23c:	08018088 	.word	0x08018088
 800a240:	080180a4 	.word	0x080180a4

0800a244 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800a252:	6879      	ldr	r1, [r7, #4]
 800a254:	68f8      	ldr	r0, [r7, #12]
 800a256:	f004 fe33 	bl	800eec0 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800a25a:	490a      	ldr	r1, [pc, #40]	@ (800a284 <setup_tcp+0x40>)
 800a25c:	68f8      	ldr	r0, [r7, #12]
 800a25e:	f004 fe41 	bl	800eee4 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800a262:	4909      	ldr	r1, [pc, #36]	@ (800a288 <setup_tcp+0x44>)
 800a264:	68f8      	ldr	r0, [r7, #12]
 800a266:	f004 fe5f 	bl	800ef28 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800a26a:	2202      	movs	r2, #2
 800a26c:	4907      	ldr	r1, [pc, #28]	@ (800a28c <setup_tcp+0x48>)
 800a26e:	68f8      	ldr	r0, [r7, #12]
 800a270:	f004 feb6 	bl	800efe0 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800a274:	4906      	ldr	r1, [pc, #24]	@ (800a290 <setup_tcp+0x4c>)
 800a276:	68f8      	ldr	r0, [r7, #12]
 800a278:	f004 fe78 	bl	800ef6c <tcp_err>
}
 800a27c:	bf00      	nop
 800a27e:	3710      	adds	r7, #16
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}
 800a284:	08009e29 	.word	0x08009e29
 800a288:	08009fe5 	.word	0x08009fe5
 800a28c:	08009f35 	.word	0x08009f35
 800a290:	0800a091 	.word	0x0800a091

0800a294 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800a294:	b590      	push	{r4, r7, lr}
 800a296:	b089      	sub	sp, #36	@ 0x24
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	4613      	mov	r3, r2
 800a2a0:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800a2a6:	69fb      	ldr	r3, [r7, #28]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d102      	bne.n	800a2b2 <accept_function+0x1e>
    return ERR_VAL;
 800a2ac:	f06f 0305 	mvn.w	r3, #5
 800a2b0:	e0a1      	b.n	800a3f6 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a2b2:	69fb      	ldr	r3, [r7, #28]
 800a2b4:	3314      	adds	r3, #20
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f00c fa92 	bl	80167e0 <sys_mbox_valid>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d102      	bne.n	800a2c8 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800a2c2:	f06f 0305 	mvn.w	r3, #5
 800a2c6:	e096      	b.n	800a3f6 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d11b      	bne.n	800a306 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800a2ce:	69fb      	ldr	r3, [r7, #28]
 800a2d0:	f103 0414 	add.w	r4, r3, #20
 800a2d4:	f06f 000c 	mvn.w	r0, #12
 800a2d8:	f7ff fcb8 	bl	8009c4c <lwip_netconn_err_to_msg>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	4619      	mov	r1, r3
 800a2e0:	4620      	mov	r0, r4
 800a2e2:	f00c fa1b 	bl	801671c <sys_mbox_trypost>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d109      	bne.n	800a300 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a2ec:	69fb      	ldr	r3, [r7, #28]
 800a2ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d005      	beq.n	800a300 <accept_function+0x6c>
 800a2f4:	69fb      	ldr	r3, [r7, #28]
 800a2f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	2100      	movs	r1, #0
 800a2fc:	69f8      	ldr	r0, [r7, #28]
 800a2fe:	4798      	blx	r3
    }
    return ERR_VAL;
 800a300:	f06f 0305 	mvn.w	r3, #5
 800a304:	e077      	b.n	800a3f6 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800a306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d006      	beq.n	800a31c <accept_function+0x88>
 800a30e:	4b3c      	ldr	r3, [pc, #240]	@ (800a400 <accept_function+0x16c>)
 800a310:	f240 222a 	movw	r2, #554	@ 0x22a
 800a314:	493b      	ldr	r1, [pc, #236]	@ (800a404 <accept_function+0x170>)
 800a316:	483c      	ldr	r0, [pc, #240]	@ (800a408 <accept_function+0x174>)
 800a318:	f00c fc8a 	bl	8016c30 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800a31c:	69fb      	ldr	r3, [r7, #28]
 800a31e:	781a      	ldrb	r2, [r3, #0]
 800a320:	69fb      	ldr	r3, [r7, #28]
 800a322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a324:	4619      	mov	r1, r3
 800a326:	4610      	mov	r0, r2
 800a328:	f000 f8f0 	bl	800a50c <netconn_alloc>
 800a32c:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800a32e:	69bb      	ldr	r3, [r7, #24]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d11b      	bne.n	800a36c <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800a334:	69fb      	ldr	r3, [r7, #28]
 800a336:	f103 0414 	add.w	r4, r3, #20
 800a33a:	f06f 000c 	mvn.w	r0, #12
 800a33e:	f7ff fc85 	bl	8009c4c <lwip_netconn_err_to_msg>
 800a342:	4603      	mov	r3, r0
 800a344:	4619      	mov	r1, r3
 800a346:	4620      	mov	r0, r4
 800a348:	f00c f9e8 	bl	801671c <sys_mbox_trypost>
 800a34c:	4603      	mov	r3, r0
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d109      	bne.n	800a366 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a352:	69fb      	ldr	r3, [r7, #28]
 800a354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a356:	2b00      	cmp	r3, #0
 800a358:	d005      	beq.n	800a366 <accept_function+0xd2>
 800a35a:	69fb      	ldr	r3, [r7, #28]
 800a35c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a35e:	2200      	movs	r2, #0
 800a360:	2100      	movs	r1, #0
 800a362:	69f8      	ldr	r0, [r7, #28]
 800a364:	4798      	blx	r3
    }
    return ERR_MEM;
 800a366:	f04f 33ff 	mov.w	r3, #4294967295
 800a36a:	e044      	b.n	800a3f6 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800a36c:	69bb      	ldr	r3, [r7, #24]
 800a36e:	68ba      	ldr	r2, [r7, #8]
 800a370:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800a372:	69b8      	ldr	r0, [r7, #24]
 800a374:	f7ff ff66 	bl	800a244 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800a378:	69fb      	ldr	r3, [r7, #28]
 800a37a:	3314      	adds	r3, #20
 800a37c:	69b9      	ldr	r1, [r7, #24]
 800a37e:	4618      	mov	r0, r3
 800a380:	f00c f9cc 	bl	801671c <sys_mbox_trypost>
 800a384:	4603      	mov	r3, r0
 800a386:	2b00      	cmp	r3, #0
 800a388:	d02a      	beq.n	800a3e0 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800a38a:	69bb      	ldr	r3, [r7, #24]
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800a390:	2100      	movs	r1, #0
 800a392:	6978      	ldr	r0, [r7, #20]
 800a394:	f004 fd94 	bl	800eec0 <tcp_arg>
    tcp_recv(pcb, NULL);
 800a398:	2100      	movs	r1, #0
 800a39a:	6978      	ldr	r0, [r7, #20]
 800a39c:	f004 fda2 	bl	800eee4 <tcp_recv>
    tcp_sent(pcb, NULL);
 800a3a0:	2100      	movs	r1, #0
 800a3a2:	6978      	ldr	r0, [r7, #20]
 800a3a4:	f004 fdc0 	bl	800ef28 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	2100      	movs	r1, #0
 800a3ac:	6978      	ldr	r0, [r7, #20]
 800a3ae:	f004 fe17 	bl	800efe0 <tcp_poll>
    tcp_err(pcb, NULL);
 800a3b2:	2100      	movs	r1, #0
 800a3b4:	6978      	ldr	r0, [r7, #20]
 800a3b6:	f004 fdd9 	bl	800ef6c <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800a3ba:	69bb      	ldr	r3, [r7, #24]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800a3c0:	69bb      	ldr	r3, [r7, #24]
 800a3c2:	3310      	adds	r3, #16
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f00c f997 	bl	80166f8 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800a3ca:	69bb      	ldr	r3, [r7, #24]
 800a3cc:	3310      	adds	r3, #16
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f00c fa17 	bl	8016802 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800a3d4:	69b8      	ldr	r0, [r7, #24]
 800a3d6:	f000 f90b 	bl	800a5f0 <netconn_free>
    return ERR_MEM;
 800a3da:	f04f 33ff 	mov.w	r3, #4294967295
 800a3de:	e00a      	b.n	800a3f6 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a3e0:	69fb      	ldr	r3, [r7, #28]
 800a3e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d005      	beq.n	800a3f4 <accept_function+0x160>
 800a3e8:	69fb      	ldr	r3, [r7, #28]
 800a3ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	2100      	movs	r1, #0
 800a3f0:	69f8      	ldr	r0, [r7, #28]
 800a3f2:	4798      	blx	r3
  }

  return ERR_OK;
 800a3f4:	2300      	movs	r3, #0
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3724      	adds	r7, #36	@ 0x24
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd90      	pop	{r4, r7, pc}
 800a3fe:	bf00      	nop
 800a400:	08017f04 	.word	0x08017f04
 800a404:	080180c0 	.word	0x080180c0
 800a408:	08017f48 	.word	0x08017f48

0800a40c <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800a40c:	b590      	push	{r4, r7, lr}
 800a40e:	b085      	sub	sp, #20
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800a414:	2300      	movs	r3, #0
 800a416:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d006      	beq.n	800a430 <pcb_new+0x24>
 800a422:	4b2b      	ldr	r3, [pc, #172]	@ (800a4d0 <pcb_new+0xc4>)
 800a424:	f240 2265 	movw	r2, #613	@ 0x265
 800a428:	492a      	ldr	r1, [pc, #168]	@ (800a4d4 <pcb_new+0xc8>)
 800a42a:	482b      	ldr	r0, [pc, #172]	@ (800a4d8 <pcb_new+0xcc>)
 800a42c:	f00c fc00 	bl	8016c30 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a43a:	2b10      	cmp	r3, #16
 800a43c:	d022      	beq.n	800a484 <pcb_new+0x78>
 800a43e:	2b20      	cmp	r3, #32
 800a440:	d133      	bne.n	800a4aa <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681c      	ldr	r4, [r3, #0]
 800a446:	7bfb      	ldrb	r3, [r7, #15]
 800a448:	4618      	mov	r0, r3
 800a44a:	f009 fe12 	bl	8014072 <udp_new_ip_type>
 800a44e:	4603      	mov	r3, r0
 800a450:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d02a      	beq.n	800a4b2 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	781b      	ldrb	r3, [r3, #0]
 800a462:	2b22      	cmp	r3, #34	@ 0x22
 800a464:	d104      	bne.n	800a470 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	685b      	ldr	r3, [r3, #4]
 800a46c:	2201      	movs	r2, #1
 800a46e:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	6858      	ldr	r0, [r3, #4]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	461a      	mov	r2, r3
 800a47c:	4917      	ldr	r1, [pc, #92]	@ (800a4dc <pcb_new+0xd0>)
 800a47e:	f009 fd7f 	bl	8013f80 <udp_recv>
      }
      break;
 800a482:	e016      	b.n	800a4b2 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681c      	ldr	r4, [r3, #0]
 800a488:	7bfb      	ldrb	r3, [r7, #15]
 800a48a:	4618      	mov	r0, r3
 800a48c:	f004 fd0a 	bl	800eea4 <tcp_new_ip_type>
 800a490:	4603      	mov	r3, r0
 800a492:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d00b      	beq.n	800a4b6 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f7ff fece 	bl	800a244 <setup_tcp>
      }
      break;
 800a4a8:	e005      	b.n	800a4b6 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	22fa      	movs	r2, #250	@ 0xfa
 800a4ae:	711a      	strb	r2, [r3, #4]
      return;
 800a4b0:	e00a      	b.n	800a4c8 <pcb_new+0xbc>
      break;
 800a4b2:	bf00      	nop
 800a4b4:	e000      	b.n	800a4b8 <pcb_new+0xac>
      break;
 800a4b6:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d102      	bne.n	800a4c8 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	22ff      	movs	r2, #255	@ 0xff
 800a4c6:	711a      	strb	r2, [r3, #4]
  }
}
 800a4c8:	3714      	adds	r7, #20
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd90      	pop	{r4, r7, pc}
 800a4ce:	bf00      	nop
 800a4d0:	08017f04 	.word	0x08017f04
 800a4d4:	080180e8 	.word	0x080180e8
 800a4d8:	08017f48 	.word	0x08017f48
 800a4dc:	08009d2d 	.word	0x08009d2d

0800a4e0 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d102      	bne.n	800a502 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800a4fc:	68f8      	ldr	r0, [r7, #12]
 800a4fe:	f7ff ff85 	bl	800a40c <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800a502:	bf00      	nop
 800a504:	3710      	adds	r7, #16
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}
	...

0800a50c <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b086      	sub	sp, #24
 800a510:	af00      	add	r7, sp, #0
 800a512:	4603      	mov	r3, r0
 800a514:	6039      	str	r1, [r7, #0]
 800a516:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800a518:	2300      	movs	r3, #0
 800a51a:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800a51c:	2007      	movs	r0, #7
 800a51e:	f001 ff35 	bl	800c38c <memp_malloc>
 800a522:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d101      	bne.n	800a52e <netconn_alloc+0x22>
    return NULL;
 800a52a:	2300      	movs	r3, #0
 800a52c:	e055      	b.n	800a5da <netconn_alloc+0xce>
  }

  conn->pending_err = ERR_OK;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2200      	movs	r2, #0
 800a532:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	79fa      	ldrb	r2, [r7, #7]
 800a538:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2200      	movs	r2, #0
 800a53e:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800a540:	79fb      	ldrb	r3, [r7, #7]
 800a542:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a546:	2b10      	cmp	r3, #16
 800a548:	d004      	beq.n	800a554 <netconn_alloc+0x48>
 800a54a:	2b20      	cmp	r3, #32
 800a54c:	d105      	bne.n	800a55a <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800a54e:	2306      	movs	r3, #6
 800a550:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800a552:	e00a      	b.n	800a56a <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800a554:	2306      	movs	r3, #6
 800a556:	617b      	str	r3, [r7, #20]
      break;
 800a558:	e007      	b.n	800a56a <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800a55a:	4b22      	ldr	r3, [pc, #136]	@ (800a5e4 <netconn_alloc+0xd8>)
 800a55c:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800a560:	4921      	ldr	r1, [pc, #132]	@ (800a5e8 <netconn_alloc+0xdc>)
 800a562:	4822      	ldr	r0, [pc, #136]	@ (800a5ec <netconn_alloc+0xe0>)
 800a564:	f00c fb64 	bl	8016c30 <iprintf>
      goto free_and_return;
 800a568:	e032      	b.n	800a5d0 <netconn_alloc+0xc4>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	3310      	adds	r3, #16
 800a56e:	6979      	ldr	r1, [r7, #20]
 800a570:	4618      	mov	r0, r3
 800a572:	f00c f8a7 	bl	80166c4 <sys_mbox_new>
 800a576:	4603      	mov	r3, r0
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d128      	bne.n	800a5ce <netconn_alloc+0xc2>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	330c      	adds	r3, #12
 800a580:	2100      	movs	r1, #0
 800a582:	4618      	mov	r0, r3
 800a584:	f00c f94a 	bl	801681c <sys_sem_new>
 800a588:	4603      	mov	r3, r0
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d005      	beq.n	800a59a <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	3310      	adds	r3, #16
 800a592:	4618      	mov	r0, r3
 800a594:	f00c f8b0 	bl	80166f8 <sys_mbox_free>
    goto free_and_return;
 800a598:	e01a      	b.n	800a5d0 <netconn_alloc+0xc4>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	3314      	adds	r3, #20
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f00c f92f 	bl	8016802 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	683a      	ldr	r2, [r7, #0]
 800a5ae:	629a      	str	r2, [r3, #40]	@ 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	625a      	str	r2, [r3, #36]	@ 0x24
#endif /* LWIP_TCP */
#if LWIP_SO_SNDTIMEO
  conn->send_timeout = 0;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	61da      	str	r2, [r3, #28]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	7cfa      	ldrb	r2, [r7, #19]
 800a5c6:	f883 2020 	strb.w	r2, [r3, #32]
  return conn;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	e005      	b.n	800a5da <netconn_alloc+0xce>
    goto free_and_return;
 800a5ce:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800a5d0:	68f9      	ldr	r1, [r7, #12]
 800a5d2:	2007      	movs	r0, #7
 800a5d4:	f001 ff50 	bl	800c478 <memp_free>
  return NULL;
 800a5d8:	2300      	movs	r3, #0
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3718      	adds	r7, #24
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}
 800a5e2:	bf00      	nop
 800a5e4:	08017f04 	.word	0x08017f04
 800a5e8:	08018108 	.word	0x08018108
 800a5ec:	08017f48 	.word	0x08017f48

0800a5f0 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b082      	sub	sp, #8
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d006      	beq.n	800a60e <netconn_free+0x1e>
 800a600:	4b1b      	ldr	r3, [pc, #108]	@ (800a670 <netconn_free+0x80>)
 800a602:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800a606:	491b      	ldr	r1, [pc, #108]	@ (800a674 <netconn_free+0x84>)
 800a608:	481b      	ldr	r0, [pc, #108]	@ (800a678 <netconn_free+0x88>)
 800a60a:	f00c fb11 	bl	8016c30 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	3310      	adds	r3, #16
 800a612:	4618      	mov	r0, r3
 800a614:	f00c f8e4 	bl	80167e0 <sys_mbox_valid>
 800a618:	4603      	mov	r3, r0
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d006      	beq.n	800a62c <netconn_free+0x3c>
 800a61e:	4b14      	ldr	r3, [pc, #80]	@ (800a670 <netconn_free+0x80>)
 800a620:	f240 3223 	movw	r2, #803	@ 0x323
 800a624:	4915      	ldr	r1, [pc, #84]	@ (800a67c <netconn_free+0x8c>)
 800a626:	4814      	ldr	r0, [pc, #80]	@ (800a678 <netconn_free+0x88>)
 800a628:	f00c fb02 	bl	8016c30 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	3314      	adds	r3, #20
 800a630:	4618      	mov	r0, r3
 800a632:	f00c f8d5 	bl	80167e0 <sys_mbox_valid>
 800a636:	4603      	mov	r3, r0
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d006      	beq.n	800a64a <netconn_free+0x5a>
 800a63c:	4b0c      	ldr	r3, [pc, #48]	@ (800a670 <netconn_free+0x80>)
 800a63e:	f240 3226 	movw	r2, #806	@ 0x326
 800a642:	490f      	ldr	r1, [pc, #60]	@ (800a680 <netconn_free+0x90>)
 800a644:	480c      	ldr	r0, [pc, #48]	@ (800a678 <netconn_free+0x88>)
 800a646:	f00c faf3 	bl	8016c30 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	330c      	adds	r3, #12
 800a64e:	4618      	mov	r0, r3
 800a650:	f00c f947 	bl	80168e2 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	330c      	adds	r3, #12
 800a658:	4618      	mov	r0, r3
 800a65a:	f00c f960 	bl	801691e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800a65e:	6879      	ldr	r1, [r7, #4]
 800a660:	2007      	movs	r0, #7
 800a662:	f001 ff09 	bl	800c478 <memp_free>
}
 800a666:	bf00      	nop
 800a668:	3708      	adds	r7, #8
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}
 800a66e:	bf00      	nop
 800a670:	08017f04 	.word	0x08017f04
 800a674:	08018130 	.word	0x08018130
 800a678:	08017f48 	.word	0x08017f48
 800a67c:	08018160 	.word	0x08018160
 800a680:	0801819c 	.word	0x0801819c

0800a684 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b086      	sub	sp, #24
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	3310      	adds	r3, #16
 800a690:	4618      	mov	r0, r3
 800a692:	f00c f8a5 	bl	80167e0 <sys_mbox_valid>
 800a696:	4603      	mov	r3, r0
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d02f      	beq.n	800a6fc <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a69c:	e018      	b.n	800a6d0 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	781b      	ldrb	r3, [r3, #0]
 800a6a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a6a6:	2b10      	cmp	r3, #16
 800a6a8:	d10e      	bne.n	800a6c8 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	f107 020f 	add.w	r2, r7, #15
 800a6b0:	4611      	mov	r1, r2
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f7ff fb00 	bl	8009cb8 <lwip_netconn_is_err_msg>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d108      	bne.n	800a6d0 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f002 fd7d 	bl	800d1c0 <pbuf_free>
 800a6c6:	e003      	b.n	800a6d0 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f000 fec6 	bl	800b45c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	3310      	adds	r3, #16
 800a6d4:	f107 0210 	add.w	r2, r7, #16
 800a6d8:	4611      	mov	r1, r2
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f00c f869 	bl	80167b2 <sys_arch_mbox_tryfetch>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6e6:	d1da      	bne.n	800a69e <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	3310      	adds	r3, #16
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f00c f803 	bl	80166f8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	3310      	adds	r3, #16
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f00c f883 	bl	8016802 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	3314      	adds	r3, #20
 800a700:	4618      	mov	r0, r3
 800a702:	f00c f86d 	bl	80167e0 <sys_mbox_valid>
 800a706:	4603      	mov	r3, r0
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d034      	beq.n	800a776 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a70c:	e01d      	b.n	800a74a <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	f107 020e 	add.w	r2, r7, #14
 800a714:	4611      	mov	r1, r2
 800a716:	4618      	mov	r0, r3
 800a718:	f7ff face 	bl	8009cb8 <lwip_netconn_is_err_msg>
 800a71c:	4603      	mov	r3, r0
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d113      	bne.n	800a74a <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800a726:	6978      	ldr	r0, [r7, #20]
 800a728:	f7ff ffac 	bl	800a684 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d007      	beq.n	800a744 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	4618      	mov	r0, r3
 800a73a:	f003 fb31 	bl	800dda0 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	2200      	movs	r2, #0
 800a742:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800a744:	6978      	ldr	r0, [r7, #20]
 800a746:	f7ff ff53 	bl	800a5f0 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	3314      	adds	r3, #20
 800a74e:	f107 0210 	add.w	r2, r7, #16
 800a752:	4611      	mov	r1, r2
 800a754:	4618      	mov	r0, r3
 800a756:	f00c f82c 	bl	80167b2 <sys_arch_mbox_tryfetch>
 800a75a:	4603      	mov	r3, r0
 800a75c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a760:	d1d5      	bne.n	800a70e <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	3314      	adds	r3, #20
 800a766:	4618      	mov	r0, r3
 800a768:	f00b ffc6 	bl	80166f8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	3314      	adds	r3, #20
 800a770:	4618      	mov	r0, r3
 800a772:	f00c f846 	bl	8016802 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800a776:	bf00      	nop
 800a778:	3718      	adds	r7, #24
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
	...

0800a780 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b088      	sub	sp, #32
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	460b      	mov	r3, r1
 800a78a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800a78c:	2300      	movs	r3, #0
 800a78e:	777b      	strb	r3, [r7, #29]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d106      	bne.n	800a7a4 <lwip_netconn_do_close_internal+0x24>
 800a796:	4b8f      	ldr	r3, [pc, #572]	@ (800a9d4 <lwip_netconn_do_close_internal+0x254>)
 800a798:	f240 32a2 	movw	r2, #930	@ 0x3a2
 800a79c:	498e      	ldr	r1, [pc, #568]	@ (800a9d8 <lwip_netconn_do_close_internal+0x258>)
 800a79e:	488f      	ldr	r0, [pc, #572]	@ (800a9dc <lwip_netconn_do_close_internal+0x25c>)
 800a7a0:	f00c fa46 	bl	8016c30 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	781b      	ldrb	r3, [r3, #0]
 800a7a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a7ac:	2b10      	cmp	r3, #16
 800a7ae:	d006      	beq.n	800a7be <lwip_netconn_do_close_internal+0x3e>
 800a7b0:	4b88      	ldr	r3, [pc, #544]	@ (800a9d4 <lwip_netconn_do_close_internal+0x254>)
 800a7b2:	f240 32a3 	movw	r2, #931	@ 0x3a3
 800a7b6:	498a      	ldr	r1, [pc, #552]	@ (800a9e0 <lwip_netconn_do_close_internal+0x260>)
 800a7b8:	4888      	ldr	r0, [pc, #544]	@ (800a9dc <lwip_netconn_do_close_internal+0x25c>)
 800a7ba:	f00c fa39 	bl	8016c30 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	785b      	ldrb	r3, [r3, #1]
 800a7c2:	2b04      	cmp	r3, #4
 800a7c4:	d006      	beq.n	800a7d4 <lwip_netconn_do_close_internal+0x54>
 800a7c6:	4b83      	ldr	r3, [pc, #524]	@ (800a9d4 <lwip_netconn_do_close_internal+0x254>)
 800a7c8:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 800a7cc:	4985      	ldr	r1, [pc, #532]	@ (800a9e4 <lwip_netconn_do_close_internal+0x264>)
 800a7ce:	4883      	ldr	r0, [pc, #524]	@ (800a9dc <lwip_netconn_do_close_internal+0x25c>)
 800a7d0:	f00c fa2e 	bl	8016c30 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	685b      	ldr	r3, [r3, #4]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d106      	bne.n	800a7ea <lwip_netconn_do_close_internal+0x6a>
 800a7dc:	4b7d      	ldr	r3, [pc, #500]	@ (800a9d4 <lwip_netconn_do_close_internal+0x254>)
 800a7de:	f240 32a5 	movw	r2, #933	@ 0x3a5
 800a7e2:	4981      	ldr	r1, [pc, #516]	@ (800a9e8 <lwip_netconn_do_close_internal+0x268>)
 800a7e4:	487d      	ldr	r0, [pc, #500]	@ (800a9dc <lwip_netconn_do_close_internal+0x25c>)
 800a7e6:	f00c fa23 	bl	8016c30 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d106      	bne.n	800a800 <lwip_netconn_do_close_internal+0x80>
 800a7f2:	4b78      	ldr	r3, [pc, #480]	@ (800a9d4 <lwip_netconn_do_close_internal+0x254>)
 800a7f4:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800a7f8:	497c      	ldr	r1, [pc, #496]	@ (800a9ec <lwip_netconn_do_close_internal+0x26c>)
 800a7fa:	4878      	ldr	r0, [pc, #480]	@ (800a9dc <lwip_netconn_do_close_internal+0x25c>)
 800a7fc:	f00c fa18 	bl	8016c30 <iprintf>

  tpcb = conn->pcb.tcp;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	617b      	str	r3, [r7, #20]
  shut = conn->current_msg->msg.sd.shut;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a80a:	7a1b      	ldrb	r3, [r3, #8]
 800a80c:	74fb      	strb	r3, [r7, #19]
  shut_rx = shut & NETCONN_SHUT_RD;
 800a80e:	7cfb      	ldrb	r3, [r7, #19]
 800a810:	f003 0301 	and.w	r3, r3, #1
 800a814:	74bb      	strb	r3, [r7, #18]
  shut_tx = shut & NETCONN_SHUT_WR;
 800a816:	7cfb      	ldrb	r3, [r7, #19]
 800a818:	f003 0302 	and.w	r3, r3, #2
 800a81c:	747b      	strb	r3, [r7, #17]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800a81e:	7cfb      	ldrb	r3, [r7, #19]
 800a820:	2b03      	cmp	r3, #3
 800a822:	d102      	bne.n	800a82a <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800a824:	2301      	movs	r3, #1
 800a826:	77bb      	strb	r3, [r7, #30]
 800a828:	e01f      	b.n	800a86a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800a82a:	7cbb      	ldrb	r3, [r7, #18]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d00e      	beq.n	800a84e <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800a834:	2b05      	cmp	r3, #5
 800a836:	d007      	beq.n	800a848 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800a83c:	2b06      	cmp	r3, #6
 800a83e:	d003      	beq.n	800a848 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800a844:	2b08      	cmp	r3, #8
 800a846:	d102      	bne.n	800a84e <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800a848:	2301      	movs	r3, #1
 800a84a:	77bb      	strb	r3, [r7, #30]
 800a84c:	e00d      	b.n	800a86a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800a84e:	7c7b      	ldrb	r3, [r7, #17]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d008      	beq.n	800a866 <lwip_netconn_do_close_internal+0xe6>
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	8b5b      	ldrh	r3, [r3, #26]
 800a858:	f003 0310 	and.w	r3, r3, #16
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d002      	beq.n	800a866 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800a860:	2301      	movs	r3, #1
 800a862:	77bb      	strb	r3, [r7, #30]
 800a864:	e001      	b.n	800a86a <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800a866:	2300      	movs	r3, #0
 800a868:	77bb      	strb	r3, [r7, #30]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800a86a:	7fbb      	ldrb	r3, [r7, #30]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d003      	beq.n	800a878 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800a870:	2100      	movs	r1, #0
 800a872:	6978      	ldr	r0, [r7, #20]
 800a874:	f004 fb24 	bl	800eec0 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	7d1b      	ldrb	r3, [r3, #20]
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d104      	bne.n	800a88a <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800a880:	2100      	movs	r1, #0
 800a882:	6978      	ldr	r0, [r7, #20]
 800a884:	f004 fb94 	bl	800efb0 <tcp_accept>
 800a888:	e01d      	b.n	800a8c6 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800a88a:	7cbb      	ldrb	r3, [r7, #18]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d007      	beq.n	800a8a0 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800a890:	2100      	movs	r1, #0
 800a892:	6978      	ldr	r0, [r7, #20]
 800a894:	f004 fb26 	bl	800eee4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800a898:	2100      	movs	r1, #0
 800a89a:	6978      	ldr	r0, [r7, #20]
 800a89c:	f004 fb88 	bl	800efb0 <tcp_accept>
    }
    if (shut_tx) {
 800a8a0:	7c7b      	ldrb	r3, [r7, #17]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d003      	beq.n	800a8ae <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800a8a6:	2100      	movs	r1, #0
 800a8a8:	6978      	ldr	r0, [r7, #20]
 800a8aa:	f004 fb3d 	bl	800ef28 <tcp_sent>
    }
    if (shut_close) {
 800a8ae:	7fbb      	ldrb	r3, [r7, #30]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d008      	beq.n	800a8c6 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	2100      	movs	r1, #0
 800a8b8:	6978      	ldr	r0, [r7, #20]
 800a8ba:	f004 fb91 	bl	800efe0 <tcp_poll>
      tcp_err(tpcb, NULL);
 800a8be:	2100      	movs	r1, #0
 800a8c0:	6978      	ldr	r0, [r7, #20]
 800a8c2:	f004 fb53 	bl	800ef6c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800a8c6:	7fbb      	ldrb	r3, [r7, #30]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d005      	beq.n	800a8d8 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800a8cc:	6978      	ldr	r0, [r7, #20]
 800a8ce:	f003 f921 	bl	800db14 <tcp_close>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	77fb      	strb	r3, [r7, #31]
 800a8d6:	e007      	b.n	800a8e8 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800a8d8:	7cbb      	ldrb	r3, [r7, #18]
 800a8da:	7c7a      	ldrb	r2, [r7, #17]
 800a8dc:	4619      	mov	r1, r3
 800a8de:	6978      	ldr	r0, [r7, #20]
 800a8e0:	f003 f944 	bl	800db6c <tcp_shutdown>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	77fb      	strb	r3, [r7, #31]
  }
  if (err == ERR_OK) {
 800a8e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d102      	bne.n	800a8f6 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	777b      	strb	r3, [r7, #29]
 800a8f4:	e026      	b.n	800a944 <lwip_netconn_do_close_internal+0x1c4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800a8f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a8fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8fe:	d11f      	bne.n	800a940 <lwip_netconn_do_close_internal+0x1c0>
         nonblocking netconns, we have to wait since no standard socket application
         is prepared for close failing because of resource shortage.
         Check the timeout: this is kind of an lwip addition to the standard sockets:
         we wait for some time when failing to allocate a segment for the FIN */
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
      s32_t close_timeout = LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT;
 800a900:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800a904:	61bb      	str	r3, [r7, #24]
#if LWIP_SO_SNDTIMEO
      if (conn->send_timeout > 0) {
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	699b      	ldr	r3, [r3, #24]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	dd02      	ble.n	800a914 <lwip_netconn_do_close_internal+0x194>
        close_timeout = conn->send_timeout;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	699b      	ldr	r3, [r3, #24]
 800a912:	61bb      	str	r3, [r7, #24]
      if (conn->linger >= 0) {
        /* use linger timeout (seconds) */
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
 800a914:	f7fa fd38 	bl	8005388 <sys_now>
 800a918:	4602      	mov	r2, r0
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a91e:	68db      	ldr	r3, [r3, #12]
 800a920:	1ad3      	subs	r3, r2, r3
 800a922:	461a      	mov	r2, r3
 800a924:	69bb      	ldr	r3, [r7, #24]
 800a926:	4293      	cmp	r3, r2
 800a928:	dc0c      	bgt.n	800a944 <lwip_netconn_do_close_internal+0x1c4>
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800a92a:	2301      	movs	r3, #1
 800a92c:	777b      	strb	r3, [r7, #29]
        if (shut_close) {
 800a92e:	7fbb      	ldrb	r3, [r7, #30]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d007      	beq.n	800a944 <lwip_netconn_do_close_internal+0x1c4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800a934:	6978      	ldr	r0, [r7, #20]
 800a936:	f003 fa33 	bl	800dda0 <tcp_abort>
          err = ERR_OK;
 800a93a:	2300      	movs	r3, #0
 800a93c:	77fb      	strb	r3, [r7, #31]
 800a93e:	e001      	b.n	800a944 <lwip_netconn_do_close_internal+0x1c4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800a940:	2301      	movs	r3, #1
 800a942:	777b      	strb	r3, [r7, #29]
    }
  }
  if (close_finished) {
 800a944:	7f7b      	ldrb	r3, [r7, #29]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d052      	beq.n	800a9f0 <lwip_netconn_do_close_internal+0x270>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	330c      	adds	r3, #12
 800a952:	60fb      	str	r3, [r7, #12]
    conn->current_msg->err = err;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a958:	7ffa      	ldrb	r2, [r7, #31]
 800a95a:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2200      	movs	r2, #0
 800a960:	625a      	str	r2, [r3, #36]	@ 0x24
    conn->state = NETCONN_NONE;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2200      	movs	r2, #0
 800a966:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800a968:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d129      	bne.n	800a9c4 <lwip_netconn_do_close_internal+0x244>
      if (shut_close) {
 800a970:	7fbb      	ldrb	r3, [r7, #30]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d00c      	beq.n	800a990 <lwip_netconn_do_close_internal+0x210>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2200      	movs	r2, #0
 800a97a:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a980:	2b00      	cmp	r3, #0
 800a982:	d005      	beq.n	800a990 <lwip_netconn_do_close_internal+0x210>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a988:	2200      	movs	r2, #0
 800a98a:	2104      	movs	r1, #4
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	4798      	blx	r3
      }
      if (shut_rx) {
 800a990:	7cbb      	ldrb	r3, [r7, #18]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d009      	beq.n	800a9aa <lwip_netconn_do_close_internal+0x22a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d005      	beq.n	800a9aa <lwip_netconn_do_close_internal+0x22a>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	2100      	movs	r1, #0
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	4798      	blx	r3
      }
      if (shut_tx) {
 800a9aa:	7c7b      	ldrb	r3, [r7, #17]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d009      	beq.n	800a9c4 <lwip_netconn_do_close_internal+0x244>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d005      	beq.n	800a9c4 <lwip_netconn_do_close_internal+0x244>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9bc:	2200      	movs	r2, #0
 800a9be:	2102      	movs	r1, #2
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a9c4:	78fb      	ldrb	r3, [r7, #3]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d002      	beq.n	800a9d0 <lwip_netconn_do_close_internal+0x250>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800a9ca:	68f8      	ldr	r0, [r7, #12]
 800a9cc:	f00b ff7c 	bl	80168c8 <sys_sem_signal>
    }
    return ERR_OK;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	e03c      	b.n	800aa4e <lwip_netconn_do_close_internal+0x2ce>
 800a9d4:	08017f04 	.word	0x08017f04
 800a9d8:	080181d8 	.word	0x080181d8
 800a9dc:	08017f48 	.word	0x08017f48
 800a9e0:	080181e8 	.word	0x080181e8
 800a9e4:	08018208 	.word	0x08018208
 800a9e8:	0801822c 	.word	0x0801822c
 800a9ec:	0801806c 	.word	0x0801806c
  }
  if (!close_finished) {
 800a9f0:	7f7b      	ldrb	r3, [r7, #29]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d11e      	bne.n	800aa34 <lwip_netconn_do_close_internal+0x2b4>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	7d1b      	ldrb	r3, [r3, #20]
 800a9fa:	2b01      	cmp	r3, #1
 800a9fc:	d106      	bne.n	800aa0c <lwip_netconn_do_close_internal+0x28c>
 800a9fe:	4b16      	ldr	r3, [pc, #88]	@ (800aa58 <lwip_netconn_do_close_internal+0x2d8>)
 800aa00:	f240 4241 	movw	r2, #1089	@ 0x441
 800aa04:	4915      	ldr	r1, [pc, #84]	@ (800aa5c <lwip_netconn_do_close_internal+0x2dc>)
 800aa06:	4816      	ldr	r0, [pc, #88]	@ (800aa60 <lwip_netconn_do_close_internal+0x2e0>)
 800aa08:	f00c f912 	bl	8016c30 <iprintf>
    if (shut_tx) {
 800aa0c:	7c7b      	ldrb	r3, [r7, #17]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d003      	beq.n	800aa1a <lwip_netconn_do_close_internal+0x29a>
      tcp_sent(tpcb, sent_tcp);
 800aa12:	4914      	ldr	r1, [pc, #80]	@ (800aa64 <lwip_netconn_do_close_internal+0x2e4>)
 800aa14:	6978      	ldr	r0, [r7, #20]
 800aa16:	f004 fa87 	bl	800ef28 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	4912      	ldr	r1, [pc, #72]	@ (800aa68 <lwip_netconn_do_close_internal+0x2e8>)
 800aa1e:	6978      	ldr	r0, [r7, #20]
 800aa20:	f004 fade 	bl	800efe0 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800aa24:	4911      	ldr	r1, [pc, #68]	@ (800aa6c <lwip_netconn_do_close_internal+0x2ec>)
 800aa26:	6978      	ldr	r0, [r7, #20]
 800aa28:	f004 faa0 	bl	800ef6c <tcp_err>
    tcp_arg(tpcb, conn);
 800aa2c:	6879      	ldr	r1, [r7, #4]
 800aa2e:	6978      	ldr	r0, [r7, #20]
 800aa30:	f004 fa46 	bl	800eec0 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800aa34:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d106      	bne.n	800aa4a <lwip_netconn_do_close_internal+0x2ca>
 800aa3c:	4b06      	ldr	r3, [pc, #24]	@ (800aa58 <lwip_netconn_do_close_internal+0x2d8>)
 800aa3e:	f240 424d 	movw	r2, #1101	@ 0x44d
 800aa42:	490b      	ldr	r1, [pc, #44]	@ (800aa70 <lwip_netconn_do_close_internal+0x2f0>)
 800aa44:	4806      	ldr	r0, [pc, #24]	@ (800aa60 <lwip_netconn_do_close_internal+0x2e0>)
 800aa46:	f00c f8f3 	bl	8016c30 <iprintf>
  return err;
 800aa4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3720      	adds	r7, #32
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}
 800aa56:	bf00      	nop
 800aa58:	08017f04 	.word	0x08017f04
 800aa5c:	08018240 	.word	0x08018240
 800aa60:	08017f48 	.word	0x08017f48
 800aa64:	08009fe5 	.word	0x08009fe5
 800aa68:	08009f35 	.word	0x08009f35
 800aa6c:	0800a091 	.word	0x0800a091
 800aa70:	08018264 	.word	0x08018264

0800aa74 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b084      	sub	sp, #16
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	785b      	ldrb	r3, [r3, #1]
 800aa86:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800aa88:	7afb      	ldrb	r3, [r7, #11]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d00d      	beq.n	800aaaa <lwip_netconn_do_delconn+0x36>
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800aa98:	2b10      	cmp	r3, #16
 800aa9a:	d006      	beq.n	800aaaa <lwip_netconn_do_delconn+0x36>
 800aa9c:	4b61      	ldr	r3, [pc, #388]	@ (800ac24 <lwip_netconn_do_delconn+0x1b0>)
 800aa9e:	f240 425e 	movw	r2, #1118	@ 0x45e
 800aaa2:	4961      	ldr	r1, [pc, #388]	@ (800ac28 <lwip_netconn_do_delconn+0x1b4>)
 800aaa4:	4861      	ldr	r0, [pc, #388]	@ (800ac2c <lwip_netconn_do_delconn+0x1b8>)
 800aaa6:	f00c f8c3 	bl	8016c30 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800aaaa:	7afb      	ldrb	r3, [r7, #11]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d005      	beq.n	800aabc <lwip_netconn_do_delconn+0x48>
 800aab0:	7afb      	ldrb	r3, [r7, #11]
 800aab2:	2b02      	cmp	r3, #2
 800aab4:	d002      	beq.n	800aabc <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800aab6:	7afb      	ldrb	r3, [r7, #11]
 800aab8:	2b03      	cmp	r3, #3
 800aaba:	d10a      	bne.n	800aad2 <lwip_netconn_do_delconn+0x5e>
       (state != NETCONN_CONNECT)) ||
 800aabc:	7afb      	ldrb	r3, [r7, #11]
 800aabe:	2b03      	cmp	r3, #3
 800aac0:	d10b      	bne.n	800aada <lwip_netconn_do_delconn+0x66>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aaca:	f003 0304 	and.w	r3, r3, #4
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d103      	bne.n	800aada <lwip_netconn_do_delconn+0x66>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	22fb      	movs	r2, #251	@ 0xfb
 800aad6:	711a      	strb	r2, [r3, #4]
 800aad8:	e098      	b.n	800ac0c <lwip_netconn_do_delconn+0x198>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800aada:	7afb      	ldrb	r3, [r7, #11]
 800aadc:	2b03      	cmp	r3, #3
 800aade:	d10e      	bne.n	800aafe <lwip_netconn_do_delconn+0x8a>
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aae8:	f003 0304 	and.w	r3, r3, #4
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d106      	bne.n	800aafe <lwip_netconn_do_delconn+0x8a>
 800aaf0:	4b4c      	ldr	r3, [pc, #304]	@ (800ac24 <lwip_netconn_do_delconn+0x1b0>)
 800aaf2:	f240 427a 	movw	r2, #1146	@ 0x47a
 800aaf6:	494e      	ldr	r1, [pc, #312]	@ (800ac30 <lwip_netconn_do_delconn+0x1bc>)
 800aaf8:	484c      	ldr	r0, [pc, #304]	@ (800ac2c <lwip_netconn_do_delconn+0x1b8>)
 800aafa:	f00c f899 	bl	8016c30 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2200      	movs	r2, #0
 800ab02:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f7ff fdbb 	bl	800a684 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d05f      	beq.n	800abd8 <lwip_netconn_do_delconn+0x164>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	781b      	ldrb	r3, [r3, #0]
 800ab1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ab22:	2b10      	cmp	r3, #16
 800ab24:	d00d      	beq.n	800ab42 <lwip_netconn_do_delconn+0xce>
 800ab26:	2b20      	cmp	r3, #32
 800ab28:	d151      	bne.n	800abce <lwip_netconn_do_delconn+0x15a>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	2200      	movs	r2, #0
 800ab32:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f009 fa40 	bl	8013fc0 <udp_remove>
          break;
 800ab40:	e046      	b.n	800abd0 <lwip_netconn_do_delconn+0x15c>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d006      	beq.n	800ab5a <lwip_netconn_do_delconn+0xe6>
 800ab4c:	4b35      	ldr	r3, [pc, #212]	@ (800ac24 <lwip_netconn_do_delconn+0x1b0>)
 800ab4e:	f240 4294 	movw	r2, #1172	@ 0x494
 800ab52:	4938      	ldr	r1, [pc, #224]	@ (800ac34 <lwip_netconn_do_delconn+0x1c0>)
 800ab54:	4835      	ldr	r0, [pc, #212]	@ (800ac2c <lwip_netconn_do_delconn+0x1b8>)
 800ab56:	f00c f86b 	bl	8016c30 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	2204      	movs	r2, #4
 800ab60:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	2203      	movs	r2, #3
 800ab66:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	68fa      	ldr	r2, [r7, #12]
 800ab6e:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	2100      	movs	r1, #0
 800ab76:	4618      	mov	r0, r3
 800ab78:	f7ff fe02 	bl	800a780 <lwip_netconn_do_close_internal>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d04b      	beq.n	800ac1a <lwip_netconn_do_delconn+0x1a6>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	785b      	ldrb	r3, [r3, #1]
 800ab88:	2b04      	cmp	r3, #4
 800ab8a:	d006      	beq.n	800ab9a <lwip_netconn_do_delconn+0x126>
 800ab8c:	4b25      	ldr	r3, [pc, #148]	@ (800ac24 <lwip_netconn_do_delconn+0x1b0>)
 800ab8e:	f240 429a 	movw	r2, #1178	@ 0x49a
 800ab92:	4929      	ldr	r1, [pc, #164]	@ (800ac38 <lwip_netconn_do_delconn+0x1c4>)
 800ab94:	4825      	ldr	r0, [pc, #148]	@ (800ac2c <lwip_netconn_do_delconn+0x1b8>)
 800ab96:	f00c f84b 	bl	8016c30 <iprintf>
            UNLOCK_TCPIP_CORE();
 800ab9a:	4828      	ldr	r0, [pc, #160]	@ (800ac3c <lwip_netconn_do_delconn+0x1c8>)
 800ab9c:	f00b fefd 	bl	801699a <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	330c      	adds	r3, #12
 800aba6:	2100      	movs	r1, #0
 800aba8:	4618      	mov	r0, r3
 800abaa:	f00b fe5c 	bl	8016866 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800abae:	4823      	ldr	r0, [pc, #140]	@ (800ac3c <lwip_netconn_do_delconn+0x1c8>)
 800abb0:	f00b fee4 	bl	801697c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	785b      	ldrb	r3, [r3, #1]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d02d      	beq.n	800ac1a <lwip_netconn_do_delconn+0x1a6>
 800abbe:	4b19      	ldr	r3, [pc, #100]	@ (800ac24 <lwip_netconn_do_delconn+0x1b0>)
 800abc0:	f240 429e 	movw	r2, #1182	@ 0x49e
 800abc4:	491c      	ldr	r1, [pc, #112]	@ (800ac38 <lwip_netconn_do_delconn+0x1c4>)
 800abc6:	4819      	ldr	r0, [pc, #100]	@ (800ac2c <lwip_netconn_do_delconn+0x1b8>)
 800abc8:	f00c f832 	bl	8016c30 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800abcc:	e025      	b.n	800ac1a <lwip_netconn_do_delconn+0x1a6>
#endif /* LWIP_TCP */
        default:
          break;
 800abce:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	2200      	movs	r2, #0
 800abd6:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d007      	beq.n	800abf2 <lwip_netconn_do_delconn+0x17e>
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abe8:	68fa      	ldr	r2, [r7, #12]
 800abea:	6810      	ldr	r0, [r2, #0]
 800abec:	2200      	movs	r2, #0
 800abee:	2100      	movs	r1, #0
 800abf0:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d007      	beq.n	800ac0c <lwip_netconn_do_delconn+0x198>
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac02:	68fa      	ldr	r2, [r7, #12]
 800ac04:	6810      	ldr	r0, [r2, #0]
 800ac06:	2200      	movs	r2, #0
 800ac08:	2102      	movs	r1, #2
 800ac0a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	330c      	adds	r3, #12
 800ac12:	4618      	mov	r0, r3
 800ac14:	f00b fe72 	bl	80168fc <sys_sem_valid>
 800ac18:	e000      	b.n	800ac1c <lwip_netconn_do_delconn+0x1a8>
          return;
 800ac1a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800ac1c:	3710      	adds	r7, #16
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}
 800ac22:	bf00      	nop
 800ac24:	08017f04 	.word	0x08017f04
 800ac28:	08018274 	.word	0x08018274
 800ac2c:	08017f48 	.word	0x08017f48
 800ac30:	08018288 	.word	0x08018288
 800ac34:	080182a8 	.word	0x080182a8
 800ac38:	080182c4 	.word	0x080182c4
 800ac3c:	24004df0 	.word	0x24004df0

0800ac40 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d025      	beq.n	800aca2 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	781b      	ldrb	r3, [r3, #0]
 800ac5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ac60:	2b10      	cmp	r3, #16
 800ac62:	d00e      	beq.n	800ac82 <lwip_netconn_do_bind+0x42>
 800ac64:	2b20      	cmp	r3, #32
 800ac66:	d119      	bne.n	800ac9c <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	6858      	ldr	r0, [r3, #4]
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	6899      	ldr	r1, [r3, #8]
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	899b      	ldrh	r3, [r3, #12]
 800ac76:	461a      	mov	r2, r3
 800ac78:	f009 f8fa 	bl	8013e70 <udp_bind>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	73fb      	strb	r3, [r7, #15]
        break;
 800ac80:	e011      	b.n	800aca6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	6858      	ldr	r0, [r3, #4]
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	6899      	ldr	r1, [r3, #8]
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	899b      	ldrh	r3, [r3, #12]
 800ac90:	461a      	mov	r2, r3
 800ac92:	f003 f891 	bl	800ddb8 <tcp_bind>
 800ac96:	4603      	mov	r3, r0
 800ac98:	73fb      	strb	r3, [r7, #15]
        break;
 800ac9a:	e004      	b.n	800aca6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800ac9c:	23fa      	movs	r3, #250	@ 0xfa
 800ac9e:	73fb      	strb	r3, [r7, #15]
        break;
 800aca0:	e001      	b.n	800aca6 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800aca2:	23fa      	movs	r3, #250	@ 0xfa
 800aca4:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	7bfa      	ldrb	r2, [r7, #15]
 800acaa:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800acac:	bf00      	nop
 800acae:	3710      	adds	r7, #16
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b086      	sub	sp, #24
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d07f      	beq.n	800adca <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	781b      	ldrb	r3, [r3, #0]
 800acd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800acd4:	2b10      	cmp	r3, #16
 800acd6:	d175      	bne.n	800adc4 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	785b      	ldrb	r3, [r3, #1]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d165      	bne.n	800adae <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	685b      	ldr	r3, [r3, #4]
 800ace8:	7d1b      	ldrb	r3, [r3, #20]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d002      	beq.n	800acf4 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800acee:	23fa      	movs	r3, #250	@ 0xfa
 800acf0:	72fb      	strb	r3, [r7, #11]
 800acf2:	e06c      	b.n	800adce <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800acf4:	23ff      	movs	r3, #255	@ 0xff
 800acf6:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	f107 020b 	add.w	r2, r7, #11
 800ad02:	7cf9      	ldrb	r1, [r7, #19]
 800ad04:	4618      	mov	r0, r3
 800ad06:	f003 f90f 	bl	800df28 <tcp_listen_with_backlog_and_err>
 800ad0a:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d05d      	beq.n	800adce <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	3310      	adds	r3, #16
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f00b fd61 	bl	80167e0 <sys_mbox_valid>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d00b      	beq.n	800ad3c <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	3310      	adds	r3, #16
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f00b fce4 	bl	80166f8 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	3310      	adds	r3, #16
 800ad36:	4618      	mov	r0, r3
 800ad38:	f00b fd63 	bl	8016802 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	3314      	adds	r3, #20
 800ad46:	4618      	mov	r0, r3
 800ad48:	f00b fd4a 	bl	80167e0 <sys_mbox_valid>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d108      	bne.n	800ad64 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	3314      	adds	r3, #20
 800ad58:	2106      	movs	r1, #6
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f00b fcb2 	bl	80166c4 <sys_mbox_new>
 800ad60:	4603      	mov	r3, r0
 800ad62:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800ad64:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d118      	bne.n	800ad9e <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	2202      	movs	r2, #2
 800ad72:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	68fa      	ldr	r2, [r7, #12]
 800ad7a:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	685a      	ldr	r2, [r3, #4]
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4619      	mov	r1, r3
 800ad88:	4610      	mov	r0, r2
 800ad8a:	f004 f899 	bl	800eec0 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	4912      	ldr	r1, [pc, #72]	@ (800ade0 <lwip_netconn_do_listen+0x12c>)
 800ad96:	4618      	mov	r0, r3
 800ad98:	f004 f90a 	bl	800efb0 <tcp_accept>
 800ad9c:	e017      	b.n	800adce <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800ad9e:	68f8      	ldr	r0, [r7, #12]
 800ada0:	f002 feb8 	bl	800db14 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	2200      	movs	r2, #0
 800adaa:	605a      	str	r2, [r3, #4]
 800adac:	e00f      	b.n	800adce <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	785b      	ldrb	r3, [r3, #1]
 800adb4:	2b02      	cmp	r3, #2
 800adb6:	d102      	bne.n	800adbe <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800adb8:	2300      	movs	r3, #0
 800adba:	72fb      	strb	r3, [r7, #11]
 800adbc:	e007      	b.n	800adce <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800adbe:	23f5      	movs	r3, #245	@ 0xf5
 800adc0:	72fb      	strb	r3, [r7, #11]
 800adc2:	e004      	b.n	800adce <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800adc4:	23f0      	movs	r3, #240	@ 0xf0
 800adc6:	72fb      	strb	r3, [r7, #11]
 800adc8:	e001      	b.n	800adce <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800adca:	23f5      	movs	r3, #245	@ 0xf5
 800adcc:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800adce:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800add6:	bf00      	nop
 800add8:	3718      	adds	r7, #24
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
 800adde:	bf00      	nop
 800ade0:	0800a295 	.word	0x0800a295

0800ade4 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b086      	sub	sp, #24
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	2200      	movs	r2, #0
 800adf4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d022      	beq.n	800ae46 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	781b      	ldrb	r3, [r3, #0]
 800ae06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ae0a:	2b10      	cmp	r3, #16
 800ae0c:	d11b      	bne.n	800ae46 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	689b      	ldr	r3, [r3, #8]
 800ae12:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae1a:	d202      	bcs.n	800ae22 <lwip_netconn_do_recv+0x3e>
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	e001      	b.n	800ae26 <lwip_netconn_do_recv+0x42>
 800ae22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ae26:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	89fa      	ldrh	r2, [r7, #14]
 800ae30:	4611      	mov	r1, r2
 800ae32:	4618      	mov	r0, r3
 800ae34:	f003 f97c 	bl	800e130 <tcp_recved>
        remaining -= recved;
 800ae38:	89fb      	ldrh	r3, [r7, #14]
 800ae3a:	697a      	ldr	r2, [r7, #20]
 800ae3c:	1ad3      	subs	r3, r2, r3
 800ae3e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d1e6      	bne.n	800ae14 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800ae46:	bf00      	nop
 800ae48:	3718      	adds	r7, #24
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}
	...

0800ae50 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b088      	sub	sp, #32
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	460b      	mov	r3, r1
 800ae5a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d106      	bne.n	800ae74 <lwip_netconn_do_writemore+0x24>
 800ae66:	4b70      	ldr	r3, [pc, #448]	@ (800b028 <lwip_netconn_do_writemore+0x1d8>)
 800ae68:	f240 6273 	movw	r2, #1651	@ 0x673
 800ae6c:	496f      	ldr	r1, [pc, #444]	@ (800b02c <lwip_netconn_do_writemore+0x1dc>)
 800ae6e:	4870      	ldr	r0, [pc, #448]	@ (800b030 <lwip_netconn_do_writemore+0x1e0>)
 800ae70:	f00b fede 	bl	8016c30 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	785b      	ldrb	r3, [r3, #1]
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d006      	beq.n	800ae8a <lwip_netconn_do_writemore+0x3a>
 800ae7c:	4b6a      	ldr	r3, [pc, #424]	@ (800b028 <lwip_netconn_do_writemore+0x1d8>)
 800ae7e:	f240 6274 	movw	r2, #1652	@ 0x674
 800ae82:	496c      	ldr	r1, [pc, #432]	@ (800b034 <lwip_netconn_do_writemore+0x1e4>)
 800ae84:	486a      	ldr	r0, [pc, #424]	@ (800b030 <lwip_netconn_do_writemore+0x1e0>)
 800ae86:	f00b fed3 	bl	8016c30 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d106      	bne.n	800aea0 <lwip_netconn_do_writemore+0x50>
 800ae92:	4b65      	ldr	r3, [pc, #404]	@ (800b028 <lwip_netconn_do_writemore+0x1d8>)
 800ae94:	f240 6275 	movw	r2, #1653	@ 0x675
 800ae98:	4967      	ldr	r1, [pc, #412]	@ (800b038 <lwip_netconn_do_writemore+0x1e8>)
 800ae9a:	4865      	ldr	r0, [pc, #404]	@ (800b030 <lwip_netconn_do_writemore+0x1e0>)
 800ae9c:	f00b fec8 	bl	8016c30 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d106      	bne.n	800aeb6 <lwip_netconn_do_writemore+0x66>
 800aea8:	4b5f      	ldr	r3, [pc, #380]	@ (800b028 <lwip_netconn_do_writemore+0x1d8>)
 800aeaa:	f240 6276 	movw	r2, #1654	@ 0x676
 800aeae:	4963      	ldr	r1, [pc, #396]	@ (800b03c <lwip_netconn_do_writemore+0x1ec>)
 800aeb0:	485f      	ldr	r0, [pc, #380]	@ (800b030 <lwip_netconn_do_writemore+0x1e0>)
 800aeb2:	f00b febd 	bl	8016c30 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aeba:	699a      	ldr	r2, [r3, #24]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aec0:	695b      	ldr	r3, [r3, #20]
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d306      	bcc.n	800aed4 <lwip_netconn_do_writemore+0x84>
 800aec6:	4b58      	ldr	r3, [pc, #352]	@ (800b028 <lwip_netconn_do_writemore+0x1d8>)
 800aec8:	f240 6277 	movw	r2, #1655	@ 0x677
 800aecc:	495c      	ldr	r1, [pc, #368]	@ (800b040 <lwip_netconn_do_writemore+0x1f0>)
 800aece:	4858      	ldr	r0, [pc, #352]	@ (800b030 <lwip_netconn_do_writemore+0x1e0>)
 800aed0:	f00b feae 	bl	8016c30 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aed8:	899b      	ldrh	r3, [r3, #12]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d106      	bne.n	800aeec <lwip_netconn_do_writemore+0x9c>
 800aede:	4b52      	ldr	r3, [pc, #328]	@ (800b028 <lwip_netconn_do_writemore+0x1d8>)
 800aee0:	f240 6279 	movw	r2, #1657	@ 0x679
 800aee4:	4957      	ldr	r1, [pc, #348]	@ (800b044 <lwip_netconn_do_writemore+0x1f4>)
 800aee6:	4852      	ldr	r0, [pc, #328]	@ (800b030 <lwip_netconn_do_writemore+0x1e0>)
 800aee8:	f00b fea2 	bl	8016c30 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aef0:	7f1b      	ldrb	r3, [r3, #28]
 800aef2:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aefa:	f003 0302 	and.w	r3, r3, #2
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d104      	bne.n	800af0c <lwip_netconn_do_writemore+0xbc>
 800af02:	7ebb      	ldrb	r3, [r7, #26]
 800af04:	f003 0304 	and.w	r3, r3, #4
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d001      	beq.n	800af10 <lwip_netconn_do_writemore+0xc0>
 800af0c:	2301      	movs	r3, #1
 800af0e:	e000      	b.n	800af12 <lwip_netconn_do_writemore+0xc2>
 800af10:	2300      	movs	r3, #0
 800af12:	763b      	strb	r3, [r7, #24]

#if LWIP_SO_SNDTIMEO
  if ((conn->send_timeout != 0) &&
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	699b      	ldr	r3, [r3, #24]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d018      	beq.n	800af4e <lwip_netconn_do_writemore+0xfe>
      ((s32_t)(sys_now() - conn->current_msg->msg.w.time_started) >= conn->send_timeout)) {
 800af1c:	f7fa fa34 	bl	8005388 <sys_now>
 800af20:	4602      	mov	r2, r0
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af26:	6a1b      	ldr	r3, [r3, #32]
 800af28:	1ad3      	subs	r3, r2, r3
 800af2a:	461a      	mov	r2, r3
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	699b      	ldr	r3, [r3, #24]
  if ((conn->send_timeout != 0) &&
 800af30:	429a      	cmp	r2, r3
 800af32:	db0c      	blt.n	800af4e <lwip_netconn_do_writemore+0xfe>
    write_finished = 1;
 800af34:	2301      	movs	r3, #1
 800af36:	76fb      	strb	r3, [r7, #27]
    if (conn->current_msg->msg.w.offset == 0) {
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af3c:	699b      	ldr	r3, [r3, #24]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d102      	bne.n	800af48 <lwip_netconn_do_writemore+0xf8>
      /* nothing has been written */
      err = ERR_WOULDBLOCK;
 800af42:	23f9      	movs	r3, #249	@ 0xf9
 800af44:	77fb      	strb	r3, [r7, #31]
    if (conn->current_msg->msg.w.offset == 0) {
 800af46:	e14f      	b.n	800b1e8 <lwip_netconn_do_writemore+0x398>
    } else {
      /* partial write */
      err = ERR_OK;
 800af48:	2300      	movs	r3, #0
 800af4a:	77fb      	strb	r3, [r7, #31]
    if (conn->current_msg->msg.w.offset == 0) {
 800af4c:	e14c      	b.n	800b1e8 <lwip_netconn_do_writemore+0x398>
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af52:	689b      	ldr	r3, [r3, #8]
 800af54:	681a      	ldr	r2, [r3, #0]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af5a:	691b      	ldr	r3, [r3, #16]
 800af5c:	4413      	add	r3, r2
 800af5e:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af64:	689b      	ldr	r3, [r3, #8]
 800af66:	685a      	ldr	r2, [r3, #4]
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af6c:	691b      	ldr	r3, [r3, #16]
 800af6e:	1ad3      	subs	r3, r2, r3
 800af70:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af78:	d307      	bcc.n	800af8a <lwip_netconn_do_writemore+0x13a>
        len = 0xffff;
 800af7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800af7e:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800af80:	7ebb      	ldrb	r3, [r7, #26]
 800af82:	f043 0302 	orr.w	r3, r3, #2
 800af86:	76bb      	strb	r3, [r7, #26]
 800af88:	e001      	b.n	800af8e <lwip_netconn_do_writemore+0x13e>
      } else {
        len = (u16_t)diff;
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800af96:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800af98:	89fa      	ldrh	r2, [r7, #14]
 800af9a:	8bbb      	ldrh	r3, [r7, #28]
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d216      	bcs.n	800afce <lwip_netconn_do_writemore+0x17e>
        /* don't try to write more than sendbuf */
        len = available;
 800afa0:	89fb      	ldrh	r3, [r7, #14]
 800afa2:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800afa4:	7e3b      	ldrb	r3, [r7, #24]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d00d      	beq.n	800afc6 <lwip_netconn_do_writemore+0x176>
          if (!len) {
 800afaa:	8bbb      	ldrh	r3, [r7, #28]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d10e      	bne.n	800afce <lwip_netconn_do_writemore+0x17e>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afb4:	699b      	ldr	r3, [r3, #24]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d102      	bne.n	800afc0 <lwip_netconn_do_writemore+0x170>
 800afba:	f06f 0306 	mvn.w	r3, #6
 800afbe:	e000      	b.n	800afc2 <lwip_netconn_do_writemore+0x172>
 800afc0:	2300      	movs	r3, #0
 800afc2:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800afc4:	e090      	b.n	800b0e8 <lwip_netconn_do_writemore+0x298>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800afc6:	7ebb      	ldrb	r3, [r7, #26]
 800afc8:	f043 0302 	orr.w	r3, r3, #2
 800afcc:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afd2:	691a      	ldr	r2, [r3, #16]
 800afd4:	8bbb      	ldrh	r3, [r7, #28]
 800afd6:	441a      	add	r2, r3
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afdc:	689b      	ldr	r3, [r3, #8]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d906      	bls.n	800aff2 <lwip_netconn_do_writemore+0x1a2>
 800afe4:	4b10      	ldr	r3, [pc, #64]	@ (800b028 <lwip_netconn_do_writemore+0x1d8>)
 800afe6:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800afea:	4917      	ldr	r1, [pc, #92]	@ (800b048 <lwip_netconn_do_writemore+0x1f8>)
 800afec:	4810      	ldr	r0, [pc, #64]	@ (800b030 <lwip_netconn_do_writemore+0x1e0>)
 800afee:	f00b fe1f 	bl	8016c30 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800aff2:	8bbb      	ldrh	r3, [r7, #28]
 800aff4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800aff8:	4293      	cmp	r3, r2
 800affa:	d103      	bne.n	800b004 <lwip_netconn_do_writemore+0x1b4>
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b002:	d209      	bcs.n	800b018 <lwip_netconn_do_writemore+0x1c8>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b008:	8bba      	ldrh	r2, [r7, #28]
 800b00a:	429a      	cmp	r2, r3
 800b00c:	d11e      	bne.n	800b04c <lwip_netconn_do_writemore+0x1fc>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b012:	899b      	ldrh	r3, [r3, #12]
 800b014:	2b01      	cmp	r3, #1
 800b016:	d919      	bls.n	800b04c <lwip_netconn_do_writemore+0x1fc>
        write_more = 1;
 800b018:	2301      	movs	r3, #1
 800b01a:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b01c:	7ebb      	ldrb	r3, [r7, #26]
 800b01e:	f043 0302 	orr.w	r3, r3, #2
 800b022:	76bb      	strb	r3, [r7, #26]
 800b024:	e014      	b.n	800b050 <lwip_netconn_do_writemore+0x200>
 800b026:	bf00      	nop
 800b028:	08017f04 	.word	0x08017f04
 800b02c:	0801805c 	.word	0x0801805c
 800b030:	08017f48 	.word	0x08017f48
 800b034:	08018364 	.word	0x08018364
 800b038:	0801806c 	.word	0x0801806c
 800b03c:	08018384 	.word	0x08018384
 800b040:	0801839c 	.word	0x0801839c
 800b044:	080183dc 	.word	0x080183dc
 800b048:	08018404 	.word	0x08018404
      } else {
        write_more = 0;
 800b04c:	2300      	movs	r3, #0
 800b04e:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6858      	ldr	r0, [r3, #4]
 800b054:	7ebb      	ldrb	r3, [r7, #26]
 800b056:	8bba      	ldrh	r2, [r7, #28]
 800b058:	6979      	ldr	r1, [r7, #20]
 800b05a:	f006 fe6d 	bl	8011d38 <tcp_write>
 800b05e:	4603      	mov	r3, r0
 800b060:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800b062:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d12c      	bne.n	800b0c4 <lwip_netconn_do_writemore+0x274>
        conn->current_msg->msg.w.offset += len;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b06e:	6999      	ldr	r1, [r3, #24]
 800b070:	8bba      	ldrh	r2, [r7, #28]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b076:	440a      	add	r2, r1
 800b078:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b07e:	6919      	ldr	r1, [r3, #16]
 800b080:	8bba      	ldrh	r2, [r7, #28]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b086:	440a      	add	r2, r1
 800b088:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b08e:	691a      	ldr	r2, [r3, #16]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b094:	689b      	ldr	r3, [r3, #8]
 800b096:	685b      	ldr	r3, [r3, #4]
 800b098:	429a      	cmp	r2, r3
 800b09a:	d113      	bne.n	800b0c4 <lwip_netconn_do_writemore+0x274>
          conn->current_msg->msg.w.vector_cnt--;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0a0:	899a      	ldrh	r2, [r3, #12]
 800b0a2:	3a01      	subs	r2, #1
 800b0a4:	b292      	uxth	r2, r2
 800b0a6:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0ac:	899b      	ldrh	r3, [r3, #12]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d008      	beq.n	800b0c4 <lwip_netconn_do_writemore+0x274>
            conn->current_msg->msg.w.vector++;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0b6:	689a      	ldr	r2, [r3, #8]
 800b0b8:	3208      	adds	r2, #8
 800b0ba:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800b0c4:	7e7b      	ldrb	r3, [r7, #25]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d004      	beq.n	800b0d4 <lwip_netconn_do_writemore+0x284>
 800b0ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	f43f af3d 	beq.w	800af4e <lwip_netconn_do_writemore+0xfe>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800b0d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d004      	beq.n	800b0e6 <lwip_netconn_do_writemore+0x296>
 800b0dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b0e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0e4:	d136      	bne.n	800b154 <lwip_netconn_do_writemore+0x304>
err_mem:
 800b0e6:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800b0e8:	7e3b      	ldrb	r3, [r7, #24]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d01b      	beq.n	800b126 <lwip_netconn_do_writemore+0x2d6>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0f2:	699a      	ldr	r2, [r3, #24]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0f8:	695b      	ldr	r3, [r3, #20]
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d213      	bcs.n	800b126 <lwip_netconn_do_writemore+0x2d6>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b102:	2b00      	cmp	r3, #0
 800b104:	d005      	beq.n	800b112 <lwip_netconn_do_writemore+0x2c2>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b10a:	2200      	movs	r2, #0
 800b10c:	2103      	movs	r1, #3
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b118:	f043 0310 	orr.w	r3, r3, #16
 800b11c:	b2da      	uxtb	r2, r3
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f883 2020 	strb.w	r2, [r3, #32]
 800b124:	e016      	b.n	800b154 <lwip_netconn_do_writemore+0x304>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	685b      	ldr	r3, [r3, #4]
 800b12a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800b12e:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800b132:	d305      	bcc.n	800b140 <lwip_netconn_do_writemore+0x2f0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	685b      	ldr	r3, [r3, #4]
 800b138:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b13c:	2b04      	cmp	r3, #4
 800b13e:	d909      	bls.n	800b154 <lwip_netconn_do_writemore+0x304>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b144:	2b00      	cmp	r3, #0
 800b146:	d005      	beq.n	800b154 <lwip_netconn_do_writemore+0x304>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b14c:	2200      	movs	r2, #0
 800b14e:	2103      	movs	r1, #3
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800b154:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d11d      	bne.n	800b198 <lwip_netconn_do_writemore+0x348>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b160:	699a      	ldr	r2, [r3, #24]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b166:	695b      	ldr	r3, [r3, #20]
 800b168:	429a      	cmp	r2, r3
 800b16a:	d002      	beq.n	800b172 <lwip_netconn_do_writemore+0x322>
 800b16c:	7e3b      	ldrb	r3, [r7, #24]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d001      	beq.n	800b176 <lwip_netconn_do_writemore+0x326>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800b172:	2301      	movs	r3, #1
 800b174:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	685b      	ldr	r3, [r3, #4]
 800b17a:	4618      	mov	r0, r3
 800b17c:	f007 fbc6 	bl	801290c <tcp_output>
 800b180:	4603      	mov	r3, r0
 800b182:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800b184:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b188:	f113 0f04 	cmn.w	r3, #4
 800b18c:	d12c      	bne.n	800b1e8 <lwip_netconn_do_writemore+0x398>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b18e:	7b3b      	ldrb	r3, [r7, #12]
 800b190:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b192:	2301      	movs	r3, #1
 800b194:	76fb      	strb	r3, [r7, #27]
 800b196:	e027      	b.n	800b1e8 <lwip_netconn_do_writemore+0x398>
      }
    } else if (err == ERR_MEM) {
 800b198:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b19c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1a0:	d120      	bne.n	800b1e4 <lwip_netconn_do_writemore+0x394>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	685b      	ldr	r3, [r3, #4]
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f007 fbb0 	bl	801290c <tcp_output>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800b1b0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800b1b4:	f113 0f04 	cmn.w	r3, #4
 800b1b8:	d104      	bne.n	800b1c4 <lwip_netconn_do_writemore+0x374>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b1ba:	7b7b      	ldrb	r3, [r7, #13]
 800b1bc:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b1be:	2301      	movs	r3, #1
 800b1c0:	76fb      	strb	r3, [r7, #27]
 800b1c2:	e011      	b.n	800b1e8 <lwip_netconn_do_writemore+0x398>
      } else if (dontblock) {
 800b1c4:	7e3b      	ldrb	r3, [r7, #24]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d00e      	beq.n	800b1e8 <lwip_netconn_do_writemore+0x398>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1ce:	699b      	ldr	r3, [r3, #24]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d102      	bne.n	800b1da <lwip_netconn_do_writemore+0x38a>
 800b1d4:	f06f 0306 	mvn.w	r3, #6
 800b1d8:	e000      	b.n	800b1dc <lwip_netconn_do_writemore+0x38c>
 800b1da:	2300      	movs	r3, #0
 800b1dc:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b1de:	2301      	movs	r3, #1
 800b1e0:	76fb      	strb	r3, [r7, #27]
 800b1e2:	e001      	b.n	800b1e8 <lwip_netconn_do_writemore+0x398>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800b1e8:	7efb      	ldrb	r3, [r7, #27]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d015      	beq.n	800b21a <lwip_netconn_do_writemore+0x3ca>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	330c      	adds	r3, #12
 800b1f6:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1fc:	7ffa      	ldrb	r2, [r7, #31]
 800b1fe:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2200      	movs	r2, #0
 800b204:	625a      	str	r2, [r3, #36]	@ 0x24
    conn->state = NETCONN_NONE;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2200      	movs	r2, #0
 800b20a:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b20c:	78fb      	ldrb	r3, [r7, #3]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d006      	beq.n	800b220 <lwip_netconn_do_writemore+0x3d0>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800b212:	68b8      	ldr	r0, [r7, #8]
 800b214:	f00b fb58 	bl	80168c8 <sys_sem_signal>
 800b218:	e002      	b.n	800b220 <lwip_netconn_do_writemore+0x3d0>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800b21a:	f04f 33ff 	mov.w	r3, #4294967295
 800b21e:	e000      	b.n	800b222 <lwip_netconn_do_writemore+0x3d2>
  }
#endif
  return ERR_OK;
 800b220:	2300      	movs	r3, #0
}
 800b222:	4618      	mov	r0, r3
 800b224:	3720      	adds	r7, #32
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
 800b22a:	bf00      	nop

0800b22c <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b084      	sub	sp, #16
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	4618      	mov	r0, r3
 800b23e:	f7fe fcea 	bl	8009c16 <netconn_err>
 800b242:	4603      	mov	r3, r0
 800b244:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d166      	bne.n	800b31c <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	781b      	ldrb	r3, [r3, #0]
 800b254:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b258:	2b10      	cmp	r3, #16
 800b25a:	d15d      	bne.n	800b318 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	785b      	ldrb	r3, [r3, #1]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d002      	beq.n	800b26c <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800b266:	23fb      	movs	r3, #251	@ 0xfb
 800b268:	73fb      	strb	r3, [r7, #15]
 800b26a:	e057      	b.n	800b31c <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d04d      	beq.n	800b312 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	2201      	movs	r2, #1
 800b27c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b284:	2b00      	cmp	r3, #0
 800b286:	d006      	beq.n	800b296 <lwip_netconn_do_write+0x6a>
 800b288:	4b28      	ldr	r3, [pc, #160]	@ (800b32c <lwip_netconn_do_write+0x100>)
 800b28a:	f240 7223 	movw	r2, #1827	@ 0x723
 800b28e:	4928      	ldr	r1, [pc, #160]	@ (800b330 <lwip_netconn_do_write+0x104>)
 800b290:	4828      	ldr	r0, [pc, #160]	@ (800b334 <lwip_netconn_do_write+0x108>)
 800b292:	f00b fccd 	bl	8016c30 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	695b      	ldr	r3, [r3, #20]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d106      	bne.n	800b2ac <lwip_netconn_do_write+0x80>
 800b29e:	4b23      	ldr	r3, [pc, #140]	@ (800b32c <lwip_netconn_do_write+0x100>)
 800b2a0:	f240 7224 	movw	r2, #1828	@ 0x724
 800b2a4:	4924      	ldr	r1, [pc, #144]	@ (800b338 <lwip_netconn_do_write+0x10c>)
 800b2a6:	4823      	ldr	r0, [pc, #140]	@ (800b334 <lwip_netconn_do_write+0x108>)
 800b2a8:	f00b fcc2 	bl	8016c30 <iprintf>
        msg->conn->current_msg = msg;
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	68ba      	ldr	r2, [r7, #8]
 800b2b2:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2100      	movs	r1, #0
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f7ff fdc8 	bl	800ae50 <lwip_netconn_do_writemore>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d02e      	beq.n	800b324 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	785b      	ldrb	r3, [r3, #1]
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d006      	beq.n	800b2de <lwip_netconn_do_write+0xb2>
 800b2d0:	4b16      	ldr	r3, [pc, #88]	@ (800b32c <lwip_netconn_do_write+0x100>)
 800b2d2:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 800b2d6:	4919      	ldr	r1, [pc, #100]	@ (800b33c <lwip_netconn_do_write+0x110>)
 800b2d8:	4816      	ldr	r0, [pc, #88]	@ (800b334 <lwip_netconn_do_write+0x108>)
 800b2da:	f00b fca9 	bl	8016c30 <iprintf>
          UNLOCK_TCPIP_CORE();
 800b2de:	4818      	ldr	r0, [pc, #96]	@ (800b340 <lwip_netconn_do_write+0x114>)
 800b2e0:	f00b fb5b 	bl	801699a <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	330c      	adds	r3, #12
 800b2ea:	2100      	movs	r1, #0
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f00b faba 	bl	8016866 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800b2f2:	4813      	ldr	r0, [pc, #76]	@ (800b340 <lwip_netconn_do_write+0x114>)
 800b2f4:	f00b fb42 	bl	801697c <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	785b      	ldrb	r3, [r3, #1]
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	d110      	bne.n	800b324 <lwip_netconn_do_write+0xf8>
 800b302:	4b0a      	ldr	r3, [pc, #40]	@ (800b32c <lwip_netconn_do_write+0x100>)
 800b304:	f240 722c 	movw	r2, #1836	@ 0x72c
 800b308:	490c      	ldr	r1, [pc, #48]	@ (800b33c <lwip_netconn_do_write+0x110>)
 800b30a:	480a      	ldr	r0, [pc, #40]	@ (800b334 <lwip_netconn_do_write+0x108>)
 800b30c:	f00b fc90 	bl	8016c30 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800b310:	e008      	b.n	800b324 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800b312:	23f5      	movs	r3, #245	@ 0xf5
 800b314:	73fb      	strb	r3, [r7, #15]
 800b316:	e001      	b.n	800b31c <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800b318:	23fa      	movs	r3, #250	@ 0xfa
 800b31a:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	7bfa      	ldrb	r2, [r7, #15]
 800b320:	711a      	strb	r2, [r3, #4]
 800b322:	e000      	b.n	800b326 <lwip_netconn_do_write+0xfa>
        return;
 800b324:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800b326:	3710      	adds	r7, #16
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}
 800b32c:	08017f04 	.word	0x08017f04
 800b330:	080182a8 	.word	0x080182a8
 800b334:	08017f48 	.word	0x08017f48
 800b338:	08018430 	.word	0x08018430
 800b33c:	080182c4 	.word	0x080182c4
 800b340:	24004df0 	.word	0x24004df0

0800b344 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b084      	sub	sp, #16
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	785b      	ldrb	r3, [r3, #1]
 800b356:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d069      	beq.n	800b436 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	781b      	ldrb	r3, [r3, #0]
 800b368:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800b36c:	2b10      	cmp	r3, #16
 800b36e:	d162      	bne.n	800b436 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b374:	2b03      	cmp	r3, #3
 800b376:	d002      	beq.n	800b37e <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b378:	7afb      	ldrb	r3, [r7, #11]
 800b37a:	2b02      	cmp	r3, #2
 800b37c:	d05b      	beq.n	800b436 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800b37e:	7afb      	ldrb	r3, [r7, #11]
 800b380:	2b03      	cmp	r3, #3
 800b382:	d103      	bne.n	800b38c <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	22f5      	movs	r2, #245	@ 0xf5
 800b388:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b38a:	e059      	b.n	800b440 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800b38c:	7afb      	ldrb	r3, [r7, #11]
 800b38e:	2b01      	cmp	r3, #1
 800b390:	d103      	bne.n	800b39a <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	22fb      	movs	r2, #251	@ 0xfb
 800b396:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b398:	e052      	b.n	800b440 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	7a1b      	ldrb	r3, [r3, #8]
 800b39e:	f003 0301 	and.w	r3, r3, #1
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d004      	beq.n	800b3b0 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7ff f96a 	bl	800a684 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d006      	beq.n	800b3c8 <lwip_netconn_do_close+0x84>
 800b3ba:	4b23      	ldr	r3, [pc, #140]	@ (800b448 <lwip_netconn_do_close+0x104>)
 800b3bc:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 800b3c0:	4922      	ldr	r1, [pc, #136]	@ (800b44c <lwip_netconn_do_close+0x108>)
 800b3c2:	4823      	ldr	r0, [pc, #140]	@ (800b450 <lwip_netconn_do_close+0x10c>)
 800b3c4:	f00b fc34 	bl	8016c30 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	2204      	movs	r2, #4
 800b3ce:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	68fa      	ldr	r2, [r7, #12]
 800b3d6:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	2100      	movs	r1, #0
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f7ff f9ce 	bl	800a780 <lwip_netconn_do_close_internal>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d029      	beq.n	800b43e <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	785b      	ldrb	r3, [r3, #1]
 800b3f0:	2b04      	cmp	r3, #4
 800b3f2:	d006      	beq.n	800b402 <lwip_netconn_do_close+0xbe>
 800b3f4:	4b14      	ldr	r3, [pc, #80]	@ (800b448 <lwip_netconn_do_close+0x104>)
 800b3f6:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 800b3fa:	4916      	ldr	r1, [pc, #88]	@ (800b454 <lwip_netconn_do_close+0x110>)
 800b3fc:	4814      	ldr	r0, [pc, #80]	@ (800b450 <lwip_netconn_do_close+0x10c>)
 800b3fe:	f00b fc17 	bl	8016c30 <iprintf>
        UNLOCK_TCPIP_CORE();
 800b402:	4815      	ldr	r0, [pc, #84]	@ (800b458 <lwip_netconn_do_close+0x114>)
 800b404:	f00b fac9 	bl	801699a <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	330c      	adds	r3, #12
 800b40e:	2100      	movs	r1, #0
 800b410:	4618      	mov	r0, r3
 800b412:	f00b fa28 	bl	8016866 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800b416:	4810      	ldr	r0, [pc, #64]	@ (800b458 <lwip_netconn_do_close+0x114>)
 800b418:	f00b fab0 	bl	801697c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	785b      	ldrb	r3, [r3, #1]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d00b      	beq.n	800b43e <lwip_netconn_do_close+0xfa>
 800b426:	4b08      	ldr	r3, [pc, #32]	@ (800b448 <lwip_netconn_do_close+0x104>)
 800b428:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800b42c:	4909      	ldr	r1, [pc, #36]	@ (800b454 <lwip_netconn_do_close+0x110>)
 800b42e:	4808      	ldr	r0, [pc, #32]	@ (800b450 <lwip_netconn_do_close+0x10c>)
 800b430:	f00b fbfe 	bl	8016c30 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800b434:	e003      	b.n	800b43e <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	22f5      	movs	r2, #245	@ 0xf5
 800b43a:	711a      	strb	r2, [r3, #4]
 800b43c:	e000      	b.n	800b440 <lwip_netconn_do_close+0xfc>
      return;
 800b43e:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b440:	3710      	adds	r7, #16
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}
 800b446:	bf00      	nop
 800b448:	08017f04 	.word	0x08017f04
 800b44c:	080182a8 	.word	0x080182a8
 800b450:	08017f48 	.word	0x08017f48
 800b454:	080182c4 	.word	0x080182c4
 800b458:	24004df0 	.word	0x24004df0

0800b45c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b082      	sub	sp, #8
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d013      	beq.n	800b492 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d00b      	beq.n	800b48a <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	4618      	mov	r0, r3
 800b478:	f001 fea2 	bl	800d1c0 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2200      	movs	r2, #0
 800b480:	605a      	str	r2, [r3, #4]
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	685a      	ldr	r2, [r3, #4]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800b48a:	6879      	ldr	r1, [r7, #4]
 800b48c:	2006      	movs	r0, #6
 800b48e:	f000 fff3 	bl	800c478 <memp_free>
  }
}
 800b492:	bf00      	nop
 800b494:	3708      	adds	r7, #8
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}
	...

0800b49c <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b082      	sub	sp, #8
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d108      	bne.n	800b4bc <netbuf_next+0x20>
 800b4aa:	4b11      	ldr	r3, [pc, #68]	@ (800b4f0 <netbuf_next+0x54>)
 800b4ac:	22e0      	movs	r2, #224	@ 0xe0
 800b4ae:	4911      	ldr	r1, [pc, #68]	@ (800b4f4 <netbuf_next+0x58>)
 800b4b0:	4811      	ldr	r0, [pc, #68]	@ (800b4f8 <netbuf_next+0x5c>)
 800b4b2:	f00b fbbd 	bl	8016c30 <iprintf>
 800b4b6:	f04f 33ff 	mov.w	r3, #4294967295
 800b4ba:	e014      	b.n	800b4e6 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d102      	bne.n	800b4cc <netbuf_next+0x30>
    return -1;
 800b4c6:	f04f 33ff 	mov.w	r3, #4294967295
 800b4ca:	e00c      	b.n	800b4e6 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	685b      	ldr	r3, [r3, #4]
 800b4d0:	681a      	ldr	r2, [r3, #0]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	685b      	ldr	r3, [r3, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d101      	bne.n	800b4e4 <netbuf_next+0x48>
    return 1;
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	e000      	b.n	800b4e6 <netbuf_next+0x4a>
  }
  return 0;
 800b4e4:	2300      	movs	r3, #0
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3708      	adds	r7, #8
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}
 800b4ee:	bf00      	nop
 800b4f0:	0801845c 	.word	0x0801845c
 800b4f4:	080185bc 	.word	0x080185bc
 800b4f8:	080184ac 	.word	0x080184ac

0800b4fc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b084      	sub	sp, #16
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
 800b504:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800b506:	f008 fab9 	bl	8013a7c <sys_timeouts_sleeptime>
 800b50a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b512:	d10b      	bne.n	800b52c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800b514:	4813      	ldr	r0, [pc, #76]	@ (800b564 <tcpip_timeouts_mbox_fetch+0x68>)
 800b516:	f00b fa40 	bl	801699a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800b51a:	2200      	movs	r2, #0
 800b51c:	6839      	ldr	r1, [r7, #0]
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f00b f916 	bl	8016750 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800b524:	480f      	ldr	r0, [pc, #60]	@ (800b564 <tcpip_timeouts_mbox_fetch+0x68>)
 800b526:	f00b fa29 	bl	801697c <sys_mutex_lock>
    return;
 800b52a:	e018      	b.n	800b55e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d102      	bne.n	800b538 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800b532:	f008 fa69 	bl	8013a08 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b536:	e7e6      	b.n	800b506 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800b538:	480a      	ldr	r0, [pc, #40]	@ (800b564 <tcpip_timeouts_mbox_fetch+0x68>)
 800b53a:	f00b fa2e 	bl	801699a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800b53e:	68fa      	ldr	r2, [r7, #12]
 800b540:	6839      	ldr	r1, [r7, #0]
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f00b f904 	bl	8016750 <sys_arch_mbox_fetch>
 800b548:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800b54a:	4806      	ldr	r0, [pc, #24]	@ (800b564 <tcpip_timeouts_mbox_fetch+0x68>)
 800b54c:	f00b fa16 	bl	801697c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b556:	d102      	bne.n	800b55e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800b558:	f008 fa56 	bl	8013a08 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b55c:	e7d3      	b.n	800b506 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800b55e:	3710      	adds	r7, #16
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}
 800b564:	24004df0 	.word	0x24004df0

0800b568 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b084      	sub	sp, #16
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800b570:	4810      	ldr	r0, [pc, #64]	@ (800b5b4 <tcpip_thread+0x4c>)
 800b572:	f00b fa03 	bl	801697c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800b576:	4b10      	ldr	r3, [pc, #64]	@ (800b5b8 <tcpip_thread+0x50>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d005      	beq.n	800b58a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800b57e:	4b0e      	ldr	r3, [pc, #56]	@ (800b5b8 <tcpip_thread+0x50>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	4a0e      	ldr	r2, [pc, #56]	@ (800b5bc <tcpip_thread+0x54>)
 800b584:	6812      	ldr	r2, [r2, #0]
 800b586:	4610      	mov	r0, r2
 800b588:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b58a:	f107 030c 	add.w	r3, r7, #12
 800b58e:	4619      	mov	r1, r3
 800b590:	480b      	ldr	r0, [pc, #44]	@ (800b5c0 <tcpip_thread+0x58>)
 800b592:	f7ff ffb3 	bl	800b4fc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d106      	bne.n	800b5aa <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b59c:	4b09      	ldr	r3, [pc, #36]	@ (800b5c4 <tcpip_thread+0x5c>)
 800b59e:	2291      	movs	r2, #145	@ 0x91
 800b5a0:	4909      	ldr	r1, [pc, #36]	@ (800b5c8 <tcpip_thread+0x60>)
 800b5a2:	480a      	ldr	r0, [pc, #40]	@ (800b5cc <tcpip_thread+0x64>)
 800b5a4:	f00b fb44 	bl	8016c30 <iprintf>
      continue;
 800b5a8:	e003      	b.n	800b5b2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f000 f80f 	bl	800b5d0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b5b2:	e7ea      	b.n	800b58a <tcpip_thread+0x22>
 800b5b4:	24004df0 	.word	0x24004df0
 800b5b8:	24004de4 	.word	0x24004de4
 800b5bc:	24004de8 	.word	0x24004de8
 800b5c0:	24004dec 	.word	0x24004dec
 800b5c4:	080185f4 	.word	0x080185f4
 800b5c8:	08018624 	.word	0x08018624
 800b5cc:	08018644 	.word	0x08018644

0800b5d0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b082      	sub	sp, #8
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	781b      	ldrb	r3, [r3, #0]
 800b5dc:	2b02      	cmp	r3, #2
 800b5de:	d026      	beq.n	800b62e <tcpip_thread_handle_msg+0x5e>
 800b5e0:	2b02      	cmp	r3, #2
 800b5e2:	dc2b      	bgt.n	800b63c <tcpip_thread_handle_msg+0x6c>
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d002      	beq.n	800b5ee <tcpip_thread_handle_msg+0x1e>
 800b5e8:	2b01      	cmp	r3, #1
 800b5ea:	d015      	beq.n	800b618 <tcpip_thread_handle_msg+0x48>
 800b5ec:	e026      	b.n	800b63c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	68db      	ldr	r3, [r3, #12]
 800b5f2:	687a      	ldr	r2, [r7, #4]
 800b5f4:	6850      	ldr	r0, [r2, #4]
 800b5f6:	687a      	ldr	r2, [r7, #4]
 800b5f8:	6892      	ldr	r2, [r2, #8]
 800b5fa:	4611      	mov	r1, r2
 800b5fc:	4798      	blx	r3
 800b5fe:	4603      	mov	r3, r0
 800b600:	2b00      	cmp	r3, #0
 800b602:	d004      	beq.n	800b60e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	4618      	mov	r0, r3
 800b60a:	f001 fdd9 	bl	800d1c0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b60e:	6879      	ldr	r1, [r7, #4]
 800b610:	2009      	movs	r0, #9
 800b612:	f000 ff31 	bl	800c478 <memp_free>
      break;
 800b616:	e018      	b.n	800b64a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	685b      	ldr	r3, [r3, #4]
 800b61c:	687a      	ldr	r2, [r7, #4]
 800b61e:	6892      	ldr	r2, [r2, #8]
 800b620:	4610      	mov	r0, r2
 800b622:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b624:	6879      	ldr	r1, [r7, #4]
 800b626:	2008      	movs	r0, #8
 800b628:	f000 ff26 	bl	800c478 <memp_free>
      break;
 800b62c:	e00d      	b.n	800b64a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	687a      	ldr	r2, [r7, #4]
 800b634:	6892      	ldr	r2, [r2, #8]
 800b636:	4610      	mov	r0, r2
 800b638:	4798      	blx	r3
      break;
 800b63a:	e006      	b.n	800b64a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b63c:	4b05      	ldr	r3, [pc, #20]	@ (800b654 <tcpip_thread_handle_msg+0x84>)
 800b63e:	22cf      	movs	r2, #207	@ 0xcf
 800b640:	4905      	ldr	r1, [pc, #20]	@ (800b658 <tcpip_thread_handle_msg+0x88>)
 800b642:	4806      	ldr	r0, [pc, #24]	@ (800b65c <tcpip_thread_handle_msg+0x8c>)
 800b644:	f00b faf4 	bl	8016c30 <iprintf>
      break;
 800b648:	bf00      	nop
  }
}
 800b64a:	bf00      	nop
 800b64c:	3708      	adds	r7, #8
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
 800b652:	bf00      	nop
 800b654:	080185f4 	.word	0x080185f4
 800b658:	08018624 	.word	0x08018624
 800b65c:	08018644 	.word	0x08018644

0800b660 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b086      	sub	sp, #24
 800b664:	af00      	add	r7, sp, #0
 800b666:	60f8      	str	r0, [r7, #12]
 800b668:	60b9      	str	r1, [r7, #8]
 800b66a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b66c:	481a      	ldr	r0, [pc, #104]	@ (800b6d8 <tcpip_inpkt+0x78>)
 800b66e:	f00b f8b7 	bl	80167e0 <sys_mbox_valid>
 800b672:	4603      	mov	r3, r0
 800b674:	2b00      	cmp	r3, #0
 800b676:	d105      	bne.n	800b684 <tcpip_inpkt+0x24>
 800b678:	4b18      	ldr	r3, [pc, #96]	@ (800b6dc <tcpip_inpkt+0x7c>)
 800b67a:	22fc      	movs	r2, #252	@ 0xfc
 800b67c:	4918      	ldr	r1, [pc, #96]	@ (800b6e0 <tcpip_inpkt+0x80>)
 800b67e:	4819      	ldr	r0, [pc, #100]	@ (800b6e4 <tcpip_inpkt+0x84>)
 800b680:	f00b fad6 	bl	8016c30 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800b684:	2009      	movs	r0, #9
 800b686:	f000 fe81 	bl	800c38c <memp_malloc>
 800b68a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800b68c:	697b      	ldr	r3, [r7, #20]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d102      	bne.n	800b698 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800b692:	f04f 33ff 	mov.w	r3, #4294967295
 800b696:	e01a      	b.n	800b6ce <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	2200      	movs	r2, #0
 800b69c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	68fa      	ldr	r2, [r7, #12]
 800b6a2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	68ba      	ldr	r2, [r7, #8]
 800b6a8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	687a      	ldr	r2, [r7, #4]
 800b6ae:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b6b0:	6979      	ldr	r1, [r7, #20]
 800b6b2:	4809      	ldr	r0, [pc, #36]	@ (800b6d8 <tcpip_inpkt+0x78>)
 800b6b4:	f00b f832 	bl	801671c <sys_mbox_trypost>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d006      	beq.n	800b6cc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b6be:	6979      	ldr	r1, [r7, #20]
 800b6c0:	2009      	movs	r0, #9
 800b6c2:	f000 fed9 	bl	800c478 <memp_free>
    return ERR_MEM;
 800b6c6:	f04f 33ff 	mov.w	r3, #4294967295
 800b6ca:	e000      	b.n	800b6ce <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800b6cc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3718      	adds	r7, #24
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}
 800b6d6:	bf00      	nop
 800b6d8:	24004dec 	.word	0x24004dec
 800b6dc:	080185f4 	.word	0x080185f4
 800b6e0:	0801866c 	.word	0x0801866c
 800b6e4:	08018644 	.word	0x08018644

0800b6e8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b082      	sub	sp, #8
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b6f8:	f003 0318 	and.w	r3, r3, #24
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d006      	beq.n	800b70e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800b700:	4a08      	ldr	r2, [pc, #32]	@ (800b724 <tcpip_input+0x3c>)
 800b702:	6839      	ldr	r1, [r7, #0]
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f7ff ffab 	bl	800b660 <tcpip_inpkt>
 800b70a:	4603      	mov	r3, r0
 800b70c:	e005      	b.n	800b71a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800b70e:	4a06      	ldr	r2, [pc, #24]	@ (800b728 <tcpip_input+0x40>)
 800b710:	6839      	ldr	r1, [r7, #0]
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f7ff ffa4 	bl	800b660 <tcpip_inpkt>
 800b718:	4603      	mov	r3, r0
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3708      	adds	r7, #8
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}
 800b722:	bf00      	nop
 800b724:	08016519 	.word	0x08016519
 800b728:	08015421 	.word	0x08015421

0800b72c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b084      	sub	sp, #16
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
 800b734:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b736:	4819      	ldr	r0, [pc, #100]	@ (800b79c <tcpip_try_callback+0x70>)
 800b738:	f00b f852 	bl	80167e0 <sys_mbox_valid>
 800b73c:	4603      	mov	r3, r0
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d106      	bne.n	800b750 <tcpip_try_callback+0x24>
 800b742:	4b17      	ldr	r3, [pc, #92]	@ (800b7a0 <tcpip_try_callback+0x74>)
 800b744:	f240 125d 	movw	r2, #349	@ 0x15d
 800b748:	4916      	ldr	r1, [pc, #88]	@ (800b7a4 <tcpip_try_callback+0x78>)
 800b74a:	4817      	ldr	r0, [pc, #92]	@ (800b7a8 <tcpip_try_callback+0x7c>)
 800b74c:	f00b fa70 	bl	8016c30 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800b750:	2008      	movs	r0, #8
 800b752:	f000 fe1b 	bl	800c38c <memp_malloc>
 800b756:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d102      	bne.n	800b764 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800b75e:	f04f 33ff 	mov.w	r3, #4294967295
 800b762:	e017      	b.n	800b794 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	2201      	movs	r2, #1
 800b768:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	687a      	ldr	r2, [r7, #4]
 800b76e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	683a      	ldr	r2, [r7, #0]
 800b774:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b776:	68f9      	ldr	r1, [r7, #12]
 800b778:	4808      	ldr	r0, [pc, #32]	@ (800b79c <tcpip_try_callback+0x70>)
 800b77a:	f00a ffcf 	bl	801671c <sys_mbox_trypost>
 800b77e:	4603      	mov	r3, r0
 800b780:	2b00      	cmp	r3, #0
 800b782:	d006      	beq.n	800b792 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800b784:	68f9      	ldr	r1, [r7, #12]
 800b786:	2008      	movs	r0, #8
 800b788:	f000 fe76 	bl	800c478 <memp_free>
    return ERR_MEM;
 800b78c:	f04f 33ff 	mov.w	r3, #4294967295
 800b790:	e000      	b.n	800b794 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800b792:	2300      	movs	r3, #0
}
 800b794:	4618      	mov	r0, r3
 800b796:	3710      	adds	r7, #16
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}
 800b79c:	24004dec 	.word	0x24004dec
 800b7a0:	080185f4 	.word	0x080185f4
 800b7a4:	0801866c 	.word	0x0801866c
 800b7a8:	08018644 	.word	0x08018644

0800b7ac <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b084      	sub	sp, #16
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	60f8      	str	r0, [r7, #12]
 800b7b4:	60b9      	str	r1, [r7, #8]
 800b7b6:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800b7b8:	4806      	ldr	r0, [pc, #24]	@ (800b7d4 <tcpip_send_msg_wait_sem+0x28>)
 800b7ba:	f00b f8df 	bl	801697c <sys_mutex_lock>
  fn(apimsg);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	68b8      	ldr	r0, [r7, #8]
 800b7c2:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800b7c4:	4803      	ldr	r0, [pc, #12]	@ (800b7d4 <tcpip_send_msg_wait_sem+0x28>)
 800b7c6:	f00b f8e8 	bl	801699a <sys_mutex_unlock>
  return ERR_OK;
 800b7ca:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3710      	adds	r7, #16
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}
 800b7d4:	24004df0 	.word	0x24004df0

0800b7d8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b084      	sub	sp, #16
 800b7dc:	af02      	add	r7, sp, #8
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	6039      	str	r1, [r7, #0]
  lwip_init();
 800b7e2:	f000 f92d 	bl	800ba40 <lwip_init>

  tcpip_init_done = initfunc;
 800b7e6:	4a17      	ldr	r2, [pc, #92]	@ (800b844 <tcpip_init+0x6c>)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800b7ec:	4a16      	ldr	r2, [pc, #88]	@ (800b848 <tcpip_init+0x70>)
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b7f2:	2106      	movs	r1, #6
 800b7f4:	4815      	ldr	r0, [pc, #84]	@ (800b84c <tcpip_init+0x74>)
 800b7f6:	f00a ff65 	bl	80166c4 <sys_mbox_new>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d006      	beq.n	800b80e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800b800:	4b13      	ldr	r3, [pc, #76]	@ (800b850 <tcpip_init+0x78>)
 800b802:	f240 2261 	movw	r2, #609	@ 0x261
 800b806:	4913      	ldr	r1, [pc, #76]	@ (800b854 <tcpip_init+0x7c>)
 800b808:	4813      	ldr	r0, [pc, #76]	@ (800b858 <tcpip_init+0x80>)
 800b80a:	f00b fa11 	bl	8016c30 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800b80e:	4813      	ldr	r0, [pc, #76]	@ (800b85c <tcpip_init+0x84>)
 800b810:	f00b f89e 	bl	8016950 <sys_mutex_new>
 800b814:	4603      	mov	r3, r0
 800b816:	2b00      	cmp	r3, #0
 800b818:	d006      	beq.n	800b828 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800b81a:	4b0d      	ldr	r3, [pc, #52]	@ (800b850 <tcpip_init+0x78>)
 800b81c:	f240 2265 	movw	r2, #613	@ 0x265
 800b820:	490f      	ldr	r1, [pc, #60]	@ (800b860 <tcpip_init+0x88>)
 800b822:	480d      	ldr	r0, [pc, #52]	@ (800b858 <tcpip_init+0x80>)
 800b824:	f00b fa04 	bl	8016c30 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800b828:	2318      	movs	r3, #24
 800b82a:	9300      	str	r3, [sp, #0]
 800b82c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b830:	2200      	movs	r2, #0
 800b832:	490c      	ldr	r1, [pc, #48]	@ (800b864 <tcpip_init+0x8c>)
 800b834:	480c      	ldr	r0, [pc, #48]	@ (800b868 <tcpip_init+0x90>)
 800b836:	f00b f8bd 	bl	80169b4 <sys_thread_new>
}
 800b83a:	bf00      	nop
 800b83c:	3708      	adds	r7, #8
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
 800b842:	bf00      	nop
 800b844:	24004de4 	.word	0x24004de4
 800b848:	24004de8 	.word	0x24004de8
 800b84c:	24004dec 	.word	0x24004dec
 800b850:	080185f4 	.word	0x080185f4
 800b854:	0801867c 	.word	0x0801867c
 800b858:	08018644 	.word	0x08018644
 800b85c:	24004df0 	.word	0x24004df0
 800b860:	080186a0 	.word	0x080186a0
 800b864:	0800b569 	.word	0x0800b569
 800b868:	080186c4 	.word	0x080186c4

0800b86c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b86c:	b480      	push	{r7}
 800b86e:	b083      	sub	sp, #12
 800b870:	af00      	add	r7, sp, #0
 800b872:	4603      	mov	r3, r0
 800b874:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b876:	88fb      	ldrh	r3, [r7, #6]
 800b878:	021b      	lsls	r3, r3, #8
 800b87a:	b21a      	sxth	r2, r3
 800b87c:	88fb      	ldrh	r3, [r7, #6]
 800b87e:	0a1b      	lsrs	r3, r3, #8
 800b880:	b29b      	uxth	r3, r3
 800b882:	b21b      	sxth	r3, r3
 800b884:	4313      	orrs	r3, r2
 800b886:	b21b      	sxth	r3, r3
 800b888:	b29b      	uxth	r3, r3
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	370c      	adds	r7, #12
 800b88e:	46bd      	mov	sp, r7
 800b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b894:	4770      	bx	lr

0800b896 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b896:	b480      	push	{r7}
 800b898:	b083      	sub	sp, #12
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	061a      	lsls	r2, r3, #24
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	021b      	lsls	r3, r3, #8
 800b8a6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b8aa:	431a      	orrs	r2, r3
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	0a1b      	lsrs	r3, r3, #8
 800b8b0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b8b4:	431a      	orrs	r2, r3
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	0e1b      	lsrs	r3, r3, #24
 800b8ba:	4313      	orrs	r3, r2
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	370c      	adds	r7, #12
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c6:	4770      	bx	lr

0800b8c8 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b089      	sub	sp, #36	@ 0x24
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800b8de:	69fb      	ldr	r3, [r7, #28]
 800b8e0:	f003 0301 	and.w	r3, r3, #1
 800b8e4:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d00d      	beq.n	800b908 <lwip_standard_chksum+0x40>
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	dd0a      	ble.n	800b908 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800b8f2:	69fa      	ldr	r2, [r7, #28]
 800b8f4:	1c53      	adds	r3, r2, #1
 800b8f6:	61fb      	str	r3, [r7, #28]
 800b8f8:	f107 030e 	add.w	r3, r7, #14
 800b8fc:	3301      	adds	r3, #1
 800b8fe:	7812      	ldrb	r2, [r2, #0]
 800b900:	701a      	strb	r2, [r3, #0]
    len--;
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	3b01      	subs	r3, #1
 800b906:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800b908:	69fb      	ldr	r3, [r7, #28]
 800b90a:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800b90c:	e00a      	b.n	800b924 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800b90e:	69bb      	ldr	r3, [r7, #24]
 800b910:	1c9a      	adds	r2, r3, #2
 800b912:	61ba      	str	r2, [r7, #24]
 800b914:	881b      	ldrh	r3, [r3, #0]
 800b916:	461a      	mov	r2, r3
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	4413      	add	r3, r2
 800b91c:	617b      	str	r3, [r7, #20]
    len -= 2;
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	3b02      	subs	r3, #2
 800b922:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	2b01      	cmp	r3, #1
 800b928:	dcf1      	bgt.n	800b90e <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	dd04      	ble.n	800b93a <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800b930:	f107 030e 	add.w	r3, r7, #14
 800b934:	69ba      	ldr	r2, [r7, #24]
 800b936:	7812      	ldrb	r2, [r2, #0]
 800b938:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800b93a:	89fb      	ldrh	r3, [r7, #14]
 800b93c:	461a      	mov	r2, r3
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	4413      	add	r3, r2
 800b942:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	0c1a      	lsrs	r2, r3, #16
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	b29b      	uxth	r3, r3
 800b94c:	4413      	add	r3, r2
 800b94e:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	0c1a      	lsrs	r2, r3, #16
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	b29b      	uxth	r3, r3
 800b958:	4413      	add	r3, r2
 800b95a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800b95c:	693b      	ldr	r3, [r7, #16]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d007      	beq.n	800b972 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	021b      	lsls	r3, r3, #8
 800b966:	b29a      	uxth	r2, r3
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	0a1b      	lsrs	r3, r3, #8
 800b96c:	b2db      	uxtb	r3, r3
 800b96e:	4313      	orrs	r3, r2
 800b970:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	b29b      	uxth	r3, r3
}
 800b976:	4618      	mov	r0, r3
 800b978:	3724      	adds	r7, #36	@ 0x24
 800b97a:	46bd      	mov	sp, r7
 800b97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b980:	4770      	bx	lr

0800b982 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800b982:	b580      	push	{r7, lr}
 800b984:	b082      	sub	sp, #8
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
 800b98a:	460b      	mov	r3, r1
 800b98c:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800b98e:	887b      	ldrh	r3, [r7, #2]
 800b990:	4619      	mov	r1, r3
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f7ff ff98 	bl	800b8c8 <lwip_standard_chksum>
 800b998:	4603      	mov	r3, r0
 800b99a:	43db      	mvns	r3, r3
 800b99c:	b29b      	uxth	r3, r3
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3708      	adds	r7, #8
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}

0800b9a6 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800b9a6:	b580      	push	{r7, lr}
 800b9a8:	b086      	sub	sp, #24
 800b9aa:	af00      	add	r7, sp, #0
 800b9ac:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	613b      	str	r3, [r7, #16]
 800b9ba:	e02b      	b.n	800ba14 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	685a      	ldr	r2, [r3, #4]
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	895b      	ldrh	r3, [r3, #10]
 800b9c4:	4619      	mov	r1, r3
 800b9c6:	4610      	mov	r0, r2
 800b9c8:	f7ff ff7e 	bl	800b8c8 <lwip_standard_chksum>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	461a      	mov	r2, r3
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	4413      	add	r3, r2
 800b9d4:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	0c1a      	lsrs	r2, r3, #16
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	b29b      	uxth	r3, r3
 800b9de:	4413      	add	r3, r2
 800b9e0:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800b9e2:	693b      	ldr	r3, [r7, #16]
 800b9e4:	895b      	ldrh	r3, [r3, #10]
 800b9e6:	f003 0301 	and.w	r3, r3, #1
 800b9ea:	b29b      	uxth	r3, r3
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d00e      	beq.n	800ba0e <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	bf0c      	ite	eq
 800b9f6:	2301      	moveq	r3, #1
 800b9f8:	2300      	movne	r3, #0
 800b9fa:	b2db      	uxtb	r3, r3
 800b9fc:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	021b      	lsls	r3, r3, #8
 800ba02:	b29a      	uxth	r2, r3
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	0a1b      	lsrs	r3, r3, #8
 800ba08:	b2db      	uxtb	r3, r3
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	613b      	str	r3, [r7, #16]
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d1d0      	bne.n	800b9bc <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d007      	beq.n	800ba30 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	021b      	lsls	r3, r3, #8
 800ba24:	b29a      	uxth	r2, r3
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	0a1b      	lsrs	r3, r3, #8
 800ba2a:	b2db      	uxtb	r3, r3
 800ba2c:	4313      	orrs	r3, r2
 800ba2e:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	b29b      	uxth	r3, r3
 800ba34:	43db      	mvns	r3, r3
 800ba36:	b29b      	uxth	r3, r3
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3718      	adds	r7, #24
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b082      	sub	sp, #8
 800ba44:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ba46:	2300      	movs	r3, #0
 800ba48:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800ba4a:	f00a ff75 	bl	8016938 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800ba4e:	f000 f8d5 	bl	800bbfc <mem_init>
  memp_init();
 800ba52:	f000 fc2d 	bl	800c2b0 <memp_init>
  pbuf_init();
  netif_init();
 800ba56:	f000 fd39 	bl	800c4cc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ba5a:	f008 f847 	bl	8013aec <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ba5e:	f001 fe49 	bl	800d6f4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ba62:	f007 ff89 	bl	8013978 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ba66:	bf00      	nop
 800ba68:	3708      	adds	r7, #8
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
	...

0800ba70 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ba70:	b480      	push	{r7}
 800ba72:	b083      	sub	sp, #12
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	4603      	mov	r3, r0
 800ba78:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ba7a:	4b05      	ldr	r3, [pc, #20]	@ (800ba90 <ptr_to_mem+0x20>)
 800ba7c:	681a      	ldr	r2, [r3, #0]
 800ba7e:	88fb      	ldrh	r3, [r7, #6]
 800ba80:	4413      	add	r3, r2
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	370c      	adds	r7, #12
 800ba86:	46bd      	mov	sp, r7
 800ba88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8c:	4770      	bx	lr
 800ba8e:	bf00      	nop
 800ba90:	24004e0c 	.word	0x24004e0c

0800ba94 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b083      	sub	sp, #12
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ba9c:	4b05      	ldr	r3, [pc, #20]	@ (800bab4 <mem_to_ptr+0x20>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	687a      	ldr	r2, [r7, #4]
 800baa2:	1ad3      	subs	r3, r2, r3
 800baa4:	b29b      	uxth	r3, r3
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	370c      	adds	r7, #12
 800baaa:	46bd      	mov	sp, r7
 800baac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab0:	4770      	bx	lr
 800bab2:	bf00      	nop
 800bab4:	24004e0c 	.word	0x24004e0c

0800bab8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800bab8:	b590      	push	{r4, r7, lr}
 800baba:	b085      	sub	sp, #20
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800bac0:	4b45      	ldr	r3, [pc, #276]	@ (800bbd8 <plug_holes+0x120>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	687a      	ldr	r2, [r7, #4]
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d206      	bcs.n	800bad8 <plug_holes+0x20>
 800baca:	4b44      	ldr	r3, [pc, #272]	@ (800bbdc <plug_holes+0x124>)
 800bacc:	f240 12df 	movw	r2, #479	@ 0x1df
 800bad0:	4943      	ldr	r1, [pc, #268]	@ (800bbe0 <plug_holes+0x128>)
 800bad2:	4844      	ldr	r0, [pc, #272]	@ (800bbe4 <plug_holes+0x12c>)
 800bad4:	f00b f8ac 	bl	8016c30 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800bad8:	4b43      	ldr	r3, [pc, #268]	@ (800bbe8 <plug_holes+0x130>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	687a      	ldr	r2, [r7, #4]
 800bade:	429a      	cmp	r2, r3
 800bae0:	d306      	bcc.n	800baf0 <plug_holes+0x38>
 800bae2:	4b3e      	ldr	r3, [pc, #248]	@ (800bbdc <plug_holes+0x124>)
 800bae4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800bae8:	4940      	ldr	r1, [pc, #256]	@ (800bbec <plug_holes+0x134>)
 800baea:	483e      	ldr	r0, [pc, #248]	@ (800bbe4 <plug_holes+0x12c>)
 800baec:	f00b f8a0 	bl	8016c30 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	791b      	ldrb	r3, [r3, #4]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d006      	beq.n	800bb06 <plug_holes+0x4e>
 800baf8:	4b38      	ldr	r3, [pc, #224]	@ (800bbdc <plug_holes+0x124>)
 800bafa:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800bafe:	493c      	ldr	r1, [pc, #240]	@ (800bbf0 <plug_holes+0x138>)
 800bb00:	4838      	ldr	r0, [pc, #224]	@ (800bbe4 <plug_holes+0x12c>)
 800bb02:	f00b f895 	bl	8016c30 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	881b      	ldrh	r3, [r3, #0]
 800bb0a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800bb0e:	d906      	bls.n	800bb1e <plug_holes+0x66>
 800bb10:	4b32      	ldr	r3, [pc, #200]	@ (800bbdc <plug_holes+0x124>)
 800bb12:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800bb16:	4937      	ldr	r1, [pc, #220]	@ (800bbf4 <plug_holes+0x13c>)
 800bb18:	4832      	ldr	r0, [pc, #200]	@ (800bbe4 <plug_holes+0x12c>)
 800bb1a:	f00b f889 	bl	8016c30 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	881b      	ldrh	r3, [r3, #0]
 800bb22:	4618      	mov	r0, r3
 800bb24:	f7ff ffa4 	bl	800ba70 <ptr_to_mem>
 800bb28:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800bb2a:	687a      	ldr	r2, [r7, #4]
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	429a      	cmp	r2, r3
 800bb30:	d024      	beq.n	800bb7c <plug_holes+0xc4>
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	791b      	ldrb	r3, [r3, #4]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d120      	bne.n	800bb7c <plug_holes+0xc4>
 800bb3a:	4b2b      	ldr	r3, [pc, #172]	@ (800bbe8 <plug_holes+0x130>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	68fa      	ldr	r2, [r7, #12]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d01b      	beq.n	800bb7c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800bb44:	4b2c      	ldr	r3, [pc, #176]	@ (800bbf8 <plug_holes+0x140>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	68fa      	ldr	r2, [r7, #12]
 800bb4a:	429a      	cmp	r2, r3
 800bb4c:	d102      	bne.n	800bb54 <plug_holes+0x9c>
      lfree = mem;
 800bb4e:	4a2a      	ldr	r2, [pc, #168]	@ (800bbf8 <plug_holes+0x140>)
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	881a      	ldrh	r2, [r3, #0]
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	881b      	ldrh	r3, [r3, #0]
 800bb60:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800bb64:	d00a      	beq.n	800bb7c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	881b      	ldrh	r3, [r3, #0]
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f7ff ff80 	bl	800ba70 <ptr_to_mem>
 800bb70:	4604      	mov	r4, r0
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f7ff ff8e 	bl	800ba94 <mem_to_ptr>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	885b      	ldrh	r3, [r3, #2]
 800bb80:	4618      	mov	r0, r3
 800bb82:	f7ff ff75 	bl	800ba70 <ptr_to_mem>
 800bb86:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800bb88:	68ba      	ldr	r2, [r7, #8]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d01f      	beq.n	800bbd0 <plug_holes+0x118>
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	791b      	ldrb	r3, [r3, #4]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d11b      	bne.n	800bbd0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800bb98:	4b17      	ldr	r3, [pc, #92]	@ (800bbf8 <plug_holes+0x140>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	687a      	ldr	r2, [r7, #4]
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d102      	bne.n	800bba8 <plug_holes+0xf0>
      lfree = pmem;
 800bba2:	4a15      	ldr	r2, [pc, #84]	@ (800bbf8 <plug_holes+0x140>)
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	881a      	ldrh	r2, [r3, #0]
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	881b      	ldrh	r3, [r3, #0]
 800bbb4:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800bbb8:	d00a      	beq.n	800bbd0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	881b      	ldrh	r3, [r3, #0]
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f7ff ff56 	bl	800ba70 <ptr_to_mem>
 800bbc4:	4604      	mov	r4, r0
 800bbc6:	68b8      	ldr	r0, [r7, #8]
 800bbc8:	f7ff ff64 	bl	800ba94 <mem_to_ptr>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800bbd0:	bf00      	nop
 800bbd2:	3714      	adds	r7, #20
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd90      	pop	{r4, r7, pc}
 800bbd8:	24004e0c 	.word	0x24004e0c
 800bbdc:	080186d4 	.word	0x080186d4
 800bbe0:	08018704 	.word	0x08018704
 800bbe4:	0801871c 	.word	0x0801871c
 800bbe8:	24004e10 	.word	0x24004e10
 800bbec:	08018744 	.word	0x08018744
 800bbf0:	08018760 	.word	0x08018760
 800bbf4:	0801877c 	.word	0x0801877c
 800bbf8:	24004e18 	.word	0x24004e18

0800bbfc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b082      	sub	sp, #8
 800bc00:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800bc02:	4b1d      	ldr	r3, [pc, #116]	@ (800bc78 <mem_init+0x7c>)
 800bc04:	4a1d      	ldr	r2, [pc, #116]	@ (800bc7c <mem_init+0x80>)
 800bc06:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800bc08:	4b1b      	ldr	r3, [pc, #108]	@ (800bc78 <mem_init+0x7c>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800bc14:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800bc22:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 800bc26:	f7ff ff23 	bl	800ba70 <ptr_to_mem>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	4a14      	ldr	r2, [pc, #80]	@ (800bc80 <mem_init+0x84>)
 800bc2e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800bc30:	4b13      	ldr	r3, [pc, #76]	@ (800bc80 <mem_init+0x84>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	2201      	movs	r2, #1
 800bc36:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800bc38:	4b11      	ldr	r3, [pc, #68]	@ (800bc80 <mem_init+0x84>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800bc40:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800bc42:	4b0f      	ldr	r3, [pc, #60]	@ (800bc80 <mem_init+0x84>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800bc4a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800bc4c:	4b0a      	ldr	r3, [pc, #40]	@ (800bc78 <mem_init+0x7c>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	4a0c      	ldr	r2, [pc, #48]	@ (800bc84 <mem_init+0x88>)
 800bc52:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800bc54:	480c      	ldr	r0, [pc, #48]	@ (800bc88 <mem_init+0x8c>)
 800bc56:	f00a fe7b 	bl	8016950 <sys_mutex_new>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d006      	beq.n	800bc6e <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800bc60:	4b0a      	ldr	r3, [pc, #40]	@ (800bc8c <mem_init+0x90>)
 800bc62:	f240 221f 	movw	r2, #543	@ 0x21f
 800bc66:	490a      	ldr	r1, [pc, #40]	@ (800bc90 <mem_init+0x94>)
 800bc68:	480a      	ldr	r0, [pc, #40]	@ (800bc94 <mem_init+0x98>)
 800bc6a:	f00a ffe1 	bl	8016c30 <iprintf>
  }
}
 800bc6e:	bf00      	nop
 800bc70:	3708      	adds	r7, #8
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
 800bc76:	bf00      	nop
 800bc78:	24004e0c 	.word	0x24004e0c
 800bc7c:	30004000 	.word	0x30004000
 800bc80:	24004e10 	.word	0x24004e10
 800bc84:	24004e18 	.word	0x24004e18
 800bc88:	24004e14 	.word	0x24004e14
 800bc8c:	080186d4 	.word	0x080186d4
 800bc90:	080187a8 	.word	0x080187a8
 800bc94:	0801871c 	.word	0x0801871c

0800bc98 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b086      	sub	sp, #24
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f7ff fef7 	bl	800ba94 <mem_to_ptr>
 800bca6:	4603      	mov	r3, r0
 800bca8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	881b      	ldrh	r3, [r3, #0]
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f7ff fede 	bl	800ba70 <ptr_to_mem>
 800bcb4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	885b      	ldrh	r3, [r3, #2]
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f7ff fed8 	bl	800ba70 <ptr_to_mem>
 800bcc0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	881b      	ldrh	r3, [r3, #0]
 800bcc6:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800bcca:	d818      	bhi.n	800bcfe <mem_link_valid+0x66>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	885b      	ldrh	r3, [r3, #2]
 800bcd0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800bcd4:	d813      	bhi.n	800bcfe <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bcda:	8afa      	ldrh	r2, [r7, #22]
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d004      	beq.n	800bcea <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	881b      	ldrh	r3, [r3, #0]
 800bce4:	8afa      	ldrh	r2, [r7, #22]
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d109      	bne.n	800bcfe <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bcea:	4b08      	ldr	r3, [pc, #32]	@ (800bd0c <mem_link_valid+0x74>)
 800bcec:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bcee:	693a      	ldr	r2, [r7, #16]
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	d006      	beq.n	800bd02 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	885b      	ldrh	r3, [r3, #2]
 800bcf8:	8afa      	ldrh	r2, [r7, #22]
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	d001      	beq.n	800bd02 <mem_link_valid+0x6a>
    return 0;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	e000      	b.n	800bd04 <mem_link_valid+0x6c>
  }
  return 1;
 800bd02:	2301      	movs	r3, #1
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	3718      	adds	r7, #24
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd80      	pop	{r7, pc}
 800bd0c:	24004e10 	.word	0x24004e10

0800bd10 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b088      	sub	sp, #32
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d070      	beq.n	800be00 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f003 0303 	and.w	r3, r3, #3
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d00d      	beq.n	800bd44 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800bd28:	4b37      	ldr	r3, [pc, #220]	@ (800be08 <mem_free+0xf8>)
 800bd2a:	f240 2273 	movw	r2, #627	@ 0x273
 800bd2e:	4937      	ldr	r1, [pc, #220]	@ (800be0c <mem_free+0xfc>)
 800bd30:	4837      	ldr	r0, [pc, #220]	@ (800be10 <mem_free+0x100>)
 800bd32:	f00a ff7d 	bl	8016c30 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bd36:	f00a fe5d 	bl	80169f4 <sys_arch_protect>
 800bd3a:	60f8      	str	r0, [r7, #12]
 800bd3c:	68f8      	ldr	r0, [r7, #12]
 800bd3e:	f00a fe67 	bl	8016a10 <sys_arch_unprotect>
    return;
 800bd42:	e05e      	b.n	800be02 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	3b08      	subs	r3, #8
 800bd48:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800bd4a:	4b32      	ldr	r3, [pc, #200]	@ (800be14 <mem_free+0x104>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	69fa      	ldr	r2, [r7, #28]
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d306      	bcc.n	800bd62 <mem_free+0x52>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f103 020c 	add.w	r2, r3, #12
 800bd5a:	4b2f      	ldr	r3, [pc, #188]	@ (800be18 <mem_free+0x108>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	d90d      	bls.n	800bd7e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800bd62:	4b29      	ldr	r3, [pc, #164]	@ (800be08 <mem_free+0xf8>)
 800bd64:	f240 227f 	movw	r2, #639	@ 0x27f
 800bd68:	492c      	ldr	r1, [pc, #176]	@ (800be1c <mem_free+0x10c>)
 800bd6a:	4829      	ldr	r0, [pc, #164]	@ (800be10 <mem_free+0x100>)
 800bd6c:	f00a ff60 	bl	8016c30 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bd70:	f00a fe40 	bl	80169f4 <sys_arch_protect>
 800bd74:	6138      	str	r0, [r7, #16]
 800bd76:	6938      	ldr	r0, [r7, #16]
 800bd78:	f00a fe4a 	bl	8016a10 <sys_arch_unprotect>
    return;
 800bd7c:	e041      	b.n	800be02 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bd7e:	4828      	ldr	r0, [pc, #160]	@ (800be20 <mem_free+0x110>)
 800bd80:	f00a fdfc 	bl	801697c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800bd84:	69fb      	ldr	r3, [r7, #28]
 800bd86:	791b      	ldrb	r3, [r3, #4]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d110      	bne.n	800bdae <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800bd8c:	4b1e      	ldr	r3, [pc, #120]	@ (800be08 <mem_free+0xf8>)
 800bd8e:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800bd92:	4924      	ldr	r1, [pc, #144]	@ (800be24 <mem_free+0x114>)
 800bd94:	481e      	ldr	r0, [pc, #120]	@ (800be10 <mem_free+0x100>)
 800bd96:	f00a ff4b 	bl	8016c30 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bd9a:	4821      	ldr	r0, [pc, #132]	@ (800be20 <mem_free+0x110>)
 800bd9c:	f00a fdfd 	bl	801699a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bda0:	f00a fe28 	bl	80169f4 <sys_arch_protect>
 800bda4:	6178      	str	r0, [r7, #20]
 800bda6:	6978      	ldr	r0, [r7, #20]
 800bda8:	f00a fe32 	bl	8016a10 <sys_arch_unprotect>
    return;
 800bdac:	e029      	b.n	800be02 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800bdae:	69f8      	ldr	r0, [r7, #28]
 800bdb0:	f7ff ff72 	bl	800bc98 <mem_link_valid>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d110      	bne.n	800bddc <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800bdba:	4b13      	ldr	r3, [pc, #76]	@ (800be08 <mem_free+0xf8>)
 800bdbc:	f240 2295 	movw	r2, #661	@ 0x295
 800bdc0:	4919      	ldr	r1, [pc, #100]	@ (800be28 <mem_free+0x118>)
 800bdc2:	4813      	ldr	r0, [pc, #76]	@ (800be10 <mem_free+0x100>)
 800bdc4:	f00a ff34 	bl	8016c30 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bdc8:	4815      	ldr	r0, [pc, #84]	@ (800be20 <mem_free+0x110>)
 800bdca:	f00a fde6 	bl	801699a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bdce:	f00a fe11 	bl	80169f4 <sys_arch_protect>
 800bdd2:	61b8      	str	r0, [r7, #24]
 800bdd4:	69b8      	ldr	r0, [r7, #24]
 800bdd6:	f00a fe1b 	bl	8016a10 <sys_arch_unprotect>
    return;
 800bdda:	e012      	b.n	800be02 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800bddc:	69fb      	ldr	r3, [r7, #28]
 800bdde:	2200      	movs	r2, #0
 800bde0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800bde2:	4b12      	ldr	r3, [pc, #72]	@ (800be2c <mem_free+0x11c>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	69fa      	ldr	r2, [r7, #28]
 800bde8:	429a      	cmp	r2, r3
 800bdea:	d202      	bcs.n	800bdf2 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800bdec:	4a0f      	ldr	r2, [pc, #60]	@ (800be2c <mem_free+0x11c>)
 800bdee:	69fb      	ldr	r3, [r7, #28]
 800bdf0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800bdf2:	69f8      	ldr	r0, [r7, #28]
 800bdf4:	f7ff fe60 	bl	800bab8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bdf8:	4809      	ldr	r0, [pc, #36]	@ (800be20 <mem_free+0x110>)
 800bdfa:	f00a fdce 	bl	801699a <sys_mutex_unlock>
 800bdfe:	e000      	b.n	800be02 <mem_free+0xf2>
    return;
 800be00:	bf00      	nop
}
 800be02:	3720      	adds	r7, #32
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}
 800be08:	080186d4 	.word	0x080186d4
 800be0c:	080187c4 	.word	0x080187c4
 800be10:	0801871c 	.word	0x0801871c
 800be14:	24004e0c 	.word	0x24004e0c
 800be18:	24004e10 	.word	0x24004e10
 800be1c:	080187e8 	.word	0x080187e8
 800be20:	24004e14 	.word	0x24004e14
 800be24:	08018804 	.word	0x08018804
 800be28:	0801882c 	.word	0x0801882c
 800be2c:	24004e18 	.word	0x24004e18

0800be30 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b088      	sub	sp, #32
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	460b      	mov	r3, r1
 800be3a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800be3c:	887b      	ldrh	r3, [r7, #2]
 800be3e:	3303      	adds	r3, #3
 800be40:	b29b      	uxth	r3, r3
 800be42:	f023 0303 	bic.w	r3, r3, #3
 800be46:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800be48:	8bfb      	ldrh	r3, [r7, #30]
 800be4a:	2b0b      	cmp	r3, #11
 800be4c:	d801      	bhi.n	800be52 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800be4e:	230c      	movs	r3, #12
 800be50:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800be52:	8bfb      	ldrh	r3, [r7, #30]
 800be54:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800be58:	d803      	bhi.n	800be62 <mem_trim+0x32>
 800be5a:	8bfa      	ldrh	r2, [r7, #30]
 800be5c:	887b      	ldrh	r3, [r7, #2]
 800be5e:	429a      	cmp	r2, r3
 800be60:	d201      	bcs.n	800be66 <mem_trim+0x36>
    return NULL;
 800be62:	2300      	movs	r3, #0
 800be64:	e0d8      	b.n	800c018 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800be66:	4b6e      	ldr	r3, [pc, #440]	@ (800c020 <mem_trim+0x1f0>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	687a      	ldr	r2, [r7, #4]
 800be6c:	429a      	cmp	r2, r3
 800be6e:	d304      	bcc.n	800be7a <mem_trim+0x4a>
 800be70:	4b6c      	ldr	r3, [pc, #432]	@ (800c024 <mem_trim+0x1f4>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	687a      	ldr	r2, [r7, #4]
 800be76:	429a      	cmp	r2, r3
 800be78:	d306      	bcc.n	800be88 <mem_trim+0x58>
 800be7a:	4b6b      	ldr	r3, [pc, #428]	@ (800c028 <mem_trim+0x1f8>)
 800be7c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800be80:	496a      	ldr	r1, [pc, #424]	@ (800c02c <mem_trim+0x1fc>)
 800be82:	486b      	ldr	r0, [pc, #428]	@ (800c030 <mem_trim+0x200>)
 800be84:	f00a fed4 	bl	8016c30 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800be88:	4b65      	ldr	r3, [pc, #404]	@ (800c020 <mem_trim+0x1f0>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	687a      	ldr	r2, [r7, #4]
 800be8e:	429a      	cmp	r2, r3
 800be90:	d304      	bcc.n	800be9c <mem_trim+0x6c>
 800be92:	4b64      	ldr	r3, [pc, #400]	@ (800c024 <mem_trim+0x1f4>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	687a      	ldr	r2, [r7, #4]
 800be98:	429a      	cmp	r2, r3
 800be9a:	d307      	bcc.n	800beac <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800be9c:	f00a fdaa 	bl	80169f4 <sys_arch_protect>
 800bea0:	60b8      	str	r0, [r7, #8]
 800bea2:	68b8      	ldr	r0, [r7, #8]
 800bea4:	f00a fdb4 	bl	8016a10 <sys_arch_unprotect>
    return rmem;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	e0b5      	b.n	800c018 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	3b08      	subs	r3, #8
 800beb0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800beb2:	69b8      	ldr	r0, [r7, #24]
 800beb4:	f7ff fdee 	bl	800ba94 <mem_to_ptr>
 800beb8:	4603      	mov	r3, r0
 800beba:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800bebc:	69bb      	ldr	r3, [r7, #24]
 800bebe:	881a      	ldrh	r2, [r3, #0]
 800bec0:	8afb      	ldrh	r3, [r7, #22]
 800bec2:	1ad3      	subs	r3, r2, r3
 800bec4:	b29b      	uxth	r3, r3
 800bec6:	3b08      	subs	r3, #8
 800bec8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800beca:	8bfa      	ldrh	r2, [r7, #30]
 800becc:	8abb      	ldrh	r3, [r7, #20]
 800bece:	429a      	cmp	r2, r3
 800bed0:	d906      	bls.n	800bee0 <mem_trim+0xb0>
 800bed2:	4b55      	ldr	r3, [pc, #340]	@ (800c028 <mem_trim+0x1f8>)
 800bed4:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800bed8:	4956      	ldr	r1, [pc, #344]	@ (800c034 <mem_trim+0x204>)
 800beda:	4855      	ldr	r0, [pc, #340]	@ (800c030 <mem_trim+0x200>)
 800bedc:	f00a fea8 	bl	8016c30 <iprintf>
  if (newsize > size) {
 800bee0:	8bfa      	ldrh	r2, [r7, #30]
 800bee2:	8abb      	ldrh	r3, [r7, #20]
 800bee4:	429a      	cmp	r2, r3
 800bee6:	d901      	bls.n	800beec <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800bee8:	2300      	movs	r3, #0
 800beea:	e095      	b.n	800c018 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800beec:	8bfa      	ldrh	r2, [r7, #30]
 800beee:	8abb      	ldrh	r3, [r7, #20]
 800bef0:	429a      	cmp	r2, r3
 800bef2:	d101      	bne.n	800bef8 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	e08f      	b.n	800c018 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bef8:	484f      	ldr	r0, [pc, #316]	@ (800c038 <mem_trim+0x208>)
 800befa:	f00a fd3f 	bl	801697c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800befe:	69bb      	ldr	r3, [r7, #24]
 800bf00:	881b      	ldrh	r3, [r3, #0]
 800bf02:	4618      	mov	r0, r3
 800bf04:	f7ff fdb4 	bl	800ba70 <ptr_to_mem>
 800bf08:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800bf0a:	693b      	ldr	r3, [r7, #16]
 800bf0c:	791b      	ldrb	r3, [r3, #4]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d13f      	bne.n	800bf92 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bf12:	69bb      	ldr	r3, [r7, #24]
 800bf14:	881b      	ldrh	r3, [r3, #0]
 800bf16:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800bf1a:	d106      	bne.n	800bf2a <mem_trim+0xfa>
 800bf1c:	4b42      	ldr	r3, [pc, #264]	@ (800c028 <mem_trim+0x1f8>)
 800bf1e:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800bf22:	4946      	ldr	r1, [pc, #280]	@ (800c03c <mem_trim+0x20c>)
 800bf24:	4842      	ldr	r0, [pc, #264]	@ (800c030 <mem_trim+0x200>)
 800bf26:	f00a fe83 	bl	8016c30 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	881b      	ldrh	r3, [r3, #0]
 800bf2e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bf30:	8afa      	ldrh	r2, [r7, #22]
 800bf32:	8bfb      	ldrh	r3, [r7, #30]
 800bf34:	4413      	add	r3, r2
 800bf36:	b29b      	uxth	r3, r3
 800bf38:	3308      	adds	r3, #8
 800bf3a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800bf3c:	4b40      	ldr	r3, [pc, #256]	@ (800c040 <mem_trim+0x210>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	693a      	ldr	r2, [r7, #16]
 800bf42:	429a      	cmp	r2, r3
 800bf44:	d106      	bne.n	800bf54 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800bf46:	89fb      	ldrh	r3, [r7, #14]
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f7ff fd91 	bl	800ba70 <ptr_to_mem>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	4a3b      	ldr	r2, [pc, #236]	@ (800c040 <mem_trim+0x210>)
 800bf52:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800bf54:	89fb      	ldrh	r3, [r7, #14]
 800bf56:	4618      	mov	r0, r3
 800bf58:	f7ff fd8a 	bl	800ba70 <ptr_to_mem>
 800bf5c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	2200      	movs	r2, #0
 800bf62:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	89ba      	ldrh	r2, [r7, #12]
 800bf68:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800bf6a:	693b      	ldr	r3, [r7, #16]
 800bf6c:	8afa      	ldrh	r2, [r7, #22]
 800bf6e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800bf70:	69bb      	ldr	r3, [r7, #24]
 800bf72:	89fa      	ldrh	r2, [r7, #14]
 800bf74:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	881b      	ldrh	r3, [r3, #0]
 800bf7a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800bf7e:	d047      	beq.n	800c010 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bf80:	693b      	ldr	r3, [r7, #16]
 800bf82:	881b      	ldrh	r3, [r3, #0]
 800bf84:	4618      	mov	r0, r3
 800bf86:	f7ff fd73 	bl	800ba70 <ptr_to_mem>
 800bf8a:	4602      	mov	r2, r0
 800bf8c:	89fb      	ldrh	r3, [r7, #14]
 800bf8e:	8053      	strh	r3, [r2, #2]
 800bf90:	e03e      	b.n	800c010 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800bf92:	8bfb      	ldrh	r3, [r7, #30]
 800bf94:	f103 0214 	add.w	r2, r3, #20
 800bf98:	8abb      	ldrh	r3, [r7, #20]
 800bf9a:	429a      	cmp	r2, r3
 800bf9c:	d838      	bhi.n	800c010 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bf9e:	8afa      	ldrh	r2, [r7, #22]
 800bfa0:	8bfb      	ldrh	r3, [r7, #30]
 800bfa2:	4413      	add	r3, r2
 800bfa4:	b29b      	uxth	r3, r3
 800bfa6:	3308      	adds	r3, #8
 800bfa8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bfaa:	69bb      	ldr	r3, [r7, #24]
 800bfac:	881b      	ldrh	r3, [r3, #0]
 800bfae:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800bfb2:	d106      	bne.n	800bfc2 <mem_trim+0x192>
 800bfb4:	4b1c      	ldr	r3, [pc, #112]	@ (800c028 <mem_trim+0x1f8>)
 800bfb6:	f240 3216 	movw	r2, #790	@ 0x316
 800bfba:	4920      	ldr	r1, [pc, #128]	@ (800c03c <mem_trim+0x20c>)
 800bfbc:	481c      	ldr	r0, [pc, #112]	@ (800c030 <mem_trim+0x200>)
 800bfbe:	f00a fe37 	bl	8016c30 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800bfc2:	89fb      	ldrh	r3, [r7, #14]
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f7ff fd53 	bl	800ba70 <ptr_to_mem>
 800bfca:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800bfcc:	4b1c      	ldr	r3, [pc, #112]	@ (800c040 <mem_trim+0x210>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	693a      	ldr	r2, [r7, #16]
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	d202      	bcs.n	800bfdc <mem_trim+0x1ac>
      lfree = mem2;
 800bfd6:	4a1a      	ldr	r2, [pc, #104]	@ (800c040 <mem_trim+0x210>)
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800bfdc:	693b      	ldr	r3, [r7, #16]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800bfe2:	69bb      	ldr	r3, [r7, #24]
 800bfe4:	881a      	ldrh	r2, [r3, #0]
 800bfe6:	693b      	ldr	r3, [r7, #16]
 800bfe8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	8afa      	ldrh	r2, [r7, #22]
 800bfee:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800bff0:	69bb      	ldr	r3, [r7, #24]
 800bff2:	89fa      	ldrh	r2, [r7, #14]
 800bff4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	881b      	ldrh	r3, [r3, #0]
 800bffa:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800bffe:	d007      	beq.n	800c010 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	881b      	ldrh	r3, [r3, #0]
 800c004:	4618      	mov	r0, r3
 800c006:	f7ff fd33 	bl	800ba70 <ptr_to_mem>
 800c00a:	4602      	mov	r2, r0
 800c00c:	89fb      	ldrh	r3, [r7, #14]
 800c00e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c010:	4809      	ldr	r0, [pc, #36]	@ (800c038 <mem_trim+0x208>)
 800c012:	f00a fcc2 	bl	801699a <sys_mutex_unlock>
  return rmem;
 800c016:	687b      	ldr	r3, [r7, #4]
}
 800c018:	4618      	mov	r0, r3
 800c01a:	3720      	adds	r7, #32
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}
 800c020:	24004e0c 	.word	0x24004e0c
 800c024:	24004e10 	.word	0x24004e10
 800c028:	080186d4 	.word	0x080186d4
 800c02c:	08018860 	.word	0x08018860
 800c030:	0801871c 	.word	0x0801871c
 800c034:	08018878 	.word	0x08018878
 800c038:	24004e14 	.word	0x24004e14
 800c03c:	08018898 	.word	0x08018898
 800c040:	24004e18 	.word	0x24004e18

0800c044 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b088      	sub	sp, #32
 800c048:	af00      	add	r7, sp, #0
 800c04a:	4603      	mov	r3, r0
 800c04c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c04e:	88fb      	ldrh	r3, [r7, #6]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d101      	bne.n	800c058 <mem_malloc+0x14>
    return NULL;
 800c054:	2300      	movs	r3, #0
 800c056:	e0e2      	b.n	800c21e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c058:	88fb      	ldrh	r3, [r7, #6]
 800c05a:	3303      	adds	r3, #3
 800c05c:	b29b      	uxth	r3, r3
 800c05e:	f023 0303 	bic.w	r3, r3, #3
 800c062:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c064:	8bbb      	ldrh	r3, [r7, #28]
 800c066:	2b0b      	cmp	r3, #11
 800c068:	d801      	bhi.n	800c06e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c06a:	230c      	movs	r3, #12
 800c06c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c06e:	8bbb      	ldrh	r3, [r7, #28]
 800c070:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800c074:	d803      	bhi.n	800c07e <mem_malloc+0x3a>
 800c076:	8bba      	ldrh	r2, [r7, #28]
 800c078:	88fb      	ldrh	r3, [r7, #6]
 800c07a:	429a      	cmp	r2, r3
 800c07c:	d201      	bcs.n	800c082 <mem_malloc+0x3e>
    return NULL;
 800c07e:	2300      	movs	r3, #0
 800c080:	e0cd      	b.n	800c21e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c082:	4869      	ldr	r0, [pc, #420]	@ (800c228 <mem_malloc+0x1e4>)
 800c084:	f00a fc7a 	bl	801697c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c088:	4b68      	ldr	r3, [pc, #416]	@ (800c22c <mem_malloc+0x1e8>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	4618      	mov	r0, r3
 800c08e:	f7ff fd01 	bl	800ba94 <mem_to_ptr>
 800c092:	4603      	mov	r3, r0
 800c094:	83fb      	strh	r3, [r7, #30]
 800c096:	e0b7      	b.n	800c208 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c098:	8bfb      	ldrh	r3, [r7, #30]
 800c09a:	4618      	mov	r0, r3
 800c09c:	f7ff fce8 	bl	800ba70 <ptr_to_mem>
 800c0a0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	791b      	ldrb	r3, [r3, #4]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	f040 80a7 	bne.w	800c1fa <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c0ac:	697b      	ldr	r3, [r7, #20]
 800c0ae:	881b      	ldrh	r3, [r3, #0]
 800c0b0:	461a      	mov	r2, r3
 800c0b2:	8bfb      	ldrh	r3, [r7, #30]
 800c0b4:	1ad3      	subs	r3, r2, r3
 800c0b6:	f1a3 0208 	sub.w	r2, r3, #8
 800c0ba:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	f0c0 809c 	bcc.w	800c1fa <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c0c2:	697b      	ldr	r3, [r7, #20]
 800c0c4:	881b      	ldrh	r3, [r3, #0]
 800c0c6:	461a      	mov	r2, r3
 800c0c8:	8bfb      	ldrh	r3, [r7, #30]
 800c0ca:	1ad3      	subs	r3, r2, r3
 800c0cc:	f1a3 0208 	sub.w	r2, r3, #8
 800c0d0:	8bbb      	ldrh	r3, [r7, #28]
 800c0d2:	3314      	adds	r3, #20
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	d333      	bcc.n	800c140 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c0d8:	8bfa      	ldrh	r2, [r7, #30]
 800c0da:	8bbb      	ldrh	r3, [r7, #28]
 800c0dc:	4413      	add	r3, r2
 800c0de:	b29b      	uxth	r3, r3
 800c0e0:	3308      	adds	r3, #8
 800c0e2:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c0e4:	8a7b      	ldrh	r3, [r7, #18]
 800c0e6:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800c0ea:	d106      	bne.n	800c0fa <mem_malloc+0xb6>
 800c0ec:	4b50      	ldr	r3, [pc, #320]	@ (800c230 <mem_malloc+0x1ec>)
 800c0ee:	f240 3287 	movw	r2, #903	@ 0x387
 800c0f2:	4950      	ldr	r1, [pc, #320]	@ (800c234 <mem_malloc+0x1f0>)
 800c0f4:	4850      	ldr	r0, [pc, #320]	@ (800c238 <mem_malloc+0x1f4>)
 800c0f6:	f00a fd9b 	bl	8016c30 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c0fa:	8a7b      	ldrh	r3, [r7, #18]
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f7ff fcb7 	bl	800ba70 <ptr_to_mem>
 800c102:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	2200      	movs	r2, #0
 800c108:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	881a      	ldrh	r2, [r3, #0]
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	8bfa      	ldrh	r2, [r7, #30]
 800c116:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	8a7a      	ldrh	r2, [r7, #18]
 800c11c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	2201      	movs	r2, #1
 800c122:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	881b      	ldrh	r3, [r3, #0]
 800c128:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800c12c:	d00b      	beq.n	800c146 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	881b      	ldrh	r3, [r3, #0]
 800c132:	4618      	mov	r0, r3
 800c134:	f7ff fc9c 	bl	800ba70 <ptr_to_mem>
 800c138:	4602      	mov	r2, r0
 800c13a:	8a7b      	ldrh	r3, [r7, #18]
 800c13c:	8053      	strh	r3, [r2, #2]
 800c13e:	e002      	b.n	800c146 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	2201      	movs	r2, #1
 800c144:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c146:	4b39      	ldr	r3, [pc, #228]	@ (800c22c <mem_malloc+0x1e8>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	697a      	ldr	r2, [r7, #20]
 800c14c:	429a      	cmp	r2, r3
 800c14e:	d127      	bne.n	800c1a0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800c150:	4b36      	ldr	r3, [pc, #216]	@ (800c22c <mem_malloc+0x1e8>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c156:	e005      	b.n	800c164 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c158:	69bb      	ldr	r3, [r7, #24]
 800c15a:	881b      	ldrh	r3, [r3, #0]
 800c15c:	4618      	mov	r0, r3
 800c15e:	f7ff fc87 	bl	800ba70 <ptr_to_mem>
 800c162:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c164:	69bb      	ldr	r3, [r7, #24]
 800c166:	791b      	ldrb	r3, [r3, #4]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d004      	beq.n	800c176 <mem_malloc+0x132>
 800c16c:	4b33      	ldr	r3, [pc, #204]	@ (800c23c <mem_malloc+0x1f8>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	69ba      	ldr	r2, [r7, #24]
 800c172:	429a      	cmp	r2, r3
 800c174:	d1f0      	bne.n	800c158 <mem_malloc+0x114>
          }
          lfree = cur;
 800c176:	4a2d      	ldr	r2, [pc, #180]	@ (800c22c <mem_malloc+0x1e8>)
 800c178:	69bb      	ldr	r3, [r7, #24]
 800c17a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c17c:	4b2b      	ldr	r3, [pc, #172]	@ (800c22c <mem_malloc+0x1e8>)
 800c17e:	681a      	ldr	r2, [r3, #0]
 800c180:	4b2e      	ldr	r3, [pc, #184]	@ (800c23c <mem_malloc+0x1f8>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	429a      	cmp	r2, r3
 800c186:	d00b      	beq.n	800c1a0 <mem_malloc+0x15c>
 800c188:	4b28      	ldr	r3, [pc, #160]	@ (800c22c <mem_malloc+0x1e8>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	791b      	ldrb	r3, [r3, #4]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d006      	beq.n	800c1a0 <mem_malloc+0x15c>
 800c192:	4b27      	ldr	r3, [pc, #156]	@ (800c230 <mem_malloc+0x1ec>)
 800c194:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800c198:	4929      	ldr	r1, [pc, #164]	@ (800c240 <mem_malloc+0x1fc>)
 800c19a:	4827      	ldr	r0, [pc, #156]	@ (800c238 <mem_malloc+0x1f4>)
 800c19c:	f00a fd48 	bl	8016c30 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c1a0:	4821      	ldr	r0, [pc, #132]	@ (800c228 <mem_malloc+0x1e4>)
 800c1a2:	f00a fbfa 	bl	801699a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c1a6:	8bba      	ldrh	r2, [r7, #28]
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	4413      	add	r3, r2
 800c1ac:	3308      	adds	r3, #8
 800c1ae:	4a23      	ldr	r2, [pc, #140]	@ (800c23c <mem_malloc+0x1f8>)
 800c1b0:	6812      	ldr	r2, [r2, #0]
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	d906      	bls.n	800c1c4 <mem_malloc+0x180>
 800c1b6:	4b1e      	ldr	r3, [pc, #120]	@ (800c230 <mem_malloc+0x1ec>)
 800c1b8:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800c1bc:	4921      	ldr	r1, [pc, #132]	@ (800c244 <mem_malloc+0x200>)
 800c1be:	481e      	ldr	r0, [pc, #120]	@ (800c238 <mem_malloc+0x1f4>)
 800c1c0:	f00a fd36 	bl	8016c30 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	f003 0303 	and.w	r3, r3, #3
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d006      	beq.n	800c1dc <mem_malloc+0x198>
 800c1ce:	4b18      	ldr	r3, [pc, #96]	@ (800c230 <mem_malloc+0x1ec>)
 800c1d0:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800c1d4:	491c      	ldr	r1, [pc, #112]	@ (800c248 <mem_malloc+0x204>)
 800c1d6:	4818      	ldr	r0, [pc, #96]	@ (800c238 <mem_malloc+0x1f4>)
 800c1d8:	f00a fd2a 	bl	8016c30 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	f003 0303 	and.w	r3, r3, #3
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d006      	beq.n	800c1f4 <mem_malloc+0x1b0>
 800c1e6:	4b12      	ldr	r3, [pc, #72]	@ (800c230 <mem_malloc+0x1ec>)
 800c1e8:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800c1ec:	4917      	ldr	r1, [pc, #92]	@ (800c24c <mem_malloc+0x208>)
 800c1ee:	4812      	ldr	r0, [pc, #72]	@ (800c238 <mem_malloc+0x1f4>)
 800c1f0:	f00a fd1e 	bl	8016c30 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	3308      	adds	r3, #8
 800c1f8:	e011      	b.n	800c21e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800c1fa:	8bfb      	ldrh	r3, [r7, #30]
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f7ff fc37 	bl	800ba70 <ptr_to_mem>
 800c202:	4603      	mov	r3, r0
 800c204:	881b      	ldrh	r3, [r3, #0]
 800c206:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c208:	8bfa      	ldrh	r2, [r7, #30]
 800c20a:	8bbb      	ldrh	r3, [r7, #28]
 800c20c:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 800c210:	429a      	cmp	r2, r3
 800c212:	f4ff af41 	bcc.w	800c098 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c216:	4804      	ldr	r0, [pc, #16]	@ (800c228 <mem_malloc+0x1e4>)
 800c218:	f00a fbbf 	bl	801699a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c21c:	2300      	movs	r3, #0
}
 800c21e:	4618      	mov	r0, r3
 800c220:	3720      	adds	r7, #32
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}
 800c226:	bf00      	nop
 800c228:	24004e14 	.word	0x24004e14
 800c22c:	24004e18 	.word	0x24004e18
 800c230:	080186d4 	.word	0x080186d4
 800c234:	08018898 	.word	0x08018898
 800c238:	0801871c 	.word	0x0801871c
 800c23c:	24004e10 	.word	0x24004e10
 800c240:	080188ac 	.word	0x080188ac
 800c244:	080188c8 	.word	0x080188c8
 800c248:	080188f8 	.word	0x080188f8
 800c24c:	08018928 	.word	0x08018928

0800c250 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c250:	b480      	push	{r7}
 800c252:	b085      	sub	sp, #20
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	689b      	ldr	r3, [r3, #8]
 800c25c:	2200      	movs	r2, #0
 800c25e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	685b      	ldr	r3, [r3, #4]
 800c264:	3303      	adds	r3, #3
 800c266:	f023 0303 	bic.w	r3, r3, #3
 800c26a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c26c:	2300      	movs	r3, #0
 800c26e:	60fb      	str	r3, [r7, #12]
 800c270:	e011      	b.n	800c296 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	689b      	ldr	r3, [r3, #8]
 800c276:	681a      	ldr	r2, [r3, #0]
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	689b      	ldr	r3, [r3, #8]
 800c280:	68ba      	ldr	r2, [r7, #8]
 800c282:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	881b      	ldrh	r3, [r3, #0]
 800c288:	461a      	mov	r2, r3
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	4413      	add	r3, r2
 800c28e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	3301      	adds	r3, #1
 800c294:	60fb      	str	r3, [r7, #12]
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	885b      	ldrh	r3, [r3, #2]
 800c29a:	461a      	mov	r2, r3
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	dbe7      	blt.n	800c272 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c2a2:	bf00      	nop
 800c2a4:	bf00      	nop
 800c2a6:	3714      	adds	r7, #20
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ae:	4770      	bx	lr

0800c2b0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b082      	sub	sp, #8
 800c2b4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	80fb      	strh	r3, [r7, #6]
 800c2ba:	e009      	b.n	800c2d0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c2bc:	88fb      	ldrh	r3, [r7, #6]
 800c2be:	4a08      	ldr	r2, [pc, #32]	@ (800c2e0 <memp_init+0x30>)
 800c2c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f7ff ffc3 	bl	800c250 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c2ca:	88fb      	ldrh	r3, [r7, #6]
 800c2cc:	3301      	adds	r3, #1
 800c2ce:	80fb      	strh	r3, [r7, #6]
 800c2d0:	88fb      	ldrh	r3, [r7, #6]
 800c2d2:	2b0c      	cmp	r3, #12
 800c2d4:	d9f2      	bls.n	800c2bc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c2d6:	bf00      	nop
 800c2d8:	bf00      	nop
 800c2da:	3708      	adds	r7, #8
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}
 800c2e0:	0801b15c 	.word	0x0801b15c

0800c2e4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b084      	sub	sp, #16
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c2ec:	f00a fb82 	bl	80169f4 <sys_arch_protect>
 800c2f0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	689b      	ldr	r3, [r3, #8]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d015      	beq.n	800c32c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	689b      	ldr	r3, [r3, #8]
 800c304:	68ba      	ldr	r2, [r7, #8]
 800c306:	6812      	ldr	r2, [r2, #0]
 800c308:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	f003 0303 	and.w	r3, r3, #3
 800c310:	2b00      	cmp	r3, #0
 800c312:	d006      	beq.n	800c322 <do_memp_malloc_pool+0x3e>
 800c314:	4b09      	ldr	r3, [pc, #36]	@ (800c33c <do_memp_malloc_pool+0x58>)
 800c316:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800c31a:	4909      	ldr	r1, [pc, #36]	@ (800c340 <do_memp_malloc_pool+0x5c>)
 800c31c:	4809      	ldr	r0, [pc, #36]	@ (800c344 <do_memp_malloc_pool+0x60>)
 800c31e:	f00a fc87 	bl	8016c30 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c322:	68f8      	ldr	r0, [r7, #12]
 800c324:	f00a fb74 	bl	8016a10 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	e003      	b.n	800c334 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c32c:	68f8      	ldr	r0, [r7, #12]
 800c32e:	f00a fb6f 	bl	8016a10 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c332:	2300      	movs	r3, #0
}
 800c334:	4618      	mov	r0, r3
 800c336:	3710      	adds	r7, #16
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}
 800c33c:	0801894c 	.word	0x0801894c
 800c340:	0801897c 	.word	0x0801897c
 800c344:	080189a0 	.word	0x080189a0

0800c348 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b082      	sub	sp, #8
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d106      	bne.n	800c364 <memp_malloc_pool+0x1c>
 800c356:	4b0a      	ldr	r3, [pc, #40]	@ (800c380 <memp_malloc_pool+0x38>)
 800c358:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800c35c:	4909      	ldr	r1, [pc, #36]	@ (800c384 <memp_malloc_pool+0x3c>)
 800c35e:	480a      	ldr	r0, [pc, #40]	@ (800c388 <memp_malloc_pool+0x40>)
 800c360:	f00a fc66 	bl	8016c30 <iprintf>
  if (desc == NULL) {
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d101      	bne.n	800c36e <memp_malloc_pool+0x26>
    return NULL;
 800c36a:	2300      	movs	r3, #0
 800c36c:	e003      	b.n	800c376 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f7ff ffb8 	bl	800c2e4 <do_memp_malloc_pool>
 800c374:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800c376:	4618      	mov	r0, r3
 800c378:	3708      	adds	r7, #8
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}
 800c37e:	bf00      	nop
 800c380:	0801894c 	.word	0x0801894c
 800c384:	080189c8 	.word	0x080189c8
 800c388:	080189a0 	.word	0x080189a0

0800c38c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b084      	sub	sp, #16
 800c390:	af00      	add	r7, sp, #0
 800c392:	4603      	mov	r3, r0
 800c394:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c396:	79fb      	ldrb	r3, [r7, #7]
 800c398:	2b0c      	cmp	r3, #12
 800c39a:	d908      	bls.n	800c3ae <memp_malloc+0x22>
 800c39c:	4b0a      	ldr	r3, [pc, #40]	@ (800c3c8 <memp_malloc+0x3c>)
 800c39e:	f240 1257 	movw	r2, #343	@ 0x157
 800c3a2:	490a      	ldr	r1, [pc, #40]	@ (800c3cc <memp_malloc+0x40>)
 800c3a4:	480a      	ldr	r0, [pc, #40]	@ (800c3d0 <memp_malloc+0x44>)
 800c3a6:	f00a fc43 	bl	8016c30 <iprintf>
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	e008      	b.n	800c3c0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c3ae:	79fb      	ldrb	r3, [r7, #7]
 800c3b0:	4a08      	ldr	r2, [pc, #32]	@ (800c3d4 <memp_malloc+0x48>)
 800c3b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f7ff ff94 	bl	800c2e4 <do_memp_malloc_pool>
 800c3bc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c3be:	68fb      	ldr	r3, [r7, #12]
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	3710      	adds	r7, #16
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}
 800c3c8:	0801894c 	.word	0x0801894c
 800c3cc:	080189dc 	.word	0x080189dc
 800c3d0:	080189a0 	.word	0x080189a0
 800c3d4:	0801b15c 	.word	0x0801b15c

0800c3d8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b084      	sub	sp, #16
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	f003 0303 	and.w	r3, r3, #3
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d006      	beq.n	800c3fa <do_memp_free_pool+0x22>
 800c3ec:	4b0d      	ldr	r3, [pc, #52]	@ (800c424 <do_memp_free_pool+0x4c>)
 800c3ee:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800c3f2:	490d      	ldr	r1, [pc, #52]	@ (800c428 <do_memp_free_pool+0x50>)
 800c3f4:	480d      	ldr	r0, [pc, #52]	@ (800c42c <do_memp_free_pool+0x54>)
 800c3f6:	f00a fc1b 	bl	8016c30 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c3fe:	f00a faf9 	bl	80169f4 <sys_arch_protect>
 800c402:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	689b      	ldr	r3, [r3, #8]
 800c408:	681a      	ldr	r2, [r3, #0]
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	689b      	ldr	r3, [r3, #8]
 800c412:	68fa      	ldr	r2, [r7, #12]
 800c414:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c416:	68b8      	ldr	r0, [r7, #8]
 800c418:	f00a fafa 	bl	8016a10 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c41c:	bf00      	nop
 800c41e:	3710      	adds	r7, #16
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}
 800c424:	0801894c 	.word	0x0801894c
 800c428:	080189fc 	.word	0x080189fc
 800c42c:	080189a0 	.word	0x080189a0

0800c430 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b082      	sub	sp, #8
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
 800c438:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d106      	bne.n	800c44e <memp_free_pool+0x1e>
 800c440:	4b0a      	ldr	r3, [pc, #40]	@ (800c46c <memp_free_pool+0x3c>)
 800c442:	f240 1295 	movw	r2, #405	@ 0x195
 800c446:	490a      	ldr	r1, [pc, #40]	@ (800c470 <memp_free_pool+0x40>)
 800c448:	480a      	ldr	r0, [pc, #40]	@ (800c474 <memp_free_pool+0x44>)
 800c44a:	f00a fbf1 	bl	8016c30 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d007      	beq.n	800c464 <memp_free_pool+0x34>
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d004      	beq.n	800c464 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c45a:	6839      	ldr	r1, [r7, #0]
 800c45c:	6878      	ldr	r0, [r7, #4]
 800c45e:	f7ff ffbb 	bl	800c3d8 <do_memp_free_pool>
 800c462:	e000      	b.n	800c466 <memp_free_pool+0x36>
    return;
 800c464:	bf00      	nop
}
 800c466:	3708      	adds	r7, #8
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}
 800c46c:	0801894c 	.word	0x0801894c
 800c470:	080189c8 	.word	0x080189c8
 800c474:	080189a0 	.word	0x080189a0

0800c478 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b082      	sub	sp, #8
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	4603      	mov	r3, r0
 800c480:	6039      	str	r1, [r7, #0]
 800c482:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c484:	79fb      	ldrb	r3, [r7, #7]
 800c486:	2b0c      	cmp	r3, #12
 800c488:	d907      	bls.n	800c49a <memp_free+0x22>
 800c48a:	4b0c      	ldr	r3, [pc, #48]	@ (800c4bc <memp_free+0x44>)
 800c48c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800c490:	490b      	ldr	r1, [pc, #44]	@ (800c4c0 <memp_free+0x48>)
 800c492:	480c      	ldr	r0, [pc, #48]	@ (800c4c4 <memp_free+0x4c>)
 800c494:	f00a fbcc 	bl	8016c30 <iprintf>
 800c498:	e00c      	b.n	800c4b4 <memp_free+0x3c>

  if (mem == NULL) {
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d008      	beq.n	800c4b2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c4a0:	79fb      	ldrb	r3, [r7, #7]
 800c4a2:	4a09      	ldr	r2, [pc, #36]	@ (800c4c8 <memp_free+0x50>)
 800c4a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4a8:	6839      	ldr	r1, [r7, #0]
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f7ff ff94 	bl	800c3d8 <do_memp_free_pool>
 800c4b0:	e000      	b.n	800c4b4 <memp_free+0x3c>
    return;
 800c4b2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c4b4:	3708      	adds	r7, #8
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}
 800c4ba:	bf00      	nop
 800c4bc:	0801894c 	.word	0x0801894c
 800c4c0:	08018a1c 	.word	0x08018a1c
 800c4c4:	080189a0 	.word	0x080189a0
 800c4c8:	0801b15c 	.word	0x0801b15c

0800c4cc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c4cc:	b480      	push	{r7}
 800c4ce:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c4d0:	bf00      	nop
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d8:	4770      	bx	lr
	...

0800c4dc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b086      	sub	sp, #24
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	60f8      	str	r0, [r7, #12]
 800c4e4:	60b9      	str	r1, [r7, #8]
 800c4e6:	607a      	str	r2, [r7, #4]
 800c4e8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d108      	bne.n	800c502 <netif_add+0x26>
 800c4f0:	4b57      	ldr	r3, [pc, #348]	@ (800c650 <netif_add+0x174>)
 800c4f2:	f240 1227 	movw	r2, #295	@ 0x127
 800c4f6:	4957      	ldr	r1, [pc, #348]	@ (800c654 <netif_add+0x178>)
 800c4f8:	4857      	ldr	r0, [pc, #348]	@ (800c658 <netif_add+0x17c>)
 800c4fa:	f00a fb99 	bl	8016c30 <iprintf>
 800c4fe:	2300      	movs	r3, #0
 800c500:	e0a2      	b.n	800c648 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c504:	2b00      	cmp	r3, #0
 800c506:	d108      	bne.n	800c51a <netif_add+0x3e>
 800c508:	4b51      	ldr	r3, [pc, #324]	@ (800c650 <netif_add+0x174>)
 800c50a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800c50e:	4953      	ldr	r1, [pc, #332]	@ (800c65c <netif_add+0x180>)
 800c510:	4851      	ldr	r0, [pc, #324]	@ (800c658 <netif_add+0x17c>)
 800c512:	f00a fb8d 	bl	8016c30 <iprintf>
 800c516:	2300      	movs	r3, #0
 800c518:	e096      	b.n	800c648 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d101      	bne.n	800c524 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c520:	4b4f      	ldr	r3, [pc, #316]	@ (800c660 <netif_add+0x184>)
 800c522:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d101      	bne.n	800c52e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c52a:	4b4d      	ldr	r3, [pc, #308]	@ (800c660 <netif_add+0x184>)
 800c52c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d101      	bne.n	800c538 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c534:	4b4a      	ldr	r3, [pc, #296]	@ (800c660 <netif_add+0x184>)
 800c536:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	2200      	movs	r2, #0
 800c53c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	2200      	movs	r2, #0
 800c542:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	2200      	movs	r2, #0
 800c548:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	4a45      	ldr	r2, [pc, #276]	@ (800c664 <netif_add+0x188>)
 800c54e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	2200      	movs	r2, #0
 800c554:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	2200      	movs	r2, #0
 800c55a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	2200      	movs	r2, #0
 800c562:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	6a3a      	ldr	r2, [r7, #32]
 800c568:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c56a:	4b3f      	ldr	r3, [pc, #252]	@ (800c668 <netif_add+0x18c>)
 800c56c:	781a      	ldrb	r2, [r3, #0]
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c578:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	687a      	ldr	r2, [r7, #4]
 800c57e:	68b9      	ldr	r1, [r7, #8]
 800c580:	68f8      	ldr	r0, [r7, #12]
 800c582:	f000 f913 	bl	800c7ac <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c588:	68f8      	ldr	r0, [r7, #12]
 800c58a:	4798      	blx	r3
 800c58c:	4603      	mov	r3, r0
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d001      	beq.n	800c596 <netif_add+0xba>
    return NULL;
 800c592:	2300      	movs	r3, #0
 800c594:	e058      	b.n	800c648 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c59c:	2bff      	cmp	r3, #255	@ 0xff
 800c59e:	d103      	bne.n	800c5a8 <netif_add+0xcc>
        netif->num = 0;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c5ac:	4b2f      	ldr	r3, [pc, #188]	@ (800c66c <netif_add+0x190>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	617b      	str	r3, [r7, #20]
 800c5b2:	e02b      	b.n	800c60c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c5b4:	697a      	ldr	r2, [r7, #20]
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	429a      	cmp	r2, r3
 800c5ba:	d106      	bne.n	800c5ca <netif_add+0xee>
 800c5bc:	4b24      	ldr	r3, [pc, #144]	@ (800c650 <netif_add+0x174>)
 800c5be:	f240 128b 	movw	r2, #395	@ 0x18b
 800c5c2:	492b      	ldr	r1, [pc, #172]	@ (800c670 <netif_add+0x194>)
 800c5c4:	4824      	ldr	r0, [pc, #144]	@ (800c658 <netif_add+0x17c>)
 800c5c6:	f00a fb33 	bl	8016c30 <iprintf>
        num_netifs++;
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	3301      	adds	r3, #1
 800c5ce:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c5d0:	693b      	ldr	r3, [r7, #16]
 800c5d2:	2bff      	cmp	r3, #255	@ 0xff
 800c5d4:	dd06      	ble.n	800c5e4 <netif_add+0x108>
 800c5d6:	4b1e      	ldr	r3, [pc, #120]	@ (800c650 <netif_add+0x174>)
 800c5d8:	f240 128d 	movw	r2, #397	@ 0x18d
 800c5dc:	4925      	ldr	r1, [pc, #148]	@ (800c674 <netif_add+0x198>)
 800c5de:	481e      	ldr	r0, [pc, #120]	@ (800c658 <netif_add+0x17c>)
 800c5e0:	f00a fb26 	bl	8016c30 <iprintf>
        if (netif2->num == netif->num) {
 800c5e4:	697b      	ldr	r3, [r7, #20]
 800c5e6:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d108      	bne.n	800c606 <netif_add+0x12a>
          netif->num++;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c5fa:	3301      	adds	r3, #1
 800c5fc:	b2da      	uxtb	r2, r3
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800c604:	e005      	b.n	800c612 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	617b      	str	r3, [r7, #20]
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d1d0      	bne.n	800c5b4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d1be      	bne.n	800c596 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c61e:	2bfe      	cmp	r3, #254	@ 0xfe
 800c620:	d103      	bne.n	800c62a <netif_add+0x14e>
    netif_num = 0;
 800c622:	4b11      	ldr	r3, [pc, #68]	@ (800c668 <netif_add+0x18c>)
 800c624:	2200      	movs	r2, #0
 800c626:	701a      	strb	r2, [r3, #0]
 800c628:	e006      	b.n	800c638 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c630:	3301      	adds	r3, #1
 800c632:	b2da      	uxtb	r2, r3
 800c634:	4b0c      	ldr	r3, [pc, #48]	@ (800c668 <netif_add+0x18c>)
 800c636:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c638:	4b0c      	ldr	r3, [pc, #48]	@ (800c66c <netif_add+0x190>)
 800c63a:	681a      	ldr	r2, [r3, #0]
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c640:	4a0a      	ldr	r2, [pc, #40]	@ (800c66c <netif_add+0x190>)
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c646:	68fb      	ldr	r3, [r7, #12]
}
 800c648:	4618      	mov	r0, r3
 800c64a:	3718      	adds	r7, #24
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}
 800c650:	08018a38 	.word	0x08018a38
 800c654:	08018acc 	.word	0x08018acc
 800c658:	08018a88 	.word	0x08018a88
 800c65c:	08018ae8 	.word	0x08018ae8
 800c660:	0801b1d0 	.word	0x0801b1d0
 800c664:	0800ca87 	.word	0x0800ca87
 800c668:	24007f00 	.word	0x24007f00
 800c66c:	24007ef8 	.word	0x24007ef8
 800c670:	08018b0c 	.word	0x08018b0c
 800c674:	08018b20 	.word	0x08018b20

0800c678 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b082      	sub	sp, #8
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
 800c680:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c682:	6839      	ldr	r1, [r7, #0]
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f002 fe51 	bl	800f32c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c68a:	6839      	ldr	r1, [r7, #0]
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f007 fcfd 	bl	801408c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c692:	bf00      	nop
 800c694:	3708      	adds	r7, #8
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}
	...

0800c69c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b086      	sub	sp, #24
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	60f8      	str	r0, [r7, #12]
 800c6a4:	60b9      	str	r1, [r7, #8]
 800c6a6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d106      	bne.n	800c6bc <netif_do_set_ipaddr+0x20>
 800c6ae:	4b1d      	ldr	r3, [pc, #116]	@ (800c724 <netif_do_set_ipaddr+0x88>)
 800c6b0:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800c6b4:	491c      	ldr	r1, [pc, #112]	@ (800c728 <netif_do_set_ipaddr+0x8c>)
 800c6b6:	481d      	ldr	r0, [pc, #116]	@ (800c72c <netif_do_set_ipaddr+0x90>)
 800c6b8:	f00a faba 	bl	8016c30 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d106      	bne.n	800c6d0 <netif_do_set_ipaddr+0x34>
 800c6c2:	4b18      	ldr	r3, [pc, #96]	@ (800c724 <netif_do_set_ipaddr+0x88>)
 800c6c4:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800c6c8:	4917      	ldr	r1, [pc, #92]	@ (800c728 <netif_do_set_ipaddr+0x8c>)
 800c6ca:	4818      	ldr	r0, [pc, #96]	@ (800c72c <netif_do_set_ipaddr+0x90>)
 800c6cc:	f00a fab0 	bl	8016c30 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	681a      	ldr	r2, [r3, #0]
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	3304      	adds	r3, #4
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	429a      	cmp	r2, r3
 800c6dc:	d01c      	beq.n	800c718 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	3304      	adds	r3, #4
 800c6e8:	681a      	ldr	r2, [r3, #0]
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c6ee:	f107 0314 	add.w	r3, r7, #20
 800c6f2:	4619      	mov	r1, r3
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f7ff ffbf 	bl	800c678 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d002      	beq.n	800c706 <netif_do_set_ipaddr+0x6a>
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	e000      	b.n	800c708 <netif_do_set_ipaddr+0x6c>
 800c706:	2300      	movs	r3, #0
 800c708:	68fa      	ldr	r2, [r7, #12]
 800c70a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c70c:	2101      	movs	r1, #1
 800c70e:	68f8      	ldr	r0, [r7, #12]
 800c710:	f000 f8d2 	bl	800c8b8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c714:	2301      	movs	r3, #1
 800c716:	e000      	b.n	800c71a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c718:	2300      	movs	r3, #0
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3718      	adds	r7, #24
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}
 800c722:	bf00      	nop
 800c724:	08018a38 	.word	0x08018a38
 800c728:	08018b50 	.word	0x08018b50
 800c72c:	08018a88 	.word	0x08018a88

0800c730 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c730:	b480      	push	{r7}
 800c732:	b085      	sub	sp, #20
 800c734:	af00      	add	r7, sp, #0
 800c736:	60f8      	str	r0, [r7, #12]
 800c738:	60b9      	str	r1, [r7, #8]
 800c73a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	681a      	ldr	r2, [r3, #0]
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	3308      	adds	r3, #8
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	429a      	cmp	r2, r3
 800c748:	d00a      	beq.n	800c760 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d002      	beq.n	800c756 <netif_do_set_netmask+0x26>
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	e000      	b.n	800c758 <netif_do_set_netmask+0x28>
 800c756:	2300      	movs	r3, #0
 800c758:	68fa      	ldr	r2, [r7, #12]
 800c75a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c75c:	2301      	movs	r3, #1
 800c75e:	e000      	b.n	800c762 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c760:	2300      	movs	r3, #0
}
 800c762:	4618      	mov	r0, r3
 800c764:	3714      	adds	r7, #20
 800c766:	46bd      	mov	sp, r7
 800c768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76c:	4770      	bx	lr

0800c76e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c76e:	b480      	push	{r7}
 800c770:	b085      	sub	sp, #20
 800c772:	af00      	add	r7, sp, #0
 800c774:	60f8      	str	r0, [r7, #12]
 800c776:	60b9      	str	r1, [r7, #8]
 800c778:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	681a      	ldr	r2, [r3, #0]
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	330c      	adds	r3, #12
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	429a      	cmp	r2, r3
 800c786:	d00a      	beq.n	800c79e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d002      	beq.n	800c794 <netif_do_set_gw+0x26>
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	e000      	b.n	800c796 <netif_do_set_gw+0x28>
 800c794:	2300      	movs	r3, #0
 800c796:	68fa      	ldr	r2, [r7, #12]
 800c798:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c79a:	2301      	movs	r3, #1
 800c79c:	e000      	b.n	800c7a0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c79e:	2300      	movs	r3, #0
}
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	3714      	adds	r7, #20
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7aa:	4770      	bx	lr

0800c7ac <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b088      	sub	sp, #32
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	60f8      	str	r0, [r7, #12]
 800c7b4:	60b9      	str	r1, [r7, #8]
 800c7b6:	607a      	str	r2, [r7, #4]
 800c7b8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d101      	bne.n	800c7cc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c7c8:	4b1c      	ldr	r3, [pc, #112]	@ (800c83c <netif_set_addr+0x90>)
 800c7ca:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d101      	bne.n	800c7d6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c7d2:	4b1a      	ldr	r3, [pc, #104]	@ (800c83c <netif_set_addr+0x90>)
 800c7d4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d101      	bne.n	800c7e0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c7dc:	4b17      	ldr	r3, [pc, #92]	@ (800c83c <netif_set_addr+0x90>)
 800c7de:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d003      	beq.n	800c7ee <netif_set_addr+0x42>
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d101      	bne.n	800c7f2 <netif_set_addr+0x46>
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	e000      	b.n	800c7f4 <netif_set_addr+0x48>
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c7f6:	697b      	ldr	r3, [r7, #20]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d006      	beq.n	800c80a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c7fc:	f107 0310 	add.w	r3, r7, #16
 800c800:	461a      	mov	r2, r3
 800c802:	68b9      	ldr	r1, [r7, #8]
 800c804:	68f8      	ldr	r0, [r7, #12]
 800c806:	f7ff ff49 	bl	800c69c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c80a:	69fa      	ldr	r2, [r7, #28]
 800c80c:	6879      	ldr	r1, [r7, #4]
 800c80e:	68f8      	ldr	r0, [r7, #12]
 800c810:	f7ff ff8e 	bl	800c730 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c814:	69ba      	ldr	r2, [r7, #24]
 800c816:	6839      	ldr	r1, [r7, #0]
 800c818:	68f8      	ldr	r0, [r7, #12]
 800c81a:	f7ff ffa8 	bl	800c76e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d106      	bne.n	800c832 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c824:	f107 0310 	add.w	r3, r7, #16
 800c828:	461a      	mov	r2, r3
 800c82a:	68b9      	ldr	r1, [r7, #8]
 800c82c:	68f8      	ldr	r0, [r7, #12]
 800c82e:	f7ff ff35 	bl	800c69c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c832:	bf00      	nop
 800c834:	3720      	adds	r7, #32
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}
 800c83a:	bf00      	nop
 800c83c:	0801b1d0 	.word	0x0801b1d0

0800c840 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c840:	b480      	push	{r7}
 800c842:	b083      	sub	sp, #12
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c848:	4a04      	ldr	r2, [pc, #16]	@ (800c85c <netif_set_default+0x1c>)
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c84e:	bf00      	nop
 800c850:	370c      	adds	r7, #12
 800c852:	46bd      	mov	sp, r7
 800c854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c858:	4770      	bx	lr
 800c85a:	bf00      	nop
 800c85c:	24007efc 	.word	0x24007efc

0800c860 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b082      	sub	sp, #8
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d107      	bne.n	800c87e <netif_set_up+0x1e>
 800c86e:	4b0f      	ldr	r3, [pc, #60]	@ (800c8ac <netif_set_up+0x4c>)
 800c870:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800c874:	490e      	ldr	r1, [pc, #56]	@ (800c8b0 <netif_set_up+0x50>)
 800c876:	480f      	ldr	r0, [pc, #60]	@ (800c8b4 <netif_set_up+0x54>)
 800c878:	f00a f9da 	bl	8016c30 <iprintf>
 800c87c:	e013      	b.n	800c8a6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c884:	f003 0301 	and.w	r3, r3, #1
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d10c      	bne.n	800c8a6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c892:	f043 0301 	orr.w	r3, r3, #1
 800c896:	b2da      	uxtb	r2, r3
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c89e:	2103      	movs	r1, #3
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f000 f809 	bl	800c8b8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c8a6:	3708      	adds	r7, #8
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}
 800c8ac:	08018a38 	.word	0x08018a38
 800c8b0:	08018bc0 	.word	0x08018bc0
 800c8b4:	08018a88 	.word	0x08018a88

0800c8b8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b082      	sub	sp, #8
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
 800c8c0:	460b      	mov	r3, r1
 800c8c2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d106      	bne.n	800c8d8 <netif_issue_reports+0x20>
 800c8ca:	4b18      	ldr	r3, [pc, #96]	@ (800c92c <netif_issue_reports+0x74>)
 800c8cc:	f240 326d 	movw	r2, #877	@ 0x36d
 800c8d0:	4917      	ldr	r1, [pc, #92]	@ (800c930 <netif_issue_reports+0x78>)
 800c8d2:	4818      	ldr	r0, [pc, #96]	@ (800c934 <netif_issue_reports+0x7c>)
 800c8d4:	f00a f9ac 	bl	8016c30 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c8de:	f003 0304 	and.w	r3, r3, #4
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d01e      	beq.n	800c924 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c8ec:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d017      	beq.n	800c924 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c8f4:	78fb      	ldrb	r3, [r7, #3]
 800c8f6:	f003 0301 	and.w	r3, r3, #1
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d013      	beq.n	800c926 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	3304      	adds	r3, #4
 800c902:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c904:	2b00      	cmp	r3, #0
 800c906:	d00e      	beq.n	800c926 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c90e:	f003 0308 	and.w	r3, r3, #8
 800c912:	2b00      	cmp	r3, #0
 800c914:	d007      	beq.n	800c926 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	3304      	adds	r3, #4
 800c91a:	4619      	mov	r1, r3
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f008 fb1f 	bl	8014f60 <etharp_request>
 800c922:	e000      	b.n	800c926 <netif_issue_reports+0x6e>
    return;
 800c924:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c926:	3708      	adds	r7, #8
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}
 800c92c:	08018a38 	.word	0x08018a38
 800c930:	08018bdc 	.word	0x08018bdc
 800c934:	08018a88 	.word	0x08018a88

0800c938 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b082      	sub	sp, #8
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d107      	bne.n	800c956 <netif_set_down+0x1e>
 800c946:	4b12      	ldr	r3, [pc, #72]	@ (800c990 <netif_set_down+0x58>)
 800c948:	f240 329b 	movw	r2, #923	@ 0x39b
 800c94c:	4911      	ldr	r1, [pc, #68]	@ (800c994 <netif_set_down+0x5c>)
 800c94e:	4812      	ldr	r0, [pc, #72]	@ (800c998 <netif_set_down+0x60>)
 800c950:	f00a f96e 	bl	8016c30 <iprintf>
 800c954:	e019      	b.n	800c98a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c95c:	f003 0301 	and.w	r3, r3, #1
 800c960:	2b00      	cmp	r3, #0
 800c962:	d012      	beq.n	800c98a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c96a:	f023 0301 	bic.w	r3, r3, #1
 800c96e:	b2da      	uxtb	r2, r3
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c97c:	f003 0308 	and.w	r3, r3, #8
 800c980:	2b00      	cmp	r3, #0
 800c982:	d002      	beq.n	800c98a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f007 fea9 	bl	80146dc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c98a:	3708      	adds	r7, #8
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}
 800c990:	08018a38 	.word	0x08018a38
 800c994:	08018c00 	.word	0x08018c00
 800c998:	08018a88 	.word	0x08018a88

0800c99c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b082      	sub	sp, #8
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d107      	bne.n	800c9ba <netif_set_link_up+0x1e>
 800c9aa:	4b13      	ldr	r3, [pc, #76]	@ (800c9f8 <netif_set_link_up+0x5c>)
 800c9ac:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800c9b0:	4912      	ldr	r1, [pc, #72]	@ (800c9fc <netif_set_link_up+0x60>)
 800c9b2:	4813      	ldr	r0, [pc, #76]	@ (800ca00 <netif_set_link_up+0x64>)
 800c9b4:	f00a f93c 	bl	8016c30 <iprintf>
 800c9b8:	e01b      	b.n	800c9f2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c9c0:	f003 0304 	and.w	r3, r3, #4
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d114      	bne.n	800c9f2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c9ce:	f043 0304 	orr.w	r3, r3, #4
 800c9d2:	b2da      	uxtb	r2, r3
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c9da:	2103      	movs	r1, #3
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f7ff ff6b 	bl	800c8b8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	69db      	ldr	r3, [r3, #28]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d003      	beq.n	800c9f2 <netif_set_link_up+0x56>
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	69db      	ldr	r3, [r3, #28]
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c9f2:	3708      	adds	r7, #8
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}
 800c9f8:	08018a38 	.word	0x08018a38
 800c9fc:	08018c20 	.word	0x08018c20
 800ca00:	08018a88 	.word	0x08018a88

0800ca04 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b082      	sub	sp, #8
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d107      	bne.n	800ca22 <netif_set_link_down+0x1e>
 800ca12:	4b11      	ldr	r3, [pc, #68]	@ (800ca58 <netif_set_link_down+0x54>)
 800ca14:	f240 4206 	movw	r2, #1030	@ 0x406
 800ca18:	4910      	ldr	r1, [pc, #64]	@ (800ca5c <netif_set_link_down+0x58>)
 800ca1a:	4811      	ldr	r0, [pc, #68]	@ (800ca60 <netif_set_link_down+0x5c>)
 800ca1c:	f00a f908 	bl	8016c30 <iprintf>
 800ca20:	e017      	b.n	800ca52 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ca28:	f003 0304 	and.w	r3, r3, #4
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d010      	beq.n	800ca52 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ca36:	f023 0304 	bic.w	r3, r3, #4
 800ca3a:	b2da      	uxtb	r2, r3
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	69db      	ldr	r3, [r3, #28]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d003      	beq.n	800ca52 <netif_set_link_down+0x4e>
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	69db      	ldr	r3, [r3, #28]
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ca52:	3708      	adds	r7, #8
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}
 800ca58:	08018a38 	.word	0x08018a38
 800ca5c:	08018c44 	.word	0x08018c44
 800ca60:	08018a88 	.word	0x08018a88

0800ca64 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800ca64:	b480      	push	{r7}
 800ca66:	b083      	sub	sp, #12
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
 800ca6c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d002      	beq.n	800ca7a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	683a      	ldr	r2, [r7, #0]
 800ca78:	61da      	str	r2, [r3, #28]
  }
}
 800ca7a:	bf00      	nop
 800ca7c:	370c      	adds	r7, #12
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca84:	4770      	bx	lr

0800ca86 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800ca86:	b480      	push	{r7}
 800ca88:	b085      	sub	sp, #20
 800ca8a:	af00      	add	r7, sp, #0
 800ca8c:	60f8      	str	r0, [r7, #12]
 800ca8e:	60b9      	str	r1, [r7, #8]
 800ca90:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800ca92:	f06f 030b 	mvn.w	r3, #11
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	3714      	adds	r7, #20
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa0:	4770      	bx	lr
	...

0800caa4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800caa4:	b480      	push	{r7}
 800caa6:	b085      	sub	sp, #20
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	4603      	mov	r3, r0
 800caac:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800caae:	79fb      	ldrb	r3, [r7, #7]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d013      	beq.n	800cadc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800cab4:	4b0d      	ldr	r3, [pc, #52]	@ (800caec <netif_get_by_index+0x48>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	60fb      	str	r3, [r7, #12]
 800caba:	e00c      	b.n	800cad6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cac2:	3301      	adds	r3, #1
 800cac4:	b2db      	uxtb	r3, r3
 800cac6:	79fa      	ldrb	r2, [r7, #7]
 800cac8:	429a      	cmp	r2, r3
 800caca:	d101      	bne.n	800cad0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	e006      	b.n	800cade <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	60fb      	str	r3, [r7, #12]
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d1ef      	bne.n	800cabc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800cadc:	2300      	movs	r3, #0
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3714      	adds	r7, #20
 800cae2:	46bd      	mov	sp, r7
 800cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae8:	4770      	bx	lr
 800caea:	bf00      	nop
 800caec:	24007ef8 	.word	0x24007ef8

0800caf0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b082      	sub	sp, #8
 800caf4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800caf6:	f009 ff7d 	bl	80169f4 <sys_arch_protect>
 800cafa:	6038      	str	r0, [r7, #0]
 800cafc:	4b0d      	ldr	r3, [pc, #52]	@ (800cb34 <pbuf_free_ooseq+0x44>)
 800cafe:	2200      	movs	r2, #0
 800cb00:	701a      	strb	r2, [r3, #0]
 800cb02:	6838      	ldr	r0, [r7, #0]
 800cb04:	f009 ff84 	bl	8016a10 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cb08:	4b0b      	ldr	r3, [pc, #44]	@ (800cb38 <pbuf_free_ooseq+0x48>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	607b      	str	r3, [r7, #4]
 800cb0e:	e00a      	b.n	800cb26 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d003      	beq.n	800cb20 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800cb18:	6878      	ldr	r0, [r7, #4]
 800cb1a:	f002 fc45 	bl	800f3a8 <tcp_free_ooseq>
      return;
 800cb1e:	e005      	b.n	800cb2c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	68db      	ldr	r3, [r3, #12]
 800cb24:	607b      	str	r3, [r7, #4]
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d1f1      	bne.n	800cb10 <pbuf_free_ooseq+0x20>
    }
  }
}
 800cb2c:	3708      	adds	r7, #8
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}
 800cb32:	bf00      	nop
 800cb34:	24007f01 	.word	0x24007f01
 800cb38:	24007f10 	.word	0x24007f10

0800cb3c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b082      	sub	sp, #8
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800cb44:	f7ff ffd4 	bl	800caf0 <pbuf_free_ooseq>
}
 800cb48:	bf00      	nop
 800cb4a:	3708      	adds	r7, #8
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b082      	sub	sp, #8
 800cb54:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800cb56:	f009 ff4d 	bl	80169f4 <sys_arch_protect>
 800cb5a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800cb5c:	4b0f      	ldr	r3, [pc, #60]	@ (800cb9c <pbuf_pool_is_empty+0x4c>)
 800cb5e:	781b      	ldrb	r3, [r3, #0]
 800cb60:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800cb62:	4b0e      	ldr	r3, [pc, #56]	@ (800cb9c <pbuf_pool_is_empty+0x4c>)
 800cb64:	2201      	movs	r2, #1
 800cb66:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f009 ff51 	bl	8016a10 <sys_arch_unprotect>

  if (!queued) {
 800cb6e:	78fb      	ldrb	r3, [r7, #3]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d10f      	bne.n	800cb94 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800cb74:	2100      	movs	r1, #0
 800cb76:	480a      	ldr	r0, [pc, #40]	@ (800cba0 <pbuf_pool_is_empty+0x50>)
 800cb78:	f7fe fdd8 	bl	800b72c <tcpip_try_callback>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d008      	beq.n	800cb94 <pbuf_pool_is_empty+0x44>
 800cb82:	f009 ff37 	bl	80169f4 <sys_arch_protect>
 800cb86:	6078      	str	r0, [r7, #4]
 800cb88:	4b04      	ldr	r3, [pc, #16]	@ (800cb9c <pbuf_pool_is_empty+0x4c>)
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	701a      	strb	r2, [r3, #0]
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f009 ff3e 	bl	8016a10 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800cb94:	bf00      	nop
 800cb96:	3708      	adds	r7, #8
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}
 800cb9c:	24007f01 	.word	0x24007f01
 800cba0:	0800cb3d 	.word	0x0800cb3d

0800cba4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800cba4:	b480      	push	{r7}
 800cba6:	b085      	sub	sp, #20
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	60f8      	str	r0, [r7, #12]
 800cbac:	60b9      	str	r1, [r7, #8]
 800cbae:	4611      	mov	r1, r2
 800cbb0:	461a      	mov	r2, r3
 800cbb2:	460b      	mov	r3, r1
 800cbb4:	80fb      	strh	r3, [r7, #6]
 800cbb6:	4613      	mov	r3, r2
 800cbb8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	68ba      	ldr	r2, [r7, #8]
 800cbc4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	88fa      	ldrh	r2, [r7, #6]
 800cbca:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	88ba      	ldrh	r2, [r7, #4]
 800cbd0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800cbd2:	8b3b      	ldrh	r3, [r7, #24]
 800cbd4:	b2da      	uxtb	r2, r3
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	7f3a      	ldrb	r2, [r7, #28]
 800cbde:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	2201      	movs	r2, #1
 800cbe4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	73da      	strb	r2, [r3, #15]
}
 800cbec:	bf00      	nop
 800cbee:	3714      	adds	r7, #20
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf6:	4770      	bx	lr

0800cbf8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b08c      	sub	sp, #48	@ 0x30
 800cbfc:	af02      	add	r7, sp, #8
 800cbfe:	4603      	mov	r3, r0
 800cc00:	71fb      	strb	r3, [r7, #7]
 800cc02:	460b      	mov	r3, r1
 800cc04:	80bb      	strh	r3, [r7, #4]
 800cc06:	4613      	mov	r3, r2
 800cc08:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800cc0a:	79fb      	ldrb	r3, [r7, #7]
 800cc0c:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800cc0e:	887b      	ldrh	r3, [r7, #2]
 800cc10:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800cc14:	d07f      	beq.n	800cd16 <pbuf_alloc+0x11e>
 800cc16:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800cc1a:	f300 80c8 	bgt.w	800cdae <pbuf_alloc+0x1b6>
 800cc1e:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800cc22:	d010      	beq.n	800cc46 <pbuf_alloc+0x4e>
 800cc24:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800cc28:	f300 80c1 	bgt.w	800cdae <pbuf_alloc+0x1b6>
 800cc2c:	2b01      	cmp	r3, #1
 800cc2e:	d002      	beq.n	800cc36 <pbuf_alloc+0x3e>
 800cc30:	2b41      	cmp	r3, #65	@ 0x41
 800cc32:	f040 80bc 	bne.w	800cdae <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800cc36:	887a      	ldrh	r2, [r7, #2]
 800cc38:	88bb      	ldrh	r3, [r7, #4]
 800cc3a:	4619      	mov	r1, r3
 800cc3c:	2000      	movs	r0, #0
 800cc3e:	f000 f8d1 	bl	800cde4 <pbuf_alloc_reference>
 800cc42:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800cc44:	e0bd      	b.n	800cdc2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800cc46:	2300      	movs	r3, #0
 800cc48:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800cc4e:	88bb      	ldrh	r3, [r7, #4]
 800cc50:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800cc52:	200c      	movs	r0, #12
 800cc54:	f7ff fb9a 	bl	800c38c <memp_malloc>
 800cc58:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800cc5a:	693b      	ldr	r3, [r7, #16]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d109      	bne.n	800cc74 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800cc60:	f7ff ff76 	bl	800cb50 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800cc64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d002      	beq.n	800cc70 <pbuf_alloc+0x78>
            pbuf_free(p);
 800cc6a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cc6c:	f000 faa8 	bl	800d1c0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800cc70:	2300      	movs	r3, #0
 800cc72:	e0a7      	b.n	800cdc4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800cc74:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cc76:	3303      	adds	r3, #3
 800cc78:	b29b      	uxth	r3, r3
 800cc7a:	f023 0303 	bic.w	r3, r3, #3
 800cc7e:	b29b      	uxth	r3, r3
 800cc80:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800cc84:	b29b      	uxth	r3, r3
 800cc86:	8b7a      	ldrh	r2, [r7, #26]
 800cc88:	4293      	cmp	r3, r2
 800cc8a:	bf28      	it	cs
 800cc8c:	4613      	movcs	r3, r2
 800cc8e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800cc90:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cc92:	3310      	adds	r3, #16
 800cc94:	693a      	ldr	r2, [r7, #16]
 800cc96:	4413      	add	r3, r2
 800cc98:	3303      	adds	r3, #3
 800cc9a:	f023 0303 	bic.w	r3, r3, #3
 800cc9e:	4618      	mov	r0, r3
 800cca0:	89f9      	ldrh	r1, [r7, #14]
 800cca2:	8b7a      	ldrh	r2, [r7, #26]
 800cca4:	2300      	movs	r3, #0
 800cca6:	9301      	str	r3, [sp, #4]
 800cca8:	887b      	ldrh	r3, [r7, #2]
 800ccaa:	9300      	str	r3, [sp, #0]
 800ccac:	460b      	mov	r3, r1
 800ccae:	4601      	mov	r1, r0
 800ccb0:	6938      	ldr	r0, [r7, #16]
 800ccb2:	f7ff ff77 	bl	800cba4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800ccb6:	693b      	ldr	r3, [r7, #16]
 800ccb8:	685b      	ldr	r3, [r3, #4]
 800ccba:	f003 0303 	and.w	r3, r3, #3
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d006      	beq.n	800ccd0 <pbuf_alloc+0xd8>
 800ccc2:	4b42      	ldr	r3, [pc, #264]	@ (800cdcc <pbuf_alloc+0x1d4>)
 800ccc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ccc8:	4941      	ldr	r1, [pc, #260]	@ (800cdd0 <pbuf_alloc+0x1d8>)
 800ccca:	4842      	ldr	r0, [pc, #264]	@ (800cdd4 <pbuf_alloc+0x1dc>)
 800cccc:	f009 ffb0 	bl	8016c30 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ccd0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ccd2:	3303      	adds	r3, #3
 800ccd4:	f023 0303 	bic.w	r3, r3, #3
 800ccd8:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800ccdc:	d106      	bne.n	800ccec <pbuf_alloc+0xf4>
 800ccde:	4b3b      	ldr	r3, [pc, #236]	@ (800cdcc <pbuf_alloc+0x1d4>)
 800cce0:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800cce4:	493c      	ldr	r1, [pc, #240]	@ (800cdd8 <pbuf_alloc+0x1e0>)
 800cce6:	483b      	ldr	r0, [pc, #236]	@ (800cdd4 <pbuf_alloc+0x1dc>)
 800cce8:	f009 ffa2 	bl	8016c30 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800ccec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d102      	bne.n	800ccf8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800ccf2:	693b      	ldr	r3, [r7, #16]
 800ccf4:	627b      	str	r3, [r7, #36]	@ 0x24
 800ccf6:	e002      	b.n	800ccfe <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800ccf8:	69fb      	ldr	r3, [r7, #28]
 800ccfa:	693a      	ldr	r2, [r7, #16]
 800ccfc:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800cd02:	8b7a      	ldrh	r2, [r7, #26]
 800cd04:	89fb      	ldrh	r3, [r7, #14]
 800cd06:	1ad3      	subs	r3, r2, r3
 800cd08:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800cd0e:	8b7b      	ldrh	r3, [r7, #26]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d19e      	bne.n	800cc52 <pbuf_alloc+0x5a>
      break;
 800cd14:	e055      	b.n	800cdc2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800cd16:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cd18:	3303      	adds	r3, #3
 800cd1a:	b29b      	uxth	r3, r3
 800cd1c:	f023 0303 	bic.w	r3, r3, #3
 800cd20:	b29a      	uxth	r2, r3
 800cd22:	88bb      	ldrh	r3, [r7, #4]
 800cd24:	3303      	adds	r3, #3
 800cd26:	b29b      	uxth	r3, r3
 800cd28:	f023 0303 	bic.w	r3, r3, #3
 800cd2c:	b29b      	uxth	r3, r3
 800cd2e:	4413      	add	r3, r2
 800cd30:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800cd32:	8b3b      	ldrh	r3, [r7, #24]
 800cd34:	3310      	adds	r3, #16
 800cd36:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cd38:	8b3a      	ldrh	r2, [r7, #24]
 800cd3a:	88bb      	ldrh	r3, [r7, #4]
 800cd3c:	3303      	adds	r3, #3
 800cd3e:	f023 0303 	bic.w	r3, r3, #3
 800cd42:	429a      	cmp	r2, r3
 800cd44:	d306      	bcc.n	800cd54 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800cd46:	8afa      	ldrh	r2, [r7, #22]
 800cd48:	88bb      	ldrh	r3, [r7, #4]
 800cd4a:	3303      	adds	r3, #3
 800cd4c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d201      	bcs.n	800cd58 <pbuf_alloc+0x160>
        return NULL;
 800cd54:	2300      	movs	r3, #0
 800cd56:	e035      	b.n	800cdc4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800cd58:	8afb      	ldrh	r3, [r7, #22]
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f7ff f972 	bl	800c044 <mem_malloc>
 800cd60:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800cd62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d101      	bne.n	800cd6c <pbuf_alloc+0x174>
        return NULL;
 800cd68:	2300      	movs	r3, #0
 800cd6a:	e02b      	b.n	800cdc4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800cd6c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cd6e:	3310      	adds	r3, #16
 800cd70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd72:	4413      	add	r3, r2
 800cd74:	3303      	adds	r3, #3
 800cd76:	f023 0303 	bic.w	r3, r3, #3
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	88b9      	ldrh	r1, [r7, #4]
 800cd7e:	88ba      	ldrh	r2, [r7, #4]
 800cd80:	2300      	movs	r3, #0
 800cd82:	9301      	str	r3, [sp, #4]
 800cd84:	887b      	ldrh	r3, [r7, #2]
 800cd86:	9300      	str	r3, [sp, #0]
 800cd88:	460b      	mov	r3, r1
 800cd8a:	4601      	mov	r1, r0
 800cd8c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cd8e:	f7ff ff09 	bl	800cba4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800cd92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd94:	685b      	ldr	r3, [r3, #4]
 800cd96:	f003 0303 	and.w	r3, r3, #3
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d010      	beq.n	800cdc0 <pbuf_alloc+0x1c8>
 800cd9e:	4b0b      	ldr	r3, [pc, #44]	@ (800cdcc <pbuf_alloc+0x1d4>)
 800cda0:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800cda4:	490d      	ldr	r1, [pc, #52]	@ (800cddc <pbuf_alloc+0x1e4>)
 800cda6:	480b      	ldr	r0, [pc, #44]	@ (800cdd4 <pbuf_alloc+0x1dc>)
 800cda8:	f009 ff42 	bl	8016c30 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800cdac:	e008      	b.n	800cdc0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800cdae:	4b07      	ldr	r3, [pc, #28]	@ (800cdcc <pbuf_alloc+0x1d4>)
 800cdb0:	f240 1227 	movw	r2, #295	@ 0x127
 800cdb4:	490a      	ldr	r1, [pc, #40]	@ (800cde0 <pbuf_alloc+0x1e8>)
 800cdb6:	4807      	ldr	r0, [pc, #28]	@ (800cdd4 <pbuf_alloc+0x1dc>)
 800cdb8:	f009 ff3a 	bl	8016c30 <iprintf>
      return NULL;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	e001      	b.n	800cdc4 <pbuf_alloc+0x1cc>
      break;
 800cdc0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800cdc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3728      	adds	r7, #40	@ 0x28
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}
 800cdcc:	08018c68 	.word	0x08018c68
 800cdd0:	08018c98 	.word	0x08018c98
 800cdd4:	08018cc8 	.word	0x08018cc8
 800cdd8:	08018cf0 	.word	0x08018cf0
 800cddc:	08018d24 	.word	0x08018d24
 800cde0:	08018d50 	.word	0x08018d50

0800cde4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b086      	sub	sp, #24
 800cde8:	af02      	add	r7, sp, #8
 800cdea:	6078      	str	r0, [r7, #4]
 800cdec:	460b      	mov	r3, r1
 800cdee:	807b      	strh	r3, [r7, #2]
 800cdf0:	4613      	mov	r3, r2
 800cdf2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800cdf4:	883b      	ldrh	r3, [r7, #0]
 800cdf6:	2b41      	cmp	r3, #65	@ 0x41
 800cdf8:	d009      	beq.n	800ce0e <pbuf_alloc_reference+0x2a>
 800cdfa:	883b      	ldrh	r3, [r7, #0]
 800cdfc:	2b01      	cmp	r3, #1
 800cdfe:	d006      	beq.n	800ce0e <pbuf_alloc_reference+0x2a>
 800ce00:	4b0f      	ldr	r3, [pc, #60]	@ (800ce40 <pbuf_alloc_reference+0x5c>)
 800ce02:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800ce06:	490f      	ldr	r1, [pc, #60]	@ (800ce44 <pbuf_alloc_reference+0x60>)
 800ce08:	480f      	ldr	r0, [pc, #60]	@ (800ce48 <pbuf_alloc_reference+0x64>)
 800ce0a:	f009 ff11 	bl	8016c30 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ce0e:	200b      	movs	r0, #11
 800ce10:	f7ff fabc 	bl	800c38c <memp_malloc>
 800ce14:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d101      	bne.n	800ce20 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	e00b      	b.n	800ce38 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800ce20:	8879      	ldrh	r1, [r7, #2]
 800ce22:	887a      	ldrh	r2, [r7, #2]
 800ce24:	2300      	movs	r3, #0
 800ce26:	9301      	str	r3, [sp, #4]
 800ce28:	883b      	ldrh	r3, [r7, #0]
 800ce2a:	9300      	str	r3, [sp, #0]
 800ce2c:	460b      	mov	r3, r1
 800ce2e:	6879      	ldr	r1, [r7, #4]
 800ce30:	68f8      	ldr	r0, [r7, #12]
 800ce32:	f7ff feb7 	bl	800cba4 <pbuf_init_alloced_pbuf>
  return p;
 800ce36:	68fb      	ldr	r3, [r7, #12]
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3710      	adds	r7, #16
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}
 800ce40:	08018c68 	.word	0x08018c68
 800ce44:	08018d6c 	.word	0x08018d6c
 800ce48:	08018cc8 	.word	0x08018cc8

0800ce4c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b088      	sub	sp, #32
 800ce50:	af02      	add	r7, sp, #8
 800ce52:	607b      	str	r3, [r7, #4]
 800ce54:	4603      	mov	r3, r0
 800ce56:	73fb      	strb	r3, [r7, #15]
 800ce58:	460b      	mov	r3, r1
 800ce5a:	81bb      	strh	r3, [r7, #12]
 800ce5c:	4613      	mov	r3, r2
 800ce5e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800ce60:	7bfb      	ldrb	r3, [r7, #15]
 800ce62:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ce64:	8a7b      	ldrh	r3, [r7, #18]
 800ce66:	3303      	adds	r3, #3
 800ce68:	f023 0203 	bic.w	r2, r3, #3
 800ce6c:	89bb      	ldrh	r3, [r7, #12]
 800ce6e:	441a      	add	r2, r3
 800ce70:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ce72:	429a      	cmp	r2, r3
 800ce74:	d901      	bls.n	800ce7a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ce76:	2300      	movs	r3, #0
 800ce78:	e018      	b.n	800ceac <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ce7a:	6a3b      	ldr	r3, [r7, #32]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d007      	beq.n	800ce90 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ce80:	8a7b      	ldrh	r3, [r7, #18]
 800ce82:	3303      	adds	r3, #3
 800ce84:	f023 0303 	bic.w	r3, r3, #3
 800ce88:	6a3a      	ldr	r2, [r7, #32]
 800ce8a:	4413      	add	r3, r2
 800ce8c:	617b      	str	r3, [r7, #20]
 800ce8e:	e001      	b.n	800ce94 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800ce90:	2300      	movs	r3, #0
 800ce92:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	89b9      	ldrh	r1, [r7, #12]
 800ce98:	89ba      	ldrh	r2, [r7, #12]
 800ce9a:	2302      	movs	r3, #2
 800ce9c:	9301      	str	r3, [sp, #4]
 800ce9e:	897b      	ldrh	r3, [r7, #10]
 800cea0:	9300      	str	r3, [sp, #0]
 800cea2:	460b      	mov	r3, r1
 800cea4:	6979      	ldr	r1, [r7, #20]
 800cea6:	f7ff fe7d 	bl	800cba4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800ceaa:	687b      	ldr	r3, [r7, #4]
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	3718      	adds	r7, #24
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}

0800ceb4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b084      	sub	sp, #16
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
 800cebc:	460b      	mov	r3, r1
 800cebe:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d106      	bne.n	800ced4 <pbuf_realloc+0x20>
 800cec6:	4b3a      	ldr	r3, [pc, #232]	@ (800cfb0 <pbuf_realloc+0xfc>)
 800cec8:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800cecc:	4939      	ldr	r1, [pc, #228]	@ (800cfb4 <pbuf_realloc+0x100>)
 800cece:	483a      	ldr	r0, [pc, #232]	@ (800cfb8 <pbuf_realloc+0x104>)
 800ced0:	f009 feae 	bl	8016c30 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	891b      	ldrh	r3, [r3, #8]
 800ced8:	887a      	ldrh	r2, [r7, #2]
 800ceda:	429a      	cmp	r2, r3
 800cedc:	d263      	bcs.n	800cfa6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	891a      	ldrh	r2, [r3, #8]
 800cee2:	887b      	ldrh	r3, [r7, #2]
 800cee4:	1ad3      	subs	r3, r2, r3
 800cee6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800cee8:	887b      	ldrh	r3, [r7, #2]
 800ceea:	817b      	strh	r3, [r7, #10]
  q = p;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800cef0:	e018      	b.n	800cf24 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	895b      	ldrh	r3, [r3, #10]
 800cef6:	897a      	ldrh	r2, [r7, #10]
 800cef8:	1ad3      	subs	r3, r2, r3
 800cefa:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	891a      	ldrh	r2, [r3, #8]
 800cf00:	893b      	ldrh	r3, [r7, #8]
 800cf02:	1ad3      	subs	r3, r2, r3
 800cf04:	b29a      	uxth	r2, r3
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d106      	bne.n	800cf24 <pbuf_realloc+0x70>
 800cf16:	4b26      	ldr	r3, [pc, #152]	@ (800cfb0 <pbuf_realloc+0xfc>)
 800cf18:	f240 12af 	movw	r2, #431	@ 0x1af
 800cf1c:	4927      	ldr	r1, [pc, #156]	@ (800cfbc <pbuf_realloc+0x108>)
 800cf1e:	4826      	ldr	r0, [pc, #152]	@ (800cfb8 <pbuf_realloc+0x104>)
 800cf20:	f009 fe86 	bl	8016c30 <iprintf>
  while (rem_len > q->len) {
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	895b      	ldrh	r3, [r3, #10]
 800cf28:	897a      	ldrh	r2, [r7, #10]
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d8e1      	bhi.n	800cef2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	7b1b      	ldrb	r3, [r3, #12]
 800cf32:	f003 030f 	and.w	r3, r3, #15
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d121      	bne.n	800cf7e <pbuf_realloc+0xca>
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	895b      	ldrh	r3, [r3, #10]
 800cf3e:	897a      	ldrh	r2, [r7, #10]
 800cf40:	429a      	cmp	r2, r3
 800cf42:	d01c      	beq.n	800cf7e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	7b5b      	ldrb	r3, [r3, #13]
 800cf48:	f003 0302 	and.w	r3, r3, #2
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d116      	bne.n	800cf7e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	685a      	ldr	r2, [r3, #4]
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	1ad3      	subs	r3, r2, r3
 800cf58:	b29a      	uxth	r2, r3
 800cf5a:	897b      	ldrh	r3, [r7, #10]
 800cf5c:	4413      	add	r3, r2
 800cf5e:	b29b      	uxth	r3, r3
 800cf60:	4619      	mov	r1, r3
 800cf62:	68f8      	ldr	r0, [r7, #12]
 800cf64:	f7fe ff64 	bl	800be30 <mem_trim>
 800cf68:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d106      	bne.n	800cf7e <pbuf_realloc+0xca>
 800cf70:	4b0f      	ldr	r3, [pc, #60]	@ (800cfb0 <pbuf_realloc+0xfc>)
 800cf72:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800cf76:	4912      	ldr	r1, [pc, #72]	@ (800cfc0 <pbuf_realloc+0x10c>)
 800cf78:	480f      	ldr	r0, [pc, #60]	@ (800cfb8 <pbuf_realloc+0x104>)
 800cf7a:	f009 fe59 	bl	8016c30 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	897a      	ldrh	r2, [r7, #10]
 800cf82:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	895a      	ldrh	r2, [r3, #10]
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d004      	beq.n	800cf9e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f000 f911 	bl	800d1c0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	601a      	str	r2, [r3, #0]
 800cfa4:	e000      	b.n	800cfa8 <pbuf_realloc+0xf4>
    return;
 800cfa6:	bf00      	nop

}
 800cfa8:	3710      	adds	r7, #16
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bd80      	pop	{r7, pc}
 800cfae:	bf00      	nop
 800cfb0:	08018c68 	.word	0x08018c68
 800cfb4:	08018d80 	.word	0x08018d80
 800cfb8:	08018cc8 	.word	0x08018cc8
 800cfbc:	08018d98 	.word	0x08018d98
 800cfc0:	08018db0 	.word	0x08018db0

0800cfc4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b086      	sub	sp, #24
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	60f8      	str	r0, [r7, #12]
 800cfcc:	60b9      	str	r1, [r7, #8]
 800cfce:	4613      	mov	r3, r2
 800cfd0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d106      	bne.n	800cfe6 <pbuf_add_header_impl+0x22>
 800cfd8:	4b2b      	ldr	r3, [pc, #172]	@ (800d088 <pbuf_add_header_impl+0xc4>)
 800cfda:	f240 12df 	movw	r2, #479	@ 0x1df
 800cfde:	492b      	ldr	r1, [pc, #172]	@ (800d08c <pbuf_add_header_impl+0xc8>)
 800cfe0:	482b      	ldr	r0, [pc, #172]	@ (800d090 <pbuf_add_header_impl+0xcc>)
 800cfe2:	f009 fe25 	bl	8016c30 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d003      	beq.n	800cff4 <pbuf_add_header_impl+0x30>
 800cfec:	68bb      	ldr	r3, [r7, #8]
 800cfee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cff2:	d301      	bcc.n	800cff8 <pbuf_add_header_impl+0x34>
    return 1;
 800cff4:	2301      	movs	r3, #1
 800cff6:	e043      	b.n	800d080 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800cff8:	68bb      	ldr	r3, [r7, #8]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d101      	bne.n	800d002 <pbuf_add_header_impl+0x3e>
    return 0;
 800cffe:	2300      	movs	r3, #0
 800d000:	e03e      	b.n	800d080 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	891a      	ldrh	r2, [r3, #8]
 800d00a:	8a7b      	ldrh	r3, [r7, #18]
 800d00c:	4413      	add	r3, r2
 800d00e:	b29b      	uxth	r3, r3
 800d010:	8a7a      	ldrh	r2, [r7, #18]
 800d012:	429a      	cmp	r2, r3
 800d014:	d901      	bls.n	800d01a <pbuf_add_header_impl+0x56>
    return 1;
 800d016:	2301      	movs	r3, #1
 800d018:	e032      	b.n	800d080 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	7b1b      	ldrb	r3, [r3, #12]
 800d01e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d020:	8a3b      	ldrh	r3, [r7, #16]
 800d022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d026:	2b00      	cmp	r3, #0
 800d028:	d00c      	beq.n	800d044 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	685a      	ldr	r2, [r3, #4]
 800d02e:	68bb      	ldr	r3, [r7, #8]
 800d030:	425b      	negs	r3, r3
 800d032:	4413      	add	r3, r2
 800d034:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	3310      	adds	r3, #16
 800d03a:	697a      	ldr	r2, [r7, #20]
 800d03c:	429a      	cmp	r2, r3
 800d03e:	d20d      	bcs.n	800d05c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d040:	2301      	movs	r3, #1
 800d042:	e01d      	b.n	800d080 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d044:	79fb      	ldrb	r3, [r7, #7]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d006      	beq.n	800d058 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	685a      	ldr	r2, [r3, #4]
 800d04e:	68bb      	ldr	r3, [r7, #8]
 800d050:	425b      	negs	r3, r3
 800d052:	4413      	add	r3, r2
 800d054:	617b      	str	r3, [r7, #20]
 800d056:	e001      	b.n	800d05c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d058:	2301      	movs	r3, #1
 800d05a:	e011      	b.n	800d080 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	697a      	ldr	r2, [r7, #20]
 800d060:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	895a      	ldrh	r2, [r3, #10]
 800d066:	8a7b      	ldrh	r3, [r7, #18]
 800d068:	4413      	add	r3, r2
 800d06a:	b29a      	uxth	r2, r3
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	891a      	ldrh	r2, [r3, #8]
 800d074:	8a7b      	ldrh	r3, [r7, #18]
 800d076:	4413      	add	r3, r2
 800d078:	b29a      	uxth	r2, r3
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	811a      	strh	r2, [r3, #8]


  return 0;
 800d07e:	2300      	movs	r3, #0
}
 800d080:	4618      	mov	r0, r3
 800d082:	3718      	adds	r7, #24
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}
 800d088:	08018c68 	.word	0x08018c68
 800d08c:	08018dcc 	.word	0x08018dcc
 800d090:	08018cc8 	.word	0x08018cc8

0800d094 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b082      	sub	sp, #8
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
 800d09c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d09e:	2200      	movs	r2, #0
 800d0a0:	6839      	ldr	r1, [r7, #0]
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	f7ff ff8e 	bl	800cfc4 <pbuf_add_header_impl>
 800d0a8:	4603      	mov	r3, r0
}
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	3708      	adds	r7, #8
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}
	...

0800d0b4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b084      	sub	sp, #16
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d106      	bne.n	800d0d2 <pbuf_remove_header+0x1e>
 800d0c4:	4b20      	ldr	r3, [pc, #128]	@ (800d148 <pbuf_remove_header+0x94>)
 800d0c6:	f240 224b 	movw	r2, #587	@ 0x24b
 800d0ca:	4920      	ldr	r1, [pc, #128]	@ (800d14c <pbuf_remove_header+0x98>)
 800d0cc:	4820      	ldr	r0, [pc, #128]	@ (800d150 <pbuf_remove_header+0x9c>)
 800d0ce:	f009 fdaf 	bl	8016c30 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d003      	beq.n	800d0e0 <pbuf_remove_header+0x2c>
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d0de:	d301      	bcc.n	800d0e4 <pbuf_remove_header+0x30>
    return 1;
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	e02c      	b.n	800d13e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d101      	bne.n	800d0ee <pbuf_remove_header+0x3a>
    return 0;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	e027      	b.n	800d13e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	895b      	ldrh	r3, [r3, #10]
 800d0f6:	89fa      	ldrh	r2, [r7, #14]
 800d0f8:	429a      	cmp	r2, r3
 800d0fa:	d908      	bls.n	800d10e <pbuf_remove_header+0x5a>
 800d0fc:	4b12      	ldr	r3, [pc, #72]	@ (800d148 <pbuf_remove_header+0x94>)
 800d0fe:	f240 2255 	movw	r2, #597	@ 0x255
 800d102:	4914      	ldr	r1, [pc, #80]	@ (800d154 <pbuf_remove_header+0xa0>)
 800d104:	4812      	ldr	r0, [pc, #72]	@ (800d150 <pbuf_remove_header+0x9c>)
 800d106:	f009 fd93 	bl	8016c30 <iprintf>
 800d10a:	2301      	movs	r3, #1
 800d10c:	e017      	b.n	800d13e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	685b      	ldr	r3, [r3, #4]
 800d112:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	685a      	ldr	r2, [r3, #4]
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	441a      	add	r2, r3
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	895a      	ldrh	r2, [r3, #10]
 800d124:	89fb      	ldrh	r3, [r7, #14]
 800d126:	1ad3      	subs	r3, r2, r3
 800d128:	b29a      	uxth	r2, r3
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	891a      	ldrh	r2, [r3, #8]
 800d132:	89fb      	ldrh	r3, [r7, #14]
 800d134:	1ad3      	subs	r3, r2, r3
 800d136:	b29a      	uxth	r2, r3
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d13c:	2300      	movs	r3, #0
}
 800d13e:	4618      	mov	r0, r3
 800d140:	3710      	adds	r7, #16
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}
 800d146:	bf00      	nop
 800d148:	08018c68 	.word	0x08018c68
 800d14c:	08018dcc 	.word	0x08018dcc
 800d150:	08018cc8 	.word	0x08018cc8
 800d154:	08018dd8 	.word	0x08018dd8

0800d158 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b082      	sub	sp, #8
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
 800d160:	460b      	mov	r3, r1
 800d162:	807b      	strh	r3, [r7, #2]
 800d164:	4613      	mov	r3, r2
 800d166:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d168:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	da08      	bge.n	800d182 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d170:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d174:	425b      	negs	r3, r3
 800d176:	4619      	mov	r1, r3
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	f7ff ff9b 	bl	800d0b4 <pbuf_remove_header>
 800d17e:	4603      	mov	r3, r0
 800d180:	e007      	b.n	800d192 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d182:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d186:	787a      	ldrb	r2, [r7, #1]
 800d188:	4619      	mov	r1, r3
 800d18a:	6878      	ldr	r0, [r7, #4]
 800d18c:	f7ff ff1a 	bl	800cfc4 <pbuf_add_header_impl>
 800d190:	4603      	mov	r3, r0
  }
}
 800d192:	4618      	mov	r0, r3
 800d194:	3708      	adds	r7, #8
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}

0800d19a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d19a:	b580      	push	{r7, lr}
 800d19c:	b082      	sub	sp, #8
 800d19e:	af00      	add	r7, sp, #0
 800d1a0:	6078      	str	r0, [r7, #4]
 800d1a2:	460b      	mov	r3, r1
 800d1a4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d1a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	4619      	mov	r1, r3
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f7ff ffd2 	bl	800d158 <pbuf_header_impl>
 800d1b4:	4603      	mov	r3, r0
}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3708      	adds	r7, #8
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}
	...

0800d1c0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b088      	sub	sp, #32
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d10b      	bne.n	800d1e6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d106      	bne.n	800d1e2 <pbuf_free+0x22>
 800d1d4:	4b3b      	ldr	r3, [pc, #236]	@ (800d2c4 <pbuf_free+0x104>)
 800d1d6:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800d1da:	493b      	ldr	r1, [pc, #236]	@ (800d2c8 <pbuf_free+0x108>)
 800d1dc:	483b      	ldr	r0, [pc, #236]	@ (800d2cc <pbuf_free+0x10c>)
 800d1de:	f009 fd27 	bl	8016c30 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	e069      	b.n	800d2ba <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d1ea:	e062      	b.n	800d2b2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d1ec:	f009 fc02 	bl	80169f4 <sys_arch_protect>
 800d1f0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	7b9b      	ldrb	r3, [r3, #14]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d106      	bne.n	800d208 <pbuf_free+0x48>
 800d1fa:	4b32      	ldr	r3, [pc, #200]	@ (800d2c4 <pbuf_free+0x104>)
 800d1fc:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800d200:	4933      	ldr	r1, [pc, #204]	@ (800d2d0 <pbuf_free+0x110>)
 800d202:	4832      	ldr	r0, [pc, #200]	@ (800d2cc <pbuf_free+0x10c>)
 800d204:	f009 fd14 	bl	8016c30 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	7b9b      	ldrb	r3, [r3, #14]
 800d20c:	3b01      	subs	r3, #1
 800d20e:	b2da      	uxtb	r2, r3
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	739a      	strb	r2, [r3, #14]
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	7b9b      	ldrb	r3, [r3, #14]
 800d218:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800d21a:	69b8      	ldr	r0, [r7, #24]
 800d21c:	f009 fbf8 	bl	8016a10 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d220:	7dfb      	ldrb	r3, [r7, #23]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d143      	bne.n	800d2ae <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	7b1b      	ldrb	r3, [r3, #12]
 800d230:	f003 030f 	and.w	r3, r3, #15
 800d234:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	7b5b      	ldrb	r3, [r3, #13]
 800d23a:	f003 0302 	and.w	r3, r3, #2
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d011      	beq.n	800d266 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	691b      	ldr	r3, [r3, #16]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d106      	bne.n	800d25c <pbuf_free+0x9c>
 800d24e:	4b1d      	ldr	r3, [pc, #116]	@ (800d2c4 <pbuf_free+0x104>)
 800d250:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800d254:	491f      	ldr	r1, [pc, #124]	@ (800d2d4 <pbuf_free+0x114>)
 800d256:	481d      	ldr	r0, [pc, #116]	@ (800d2cc <pbuf_free+0x10c>)
 800d258:	f009 fcea 	bl	8016c30 <iprintf>
        pc->custom_free_function(p);
 800d25c:	68bb      	ldr	r3, [r7, #8]
 800d25e:	691b      	ldr	r3, [r3, #16]
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	4798      	blx	r3
 800d264:	e01d      	b.n	800d2a2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d266:	7bfb      	ldrb	r3, [r7, #15]
 800d268:	2b02      	cmp	r3, #2
 800d26a:	d104      	bne.n	800d276 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800d26c:	6879      	ldr	r1, [r7, #4]
 800d26e:	200c      	movs	r0, #12
 800d270:	f7ff f902 	bl	800c478 <memp_free>
 800d274:	e015      	b.n	800d2a2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d276:	7bfb      	ldrb	r3, [r7, #15]
 800d278:	2b01      	cmp	r3, #1
 800d27a:	d104      	bne.n	800d286 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800d27c:	6879      	ldr	r1, [r7, #4]
 800d27e:	200b      	movs	r0, #11
 800d280:	f7ff f8fa 	bl	800c478 <memp_free>
 800d284:	e00d      	b.n	800d2a2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d286:	7bfb      	ldrb	r3, [r7, #15]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d103      	bne.n	800d294 <pbuf_free+0xd4>
          mem_free(p);
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f7fe fd3f 	bl	800bd10 <mem_free>
 800d292:	e006      	b.n	800d2a2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d294:	4b0b      	ldr	r3, [pc, #44]	@ (800d2c4 <pbuf_free+0x104>)
 800d296:	f240 320f 	movw	r2, #783	@ 0x30f
 800d29a:	490f      	ldr	r1, [pc, #60]	@ (800d2d8 <pbuf_free+0x118>)
 800d29c:	480b      	ldr	r0, [pc, #44]	@ (800d2cc <pbuf_free+0x10c>)
 800d29e:	f009 fcc7 	bl	8016c30 <iprintf>
        }
      }
      count++;
 800d2a2:	7ffb      	ldrb	r3, [r7, #31]
 800d2a4:	3301      	adds	r3, #1
 800d2a6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d2a8:	693b      	ldr	r3, [r7, #16]
 800d2aa:	607b      	str	r3, [r7, #4]
 800d2ac:	e001      	b.n	800d2b2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d199      	bne.n	800d1ec <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d2b8:	7ffb      	ldrb	r3, [r7, #31]
}
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	3720      	adds	r7, #32
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd80      	pop	{r7, pc}
 800d2c2:	bf00      	nop
 800d2c4:	08018c68 	.word	0x08018c68
 800d2c8:	08018dcc 	.word	0x08018dcc
 800d2cc:	08018cc8 	.word	0x08018cc8
 800d2d0:	08018df8 	.word	0x08018df8
 800d2d4:	08018e10 	.word	0x08018e10
 800d2d8:	08018e34 	.word	0x08018e34

0800d2dc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d2dc:	b480      	push	{r7}
 800d2de:	b085      	sub	sp, #20
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d2e8:	e005      	b.n	800d2f6 <pbuf_clen+0x1a>
    ++len;
 800d2ea:	89fb      	ldrh	r3, [r7, #14]
 800d2ec:	3301      	adds	r3, #1
 800d2ee:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d1f6      	bne.n	800d2ea <pbuf_clen+0xe>
  }
  return len;
 800d2fc:	89fb      	ldrh	r3, [r7, #14]
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	3714      	adds	r7, #20
 800d302:	46bd      	mov	sp, r7
 800d304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d308:	4770      	bx	lr
	...

0800d30c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b084      	sub	sp, #16
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d016      	beq.n	800d348 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d31a:	f009 fb6b 	bl	80169f4 <sys_arch_protect>
 800d31e:	60f8      	str	r0, [r7, #12]
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	7b9b      	ldrb	r3, [r3, #14]
 800d324:	3301      	adds	r3, #1
 800d326:	b2da      	uxtb	r2, r3
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	739a      	strb	r2, [r3, #14]
 800d32c:	68f8      	ldr	r0, [r7, #12]
 800d32e:	f009 fb6f 	bl	8016a10 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	7b9b      	ldrb	r3, [r3, #14]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d106      	bne.n	800d348 <pbuf_ref+0x3c>
 800d33a:	4b05      	ldr	r3, [pc, #20]	@ (800d350 <pbuf_ref+0x44>)
 800d33c:	f240 3242 	movw	r2, #834	@ 0x342
 800d340:	4904      	ldr	r1, [pc, #16]	@ (800d354 <pbuf_ref+0x48>)
 800d342:	4805      	ldr	r0, [pc, #20]	@ (800d358 <pbuf_ref+0x4c>)
 800d344:	f009 fc74 	bl	8016c30 <iprintf>
  }
}
 800d348:	bf00      	nop
 800d34a:	3710      	adds	r7, #16
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}
 800d350:	08018c68 	.word	0x08018c68
 800d354:	08018e48 	.word	0x08018e48
 800d358:	08018cc8 	.word	0x08018cc8

0800d35c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b084      	sub	sp, #16
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
 800d364:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d002      	beq.n	800d372 <pbuf_cat+0x16>
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d107      	bne.n	800d382 <pbuf_cat+0x26>
 800d372:	4b20      	ldr	r3, [pc, #128]	@ (800d3f4 <pbuf_cat+0x98>)
 800d374:	f240 3259 	movw	r2, #857	@ 0x359
 800d378:	491f      	ldr	r1, [pc, #124]	@ (800d3f8 <pbuf_cat+0x9c>)
 800d37a:	4820      	ldr	r0, [pc, #128]	@ (800d3fc <pbuf_cat+0xa0>)
 800d37c:	f009 fc58 	bl	8016c30 <iprintf>
 800d380:	e034      	b.n	800d3ec <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	60fb      	str	r3, [r7, #12]
 800d386:	e00a      	b.n	800d39e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	891a      	ldrh	r2, [r3, #8]
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	891b      	ldrh	r3, [r3, #8]
 800d390:	4413      	add	r3, r2
 800d392:	b29a      	uxth	r2, r3
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	60fb      	str	r3, [r7, #12]
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d1f0      	bne.n	800d388 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	891a      	ldrh	r2, [r3, #8]
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	895b      	ldrh	r3, [r3, #10]
 800d3ae:	429a      	cmp	r2, r3
 800d3b0:	d006      	beq.n	800d3c0 <pbuf_cat+0x64>
 800d3b2:	4b10      	ldr	r3, [pc, #64]	@ (800d3f4 <pbuf_cat+0x98>)
 800d3b4:	f240 3262 	movw	r2, #866	@ 0x362
 800d3b8:	4911      	ldr	r1, [pc, #68]	@ (800d400 <pbuf_cat+0xa4>)
 800d3ba:	4810      	ldr	r0, [pc, #64]	@ (800d3fc <pbuf_cat+0xa0>)
 800d3bc:	f009 fc38 	bl	8016c30 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d006      	beq.n	800d3d6 <pbuf_cat+0x7a>
 800d3c8:	4b0a      	ldr	r3, [pc, #40]	@ (800d3f4 <pbuf_cat+0x98>)
 800d3ca:	f240 3263 	movw	r2, #867	@ 0x363
 800d3ce:	490d      	ldr	r1, [pc, #52]	@ (800d404 <pbuf_cat+0xa8>)
 800d3d0:	480a      	ldr	r0, [pc, #40]	@ (800d3fc <pbuf_cat+0xa0>)
 800d3d2:	f009 fc2d 	bl	8016c30 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	891a      	ldrh	r2, [r3, #8]
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	891b      	ldrh	r3, [r3, #8]
 800d3de:	4413      	add	r3, r2
 800d3e0:	b29a      	uxth	r2, r3
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	683a      	ldr	r2, [r7, #0]
 800d3ea:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d3ec:	3710      	adds	r7, #16
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}
 800d3f2:	bf00      	nop
 800d3f4:	08018c68 	.word	0x08018c68
 800d3f8:	08018e5c 	.word	0x08018e5c
 800d3fc:	08018cc8 	.word	0x08018cc8
 800d400:	08018e94 	.word	0x08018e94
 800d404:	08018ec4 	.word	0x08018ec4

0800d408 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b086      	sub	sp, #24
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
 800d410:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d412:	2300      	movs	r3, #0
 800d414:	617b      	str	r3, [r7, #20]
 800d416:	2300      	movs	r3, #0
 800d418:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d008      	beq.n	800d432 <pbuf_copy+0x2a>
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d005      	beq.n	800d432 <pbuf_copy+0x2a>
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	891a      	ldrh	r2, [r3, #8]
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	891b      	ldrh	r3, [r3, #8]
 800d42e:	429a      	cmp	r2, r3
 800d430:	d209      	bcs.n	800d446 <pbuf_copy+0x3e>
 800d432:	4b57      	ldr	r3, [pc, #348]	@ (800d590 <pbuf_copy+0x188>)
 800d434:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800d438:	4956      	ldr	r1, [pc, #344]	@ (800d594 <pbuf_copy+0x18c>)
 800d43a:	4857      	ldr	r0, [pc, #348]	@ (800d598 <pbuf_copy+0x190>)
 800d43c:	f009 fbf8 	bl	8016c30 <iprintf>
 800d440:	f06f 030f 	mvn.w	r3, #15
 800d444:	e09f      	b.n	800d586 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	895b      	ldrh	r3, [r3, #10]
 800d44a:	461a      	mov	r2, r3
 800d44c:	697b      	ldr	r3, [r7, #20]
 800d44e:	1ad2      	subs	r2, r2, r3
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	895b      	ldrh	r3, [r3, #10]
 800d454:	4619      	mov	r1, r3
 800d456:	693b      	ldr	r3, [r7, #16]
 800d458:	1acb      	subs	r3, r1, r3
 800d45a:	429a      	cmp	r2, r3
 800d45c:	d306      	bcc.n	800d46c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	895b      	ldrh	r3, [r3, #10]
 800d462:	461a      	mov	r2, r3
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	1ad3      	subs	r3, r2, r3
 800d468:	60fb      	str	r3, [r7, #12]
 800d46a:	e005      	b.n	800d478 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	895b      	ldrh	r3, [r3, #10]
 800d470:	461a      	mov	r2, r3
 800d472:	697b      	ldr	r3, [r7, #20]
 800d474:	1ad3      	subs	r3, r2, r3
 800d476:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	685a      	ldr	r2, [r3, #4]
 800d47c:	697b      	ldr	r3, [r7, #20]
 800d47e:	18d0      	adds	r0, r2, r3
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	685a      	ldr	r2, [r3, #4]
 800d484:	693b      	ldr	r3, [r7, #16]
 800d486:	4413      	add	r3, r2
 800d488:	68fa      	ldr	r2, [r7, #12]
 800d48a:	4619      	mov	r1, r3
 800d48c:	f009 fd01 	bl	8016e92 <memcpy>
    offset_to += len;
 800d490:	697a      	ldr	r2, [r7, #20]
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	4413      	add	r3, r2
 800d496:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d498:	693a      	ldr	r2, [r7, #16]
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	4413      	add	r3, r2
 800d49e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	895b      	ldrh	r3, [r3, #10]
 800d4a4:	461a      	mov	r2, r3
 800d4a6:	697b      	ldr	r3, [r7, #20]
 800d4a8:	4293      	cmp	r3, r2
 800d4aa:	d906      	bls.n	800d4ba <pbuf_copy+0xb2>
 800d4ac:	4b38      	ldr	r3, [pc, #224]	@ (800d590 <pbuf_copy+0x188>)
 800d4ae:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800d4b2:	493a      	ldr	r1, [pc, #232]	@ (800d59c <pbuf_copy+0x194>)
 800d4b4:	4838      	ldr	r0, [pc, #224]	@ (800d598 <pbuf_copy+0x190>)
 800d4b6:	f009 fbbb 	bl	8016c30 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	895b      	ldrh	r3, [r3, #10]
 800d4be:	461a      	mov	r2, r3
 800d4c0:	693b      	ldr	r3, [r7, #16]
 800d4c2:	4293      	cmp	r3, r2
 800d4c4:	d906      	bls.n	800d4d4 <pbuf_copy+0xcc>
 800d4c6:	4b32      	ldr	r3, [pc, #200]	@ (800d590 <pbuf_copy+0x188>)
 800d4c8:	f240 32da 	movw	r2, #986	@ 0x3da
 800d4cc:	4934      	ldr	r1, [pc, #208]	@ (800d5a0 <pbuf_copy+0x198>)
 800d4ce:	4832      	ldr	r0, [pc, #200]	@ (800d598 <pbuf_copy+0x190>)
 800d4d0:	f009 fbae 	bl	8016c30 <iprintf>
    if (offset_from >= p_from->len) {
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	895b      	ldrh	r3, [r3, #10]
 800d4d8:	461a      	mov	r2, r3
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	4293      	cmp	r3, r2
 800d4de:	d304      	bcc.n	800d4ea <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	895b      	ldrh	r3, [r3, #10]
 800d4ee:	461a      	mov	r2, r3
 800d4f0:	697b      	ldr	r3, [r7, #20]
 800d4f2:	4293      	cmp	r3, r2
 800d4f4:	d114      	bne.n	800d520 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d10c      	bne.n	800d520 <pbuf_copy+0x118>
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d009      	beq.n	800d520 <pbuf_copy+0x118>
 800d50c:	4b20      	ldr	r3, [pc, #128]	@ (800d590 <pbuf_copy+0x188>)
 800d50e:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800d512:	4924      	ldr	r1, [pc, #144]	@ (800d5a4 <pbuf_copy+0x19c>)
 800d514:	4820      	ldr	r0, [pc, #128]	@ (800d598 <pbuf_copy+0x190>)
 800d516:	f009 fb8b 	bl	8016c30 <iprintf>
 800d51a:	f06f 030f 	mvn.w	r3, #15
 800d51e:	e032      	b.n	800d586 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d013      	beq.n	800d54e <pbuf_copy+0x146>
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	895a      	ldrh	r2, [r3, #10]
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	891b      	ldrh	r3, [r3, #8]
 800d52e:	429a      	cmp	r2, r3
 800d530:	d10d      	bne.n	800d54e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d532:	683b      	ldr	r3, [r7, #0]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d009      	beq.n	800d54e <pbuf_copy+0x146>
 800d53a:	4b15      	ldr	r3, [pc, #84]	@ (800d590 <pbuf_copy+0x188>)
 800d53c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800d540:	4919      	ldr	r1, [pc, #100]	@ (800d5a8 <pbuf_copy+0x1a0>)
 800d542:	4815      	ldr	r0, [pc, #84]	@ (800d598 <pbuf_copy+0x190>)
 800d544:	f009 fb74 	bl	8016c30 <iprintf>
 800d548:	f06f 0305 	mvn.w	r3, #5
 800d54c:	e01b      	b.n	800d586 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d013      	beq.n	800d57c <pbuf_copy+0x174>
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	895a      	ldrh	r2, [r3, #10]
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	891b      	ldrh	r3, [r3, #8]
 800d55c:	429a      	cmp	r2, r3
 800d55e:	d10d      	bne.n	800d57c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d009      	beq.n	800d57c <pbuf_copy+0x174>
 800d568:	4b09      	ldr	r3, [pc, #36]	@ (800d590 <pbuf_copy+0x188>)
 800d56a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800d56e:	490e      	ldr	r1, [pc, #56]	@ (800d5a8 <pbuf_copy+0x1a0>)
 800d570:	4809      	ldr	r0, [pc, #36]	@ (800d598 <pbuf_copy+0x190>)
 800d572:	f009 fb5d 	bl	8016c30 <iprintf>
 800d576:	f06f 0305 	mvn.w	r3, #5
 800d57a:	e004      	b.n	800d586 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	f47f af61 	bne.w	800d446 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d584:	2300      	movs	r3, #0
}
 800d586:	4618      	mov	r0, r3
 800d588:	3718      	adds	r7, #24
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}
 800d58e:	bf00      	nop
 800d590:	08018c68 	.word	0x08018c68
 800d594:	08018f10 	.word	0x08018f10
 800d598:	08018cc8 	.word	0x08018cc8
 800d59c:	08018f40 	.word	0x08018f40
 800d5a0:	08018f58 	.word	0x08018f58
 800d5a4:	08018f74 	.word	0x08018f74
 800d5a8:	08018f84 	.word	0x08018f84

0800d5ac <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b088      	sub	sp, #32
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	60f8      	str	r0, [r7, #12]
 800d5b4:	60b9      	str	r1, [r7, #8]
 800d5b6:	4611      	mov	r1, r2
 800d5b8:	461a      	mov	r2, r3
 800d5ba:	460b      	mov	r3, r1
 800d5bc:	80fb      	strh	r3, [r7, #6]
 800d5be:	4613      	mov	r3, r2
 800d5c0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d108      	bne.n	800d5e2 <pbuf_copy_partial+0x36>
 800d5d0:	4b2b      	ldr	r3, [pc, #172]	@ (800d680 <pbuf_copy_partial+0xd4>)
 800d5d2:	f240 420a 	movw	r2, #1034	@ 0x40a
 800d5d6:	492b      	ldr	r1, [pc, #172]	@ (800d684 <pbuf_copy_partial+0xd8>)
 800d5d8:	482b      	ldr	r0, [pc, #172]	@ (800d688 <pbuf_copy_partial+0xdc>)
 800d5da:	f009 fb29 	bl	8016c30 <iprintf>
 800d5de:	2300      	movs	r3, #0
 800d5e0:	e04a      	b.n	800d678 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d108      	bne.n	800d5fa <pbuf_copy_partial+0x4e>
 800d5e8:	4b25      	ldr	r3, [pc, #148]	@ (800d680 <pbuf_copy_partial+0xd4>)
 800d5ea:	f240 420b 	movw	r2, #1035	@ 0x40b
 800d5ee:	4927      	ldr	r1, [pc, #156]	@ (800d68c <pbuf_copy_partial+0xe0>)
 800d5f0:	4825      	ldr	r0, [pc, #148]	@ (800d688 <pbuf_copy_partial+0xdc>)
 800d5f2:	f009 fb1d 	bl	8016c30 <iprintf>
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	e03e      	b.n	800d678 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	61fb      	str	r3, [r7, #28]
 800d5fe:	e034      	b.n	800d66a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d600:	88bb      	ldrh	r3, [r7, #4]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d00a      	beq.n	800d61c <pbuf_copy_partial+0x70>
 800d606:	69fb      	ldr	r3, [r7, #28]
 800d608:	895b      	ldrh	r3, [r3, #10]
 800d60a:	88ba      	ldrh	r2, [r7, #4]
 800d60c:	429a      	cmp	r2, r3
 800d60e:	d305      	bcc.n	800d61c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d610:	69fb      	ldr	r3, [r7, #28]
 800d612:	895b      	ldrh	r3, [r3, #10]
 800d614:	88ba      	ldrh	r2, [r7, #4]
 800d616:	1ad3      	subs	r3, r2, r3
 800d618:	80bb      	strh	r3, [r7, #4]
 800d61a:	e023      	b.n	800d664 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d61c:	69fb      	ldr	r3, [r7, #28]
 800d61e:	895a      	ldrh	r2, [r3, #10]
 800d620:	88bb      	ldrh	r3, [r7, #4]
 800d622:	1ad3      	subs	r3, r2, r3
 800d624:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d626:	8b3a      	ldrh	r2, [r7, #24]
 800d628:	88fb      	ldrh	r3, [r7, #6]
 800d62a:	429a      	cmp	r2, r3
 800d62c:	d901      	bls.n	800d632 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d62e:	88fb      	ldrh	r3, [r7, #6]
 800d630:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d632:	8b7b      	ldrh	r3, [r7, #26]
 800d634:	68ba      	ldr	r2, [r7, #8]
 800d636:	18d0      	adds	r0, r2, r3
 800d638:	69fb      	ldr	r3, [r7, #28]
 800d63a:	685a      	ldr	r2, [r3, #4]
 800d63c:	88bb      	ldrh	r3, [r7, #4]
 800d63e:	4413      	add	r3, r2
 800d640:	8b3a      	ldrh	r2, [r7, #24]
 800d642:	4619      	mov	r1, r3
 800d644:	f009 fc25 	bl	8016e92 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d648:	8afa      	ldrh	r2, [r7, #22]
 800d64a:	8b3b      	ldrh	r3, [r7, #24]
 800d64c:	4413      	add	r3, r2
 800d64e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d650:	8b7a      	ldrh	r2, [r7, #26]
 800d652:	8b3b      	ldrh	r3, [r7, #24]
 800d654:	4413      	add	r3, r2
 800d656:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d658:	88fa      	ldrh	r2, [r7, #6]
 800d65a:	8b3b      	ldrh	r3, [r7, #24]
 800d65c:	1ad3      	subs	r3, r2, r3
 800d65e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d660:	2300      	movs	r3, #0
 800d662:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d664:	69fb      	ldr	r3, [r7, #28]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	61fb      	str	r3, [r7, #28]
 800d66a:	88fb      	ldrh	r3, [r7, #6]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d002      	beq.n	800d676 <pbuf_copy_partial+0xca>
 800d670:	69fb      	ldr	r3, [r7, #28]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d1c4      	bne.n	800d600 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d676:	8afb      	ldrh	r3, [r7, #22]
}
 800d678:	4618      	mov	r0, r3
 800d67a:	3720      	adds	r7, #32
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}
 800d680:	08018c68 	.word	0x08018c68
 800d684:	08018fb0 	.word	0x08018fb0
 800d688:	08018cc8 	.word	0x08018cc8
 800d68c:	08018fd0 	.word	0x08018fd0

0800d690 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b084      	sub	sp, #16
 800d694:	af00      	add	r7, sp, #0
 800d696:	4603      	mov	r3, r0
 800d698:	603a      	str	r2, [r7, #0]
 800d69a:	71fb      	strb	r3, [r7, #7]
 800d69c:	460b      	mov	r3, r1
 800d69e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	8919      	ldrh	r1, [r3, #8]
 800d6a4:	88ba      	ldrh	r2, [r7, #4]
 800d6a6:	79fb      	ldrb	r3, [r7, #7]
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f7ff faa5 	bl	800cbf8 <pbuf_alloc>
 800d6ae:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d101      	bne.n	800d6ba <pbuf_clone+0x2a>
    return NULL;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	e011      	b.n	800d6de <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d6ba:	6839      	ldr	r1, [r7, #0]
 800d6bc:	68f8      	ldr	r0, [r7, #12]
 800d6be:	f7ff fea3 	bl	800d408 <pbuf_copy>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d6c6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d006      	beq.n	800d6dc <pbuf_clone+0x4c>
 800d6ce:	4b06      	ldr	r3, [pc, #24]	@ (800d6e8 <pbuf_clone+0x58>)
 800d6d0:	f240 5224 	movw	r2, #1316	@ 0x524
 800d6d4:	4905      	ldr	r1, [pc, #20]	@ (800d6ec <pbuf_clone+0x5c>)
 800d6d6:	4806      	ldr	r0, [pc, #24]	@ (800d6f0 <pbuf_clone+0x60>)
 800d6d8:	f009 faaa 	bl	8016c30 <iprintf>
  return q;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	3710      	adds	r7, #16
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}
 800d6e6:	bf00      	nop
 800d6e8:	08018c68 	.word	0x08018c68
 800d6ec:	080190dc 	.word	0x080190dc
 800d6f0:	08018cc8 	.word	0x08018cc8

0800d6f4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d6f8:	f009 f99a 	bl	8016a30 <rand>
 800d6fc:	4603      	mov	r3, r0
 800d6fe:	b29b      	uxth	r3, r3
 800d700:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d704:	b29b      	uxth	r3, r3
 800d706:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800d70a:	b29a      	uxth	r2, r3
 800d70c:	4b01      	ldr	r3, [pc, #4]	@ (800d714 <tcp_init+0x20>)
 800d70e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d710:	bf00      	nop
 800d712:	bd80      	pop	{r7, pc}
 800d714:	24000028 	.word	0x24000028

0800d718 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b082      	sub	sp, #8
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	7d1b      	ldrb	r3, [r3, #20]
 800d724:	2b01      	cmp	r3, #1
 800d726:	d105      	bne.n	800d734 <tcp_free+0x1c>
 800d728:	4b06      	ldr	r3, [pc, #24]	@ (800d744 <tcp_free+0x2c>)
 800d72a:	22d4      	movs	r2, #212	@ 0xd4
 800d72c:	4906      	ldr	r1, [pc, #24]	@ (800d748 <tcp_free+0x30>)
 800d72e:	4807      	ldr	r0, [pc, #28]	@ (800d74c <tcp_free+0x34>)
 800d730:	f009 fa7e 	bl	8016c30 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d734:	6879      	ldr	r1, [r7, #4]
 800d736:	2001      	movs	r0, #1
 800d738:	f7fe fe9e 	bl	800c478 <memp_free>
}
 800d73c:	bf00      	nop
 800d73e:	3708      	adds	r7, #8
 800d740:	46bd      	mov	sp, r7
 800d742:	bd80      	pop	{r7, pc}
 800d744:	08019168 	.word	0x08019168
 800d748:	08019198 	.word	0x08019198
 800d74c:	080191ac 	.word	0x080191ac

0800d750 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b082      	sub	sp, #8
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	7d1b      	ldrb	r3, [r3, #20]
 800d75c:	2b01      	cmp	r3, #1
 800d75e:	d105      	bne.n	800d76c <tcp_free_listen+0x1c>
 800d760:	4b06      	ldr	r3, [pc, #24]	@ (800d77c <tcp_free_listen+0x2c>)
 800d762:	22df      	movs	r2, #223	@ 0xdf
 800d764:	4906      	ldr	r1, [pc, #24]	@ (800d780 <tcp_free_listen+0x30>)
 800d766:	4807      	ldr	r0, [pc, #28]	@ (800d784 <tcp_free_listen+0x34>)
 800d768:	f009 fa62 	bl	8016c30 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d76c:	6879      	ldr	r1, [r7, #4]
 800d76e:	2002      	movs	r0, #2
 800d770:	f7fe fe82 	bl	800c478 <memp_free>
}
 800d774:	bf00      	nop
 800d776:	3708      	adds	r7, #8
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}
 800d77c:	08019168 	.word	0x08019168
 800d780:	080191d4 	.word	0x080191d4
 800d784:	080191ac 	.word	0x080191ac

0800d788 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d78c:	f001 f8a8 	bl	800e8e0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d790:	4b07      	ldr	r3, [pc, #28]	@ (800d7b0 <tcp_tmr+0x28>)
 800d792:	781b      	ldrb	r3, [r3, #0]
 800d794:	3301      	adds	r3, #1
 800d796:	b2da      	uxtb	r2, r3
 800d798:	4b05      	ldr	r3, [pc, #20]	@ (800d7b0 <tcp_tmr+0x28>)
 800d79a:	701a      	strb	r2, [r3, #0]
 800d79c:	4b04      	ldr	r3, [pc, #16]	@ (800d7b0 <tcp_tmr+0x28>)
 800d79e:	781b      	ldrb	r3, [r3, #0]
 800d7a0:	f003 0301 	and.w	r3, r3, #1
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d001      	beq.n	800d7ac <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d7a8:	f000 fd58 	bl	800e25c <tcp_slowtmr>
  }
}
 800d7ac:	bf00      	nop
 800d7ae:	bd80      	pop	{r7, pc}
 800d7b0:	24007f19 	.word	0x24007f19

0800d7b4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b084      	sub	sp, #16
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
 800d7bc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d105      	bne.n	800d7d0 <tcp_remove_listener+0x1c>
 800d7c4:	4b0d      	ldr	r3, [pc, #52]	@ (800d7fc <tcp_remove_listener+0x48>)
 800d7c6:	22ff      	movs	r2, #255	@ 0xff
 800d7c8:	490d      	ldr	r1, [pc, #52]	@ (800d800 <tcp_remove_listener+0x4c>)
 800d7ca:	480e      	ldr	r0, [pc, #56]	@ (800d804 <tcp_remove_listener+0x50>)
 800d7cc:	f009 fa30 	bl	8016c30 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	60fb      	str	r3, [r7, #12]
 800d7d4:	e00a      	b.n	800d7ec <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d7da:	683a      	ldr	r2, [r7, #0]
 800d7dc:	429a      	cmp	r2, r3
 800d7de:	d102      	bne.n	800d7e6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	68db      	ldr	r3, [r3, #12]
 800d7ea:	60fb      	str	r3, [r7, #12]
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d1f1      	bne.n	800d7d6 <tcp_remove_listener+0x22>
    }
  }
}
 800d7f2:	bf00      	nop
 800d7f4:	bf00      	nop
 800d7f6:	3710      	adds	r7, #16
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}
 800d7fc:	08019168 	.word	0x08019168
 800d800:	080191f0 	.word	0x080191f0
 800d804:	080191ac 	.word	0x080191ac

0800d808 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b084      	sub	sp, #16
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d106      	bne.n	800d824 <tcp_listen_closed+0x1c>
 800d816:	4b14      	ldr	r3, [pc, #80]	@ (800d868 <tcp_listen_closed+0x60>)
 800d818:	f240 1211 	movw	r2, #273	@ 0x111
 800d81c:	4913      	ldr	r1, [pc, #76]	@ (800d86c <tcp_listen_closed+0x64>)
 800d81e:	4814      	ldr	r0, [pc, #80]	@ (800d870 <tcp_listen_closed+0x68>)
 800d820:	f009 fa06 	bl	8016c30 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	7d1b      	ldrb	r3, [r3, #20]
 800d828:	2b01      	cmp	r3, #1
 800d82a:	d006      	beq.n	800d83a <tcp_listen_closed+0x32>
 800d82c:	4b0e      	ldr	r3, [pc, #56]	@ (800d868 <tcp_listen_closed+0x60>)
 800d82e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800d832:	4910      	ldr	r1, [pc, #64]	@ (800d874 <tcp_listen_closed+0x6c>)
 800d834:	480e      	ldr	r0, [pc, #56]	@ (800d870 <tcp_listen_closed+0x68>)
 800d836:	f009 f9fb 	bl	8016c30 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d83a:	2301      	movs	r3, #1
 800d83c:	60fb      	str	r3, [r7, #12]
 800d83e:	e00b      	b.n	800d858 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d840:	4a0d      	ldr	r2, [pc, #52]	@ (800d878 <tcp_listen_closed+0x70>)
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	6879      	ldr	r1, [r7, #4]
 800d84c:	4618      	mov	r0, r3
 800d84e:	f7ff ffb1 	bl	800d7b4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	3301      	adds	r3, #1
 800d856:	60fb      	str	r3, [r7, #12]
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	2b03      	cmp	r3, #3
 800d85c:	d9f0      	bls.n	800d840 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d85e:	bf00      	nop
 800d860:	bf00      	nop
 800d862:	3710      	adds	r7, #16
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}
 800d868:	08019168 	.word	0x08019168
 800d86c:	08019218 	.word	0x08019218
 800d870:	080191ac 	.word	0x080191ac
 800d874:	08019224 	.word	0x08019224
 800d878:	0801b1a8 	.word	0x0801b1a8

0800d87c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d87c:	b5b0      	push	{r4, r5, r7, lr}
 800d87e:	b088      	sub	sp, #32
 800d880:	af04      	add	r7, sp, #16
 800d882:	6078      	str	r0, [r7, #4]
 800d884:	460b      	mov	r3, r1
 800d886:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d106      	bne.n	800d89c <tcp_close_shutdown+0x20>
 800d88e:	4b63      	ldr	r3, [pc, #396]	@ (800da1c <tcp_close_shutdown+0x1a0>)
 800d890:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800d894:	4962      	ldr	r1, [pc, #392]	@ (800da20 <tcp_close_shutdown+0x1a4>)
 800d896:	4863      	ldr	r0, [pc, #396]	@ (800da24 <tcp_close_shutdown+0x1a8>)
 800d898:	f009 f9ca 	bl	8016c30 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d89c:	78fb      	ldrb	r3, [r7, #3]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d066      	beq.n	800d970 <tcp_close_shutdown+0xf4>
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	7d1b      	ldrb	r3, [r3, #20]
 800d8a6:	2b04      	cmp	r3, #4
 800d8a8:	d003      	beq.n	800d8b2 <tcp_close_shutdown+0x36>
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	7d1b      	ldrb	r3, [r3, #20]
 800d8ae:	2b07      	cmp	r3, #7
 800d8b0:	d15e      	bne.n	800d970 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d104      	bne.n	800d8c4 <tcp_close_shutdown+0x48>
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d8be:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800d8c2:	d055      	beq.n	800d970 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	8b5b      	ldrh	r3, [r3, #26]
 800d8c8:	f003 0310 	and.w	r3, r3, #16
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d106      	bne.n	800d8de <tcp_close_shutdown+0x62>
 800d8d0:	4b52      	ldr	r3, [pc, #328]	@ (800da1c <tcp_close_shutdown+0x1a0>)
 800d8d2:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800d8d6:	4954      	ldr	r1, [pc, #336]	@ (800da28 <tcp_close_shutdown+0x1ac>)
 800d8d8:	4852      	ldr	r0, [pc, #328]	@ (800da24 <tcp_close_shutdown+0x1a8>)
 800d8da:	f009 f9a9 	bl	8016c30 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800d8e6:	687d      	ldr	r5, [r7, #4]
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	3304      	adds	r3, #4
 800d8ec:	687a      	ldr	r2, [r7, #4]
 800d8ee:	8ad2      	ldrh	r2, [r2, #22]
 800d8f0:	6879      	ldr	r1, [r7, #4]
 800d8f2:	8b09      	ldrh	r1, [r1, #24]
 800d8f4:	9102      	str	r1, [sp, #8]
 800d8f6:	9201      	str	r2, [sp, #4]
 800d8f8:	9300      	str	r3, [sp, #0]
 800d8fa:	462b      	mov	r3, r5
 800d8fc:	4622      	mov	r2, r4
 800d8fe:	4601      	mov	r1, r0
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f005 fdb7 	bl	8013474 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f001 fb9a 	bl	800f040 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d90c:	4b47      	ldr	r3, [pc, #284]	@ (800da2c <tcp_close_shutdown+0x1b0>)
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	687a      	ldr	r2, [r7, #4]
 800d912:	429a      	cmp	r2, r3
 800d914:	d105      	bne.n	800d922 <tcp_close_shutdown+0xa6>
 800d916:	4b45      	ldr	r3, [pc, #276]	@ (800da2c <tcp_close_shutdown+0x1b0>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	68db      	ldr	r3, [r3, #12]
 800d91c:	4a43      	ldr	r2, [pc, #268]	@ (800da2c <tcp_close_shutdown+0x1b0>)
 800d91e:	6013      	str	r3, [r2, #0]
 800d920:	e013      	b.n	800d94a <tcp_close_shutdown+0xce>
 800d922:	4b42      	ldr	r3, [pc, #264]	@ (800da2c <tcp_close_shutdown+0x1b0>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	60fb      	str	r3, [r7, #12]
 800d928:	e00c      	b.n	800d944 <tcp_close_shutdown+0xc8>
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	68db      	ldr	r3, [r3, #12]
 800d92e:	687a      	ldr	r2, [r7, #4]
 800d930:	429a      	cmp	r2, r3
 800d932:	d104      	bne.n	800d93e <tcp_close_shutdown+0xc2>
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	68da      	ldr	r2, [r3, #12]
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	60da      	str	r2, [r3, #12]
 800d93c:	e005      	b.n	800d94a <tcp_close_shutdown+0xce>
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	68db      	ldr	r3, [r3, #12]
 800d942:	60fb      	str	r3, [r7, #12]
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d1ef      	bne.n	800d92a <tcp_close_shutdown+0xae>
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	2200      	movs	r2, #0
 800d94e:	60da      	str	r2, [r3, #12]
 800d950:	4b37      	ldr	r3, [pc, #220]	@ (800da30 <tcp_close_shutdown+0x1b4>)
 800d952:	2201      	movs	r2, #1
 800d954:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d956:	4b37      	ldr	r3, [pc, #220]	@ (800da34 <tcp_close_shutdown+0x1b8>)
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	687a      	ldr	r2, [r7, #4]
 800d95c:	429a      	cmp	r2, r3
 800d95e:	d102      	bne.n	800d966 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d960:	f004 f82e 	bl	80119c0 <tcp_trigger_input_pcb_close>
 800d964:	e002      	b.n	800d96c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f7ff fed6 	bl	800d718 <tcp_free>
      }
      return ERR_OK;
 800d96c:	2300      	movs	r3, #0
 800d96e:	e050      	b.n	800da12 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	7d1b      	ldrb	r3, [r3, #20]
 800d974:	2b02      	cmp	r3, #2
 800d976:	d03b      	beq.n	800d9f0 <tcp_close_shutdown+0x174>
 800d978:	2b02      	cmp	r3, #2
 800d97a:	dc44      	bgt.n	800da06 <tcp_close_shutdown+0x18a>
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d002      	beq.n	800d986 <tcp_close_shutdown+0x10a>
 800d980:	2b01      	cmp	r3, #1
 800d982:	d02a      	beq.n	800d9da <tcp_close_shutdown+0x15e>
 800d984:	e03f      	b.n	800da06 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	8adb      	ldrh	r3, [r3, #22]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d021      	beq.n	800d9d2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d98e:	4b2a      	ldr	r3, [pc, #168]	@ (800da38 <tcp_close_shutdown+0x1bc>)
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	687a      	ldr	r2, [r7, #4]
 800d994:	429a      	cmp	r2, r3
 800d996:	d105      	bne.n	800d9a4 <tcp_close_shutdown+0x128>
 800d998:	4b27      	ldr	r3, [pc, #156]	@ (800da38 <tcp_close_shutdown+0x1bc>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	68db      	ldr	r3, [r3, #12]
 800d99e:	4a26      	ldr	r2, [pc, #152]	@ (800da38 <tcp_close_shutdown+0x1bc>)
 800d9a0:	6013      	str	r3, [r2, #0]
 800d9a2:	e013      	b.n	800d9cc <tcp_close_shutdown+0x150>
 800d9a4:	4b24      	ldr	r3, [pc, #144]	@ (800da38 <tcp_close_shutdown+0x1bc>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	60bb      	str	r3, [r7, #8]
 800d9aa:	e00c      	b.n	800d9c6 <tcp_close_shutdown+0x14a>
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	68db      	ldr	r3, [r3, #12]
 800d9b0:	687a      	ldr	r2, [r7, #4]
 800d9b2:	429a      	cmp	r2, r3
 800d9b4:	d104      	bne.n	800d9c0 <tcp_close_shutdown+0x144>
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	68da      	ldr	r2, [r3, #12]
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	60da      	str	r2, [r3, #12]
 800d9be:	e005      	b.n	800d9cc <tcp_close_shutdown+0x150>
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	68db      	ldr	r3, [r3, #12]
 800d9c4:	60bb      	str	r3, [r7, #8]
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d1ef      	bne.n	800d9ac <tcp_close_shutdown+0x130>
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f7ff fea0 	bl	800d718 <tcp_free>
      break;
 800d9d8:	e01a      	b.n	800da10 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d9da:	6878      	ldr	r0, [r7, #4]
 800d9dc:	f7ff ff14 	bl	800d808 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d9e0:	6879      	ldr	r1, [r7, #4]
 800d9e2:	4816      	ldr	r0, [pc, #88]	@ (800da3c <tcp_close_shutdown+0x1c0>)
 800d9e4:	f001 fb7c 	bl	800f0e0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	f7ff feb1 	bl	800d750 <tcp_free_listen>
      break;
 800d9ee:	e00f      	b.n	800da10 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d9f0:	6879      	ldr	r1, [r7, #4]
 800d9f2:	480e      	ldr	r0, [pc, #56]	@ (800da2c <tcp_close_shutdown+0x1b0>)
 800d9f4:	f001 fb74 	bl	800f0e0 <tcp_pcb_remove>
 800d9f8:	4b0d      	ldr	r3, [pc, #52]	@ (800da30 <tcp_close_shutdown+0x1b4>)
 800d9fa:	2201      	movs	r2, #1
 800d9fc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	f7ff fe8a 	bl	800d718 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800da04:	e004      	b.n	800da10 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800da06:	6878      	ldr	r0, [r7, #4]
 800da08:	f000 f81a 	bl	800da40 <tcp_close_shutdown_fin>
 800da0c:	4603      	mov	r3, r0
 800da0e:	e000      	b.n	800da12 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800da10:	2300      	movs	r3, #0
}
 800da12:	4618      	mov	r0, r3
 800da14:	3710      	adds	r7, #16
 800da16:	46bd      	mov	sp, r7
 800da18:	bdb0      	pop	{r4, r5, r7, pc}
 800da1a:	bf00      	nop
 800da1c:	08019168 	.word	0x08019168
 800da20:	0801923c 	.word	0x0801923c
 800da24:	080191ac 	.word	0x080191ac
 800da28:	0801925c 	.word	0x0801925c
 800da2c:	24007f10 	.word	0x24007f10
 800da30:	24007f18 	.word	0x24007f18
 800da34:	24007f50 	.word	0x24007f50
 800da38:	24007f08 	.word	0x24007f08
 800da3c:	24007f0c 	.word	0x24007f0c

0800da40 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b084      	sub	sp, #16
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d106      	bne.n	800da5c <tcp_close_shutdown_fin+0x1c>
 800da4e:	4b2e      	ldr	r3, [pc, #184]	@ (800db08 <tcp_close_shutdown_fin+0xc8>)
 800da50:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800da54:	492d      	ldr	r1, [pc, #180]	@ (800db0c <tcp_close_shutdown_fin+0xcc>)
 800da56:	482e      	ldr	r0, [pc, #184]	@ (800db10 <tcp_close_shutdown_fin+0xd0>)
 800da58:	f009 f8ea 	bl	8016c30 <iprintf>

  switch (pcb->state) {
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	7d1b      	ldrb	r3, [r3, #20]
 800da60:	2b07      	cmp	r3, #7
 800da62:	d020      	beq.n	800daa6 <tcp_close_shutdown_fin+0x66>
 800da64:	2b07      	cmp	r3, #7
 800da66:	dc2b      	bgt.n	800dac0 <tcp_close_shutdown_fin+0x80>
 800da68:	2b03      	cmp	r3, #3
 800da6a:	d002      	beq.n	800da72 <tcp_close_shutdown_fin+0x32>
 800da6c:	2b04      	cmp	r3, #4
 800da6e:	d00d      	beq.n	800da8c <tcp_close_shutdown_fin+0x4c>
 800da70:	e026      	b.n	800dac0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	f004 fe0c 	bl	8012690 <tcp_send_fin>
 800da78:	4603      	mov	r3, r0
 800da7a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800da7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d11f      	bne.n	800dac4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2205      	movs	r2, #5
 800da88:	751a      	strb	r2, [r3, #20]
      }
      break;
 800da8a:	e01b      	b.n	800dac4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f004 fdff 	bl	8012690 <tcp_send_fin>
 800da92:	4603      	mov	r3, r0
 800da94:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800da96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d114      	bne.n	800dac8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2205      	movs	r2, #5
 800daa2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800daa4:	e010      	b.n	800dac8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	f004 fdf2 	bl	8012690 <tcp_send_fin>
 800daac:	4603      	mov	r3, r0
 800daae:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dab0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d109      	bne.n	800dacc <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2209      	movs	r2, #9
 800dabc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dabe:	e005      	b.n	800dacc <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800dac0:	2300      	movs	r3, #0
 800dac2:	e01c      	b.n	800dafe <tcp_close_shutdown_fin+0xbe>
      break;
 800dac4:	bf00      	nop
 800dac6:	e002      	b.n	800dace <tcp_close_shutdown_fin+0x8e>
      break;
 800dac8:	bf00      	nop
 800daca:	e000      	b.n	800dace <tcp_close_shutdown_fin+0x8e>
      break;
 800dacc:	bf00      	nop
  }

  if (err == ERR_OK) {
 800dace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d103      	bne.n	800dade <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f004 ff18 	bl	801290c <tcp_output>
 800dadc:	e00d      	b.n	800dafa <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800dade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dae6:	d108      	bne.n	800dafa <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	8b5b      	ldrh	r3, [r3, #26]
 800daec:	f043 0308 	orr.w	r3, r3, #8
 800daf0:	b29a      	uxth	r2, r3
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800daf6:	2300      	movs	r3, #0
 800daf8:	e001      	b.n	800dafe <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800dafa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dafe:	4618      	mov	r0, r3
 800db00:	3710      	adds	r7, #16
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}
 800db06:	bf00      	nop
 800db08:	08019168 	.word	0x08019168
 800db0c:	08019218 	.word	0x08019218
 800db10:	080191ac 	.word	0x080191ac

0800db14 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b082      	sub	sp, #8
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d109      	bne.n	800db36 <tcp_close+0x22>
 800db22:	4b0f      	ldr	r3, [pc, #60]	@ (800db60 <tcp_close+0x4c>)
 800db24:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800db28:	490e      	ldr	r1, [pc, #56]	@ (800db64 <tcp_close+0x50>)
 800db2a:	480f      	ldr	r0, [pc, #60]	@ (800db68 <tcp_close+0x54>)
 800db2c:	f009 f880 	bl	8016c30 <iprintf>
 800db30:	f06f 030f 	mvn.w	r3, #15
 800db34:	e00f      	b.n	800db56 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	7d1b      	ldrb	r3, [r3, #20]
 800db3a:	2b01      	cmp	r3, #1
 800db3c:	d006      	beq.n	800db4c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	8b5b      	ldrh	r3, [r3, #26]
 800db42:	f043 0310 	orr.w	r3, r3, #16
 800db46:	b29a      	uxth	r2, r3
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800db4c:	2101      	movs	r1, #1
 800db4e:	6878      	ldr	r0, [r7, #4]
 800db50:	f7ff fe94 	bl	800d87c <tcp_close_shutdown>
 800db54:	4603      	mov	r3, r0
}
 800db56:	4618      	mov	r0, r3
 800db58:	3708      	adds	r7, #8
 800db5a:	46bd      	mov	sp, r7
 800db5c:	bd80      	pop	{r7, pc}
 800db5e:	bf00      	nop
 800db60:	08019168 	.word	0x08019168
 800db64:	08019278 	.word	0x08019278
 800db68:	080191ac 	.word	0x080191ac

0800db6c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b084      	sub	sp, #16
 800db70:	af00      	add	r7, sp, #0
 800db72:	60f8      	str	r0, [r7, #12]
 800db74:	60b9      	str	r1, [r7, #8]
 800db76:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d109      	bne.n	800db92 <tcp_shutdown+0x26>
 800db7e:	4b26      	ldr	r3, [pc, #152]	@ (800dc18 <tcp_shutdown+0xac>)
 800db80:	f240 2207 	movw	r2, #519	@ 0x207
 800db84:	4925      	ldr	r1, [pc, #148]	@ (800dc1c <tcp_shutdown+0xb0>)
 800db86:	4826      	ldr	r0, [pc, #152]	@ (800dc20 <tcp_shutdown+0xb4>)
 800db88:	f009 f852 	bl	8016c30 <iprintf>
 800db8c:	f06f 030f 	mvn.w	r3, #15
 800db90:	e03d      	b.n	800dc0e <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	7d1b      	ldrb	r3, [r3, #20]
 800db96:	2b01      	cmp	r3, #1
 800db98:	d102      	bne.n	800dba0 <tcp_shutdown+0x34>
    return ERR_CONN;
 800db9a:	f06f 030a 	mvn.w	r3, #10
 800db9e:	e036      	b.n	800dc0e <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800dba0:	68bb      	ldr	r3, [r7, #8]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d01b      	beq.n	800dbde <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	8b5b      	ldrh	r3, [r3, #26]
 800dbaa:	f043 0310 	orr.w	r3, r3, #16
 800dbae:	b29a      	uxth	r2, r3
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d005      	beq.n	800dbc6 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800dbba:	2101      	movs	r1, #1
 800dbbc:	68f8      	ldr	r0, [r7, #12]
 800dbbe:	f7ff fe5d 	bl	800d87c <tcp_close_shutdown>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	e023      	b.n	800dc0e <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d007      	beq.n	800dbde <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f7ff faf4 	bl	800d1c0 <pbuf_free>
      pcb->refused_data = NULL;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	2200      	movs	r2, #0
 800dbdc:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d013      	beq.n	800dc0c <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	7d1b      	ldrb	r3, [r3, #20]
 800dbe8:	2b04      	cmp	r3, #4
 800dbea:	dc02      	bgt.n	800dbf2 <tcp_shutdown+0x86>
 800dbec:	2b03      	cmp	r3, #3
 800dbee:	da02      	bge.n	800dbf6 <tcp_shutdown+0x8a>
 800dbf0:	e009      	b.n	800dc06 <tcp_shutdown+0x9a>
 800dbf2:	2b07      	cmp	r3, #7
 800dbf4:	d107      	bne.n	800dc06 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	b2db      	uxtb	r3, r3
 800dbfa:	4619      	mov	r1, r3
 800dbfc:	68f8      	ldr	r0, [r7, #12]
 800dbfe:	f7ff fe3d 	bl	800d87c <tcp_close_shutdown>
 800dc02:	4603      	mov	r3, r0
 800dc04:	e003      	b.n	800dc0e <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800dc06:	f06f 030a 	mvn.w	r3, #10
 800dc0a:	e000      	b.n	800dc0e <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800dc0c:	2300      	movs	r3, #0
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3710      	adds	r7, #16
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}
 800dc16:	bf00      	nop
 800dc18:	08019168 	.word	0x08019168
 800dc1c:	08019290 	.word	0x08019290
 800dc20:	080191ac 	.word	0x080191ac

0800dc24 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b08e      	sub	sp, #56	@ 0x38
 800dc28:	af04      	add	r7, sp, #16
 800dc2a:	6078      	str	r0, [r7, #4]
 800dc2c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d107      	bne.n	800dc44 <tcp_abandon+0x20>
 800dc34:	4b52      	ldr	r3, [pc, #328]	@ (800dd80 <tcp_abandon+0x15c>)
 800dc36:	f240 223d 	movw	r2, #573	@ 0x23d
 800dc3a:	4952      	ldr	r1, [pc, #328]	@ (800dd84 <tcp_abandon+0x160>)
 800dc3c:	4852      	ldr	r0, [pc, #328]	@ (800dd88 <tcp_abandon+0x164>)
 800dc3e:	f008 fff7 	bl	8016c30 <iprintf>
 800dc42:	e099      	b.n	800dd78 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	7d1b      	ldrb	r3, [r3, #20]
 800dc48:	2b01      	cmp	r3, #1
 800dc4a:	d106      	bne.n	800dc5a <tcp_abandon+0x36>
 800dc4c:	4b4c      	ldr	r3, [pc, #304]	@ (800dd80 <tcp_abandon+0x15c>)
 800dc4e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800dc52:	494e      	ldr	r1, [pc, #312]	@ (800dd8c <tcp_abandon+0x168>)
 800dc54:	484c      	ldr	r0, [pc, #304]	@ (800dd88 <tcp_abandon+0x164>)
 800dc56:	f008 ffeb 	bl	8016c30 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	7d1b      	ldrb	r3, [r3, #20]
 800dc5e:	2b0a      	cmp	r3, #10
 800dc60:	d107      	bne.n	800dc72 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800dc62:	6879      	ldr	r1, [r7, #4]
 800dc64:	484a      	ldr	r0, [pc, #296]	@ (800dd90 <tcp_abandon+0x16c>)
 800dc66:	f001 fa3b 	bl	800f0e0 <tcp_pcb_remove>
    tcp_free(pcb);
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	f7ff fd54 	bl	800d718 <tcp_free>
 800dc70:	e082      	b.n	800dd78 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800dc72:	2300      	movs	r3, #0
 800dc74:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800dc76:	2300      	movs	r3, #0
 800dc78:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc7e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc84:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dc8c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	691b      	ldr	r3, [r3, #16]
 800dc92:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	7d1b      	ldrb	r3, [r3, #20]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d126      	bne.n	800dcea <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	8adb      	ldrh	r3, [r3, #22]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d02e      	beq.n	800dd02 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dca4:	4b3b      	ldr	r3, [pc, #236]	@ (800dd94 <tcp_abandon+0x170>)
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	687a      	ldr	r2, [r7, #4]
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	d105      	bne.n	800dcba <tcp_abandon+0x96>
 800dcae:	4b39      	ldr	r3, [pc, #228]	@ (800dd94 <tcp_abandon+0x170>)
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	68db      	ldr	r3, [r3, #12]
 800dcb4:	4a37      	ldr	r2, [pc, #220]	@ (800dd94 <tcp_abandon+0x170>)
 800dcb6:	6013      	str	r3, [r2, #0]
 800dcb8:	e013      	b.n	800dce2 <tcp_abandon+0xbe>
 800dcba:	4b36      	ldr	r3, [pc, #216]	@ (800dd94 <tcp_abandon+0x170>)
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	61fb      	str	r3, [r7, #28]
 800dcc0:	e00c      	b.n	800dcdc <tcp_abandon+0xb8>
 800dcc2:	69fb      	ldr	r3, [r7, #28]
 800dcc4:	68db      	ldr	r3, [r3, #12]
 800dcc6:	687a      	ldr	r2, [r7, #4]
 800dcc8:	429a      	cmp	r2, r3
 800dcca:	d104      	bne.n	800dcd6 <tcp_abandon+0xb2>
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	68da      	ldr	r2, [r3, #12]
 800dcd0:	69fb      	ldr	r3, [r7, #28]
 800dcd2:	60da      	str	r2, [r3, #12]
 800dcd4:	e005      	b.n	800dce2 <tcp_abandon+0xbe>
 800dcd6:	69fb      	ldr	r3, [r7, #28]
 800dcd8:	68db      	ldr	r3, [r3, #12]
 800dcda:	61fb      	str	r3, [r7, #28]
 800dcdc:	69fb      	ldr	r3, [r7, #28]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d1ef      	bne.n	800dcc2 <tcp_abandon+0x9e>
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2200      	movs	r2, #0
 800dce6:	60da      	str	r2, [r3, #12]
 800dce8:	e00b      	b.n	800dd02 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	8adb      	ldrh	r3, [r3, #22]
 800dcf2:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800dcf4:	6879      	ldr	r1, [r7, #4]
 800dcf6:	4828      	ldr	r0, [pc, #160]	@ (800dd98 <tcp_abandon+0x174>)
 800dcf8:	f001 f9f2 	bl	800f0e0 <tcp_pcb_remove>
 800dcfc:	4b27      	ldr	r3, [pc, #156]	@ (800dd9c <tcp_abandon+0x178>)
 800dcfe:	2201      	movs	r2, #1
 800dd00:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d004      	beq.n	800dd14 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f000 fec6 	bl	800eaa0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d004      	beq.n	800dd26 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd20:	4618      	mov	r0, r3
 800dd22:	f000 febd 	bl	800eaa0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d004      	beq.n	800dd38 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dd32:	4618      	mov	r0, r3
 800dd34:	f000 feb4 	bl	800eaa0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800dd38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d00e      	beq.n	800dd5c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800dd3e:	6879      	ldr	r1, [r7, #4]
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	3304      	adds	r3, #4
 800dd44:	687a      	ldr	r2, [r7, #4]
 800dd46:	8b12      	ldrh	r2, [r2, #24]
 800dd48:	9202      	str	r2, [sp, #8]
 800dd4a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800dd4c:	9201      	str	r2, [sp, #4]
 800dd4e:	9300      	str	r3, [sp, #0]
 800dd50:	460b      	mov	r3, r1
 800dd52:	697a      	ldr	r2, [r7, #20]
 800dd54:	69b9      	ldr	r1, [r7, #24]
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f005 fb8c 	bl	8013474 <tcp_rst>
    }
    last_state = pcb->state;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	7d1b      	ldrb	r3, [r3, #20]
 800dd60:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f7ff fcd8 	bl	800d718 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800dd68:	693b      	ldr	r3, [r7, #16]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d004      	beq.n	800dd78 <tcp_abandon+0x154>
 800dd6e:	693b      	ldr	r3, [r7, #16]
 800dd70:	f06f 010c 	mvn.w	r1, #12
 800dd74:	68f8      	ldr	r0, [r7, #12]
 800dd76:	4798      	blx	r3
  }
}
 800dd78:	3728      	adds	r7, #40	@ 0x28
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}
 800dd7e:	bf00      	nop
 800dd80:	08019168 	.word	0x08019168
 800dd84:	080192ac 	.word	0x080192ac
 800dd88:	080191ac 	.word	0x080191ac
 800dd8c:	080192c8 	.word	0x080192c8
 800dd90:	24007f14 	.word	0x24007f14
 800dd94:	24007f08 	.word	0x24007f08
 800dd98:	24007f10 	.word	0x24007f10
 800dd9c:	24007f18 	.word	0x24007f18

0800dda0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b082      	sub	sp, #8
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800dda8:	2101      	movs	r1, #1
 800ddaa:	6878      	ldr	r0, [r7, #4]
 800ddac:	f7ff ff3a 	bl	800dc24 <tcp_abandon>
}
 800ddb0:	bf00      	nop
 800ddb2:	3708      	adds	r7, #8
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bd80      	pop	{r7, pc}

0800ddb8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b088      	sub	sp, #32
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	60f8      	str	r0, [r7, #12]
 800ddc0:	60b9      	str	r1, [r7, #8]
 800ddc2:	4613      	mov	r3, r2
 800ddc4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800ddc6:	2304      	movs	r3, #4
 800ddc8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d101      	bne.n	800ddd4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800ddd0:	4b3e      	ldr	r3, [pc, #248]	@ (800decc <tcp_bind+0x114>)
 800ddd2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d109      	bne.n	800ddee <tcp_bind+0x36>
 800ddda:	4b3d      	ldr	r3, [pc, #244]	@ (800ded0 <tcp_bind+0x118>)
 800dddc:	f240 22a9 	movw	r2, #681	@ 0x2a9
 800dde0:	493c      	ldr	r1, [pc, #240]	@ (800ded4 <tcp_bind+0x11c>)
 800dde2:	483d      	ldr	r0, [pc, #244]	@ (800ded8 <tcp_bind+0x120>)
 800dde4:	f008 ff24 	bl	8016c30 <iprintf>
 800dde8:	f06f 030f 	mvn.w	r3, #15
 800ddec:	e06a      	b.n	800dec4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	7d1b      	ldrb	r3, [r3, #20]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d009      	beq.n	800de0a <tcp_bind+0x52>
 800ddf6:	4b36      	ldr	r3, [pc, #216]	@ (800ded0 <tcp_bind+0x118>)
 800ddf8:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800ddfc:	4937      	ldr	r1, [pc, #220]	@ (800dedc <tcp_bind+0x124>)
 800ddfe:	4836      	ldr	r0, [pc, #216]	@ (800ded8 <tcp_bind+0x120>)
 800de00:	f008 ff16 	bl	8016c30 <iprintf>
 800de04:	f06f 0305 	mvn.w	r3, #5
 800de08:	e05c      	b.n	800dec4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800de0a:	88fb      	ldrh	r3, [r7, #6]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d109      	bne.n	800de24 <tcp_bind+0x6c>
    port = tcp_new_port();
 800de10:	f000 f9de 	bl	800e1d0 <tcp_new_port>
 800de14:	4603      	mov	r3, r0
 800de16:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800de18:	88fb      	ldrh	r3, [r7, #6]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d135      	bne.n	800de8a <tcp_bind+0xd2>
      return ERR_BUF;
 800de1e:	f06f 0301 	mvn.w	r3, #1
 800de22:	e04f      	b.n	800dec4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800de24:	2300      	movs	r3, #0
 800de26:	61fb      	str	r3, [r7, #28]
 800de28:	e02b      	b.n	800de82 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800de2a:	4a2d      	ldr	r2, [pc, #180]	@ (800dee0 <tcp_bind+0x128>)
 800de2c:	69fb      	ldr	r3, [r7, #28]
 800de2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	61bb      	str	r3, [r7, #24]
 800de36:	e01e      	b.n	800de76 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800de38:	69bb      	ldr	r3, [r7, #24]
 800de3a:	8adb      	ldrh	r3, [r3, #22]
 800de3c:	88fa      	ldrh	r2, [r7, #6]
 800de3e:	429a      	cmp	r2, r3
 800de40:	d116      	bne.n	800de70 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800de42:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800de44:	2b00      	cmp	r3, #0
 800de46:	d010      	beq.n	800de6a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800de48:	69bb      	ldr	r3, [r7, #24]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d00c      	beq.n	800de6a <tcp_bind+0xb2>
 800de50:	68bb      	ldr	r3, [r7, #8]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d009      	beq.n	800de6a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d005      	beq.n	800de6a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800de5e:	69bb      	ldr	r3, [r7, #24]
 800de60:	681a      	ldr	r2, [r3, #0]
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800de66:	429a      	cmp	r2, r3
 800de68:	d102      	bne.n	800de70 <tcp_bind+0xb8>
              return ERR_USE;
 800de6a:	f06f 0307 	mvn.w	r3, #7
 800de6e:	e029      	b.n	800dec4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800de70:	69bb      	ldr	r3, [r7, #24]
 800de72:	68db      	ldr	r3, [r3, #12]
 800de74:	61bb      	str	r3, [r7, #24]
 800de76:	69bb      	ldr	r3, [r7, #24]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d1dd      	bne.n	800de38 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800de7c:	69fb      	ldr	r3, [r7, #28]
 800de7e:	3301      	adds	r3, #1
 800de80:	61fb      	str	r3, [r7, #28]
 800de82:	69fa      	ldr	r2, [r7, #28]
 800de84:	697b      	ldr	r3, [r7, #20]
 800de86:	429a      	cmp	r2, r3
 800de88:	dbcf      	blt.n	800de2a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800de8a:	68bb      	ldr	r3, [r7, #8]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d00c      	beq.n	800deaa <tcp_bind+0xf2>
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d008      	beq.n	800deaa <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d002      	beq.n	800dea4 <tcp_bind+0xec>
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	e000      	b.n	800dea6 <tcp_bind+0xee>
 800dea4:	2300      	movs	r3, #0
 800dea6:	68fa      	ldr	r2, [r7, #12]
 800dea8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	88fa      	ldrh	r2, [r7, #6]
 800deae:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800deb0:	4b0c      	ldr	r3, [pc, #48]	@ (800dee4 <tcp_bind+0x12c>)
 800deb2:	681a      	ldr	r2, [r3, #0]
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	60da      	str	r2, [r3, #12]
 800deb8:	4a0a      	ldr	r2, [pc, #40]	@ (800dee4 <tcp_bind+0x12c>)
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	6013      	str	r3, [r2, #0]
 800debe:	f005 fc9b 	bl	80137f8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800dec2:	2300      	movs	r3, #0
}
 800dec4:	4618      	mov	r0, r3
 800dec6:	3720      	adds	r7, #32
 800dec8:	46bd      	mov	sp, r7
 800deca:	bd80      	pop	{r7, pc}
 800decc:	0801b1d0 	.word	0x0801b1d0
 800ded0:	08019168 	.word	0x08019168
 800ded4:	080192fc 	.word	0x080192fc
 800ded8:	080191ac 	.word	0x080191ac
 800dedc:	08019314 	.word	0x08019314
 800dee0:	0801b1a8 	.word	0x0801b1a8
 800dee4:	24007f08 	.word	0x24007f08

0800dee8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b084      	sub	sp, #16
 800deec:	af00      	add	r7, sp, #0
 800deee:	60f8      	str	r0, [r7, #12]
 800def0:	60b9      	str	r1, [r7, #8]
 800def2:	4613      	mov	r3, r2
 800def4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800def6:	68bb      	ldr	r3, [r7, #8]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d106      	bne.n	800df0a <tcp_accept_null+0x22>
 800defc:	4b07      	ldr	r3, [pc, #28]	@ (800df1c <tcp_accept_null+0x34>)
 800defe:	f240 320f 	movw	r2, #783	@ 0x30f
 800df02:	4907      	ldr	r1, [pc, #28]	@ (800df20 <tcp_accept_null+0x38>)
 800df04:	4807      	ldr	r0, [pc, #28]	@ (800df24 <tcp_accept_null+0x3c>)
 800df06:	f008 fe93 	bl	8016c30 <iprintf>

  tcp_abort(pcb);
 800df0a:	68b8      	ldr	r0, [r7, #8]
 800df0c:	f7ff ff48 	bl	800dda0 <tcp_abort>

  return ERR_ABRT;
 800df10:	f06f 030c 	mvn.w	r3, #12
}
 800df14:	4618      	mov	r0, r3
 800df16:	3710      	adds	r7, #16
 800df18:	46bd      	mov	sp, r7
 800df1a:	bd80      	pop	{r7, pc}
 800df1c:	08019168 	.word	0x08019168
 800df20:	0801933c 	.word	0x0801933c
 800df24:	080191ac 	.word	0x080191ac

0800df28 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b088      	sub	sp, #32
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	60f8      	str	r0, [r7, #12]
 800df30:	460b      	mov	r3, r1
 800df32:	607a      	str	r2, [r7, #4]
 800df34:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800df36:	2300      	movs	r3, #0
 800df38:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d109      	bne.n	800df54 <tcp_listen_with_backlog_and_err+0x2c>
 800df40:	4b47      	ldr	r3, [pc, #284]	@ (800e060 <tcp_listen_with_backlog_and_err+0x138>)
 800df42:	f240 3259 	movw	r2, #857	@ 0x359
 800df46:	4947      	ldr	r1, [pc, #284]	@ (800e064 <tcp_listen_with_backlog_and_err+0x13c>)
 800df48:	4847      	ldr	r0, [pc, #284]	@ (800e068 <tcp_listen_with_backlog_and_err+0x140>)
 800df4a:	f008 fe71 	bl	8016c30 <iprintf>
 800df4e:	23f0      	movs	r3, #240	@ 0xf0
 800df50:	76fb      	strb	r3, [r7, #27]
 800df52:	e079      	b.n	800e048 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	7d1b      	ldrb	r3, [r3, #20]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d009      	beq.n	800df70 <tcp_listen_with_backlog_and_err+0x48>
 800df5c:	4b40      	ldr	r3, [pc, #256]	@ (800e060 <tcp_listen_with_backlog_and_err+0x138>)
 800df5e:	f240 325a 	movw	r2, #858	@ 0x35a
 800df62:	4942      	ldr	r1, [pc, #264]	@ (800e06c <tcp_listen_with_backlog_and_err+0x144>)
 800df64:	4840      	ldr	r0, [pc, #256]	@ (800e068 <tcp_listen_with_backlog_and_err+0x140>)
 800df66:	f008 fe63 	bl	8016c30 <iprintf>
 800df6a:	23f1      	movs	r3, #241	@ 0xf1
 800df6c:	76fb      	strb	r3, [r7, #27]
 800df6e:	e06b      	b.n	800e048 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	7d1b      	ldrb	r3, [r3, #20]
 800df74:	2b01      	cmp	r3, #1
 800df76:	d104      	bne.n	800df82 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800df7c:	23f7      	movs	r3, #247	@ 0xf7
 800df7e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800df80:	e062      	b.n	800e048 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800df82:	2002      	movs	r0, #2
 800df84:	f7fe fa02 	bl	800c38c <memp_malloc>
 800df88:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800df8a:	69fb      	ldr	r3, [r7, #28]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d102      	bne.n	800df96 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800df90:	23ff      	movs	r3, #255	@ 0xff
 800df92:	76fb      	strb	r3, [r7, #27]
    goto done;
 800df94:	e058      	b.n	800e048 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	691a      	ldr	r2, [r3, #16]
 800df9a:	69fb      	ldr	r3, [r7, #28]
 800df9c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	8ada      	ldrh	r2, [r3, #22]
 800dfa2:	69fb      	ldr	r3, [r7, #28]
 800dfa4:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800dfa6:	69fb      	ldr	r3, [r7, #28]
 800dfa8:	2201      	movs	r2, #1
 800dfaa:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	7d5a      	ldrb	r2, [r3, #21]
 800dfb0:	69fb      	ldr	r3, [r7, #28]
 800dfb2:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	7a5a      	ldrb	r2, [r3, #9]
 800dfb8:	69fb      	ldr	r3, [r7, #28]
 800dfba:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800dfbc:	69fb      	ldr	r3, [r7, #28]
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	7ada      	ldrb	r2, [r3, #11]
 800dfc6:	69fb      	ldr	r3, [r7, #28]
 800dfc8:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	7a9a      	ldrb	r2, [r3, #10]
 800dfce:	69fb      	ldr	r3, [r7, #28]
 800dfd0:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	681a      	ldr	r2, [r3, #0]
 800dfd6:	69fb      	ldr	r3, [r7, #28]
 800dfd8:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	8adb      	ldrh	r3, [r3, #22]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d021      	beq.n	800e026 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800dfe2:	4b23      	ldr	r3, [pc, #140]	@ (800e070 <tcp_listen_with_backlog_and_err+0x148>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	68fa      	ldr	r2, [r7, #12]
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	d105      	bne.n	800dff8 <tcp_listen_with_backlog_and_err+0xd0>
 800dfec:	4b20      	ldr	r3, [pc, #128]	@ (800e070 <tcp_listen_with_backlog_and_err+0x148>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	68db      	ldr	r3, [r3, #12]
 800dff2:	4a1f      	ldr	r2, [pc, #124]	@ (800e070 <tcp_listen_with_backlog_and_err+0x148>)
 800dff4:	6013      	str	r3, [r2, #0]
 800dff6:	e013      	b.n	800e020 <tcp_listen_with_backlog_and_err+0xf8>
 800dff8:	4b1d      	ldr	r3, [pc, #116]	@ (800e070 <tcp_listen_with_backlog_and_err+0x148>)
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	617b      	str	r3, [r7, #20]
 800dffe:	e00c      	b.n	800e01a <tcp_listen_with_backlog_and_err+0xf2>
 800e000:	697b      	ldr	r3, [r7, #20]
 800e002:	68db      	ldr	r3, [r3, #12]
 800e004:	68fa      	ldr	r2, [r7, #12]
 800e006:	429a      	cmp	r2, r3
 800e008:	d104      	bne.n	800e014 <tcp_listen_with_backlog_and_err+0xec>
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	68da      	ldr	r2, [r3, #12]
 800e00e:	697b      	ldr	r3, [r7, #20]
 800e010:	60da      	str	r2, [r3, #12]
 800e012:	e005      	b.n	800e020 <tcp_listen_with_backlog_and_err+0xf8>
 800e014:	697b      	ldr	r3, [r7, #20]
 800e016:	68db      	ldr	r3, [r3, #12]
 800e018:	617b      	str	r3, [r7, #20]
 800e01a:	697b      	ldr	r3, [r7, #20]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d1ef      	bne.n	800e000 <tcp_listen_with_backlog_and_err+0xd8>
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	2200      	movs	r2, #0
 800e024:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800e026:	68f8      	ldr	r0, [r7, #12]
 800e028:	f7ff fb76 	bl	800d718 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800e02c:	69fb      	ldr	r3, [r7, #28]
 800e02e:	4a11      	ldr	r2, [pc, #68]	@ (800e074 <tcp_listen_with_backlog_and_err+0x14c>)
 800e030:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800e032:	4b11      	ldr	r3, [pc, #68]	@ (800e078 <tcp_listen_with_backlog_and_err+0x150>)
 800e034:	681a      	ldr	r2, [r3, #0]
 800e036:	69fb      	ldr	r3, [r7, #28]
 800e038:	60da      	str	r2, [r3, #12]
 800e03a:	4a0f      	ldr	r2, [pc, #60]	@ (800e078 <tcp_listen_with_backlog_and_err+0x150>)
 800e03c:	69fb      	ldr	r3, [r7, #28]
 800e03e:	6013      	str	r3, [r2, #0]
 800e040:	f005 fbda 	bl	80137f8 <tcp_timer_needed>
  res = ERR_OK;
 800e044:	2300      	movs	r3, #0
 800e046:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d002      	beq.n	800e054 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	7efa      	ldrb	r2, [r7, #27]
 800e052:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800e054:	69fb      	ldr	r3, [r7, #28]
}
 800e056:	4618      	mov	r0, r3
 800e058:	3720      	adds	r7, #32
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}
 800e05e:	bf00      	nop
 800e060:	08019168 	.word	0x08019168
 800e064:	0801935c 	.word	0x0801935c
 800e068:	080191ac 	.word	0x080191ac
 800e06c:	0801938c 	.word	0x0801938c
 800e070:	24007f08 	.word	0x24007f08
 800e074:	0800dee9 	.word	0x0800dee9
 800e078:	24007f0c 	.word	0x24007f0c

0800e07c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b084      	sub	sp, #16
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d106      	bne.n	800e098 <tcp_update_rcv_ann_wnd+0x1c>
 800e08a:	4b25      	ldr	r3, [pc, #148]	@ (800e120 <tcp_update_rcv_ann_wnd+0xa4>)
 800e08c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800e090:	4924      	ldr	r1, [pc, #144]	@ (800e124 <tcp_update_rcv_ann_wnd+0xa8>)
 800e092:	4825      	ldr	r0, [pc, #148]	@ (800e128 <tcp_update_rcv_ann_wnd+0xac>)
 800e094:	f008 fdcc 	bl	8016c30 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e09c:	687a      	ldr	r2, [r7, #4]
 800e09e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800e0a0:	4413      	add	r3, r2
 800e0a2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0a8:	687a      	ldr	r2, [r7, #4]
 800e0aa:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800e0ac:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800e0b0:	bf28      	it	cs
 800e0b2:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800e0b6:	b292      	uxth	r2, r2
 800e0b8:	4413      	add	r3, r2
 800e0ba:	68fa      	ldr	r2, [r7, #12]
 800e0bc:	1ad3      	subs	r3, r2, r3
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	db08      	blt.n	800e0d4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0ce:	68fa      	ldr	r2, [r7, #12]
 800e0d0:	1ad3      	subs	r3, r2, r3
 800e0d2:	e020      	b.n	800e116 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0dc:	1ad3      	subs	r3, r2, r3
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	dd03      	ble.n	800e0ea <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e0e8:	e014      	b.n	800e114 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0f2:	1ad3      	subs	r3, r2, r3
 800e0f4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e0fc:	d306      	bcc.n	800e10c <tcp_update_rcv_ann_wnd+0x90>
 800e0fe:	4b08      	ldr	r3, [pc, #32]	@ (800e120 <tcp_update_rcv_ann_wnd+0xa4>)
 800e100:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800e104:	4909      	ldr	r1, [pc, #36]	@ (800e12c <tcp_update_rcv_ann_wnd+0xb0>)
 800e106:	4808      	ldr	r0, [pc, #32]	@ (800e128 <tcp_update_rcv_ann_wnd+0xac>)
 800e108:	f008 fd92 	bl	8016c30 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e10c:	68bb      	ldr	r3, [r7, #8]
 800e10e:	b29a      	uxth	r2, r3
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800e114:	2300      	movs	r3, #0
  }
}
 800e116:	4618      	mov	r0, r3
 800e118:	3710      	adds	r7, #16
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}
 800e11e:	bf00      	nop
 800e120:	08019168 	.word	0x08019168
 800e124:	080193c4 	.word	0x080193c4
 800e128:	080191ac 	.word	0x080191ac
 800e12c:	080193e8 	.word	0x080193e8

0800e130 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b084      	sub	sp, #16
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
 800e138:	460b      	mov	r3, r1
 800e13a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d107      	bne.n	800e152 <tcp_recved+0x22>
 800e142:	4b1f      	ldr	r3, [pc, #124]	@ (800e1c0 <tcp_recved+0x90>)
 800e144:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800e148:	491e      	ldr	r1, [pc, #120]	@ (800e1c4 <tcp_recved+0x94>)
 800e14a:	481f      	ldr	r0, [pc, #124]	@ (800e1c8 <tcp_recved+0x98>)
 800e14c:	f008 fd70 	bl	8016c30 <iprintf>
 800e150:	e032      	b.n	800e1b8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	7d1b      	ldrb	r3, [r3, #20]
 800e156:	2b01      	cmp	r3, #1
 800e158:	d106      	bne.n	800e168 <tcp_recved+0x38>
 800e15a:	4b19      	ldr	r3, [pc, #100]	@ (800e1c0 <tcp_recved+0x90>)
 800e15c:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800e160:	491a      	ldr	r1, [pc, #104]	@ (800e1cc <tcp_recved+0x9c>)
 800e162:	4819      	ldr	r0, [pc, #100]	@ (800e1c8 <tcp_recved+0x98>)
 800e164:	f008 fd64 	bl	8016c30 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e16c:	887b      	ldrh	r3, [r7, #2]
 800e16e:	4413      	add	r3, r2
 800e170:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e172:	89fb      	ldrh	r3, [r7, #14]
 800e174:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e178:	d804      	bhi.n	800e184 <tcp_recved+0x54>
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e17e:	89fa      	ldrh	r2, [r7, #14]
 800e180:	429a      	cmp	r2, r3
 800e182:	d204      	bcs.n	800e18e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800e18a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800e18c:	e002      	b.n	800e194 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	89fa      	ldrh	r2, [r7, #14]
 800e192:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e194:	6878      	ldr	r0, [r7, #4]
 800e196:	f7ff ff71 	bl	800e07c <tcp_update_rcv_ann_wnd>
 800e19a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e19c:	68bb      	ldr	r3, [r7, #8]
 800e19e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800e1a2:	d309      	bcc.n	800e1b8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	8b5b      	ldrh	r3, [r3, #26]
 800e1a8:	f043 0302 	orr.w	r3, r3, #2
 800e1ac:	b29a      	uxth	r2, r3
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e1b2:	6878      	ldr	r0, [r7, #4]
 800e1b4:	f004 fbaa 	bl	801290c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e1b8:	3710      	adds	r7, #16
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}
 800e1be:	bf00      	nop
 800e1c0:	08019168 	.word	0x08019168
 800e1c4:	08019404 	.word	0x08019404
 800e1c8:	080191ac 	.word	0x080191ac
 800e1cc:	0801941c 	.word	0x0801941c

0800e1d0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800e1d0:	b480      	push	{r7}
 800e1d2:	b083      	sub	sp, #12
 800e1d4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800e1da:	4b1e      	ldr	r3, [pc, #120]	@ (800e254 <tcp_new_port+0x84>)
 800e1dc:	881b      	ldrh	r3, [r3, #0]
 800e1de:	3301      	adds	r3, #1
 800e1e0:	b29a      	uxth	r2, r3
 800e1e2:	4b1c      	ldr	r3, [pc, #112]	@ (800e254 <tcp_new_port+0x84>)
 800e1e4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800e1e6:	4b1b      	ldr	r3, [pc, #108]	@ (800e254 <tcp_new_port+0x84>)
 800e1e8:	881b      	ldrh	r3, [r3, #0]
 800e1ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e1ee:	4293      	cmp	r3, r2
 800e1f0:	d103      	bne.n	800e1fa <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800e1f2:	4b18      	ldr	r3, [pc, #96]	@ (800e254 <tcp_new_port+0x84>)
 800e1f4:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800e1f8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	71fb      	strb	r3, [r7, #7]
 800e1fe:	e01e      	b.n	800e23e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e200:	79fb      	ldrb	r3, [r7, #7]
 800e202:	4a15      	ldr	r2, [pc, #84]	@ (800e258 <tcp_new_port+0x88>)
 800e204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	603b      	str	r3, [r7, #0]
 800e20c:	e011      	b.n	800e232 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	8ada      	ldrh	r2, [r3, #22]
 800e212:	4b10      	ldr	r3, [pc, #64]	@ (800e254 <tcp_new_port+0x84>)
 800e214:	881b      	ldrh	r3, [r3, #0]
 800e216:	429a      	cmp	r2, r3
 800e218:	d108      	bne.n	800e22c <tcp_new_port+0x5c>
        n++;
 800e21a:	88bb      	ldrh	r3, [r7, #4]
 800e21c:	3301      	adds	r3, #1
 800e21e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800e220:	88bb      	ldrh	r3, [r7, #4]
 800e222:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e226:	d3d8      	bcc.n	800e1da <tcp_new_port+0xa>
          return 0;
 800e228:	2300      	movs	r3, #0
 800e22a:	e00d      	b.n	800e248 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e22c:	683b      	ldr	r3, [r7, #0]
 800e22e:	68db      	ldr	r3, [r3, #12]
 800e230:	603b      	str	r3, [r7, #0]
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d1ea      	bne.n	800e20e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e238:	79fb      	ldrb	r3, [r7, #7]
 800e23a:	3301      	adds	r3, #1
 800e23c:	71fb      	strb	r3, [r7, #7]
 800e23e:	79fb      	ldrb	r3, [r7, #7]
 800e240:	2b03      	cmp	r3, #3
 800e242:	d9dd      	bls.n	800e200 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800e244:	4b03      	ldr	r3, [pc, #12]	@ (800e254 <tcp_new_port+0x84>)
 800e246:	881b      	ldrh	r3, [r3, #0]
}
 800e248:	4618      	mov	r0, r3
 800e24a:	370c      	adds	r7, #12
 800e24c:	46bd      	mov	sp, r7
 800e24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e252:	4770      	bx	lr
 800e254:	24000028 	.word	0x24000028
 800e258:	0801b1a8 	.word	0x0801b1a8

0800e25c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e25c:	b5b0      	push	{r4, r5, r7, lr}
 800e25e:	b090      	sub	sp, #64	@ 0x40
 800e260:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e262:	2300      	movs	r3, #0
 800e264:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800e268:	4b95      	ldr	r3, [pc, #596]	@ (800e4c0 <tcp_slowtmr+0x264>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	3301      	adds	r3, #1
 800e26e:	4a94      	ldr	r2, [pc, #592]	@ (800e4c0 <tcp_slowtmr+0x264>)
 800e270:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e272:	4b94      	ldr	r3, [pc, #592]	@ (800e4c4 <tcp_slowtmr+0x268>)
 800e274:	781b      	ldrb	r3, [r3, #0]
 800e276:	3301      	adds	r3, #1
 800e278:	b2da      	uxtb	r2, r3
 800e27a:	4b92      	ldr	r3, [pc, #584]	@ (800e4c4 <tcp_slowtmr+0x268>)
 800e27c:	701a      	strb	r2, [r3, #0]
 800e27e:	e000      	b.n	800e282 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800e280:	bf00      	nop
  prev = NULL;
 800e282:	2300      	movs	r3, #0
 800e284:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800e286:	4b90      	ldr	r3, [pc, #576]	@ (800e4c8 <tcp_slowtmr+0x26c>)
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e28c:	e29d      	b.n	800e7ca <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e28e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e290:	7d1b      	ldrb	r3, [r3, #20]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d106      	bne.n	800e2a4 <tcp_slowtmr+0x48>
 800e296:	4b8d      	ldr	r3, [pc, #564]	@ (800e4cc <tcp_slowtmr+0x270>)
 800e298:	f240 42be 	movw	r2, #1214	@ 0x4be
 800e29c:	498c      	ldr	r1, [pc, #560]	@ (800e4d0 <tcp_slowtmr+0x274>)
 800e29e:	488d      	ldr	r0, [pc, #564]	@ (800e4d4 <tcp_slowtmr+0x278>)
 800e2a0:	f008 fcc6 	bl	8016c30 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e2a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2a6:	7d1b      	ldrb	r3, [r3, #20]
 800e2a8:	2b01      	cmp	r3, #1
 800e2aa:	d106      	bne.n	800e2ba <tcp_slowtmr+0x5e>
 800e2ac:	4b87      	ldr	r3, [pc, #540]	@ (800e4cc <tcp_slowtmr+0x270>)
 800e2ae:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800e2b2:	4989      	ldr	r1, [pc, #548]	@ (800e4d8 <tcp_slowtmr+0x27c>)
 800e2b4:	4887      	ldr	r0, [pc, #540]	@ (800e4d4 <tcp_slowtmr+0x278>)
 800e2b6:	f008 fcbb 	bl	8016c30 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e2ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2bc:	7d1b      	ldrb	r3, [r3, #20]
 800e2be:	2b0a      	cmp	r3, #10
 800e2c0:	d106      	bne.n	800e2d0 <tcp_slowtmr+0x74>
 800e2c2:	4b82      	ldr	r3, [pc, #520]	@ (800e4cc <tcp_slowtmr+0x270>)
 800e2c4:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800e2c8:	4984      	ldr	r1, [pc, #528]	@ (800e4dc <tcp_slowtmr+0x280>)
 800e2ca:	4882      	ldr	r0, [pc, #520]	@ (800e4d4 <tcp_slowtmr+0x278>)
 800e2cc:	f008 fcb0 	bl	8016c30 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e2d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2d2:	7f9a      	ldrb	r2, [r3, #30]
 800e2d4:	4b7b      	ldr	r3, [pc, #492]	@ (800e4c4 <tcp_slowtmr+0x268>)
 800e2d6:	781b      	ldrb	r3, [r3, #0]
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	d105      	bne.n	800e2e8 <tcp_slowtmr+0x8c>
      prev = pcb;
 800e2dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2de:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e2e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2e2:	68db      	ldr	r3, [r3, #12]
 800e2e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800e2e6:	e270      	b.n	800e7ca <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800e2e8:	4b76      	ldr	r3, [pc, #472]	@ (800e4c4 <tcp_slowtmr+0x268>)
 800e2ea:	781a      	ldrb	r2, [r3, #0]
 800e2ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2ee:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e2fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2fe:	7d1b      	ldrb	r3, [r3, #20]
 800e300:	2b02      	cmp	r3, #2
 800e302:	d10a      	bne.n	800e31a <tcp_slowtmr+0xbe>
 800e304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e306:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e30a:	2b05      	cmp	r3, #5
 800e30c:	d905      	bls.n	800e31a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800e30e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e312:	3301      	adds	r3, #1
 800e314:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e318:	e11e      	b.n	800e558 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e31a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e31c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e320:	2b0b      	cmp	r3, #11
 800e322:	d905      	bls.n	800e330 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800e324:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e328:	3301      	adds	r3, #1
 800e32a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e32e:	e113      	b.n	800e558 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800e330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e332:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e336:	2b00      	cmp	r3, #0
 800e338:	d075      	beq.n	800e426 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e33a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e33c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d006      	beq.n	800e350 <tcp_slowtmr+0xf4>
 800e342:	4b62      	ldr	r3, [pc, #392]	@ (800e4cc <tcp_slowtmr+0x270>)
 800e344:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800e348:	4965      	ldr	r1, [pc, #404]	@ (800e4e0 <tcp_slowtmr+0x284>)
 800e34a:	4862      	ldr	r0, [pc, #392]	@ (800e4d4 <tcp_slowtmr+0x278>)
 800e34c:	f008 fc70 	bl	8016c30 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e352:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e354:	2b00      	cmp	r3, #0
 800e356:	d106      	bne.n	800e366 <tcp_slowtmr+0x10a>
 800e358:	4b5c      	ldr	r3, [pc, #368]	@ (800e4cc <tcp_slowtmr+0x270>)
 800e35a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800e35e:	4961      	ldr	r1, [pc, #388]	@ (800e4e4 <tcp_slowtmr+0x288>)
 800e360:	485c      	ldr	r0, [pc, #368]	@ (800e4d4 <tcp_slowtmr+0x278>)
 800e362:	f008 fc65 	bl	8016c30 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e368:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800e36c:	2b0b      	cmp	r3, #11
 800e36e:	d905      	bls.n	800e37c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800e370:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e374:	3301      	adds	r3, #1
 800e376:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e37a:	e0ed      	b.n	800e558 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e37c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e37e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e382:	3b01      	subs	r3, #1
 800e384:	4a58      	ldr	r2, [pc, #352]	@ (800e4e8 <tcp_slowtmr+0x28c>)
 800e386:	5cd3      	ldrb	r3, [r2, r3]
 800e388:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e38a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e38c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800e390:	7c7a      	ldrb	r2, [r7, #17]
 800e392:	429a      	cmp	r2, r3
 800e394:	d907      	bls.n	800e3a6 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800e396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e398:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800e39c:	3301      	adds	r3, #1
 800e39e:	b2da      	uxtb	r2, r3
 800e3a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3a2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800e3a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3a8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800e3ac:	7c7a      	ldrb	r2, [r7, #17]
 800e3ae:	429a      	cmp	r2, r3
 800e3b0:	f200 80d2 	bhi.w	800e558 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800e3b4:	2301      	movs	r3, #1
 800e3b6:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800e3b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d108      	bne.n	800e3d4 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e3c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e3c4:	f005 f94a 	bl	801365c <tcp_zero_window_probe>
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d014      	beq.n	800e3f8 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	623b      	str	r3, [r7, #32]
 800e3d2:	e011      	b.n	800e3f8 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e3d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e3da:	4619      	mov	r1, r3
 800e3dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e3de:	f004 f80f 	bl	8012400 <tcp_split_unsent_seg>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d107      	bne.n	800e3f8 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800e3e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e3ea:	f004 fa8f 	bl	801290c <tcp_output>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d101      	bne.n	800e3f8 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800e3f8:	6a3b      	ldr	r3, [r7, #32]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	f000 80ac 	beq.w	800e558 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800e400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e402:	2200      	movs	r2, #0
 800e404:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e40a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e40e:	2b06      	cmp	r3, #6
 800e410:	f200 80a2 	bhi.w	800e558 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800e414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e416:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e41a:	3301      	adds	r3, #1
 800e41c:	b2da      	uxtb	r2, r3
 800e41e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e420:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800e424:	e098      	b.n	800e558 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e428:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	db0f      	blt.n	800e450 <tcp_slowtmr+0x1f4>
 800e430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e432:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e436:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800e43a:	4293      	cmp	r3, r2
 800e43c:	d008      	beq.n	800e450 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800e43e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e440:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e444:	b29b      	uxth	r3, r3
 800e446:	3301      	adds	r3, #1
 800e448:	b29b      	uxth	r3, r3
 800e44a:	b21a      	sxth	r2, r3
 800e44c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e44e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800e450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e452:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800e456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e458:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800e45c:	429a      	cmp	r2, r3
 800e45e:	db7b      	blt.n	800e558 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e460:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e462:	f004 fd47 	bl	8012ef4 <tcp_rexmit_rto_prepare>
 800e466:	4603      	mov	r3, r0
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d007      	beq.n	800e47c <tcp_slowtmr+0x220>
 800e46c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e46e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e470:	2b00      	cmp	r3, #0
 800e472:	d171      	bne.n	800e558 <tcp_slowtmr+0x2fc>
 800e474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e476:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d06d      	beq.n	800e558 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800e47c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e47e:	7d1b      	ldrb	r3, [r3, #20]
 800e480:	2b02      	cmp	r3, #2
 800e482:	d03a      	beq.n	800e4fa <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e486:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e48a:	2b0c      	cmp	r3, #12
 800e48c:	bf28      	it	cs
 800e48e:	230c      	movcs	r3, #12
 800e490:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e494:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800e498:	10db      	asrs	r3, r3, #3
 800e49a:	b21b      	sxth	r3, r3
 800e49c:	461a      	mov	r2, r3
 800e49e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4a0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800e4a4:	4413      	add	r3, r2
 800e4a6:	7efa      	ldrb	r2, [r7, #27]
 800e4a8:	4910      	ldr	r1, [pc, #64]	@ (800e4ec <tcp_slowtmr+0x290>)
 800e4aa:	5c8a      	ldrb	r2, [r1, r2]
 800e4ac:	4093      	lsls	r3, r2
 800e4ae:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e4b0:	697b      	ldr	r3, [r7, #20]
 800e4b2:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800e4b6:	4293      	cmp	r3, r2
 800e4b8:	dc1a      	bgt.n	800e4f0 <tcp_slowtmr+0x294>
 800e4ba:	697b      	ldr	r3, [r7, #20]
 800e4bc:	b21a      	sxth	r2, r3
 800e4be:	e019      	b.n	800e4f4 <tcp_slowtmr+0x298>
 800e4c0:	24007f04 	.word	0x24007f04
 800e4c4:	24007f1a 	.word	0x24007f1a
 800e4c8:	24007f10 	.word	0x24007f10
 800e4cc:	08019168 	.word	0x08019168
 800e4d0:	080194ac 	.word	0x080194ac
 800e4d4:	080191ac 	.word	0x080191ac
 800e4d8:	080194d8 	.word	0x080194d8
 800e4dc:	08019504 	.word	0x08019504
 800e4e0:	08019534 	.word	0x08019534
 800e4e4:	08019568 	.word	0x08019568
 800e4e8:	0801b1a0 	.word	0x0801b1a0
 800e4ec:	0801b190 	.word	0x0801b190
 800e4f0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800e4f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4f6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800e4fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e502:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e508:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e50c:	4293      	cmp	r3, r2
 800e50e:	bf28      	it	cs
 800e510:	4613      	movcs	r3, r2
 800e512:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e514:	8a7b      	ldrh	r3, [r7, #18]
 800e516:	085b      	lsrs	r3, r3, #1
 800e518:	b29a      	uxth	r2, r3
 800e51a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e51c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e522:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800e526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e528:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e52a:	005b      	lsls	r3, r3, #1
 800e52c:	b29b      	uxth	r3, r3
 800e52e:	429a      	cmp	r2, r3
 800e530:	d206      	bcs.n	800e540 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e534:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e536:	005b      	lsls	r3, r3, #1
 800e538:	b29a      	uxth	r2, r3
 800e53a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e53c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800e540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e542:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800e544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e546:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800e54a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e54c:	2200      	movs	r2, #0
 800e54e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800e552:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e554:	f004 fd3e 	bl	8012fd4 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800e558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e55a:	7d1b      	ldrb	r3, [r3, #20]
 800e55c:	2b06      	cmp	r3, #6
 800e55e:	d111      	bne.n	800e584 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800e560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e562:	8b5b      	ldrh	r3, [r3, #26]
 800e564:	f003 0310 	and.w	r3, r3, #16
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d00b      	beq.n	800e584 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e56c:	4b9c      	ldr	r3, [pc, #624]	@ (800e7e0 <tcp_slowtmr+0x584>)
 800e56e:	681a      	ldr	r2, [r3, #0]
 800e570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e572:	6a1b      	ldr	r3, [r3, #32]
 800e574:	1ad3      	subs	r3, r2, r3
 800e576:	2b28      	cmp	r3, #40	@ 0x28
 800e578:	d904      	bls.n	800e584 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800e57a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e57e:	3301      	adds	r3, #1
 800e580:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e586:	7a5b      	ldrb	r3, [r3, #9]
 800e588:	f003 0308 	and.w	r3, r3, #8
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d04a      	beq.n	800e626 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800e590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e592:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e594:	2b04      	cmp	r3, #4
 800e596:	d003      	beq.n	800e5a0 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800e598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e59a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e59c:	2b07      	cmp	r3, #7
 800e59e:	d142      	bne.n	800e626 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e5a0:	4b8f      	ldr	r3, [pc, #572]	@ (800e7e0 <tcp_slowtmr+0x584>)
 800e5a2:	681a      	ldr	r2, [r3, #0]
 800e5a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5a6:	6a1b      	ldr	r3, [r3, #32]
 800e5a8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e5aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5ac:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800e5b0:	4b8c      	ldr	r3, [pc, #560]	@ (800e7e4 <tcp_slowtmr+0x588>)
 800e5b2:	440b      	add	r3, r1
 800e5b4:	498c      	ldr	r1, [pc, #560]	@ (800e7e8 <tcp_slowtmr+0x58c>)
 800e5b6:	fba1 1303 	umull	r1, r3, r1, r3
 800e5ba:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e5bc:	429a      	cmp	r2, r3
 800e5be:	d90a      	bls.n	800e5d6 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800e5c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e5c4:	3301      	adds	r3, #1
 800e5c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800e5ca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e5ce:	3301      	adds	r3, #1
 800e5d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e5d4:	e027      	b.n	800e626 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e5d6:	4b82      	ldr	r3, [pc, #520]	@ (800e7e0 <tcp_slowtmr+0x584>)
 800e5d8:	681a      	ldr	r2, [r3, #0]
 800e5da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5dc:	6a1b      	ldr	r3, [r3, #32]
 800e5de:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e5e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5e2:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800e5e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5e8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	4b7f      	ldr	r3, [pc, #508]	@ (800e7ec <tcp_slowtmr+0x590>)
 800e5f0:	fb00 f303 	mul.w	r3, r0, r3
 800e5f4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e5f6:	497c      	ldr	r1, [pc, #496]	@ (800e7e8 <tcp_slowtmr+0x58c>)
 800e5f8:	fba1 1303 	umull	r1, r3, r1, r3
 800e5fc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e5fe:	429a      	cmp	r2, r3
 800e600:	d911      	bls.n	800e626 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800e602:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e604:	f004 ffea 	bl	80135dc <tcp_keepalive>
 800e608:	4603      	mov	r3, r0
 800e60a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800e60e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800e612:	2b00      	cmp	r3, #0
 800e614:	d107      	bne.n	800e626 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800e616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e618:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800e61c:	3301      	adds	r3, #1
 800e61e:	b2da      	uxtb	r2, r3
 800e620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e622:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800e626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e628:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d011      	beq.n	800e652 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e62e:	4b6c      	ldr	r3, [pc, #432]	@ (800e7e0 <tcp_slowtmr+0x584>)
 800e630:	681a      	ldr	r2, [r3, #0]
 800e632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e634:	6a1b      	ldr	r3, [r3, #32]
 800e636:	1ad2      	subs	r2, r2, r3
 800e638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e63a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800e63e:	4619      	mov	r1, r3
 800e640:	460b      	mov	r3, r1
 800e642:	005b      	lsls	r3, r3, #1
 800e644:	440b      	add	r3, r1
 800e646:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e648:	429a      	cmp	r2, r3
 800e64a:	d302      	bcc.n	800e652 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800e64c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e64e:	f000 feab 	bl	800f3a8 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800e652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e654:	7d1b      	ldrb	r3, [r3, #20]
 800e656:	2b03      	cmp	r3, #3
 800e658:	d10b      	bne.n	800e672 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e65a:	4b61      	ldr	r3, [pc, #388]	@ (800e7e0 <tcp_slowtmr+0x584>)
 800e65c:	681a      	ldr	r2, [r3, #0]
 800e65e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e660:	6a1b      	ldr	r3, [r3, #32]
 800e662:	1ad3      	subs	r3, r2, r3
 800e664:	2b28      	cmp	r3, #40	@ 0x28
 800e666:	d904      	bls.n	800e672 <tcp_slowtmr+0x416>
        ++pcb_remove;
 800e668:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e66c:	3301      	adds	r3, #1
 800e66e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800e672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e674:	7d1b      	ldrb	r3, [r3, #20]
 800e676:	2b09      	cmp	r3, #9
 800e678:	d10b      	bne.n	800e692 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e67a:	4b59      	ldr	r3, [pc, #356]	@ (800e7e0 <tcp_slowtmr+0x584>)
 800e67c:	681a      	ldr	r2, [r3, #0]
 800e67e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e680:	6a1b      	ldr	r3, [r3, #32]
 800e682:	1ad3      	subs	r3, r2, r3
 800e684:	2bf0      	cmp	r3, #240	@ 0xf0
 800e686:	d904      	bls.n	800e692 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800e688:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e68c:	3301      	adds	r3, #1
 800e68e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800e692:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e696:	2b00      	cmp	r3, #0
 800e698:	d060      	beq.n	800e75c <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800e69a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e69c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e6a0:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800e6a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e6a4:	f000 fccc 	bl	800f040 <tcp_pcb_purge>
      if (prev != NULL) {
 800e6a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d010      	beq.n	800e6d0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e6ae:	4b50      	ldr	r3, [pc, #320]	@ (800e7f0 <tcp_slowtmr+0x594>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e6b4:	429a      	cmp	r2, r3
 800e6b6:	d106      	bne.n	800e6c6 <tcp_slowtmr+0x46a>
 800e6b8:	4b4e      	ldr	r3, [pc, #312]	@ (800e7f4 <tcp_slowtmr+0x598>)
 800e6ba:	f240 526d 	movw	r2, #1389	@ 0x56d
 800e6be:	494e      	ldr	r1, [pc, #312]	@ (800e7f8 <tcp_slowtmr+0x59c>)
 800e6c0:	484e      	ldr	r0, [pc, #312]	@ (800e7fc <tcp_slowtmr+0x5a0>)
 800e6c2:	f008 fab5 	bl	8016c30 <iprintf>
        prev->next = pcb->next;
 800e6c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6c8:	68da      	ldr	r2, [r3, #12]
 800e6ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6cc:	60da      	str	r2, [r3, #12]
 800e6ce:	e00f      	b.n	800e6f0 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e6d0:	4b47      	ldr	r3, [pc, #284]	@ (800e7f0 <tcp_slowtmr+0x594>)
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e6d6:	429a      	cmp	r2, r3
 800e6d8:	d006      	beq.n	800e6e8 <tcp_slowtmr+0x48c>
 800e6da:	4b46      	ldr	r3, [pc, #280]	@ (800e7f4 <tcp_slowtmr+0x598>)
 800e6dc:	f240 5271 	movw	r2, #1393	@ 0x571
 800e6e0:	4947      	ldr	r1, [pc, #284]	@ (800e800 <tcp_slowtmr+0x5a4>)
 800e6e2:	4846      	ldr	r0, [pc, #280]	@ (800e7fc <tcp_slowtmr+0x5a0>)
 800e6e4:	f008 faa4 	bl	8016c30 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e6e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6ea:	68db      	ldr	r3, [r3, #12]
 800e6ec:	4a40      	ldr	r2, [pc, #256]	@ (800e7f0 <tcp_slowtmr+0x594>)
 800e6ee:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800e6f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d013      	beq.n	800e720 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e6f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6fa:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800e6fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6fe:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e700:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800e702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e704:	3304      	adds	r3, #4
 800e706:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e708:	8ad2      	ldrh	r2, [r2, #22]
 800e70a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e70c:	8b09      	ldrh	r1, [r1, #24]
 800e70e:	9102      	str	r1, [sp, #8]
 800e710:	9201      	str	r2, [sp, #4]
 800e712:	9300      	str	r3, [sp, #0]
 800e714:	462b      	mov	r3, r5
 800e716:	4622      	mov	r2, r4
 800e718:	4601      	mov	r1, r0
 800e71a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e71c:	f004 feaa 	bl	8013474 <tcp_rst>
      err_arg = pcb->callback_arg;
 800e720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e722:	691b      	ldr	r3, [r3, #16]
 800e724:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e728:	7d1b      	ldrb	r3, [r3, #20]
 800e72a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e72c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e72e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e732:	68db      	ldr	r3, [r3, #12]
 800e734:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800e736:	6838      	ldr	r0, [r7, #0]
 800e738:	f7fe ffee 	bl	800d718 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800e73c:	4b31      	ldr	r3, [pc, #196]	@ (800e804 <tcp_slowtmr+0x5a8>)
 800e73e:	2200      	movs	r2, #0
 800e740:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d004      	beq.n	800e752 <tcp_slowtmr+0x4f6>
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	f06f 010c 	mvn.w	r1, #12
 800e74e:	68b8      	ldr	r0, [r7, #8]
 800e750:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e752:	4b2c      	ldr	r3, [pc, #176]	@ (800e804 <tcp_slowtmr+0x5a8>)
 800e754:	781b      	ldrb	r3, [r3, #0]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d037      	beq.n	800e7ca <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800e75a:	e592      	b.n	800e282 <tcp_slowtmr+0x26>
      prev = pcb;
 800e75c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e75e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e762:	68db      	ldr	r3, [r3, #12]
 800e764:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800e766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e768:	7f1b      	ldrb	r3, [r3, #28]
 800e76a:	3301      	adds	r3, #1
 800e76c:	b2da      	uxtb	r2, r3
 800e76e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e770:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e774:	7f1a      	ldrb	r2, [r3, #28]
 800e776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e778:	7f5b      	ldrb	r3, [r3, #29]
 800e77a:	429a      	cmp	r2, r3
 800e77c:	d325      	bcc.n	800e7ca <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800e77e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e780:	2200      	movs	r2, #0
 800e782:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800e784:	4b1f      	ldr	r3, [pc, #124]	@ (800e804 <tcp_slowtmr+0x5a8>)
 800e786:	2200      	movs	r2, #0
 800e788:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e78a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e78c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e790:	2b00      	cmp	r3, #0
 800e792:	d00b      	beq.n	800e7ac <tcp_slowtmr+0x550>
 800e794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e796:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e79a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e79c:	6912      	ldr	r2, [r2, #16]
 800e79e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e7a0:	4610      	mov	r0, r2
 800e7a2:	4798      	blx	r3
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800e7aa:	e002      	b.n	800e7b2 <tcp_slowtmr+0x556>
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800e7b2:	4b14      	ldr	r3, [pc, #80]	@ (800e804 <tcp_slowtmr+0x5a8>)
 800e7b4:	781b      	ldrb	r3, [r3, #0]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	f47f ad62 	bne.w	800e280 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e7bc:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d102      	bne.n	800e7ca <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800e7c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e7c6:	f004 f8a1 	bl	801290c <tcp_output>
  while (pcb != NULL) {
 800e7ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	f47f ad5e 	bne.w	800e28e <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800e7d6:	4b0c      	ldr	r3, [pc, #48]	@ (800e808 <tcp_slowtmr+0x5ac>)
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e7dc:	e069      	b.n	800e8b2 <tcp_slowtmr+0x656>
 800e7de:	bf00      	nop
 800e7e0:	24007f04 	.word	0x24007f04
 800e7e4:	000a4cb8 	.word	0x000a4cb8
 800e7e8:	10624dd3 	.word	0x10624dd3
 800e7ec:	000124f8 	.word	0x000124f8
 800e7f0:	24007f10 	.word	0x24007f10
 800e7f4:	08019168 	.word	0x08019168
 800e7f8:	080195a0 	.word	0x080195a0
 800e7fc:	080191ac 	.word	0x080191ac
 800e800:	080195cc 	.word	0x080195cc
 800e804:	24007f18 	.word	0x24007f18
 800e808:	24007f14 	.word	0x24007f14
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e80c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e80e:	7d1b      	ldrb	r3, [r3, #20]
 800e810:	2b0a      	cmp	r3, #10
 800e812:	d006      	beq.n	800e822 <tcp_slowtmr+0x5c6>
 800e814:	4b2b      	ldr	r3, [pc, #172]	@ (800e8c4 <tcp_slowtmr+0x668>)
 800e816:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800e81a:	492b      	ldr	r1, [pc, #172]	@ (800e8c8 <tcp_slowtmr+0x66c>)
 800e81c:	482b      	ldr	r0, [pc, #172]	@ (800e8cc <tcp_slowtmr+0x670>)
 800e81e:	f008 fa07 	bl	8016c30 <iprintf>
    pcb_remove = 0;
 800e822:	2300      	movs	r3, #0
 800e824:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e828:	4b29      	ldr	r3, [pc, #164]	@ (800e8d0 <tcp_slowtmr+0x674>)
 800e82a:	681a      	ldr	r2, [r3, #0]
 800e82c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e82e:	6a1b      	ldr	r3, [r3, #32]
 800e830:	1ad3      	subs	r3, r2, r3
 800e832:	2bf0      	cmp	r3, #240	@ 0xf0
 800e834:	d904      	bls.n	800e840 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800e836:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e83a:	3301      	adds	r3, #1
 800e83c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e840:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e844:	2b00      	cmp	r3, #0
 800e846:	d02f      	beq.n	800e8a8 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e848:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e84a:	f000 fbf9 	bl	800f040 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e84e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e850:	2b00      	cmp	r3, #0
 800e852:	d010      	beq.n	800e876 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e854:	4b1f      	ldr	r3, [pc, #124]	@ (800e8d4 <tcp_slowtmr+0x678>)
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e85a:	429a      	cmp	r2, r3
 800e85c:	d106      	bne.n	800e86c <tcp_slowtmr+0x610>
 800e85e:	4b19      	ldr	r3, [pc, #100]	@ (800e8c4 <tcp_slowtmr+0x668>)
 800e860:	f240 52af 	movw	r2, #1455	@ 0x5af
 800e864:	491c      	ldr	r1, [pc, #112]	@ (800e8d8 <tcp_slowtmr+0x67c>)
 800e866:	4819      	ldr	r0, [pc, #100]	@ (800e8cc <tcp_slowtmr+0x670>)
 800e868:	f008 f9e2 	bl	8016c30 <iprintf>
        prev->next = pcb->next;
 800e86c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e86e:	68da      	ldr	r2, [r3, #12]
 800e870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e872:	60da      	str	r2, [r3, #12]
 800e874:	e00f      	b.n	800e896 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e876:	4b17      	ldr	r3, [pc, #92]	@ (800e8d4 <tcp_slowtmr+0x678>)
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e87c:	429a      	cmp	r2, r3
 800e87e:	d006      	beq.n	800e88e <tcp_slowtmr+0x632>
 800e880:	4b10      	ldr	r3, [pc, #64]	@ (800e8c4 <tcp_slowtmr+0x668>)
 800e882:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800e886:	4915      	ldr	r1, [pc, #84]	@ (800e8dc <tcp_slowtmr+0x680>)
 800e888:	4810      	ldr	r0, [pc, #64]	@ (800e8cc <tcp_slowtmr+0x670>)
 800e88a:	f008 f9d1 	bl	8016c30 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e88e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e890:	68db      	ldr	r3, [r3, #12]
 800e892:	4a10      	ldr	r2, [pc, #64]	@ (800e8d4 <tcp_slowtmr+0x678>)
 800e894:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e898:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e89a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e89c:	68db      	ldr	r3, [r3, #12]
 800e89e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800e8a0:	69f8      	ldr	r0, [r7, #28]
 800e8a2:	f7fe ff39 	bl	800d718 <tcp_free>
 800e8a6:	e004      	b.n	800e8b2 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800e8a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e8ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8ae:	68db      	ldr	r3, [r3, #12]
 800e8b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e8b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d1a9      	bne.n	800e80c <tcp_slowtmr+0x5b0>
    }
  }
}
 800e8b8:	bf00      	nop
 800e8ba:	bf00      	nop
 800e8bc:	3730      	adds	r7, #48	@ 0x30
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	bdb0      	pop	{r4, r5, r7, pc}
 800e8c2:	bf00      	nop
 800e8c4:	08019168 	.word	0x08019168
 800e8c8:	080195f8 	.word	0x080195f8
 800e8cc:	080191ac 	.word	0x080191ac
 800e8d0:	24007f04 	.word	0x24007f04
 800e8d4:	24007f14 	.word	0x24007f14
 800e8d8:	08019628 	.word	0x08019628
 800e8dc:	08019650 	.word	0x08019650

0800e8e0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b082      	sub	sp, #8
 800e8e4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e8e6:	4b2d      	ldr	r3, [pc, #180]	@ (800e99c <tcp_fasttmr+0xbc>)
 800e8e8:	781b      	ldrb	r3, [r3, #0]
 800e8ea:	3301      	adds	r3, #1
 800e8ec:	b2da      	uxtb	r2, r3
 800e8ee:	4b2b      	ldr	r3, [pc, #172]	@ (800e99c <tcp_fasttmr+0xbc>)
 800e8f0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e8f2:	4b2b      	ldr	r3, [pc, #172]	@ (800e9a0 <tcp_fasttmr+0xc0>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e8f8:	e048      	b.n	800e98c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	7f9a      	ldrb	r2, [r3, #30]
 800e8fe:	4b27      	ldr	r3, [pc, #156]	@ (800e99c <tcp_fasttmr+0xbc>)
 800e900:	781b      	ldrb	r3, [r3, #0]
 800e902:	429a      	cmp	r2, r3
 800e904:	d03f      	beq.n	800e986 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e906:	4b25      	ldr	r3, [pc, #148]	@ (800e99c <tcp_fasttmr+0xbc>)
 800e908:	781a      	ldrb	r2, [r3, #0]
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	8b5b      	ldrh	r3, [r3, #26]
 800e912:	f003 0301 	and.w	r3, r3, #1
 800e916:	2b00      	cmp	r3, #0
 800e918:	d010      	beq.n	800e93c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	8b5b      	ldrh	r3, [r3, #26]
 800e91e:	f043 0302 	orr.w	r3, r3, #2
 800e922:	b29a      	uxth	r2, r3
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e928:	6878      	ldr	r0, [r7, #4]
 800e92a:	f003 ffef 	bl	801290c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	8b5b      	ldrh	r3, [r3, #26]
 800e932:	f023 0303 	bic.w	r3, r3, #3
 800e936:	b29a      	uxth	r2, r3
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	8b5b      	ldrh	r3, [r3, #26]
 800e940:	f003 0308 	and.w	r3, r3, #8
 800e944:	2b00      	cmp	r3, #0
 800e946:	d009      	beq.n	800e95c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	8b5b      	ldrh	r3, [r3, #26]
 800e94c:	f023 0308 	bic.w	r3, r3, #8
 800e950:	b29a      	uxth	r2, r3
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e956:	6878      	ldr	r0, [r7, #4]
 800e958:	f7ff f872 	bl	800da40 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	68db      	ldr	r3, [r3, #12]
 800e960:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e966:	2b00      	cmp	r3, #0
 800e968:	d00a      	beq.n	800e980 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e96a:	4b0e      	ldr	r3, [pc, #56]	@ (800e9a4 <tcp_fasttmr+0xc4>)
 800e96c:	2200      	movs	r2, #0
 800e96e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f000 f819 	bl	800e9a8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e976:	4b0b      	ldr	r3, [pc, #44]	@ (800e9a4 <tcp_fasttmr+0xc4>)
 800e978:	781b      	ldrb	r3, [r3, #0]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d000      	beq.n	800e980 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e97e:	e7b8      	b.n	800e8f2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	607b      	str	r3, [r7, #4]
 800e984:	e002      	b.n	800e98c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	68db      	ldr	r3, [r3, #12]
 800e98a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d1b3      	bne.n	800e8fa <tcp_fasttmr+0x1a>
    }
  }
}
 800e992:	bf00      	nop
 800e994:	bf00      	nop
 800e996:	3708      	adds	r7, #8
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd80      	pop	{r7, pc}
 800e99c:	24007f1a 	.word	0x24007f1a
 800e9a0:	24007f10 	.word	0x24007f10
 800e9a4:	24007f18 	.word	0x24007f18

0800e9a8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e9a8:	b590      	push	{r4, r7, lr}
 800e9aa:	b085      	sub	sp, #20
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d109      	bne.n	800e9ca <tcp_process_refused_data+0x22>
 800e9b6:	4b37      	ldr	r3, [pc, #220]	@ (800ea94 <tcp_process_refused_data+0xec>)
 800e9b8:	f240 6209 	movw	r2, #1545	@ 0x609
 800e9bc:	4936      	ldr	r1, [pc, #216]	@ (800ea98 <tcp_process_refused_data+0xf0>)
 800e9be:	4837      	ldr	r0, [pc, #220]	@ (800ea9c <tcp_process_refused_data+0xf4>)
 800e9c0:	f008 f936 	bl	8016c30 <iprintf>
 800e9c4:	f06f 030f 	mvn.w	r3, #15
 800e9c8:	e060      	b.n	800ea8c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e9ce:	7b5b      	ldrb	r3, [r3, #13]
 800e9d0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e9d6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2200      	movs	r2, #0
 800e9dc:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d00b      	beq.n	800ea00 <tcp_process_refused_data+0x58>
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	6918      	ldr	r0, [r3, #16]
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	68ba      	ldr	r2, [r7, #8]
 800e9f6:	6879      	ldr	r1, [r7, #4]
 800e9f8:	47a0      	blx	r4
 800e9fa:	4603      	mov	r3, r0
 800e9fc:	73fb      	strb	r3, [r7, #15]
 800e9fe:	e007      	b.n	800ea10 <tcp_process_refused_data+0x68>
 800ea00:	2300      	movs	r3, #0
 800ea02:	68ba      	ldr	r2, [r7, #8]
 800ea04:	6879      	ldr	r1, [r7, #4]
 800ea06:	2000      	movs	r0, #0
 800ea08:	f000 f8a4 	bl	800eb54 <tcp_recv_null>
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ea10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d12a      	bne.n	800ea6e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ea18:	7bbb      	ldrb	r3, [r7, #14]
 800ea1a:	f003 0320 	and.w	r3, r3, #32
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d033      	beq.n	800ea8a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea26:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800ea2a:	d005      	beq.n	800ea38 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea30:	3301      	adds	r3, #1
 800ea32:	b29a      	uxth	r2, r3
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d00b      	beq.n	800ea5a <tcp_process_refused_data+0xb2>
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	6918      	ldr	r0, [r3, #16]
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	2200      	movs	r2, #0
 800ea50:	6879      	ldr	r1, [r7, #4]
 800ea52:	47a0      	blx	r4
 800ea54:	4603      	mov	r3, r0
 800ea56:	73fb      	strb	r3, [r7, #15]
 800ea58:	e001      	b.n	800ea5e <tcp_process_refused_data+0xb6>
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ea5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea62:	f113 0f0d 	cmn.w	r3, #13
 800ea66:	d110      	bne.n	800ea8a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ea68:	f06f 030c 	mvn.w	r3, #12
 800ea6c:	e00e      	b.n	800ea8c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ea6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea72:	f113 0f0d 	cmn.w	r3, #13
 800ea76:	d102      	bne.n	800ea7e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ea78:	f06f 030c 	mvn.w	r3, #12
 800ea7c:	e006      	b.n	800ea8c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	68ba      	ldr	r2, [r7, #8]
 800ea82:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800ea84:	f06f 0304 	mvn.w	r3, #4
 800ea88:	e000      	b.n	800ea8c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ea8a:	2300      	movs	r3, #0
}
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	3714      	adds	r7, #20
 800ea90:	46bd      	mov	sp, r7
 800ea92:	bd90      	pop	{r4, r7, pc}
 800ea94:	08019168 	.word	0x08019168
 800ea98:	08019678 	.word	0x08019678
 800ea9c:	080191ac 	.word	0x080191ac

0800eaa0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b084      	sub	sp, #16
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800eaa8:	e007      	b.n	800eaba <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800eab0:	6878      	ldr	r0, [r7, #4]
 800eab2:	f000 f80a 	bl	800eaca <tcp_seg_free>
    seg = next;
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d1f4      	bne.n	800eaaa <tcp_segs_free+0xa>
  }
}
 800eac0:	bf00      	nop
 800eac2:	bf00      	nop
 800eac4:	3710      	adds	r7, #16
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}

0800eaca <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800eaca:	b580      	push	{r7, lr}
 800eacc:	b082      	sub	sp, #8
 800eace:	af00      	add	r7, sp, #0
 800ead0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d00c      	beq.n	800eaf2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	685b      	ldr	r3, [r3, #4]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d004      	beq.n	800eaea <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	685b      	ldr	r3, [r3, #4]
 800eae4:	4618      	mov	r0, r3
 800eae6:	f7fe fb6b 	bl	800d1c0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800eaea:	6879      	ldr	r1, [r7, #4]
 800eaec:	2003      	movs	r0, #3
 800eaee:	f7fd fcc3 	bl	800c478 <memp_free>
  }
}
 800eaf2:	bf00      	nop
 800eaf4:	3708      	adds	r7, #8
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	bd80      	pop	{r7, pc}
	...

0800eafc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b084      	sub	sp, #16
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d106      	bne.n	800eb18 <tcp_seg_copy+0x1c>
 800eb0a:	4b0f      	ldr	r3, [pc, #60]	@ (800eb48 <tcp_seg_copy+0x4c>)
 800eb0c:	f240 6282 	movw	r2, #1666	@ 0x682
 800eb10:	490e      	ldr	r1, [pc, #56]	@ (800eb4c <tcp_seg_copy+0x50>)
 800eb12:	480f      	ldr	r0, [pc, #60]	@ (800eb50 <tcp_seg_copy+0x54>)
 800eb14:	f008 f88c 	bl	8016c30 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800eb18:	2003      	movs	r0, #3
 800eb1a:	f7fd fc37 	bl	800c38c <memp_malloc>
 800eb1e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d101      	bne.n	800eb2a <tcp_seg_copy+0x2e>
    return NULL;
 800eb26:	2300      	movs	r3, #0
 800eb28:	e00a      	b.n	800eb40 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800eb2a:	2210      	movs	r2, #16
 800eb2c:	6879      	ldr	r1, [r7, #4]
 800eb2e:	68f8      	ldr	r0, [r7, #12]
 800eb30:	f008 f9af 	bl	8016e92 <memcpy>
  pbuf_ref(cseg->p);
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	685b      	ldr	r3, [r3, #4]
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f7fe fbe7 	bl	800d30c <pbuf_ref>
  return cseg;
 800eb3e:	68fb      	ldr	r3, [r7, #12]
}
 800eb40:	4618      	mov	r0, r3
 800eb42:	3710      	adds	r7, #16
 800eb44:	46bd      	mov	sp, r7
 800eb46:	bd80      	pop	{r7, pc}
 800eb48:	08019168 	.word	0x08019168
 800eb4c:	080196bc 	.word	0x080196bc
 800eb50:	080191ac 	.word	0x080191ac

0800eb54 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b084      	sub	sp, #16
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	60f8      	str	r0, [r7, #12]
 800eb5c:	60b9      	str	r1, [r7, #8]
 800eb5e:	607a      	str	r2, [r7, #4]
 800eb60:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800eb62:	68bb      	ldr	r3, [r7, #8]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d109      	bne.n	800eb7c <tcp_recv_null+0x28>
 800eb68:	4b12      	ldr	r3, [pc, #72]	@ (800ebb4 <tcp_recv_null+0x60>)
 800eb6a:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800eb6e:	4912      	ldr	r1, [pc, #72]	@ (800ebb8 <tcp_recv_null+0x64>)
 800eb70:	4812      	ldr	r0, [pc, #72]	@ (800ebbc <tcp_recv_null+0x68>)
 800eb72:	f008 f85d 	bl	8016c30 <iprintf>
 800eb76:	f06f 030f 	mvn.w	r3, #15
 800eb7a:	e016      	b.n	800ebaa <tcp_recv_null+0x56>

  if (p != NULL) {
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d009      	beq.n	800eb96 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	891b      	ldrh	r3, [r3, #8]
 800eb86:	4619      	mov	r1, r3
 800eb88:	68b8      	ldr	r0, [r7, #8]
 800eb8a:	f7ff fad1 	bl	800e130 <tcp_recved>
    pbuf_free(p);
 800eb8e:	6878      	ldr	r0, [r7, #4]
 800eb90:	f7fe fb16 	bl	800d1c0 <pbuf_free>
 800eb94:	e008      	b.n	800eba8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800eb96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d104      	bne.n	800eba8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800eb9e:	68b8      	ldr	r0, [r7, #8]
 800eba0:	f7fe ffb8 	bl	800db14 <tcp_close>
 800eba4:	4603      	mov	r3, r0
 800eba6:	e000      	b.n	800ebaa <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800eba8:	2300      	movs	r3, #0
}
 800ebaa:	4618      	mov	r0, r3
 800ebac:	3710      	adds	r7, #16
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	bd80      	pop	{r7, pc}
 800ebb2:	bf00      	nop
 800ebb4:	08019168 	.word	0x08019168
 800ebb8:	080196d8 	.word	0x080196d8
 800ebbc:	080191ac 	.word	0x080191ac

0800ebc0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b086      	sub	sp, #24
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ebca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	db01      	blt.n	800ebd6 <tcp_kill_prio+0x16>
 800ebd2:	79fb      	ldrb	r3, [r7, #7]
 800ebd4:	e000      	b.n	800ebd8 <tcp_kill_prio+0x18>
 800ebd6:	237f      	movs	r3, #127	@ 0x7f
 800ebd8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ebda:	7afb      	ldrb	r3, [r7, #11]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d034      	beq.n	800ec4a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ebe0:	7afb      	ldrb	r3, [r7, #11]
 800ebe2:	3b01      	subs	r3, #1
 800ebe4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ebea:	2300      	movs	r3, #0
 800ebec:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ebee:	4b19      	ldr	r3, [pc, #100]	@ (800ec54 <tcp_kill_prio+0x94>)
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	617b      	str	r3, [r7, #20]
 800ebf4:	e01f      	b.n	800ec36 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ebf6:	697b      	ldr	r3, [r7, #20]
 800ebf8:	7d5b      	ldrb	r3, [r3, #21]
 800ebfa:	7afa      	ldrb	r2, [r7, #11]
 800ebfc:	429a      	cmp	r2, r3
 800ebfe:	d80c      	bhi.n	800ec1a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ec00:	697b      	ldr	r3, [r7, #20]
 800ec02:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ec04:	7afa      	ldrb	r2, [r7, #11]
 800ec06:	429a      	cmp	r2, r3
 800ec08:	d112      	bne.n	800ec30 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ec0a:	4b13      	ldr	r3, [pc, #76]	@ (800ec58 <tcp_kill_prio+0x98>)
 800ec0c:	681a      	ldr	r2, [r3, #0]
 800ec0e:	697b      	ldr	r3, [r7, #20]
 800ec10:	6a1b      	ldr	r3, [r3, #32]
 800ec12:	1ad3      	subs	r3, r2, r3
 800ec14:	68fa      	ldr	r2, [r7, #12]
 800ec16:	429a      	cmp	r2, r3
 800ec18:	d80a      	bhi.n	800ec30 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ec1a:	4b0f      	ldr	r3, [pc, #60]	@ (800ec58 <tcp_kill_prio+0x98>)
 800ec1c:	681a      	ldr	r2, [r3, #0]
 800ec1e:	697b      	ldr	r3, [r7, #20]
 800ec20:	6a1b      	ldr	r3, [r3, #32]
 800ec22:	1ad3      	subs	r3, r2, r3
 800ec24:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ec26:	697b      	ldr	r3, [r7, #20]
 800ec28:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ec2a:	697b      	ldr	r3, [r7, #20]
 800ec2c:	7d5b      	ldrb	r3, [r3, #21]
 800ec2e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec30:	697b      	ldr	r3, [r7, #20]
 800ec32:	68db      	ldr	r3, [r3, #12]
 800ec34:	617b      	str	r3, [r7, #20]
 800ec36:	697b      	ldr	r3, [r7, #20]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d1dc      	bne.n	800ebf6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ec3c:	693b      	ldr	r3, [r7, #16]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d004      	beq.n	800ec4c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ec42:	6938      	ldr	r0, [r7, #16]
 800ec44:	f7ff f8ac 	bl	800dda0 <tcp_abort>
 800ec48:	e000      	b.n	800ec4c <tcp_kill_prio+0x8c>
    return;
 800ec4a:	bf00      	nop
  }
}
 800ec4c:	3718      	adds	r7, #24
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	bd80      	pop	{r7, pc}
 800ec52:	bf00      	nop
 800ec54:	24007f10 	.word	0x24007f10
 800ec58:	24007f04 	.word	0x24007f04

0800ec5c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b086      	sub	sp, #24
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	4603      	mov	r3, r0
 800ec64:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ec66:	79fb      	ldrb	r3, [r7, #7]
 800ec68:	2b08      	cmp	r3, #8
 800ec6a:	d009      	beq.n	800ec80 <tcp_kill_state+0x24>
 800ec6c:	79fb      	ldrb	r3, [r7, #7]
 800ec6e:	2b09      	cmp	r3, #9
 800ec70:	d006      	beq.n	800ec80 <tcp_kill_state+0x24>
 800ec72:	4b1a      	ldr	r3, [pc, #104]	@ (800ecdc <tcp_kill_state+0x80>)
 800ec74:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800ec78:	4919      	ldr	r1, [pc, #100]	@ (800ece0 <tcp_kill_state+0x84>)
 800ec7a:	481a      	ldr	r0, [pc, #104]	@ (800ece4 <tcp_kill_state+0x88>)
 800ec7c:	f007 ffd8 	bl	8016c30 <iprintf>

  inactivity = 0;
 800ec80:	2300      	movs	r3, #0
 800ec82:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ec84:	2300      	movs	r3, #0
 800ec86:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec88:	4b17      	ldr	r3, [pc, #92]	@ (800ece8 <tcp_kill_state+0x8c>)
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	617b      	str	r3, [r7, #20]
 800ec8e:	e017      	b.n	800ecc0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ec90:	697b      	ldr	r3, [r7, #20]
 800ec92:	7d1b      	ldrb	r3, [r3, #20]
 800ec94:	79fa      	ldrb	r2, [r7, #7]
 800ec96:	429a      	cmp	r2, r3
 800ec98:	d10f      	bne.n	800ecba <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ec9a:	4b14      	ldr	r3, [pc, #80]	@ (800ecec <tcp_kill_state+0x90>)
 800ec9c:	681a      	ldr	r2, [r3, #0]
 800ec9e:	697b      	ldr	r3, [r7, #20]
 800eca0:	6a1b      	ldr	r3, [r3, #32]
 800eca2:	1ad3      	subs	r3, r2, r3
 800eca4:	68fa      	ldr	r2, [r7, #12]
 800eca6:	429a      	cmp	r2, r3
 800eca8:	d807      	bhi.n	800ecba <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ecaa:	4b10      	ldr	r3, [pc, #64]	@ (800ecec <tcp_kill_state+0x90>)
 800ecac:	681a      	ldr	r2, [r3, #0]
 800ecae:	697b      	ldr	r3, [r7, #20]
 800ecb0:	6a1b      	ldr	r3, [r3, #32]
 800ecb2:	1ad3      	subs	r3, r2, r3
 800ecb4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ecb6:	697b      	ldr	r3, [r7, #20]
 800ecb8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ecba:	697b      	ldr	r3, [r7, #20]
 800ecbc:	68db      	ldr	r3, [r3, #12]
 800ecbe:	617b      	str	r3, [r7, #20]
 800ecc0:	697b      	ldr	r3, [r7, #20]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d1e4      	bne.n	800ec90 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ecc6:	693b      	ldr	r3, [r7, #16]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d003      	beq.n	800ecd4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800eccc:	2100      	movs	r1, #0
 800ecce:	6938      	ldr	r0, [r7, #16]
 800ecd0:	f7fe ffa8 	bl	800dc24 <tcp_abandon>
  }
}
 800ecd4:	bf00      	nop
 800ecd6:	3718      	adds	r7, #24
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	bd80      	pop	{r7, pc}
 800ecdc:	08019168 	.word	0x08019168
 800ece0:	080196f4 	.word	0x080196f4
 800ece4:	080191ac 	.word	0x080191ac
 800ece8:	24007f10 	.word	0x24007f10
 800ecec:	24007f04 	.word	0x24007f04

0800ecf0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b084      	sub	sp, #16
 800ecf4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ecfe:	4b12      	ldr	r3, [pc, #72]	@ (800ed48 <tcp_kill_timewait+0x58>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	60fb      	str	r3, [r7, #12]
 800ed04:	e012      	b.n	800ed2c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ed06:	4b11      	ldr	r3, [pc, #68]	@ (800ed4c <tcp_kill_timewait+0x5c>)
 800ed08:	681a      	ldr	r2, [r3, #0]
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	6a1b      	ldr	r3, [r3, #32]
 800ed0e:	1ad3      	subs	r3, r2, r3
 800ed10:	687a      	ldr	r2, [r7, #4]
 800ed12:	429a      	cmp	r2, r3
 800ed14:	d807      	bhi.n	800ed26 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ed16:	4b0d      	ldr	r3, [pc, #52]	@ (800ed4c <tcp_kill_timewait+0x5c>)
 800ed18:	681a      	ldr	r2, [r3, #0]
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	6a1b      	ldr	r3, [r3, #32]
 800ed1e:	1ad3      	subs	r3, r2, r3
 800ed20:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	68db      	ldr	r3, [r3, #12]
 800ed2a:	60fb      	str	r3, [r7, #12]
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d1e9      	bne.n	800ed06 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ed32:	68bb      	ldr	r3, [r7, #8]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d002      	beq.n	800ed3e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ed38:	68b8      	ldr	r0, [r7, #8]
 800ed3a:	f7ff f831 	bl	800dda0 <tcp_abort>
  }
}
 800ed3e:	bf00      	nop
 800ed40:	3710      	adds	r7, #16
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bd80      	pop	{r7, pc}
 800ed46:	bf00      	nop
 800ed48:	24007f14 	.word	0x24007f14
 800ed4c:	24007f04 	.word	0x24007f04

0800ed50 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b082      	sub	sp, #8
 800ed54:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ed56:	4b10      	ldr	r3, [pc, #64]	@ (800ed98 <tcp_handle_closepend+0x48>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ed5c:	e014      	b.n	800ed88 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	68db      	ldr	r3, [r3, #12]
 800ed62:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	8b5b      	ldrh	r3, [r3, #26]
 800ed68:	f003 0308 	and.w	r3, r3, #8
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d009      	beq.n	800ed84 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	8b5b      	ldrh	r3, [r3, #26]
 800ed74:	f023 0308 	bic.w	r3, r3, #8
 800ed78:	b29a      	uxth	r2, r3
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800ed7e:	6878      	ldr	r0, [r7, #4]
 800ed80:	f7fe fe5e 	bl	800da40 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d1e7      	bne.n	800ed5e <tcp_handle_closepend+0xe>
  }
}
 800ed8e:	bf00      	nop
 800ed90:	bf00      	nop
 800ed92:	3708      	adds	r7, #8
 800ed94:	46bd      	mov	sp, r7
 800ed96:	bd80      	pop	{r7, pc}
 800ed98:	24007f10 	.word	0x24007f10

0800ed9c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b084      	sub	sp, #16
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	4603      	mov	r3, r0
 800eda4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eda6:	2001      	movs	r0, #1
 800eda8:	f7fd faf0 	bl	800c38c <memp_malloc>
 800edac:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d126      	bne.n	800ee02 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800edb4:	f7ff ffcc 	bl	800ed50 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800edb8:	f7ff ff9a 	bl	800ecf0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800edbc:	2001      	movs	r0, #1
 800edbe:	f7fd fae5 	bl	800c38c <memp_malloc>
 800edc2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d11b      	bne.n	800ee02 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800edca:	2009      	movs	r0, #9
 800edcc:	f7ff ff46 	bl	800ec5c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800edd0:	2001      	movs	r0, #1
 800edd2:	f7fd fadb 	bl	800c38c <memp_malloc>
 800edd6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d111      	bne.n	800ee02 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800edde:	2008      	movs	r0, #8
 800ede0:	f7ff ff3c 	bl	800ec5c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ede4:	2001      	movs	r0, #1
 800ede6:	f7fd fad1 	bl	800c38c <memp_malloc>
 800edea:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d107      	bne.n	800ee02 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800edf2:	79fb      	ldrb	r3, [r7, #7]
 800edf4:	4618      	mov	r0, r3
 800edf6:	f7ff fee3 	bl	800ebc0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800edfa:	2001      	movs	r0, #1
 800edfc:	f7fd fac6 	bl	800c38c <memp_malloc>
 800ee00:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d03f      	beq.n	800ee88 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ee08:	229c      	movs	r2, #156	@ 0x9c
 800ee0a:	2100      	movs	r1, #0
 800ee0c:	68f8      	ldr	r0, [r7, #12]
 800ee0e:	f007 ff74 	bl	8016cfa <memset>
    pcb->prio = prio;
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	79fa      	ldrb	r2, [r7, #7]
 800ee16:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800ee1e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800ee28:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	22ff      	movs	r2, #255	@ 0xff
 800ee36:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800ee3e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	2206      	movs	r2, #6
 800ee44:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	2206      	movs	r2, #6
 800ee4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ee54:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	2201      	movs	r2, #1
 800ee5a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800ee5e:	4b0d      	ldr	r3, [pc, #52]	@ (800ee94 <tcp_alloc+0xf8>)
 800ee60:	681a      	ldr	r2, [r3, #0]
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ee66:	4b0c      	ldr	r3, [pc, #48]	@ (800ee98 <tcp_alloc+0xfc>)
 800ee68:	781a      	ldrb	r2, [r3, #0]
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800ee74:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	4a08      	ldr	r2, [pc, #32]	@ (800ee9c <tcp_alloc+0x100>)
 800ee7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	4a07      	ldr	r2, [pc, #28]	@ (800eea0 <tcp_alloc+0x104>)
 800ee84:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ee88:	68fb      	ldr	r3, [r7, #12]
}
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	3710      	adds	r7, #16
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd80      	pop	{r7, pc}
 800ee92:	bf00      	nop
 800ee94:	24007f04 	.word	0x24007f04
 800ee98:	24007f1a 	.word	0x24007f1a
 800ee9c:	0800eb55 	.word	0x0800eb55
 800eea0:	006ddd00 	.word	0x006ddd00

0800eea4 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b084      	sub	sp, #16
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	4603      	mov	r3, r0
 800eeac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800eeae:	2040      	movs	r0, #64	@ 0x40
 800eeb0:	f7ff ff74 	bl	800ed9c <tcp_alloc>
 800eeb4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800eeb6:	68fb      	ldr	r3, [r7, #12]
}
 800eeb8:	4618      	mov	r0, r3
 800eeba:	3710      	adds	r7, #16
 800eebc:	46bd      	mov	sp, r7
 800eebe:	bd80      	pop	{r7, pc}

0800eec0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800eec0:	b480      	push	{r7}
 800eec2:	b083      	sub	sp, #12
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
 800eec8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d002      	beq.n	800eed6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	683a      	ldr	r2, [r7, #0]
 800eed4:	611a      	str	r2, [r3, #16]
  }
}
 800eed6:	bf00      	nop
 800eed8:	370c      	adds	r7, #12
 800eeda:	46bd      	mov	sp, r7
 800eedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee0:	4770      	bx	lr
	...

0800eee4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b082      	sub	sp, #8
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
 800eeec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d00e      	beq.n	800ef12 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	7d1b      	ldrb	r3, [r3, #20]
 800eef8:	2b01      	cmp	r3, #1
 800eefa:	d106      	bne.n	800ef0a <tcp_recv+0x26>
 800eefc:	4b07      	ldr	r3, [pc, #28]	@ (800ef1c <tcp_recv+0x38>)
 800eefe:	f240 72df 	movw	r2, #2015	@ 0x7df
 800ef02:	4907      	ldr	r1, [pc, #28]	@ (800ef20 <tcp_recv+0x3c>)
 800ef04:	4807      	ldr	r0, [pc, #28]	@ (800ef24 <tcp_recv+0x40>)
 800ef06:	f007 fe93 	bl	8016c30 <iprintf>
    pcb->recv = recv;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	683a      	ldr	r2, [r7, #0]
 800ef0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 800ef12:	bf00      	nop
 800ef14:	3708      	adds	r7, #8
 800ef16:	46bd      	mov	sp, r7
 800ef18:	bd80      	pop	{r7, pc}
 800ef1a:	bf00      	nop
 800ef1c:	08019168 	.word	0x08019168
 800ef20:	08019704 	.word	0x08019704
 800ef24:	080191ac 	.word	0x080191ac

0800ef28 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b082      	sub	sp, #8
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
 800ef30:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d00e      	beq.n	800ef56 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	7d1b      	ldrb	r3, [r3, #20]
 800ef3c:	2b01      	cmp	r3, #1
 800ef3e:	d106      	bne.n	800ef4e <tcp_sent+0x26>
 800ef40:	4b07      	ldr	r3, [pc, #28]	@ (800ef60 <tcp_sent+0x38>)
 800ef42:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800ef46:	4907      	ldr	r1, [pc, #28]	@ (800ef64 <tcp_sent+0x3c>)
 800ef48:	4807      	ldr	r0, [pc, #28]	@ (800ef68 <tcp_sent+0x40>)
 800ef4a:	f007 fe71 	bl	8016c30 <iprintf>
    pcb->sent = sent;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	683a      	ldr	r2, [r7, #0]
 800ef52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 800ef56:	bf00      	nop
 800ef58:	3708      	adds	r7, #8
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	bd80      	pop	{r7, pc}
 800ef5e:	bf00      	nop
 800ef60:	08019168 	.word	0x08019168
 800ef64:	0801972c 	.word	0x0801972c
 800ef68:	080191ac 	.word	0x080191ac

0800ef6c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b082      	sub	sp, #8
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
 800ef74:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d00e      	beq.n	800ef9a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	7d1b      	ldrb	r3, [r3, #20]
 800ef80:	2b01      	cmp	r3, #1
 800ef82:	d106      	bne.n	800ef92 <tcp_err+0x26>
 800ef84:	4b07      	ldr	r3, [pc, #28]	@ (800efa4 <tcp_err+0x38>)
 800ef86:	f640 020d 	movw	r2, #2061	@ 0x80d
 800ef8a:	4907      	ldr	r1, [pc, #28]	@ (800efa8 <tcp_err+0x3c>)
 800ef8c:	4807      	ldr	r0, [pc, #28]	@ (800efac <tcp_err+0x40>)
 800ef8e:	f007 fe4f 	bl	8016c30 <iprintf>
    pcb->errf = err;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	683a      	ldr	r2, [r7, #0]
 800ef96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 800ef9a:	bf00      	nop
 800ef9c:	3708      	adds	r7, #8
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	bd80      	pop	{r7, pc}
 800efa2:	bf00      	nop
 800efa4:	08019168 	.word	0x08019168
 800efa8:	08019754 	.word	0x08019754
 800efac:	080191ac 	.word	0x080191ac

0800efb0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800efb0:	b480      	push	{r7}
 800efb2:	b085      	sub	sp, #20
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
 800efb8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d008      	beq.n	800efd2 <tcp_accept+0x22>
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	7d1b      	ldrb	r3, [r3, #20]
 800efc4:	2b01      	cmp	r3, #1
 800efc6:	d104      	bne.n	800efd2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	683a      	ldr	r2, [r7, #0]
 800efd0:	619a      	str	r2, [r3, #24]
  }
}
 800efd2:	bf00      	nop
 800efd4:	3714      	adds	r7, #20
 800efd6:	46bd      	mov	sp, r7
 800efd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efdc:	4770      	bx	lr
	...

0800efe0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b084      	sub	sp, #16
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	60f8      	str	r0, [r7, #12]
 800efe8:	60b9      	str	r1, [r7, #8]
 800efea:	4613      	mov	r3, r2
 800efec:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d107      	bne.n	800f004 <tcp_poll+0x24>
 800eff4:	4b0e      	ldr	r3, [pc, #56]	@ (800f030 <tcp_poll+0x50>)
 800eff6:	f640 023d 	movw	r2, #2109	@ 0x83d
 800effa:	490e      	ldr	r1, [pc, #56]	@ (800f034 <tcp_poll+0x54>)
 800effc:	480e      	ldr	r0, [pc, #56]	@ (800f038 <tcp_poll+0x58>)
 800effe:	f007 fe17 	bl	8016c30 <iprintf>
 800f002:	e011      	b.n	800f028 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	7d1b      	ldrb	r3, [r3, #20]
 800f008:	2b01      	cmp	r3, #1
 800f00a:	d106      	bne.n	800f01a <tcp_poll+0x3a>
 800f00c:	4b08      	ldr	r3, [pc, #32]	@ (800f030 <tcp_poll+0x50>)
 800f00e:	f640 023e 	movw	r2, #2110	@ 0x83e
 800f012:	490a      	ldr	r1, [pc, #40]	@ (800f03c <tcp_poll+0x5c>)
 800f014:	4808      	ldr	r0, [pc, #32]	@ (800f038 <tcp_poll+0x58>)
 800f016:	f007 fe0b 	bl	8016c30 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	68ba      	ldr	r2, [r7, #8]
 800f01e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	79fa      	ldrb	r2, [r7, #7]
 800f026:	775a      	strb	r2, [r3, #29]
}
 800f028:	3710      	adds	r7, #16
 800f02a:	46bd      	mov	sp, r7
 800f02c:	bd80      	pop	{r7, pc}
 800f02e:	bf00      	nop
 800f030:	08019168 	.word	0x08019168
 800f034:	0801977c 	.word	0x0801977c
 800f038:	080191ac 	.word	0x080191ac
 800f03c:	08019794 	.word	0x08019794

0800f040 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b082      	sub	sp, #8
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d107      	bne.n	800f05e <tcp_pcb_purge+0x1e>
 800f04e:	4b21      	ldr	r3, [pc, #132]	@ (800f0d4 <tcp_pcb_purge+0x94>)
 800f050:	f640 0251 	movw	r2, #2129	@ 0x851
 800f054:	4920      	ldr	r1, [pc, #128]	@ (800f0d8 <tcp_pcb_purge+0x98>)
 800f056:	4821      	ldr	r0, [pc, #132]	@ (800f0dc <tcp_pcb_purge+0x9c>)
 800f058:	f007 fdea 	bl	8016c30 <iprintf>
 800f05c:	e037      	b.n	800f0ce <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	7d1b      	ldrb	r3, [r3, #20]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d033      	beq.n	800f0ce <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f06a:	2b0a      	cmp	r3, #10
 800f06c:	d02f      	beq.n	800f0ce <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f072:	2b01      	cmp	r3, #1
 800f074:	d02b      	beq.n	800f0ce <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d007      	beq.n	800f08e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f082:	4618      	mov	r0, r3
 800f084:	f7fe f89c 	bl	800d1c0 <pbuf_free>
      pcb->refused_data = NULL;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	2200      	movs	r2, #0
 800f08c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f092:	2b00      	cmp	r3, #0
 800f094:	d002      	beq.n	800f09c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f096:	6878      	ldr	r0, [r7, #4]
 800f098:	f000 f986 	bl	800f3a8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f0a2:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	f7ff fcf9 	bl	800eaa0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	f7ff fcf4 	bl	800eaa0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	66da      	str	r2, [r3, #108]	@ 0x6c
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f0ce:	3708      	adds	r7, #8
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	bd80      	pop	{r7, pc}
 800f0d4:	08019168 	.word	0x08019168
 800f0d8:	080197b4 	.word	0x080197b4
 800f0dc:	080191ac 	.word	0x080191ac

0800f0e0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b084      	sub	sp, #16
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
 800f0e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d106      	bne.n	800f0fe <tcp_pcb_remove+0x1e>
 800f0f0:	4b3e      	ldr	r3, [pc, #248]	@ (800f1ec <tcp_pcb_remove+0x10c>)
 800f0f2:	f640 0283 	movw	r2, #2179	@ 0x883
 800f0f6:	493e      	ldr	r1, [pc, #248]	@ (800f1f0 <tcp_pcb_remove+0x110>)
 800f0f8:	483e      	ldr	r0, [pc, #248]	@ (800f1f4 <tcp_pcb_remove+0x114>)
 800f0fa:	f007 fd99 	bl	8016c30 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d106      	bne.n	800f112 <tcp_pcb_remove+0x32>
 800f104:	4b39      	ldr	r3, [pc, #228]	@ (800f1ec <tcp_pcb_remove+0x10c>)
 800f106:	f640 0284 	movw	r2, #2180	@ 0x884
 800f10a:	493b      	ldr	r1, [pc, #236]	@ (800f1f8 <tcp_pcb_remove+0x118>)
 800f10c:	4839      	ldr	r0, [pc, #228]	@ (800f1f4 <tcp_pcb_remove+0x114>)
 800f10e:	f007 fd8f 	bl	8016c30 <iprintf>

  TCP_RMV(pcblist, pcb);
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	683a      	ldr	r2, [r7, #0]
 800f118:	429a      	cmp	r2, r3
 800f11a:	d105      	bne.n	800f128 <tcp_pcb_remove+0x48>
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	68da      	ldr	r2, [r3, #12]
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	601a      	str	r2, [r3, #0]
 800f126:	e013      	b.n	800f150 <tcp_pcb_remove+0x70>
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	60fb      	str	r3, [r7, #12]
 800f12e:	e00c      	b.n	800f14a <tcp_pcb_remove+0x6a>
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	68db      	ldr	r3, [r3, #12]
 800f134:	683a      	ldr	r2, [r7, #0]
 800f136:	429a      	cmp	r2, r3
 800f138:	d104      	bne.n	800f144 <tcp_pcb_remove+0x64>
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	68da      	ldr	r2, [r3, #12]
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	60da      	str	r2, [r3, #12]
 800f142:	e005      	b.n	800f150 <tcp_pcb_remove+0x70>
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	68db      	ldr	r3, [r3, #12]
 800f148:	60fb      	str	r3, [r7, #12]
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d1ef      	bne.n	800f130 <tcp_pcb_remove+0x50>
 800f150:	683b      	ldr	r3, [r7, #0]
 800f152:	2200      	movs	r2, #0
 800f154:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f156:	6838      	ldr	r0, [r7, #0]
 800f158:	f7ff ff72 	bl	800f040 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f15c:	683b      	ldr	r3, [r7, #0]
 800f15e:	7d1b      	ldrb	r3, [r3, #20]
 800f160:	2b0a      	cmp	r3, #10
 800f162:	d013      	beq.n	800f18c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f164:	683b      	ldr	r3, [r7, #0]
 800f166:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f168:	2b01      	cmp	r3, #1
 800f16a:	d00f      	beq.n	800f18c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	8b5b      	ldrh	r3, [r3, #26]
 800f170:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f174:	2b00      	cmp	r3, #0
 800f176:	d009      	beq.n	800f18c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f178:	683b      	ldr	r3, [r7, #0]
 800f17a:	8b5b      	ldrh	r3, [r3, #26]
 800f17c:	f043 0302 	orr.w	r3, r3, #2
 800f180:	b29a      	uxth	r2, r3
 800f182:	683b      	ldr	r3, [r7, #0]
 800f184:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f186:	6838      	ldr	r0, [r7, #0]
 800f188:	f003 fbc0 	bl	801290c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f18c:	683b      	ldr	r3, [r7, #0]
 800f18e:	7d1b      	ldrb	r3, [r3, #20]
 800f190:	2b01      	cmp	r3, #1
 800f192:	d020      	beq.n	800f1d6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d006      	beq.n	800f1aa <tcp_pcb_remove+0xca>
 800f19c:	4b13      	ldr	r3, [pc, #76]	@ (800f1ec <tcp_pcb_remove+0x10c>)
 800f19e:	f640 0293 	movw	r2, #2195	@ 0x893
 800f1a2:	4916      	ldr	r1, [pc, #88]	@ (800f1fc <tcp_pcb_remove+0x11c>)
 800f1a4:	4813      	ldr	r0, [pc, #76]	@ (800f1f4 <tcp_pcb_remove+0x114>)
 800f1a6:	f007 fd43 	bl	8016c30 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d006      	beq.n	800f1c0 <tcp_pcb_remove+0xe0>
 800f1b2:	4b0e      	ldr	r3, [pc, #56]	@ (800f1ec <tcp_pcb_remove+0x10c>)
 800f1b4:	f640 0294 	movw	r2, #2196	@ 0x894
 800f1b8:	4911      	ldr	r1, [pc, #68]	@ (800f200 <tcp_pcb_remove+0x120>)
 800f1ba:	480e      	ldr	r0, [pc, #56]	@ (800f1f4 <tcp_pcb_remove+0x114>)
 800f1bc:	f007 fd38 	bl	8016c30 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d006      	beq.n	800f1d6 <tcp_pcb_remove+0xf6>
 800f1c8:	4b08      	ldr	r3, [pc, #32]	@ (800f1ec <tcp_pcb_remove+0x10c>)
 800f1ca:	f640 0296 	movw	r2, #2198	@ 0x896
 800f1ce:	490d      	ldr	r1, [pc, #52]	@ (800f204 <tcp_pcb_remove+0x124>)
 800f1d0:	4808      	ldr	r0, [pc, #32]	@ (800f1f4 <tcp_pcb_remove+0x114>)
 800f1d2:	f007 fd2d 	bl	8016c30 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f1d6:	683b      	ldr	r3, [r7, #0]
 800f1d8:	2200      	movs	r2, #0
 800f1da:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	2200      	movs	r2, #0
 800f1e0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f1e2:	bf00      	nop
 800f1e4:	3710      	adds	r7, #16
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	bd80      	pop	{r7, pc}
 800f1ea:	bf00      	nop
 800f1ec:	08019168 	.word	0x08019168
 800f1f0:	080197d0 	.word	0x080197d0
 800f1f4:	080191ac 	.word	0x080191ac
 800f1f8:	080197ec 	.word	0x080197ec
 800f1fc:	0801980c 	.word	0x0801980c
 800f200:	08019824 	.word	0x08019824
 800f204:	08019840 	.word	0x08019840

0800f208 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b082      	sub	sp, #8
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d106      	bne.n	800f224 <tcp_next_iss+0x1c>
 800f216:	4b0a      	ldr	r3, [pc, #40]	@ (800f240 <tcp_next_iss+0x38>)
 800f218:	f640 02af 	movw	r2, #2223	@ 0x8af
 800f21c:	4909      	ldr	r1, [pc, #36]	@ (800f244 <tcp_next_iss+0x3c>)
 800f21e:	480a      	ldr	r0, [pc, #40]	@ (800f248 <tcp_next_iss+0x40>)
 800f220:	f007 fd06 	bl	8016c30 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f224:	4b09      	ldr	r3, [pc, #36]	@ (800f24c <tcp_next_iss+0x44>)
 800f226:	681a      	ldr	r2, [r3, #0]
 800f228:	4b09      	ldr	r3, [pc, #36]	@ (800f250 <tcp_next_iss+0x48>)
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	4413      	add	r3, r2
 800f22e:	4a07      	ldr	r2, [pc, #28]	@ (800f24c <tcp_next_iss+0x44>)
 800f230:	6013      	str	r3, [r2, #0]
  return iss;
 800f232:	4b06      	ldr	r3, [pc, #24]	@ (800f24c <tcp_next_iss+0x44>)
 800f234:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f236:	4618      	mov	r0, r3
 800f238:	3708      	adds	r7, #8
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd80      	pop	{r7, pc}
 800f23e:	bf00      	nop
 800f240:	08019168 	.word	0x08019168
 800f244:	08019858 	.word	0x08019858
 800f248:	080191ac 	.word	0x080191ac
 800f24c:	2400002c 	.word	0x2400002c
 800f250:	24007f04 	.word	0x24007f04

0800f254 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b086      	sub	sp, #24
 800f258:	af00      	add	r7, sp, #0
 800f25a:	4603      	mov	r3, r0
 800f25c:	60b9      	str	r1, [r7, #8]
 800f25e:	607a      	str	r2, [r7, #4]
 800f260:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d106      	bne.n	800f276 <tcp_eff_send_mss_netif+0x22>
 800f268:	4b14      	ldr	r3, [pc, #80]	@ (800f2bc <tcp_eff_send_mss_netif+0x68>)
 800f26a:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800f26e:	4914      	ldr	r1, [pc, #80]	@ (800f2c0 <tcp_eff_send_mss_netif+0x6c>)
 800f270:	4814      	ldr	r0, [pc, #80]	@ (800f2c4 <tcp_eff_send_mss_netif+0x70>)
 800f272:	f007 fcdd 	bl	8016c30 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f276:	68bb      	ldr	r3, [r7, #8]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d101      	bne.n	800f280 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f27c:	89fb      	ldrh	r3, [r7, #14]
 800f27e:	e019      	b.n	800f2b4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800f284:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f286:	8afb      	ldrh	r3, [r7, #22]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d012      	beq.n	800f2b2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f28c:	2328      	movs	r3, #40	@ 0x28
 800f28e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f290:	8afa      	ldrh	r2, [r7, #22]
 800f292:	8abb      	ldrh	r3, [r7, #20]
 800f294:	429a      	cmp	r2, r3
 800f296:	d904      	bls.n	800f2a2 <tcp_eff_send_mss_netif+0x4e>
 800f298:	8afa      	ldrh	r2, [r7, #22]
 800f29a:	8abb      	ldrh	r3, [r7, #20]
 800f29c:	1ad3      	subs	r3, r2, r3
 800f29e:	b29b      	uxth	r3, r3
 800f2a0:	e000      	b.n	800f2a4 <tcp_eff_send_mss_netif+0x50>
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f2a6:	8a7a      	ldrh	r2, [r7, #18]
 800f2a8:	89fb      	ldrh	r3, [r7, #14]
 800f2aa:	4293      	cmp	r3, r2
 800f2ac:	bf28      	it	cs
 800f2ae:	4613      	movcs	r3, r2
 800f2b0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f2b2:	89fb      	ldrh	r3, [r7, #14]
}
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	3718      	adds	r7, #24
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd80      	pop	{r7, pc}
 800f2bc:	08019168 	.word	0x08019168
 800f2c0:	08019874 	.word	0x08019874
 800f2c4:	080191ac 	.word	0x080191ac

0800f2c8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b084      	sub	sp, #16
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
 800f2d0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d119      	bne.n	800f310 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f2dc:	4b10      	ldr	r3, [pc, #64]	@ (800f320 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f2de:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800f2e2:	4910      	ldr	r1, [pc, #64]	@ (800f324 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f2e4:	4810      	ldr	r0, [pc, #64]	@ (800f328 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f2e6:	f007 fca3 	bl	8016c30 <iprintf>

  while (pcb != NULL) {
 800f2ea:	e011      	b.n	800f310 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	681a      	ldr	r2, [r3, #0]
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	429a      	cmp	r2, r3
 800f2f6:	d108      	bne.n	800f30a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	68db      	ldr	r3, [r3, #12]
 800f2fc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f2fe:	68f8      	ldr	r0, [r7, #12]
 800f300:	f7fe fd4e 	bl	800dda0 <tcp_abort>
      pcb = next;
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	60fb      	str	r3, [r7, #12]
 800f308:	e002      	b.n	800f310 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	68db      	ldr	r3, [r3, #12]
 800f30e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d1ea      	bne.n	800f2ec <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f316:	bf00      	nop
 800f318:	bf00      	nop
 800f31a:	3710      	adds	r7, #16
 800f31c:	46bd      	mov	sp, r7
 800f31e:	bd80      	pop	{r7, pc}
 800f320:	08019168 	.word	0x08019168
 800f324:	0801989c 	.word	0x0801989c
 800f328:	080191ac 	.word	0x080191ac

0800f32c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b084      	sub	sp, #16
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
 800f334:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d02a      	beq.n	800f392 <tcp_netif_ip_addr_changed+0x66>
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d026      	beq.n	800f392 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f344:	4b15      	ldr	r3, [pc, #84]	@ (800f39c <tcp_netif_ip_addr_changed+0x70>)
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	4619      	mov	r1, r3
 800f34a:	6878      	ldr	r0, [r7, #4]
 800f34c:	f7ff ffbc 	bl	800f2c8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f350:	4b13      	ldr	r3, [pc, #76]	@ (800f3a0 <tcp_netif_ip_addr_changed+0x74>)
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	4619      	mov	r1, r3
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	f7ff ffb6 	bl	800f2c8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d017      	beq.n	800f392 <tcp_netif_ip_addr_changed+0x66>
 800f362:	683b      	ldr	r3, [r7, #0]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d013      	beq.n	800f392 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f36a:	4b0e      	ldr	r3, [pc, #56]	@ (800f3a4 <tcp_netif_ip_addr_changed+0x78>)
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	60fb      	str	r3, [r7, #12]
 800f370:	e00c      	b.n	800f38c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	681a      	ldr	r2, [r3, #0]
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	429a      	cmp	r2, r3
 800f37c:	d103      	bne.n	800f386 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	681a      	ldr	r2, [r3, #0]
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	68db      	ldr	r3, [r3, #12]
 800f38a:	60fb      	str	r3, [r7, #12]
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d1ef      	bne.n	800f372 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f392:	bf00      	nop
 800f394:	3710      	adds	r7, #16
 800f396:	46bd      	mov	sp, r7
 800f398:	bd80      	pop	{r7, pc}
 800f39a:	bf00      	nop
 800f39c:	24007f10 	.word	0x24007f10
 800f3a0:	24007f08 	.word	0x24007f08
 800f3a4:	24007f0c 	.word	0x24007f0c

0800f3a8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b082      	sub	sp, #8
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d007      	beq.n	800f3c8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f3bc:	4618      	mov	r0, r3
 800f3be:	f7ff fb6f 	bl	800eaa0 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f3c8:	bf00      	nop
 800f3ca:	3708      	adds	r7, #8
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	bd80      	pop	{r7, pc}

0800f3d0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f3d0:	b590      	push	{r4, r7, lr}
 800f3d2:	b08d      	sub	sp, #52	@ 0x34
 800f3d4:	af04      	add	r7, sp, #16
 800f3d6:	6078      	str	r0, [r7, #4]
 800f3d8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d105      	bne.n	800f3ec <tcp_input+0x1c>
 800f3e0:	4b9b      	ldr	r3, [pc, #620]	@ (800f650 <tcp_input+0x280>)
 800f3e2:	2283      	movs	r2, #131	@ 0x83
 800f3e4:	499b      	ldr	r1, [pc, #620]	@ (800f654 <tcp_input+0x284>)
 800f3e6:	489c      	ldr	r0, [pc, #624]	@ (800f658 <tcp_input+0x288>)
 800f3e8:	f007 fc22 	bl	8016c30 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	685b      	ldr	r3, [r3, #4]
 800f3f0:	4a9a      	ldr	r2, [pc, #616]	@ (800f65c <tcp_input+0x28c>)
 800f3f2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	895b      	ldrh	r3, [r3, #10]
 800f3f8:	2b13      	cmp	r3, #19
 800f3fa:	f240 83d1 	bls.w	800fba0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f3fe:	4b98      	ldr	r3, [pc, #608]	@ (800f660 <tcp_input+0x290>)
 800f400:	695b      	ldr	r3, [r3, #20]
 800f402:	4a97      	ldr	r2, [pc, #604]	@ (800f660 <tcp_input+0x290>)
 800f404:	6812      	ldr	r2, [r2, #0]
 800f406:	4611      	mov	r1, r2
 800f408:	4618      	mov	r0, r3
 800f40a:	f006 fa05 	bl	8015818 <ip4_addr_isbroadcast_u32>
 800f40e:	4603      	mov	r3, r0
 800f410:	2b00      	cmp	r3, #0
 800f412:	f040 83c7 	bne.w	800fba4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f416:	4b92      	ldr	r3, [pc, #584]	@ (800f660 <tcp_input+0x290>)
 800f418:	695b      	ldr	r3, [r3, #20]
 800f41a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f41e:	2be0      	cmp	r3, #224	@ 0xe0
 800f420:	f000 83c0 	beq.w	800fba4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f424:	4b8d      	ldr	r3, [pc, #564]	@ (800f65c <tcp_input+0x28c>)
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	899b      	ldrh	r3, [r3, #12]
 800f42a:	b29b      	uxth	r3, r3
 800f42c:	4618      	mov	r0, r3
 800f42e:	f7fc fa1d 	bl	800b86c <lwip_htons>
 800f432:	4603      	mov	r3, r0
 800f434:	0b1b      	lsrs	r3, r3, #12
 800f436:	b29b      	uxth	r3, r3
 800f438:	b2db      	uxtb	r3, r3
 800f43a:	009b      	lsls	r3, r3, #2
 800f43c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f43e:	7cbb      	ldrb	r3, [r7, #18]
 800f440:	2b13      	cmp	r3, #19
 800f442:	f240 83b1 	bls.w	800fba8 <tcp_input+0x7d8>
 800f446:	7cbb      	ldrb	r3, [r7, #18]
 800f448:	b29a      	uxth	r2, r3
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	891b      	ldrh	r3, [r3, #8]
 800f44e:	429a      	cmp	r2, r3
 800f450:	f200 83aa 	bhi.w	800fba8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f454:	7cbb      	ldrb	r3, [r7, #18]
 800f456:	b29b      	uxth	r3, r3
 800f458:	3b14      	subs	r3, #20
 800f45a:	b29a      	uxth	r2, r3
 800f45c:	4b81      	ldr	r3, [pc, #516]	@ (800f664 <tcp_input+0x294>)
 800f45e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f460:	4b81      	ldr	r3, [pc, #516]	@ (800f668 <tcp_input+0x298>)
 800f462:	2200      	movs	r2, #0
 800f464:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	895a      	ldrh	r2, [r3, #10]
 800f46a:	7cbb      	ldrb	r3, [r7, #18]
 800f46c:	b29b      	uxth	r3, r3
 800f46e:	429a      	cmp	r2, r3
 800f470:	d309      	bcc.n	800f486 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f472:	4b7c      	ldr	r3, [pc, #496]	@ (800f664 <tcp_input+0x294>)
 800f474:	881a      	ldrh	r2, [r3, #0]
 800f476:	4b7d      	ldr	r3, [pc, #500]	@ (800f66c <tcp_input+0x29c>)
 800f478:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f47a:	7cbb      	ldrb	r3, [r7, #18]
 800f47c:	4619      	mov	r1, r3
 800f47e:	6878      	ldr	r0, [r7, #4]
 800f480:	f7fd fe18 	bl	800d0b4 <pbuf_remove_header>
 800f484:	e04e      	b.n	800f524 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d105      	bne.n	800f49a <tcp_input+0xca>
 800f48e:	4b70      	ldr	r3, [pc, #448]	@ (800f650 <tcp_input+0x280>)
 800f490:	22c2      	movs	r2, #194	@ 0xc2
 800f492:	4977      	ldr	r1, [pc, #476]	@ (800f670 <tcp_input+0x2a0>)
 800f494:	4870      	ldr	r0, [pc, #448]	@ (800f658 <tcp_input+0x288>)
 800f496:	f007 fbcb 	bl	8016c30 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f49a:	2114      	movs	r1, #20
 800f49c:	6878      	ldr	r0, [r7, #4]
 800f49e:	f7fd fe09 	bl	800d0b4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	895a      	ldrh	r2, [r3, #10]
 800f4a6:	4b71      	ldr	r3, [pc, #452]	@ (800f66c <tcp_input+0x29c>)
 800f4a8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f4aa:	4b6e      	ldr	r3, [pc, #440]	@ (800f664 <tcp_input+0x294>)
 800f4ac:	881a      	ldrh	r2, [r3, #0]
 800f4ae:	4b6f      	ldr	r3, [pc, #444]	@ (800f66c <tcp_input+0x29c>)
 800f4b0:	881b      	ldrh	r3, [r3, #0]
 800f4b2:	1ad3      	subs	r3, r2, r3
 800f4b4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f4b6:	4b6d      	ldr	r3, [pc, #436]	@ (800f66c <tcp_input+0x29c>)
 800f4b8:	881b      	ldrh	r3, [r3, #0]
 800f4ba:	4619      	mov	r1, r3
 800f4bc:	6878      	ldr	r0, [r7, #4]
 800f4be:	f7fd fdf9 	bl	800d0b4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	895b      	ldrh	r3, [r3, #10]
 800f4c8:	8a3a      	ldrh	r2, [r7, #16]
 800f4ca:	429a      	cmp	r2, r3
 800f4cc:	f200 836e 	bhi.w	800fbac <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	685b      	ldr	r3, [r3, #4]
 800f4d6:	4a64      	ldr	r2, [pc, #400]	@ (800f668 <tcp_input+0x298>)
 800f4d8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	8a3a      	ldrh	r2, [r7, #16]
 800f4e0:	4611      	mov	r1, r2
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	f7fd fde6 	bl	800d0b4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	891a      	ldrh	r2, [r3, #8]
 800f4ec:	8a3b      	ldrh	r3, [r7, #16]
 800f4ee:	1ad3      	subs	r3, r2, r3
 800f4f0:	b29a      	uxth	r2, r3
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	895b      	ldrh	r3, [r3, #10]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d005      	beq.n	800f50a <tcp_input+0x13a>
 800f4fe:	4b54      	ldr	r3, [pc, #336]	@ (800f650 <tcp_input+0x280>)
 800f500:	22df      	movs	r2, #223	@ 0xdf
 800f502:	495c      	ldr	r1, [pc, #368]	@ (800f674 <tcp_input+0x2a4>)
 800f504:	4854      	ldr	r0, [pc, #336]	@ (800f658 <tcp_input+0x288>)
 800f506:	f007 fb93 	bl	8016c30 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	891a      	ldrh	r2, [r3, #8]
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	891b      	ldrh	r3, [r3, #8]
 800f514:	429a      	cmp	r2, r3
 800f516:	d005      	beq.n	800f524 <tcp_input+0x154>
 800f518:	4b4d      	ldr	r3, [pc, #308]	@ (800f650 <tcp_input+0x280>)
 800f51a:	22e0      	movs	r2, #224	@ 0xe0
 800f51c:	4956      	ldr	r1, [pc, #344]	@ (800f678 <tcp_input+0x2a8>)
 800f51e:	484e      	ldr	r0, [pc, #312]	@ (800f658 <tcp_input+0x288>)
 800f520:	f007 fb86 	bl	8016c30 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f524:	4b4d      	ldr	r3, [pc, #308]	@ (800f65c <tcp_input+0x28c>)
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	881b      	ldrh	r3, [r3, #0]
 800f52a:	b29b      	uxth	r3, r3
 800f52c:	4a4b      	ldr	r2, [pc, #300]	@ (800f65c <tcp_input+0x28c>)
 800f52e:	6814      	ldr	r4, [r2, #0]
 800f530:	4618      	mov	r0, r3
 800f532:	f7fc f99b 	bl	800b86c <lwip_htons>
 800f536:	4603      	mov	r3, r0
 800f538:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f53a:	4b48      	ldr	r3, [pc, #288]	@ (800f65c <tcp_input+0x28c>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	885b      	ldrh	r3, [r3, #2]
 800f540:	b29b      	uxth	r3, r3
 800f542:	4a46      	ldr	r2, [pc, #280]	@ (800f65c <tcp_input+0x28c>)
 800f544:	6814      	ldr	r4, [r2, #0]
 800f546:	4618      	mov	r0, r3
 800f548:	f7fc f990 	bl	800b86c <lwip_htons>
 800f54c:	4603      	mov	r3, r0
 800f54e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f550:	4b42      	ldr	r3, [pc, #264]	@ (800f65c <tcp_input+0x28c>)
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	685b      	ldr	r3, [r3, #4]
 800f556:	4a41      	ldr	r2, [pc, #260]	@ (800f65c <tcp_input+0x28c>)
 800f558:	6814      	ldr	r4, [r2, #0]
 800f55a:	4618      	mov	r0, r3
 800f55c:	f7fc f99b 	bl	800b896 <lwip_htonl>
 800f560:	4603      	mov	r3, r0
 800f562:	6063      	str	r3, [r4, #4]
 800f564:	6863      	ldr	r3, [r4, #4]
 800f566:	4a45      	ldr	r2, [pc, #276]	@ (800f67c <tcp_input+0x2ac>)
 800f568:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f56a:	4b3c      	ldr	r3, [pc, #240]	@ (800f65c <tcp_input+0x28c>)
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	689b      	ldr	r3, [r3, #8]
 800f570:	4a3a      	ldr	r2, [pc, #232]	@ (800f65c <tcp_input+0x28c>)
 800f572:	6814      	ldr	r4, [r2, #0]
 800f574:	4618      	mov	r0, r3
 800f576:	f7fc f98e 	bl	800b896 <lwip_htonl>
 800f57a:	4603      	mov	r3, r0
 800f57c:	60a3      	str	r3, [r4, #8]
 800f57e:	68a3      	ldr	r3, [r4, #8]
 800f580:	4a3f      	ldr	r2, [pc, #252]	@ (800f680 <tcp_input+0x2b0>)
 800f582:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f584:	4b35      	ldr	r3, [pc, #212]	@ (800f65c <tcp_input+0x28c>)
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	89db      	ldrh	r3, [r3, #14]
 800f58a:	b29b      	uxth	r3, r3
 800f58c:	4a33      	ldr	r2, [pc, #204]	@ (800f65c <tcp_input+0x28c>)
 800f58e:	6814      	ldr	r4, [r2, #0]
 800f590:	4618      	mov	r0, r3
 800f592:	f7fc f96b 	bl	800b86c <lwip_htons>
 800f596:	4603      	mov	r3, r0
 800f598:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f59a:	4b30      	ldr	r3, [pc, #192]	@ (800f65c <tcp_input+0x28c>)
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	899b      	ldrh	r3, [r3, #12]
 800f5a0:	b29b      	uxth	r3, r3
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	f7fc f962 	bl	800b86c <lwip_htons>
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	b2db      	uxtb	r3, r3
 800f5ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f5b0:	b2da      	uxtb	r2, r3
 800f5b2:	4b34      	ldr	r3, [pc, #208]	@ (800f684 <tcp_input+0x2b4>)
 800f5b4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	891a      	ldrh	r2, [r3, #8]
 800f5ba:	4b33      	ldr	r3, [pc, #204]	@ (800f688 <tcp_input+0x2b8>)
 800f5bc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f5be:	4b31      	ldr	r3, [pc, #196]	@ (800f684 <tcp_input+0x2b4>)
 800f5c0:	781b      	ldrb	r3, [r3, #0]
 800f5c2:	f003 0303 	and.w	r3, r3, #3
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d00c      	beq.n	800f5e4 <tcp_input+0x214>
    tcplen++;
 800f5ca:	4b2f      	ldr	r3, [pc, #188]	@ (800f688 <tcp_input+0x2b8>)
 800f5cc:	881b      	ldrh	r3, [r3, #0]
 800f5ce:	3301      	adds	r3, #1
 800f5d0:	b29a      	uxth	r2, r3
 800f5d2:	4b2d      	ldr	r3, [pc, #180]	@ (800f688 <tcp_input+0x2b8>)
 800f5d4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	891a      	ldrh	r2, [r3, #8]
 800f5da:	4b2b      	ldr	r3, [pc, #172]	@ (800f688 <tcp_input+0x2b8>)
 800f5dc:	881b      	ldrh	r3, [r3, #0]
 800f5de:	429a      	cmp	r2, r3
 800f5e0:	f200 82e6 	bhi.w	800fbb0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f5e8:	4b28      	ldr	r3, [pc, #160]	@ (800f68c <tcp_input+0x2bc>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	61fb      	str	r3, [r7, #28]
 800f5ee:	e09d      	b.n	800f72c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f5f0:	69fb      	ldr	r3, [r7, #28]
 800f5f2:	7d1b      	ldrb	r3, [r3, #20]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d105      	bne.n	800f604 <tcp_input+0x234>
 800f5f8:	4b15      	ldr	r3, [pc, #84]	@ (800f650 <tcp_input+0x280>)
 800f5fa:	22fb      	movs	r2, #251	@ 0xfb
 800f5fc:	4924      	ldr	r1, [pc, #144]	@ (800f690 <tcp_input+0x2c0>)
 800f5fe:	4816      	ldr	r0, [pc, #88]	@ (800f658 <tcp_input+0x288>)
 800f600:	f007 fb16 	bl	8016c30 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f604:	69fb      	ldr	r3, [r7, #28]
 800f606:	7d1b      	ldrb	r3, [r3, #20]
 800f608:	2b0a      	cmp	r3, #10
 800f60a:	d105      	bne.n	800f618 <tcp_input+0x248>
 800f60c:	4b10      	ldr	r3, [pc, #64]	@ (800f650 <tcp_input+0x280>)
 800f60e:	22fc      	movs	r2, #252	@ 0xfc
 800f610:	4920      	ldr	r1, [pc, #128]	@ (800f694 <tcp_input+0x2c4>)
 800f612:	4811      	ldr	r0, [pc, #68]	@ (800f658 <tcp_input+0x288>)
 800f614:	f007 fb0c 	bl	8016c30 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f618:	69fb      	ldr	r3, [r7, #28]
 800f61a:	7d1b      	ldrb	r3, [r3, #20]
 800f61c:	2b01      	cmp	r3, #1
 800f61e:	d105      	bne.n	800f62c <tcp_input+0x25c>
 800f620:	4b0b      	ldr	r3, [pc, #44]	@ (800f650 <tcp_input+0x280>)
 800f622:	22fd      	movs	r2, #253	@ 0xfd
 800f624:	491c      	ldr	r1, [pc, #112]	@ (800f698 <tcp_input+0x2c8>)
 800f626:	480c      	ldr	r0, [pc, #48]	@ (800f658 <tcp_input+0x288>)
 800f628:	f007 fb02 	bl	8016c30 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f62c:	69fb      	ldr	r3, [r7, #28]
 800f62e:	7a1b      	ldrb	r3, [r3, #8]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d033      	beq.n	800f69c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f634:	69fb      	ldr	r3, [r7, #28]
 800f636:	7a1a      	ldrb	r2, [r3, #8]
 800f638:	4b09      	ldr	r3, [pc, #36]	@ (800f660 <tcp_input+0x290>)
 800f63a:	685b      	ldr	r3, [r3, #4]
 800f63c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f640:	3301      	adds	r3, #1
 800f642:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f644:	429a      	cmp	r2, r3
 800f646:	d029      	beq.n	800f69c <tcp_input+0x2cc>
      prev = pcb;
 800f648:	69fb      	ldr	r3, [r7, #28]
 800f64a:	61bb      	str	r3, [r7, #24]
      continue;
 800f64c:	e06b      	b.n	800f726 <tcp_input+0x356>
 800f64e:	bf00      	nop
 800f650:	080198d0 	.word	0x080198d0
 800f654:	08019904 	.word	0x08019904
 800f658:	0801991c 	.word	0x0801991c
 800f65c:	24007f2c 	.word	0x24007f2c
 800f660:	24004df4 	.word	0x24004df4
 800f664:	24007f30 	.word	0x24007f30
 800f668:	24007f34 	.word	0x24007f34
 800f66c:	24007f32 	.word	0x24007f32
 800f670:	08019944 	.word	0x08019944
 800f674:	08019954 	.word	0x08019954
 800f678:	08019960 	.word	0x08019960
 800f67c:	24007f3c 	.word	0x24007f3c
 800f680:	24007f40 	.word	0x24007f40
 800f684:	24007f48 	.word	0x24007f48
 800f688:	24007f46 	.word	0x24007f46
 800f68c:	24007f10 	.word	0x24007f10
 800f690:	08019980 	.word	0x08019980
 800f694:	080199a8 	.word	0x080199a8
 800f698:	080199d4 	.word	0x080199d4
    }

    if (pcb->remote_port == tcphdr->src &&
 800f69c:	69fb      	ldr	r3, [r7, #28]
 800f69e:	8b1a      	ldrh	r2, [r3, #24]
 800f6a0:	4b72      	ldr	r3, [pc, #456]	@ (800f86c <tcp_input+0x49c>)
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	881b      	ldrh	r3, [r3, #0]
 800f6a6:	b29b      	uxth	r3, r3
 800f6a8:	429a      	cmp	r2, r3
 800f6aa:	d13a      	bne.n	800f722 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f6ac:	69fb      	ldr	r3, [r7, #28]
 800f6ae:	8ada      	ldrh	r2, [r3, #22]
 800f6b0:	4b6e      	ldr	r3, [pc, #440]	@ (800f86c <tcp_input+0x49c>)
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	885b      	ldrh	r3, [r3, #2]
 800f6b6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f6b8:	429a      	cmp	r2, r3
 800f6ba:	d132      	bne.n	800f722 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f6bc:	69fb      	ldr	r3, [r7, #28]
 800f6be:	685a      	ldr	r2, [r3, #4]
 800f6c0:	4b6b      	ldr	r3, [pc, #428]	@ (800f870 <tcp_input+0x4a0>)
 800f6c2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f6c4:	429a      	cmp	r2, r3
 800f6c6:	d12c      	bne.n	800f722 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f6c8:	69fb      	ldr	r3, [r7, #28]
 800f6ca:	681a      	ldr	r2, [r3, #0]
 800f6cc:	4b68      	ldr	r3, [pc, #416]	@ (800f870 <tcp_input+0x4a0>)
 800f6ce:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f6d0:	429a      	cmp	r2, r3
 800f6d2:	d126      	bne.n	800f722 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f6d4:	69fb      	ldr	r3, [r7, #28]
 800f6d6:	68db      	ldr	r3, [r3, #12]
 800f6d8:	69fa      	ldr	r2, [r7, #28]
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	d106      	bne.n	800f6ec <tcp_input+0x31c>
 800f6de:	4b65      	ldr	r3, [pc, #404]	@ (800f874 <tcp_input+0x4a4>)
 800f6e0:	f240 120d 	movw	r2, #269	@ 0x10d
 800f6e4:	4964      	ldr	r1, [pc, #400]	@ (800f878 <tcp_input+0x4a8>)
 800f6e6:	4865      	ldr	r0, [pc, #404]	@ (800f87c <tcp_input+0x4ac>)
 800f6e8:	f007 faa2 	bl	8016c30 <iprintf>
      if (prev != NULL) {
 800f6ec:	69bb      	ldr	r3, [r7, #24]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d00a      	beq.n	800f708 <tcp_input+0x338>
        prev->next = pcb->next;
 800f6f2:	69fb      	ldr	r3, [r7, #28]
 800f6f4:	68da      	ldr	r2, [r3, #12]
 800f6f6:	69bb      	ldr	r3, [r7, #24]
 800f6f8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f6fa:	4b61      	ldr	r3, [pc, #388]	@ (800f880 <tcp_input+0x4b0>)
 800f6fc:	681a      	ldr	r2, [r3, #0]
 800f6fe:	69fb      	ldr	r3, [r7, #28]
 800f700:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f702:	4a5f      	ldr	r2, [pc, #380]	@ (800f880 <tcp_input+0x4b0>)
 800f704:	69fb      	ldr	r3, [r7, #28]
 800f706:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f708:	69fb      	ldr	r3, [r7, #28]
 800f70a:	68db      	ldr	r3, [r3, #12]
 800f70c:	69fa      	ldr	r2, [r7, #28]
 800f70e:	429a      	cmp	r2, r3
 800f710:	d111      	bne.n	800f736 <tcp_input+0x366>
 800f712:	4b58      	ldr	r3, [pc, #352]	@ (800f874 <tcp_input+0x4a4>)
 800f714:	f240 1215 	movw	r2, #277	@ 0x115
 800f718:	495a      	ldr	r1, [pc, #360]	@ (800f884 <tcp_input+0x4b4>)
 800f71a:	4858      	ldr	r0, [pc, #352]	@ (800f87c <tcp_input+0x4ac>)
 800f71c:	f007 fa88 	bl	8016c30 <iprintf>
      break;
 800f720:	e009      	b.n	800f736 <tcp_input+0x366>
    }
    prev = pcb;
 800f722:	69fb      	ldr	r3, [r7, #28]
 800f724:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f726:	69fb      	ldr	r3, [r7, #28]
 800f728:	68db      	ldr	r3, [r3, #12]
 800f72a:	61fb      	str	r3, [r7, #28]
 800f72c:	69fb      	ldr	r3, [r7, #28]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	f47f af5e 	bne.w	800f5f0 <tcp_input+0x220>
 800f734:	e000      	b.n	800f738 <tcp_input+0x368>
      break;
 800f736:	bf00      	nop
  }

  if (pcb == NULL) {
 800f738:	69fb      	ldr	r3, [r7, #28]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	f040 80aa 	bne.w	800f894 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f740:	4b51      	ldr	r3, [pc, #324]	@ (800f888 <tcp_input+0x4b8>)
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	61fb      	str	r3, [r7, #28]
 800f746:	e03f      	b.n	800f7c8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f748:	69fb      	ldr	r3, [r7, #28]
 800f74a:	7d1b      	ldrb	r3, [r3, #20]
 800f74c:	2b0a      	cmp	r3, #10
 800f74e:	d006      	beq.n	800f75e <tcp_input+0x38e>
 800f750:	4b48      	ldr	r3, [pc, #288]	@ (800f874 <tcp_input+0x4a4>)
 800f752:	f240 121f 	movw	r2, #287	@ 0x11f
 800f756:	494d      	ldr	r1, [pc, #308]	@ (800f88c <tcp_input+0x4bc>)
 800f758:	4848      	ldr	r0, [pc, #288]	@ (800f87c <tcp_input+0x4ac>)
 800f75a:	f007 fa69 	bl	8016c30 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f75e:	69fb      	ldr	r3, [r7, #28]
 800f760:	7a1b      	ldrb	r3, [r3, #8]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d009      	beq.n	800f77a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f766:	69fb      	ldr	r3, [r7, #28]
 800f768:	7a1a      	ldrb	r2, [r3, #8]
 800f76a:	4b41      	ldr	r3, [pc, #260]	@ (800f870 <tcp_input+0x4a0>)
 800f76c:	685b      	ldr	r3, [r3, #4]
 800f76e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f772:	3301      	adds	r3, #1
 800f774:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f776:	429a      	cmp	r2, r3
 800f778:	d122      	bne.n	800f7c0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f77a:	69fb      	ldr	r3, [r7, #28]
 800f77c:	8b1a      	ldrh	r2, [r3, #24]
 800f77e:	4b3b      	ldr	r3, [pc, #236]	@ (800f86c <tcp_input+0x49c>)
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	881b      	ldrh	r3, [r3, #0]
 800f784:	b29b      	uxth	r3, r3
 800f786:	429a      	cmp	r2, r3
 800f788:	d11b      	bne.n	800f7c2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f78a:	69fb      	ldr	r3, [r7, #28]
 800f78c:	8ada      	ldrh	r2, [r3, #22]
 800f78e:	4b37      	ldr	r3, [pc, #220]	@ (800f86c <tcp_input+0x49c>)
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	885b      	ldrh	r3, [r3, #2]
 800f794:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f796:	429a      	cmp	r2, r3
 800f798:	d113      	bne.n	800f7c2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f79a:	69fb      	ldr	r3, [r7, #28]
 800f79c:	685a      	ldr	r2, [r3, #4]
 800f79e:	4b34      	ldr	r3, [pc, #208]	@ (800f870 <tcp_input+0x4a0>)
 800f7a0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	d10d      	bne.n	800f7c2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f7a6:	69fb      	ldr	r3, [r7, #28]
 800f7a8:	681a      	ldr	r2, [r3, #0]
 800f7aa:	4b31      	ldr	r3, [pc, #196]	@ (800f870 <tcp_input+0x4a0>)
 800f7ac:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f7ae:	429a      	cmp	r2, r3
 800f7b0:	d107      	bne.n	800f7c2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f7b2:	69f8      	ldr	r0, [r7, #28]
 800f7b4:	f000 fb56 	bl	800fe64 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f7b8:	6878      	ldr	r0, [r7, #4]
 800f7ba:	f7fd fd01 	bl	800d1c0 <pbuf_free>
        return;
 800f7be:	e1fd      	b.n	800fbbc <tcp_input+0x7ec>
        continue;
 800f7c0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f7c2:	69fb      	ldr	r3, [r7, #28]
 800f7c4:	68db      	ldr	r3, [r3, #12]
 800f7c6:	61fb      	str	r3, [r7, #28]
 800f7c8:	69fb      	ldr	r3, [r7, #28]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d1bc      	bne.n	800f748 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f7d2:	4b2f      	ldr	r3, [pc, #188]	@ (800f890 <tcp_input+0x4c0>)
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	617b      	str	r3, [r7, #20]
 800f7d8:	e02a      	b.n	800f830 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f7da:	697b      	ldr	r3, [r7, #20]
 800f7dc:	7a1b      	ldrb	r3, [r3, #8]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d00c      	beq.n	800f7fc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f7e2:	697b      	ldr	r3, [r7, #20]
 800f7e4:	7a1a      	ldrb	r2, [r3, #8]
 800f7e6:	4b22      	ldr	r3, [pc, #136]	@ (800f870 <tcp_input+0x4a0>)
 800f7e8:	685b      	ldr	r3, [r3, #4]
 800f7ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f7ee:	3301      	adds	r3, #1
 800f7f0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f7f2:	429a      	cmp	r2, r3
 800f7f4:	d002      	beq.n	800f7fc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	61bb      	str	r3, [r7, #24]
        continue;
 800f7fa:	e016      	b.n	800f82a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f7fc:	697b      	ldr	r3, [r7, #20]
 800f7fe:	8ada      	ldrh	r2, [r3, #22]
 800f800:	4b1a      	ldr	r3, [pc, #104]	@ (800f86c <tcp_input+0x49c>)
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	885b      	ldrh	r3, [r3, #2]
 800f806:	b29b      	uxth	r3, r3
 800f808:	429a      	cmp	r2, r3
 800f80a:	d10c      	bne.n	800f826 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f80c:	697b      	ldr	r3, [r7, #20]
 800f80e:	681a      	ldr	r2, [r3, #0]
 800f810:	4b17      	ldr	r3, [pc, #92]	@ (800f870 <tcp_input+0x4a0>)
 800f812:	695b      	ldr	r3, [r3, #20]
 800f814:	429a      	cmp	r2, r3
 800f816:	d00f      	beq.n	800f838 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f818:	697b      	ldr	r3, [r7, #20]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d00d      	beq.n	800f83a <tcp_input+0x46a>
 800f81e:	697b      	ldr	r3, [r7, #20]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d009      	beq.n	800f83a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f826:	697b      	ldr	r3, [r7, #20]
 800f828:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f82a:	697b      	ldr	r3, [r7, #20]
 800f82c:	68db      	ldr	r3, [r3, #12]
 800f82e:	617b      	str	r3, [r7, #20]
 800f830:	697b      	ldr	r3, [r7, #20]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d1d1      	bne.n	800f7da <tcp_input+0x40a>
 800f836:	e000      	b.n	800f83a <tcp_input+0x46a>
            break;
 800f838:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f83a:	697b      	ldr	r3, [r7, #20]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d029      	beq.n	800f894 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f840:	69bb      	ldr	r3, [r7, #24]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d00a      	beq.n	800f85c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f846:	697b      	ldr	r3, [r7, #20]
 800f848:	68da      	ldr	r2, [r3, #12]
 800f84a:	69bb      	ldr	r3, [r7, #24]
 800f84c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f84e:	4b10      	ldr	r3, [pc, #64]	@ (800f890 <tcp_input+0x4c0>)
 800f850:	681a      	ldr	r2, [r3, #0]
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f856:	4a0e      	ldr	r2, [pc, #56]	@ (800f890 <tcp_input+0x4c0>)
 800f858:	697b      	ldr	r3, [r7, #20]
 800f85a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f85c:	6978      	ldr	r0, [r7, #20]
 800f85e:	f000 fa03 	bl	800fc68 <tcp_listen_input>
      }
      pbuf_free(p);
 800f862:	6878      	ldr	r0, [r7, #4]
 800f864:	f7fd fcac 	bl	800d1c0 <pbuf_free>
      return;
 800f868:	e1a8      	b.n	800fbbc <tcp_input+0x7ec>
 800f86a:	bf00      	nop
 800f86c:	24007f2c 	.word	0x24007f2c
 800f870:	24004df4 	.word	0x24004df4
 800f874:	080198d0 	.word	0x080198d0
 800f878:	080199fc 	.word	0x080199fc
 800f87c:	0801991c 	.word	0x0801991c
 800f880:	24007f10 	.word	0x24007f10
 800f884:	08019a28 	.word	0x08019a28
 800f888:	24007f14 	.word	0x24007f14
 800f88c:	08019a54 	.word	0x08019a54
 800f890:	24007f0c 	.word	0x24007f0c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f894:	69fb      	ldr	r3, [r7, #28]
 800f896:	2b00      	cmp	r3, #0
 800f898:	f000 8158 	beq.w	800fb4c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f89c:	4b95      	ldr	r3, [pc, #596]	@ (800faf4 <tcp_input+0x724>)
 800f89e:	2200      	movs	r2, #0
 800f8a0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	891a      	ldrh	r2, [r3, #8]
 800f8a6:	4b93      	ldr	r3, [pc, #588]	@ (800faf4 <tcp_input+0x724>)
 800f8a8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f8aa:	4a92      	ldr	r2, [pc, #584]	@ (800faf4 <tcp_input+0x724>)
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f8b0:	4b91      	ldr	r3, [pc, #580]	@ (800faf8 <tcp_input+0x728>)
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	4a8f      	ldr	r2, [pc, #572]	@ (800faf4 <tcp_input+0x724>)
 800f8b6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f8b8:	4b90      	ldr	r3, [pc, #576]	@ (800fafc <tcp_input+0x72c>)
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f8be:	4b90      	ldr	r3, [pc, #576]	@ (800fb00 <tcp_input+0x730>)
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f8c4:	4b8f      	ldr	r3, [pc, #572]	@ (800fb04 <tcp_input+0x734>)
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f8ca:	4b8f      	ldr	r3, [pc, #572]	@ (800fb08 <tcp_input+0x738>)
 800f8cc:	781b      	ldrb	r3, [r3, #0]
 800f8ce:	f003 0308 	and.w	r3, r3, #8
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d006      	beq.n	800f8e4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	7b5b      	ldrb	r3, [r3, #13]
 800f8da:	f043 0301 	orr.w	r3, r3, #1
 800f8de:	b2da      	uxtb	r2, r3
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f8e4:	69fb      	ldr	r3, [r7, #28]
 800f8e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d017      	beq.n	800f91c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f8ec:	69f8      	ldr	r0, [r7, #28]
 800f8ee:	f7ff f85b 	bl	800e9a8 <tcp_process_refused_data>
 800f8f2:	4603      	mov	r3, r0
 800f8f4:	f113 0f0d 	cmn.w	r3, #13
 800f8f8:	d007      	beq.n	800f90a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f8fa:	69fb      	ldr	r3, [r7, #28]
 800f8fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d00c      	beq.n	800f91c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f902:	4b82      	ldr	r3, [pc, #520]	@ (800fb0c <tcp_input+0x73c>)
 800f904:	881b      	ldrh	r3, [r3, #0]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d008      	beq.n	800f91c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f90a:	69fb      	ldr	r3, [r7, #28]
 800f90c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f90e:	2b00      	cmp	r3, #0
 800f910:	f040 80e3 	bne.w	800fada <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f914:	69f8      	ldr	r0, [r7, #28]
 800f916:	f003 fdff 	bl	8013518 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f91a:	e0de      	b.n	800fada <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800f91c:	4a7c      	ldr	r2, [pc, #496]	@ (800fb10 <tcp_input+0x740>)
 800f91e:	69fb      	ldr	r3, [r7, #28]
 800f920:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f922:	69f8      	ldr	r0, [r7, #28]
 800f924:	f000 fb18 	bl	800ff58 <tcp_process>
 800f928:	4603      	mov	r3, r0
 800f92a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f92c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f930:	f113 0f0d 	cmn.w	r3, #13
 800f934:	f000 80d3 	beq.w	800fade <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f938:	4b71      	ldr	r3, [pc, #452]	@ (800fb00 <tcp_input+0x730>)
 800f93a:	781b      	ldrb	r3, [r3, #0]
 800f93c:	f003 0308 	and.w	r3, r3, #8
 800f940:	2b00      	cmp	r3, #0
 800f942:	d015      	beq.n	800f970 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f944:	69fb      	ldr	r3, [r7, #28]
 800f946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d008      	beq.n	800f960 <tcp_input+0x590>
 800f94e:	69fb      	ldr	r3, [r7, #28]
 800f950:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f954:	69fa      	ldr	r2, [r7, #28]
 800f956:	6912      	ldr	r2, [r2, #16]
 800f958:	f06f 010d 	mvn.w	r1, #13
 800f95c:	4610      	mov	r0, r2
 800f95e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f960:	69f9      	ldr	r1, [r7, #28]
 800f962:	486c      	ldr	r0, [pc, #432]	@ (800fb14 <tcp_input+0x744>)
 800f964:	f7ff fbbc 	bl	800f0e0 <tcp_pcb_remove>
        tcp_free(pcb);
 800f968:	69f8      	ldr	r0, [r7, #28]
 800f96a:	f7fd fed5 	bl	800d718 <tcp_free>
 800f96e:	e0da      	b.n	800fb26 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f970:	2300      	movs	r3, #0
 800f972:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f974:	4b63      	ldr	r3, [pc, #396]	@ (800fb04 <tcp_input+0x734>)
 800f976:	881b      	ldrh	r3, [r3, #0]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d01d      	beq.n	800f9b8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f97c:	4b61      	ldr	r3, [pc, #388]	@ (800fb04 <tcp_input+0x734>)
 800f97e:	881b      	ldrh	r3, [r3, #0]
 800f980:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f982:	69fb      	ldr	r3, [r7, #28]
 800f984:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d00a      	beq.n	800f9a2 <tcp_input+0x5d2>
 800f98c:	69fb      	ldr	r3, [r7, #28]
 800f98e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f992:	69fa      	ldr	r2, [r7, #28]
 800f994:	6910      	ldr	r0, [r2, #16]
 800f996:	89fa      	ldrh	r2, [r7, #14]
 800f998:	69f9      	ldr	r1, [r7, #28]
 800f99a:	4798      	blx	r3
 800f99c:	4603      	mov	r3, r0
 800f99e:	74fb      	strb	r3, [r7, #19]
 800f9a0:	e001      	b.n	800f9a6 <tcp_input+0x5d6>
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f9a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f9aa:	f113 0f0d 	cmn.w	r3, #13
 800f9ae:	f000 8098 	beq.w	800fae2 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f9b2:	4b54      	ldr	r3, [pc, #336]	@ (800fb04 <tcp_input+0x734>)
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f9b8:	69f8      	ldr	r0, [r7, #28]
 800f9ba:	f000 f915 	bl	800fbe8 <tcp_input_delayed_close>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	f040 8090 	bne.w	800fae6 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f9c6:	4b4d      	ldr	r3, [pc, #308]	@ (800fafc <tcp_input+0x72c>)
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d041      	beq.n	800fa52 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f9ce:	69fb      	ldr	r3, [r7, #28]
 800f9d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d006      	beq.n	800f9e4 <tcp_input+0x614>
 800f9d6:	4b50      	ldr	r3, [pc, #320]	@ (800fb18 <tcp_input+0x748>)
 800f9d8:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800f9dc:	494f      	ldr	r1, [pc, #316]	@ (800fb1c <tcp_input+0x74c>)
 800f9de:	4850      	ldr	r0, [pc, #320]	@ (800fb20 <tcp_input+0x750>)
 800f9e0:	f007 f926 	bl	8016c30 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f9e4:	69fb      	ldr	r3, [r7, #28]
 800f9e6:	8b5b      	ldrh	r3, [r3, #26]
 800f9e8:	f003 0310 	and.w	r3, r3, #16
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d008      	beq.n	800fa02 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f9f0:	4b42      	ldr	r3, [pc, #264]	@ (800fafc <tcp_input+0x72c>)
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	f7fd fbe3 	bl	800d1c0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f9fa:	69f8      	ldr	r0, [r7, #28]
 800f9fc:	f7fe f9d0 	bl	800dda0 <tcp_abort>
            goto aborted;
 800fa00:	e091      	b.n	800fb26 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800fa02:	69fb      	ldr	r3, [r7, #28]
 800fa04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d00c      	beq.n	800fa26 <tcp_input+0x656>
 800fa0c:	69fb      	ldr	r3, [r7, #28]
 800fa0e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800fa12:	69fb      	ldr	r3, [r7, #28]
 800fa14:	6918      	ldr	r0, [r3, #16]
 800fa16:	4b39      	ldr	r3, [pc, #228]	@ (800fafc <tcp_input+0x72c>)
 800fa18:	681a      	ldr	r2, [r3, #0]
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	69f9      	ldr	r1, [r7, #28]
 800fa1e:	47a0      	blx	r4
 800fa20:	4603      	mov	r3, r0
 800fa22:	74fb      	strb	r3, [r7, #19]
 800fa24:	e008      	b.n	800fa38 <tcp_input+0x668>
 800fa26:	4b35      	ldr	r3, [pc, #212]	@ (800fafc <tcp_input+0x72c>)
 800fa28:	681a      	ldr	r2, [r3, #0]
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	69f9      	ldr	r1, [r7, #28]
 800fa2e:	2000      	movs	r0, #0
 800fa30:	f7ff f890 	bl	800eb54 <tcp_recv_null>
 800fa34:	4603      	mov	r3, r0
 800fa36:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800fa38:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fa3c:	f113 0f0d 	cmn.w	r3, #13
 800fa40:	d053      	beq.n	800faea <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800fa42:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d003      	beq.n	800fa52 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800fa4a:	4b2c      	ldr	r3, [pc, #176]	@ (800fafc <tcp_input+0x72c>)
 800fa4c:	681a      	ldr	r2, [r3, #0]
 800fa4e:	69fb      	ldr	r3, [r7, #28]
 800fa50:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800fa52:	4b2b      	ldr	r3, [pc, #172]	@ (800fb00 <tcp_input+0x730>)
 800fa54:	781b      	ldrb	r3, [r3, #0]
 800fa56:	f003 0320 	and.w	r3, r3, #32
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d030      	beq.n	800fac0 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800fa5e:	69fb      	ldr	r3, [r7, #28]
 800fa60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d009      	beq.n	800fa7a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800fa66:	69fb      	ldr	r3, [r7, #28]
 800fa68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fa6a:	7b5a      	ldrb	r2, [r3, #13]
 800fa6c:	69fb      	ldr	r3, [r7, #28]
 800fa6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fa70:	f042 0220 	orr.w	r2, r2, #32
 800fa74:	b2d2      	uxtb	r2, r2
 800fa76:	735a      	strb	r2, [r3, #13]
 800fa78:	e022      	b.n	800fac0 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fa7a:	69fb      	ldr	r3, [r7, #28]
 800fa7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fa7e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800fa82:	d005      	beq.n	800fa90 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800fa84:	69fb      	ldr	r3, [r7, #28]
 800fa86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fa88:	3301      	adds	r3, #1
 800fa8a:	b29a      	uxth	r2, r3
 800fa8c:	69fb      	ldr	r3, [r7, #28]
 800fa8e:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800fa90:	69fb      	ldr	r3, [r7, #28]
 800fa92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d00b      	beq.n	800fab2 <tcp_input+0x6e2>
 800fa9a:	69fb      	ldr	r3, [r7, #28]
 800fa9c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800faa0:	69fb      	ldr	r3, [r7, #28]
 800faa2:	6918      	ldr	r0, [r3, #16]
 800faa4:	2300      	movs	r3, #0
 800faa6:	2200      	movs	r2, #0
 800faa8:	69f9      	ldr	r1, [r7, #28]
 800faaa:	47a0      	blx	r4
 800faac:	4603      	mov	r3, r0
 800faae:	74fb      	strb	r3, [r7, #19]
 800fab0:	e001      	b.n	800fab6 <tcp_input+0x6e6>
 800fab2:	2300      	movs	r3, #0
 800fab4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fab6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800faba:	f113 0f0d 	cmn.w	r3, #13
 800fabe:	d016      	beq.n	800faee <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800fac0:	4b13      	ldr	r3, [pc, #76]	@ (800fb10 <tcp_input+0x740>)
 800fac2:	2200      	movs	r2, #0
 800fac4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800fac6:	69f8      	ldr	r0, [r7, #28]
 800fac8:	f000 f88e 	bl	800fbe8 <tcp_input_delayed_close>
 800facc:	4603      	mov	r3, r0
 800face:	2b00      	cmp	r3, #0
 800fad0:	d128      	bne.n	800fb24 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800fad2:	69f8      	ldr	r0, [r7, #28]
 800fad4:	f002 ff1a 	bl	801290c <tcp_output>
 800fad8:	e025      	b.n	800fb26 <tcp_input+0x756>
        goto aborted;
 800fada:	bf00      	nop
 800fadc:	e023      	b.n	800fb26 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800fade:	bf00      	nop
 800fae0:	e021      	b.n	800fb26 <tcp_input+0x756>
              goto aborted;
 800fae2:	bf00      	nop
 800fae4:	e01f      	b.n	800fb26 <tcp_input+0x756>
          goto aborted;
 800fae6:	bf00      	nop
 800fae8:	e01d      	b.n	800fb26 <tcp_input+0x756>
            goto aborted;
 800faea:	bf00      	nop
 800faec:	e01b      	b.n	800fb26 <tcp_input+0x756>
              goto aborted;
 800faee:	bf00      	nop
 800faf0:	e019      	b.n	800fb26 <tcp_input+0x756>
 800faf2:	bf00      	nop
 800faf4:	24007f1c 	.word	0x24007f1c
 800faf8:	24007f2c 	.word	0x24007f2c
 800fafc:	24007f4c 	.word	0x24007f4c
 800fb00:	24007f49 	.word	0x24007f49
 800fb04:	24007f44 	.word	0x24007f44
 800fb08:	24007f48 	.word	0x24007f48
 800fb0c:	24007f46 	.word	0x24007f46
 800fb10:	24007f50 	.word	0x24007f50
 800fb14:	24007f10 	.word	0x24007f10
 800fb18:	080198d0 	.word	0x080198d0
 800fb1c:	08019a84 	.word	0x08019a84
 800fb20:	0801991c 	.word	0x0801991c
          goto aborted;
 800fb24:	bf00      	nop
    tcp_input_pcb = NULL;
 800fb26:	4b27      	ldr	r3, [pc, #156]	@ (800fbc4 <tcp_input+0x7f4>)
 800fb28:	2200      	movs	r2, #0
 800fb2a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800fb2c:	4b26      	ldr	r3, [pc, #152]	@ (800fbc8 <tcp_input+0x7f8>)
 800fb2e:	2200      	movs	r2, #0
 800fb30:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800fb32:	4b26      	ldr	r3, [pc, #152]	@ (800fbcc <tcp_input+0x7fc>)
 800fb34:	685b      	ldr	r3, [r3, #4]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d03f      	beq.n	800fbba <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800fb3a:	4b24      	ldr	r3, [pc, #144]	@ (800fbcc <tcp_input+0x7fc>)
 800fb3c:	685b      	ldr	r3, [r3, #4]
 800fb3e:	4618      	mov	r0, r3
 800fb40:	f7fd fb3e 	bl	800d1c0 <pbuf_free>
      inseg.p = NULL;
 800fb44:	4b21      	ldr	r3, [pc, #132]	@ (800fbcc <tcp_input+0x7fc>)
 800fb46:	2200      	movs	r2, #0
 800fb48:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800fb4a:	e036      	b.n	800fbba <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800fb4c:	4b20      	ldr	r3, [pc, #128]	@ (800fbd0 <tcp_input+0x800>)
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	899b      	ldrh	r3, [r3, #12]
 800fb52:	b29b      	uxth	r3, r3
 800fb54:	4618      	mov	r0, r3
 800fb56:	f7fb fe89 	bl	800b86c <lwip_htons>
 800fb5a:	4603      	mov	r3, r0
 800fb5c:	b2db      	uxtb	r3, r3
 800fb5e:	f003 0304 	and.w	r3, r3, #4
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d118      	bne.n	800fb98 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb66:	4b1b      	ldr	r3, [pc, #108]	@ (800fbd4 <tcp_input+0x804>)
 800fb68:	6819      	ldr	r1, [r3, #0]
 800fb6a:	4b1b      	ldr	r3, [pc, #108]	@ (800fbd8 <tcp_input+0x808>)
 800fb6c:	881b      	ldrh	r3, [r3, #0]
 800fb6e:	461a      	mov	r2, r3
 800fb70:	4b1a      	ldr	r3, [pc, #104]	@ (800fbdc <tcp_input+0x80c>)
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb76:	4b16      	ldr	r3, [pc, #88]	@ (800fbd0 <tcp_input+0x800>)
 800fb78:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb7a:	885b      	ldrh	r3, [r3, #2]
 800fb7c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb7e:	4a14      	ldr	r2, [pc, #80]	@ (800fbd0 <tcp_input+0x800>)
 800fb80:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb82:	8812      	ldrh	r2, [r2, #0]
 800fb84:	b292      	uxth	r2, r2
 800fb86:	9202      	str	r2, [sp, #8]
 800fb88:	9301      	str	r3, [sp, #4]
 800fb8a:	4b15      	ldr	r3, [pc, #84]	@ (800fbe0 <tcp_input+0x810>)
 800fb8c:	9300      	str	r3, [sp, #0]
 800fb8e:	4b15      	ldr	r3, [pc, #84]	@ (800fbe4 <tcp_input+0x814>)
 800fb90:	4602      	mov	r2, r0
 800fb92:	2000      	movs	r0, #0
 800fb94:	f003 fc6e 	bl	8013474 <tcp_rst>
    pbuf_free(p);
 800fb98:	6878      	ldr	r0, [r7, #4]
 800fb9a:	f7fd fb11 	bl	800d1c0 <pbuf_free>
  return;
 800fb9e:	e00c      	b.n	800fbba <tcp_input+0x7ea>
    goto dropped;
 800fba0:	bf00      	nop
 800fba2:	e006      	b.n	800fbb2 <tcp_input+0x7e2>
    goto dropped;
 800fba4:	bf00      	nop
 800fba6:	e004      	b.n	800fbb2 <tcp_input+0x7e2>
    goto dropped;
 800fba8:	bf00      	nop
 800fbaa:	e002      	b.n	800fbb2 <tcp_input+0x7e2>
      goto dropped;
 800fbac:	bf00      	nop
 800fbae:	e000      	b.n	800fbb2 <tcp_input+0x7e2>
      goto dropped;
 800fbb0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800fbb2:	6878      	ldr	r0, [r7, #4]
 800fbb4:	f7fd fb04 	bl	800d1c0 <pbuf_free>
 800fbb8:	e000      	b.n	800fbbc <tcp_input+0x7ec>
  return;
 800fbba:	bf00      	nop
}
 800fbbc:	3724      	adds	r7, #36	@ 0x24
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	bd90      	pop	{r4, r7, pc}
 800fbc2:	bf00      	nop
 800fbc4:	24007f50 	.word	0x24007f50
 800fbc8:	24007f4c 	.word	0x24007f4c
 800fbcc:	24007f1c 	.word	0x24007f1c
 800fbd0:	24007f2c 	.word	0x24007f2c
 800fbd4:	24007f40 	.word	0x24007f40
 800fbd8:	24007f46 	.word	0x24007f46
 800fbdc:	24007f3c 	.word	0x24007f3c
 800fbe0:	24004e04 	.word	0x24004e04
 800fbe4:	24004e08 	.word	0x24004e08

0800fbe8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b082      	sub	sp, #8
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d106      	bne.n	800fc04 <tcp_input_delayed_close+0x1c>
 800fbf6:	4b17      	ldr	r3, [pc, #92]	@ (800fc54 <tcp_input_delayed_close+0x6c>)
 800fbf8:	f240 225a 	movw	r2, #602	@ 0x25a
 800fbfc:	4916      	ldr	r1, [pc, #88]	@ (800fc58 <tcp_input_delayed_close+0x70>)
 800fbfe:	4817      	ldr	r0, [pc, #92]	@ (800fc5c <tcp_input_delayed_close+0x74>)
 800fc00:	f007 f816 	bl	8016c30 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800fc04:	4b16      	ldr	r3, [pc, #88]	@ (800fc60 <tcp_input_delayed_close+0x78>)
 800fc06:	781b      	ldrb	r3, [r3, #0]
 800fc08:	f003 0310 	and.w	r3, r3, #16
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d01c      	beq.n	800fc4a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	8b5b      	ldrh	r3, [r3, #26]
 800fc14:	f003 0310 	and.w	r3, r3, #16
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d10d      	bne.n	800fc38 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d008      	beq.n	800fc38 <tcp_input_delayed_close+0x50>
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fc2c:	687a      	ldr	r2, [r7, #4]
 800fc2e:	6912      	ldr	r2, [r2, #16]
 800fc30:	f06f 010e 	mvn.w	r1, #14
 800fc34:	4610      	mov	r0, r2
 800fc36:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fc38:	6879      	ldr	r1, [r7, #4]
 800fc3a:	480a      	ldr	r0, [pc, #40]	@ (800fc64 <tcp_input_delayed_close+0x7c>)
 800fc3c:	f7ff fa50 	bl	800f0e0 <tcp_pcb_remove>
    tcp_free(pcb);
 800fc40:	6878      	ldr	r0, [r7, #4]
 800fc42:	f7fd fd69 	bl	800d718 <tcp_free>
    return 1;
 800fc46:	2301      	movs	r3, #1
 800fc48:	e000      	b.n	800fc4c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800fc4a:	2300      	movs	r3, #0
}
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	3708      	adds	r7, #8
 800fc50:	46bd      	mov	sp, r7
 800fc52:	bd80      	pop	{r7, pc}
 800fc54:	080198d0 	.word	0x080198d0
 800fc58:	08019aa0 	.word	0x08019aa0
 800fc5c:	0801991c 	.word	0x0801991c
 800fc60:	24007f49 	.word	0x24007f49
 800fc64:	24007f10 	.word	0x24007f10

0800fc68 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fc68:	b590      	push	{r4, r7, lr}
 800fc6a:	b08b      	sub	sp, #44	@ 0x2c
 800fc6c:	af04      	add	r7, sp, #16
 800fc6e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fc70:	4b6f      	ldr	r3, [pc, #444]	@ (800fe30 <tcp_listen_input+0x1c8>)
 800fc72:	781b      	ldrb	r3, [r3, #0]
 800fc74:	f003 0304 	and.w	r3, r3, #4
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	f040 80d2 	bne.w	800fe22 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d106      	bne.n	800fc92 <tcp_listen_input+0x2a>
 800fc84:	4b6b      	ldr	r3, [pc, #428]	@ (800fe34 <tcp_listen_input+0x1cc>)
 800fc86:	f240 2281 	movw	r2, #641	@ 0x281
 800fc8a:	496b      	ldr	r1, [pc, #428]	@ (800fe38 <tcp_listen_input+0x1d0>)
 800fc8c:	486b      	ldr	r0, [pc, #428]	@ (800fe3c <tcp_listen_input+0x1d4>)
 800fc8e:	f006 ffcf 	bl	8016c30 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fc92:	4b67      	ldr	r3, [pc, #412]	@ (800fe30 <tcp_listen_input+0x1c8>)
 800fc94:	781b      	ldrb	r3, [r3, #0]
 800fc96:	f003 0310 	and.w	r3, r3, #16
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d019      	beq.n	800fcd2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc9e:	4b68      	ldr	r3, [pc, #416]	@ (800fe40 <tcp_listen_input+0x1d8>)
 800fca0:	6819      	ldr	r1, [r3, #0]
 800fca2:	4b68      	ldr	r3, [pc, #416]	@ (800fe44 <tcp_listen_input+0x1dc>)
 800fca4:	881b      	ldrh	r3, [r3, #0]
 800fca6:	461a      	mov	r2, r3
 800fca8:	4b67      	ldr	r3, [pc, #412]	@ (800fe48 <tcp_listen_input+0x1e0>)
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fcae:	4b67      	ldr	r3, [pc, #412]	@ (800fe4c <tcp_listen_input+0x1e4>)
 800fcb0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcb2:	885b      	ldrh	r3, [r3, #2]
 800fcb4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fcb6:	4a65      	ldr	r2, [pc, #404]	@ (800fe4c <tcp_listen_input+0x1e4>)
 800fcb8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcba:	8812      	ldrh	r2, [r2, #0]
 800fcbc:	b292      	uxth	r2, r2
 800fcbe:	9202      	str	r2, [sp, #8]
 800fcc0:	9301      	str	r3, [sp, #4]
 800fcc2:	4b63      	ldr	r3, [pc, #396]	@ (800fe50 <tcp_listen_input+0x1e8>)
 800fcc4:	9300      	str	r3, [sp, #0]
 800fcc6:	4b63      	ldr	r3, [pc, #396]	@ (800fe54 <tcp_listen_input+0x1ec>)
 800fcc8:	4602      	mov	r2, r0
 800fcca:	6878      	ldr	r0, [r7, #4]
 800fccc:	f003 fbd2 	bl	8013474 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fcd0:	e0a9      	b.n	800fe26 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800fcd2:	4b57      	ldr	r3, [pc, #348]	@ (800fe30 <tcp_listen_input+0x1c8>)
 800fcd4:	781b      	ldrb	r3, [r3, #0]
 800fcd6:	f003 0302 	and.w	r3, r3, #2
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	f000 80a3 	beq.w	800fe26 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	7d5b      	ldrb	r3, [r3, #21]
 800fce4:	4618      	mov	r0, r3
 800fce6:	f7ff f859 	bl	800ed9c <tcp_alloc>
 800fcea:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fcec:	697b      	ldr	r3, [r7, #20]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d111      	bne.n	800fd16 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	699b      	ldr	r3, [r3, #24]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d00a      	beq.n	800fd10 <tcp_listen_input+0xa8>
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	699b      	ldr	r3, [r3, #24]
 800fcfe:	687a      	ldr	r2, [r7, #4]
 800fd00:	6910      	ldr	r0, [r2, #16]
 800fd02:	f04f 32ff 	mov.w	r2, #4294967295
 800fd06:	2100      	movs	r1, #0
 800fd08:	4798      	blx	r3
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	73bb      	strb	r3, [r7, #14]
      return;
 800fd0e:	e08b      	b.n	800fe28 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fd10:	23f0      	movs	r3, #240	@ 0xf0
 800fd12:	73bb      	strb	r3, [r7, #14]
      return;
 800fd14:	e088      	b.n	800fe28 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fd16:	4b50      	ldr	r3, [pc, #320]	@ (800fe58 <tcp_listen_input+0x1f0>)
 800fd18:	695a      	ldr	r2, [r3, #20]
 800fd1a:	697b      	ldr	r3, [r7, #20]
 800fd1c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fd1e:	4b4e      	ldr	r3, [pc, #312]	@ (800fe58 <tcp_listen_input+0x1f0>)
 800fd20:	691a      	ldr	r2, [r3, #16]
 800fd22:	697b      	ldr	r3, [r7, #20]
 800fd24:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	8ada      	ldrh	r2, [r3, #22]
 800fd2a:	697b      	ldr	r3, [r7, #20]
 800fd2c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fd2e:	4b47      	ldr	r3, [pc, #284]	@ (800fe4c <tcp_listen_input+0x1e4>)
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	881b      	ldrh	r3, [r3, #0]
 800fd34:	b29a      	uxth	r2, r3
 800fd36:	697b      	ldr	r3, [r7, #20]
 800fd38:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800fd3a:	697b      	ldr	r3, [r7, #20]
 800fd3c:	2203      	movs	r2, #3
 800fd3e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800fd40:	4b41      	ldr	r3, [pc, #260]	@ (800fe48 <tcp_listen_input+0x1e0>)
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	1c5a      	adds	r2, r3, #1
 800fd46:	697b      	ldr	r3, [r7, #20]
 800fd48:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800fd4a:	697b      	ldr	r3, [r7, #20]
 800fd4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fd4e:	697b      	ldr	r3, [r7, #20]
 800fd50:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800fd52:	6978      	ldr	r0, [r7, #20]
 800fd54:	f7ff fa58 	bl	800f208 <tcp_next_iss>
 800fd58:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800fd5a:	697b      	ldr	r3, [r7, #20]
 800fd5c:	693a      	ldr	r2, [r7, #16]
 800fd5e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800fd60:	697b      	ldr	r3, [r7, #20]
 800fd62:	693a      	ldr	r2, [r7, #16]
 800fd64:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800fd66:	697b      	ldr	r3, [r7, #20]
 800fd68:	693a      	ldr	r2, [r7, #16]
 800fd6a:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800fd6c:	697b      	ldr	r3, [r7, #20]
 800fd6e:	693a      	ldr	r2, [r7, #16]
 800fd70:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fd72:	4b35      	ldr	r3, [pc, #212]	@ (800fe48 <tcp_listen_input+0x1e0>)
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	1e5a      	subs	r2, r3, #1
 800fd78:	697b      	ldr	r3, [r7, #20]
 800fd7a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	691a      	ldr	r2, [r3, #16]
 800fd80:	697b      	ldr	r3, [r7, #20]
 800fd82:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800fd84:	697b      	ldr	r3, [r7, #20]
 800fd86:	687a      	ldr	r2, [r7, #4]
 800fd88:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	7a5b      	ldrb	r3, [r3, #9]
 800fd8e:	f003 030c 	and.w	r3, r3, #12
 800fd92:	b2da      	uxtb	r2, r3
 800fd94:	697b      	ldr	r3, [r7, #20]
 800fd96:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	7a1a      	ldrb	r2, [r3, #8]
 800fd9c:	697b      	ldr	r3, [r7, #20]
 800fd9e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800fda0:	4b2e      	ldr	r3, [pc, #184]	@ (800fe5c <tcp_listen_input+0x1f4>)
 800fda2:	681a      	ldr	r2, [r3, #0]
 800fda4:	697b      	ldr	r3, [r7, #20]
 800fda6:	60da      	str	r2, [r3, #12]
 800fda8:	4a2c      	ldr	r2, [pc, #176]	@ (800fe5c <tcp_listen_input+0x1f4>)
 800fdaa:	697b      	ldr	r3, [r7, #20]
 800fdac:	6013      	str	r3, [r2, #0]
 800fdae:	f003 fd23 	bl	80137f8 <tcp_timer_needed>
 800fdb2:	4b2b      	ldr	r3, [pc, #172]	@ (800fe60 <tcp_listen_input+0x1f8>)
 800fdb4:	2201      	movs	r2, #1
 800fdb6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800fdb8:	6978      	ldr	r0, [r7, #20]
 800fdba:	f001 fd8b 	bl	80118d4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800fdbe:	4b23      	ldr	r3, [pc, #140]	@ (800fe4c <tcp_listen_input+0x1e4>)
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	89db      	ldrh	r3, [r3, #14]
 800fdc4:	b29a      	uxth	r2, r3
 800fdc6:	697b      	ldr	r3, [r7, #20]
 800fdc8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800fdcc:	697b      	ldr	r3, [r7, #20]
 800fdce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800fdd2:	697b      	ldr	r3, [r7, #20]
 800fdd4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800fdd8:	697b      	ldr	r3, [r7, #20]
 800fdda:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800fddc:	697b      	ldr	r3, [r7, #20]
 800fdde:	3304      	adds	r3, #4
 800fde0:	4618      	mov	r0, r3
 800fde2:	f005 fa83 	bl	80152ec <ip4_route>
 800fde6:	4601      	mov	r1, r0
 800fde8:	697b      	ldr	r3, [r7, #20]
 800fdea:	3304      	adds	r3, #4
 800fdec:	461a      	mov	r2, r3
 800fdee:	4620      	mov	r0, r4
 800fdf0:	f7ff fa30 	bl	800f254 <tcp_eff_send_mss_netif>
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	461a      	mov	r2, r3
 800fdf8:	697b      	ldr	r3, [r7, #20]
 800fdfa:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800fdfc:	2112      	movs	r1, #18
 800fdfe:	6978      	ldr	r0, [r7, #20]
 800fe00:	f002 fc96 	bl	8012730 <tcp_enqueue_flags>
 800fe04:	4603      	mov	r3, r0
 800fe06:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800fe08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d004      	beq.n	800fe1a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800fe10:	2100      	movs	r1, #0
 800fe12:	6978      	ldr	r0, [r7, #20]
 800fe14:	f7fd ff06 	bl	800dc24 <tcp_abandon>
      return;
 800fe18:	e006      	b.n	800fe28 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800fe1a:	6978      	ldr	r0, [r7, #20]
 800fe1c:	f002 fd76 	bl	801290c <tcp_output>
  return;
 800fe20:	e001      	b.n	800fe26 <tcp_listen_input+0x1be>
    return;
 800fe22:	bf00      	nop
 800fe24:	e000      	b.n	800fe28 <tcp_listen_input+0x1c0>
  return;
 800fe26:	bf00      	nop
}
 800fe28:	371c      	adds	r7, #28
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	bd90      	pop	{r4, r7, pc}
 800fe2e:	bf00      	nop
 800fe30:	24007f48 	.word	0x24007f48
 800fe34:	080198d0 	.word	0x080198d0
 800fe38:	08019ac8 	.word	0x08019ac8
 800fe3c:	0801991c 	.word	0x0801991c
 800fe40:	24007f40 	.word	0x24007f40
 800fe44:	24007f46 	.word	0x24007f46
 800fe48:	24007f3c 	.word	0x24007f3c
 800fe4c:	24007f2c 	.word	0x24007f2c
 800fe50:	24004e04 	.word	0x24004e04
 800fe54:	24004e08 	.word	0x24004e08
 800fe58:	24004df4 	.word	0x24004df4
 800fe5c:	24007f10 	.word	0x24007f10
 800fe60:	24007f18 	.word	0x24007f18

0800fe64 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b086      	sub	sp, #24
 800fe68:	af04      	add	r7, sp, #16
 800fe6a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800fe6c:	4b2f      	ldr	r3, [pc, #188]	@ (800ff2c <tcp_timewait_input+0xc8>)
 800fe6e:	781b      	ldrb	r3, [r3, #0]
 800fe70:	f003 0304 	and.w	r3, r3, #4
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d153      	bne.n	800ff20 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d106      	bne.n	800fe8c <tcp_timewait_input+0x28>
 800fe7e:	4b2c      	ldr	r3, [pc, #176]	@ (800ff30 <tcp_timewait_input+0xcc>)
 800fe80:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800fe84:	492b      	ldr	r1, [pc, #172]	@ (800ff34 <tcp_timewait_input+0xd0>)
 800fe86:	482c      	ldr	r0, [pc, #176]	@ (800ff38 <tcp_timewait_input+0xd4>)
 800fe88:	f006 fed2 	bl	8016c30 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800fe8c:	4b27      	ldr	r3, [pc, #156]	@ (800ff2c <tcp_timewait_input+0xc8>)
 800fe8e:	781b      	ldrb	r3, [r3, #0]
 800fe90:	f003 0302 	and.w	r3, r3, #2
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d02a      	beq.n	800feee <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800fe98:	4b28      	ldr	r3, [pc, #160]	@ (800ff3c <tcp_timewait_input+0xd8>)
 800fe9a:	681a      	ldr	r2, [r3, #0]
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fea0:	1ad3      	subs	r3, r2, r3
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	db2d      	blt.n	800ff02 <tcp_timewait_input+0x9e>
 800fea6:	4b25      	ldr	r3, [pc, #148]	@ (800ff3c <tcp_timewait_input+0xd8>)
 800fea8:	681a      	ldr	r2, [r3, #0]
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800feae:	6879      	ldr	r1, [r7, #4]
 800feb0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800feb2:	440b      	add	r3, r1
 800feb4:	1ad3      	subs	r3, r2, r3
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	dc23      	bgt.n	800ff02 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800feba:	4b21      	ldr	r3, [pc, #132]	@ (800ff40 <tcp_timewait_input+0xdc>)
 800febc:	6819      	ldr	r1, [r3, #0]
 800febe:	4b21      	ldr	r3, [pc, #132]	@ (800ff44 <tcp_timewait_input+0xe0>)
 800fec0:	881b      	ldrh	r3, [r3, #0]
 800fec2:	461a      	mov	r2, r3
 800fec4:	4b1d      	ldr	r3, [pc, #116]	@ (800ff3c <tcp_timewait_input+0xd8>)
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800feca:	4b1f      	ldr	r3, [pc, #124]	@ (800ff48 <tcp_timewait_input+0xe4>)
 800fecc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fece:	885b      	ldrh	r3, [r3, #2]
 800fed0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fed2:	4a1d      	ldr	r2, [pc, #116]	@ (800ff48 <tcp_timewait_input+0xe4>)
 800fed4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fed6:	8812      	ldrh	r2, [r2, #0]
 800fed8:	b292      	uxth	r2, r2
 800feda:	9202      	str	r2, [sp, #8]
 800fedc:	9301      	str	r3, [sp, #4]
 800fede:	4b1b      	ldr	r3, [pc, #108]	@ (800ff4c <tcp_timewait_input+0xe8>)
 800fee0:	9300      	str	r3, [sp, #0]
 800fee2:	4b1b      	ldr	r3, [pc, #108]	@ (800ff50 <tcp_timewait_input+0xec>)
 800fee4:	4602      	mov	r2, r0
 800fee6:	6878      	ldr	r0, [r7, #4]
 800fee8:	f003 fac4 	bl	8013474 <tcp_rst>
      return;
 800feec:	e01b      	b.n	800ff26 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800feee:	4b0f      	ldr	r3, [pc, #60]	@ (800ff2c <tcp_timewait_input+0xc8>)
 800fef0:	781b      	ldrb	r3, [r3, #0]
 800fef2:	f003 0301 	and.w	r3, r3, #1
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d003      	beq.n	800ff02 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800fefa:	4b16      	ldr	r3, [pc, #88]	@ (800ff54 <tcp_timewait_input+0xf0>)
 800fefc:	681a      	ldr	r2, [r3, #0]
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ff02:	4b10      	ldr	r3, [pc, #64]	@ (800ff44 <tcp_timewait_input+0xe0>)
 800ff04:	881b      	ldrh	r3, [r3, #0]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d00c      	beq.n	800ff24 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	8b5b      	ldrh	r3, [r3, #26]
 800ff0e:	f043 0302 	orr.w	r3, r3, #2
 800ff12:	b29a      	uxth	r2, r3
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ff18:	6878      	ldr	r0, [r7, #4]
 800ff1a:	f002 fcf7 	bl	801290c <tcp_output>
  }
  return;
 800ff1e:	e001      	b.n	800ff24 <tcp_timewait_input+0xc0>
    return;
 800ff20:	bf00      	nop
 800ff22:	e000      	b.n	800ff26 <tcp_timewait_input+0xc2>
  return;
 800ff24:	bf00      	nop
}
 800ff26:	3708      	adds	r7, #8
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	bd80      	pop	{r7, pc}
 800ff2c:	24007f48 	.word	0x24007f48
 800ff30:	080198d0 	.word	0x080198d0
 800ff34:	08019ae8 	.word	0x08019ae8
 800ff38:	0801991c 	.word	0x0801991c
 800ff3c:	24007f3c 	.word	0x24007f3c
 800ff40:	24007f40 	.word	0x24007f40
 800ff44:	24007f46 	.word	0x24007f46
 800ff48:	24007f2c 	.word	0x24007f2c
 800ff4c:	24004e04 	.word	0x24004e04
 800ff50:	24004e08 	.word	0x24004e08
 800ff54:	24007f04 	.word	0x24007f04

0800ff58 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ff58:	b590      	push	{r4, r7, lr}
 800ff5a:	b08d      	sub	sp, #52	@ 0x34
 800ff5c:	af04      	add	r7, sp, #16
 800ff5e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ff60:	2300      	movs	r3, #0
 800ff62:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ff64:	2300      	movs	r3, #0
 800ff66:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d106      	bne.n	800ff7c <tcp_process+0x24>
 800ff6e:	4b9d      	ldr	r3, [pc, #628]	@ (80101e4 <tcp_process+0x28c>)
 800ff70:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800ff74:	499c      	ldr	r1, [pc, #624]	@ (80101e8 <tcp_process+0x290>)
 800ff76:	489d      	ldr	r0, [pc, #628]	@ (80101ec <tcp_process+0x294>)
 800ff78:	f006 fe5a 	bl	8016c30 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ff7c:	4b9c      	ldr	r3, [pc, #624]	@ (80101f0 <tcp_process+0x298>)
 800ff7e:	781b      	ldrb	r3, [r3, #0]
 800ff80:	f003 0304 	and.w	r3, r3, #4
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d04e      	beq.n	8010026 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	7d1b      	ldrb	r3, [r3, #20]
 800ff8c:	2b02      	cmp	r3, #2
 800ff8e:	d108      	bne.n	800ffa2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ff94:	4b97      	ldr	r3, [pc, #604]	@ (80101f4 <tcp_process+0x29c>)
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	429a      	cmp	r2, r3
 800ff9a:	d123      	bne.n	800ffe4 <tcp_process+0x8c>
        acceptable = 1;
 800ff9c:	2301      	movs	r3, #1
 800ff9e:	76fb      	strb	r3, [r7, #27]
 800ffa0:	e020      	b.n	800ffe4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ffa6:	4b94      	ldr	r3, [pc, #592]	@ (80101f8 <tcp_process+0x2a0>)
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	429a      	cmp	r2, r3
 800ffac:	d102      	bne.n	800ffb4 <tcp_process+0x5c>
        acceptable = 1;
 800ffae:	2301      	movs	r3, #1
 800ffb0:	76fb      	strb	r3, [r7, #27]
 800ffb2:	e017      	b.n	800ffe4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ffb4:	4b90      	ldr	r3, [pc, #576]	@ (80101f8 <tcp_process+0x2a0>)
 800ffb6:	681a      	ldr	r2, [r3, #0]
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffbc:	1ad3      	subs	r3, r2, r3
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	db10      	blt.n	800ffe4 <tcp_process+0x8c>
 800ffc2:	4b8d      	ldr	r3, [pc, #564]	@ (80101f8 <tcp_process+0x2a0>)
 800ffc4:	681a      	ldr	r2, [r3, #0]
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffca:	6879      	ldr	r1, [r7, #4]
 800ffcc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ffce:	440b      	add	r3, r1
 800ffd0:	1ad3      	subs	r3, r2, r3
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	dc06      	bgt.n	800ffe4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	8b5b      	ldrh	r3, [r3, #26]
 800ffda:	f043 0302 	orr.w	r3, r3, #2
 800ffde:	b29a      	uxth	r2, r3
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ffe4:	7efb      	ldrb	r3, [r7, #27]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d01b      	beq.n	8010022 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	7d1b      	ldrb	r3, [r3, #20]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d106      	bne.n	8010000 <tcp_process+0xa8>
 800fff2:	4b7c      	ldr	r3, [pc, #496]	@ (80101e4 <tcp_process+0x28c>)
 800fff4:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800fff8:	4980      	ldr	r1, [pc, #512]	@ (80101fc <tcp_process+0x2a4>)
 800fffa:	487c      	ldr	r0, [pc, #496]	@ (80101ec <tcp_process+0x294>)
 800fffc:	f006 fe18 	bl	8016c30 <iprintf>
      recv_flags |= TF_RESET;
 8010000:	4b7f      	ldr	r3, [pc, #508]	@ (8010200 <tcp_process+0x2a8>)
 8010002:	781b      	ldrb	r3, [r3, #0]
 8010004:	f043 0308 	orr.w	r3, r3, #8
 8010008:	b2da      	uxtb	r2, r3
 801000a:	4b7d      	ldr	r3, [pc, #500]	@ (8010200 <tcp_process+0x2a8>)
 801000c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	8b5b      	ldrh	r3, [r3, #26]
 8010012:	f023 0301 	bic.w	r3, r3, #1
 8010016:	b29a      	uxth	r2, r3
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801001c:	f06f 030d 	mvn.w	r3, #13
 8010020:	e37a      	b.n	8010718 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010022:	2300      	movs	r3, #0
 8010024:	e378      	b.n	8010718 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010026:	4b72      	ldr	r3, [pc, #456]	@ (80101f0 <tcp_process+0x298>)
 8010028:	781b      	ldrb	r3, [r3, #0]
 801002a:	f003 0302 	and.w	r3, r3, #2
 801002e:	2b00      	cmp	r3, #0
 8010030:	d010      	beq.n	8010054 <tcp_process+0xfc>
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	7d1b      	ldrb	r3, [r3, #20]
 8010036:	2b02      	cmp	r3, #2
 8010038:	d00c      	beq.n	8010054 <tcp_process+0xfc>
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	7d1b      	ldrb	r3, [r3, #20]
 801003e:	2b03      	cmp	r3, #3
 8010040:	d008      	beq.n	8010054 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	8b5b      	ldrh	r3, [r3, #26]
 8010046:	f043 0302 	orr.w	r3, r3, #2
 801004a:	b29a      	uxth	r2, r3
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010050:	2300      	movs	r3, #0
 8010052:	e361      	b.n	8010718 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	8b5b      	ldrh	r3, [r3, #26]
 8010058:	f003 0310 	and.w	r3, r3, #16
 801005c:	2b00      	cmp	r3, #0
 801005e:	d103      	bne.n	8010068 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010060:	4b68      	ldr	r3, [pc, #416]	@ (8010204 <tcp_process+0x2ac>)
 8010062:	681a      	ldr	r2, [r3, #0]
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2200      	movs	r2, #0
 801006c:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	2200      	movs	r2, #0
 8010074:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8010078:	6878      	ldr	r0, [r7, #4]
 801007a:	f001 fc2b 	bl	80118d4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	7d1b      	ldrb	r3, [r3, #20]
 8010082:	3b02      	subs	r3, #2
 8010084:	2b07      	cmp	r3, #7
 8010086:	f200 8337 	bhi.w	80106f8 <tcp_process+0x7a0>
 801008a:	a201      	add	r2, pc, #4	@ (adr r2, 8010090 <tcp_process+0x138>)
 801008c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010090:	080100b1 	.word	0x080100b1
 8010094:	080102e1 	.word	0x080102e1
 8010098:	08010459 	.word	0x08010459
 801009c:	08010483 	.word	0x08010483
 80100a0:	080105a7 	.word	0x080105a7
 80100a4:	08010459 	.word	0x08010459
 80100a8:	08010633 	.word	0x08010633
 80100ac:	080106c3 	.word	0x080106c3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80100b0:	4b4f      	ldr	r3, [pc, #316]	@ (80101f0 <tcp_process+0x298>)
 80100b2:	781b      	ldrb	r3, [r3, #0]
 80100b4:	f003 0310 	and.w	r3, r3, #16
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	f000 80e4 	beq.w	8010286 <tcp_process+0x32e>
 80100be:	4b4c      	ldr	r3, [pc, #304]	@ (80101f0 <tcp_process+0x298>)
 80100c0:	781b      	ldrb	r3, [r3, #0]
 80100c2:	f003 0302 	and.w	r3, r3, #2
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	f000 80dd 	beq.w	8010286 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80100d0:	1c5a      	adds	r2, r3, #1
 80100d2:	4b48      	ldr	r3, [pc, #288]	@ (80101f4 <tcp_process+0x29c>)
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	429a      	cmp	r2, r3
 80100d8:	f040 80d5 	bne.w	8010286 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80100dc:	4b46      	ldr	r3, [pc, #280]	@ (80101f8 <tcp_process+0x2a0>)
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	1c5a      	adds	r2, r3, #1
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 80100ee:	4b41      	ldr	r3, [pc, #260]	@ (80101f4 <tcp_process+0x29c>)
 80100f0:	681a      	ldr	r2, [r3, #0]
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80100f6:	4b44      	ldr	r3, [pc, #272]	@ (8010208 <tcp_process+0x2b0>)
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	89db      	ldrh	r3, [r3, #14]
 80100fc:	b29a      	uxth	r2, r3
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010110:	4b39      	ldr	r3, [pc, #228]	@ (80101f8 <tcp_process+0x2a0>)
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	1e5a      	subs	r2, r3, #1
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	2204      	movs	r2, #4
 801011e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	3304      	adds	r3, #4
 8010128:	4618      	mov	r0, r3
 801012a:	f005 f8df 	bl	80152ec <ip4_route>
 801012e:	4601      	mov	r1, r0
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	3304      	adds	r3, #4
 8010134:	461a      	mov	r2, r3
 8010136:	4620      	mov	r0, r4
 8010138:	f7ff f88c 	bl	800f254 <tcp_eff_send_mss_netif>
 801013c:	4603      	mov	r3, r0
 801013e:	461a      	mov	r2, r3
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010148:	009a      	lsls	r2, r3, #2
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801014e:	005b      	lsls	r3, r3, #1
 8010150:	f241 111c 	movw	r1, #4380	@ 0x111c
 8010154:	428b      	cmp	r3, r1
 8010156:	bf38      	it	cc
 8010158:	460b      	movcc	r3, r1
 801015a:	429a      	cmp	r2, r3
 801015c:	d204      	bcs.n	8010168 <tcp_process+0x210>
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010162:	009b      	lsls	r3, r3, #2
 8010164:	b29b      	uxth	r3, r3
 8010166:	e00d      	b.n	8010184 <tcp_process+0x22c>
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801016c:	005b      	lsls	r3, r3, #1
 801016e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8010172:	4293      	cmp	r3, r2
 8010174:	d904      	bls.n	8010180 <tcp_process+0x228>
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801017a:	005b      	lsls	r3, r3, #1
 801017c:	b29b      	uxth	r3, r3
 801017e:	e001      	b.n	8010184 <tcp_process+0x22c>
 8010180:	f241 131c 	movw	r3, #4380	@ 0x111c
 8010184:	687a      	ldr	r2, [r7, #4]
 8010186:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010190:	2b00      	cmp	r3, #0
 8010192:	d106      	bne.n	80101a2 <tcp_process+0x24a>
 8010194:	4b13      	ldr	r3, [pc, #76]	@ (80101e4 <tcp_process+0x28c>)
 8010196:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 801019a:	491c      	ldr	r1, [pc, #112]	@ (801020c <tcp_process+0x2b4>)
 801019c:	4813      	ldr	r0, [pc, #76]	@ (80101ec <tcp_process+0x294>)
 801019e:	f006 fd47 	bl	8016c30 <iprintf>
        --pcb->snd_queuelen;
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80101a8:	3b01      	subs	r3, #1
 80101aa:	b29a      	uxth	r2, r3
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80101b6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80101b8:	69fb      	ldr	r3, [r7, #28]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d12a      	bne.n	8010214 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80101c2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80101c4:	69fb      	ldr	r3, [r7, #28]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d106      	bne.n	80101d8 <tcp_process+0x280>
 80101ca:	4b06      	ldr	r3, [pc, #24]	@ (80101e4 <tcp_process+0x28c>)
 80101cc:	f44f 725d 	mov.w	r2, #884	@ 0x374
 80101d0:	490f      	ldr	r1, [pc, #60]	@ (8010210 <tcp_process+0x2b8>)
 80101d2:	4806      	ldr	r0, [pc, #24]	@ (80101ec <tcp_process+0x294>)
 80101d4:	f006 fd2c 	bl	8016c30 <iprintf>
          pcb->unsent = rseg->next;
 80101d8:	69fb      	ldr	r3, [r7, #28]
 80101da:	681a      	ldr	r2, [r3, #0]
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	66da      	str	r2, [r3, #108]	@ 0x6c
 80101e0:	e01c      	b.n	801021c <tcp_process+0x2c4>
 80101e2:	bf00      	nop
 80101e4:	080198d0 	.word	0x080198d0
 80101e8:	08019b08 	.word	0x08019b08
 80101ec:	0801991c 	.word	0x0801991c
 80101f0:	24007f48 	.word	0x24007f48
 80101f4:	24007f40 	.word	0x24007f40
 80101f8:	24007f3c 	.word	0x24007f3c
 80101fc:	08019b24 	.word	0x08019b24
 8010200:	24007f49 	.word	0x24007f49
 8010204:	24007f04 	.word	0x24007f04
 8010208:	24007f2c 	.word	0x24007f2c
 801020c:	08019b44 	.word	0x08019b44
 8010210:	08019b5c 	.word	0x08019b5c
        } else {
          pcb->unacked = rseg->next;
 8010214:	69fb      	ldr	r3, [r7, #28]
 8010216:	681a      	ldr	r2, [r3, #0]
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 801021c:	69f8      	ldr	r0, [r7, #28]
 801021e:	f7fe fc54 	bl	800eaca <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010226:	2b00      	cmp	r3, #0
 8010228:	d104      	bne.n	8010234 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010230:	861a      	strh	r2, [r3, #48]	@ 0x30
 8010232:	e006      	b.n	8010242 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	2200      	movs	r2, #0
 8010238:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	2200      	movs	r2, #0
 801023e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010248:	2b00      	cmp	r3, #0
 801024a:	d00a      	beq.n	8010262 <tcp_process+0x30a>
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010252:	687a      	ldr	r2, [r7, #4]
 8010254:	6910      	ldr	r0, [r2, #16]
 8010256:	2200      	movs	r2, #0
 8010258:	6879      	ldr	r1, [r7, #4]
 801025a:	4798      	blx	r3
 801025c:	4603      	mov	r3, r0
 801025e:	76bb      	strb	r3, [r7, #26]
 8010260:	e001      	b.n	8010266 <tcp_process+0x30e>
 8010262:	2300      	movs	r3, #0
 8010264:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010266:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801026a:	f113 0f0d 	cmn.w	r3, #13
 801026e:	d102      	bne.n	8010276 <tcp_process+0x31e>
          return ERR_ABRT;
 8010270:	f06f 030c 	mvn.w	r3, #12
 8010274:	e250      	b.n	8010718 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	8b5b      	ldrh	r3, [r3, #26]
 801027a:	f043 0302 	orr.w	r3, r3, #2
 801027e:	b29a      	uxth	r2, r3
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010284:	e23a      	b.n	80106fc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010286:	4b98      	ldr	r3, [pc, #608]	@ (80104e8 <tcp_process+0x590>)
 8010288:	781b      	ldrb	r3, [r3, #0]
 801028a:	f003 0310 	and.w	r3, r3, #16
 801028e:	2b00      	cmp	r3, #0
 8010290:	f000 8234 	beq.w	80106fc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010294:	4b95      	ldr	r3, [pc, #596]	@ (80104ec <tcp_process+0x594>)
 8010296:	6819      	ldr	r1, [r3, #0]
 8010298:	4b95      	ldr	r3, [pc, #596]	@ (80104f0 <tcp_process+0x598>)
 801029a:	881b      	ldrh	r3, [r3, #0]
 801029c:	461a      	mov	r2, r3
 801029e:	4b95      	ldr	r3, [pc, #596]	@ (80104f4 <tcp_process+0x59c>)
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80102a4:	4b94      	ldr	r3, [pc, #592]	@ (80104f8 <tcp_process+0x5a0>)
 80102a6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102a8:	885b      	ldrh	r3, [r3, #2]
 80102aa:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80102ac:	4a92      	ldr	r2, [pc, #584]	@ (80104f8 <tcp_process+0x5a0>)
 80102ae:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102b0:	8812      	ldrh	r2, [r2, #0]
 80102b2:	b292      	uxth	r2, r2
 80102b4:	9202      	str	r2, [sp, #8]
 80102b6:	9301      	str	r3, [sp, #4]
 80102b8:	4b90      	ldr	r3, [pc, #576]	@ (80104fc <tcp_process+0x5a4>)
 80102ba:	9300      	str	r3, [sp, #0]
 80102bc:	4b90      	ldr	r3, [pc, #576]	@ (8010500 <tcp_process+0x5a8>)
 80102be:	4602      	mov	r2, r0
 80102c0:	6878      	ldr	r0, [r7, #4]
 80102c2:	f003 f8d7 	bl	8013474 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80102cc:	2b05      	cmp	r3, #5
 80102ce:	f200 8215 	bhi.w	80106fc <tcp_process+0x7a4>
          pcb->rtime = 0;
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	2200      	movs	r2, #0
 80102d6:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 80102d8:	6878      	ldr	r0, [r7, #4]
 80102da:	f002 fea3 	bl	8013024 <tcp_rexmit_rto>
      break;
 80102de:	e20d      	b.n	80106fc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80102e0:	4b81      	ldr	r3, [pc, #516]	@ (80104e8 <tcp_process+0x590>)
 80102e2:	781b      	ldrb	r3, [r3, #0]
 80102e4:	f003 0310 	and.w	r3, r3, #16
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	f000 80a1 	beq.w	8010430 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80102ee:	4b7f      	ldr	r3, [pc, #508]	@ (80104ec <tcp_process+0x594>)
 80102f0:	681a      	ldr	r2, [r3, #0]
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80102f6:	1ad3      	subs	r3, r2, r3
 80102f8:	3b01      	subs	r3, #1
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	db7e      	blt.n	80103fc <tcp_process+0x4a4>
 80102fe:	4b7b      	ldr	r3, [pc, #492]	@ (80104ec <tcp_process+0x594>)
 8010300:	681a      	ldr	r2, [r3, #0]
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010306:	1ad3      	subs	r3, r2, r3
 8010308:	2b00      	cmp	r3, #0
 801030a:	dc77      	bgt.n	80103fc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	2204      	movs	r2, #4
 8010310:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010316:	2b00      	cmp	r3, #0
 8010318:	d102      	bne.n	8010320 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801031a:	23fa      	movs	r3, #250	@ 0xfa
 801031c:	76bb      	strb	r3, [r7, #26]
 801031e:	e01d      	b.n	801035c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010324:	699b      	ldr	r3, [r3, #24]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d106      	bne.n	8010338 <tcp_process+0x3e0>
 801032a:	4b76      	ldr	r3, [pc, #472]	@ (8010504 <tcp_process+0x5ac>)
 801032c:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8010330:	4975      	ldr	r1, [pc, #468]	@ (8010508 <tcp_process+0x5b0>)
 8010332:	4876      	ldr	r0, [pc, #472]	@ (801050c <tcp_process+0x5b4>)
 8010334:	f006 fc7c 	bl	8016c30 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801033c:	699b      	ldr	r3, [r3, #24]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d00a      	beq.n	8010358 <tcp_process+0x400>
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010346:	699b      	ldr	r3, [r3, #24]
 8010348:	687a      	ldr	r2, [r7, #4]
 801034a:	6910      	ldr	r0, [r2, #16]
 801034c:	2200      	movs	r2, #0
 801034e:	6879      	ldr	r1, [r7, #4]
 8010350:	4798      	blx	r3
 8010352:	4603      	mov	r3, r0
 8010354:	76bb      	strb	r3, [r7, #26]
 8010356:	e001      	b.n	801035c <tcp_process+0x404>
 8010358:	23f0      	movs	r3, #240	@ 0xf0
 801035a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801035c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d00a      	beq.n	801037a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010364:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010368:	f113 0f0d 	cmn.w	r3, #13
 801036c:	d002      	beq.n	8010374 <tcp_process+0x41c>
              tcp_abort(pcb);
 801036e:	6878      	ldr	r0, [r7, #4]
 8010370:	f7fd fd16 	bl	800dda0 <tcp_abort>
            }
            return ERR_ABRT;
 8010374:	f06f 030c 	mvn.w	r3, #12
 8010378:	e1ce      	b.n	8010718 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801037a:	6878      	ldr	r0, [r7, #4]
 801037c:	f000 fae0 	bl	8010940 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010380:	4b63      	ldr	r3, [pc, #396]	@ (8010510 <tcp_process+0x5b8>)
 8010382:	881b      	ldrh	r3, [r3, #0]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d005      	beq.n	8010394 <tcp_process+0x43c>
            recv_acked--;
 8010388:	4b61      	ldr	r3, [pc, #388]	@ (8010510 <tcp_process+0x5b8>)
 801038a:	881b      	ldrh	r3, [r3, #0]
 801038c:	3b01      	subs	r3, #1
 801038e:	b29a      	uxth	r2, r3
 8010390:	4b5f      	ldr	r3, [pc, #380]	@ (8010510 <tcp_process+0x5b8>)
 8010392:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010398:	009a      	lsls	r2, r3, #2
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801039e:	005b      	lsls	r3, r3, #1
 80103a0:	f241 111c 	movw	r1, #4380	@ 0x111c
 80103a4:	428b      	cmp	r3, r1
 80103a6:	bf38      	it	cc
 80103a8:	460b      	movcc	r3, r1
 80103aa:	429a      	cmp	r2, r3
 80103ac:	d204      	bcs.n	80103b8 <tcp_process+0x460>
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80103b2:	009b      	lsls	r3, r3, #2
 80103b4:	b29b      	uxth	r3, r3
 80103b6:	e00d      	b.n	80103d4 <tcp_process+0x47c>
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80103bc:	005b      	lsls	r3, r3, #1
 80103be:	f241 121c 	movw	r2, #4380	@ 0x111c
 80103c2:	4293      	cmp	r3, r2
 80103c4:	d904      	bls.n	80103d0 <tcp_process+0x478>
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80103ca:	005b      	lsls	r3, r3, #1
 80103cc:	b29b      	uxth	r3, r3
 80103ce:	e001      	b.n	80103d4 <tcp_process+0x47c>
 80103d0:	f241 131c 	movw	r3, #4380	@ 0x111c
 80103d4:	687a      	ldr	r2, [r7, #4]
 80103d6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80103da:	4b4e      	ldr	r3, [pc, #312]	@ (8010514 <tcp_process+0x5bc>)
 80103dc:	781b      	ldrb	r3, [r3, #0]
 80103de:	f003 0320 	and.w	r3, r3, #32
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d037      	beq.n	8010456 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	8b5b      	ldrh	r3, [r3, #26]
 80103ea:	f043 0302 	orr.w	r3, r3, #2
 80103ee:	b29a      	uxth	r2, r3
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	2207      	movs	r2, #7
 80103f8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80103fa:	e02c      	b.n	8010456 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80103fc:	4b3b      	ldr	r3, [pc, #236]	@ (80104ec <tcp_process+0x594>)
 80103fe:	6819      	ldr	r1, [r3, #0]
 8010400:	4b3b      	ldr	r3, [pc, #236]	@ (80104f0 <tcp_process+0x598>)
 8010402:	881b      	ldrh	r3, [r3, #0]
 8010404:	461a      	mov	r2, r3
 8010406:	4b3b      	ldr	r3, [pc, #236]	@ (80104f4 <tcp_process+0x59c>)
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801040c:	4b3a      	ldr	r3, [pc, #232]	@ (80104f8 <tcp_process+0x5a0>)
 801040e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010410:	885b      	ldrh	r3, [r3, #2]
 8010412:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010414:	4a38      	ldr	r2, [pc, #224]	@ (80104f8 <tcp_process+0x5a0>)
 8010416:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010418:	8812      	ldrh	r2, [r2, #0]
 801041a:	b292      	uxth	r2, r2
 801041c:	9202      	str	r2, [sp, #8]
 801041e:	9301      	str	r3, [sp, #4]
 8010420:	4b36      	ldr	r3, [pc, #216]	@ (80104fc <tcp_process+0x5a4>)
 8010422:	9300      	str	r3, [sp, #0]
 8010424:	4b36      	ldr	r3, [pc, #216]	@ (8010500 <tcp_process+0x5a8>)
 8010426:	4602      	mov	r2, r0
 8010428:	6878      	ldr	r0, [r7, #4]
 801042a:	f003 f823 	bl	8013474 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801042e:	e167      	b.n	8010700 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010430:	4b2d      	ldr	r3, [pc, #180]	@ (80104e8 <tcp_process+0x590>)
 8010432:	781b      	ldrb	r3, [r3, #0]
 8010434:	f003 0302 	and.w	r3, r3, #2
 8010438:	2b00      	cmp	r3, #0
 801043a:	f000 8161 	beq.w	8010700 <tcp_process+0x7a8>
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010442:	1e5a      	subs	r2, r3, #1
 8010444:	4b2b      	ldr	r3, [pc, #172]	@ (80104f4 <tcp_process+0x59c>)
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	429a      	cmp	r2, r3
 801044a:	f040 8159 	bne.w	8010700 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801044e:	6878      	ldr	r0, [r7, #4]
 8010450:	f002 fe0a 	bl	8013068 <tcp_rexmit>
      break;
 8010454:	e154      	b.n	8010700 <tcp_process+0x7a8>
 8010456:	e153      	b.n	8010700 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010458:	6878      	ldr	r0, [r7, #4]
 801045a:	f000 fa71 	bl	8010940 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801045e:	4b2d      	ldr	r3, [pc, #180]	@ (8010514 <tcp_process+0x5bc>)
 8010460:	781b      	ldrb	r3, [r3, #0]
 8010462:	f003 0320 	and.w	r3, r3, #32
 8010466:	2b00      	cmp	r3, #0
 8010468:	f000 814c 	beq.w	8010704 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	8b5b      	ldrh	r3, [r3, #26]
 8010470:	f043 0302 	orr.w	r3, r3, #2
 8010474:	b29a      	uxth	r2, r3
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	2207      	movs	r2, #7
 801047e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010480:	e140      	b.n	8010704 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010482:	6878      	ldr	r0, [r7, #4]
 8010484:	f000 fa5c 	bl	8010940 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010488:	4b22      	ldr	r3, [pc, #136]	@ (8010514 <tcp_process+0x5bc>)
 801048a:	781b      	ldrb	r3, [r3, #0]
 801048c:	f003 0320 	and.w	r3, r3, #32
 8010490:	2b00      	cmp	r3, #0
 8010492:	d071      	beq.n	8010578 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010494:	4b14      	ldr	r3, [pc, #80]	@ (80104e8 <tcp_process+0x590>)
 8010496:	781b      	ldrb	r3, [r3, #0]
 8010498:	f003 0310 	and.w	r3, r3, #16
 801049c:	2b00      	cmp	r3, #0
 801049e:	d060      	beq.n	8010562 <tcp_process+0x60a>
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80104a4:	4b11      	ldr	r3, [pc, #68]	@ (80104ec <tcp_process+0x594>)
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	429a      	cmp	r2, r3
 80104aa:	d15a      	bne.n	8010562 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d156      	bne.n	8010562 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	8b5b      	ldrh	r3, [r3, #26]
 80104b8:	f043 0302 	orr.w	r3, r3, #2
 80104bc:	b29a      	uxth	r2, r3
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80104c2:	6878      	ldr	r0, [r7, #4]
 80104c4:	f7fe fdbc 	bl	800f040 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80104c8:	4b13      	ldr	r3, [pc, #76]	@ (8010518 <tcp_process+0x5c0>)
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	687a      	ldr	r2, [r7, #4]
 80104ce:	429a      	cmp	r2, r3
 80104d0:	d105      	bne.n	80104de <tcp_process+0x586>
 80104d2:	4b11      	ldr	r3, [pc, #68]	@ (8010518 <tcp_process+0x5c0>)
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	68db      	ldr	r3, [r3, #12]
 80104d8:	4a0f      	ldr	r2, [pc, #60]	@ (8010518 <tcp_process+0x5c0>)
 80104da:	6013      	str	r3, [r2, #0]
 80104dc:	e02e      	b.n	801053c <tcp_process+0x5e4>
 80104de:	4b0e      	ldr	r3, [pc, #56]	@ (8010518 <tcp_process+0x5c0>)
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	617b      	str	r3, [r7, #20]
 80104e4:	e027      	b.n	8010536 <tcp_process+0x5de>
 80104e6:	bf00      	nop
 80104e8:	24007f48 	.word	0x24007f48
 80104ec:	24007f40 	.word	0x24007f40
 80104f0:	24007f46 	.word	0x24007f46
 80104f4:	24007f3c 	.word	0x24007f3c
 80104f8:	24007f2c 	.word	0x24007f2c
 80104fc:	24004e04 	.word	0x24004e04
 8010500:	24004e08 	.word	0x24004e08
 8010504:	080198d0 	.word	0x080198d0
 8010508:	08019b70 	.word	0x08019b70
 801050c:	0801991c 	.word	0x0801991c
 8010510:	24007f44 	.word	0x24007f44
 8010514:	24007f49 	.word	0x24007f49
 8010518:	24007f10 	.word	0x24007f10
 801051c:	697b      	ldr	r3, [r7, #20]
 801051e:	68db      	ldr	r3, [r3, #12]
 8010520:	687a      	ldr	r2, [r7, #4]
 8010522:	429a      	cmp	r2, r3
 8010524:	d104      	bne.n	8010530 <tcp_process+0x5d8>
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	68da      	ldr	r2, [r3, #12]
 801052a:	697b      	ldr	r3, [r7, #20]
 801052c:	60da      	str	r2, [r3, #12]
 801052e:	e005      	b.n	801053c <tcp_process+0x5e4>
 8010530:	697b      	ldr	r3, [r7, #20]
 8010532:	68db      	ldr	r3, [r3, #12]
 8010534:	617b      	str	r3, [r7, #20]
 8010536:	697b      	ldr	r3, [r7, #20]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d1ef      	bne.n	801051c <tcp_process+0x5c4>
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	2200      	movs	r2, #0
 8010540:	60da      	str	r2, [r3, #12]
 8010542:	4b77      	ldr	r3, [pc, #476]	@ (8010720 <tcp_process+0x7c8>)
 8010544:	2201      	movs	r2, #1
 8010546:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	220a      	movs	r2, #10
 801054c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801054e:	4b75      	ldr	r3, [pc, #468]	@ (8010724 <tcp_process+0x7cc>)
 8010550:	681a      	ldr	r2, [r3, #0]
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	60da      	str	r2, [r3, #12]
 8010556:	4a73      	ldr	r2, [pc, #460]	@ (8010724 <tcp_process+0x7cc>)
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	6013      	str	r3, [r2, #0]
 801055c:	f003 f94c 	bl	80137f8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010560:	e0d2      	b.n	8010708 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	8b5b      	ldrh	r3, [r3, #26]
 8010566:	f043 0302 	orr.w	r3, r3, #2
 801056a:	b29a      	uxth	r2, r3
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	2208      	movs	r2, #8
 8010574:	751a      	strb	r2, [r3, #20]
      break;
 8010576:	e0c7      	b.n	8010708 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010578:	4b6b      	ldr	r3, [pc, #428]	@ (8010728 <tcp_process+0x7d0>)
 801057a:	781b      	ldrb	r3, [r3, #0]
 801057c:	f003 0310 	and.w	r3, r3, #16
 8010580:	2b00      	cmp	r3, #0
 8010582:	f000 80c1 	beq.w	8010708 <tcp_process+0x7b0>
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801058a:	4b68      	ldr	r3, [pc, #416]	@ (801072c <tcp_process+0x7d4>)
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	429a      	cmp	r2, r3
 8010590:	f040 80ba 	bne.w	8010708 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010598:	2b00      	cmp	r3, #0
 801059a:	f040 80b5 	bne.w	8010708 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	2206      	movs	r2, #6
 80105a2:	751a      	strb	r2, [r3, #20]
      break;
 80105a4:	e0b0      	b.n	8010708 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80105a6:	6878      	ldr	r0, [r7, #4]
 80105a8:	f000 f9ca 	bl	8010940 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80105ac:	4b60      	ldr	r3, [pc, #384]	@ (8010730 <tcp_process+0x7d8>)
 80105ae:	781b      	ldrb	r3, [r3, #0]
 80105b0:	f003 0320 	and.w	r3, r3, #32
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	f000 80a9 	beq.w	801070c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	8b5b      	ldrh	r3, [r3, #26]
 80105be:	f043 0302 	orr.w	r3, r3, #2
 80105c2:	b29a      	uxth	r2, r3
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80105c8:	6878      	ldr	r0, [r7, #4]
 80105ca:	f7fe fd39 	bl	800f040 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80105ce:	4b59      	ldr	r3, [pc, #356]	@ (8010734 <tcp_process+0x7dc>)
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	687a      	ldr	r2, [r7, #4]
 80105d4:	429a      	cmp	r2, r3
 80105d6:	d105      	bne.n	80105e4 <tcp_process+0x68c>
 80105d8:	4b56      	ldr	r3, [pc, #344]	@ (8010734 <tcp_process+0x7dc>)
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	68db      	ldr	r3, [r3, #12]
 80105de:	4a55      	ldr	r2, [pc, #340]	@ (8010734 <tcp_process+0x7dc>)
 80105e0:	6013      	str	r3, [r2, #0]
 80105e2:	e013      	b.n	801060c <tcp_process+0x6b4>
 80105e4:	4b53      	ldr	r3, [pc, #332]	@ (8010734 <tcp_process+0x7dc>)
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	613b      	str	r3, [r7, #16]
 80105ea:	e00c      	b.n	8010606 <tcp_process+0x6ae>
 80105ec:	693b      	ldr	r3, [r7, #16]
 80105ee:	68db      	ldr	r3, [r3, #12]
 80105f0:	687a      	ldr	r2, [r7, #4]
 80105f2:	429a      	cmp	r2, r3
 80105f4:	d104      	bne.n	8010600 <tcp_process+0x6a8>
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	68da      	ldr	r2, [r3, #12]
 80105fa:	693b      	ldr	r3, [r7, #16]
 80105fc:	60da      	str	r2, [r3, #12]
 80105fe:	e005      	b.n	801060c <tcp_process+0x6b4>
 8010600:	693b      	ldr	r3, [r7, #16]
 8010602:	68db      	ldr	r3, [r3, #12]
 8010604:	613b      	str	r3, [r7, #16]
 8010606:	693b      	ldr	r3, [r7, #16]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d1ef      	bne.n	80105ec <tcp_process+0x694>
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	2200      	movs	r2, #0
 8010610:	60da      	str	r2, [r3, #12]
 8010612:	4b43      	ldr	r3, [pc, #268]	@ (8010720 <tcp_process+0x7c8>)
 8010614:	2201      	movs	r2, #1
 8010616:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	220a      	movs	r2, #10
 801061c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801061e:	4b41      	ldr	r3, [pc, #260]	@ (8010724 <tcp_process+0x7cc>)
 8010620:	681a      	ldr	r2, [r3, #0]
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	60da      	str	r2, [r3, #12]
 8010626:	4a3f      	ldr	r2, [pc, #252]	@ (8010724 <tcp_process+0x7cc>)
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	6013      	str	r3, [r2, #0]
 801062c:	f003 f8e4 	bl	80137f8 <tcp_timer_needed>
      }
      break;
 8010630:	e06c      	b.n	801070c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010632:	6878      	ldr	r0, [r7, #4]
 8010634:	f000 f984 	bl	8010940 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010638:	4b3b      	ldr	r3, [pc, #236]	@ (8010728 <tcp_process+0x7d0>)
 801063a:	781b      	ldrb	r3, [r3, #0]
 801063c:	f003 0310 	and.w	r3, r3, #16
 8010640:	2b00      	cmp	r3, #0
 8010642:	d065      	beq.n	8010710 <tcp_process+0x7b8>
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010648:	4b38      	ldr	r3, [pc, #224]	@ (801072c <tcp_process+0x7d4>)
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	429a      	cmp	r2, r3
 801064e:	d15f      	bne.n	8010710 <tcp_process+0x7b8>
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010654:	2b00      	cmp	r3, #0
 8010656:	d15b      	bne.n	8010710 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010658:	6878      	ldr	r0, [r7, #4]
 801065a:	f7fe fcf1 	bl	800f040 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801065e:	4b35      	ldr	r3, [pc, #212]	@ (8010734 <tcp_process+0x7dc>)
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	687a      	ldr	r2, [r7, #4]
 8010664:	429a      	cmp	r2, r3
 8010666:	d105      	bne.n	8010674 <tcp_process+0x71c>
 8010668:	4b32      	ldr	r3, [pc, #200]	@ (8010734 <tcp_process+0x7dc>)
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	68db      	ldr	r3, [r3, #12]
 801066e:	4a31      	ldr	r2, [pc, #196]	@ (8010734 <tcp_process+0x7dc>)
 8010670:	6013      	str	r3, [r2, #0]
 8010672:	e013      	b.n	801069c <tcp_process+0x744>
 8010674:	4b2f      	ldr	r3, [pc, #188]	@ (8010734 <tcp_process+0x7dc>)
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	60fb      	str	r3, [r7, #12]
 801067a:	e00c      	b.n	8010696 <tcp_process+0x73e>
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	68db      	ldr	r3, [r3, #12]
 8010680:	687a      	ldr	r2, [r7, #4]
 8010682:	429a      	cmp	r2, r3
 8010684:	d104      	bne.n	8010690 <tcp_process+0x738>
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	68da      	ldr	r2, [r3, #12]
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	60da      	str	r2, [r3, #12]
 801068e:	e005      	b.n	801069c <tcp_process+0x744>
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	68db      	ldr	r3, [r3, #12]
 8010694:	60fb      	str	r3, [r7, #12]
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d1ef      	bne.n	801067c <tcp_process+0x724>
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	2200      	movs	r2, #0
 80106a0:	60da      	str	r2, [r3, #12]
 80106a2:	4b1f      	ldr	r3, [pc, #124]	@ (8010720 <tcp_process+0x7c8>)
 80106a4:	2201      	movs	r2, #1
 80106a6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	220a      	movs	r2, #10
 80106ac:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80106ae:	4b1d      	ldr	r3, [pc, #116]	@ (8010724 <tcp_process+0x7cc>)
 80106b0:	681a      	ldr	r2, [r3, #0]
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	60da      	str	r2, [r3, #12]
 80106b6:	4a1b      	ldr	r2, [pc, #108]	@ (8010724 <tcp_process+0x7cc>)
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	6013      	str	r3, [r2, #0]
 80106bc:	f003 f89c 	bl	80137f8 <tcp_timer_needed>
      }
      break;
 80106c0:	e026      	b.n	8010710 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80106c2:	6878      	ldr	r0, [r7, #4]
 80106c4:	f000 f93c 	bl	8010940 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80106c8:	4b17      	ldr	r3, [pc, #92]	@ (8010728 <tcp_process+0x7d0>)
 80106ca:	781b      	ldrb	r3, [r3, #0]
 80106cc:	f003 0310 	and.w	r3, r3, #16
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d01f      	beq.n	8010714 <tcp_process+0x7bc>
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80106d8:	4b14      	ldr	r3, [pc, #80]	@ (801072c <tcp_process+0x7d4>)
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	429a      	cmp	r2, r3
 80106de:	d119      	bne.n	8010714 <tcp_process+0x7bc>
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d115      	bne.n	8010714 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80106e8:	4b11      	ldr	r3, [pc, #68]	@ (8010730 <tcp_process+0x7d8>)
 80106ea:	781b      	ldrb	r3, [r3, #0]
 80106ec:	f043 0310 	orr.w	r3, r3, #16
 80106f0:	b2da      	uxtb	r2, r3
 80106f2:	4b0f      	ldr	r3, [pc, #60]	@ (8010730 <tcp_process+0x7d8>)
 80106f4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80106f6:	e00d      	b.n	8010714 <tcp_process+0x7bc>
    default:
      break;
 80106f8:	bf00      	nop
 80106fa:	e00c      	b.n	8010716 <tcp_process+0x7be>
      break;
 80106fc:	bf00      	nop
 80106fe:	e00a      	b.n	8010716 <tcp_process+0x7be>
      break;
 8010700:	bf00      	nop
 8010702:	e008      	b.n	8010716 <tcp_process+0x7be>
      break;
 8010704:	bf00      	nop
 8010706:	e006      	b.n	8010716 <tcp_process+0x7be>
      break;
 8010708:	bf00      	nop
 801070a:	e004      	b.n	8010716 <tcp_process+0x7be>
      break;
 801070c:	bf00      	nop
 801070e:	e002      	b.n	8010716 <tcp_process+0x7be>
      break;
 8010710:	bf00      	nop
 8010712:	e000      	b.n	8010716 <tcp_process+0x7be>
      break;
 8010714:	bf00      	nop
  }
  return ERR_OK;
 8010716:	2300      	movs	r3, #0
}
 8010718:	4618      	mov	r0, r3
 801071a:	3724      	adds	r7, #36	@ 0x24
 801071c:	46bd      	mov	sp, r7
 801071e:	bd90      	pop	{r4, r7, pc}
 8010720:	24007f18 	.word	0x24007f18
 8010724:	24007f14 	.word	0x24007f14
 8010728:	24007f48 	.word	0x24007f48
 801072c:	24007f40 	.word	0x24007f40
 8010730:	24007f49 	.word	0x24007f49
 8010734:	24007f10 	.word	0x24007f10

08010738 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010738:	b590      	push	{r4, r7, lr}
 801073a:	b085      	sub	sp, #20
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]
 8010740:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d106      	bne.n	8010756 <tcp_oos_insert_segment+0x1e>
 8010748:	4b3b      	ldr	r3, [pc, #236]	@ (8010838 <tcp_oos_insert_segment+0x100>)
 801074a:	f240 421f 	movw	r2, #1055	@ 0x41f
 801074e:	493b      	ldr	r1, [pc, #236]	@ (801083c <tcp_oos_insert_segment+0x104>)
 8010750:	483b      	ldr	r0, [pc, #236]	@ (8010840 <tcp_oos_insert_segment+0x108>)
 8010752:	f006 fa6d 	bl	8016c30 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	68db      	ldr	r3, [r3, #12]
 801075a:	899b      	ldrh	r3, [r3, #12]
 801075c:	b29b      	uxth	r3, r3
 801075e:	4618      	mov	r0, r3
 8010760:	f7fb f884 	bl	800b86c <lwip_htons>
 8010764:	4603      	mov	r3, r0
 8010766:	b2db      	uxtb	r3, r3
 8010768:	f003 0301 	and.w	r3, r3, #1
 801076c:	2b00      	cmp	r3, #0
 801076e:	d028      	beq.n	80107c2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010770:	6838      	ldr	r0, [r7, #0]
 8010772:	f7fe f995 	bl	800eaa0 <tcp_segs_free>
    next = NULL;
 8010776:	2300      	movs	r3, #0
 8010778:	603b      	str	r3, [r7, #0]
 801077a:	e056      	b.n	801082a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801077c:	683b      	ldr	r3, [r7, #0]
 801077e:	68db      	ldr	r3, [r3, #12]
 8010780:	899b      	ldrh	r3, [r3, #12]
 8010782:	b29b      	uxth	r3, r3
 8010784:	4618      	mov	r0, r3
 8010786:	f7fb f871 	bl	800b86c <lwip_htons>
 801078a:	4603      	mov	r3, r0
 801078c:	b2db      	uxtb	r3, r3
 801078e:	f003 0301 	and.w	r3, r3, #1
 8010792:	2b00      	cmp	r3, #0
 8010794:	d00d      	beq.n	80107b2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	68db      	ldr	r3, [r3, #12]
 801079a:	899b      	ldrh	r3, [r3, #12]
 801079c:	b29c      	uxth	r4, r3
 801079e:	2001      	movs	r0, #1
 80107a0:	f7fb f864 	bl	800b86c <lwip_htons>
 80107a4:	4603      	mov	r3, r0
 80107a6:	461a      	mov	r2, r3
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	68db      	ldr	r3, [r3, #12]
 80107ac:	4322      	orrs	r2, r4
 80107ae:	b292      	uxth	r2, r2
 80107b0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80107b2:	683b      	ldr	r3, [r7, #0]
 80107b4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80107b6:	683b      	ldr	r3, [r7, #0]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80107bc:	68f8      	ldr	r0, [r7, #12]
 80107be:	f7fe f984 	bl	800eaca <tcp_seg_free>
    while (next &&
 80107c2:	683b      	ldr	r3, [r7, #0]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d00e      	beq.n	80107e6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	891b      	ldrh	r3, [r3, #8]
 80107cc:	461a      	mov	r2, r3
 80107ce:	4b1d      	ldr	r3, [pc, #116]	@ (8010844 <tcp_oos_insert_segment+0x10c>)
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	441a      	add	r2, r3
 80107d4:	683b      	ldr	r3, [r7, #0]
 80107d6:	68db      	ldr	r3, [r3, #12]
 80107d8:	685b      	ldr	r3, [r3, #4]
 80107da:	6839      	ldr	r1, [r7, #0]
 80107dc:	8909      	ldrh	r1, [r1, #8]
 80107de:	440b      	add	r3, r1
 80107e0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	daca      	bge.n	801077c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80107e6:	683b      	ldr	r3, [r7, #0]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d01e      	beq.n	801082a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	891b      	ldrh	r3, [r3, #8]
 80107f0:	461a      	mov	r2, r3
 80107f2:	4b14      	ldr	r3, [pc, #80]	@ (8010844 <tcp_oos_insert_segment+0x10c>)
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	441a      	add	r2, r3
 80107f8:	683b      	ldr	r3, [r7, #0]
 80107fa:	68db      	ldr	r3, [r3, #12]
 80107fc:	685b      	ldr	r3, [r3, #4]
 80107fe:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010800:	2b00      	cmp	r3, #0
 8010802:	dd12      	ble.n	801082a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010804:	683b      	ldr	r3, [r7, #0]
 8010806:	68db      	ldr	r3, [r3, #12]
 8010808:	685b      	ldr	r3, [r3, #4]
 801080a:	b29a      	uxth	r2, r3
 801080c:	4b0d      	ldr	r3, [pc, #52]	@ (8010844 <tcp_oos_insert_segment+0x10c>)
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	b29b      	uxth	r3, r3
 8010812:	1ad3      	subs	r3, r2, r3
 8010814:	b29a      	uxth	r2, r3
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	685a      	ldr	r2, [r3, #4]
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	891b      	ldrh	r3, [r3, #8]
 8010822:	4619      	mov	r1, r3
 8010824:	4610      	mov	r0, r2
 8010826:	f7fc fb45 	bl	800ceb4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	683a      	ldr	r2, [r7, #0]
 801082e:	601a      	str	r2, [r3, #0]
}
 8010830:	bf00      	nop
 8010832:	3714      	adds	r7, #20
 8010834:	46bd      	mov	sp, r7
 8010836:	bd90      	pop	{r4, r7, pc}
 8010838:	080198d0 	.word	0x080198d0
 801083c:	08019b90 	.word	0x08019b90
 8010840:	0801991c 	.word	0x0801991c
 8010844:	24007f3c 	.word	0x24007f3c

08010848 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010848:	b5b0      	push	{r4, r5, r7, lr}
 801084a:	b086      	sub	sp, #24
 801084c:	af00      	add	r7, sp, #0
 801084e:	60f8      	str	r0, [r7, #12]
 8010850:	60b9      	str	r1, [r7, #8]
 8010852:	607a      	str	r2, [r7, #4]
 8010854:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010856:	e03e      	b.n	80108d6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010858:	68bb      	ldr	r3, [r7, #8]
 801085a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801085c:	68bb      	ldr	r3, [r7, #8]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010862:	697b      	ldr	r3, [r7, #20]
 8010864:	685b      	ldr	r3, [r3, #4]
 8010866:	4618      	mov	r0, r3
 8010868:	f7fc fd38 	bl	800d2dc <pbuf_clen>
 801086c:	4603      	mov	r3, r0
 801086e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010876:	8a7a      	ldrh	r2, [r7, #18]
 8010878:	429a      	cmp	r2, r3
 801087a:	d906      	bls.n	801088a <tcp_free_acked_segments+0x42>
 801087c:	4b2a      	ldr	r3, [pc, #168]	@ (8010928 <tcp_free_acked_segments+0xe0>)
 801087e:	f240 4257 	movw	r2, #1111	@ 0x457
 8010882:	492a      	ldr	r1, [pc, #168]	@ (801092c <tcp_free_acked_segments+0xe4>)
 8010884:	482a      	ldr	r0, [pc, #168]	@ (8010930 <tcp_free_acked_segments+0xe8>)
 8010886:	f006 f9d3 	bl	8016c30 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8010890:	8a7b      	ldrh	r3, [r7, #18]
 8010892:	1ad3      	subs	r3, r2, r3
 8010894:	b29a      	uxth	r2, r3
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801089c:	697b      	ldr	r3, [r7, #20]
 801089e:	891a      	ldrh	r2, [r3, #8]
 80108a0:	4b24      	ldr	r3, [pc, #144]	@ (8010934 <tcp_free_acked_segments+0xec>)
 80108a2:	881b      	ldrh	r3, [r3, #0]
 80108a4:	4413      	add	r3, r2
 80108a6:	b29a      	uxth	r2, r3
 80108a8:	4b22      	ldr	r3, [pc, #136]	@ (8010934 <tcp_free_acked_segments+0xec>)
 80108aa:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80108ac:	6978      	ldr	r0, [r7, #20]
 80108ae:	f7fe f90c 	bl	800eaca <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d00c      	beq.n	80108d6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80108bc:	68bb      	ldr	r3, [r7, #8]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d109      	bne.n	80108d6 <tcp_free_acked_segments+0x8e>
 80108c2:	683b      	ldr	r3, [r7, #0]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d106      	bne.n	80108d6 <tcp_free_acked_segments+0x8e>
 80108c8:	4b17      	ldr	r3, [pc, #92]	@ (8010928 <tcp_free_acked_segments+0xe0>)
 80108ca:	f240 4261 	movw	r2, #1121	@ 0x461
 80108ce:	491a      	ldr	r1, [pc, #104]	@ (8010938 <tcp_free_acked_segments+0xf0>)
 80108d0:	4817      	ldr	r0, [pc, #92]	@ (8010930 <tcp_free_acked_segments+0xe8>)
 80108d2:	f006 f9ad 	bl	8016c30 <iprintf>
  while (seg_list != NULL &&
 80108d6:	68bb      	ldr	r3, [r7, #8]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d020      	beq.n	801091e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80108dc:	68bb      	ldr	r3, [r7, #8]
 80108de:	68db      	ldr	r3, [r3, #12]
 80108e0:	685b      	ldr	r3, [r3, #4]
 80108e2:	4618      	mov	r0, r3
 80108e4:	f7fa ffd7 	bl	800b896 <lwip_htonl>
 80108e8:	4604      	mov	r4, r0
 80108ea:	68bb      	ldr	r3, [r7, #8]
 80108ec:	891b      	ldrh	r3, [r3, #8]
 80108ee:	461d      	mov	r5, r3
 80108f0:	68bb      	ldr	r3, [r7, #8]
 80108f2:	68db      	ldr	r3, [r3, #12]
 80108f4:	899b      	ldrh	r3, [r3, #12]
 80108f6:	b29b      	uxth	r3, r3
 80108f8:	4618      	mov	r0, r3
 80108fa:	f7fa ffb7 	bl	800b86c <lwip_htons>
 80108fe:	4603      	mov	r3, r0
 8010900:	b2db      	uxtb	r3, r3
 8010902:	f003 0303 	and.w	r3, r3, #3
 8010906:	2b00      	cmp	r3, #0
 8010908:	d001      	beq.n	801090e <tcp_free_acked_segments+0xc6>
 801090a:	2301      	movs	r3, #1
 801090c:	e000      	b.n	8010910 <tcp_free_acked_segments+0xc8>
 801090e:	2300      	movs	r3, #0
 8010910:	442b      	add	r3, r5
 8010912:	18e2      	adds	r2, r4, r3
 8010914:	4b09      	ldr	r3, [pc, #36]	@ (801093c <tcp_free_acked_segments+0xf4>)
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801091a:	2b00      	cmp	r3, #0
 801091c:	dd9c      	ble.n	8010858 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801091e:	68bb      	ldr	r3, [r7, #8]
}
 8010920:	4618      	mov	r0, r3
 8010922:	3718      	adds	r7, #24
 8010924:	46bd      	mov	sp, r7
 8010926:	bdb0      	pop	{r4, r5, r7, pc}
 8010928:	080198d0 	.word	0x080198d0
 801092c:	08019bb8 	.word	0x08019bb8
 8010930:	0801991c 	.word	0x0801991c
 8010934:	24007f44 	.word	0x24007f44
 8010938:	08019be0 	.word	0x08019be0
 801093c:	24007f40 	.word	0x24007f40

08010940 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010940:	b5b0      	push	{r4, r5, r7, lr}
 8010942:	b094      	sub	sp, #80	@ 0x50
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010948:	2300      	movs	r3, #0
 801094a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d106      	bne.n	8010960 <tcp_receive+0x20>
 8010952:	4b91      	ldr	r3, [pc, #580]	@ (8010b98 <tcp_receive+0x258>)
 8010954:	f240 427b 	movw	r2, #1147	@ 0x47b
 8010958:	4990      	ldr	r1, [pc, #576]	@ (8010b9c <tcp_receive+0x25c>)
 801095a:	4891      	ldr	r0, [pc, #580]	@ (8010ba0 <tcp_receive+0x260>)
 801095c:	f006 f968 	bl	8016c30 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	7d1b      	ldrb	r3, [r3, #20]
 8010964:	2b03      	cmp	r3, #3
 8010966:	d806      	bhi.n	8010976 <tcp_receive+0x36>
 8010968:	4b8b      	ldr	r3, [pc, #556]	@ (8010b98 <tcp_receive+0x258>)
 801096a:	f240 427c 	movw	r2, #1148	@ 0x47c
 801096e:	498d      	ldr	r1, [pc, #564]	@ (8010ba4 <tcp_receive+0x264>)
 8010970:	488b      	ldr	r0, [pc, #556]	@ (8010ba0 <tcp_receive+0x260>)
 8010972:	f006 f95d 	bl	8016c30 <iprintf>

  if (flags & TCP_ACK) {
 8010976:	4b8c      	ldr	r3, [pc, #560]	@ (8010ba8 <tcp_receive+0x268>)
 8010978:	781b      	ldrb	r3, [r3, #0]
 801097a:	f003 0310 	and.w	r3, r3, #16
 801097e:	2b00      	cmp	r3, #0
 8010980:	f000 8264 	beq.w	8010e4c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801098a:	461a      	mov	r2, r3
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010990:	4413      	add	r3, r2
 8010992:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010998:	4b84      	ldr	r3, [pc, #528]	@ (8010bac <tcp_receive+0x26c>)
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	1ad3      	subs	r3, r2, r3
 801099e:	2b00      	cmp	r3, #0
 80109a0:	db1b      	blt.n	80109da <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80109a6:	4b81      	ldr	r3, [pc, #516]	@ (8010bac <tcp_receive+0x26c>)
 80109a8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80109aa:	429a      	cmp	r2, r3
 80109ac:	d106      	bne.n	80109bc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80109b2:	4b7f      	ldr	r3, [pc, #508]	@ (8010bb0 <tcp_receive+0x270>)
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	1ad3      	subs	r3, r2, r3
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	db0e      	blt.n	80109da <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80109c0:	4b7b      	ldr	r3, [pc, #492]	@ (8010bb0 <tcp_receive+0x270>)
 80109c2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80109c4:	429a      	cmp	r2, r3
 80109c6:	d125      	bne.n	8010a14 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80109c8:	4b7a      	ldr	r3, [pc, #488]	@ (8010bb4 <tcp_receive+0x274>)
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	89db      	ldrh	r3, [r3, #14]
 80109ce:	b29a      	uxth	r2, r3
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80109d6:	429a      	cmp	r2, r3
 80109d8:	d91c      	bls.n	8010a14 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80109da:	4b76      	ldr	r3, [pc, #472]	@ (8010bb4 <tcp_receive+0x274>)
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	89db      	ldrh	r3, [r3, #14]
 80109e0:	b29a      	uxth	r2, r3
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80109f4:	429a      	cmp	r2, r3
 80109f6:	d205      	bcs.n	8010a04 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8010a04:	4b69      	ldr	r3, [pc, #420]	@ (8010bac <tcp_receive+0x26c>)
 8010a06:	681a      	ldr	r2, [r3, #0]
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8010a0c:	4b68      	ldr	r3, [pc, #416]	@ (8010bb0 <tcp_receive+0x270>)
 8010a0e:	681a      	ldr	r2, [r3, #0]
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010a14:	4b66      	ldr	r3, [pc, #408]	@ (8010bb0 <tcp_receive+0x270>)
 8010a16:	681a      	ldr	r2, [r3, #0]
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a1c:	1ad3      	subs	r3, r2, r3
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	dc58      	bgt.n	8010ad4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010a22:	4b65      	ldr	r3, [pc, #404]	@ (8010bb8 <tcp_receive+0x278>)
 8010a24:	881b      	ldrh	r3, [r3, #0]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d14b      	bne.n	8010ac2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010a2e:	687a      	ldr	r2, [r7, #4]
 8010a30:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8010a34:	4413      	add	r3, r2
 8010a36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010a38:	429a      	cmp	r2, r3
 8010a3a:	d142      	bne.n	8010ac2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	db3d      	blt.n	8010ac2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010a4a:	4b59      	ldr	r3, [pc, #356]	@ (8010bb0 <tcp_receive+0x270>)
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	429a      	cmp	r2, r3
 8010a50:	d137      	bne.n	8010ac2 <tcp_receive+0x182>
              found_dupack = 1;
 8010a52:	2301      	movs	r3, #1
 8010a54:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010a5c:	2bff      	cmp	r3, #255	@ 0xff
 8010a5e:	d007      	beq.n	8010a70 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010a66:	3301      	adds	r3, #1
 8010a68:	b2da      	uxtb	r2, r3
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010a76:	2b03      	cmp	r3, #3
 8010a78:	d91b      	bls.n	8010ab2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010a84:	4413      	add	r3, r2
 8010a86:	b29a      	uxth	r2, r3
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010a8e:	429a      	cmp	r2, r3
 8010a90:	d30a      	bcc.n	8010aa8 <tcp_receive+0x168>
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010a9c:	4413      	add	r3, r2
 8010a9e:	b29a      	uxth	r2, r3
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010aa6:	e004      	b.n	8010ab2 <tcp_receive+0x172>
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010aae:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010ab8:	2b02      	cmp	r3, #2
 8010aba:	d902      	bls.n	8010ac2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010abc:	6878      	ldr	r0, [r7, #4]
 8010abe:	f002 fb3f 	bl	8013140 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010ac2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	f040 8161 	bne.w	8010d8c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	2200      	movs	r2, #0
 8010ace:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010ad2:	e15b      	b.n	8010d8c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010ad4:	4b36      	ldr	r3, [pc, #216]	@ (8010bb0 <tcp_receive+0x270>)
 8010ad6:	681a      	ldr	r2, [r3, #0]
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010adc:	1ad3      	subs	r3, r2, r3
 8010ade:	3b01      	subs	r3, #1
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	f2c0 814e 	blt.w	8010d82 <tcp_receive+0x442>
 8010ae6:	4b32      	ldr	r3, [pc, #200]	@ (8010bb0 <tcp_receive+0x270>)
 8010ae8:	681a      	ldr	r2, [r3, #0]
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010aee:	1ad3      	subs	r3, r2, r3
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	f300 8146 	bgt.w	8010d82 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	8b5b      	ldrh	r3, [r3, #26]
 8010afa:	f003 0304 	and.w	r3, r3, #4
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d010      	beq.n	8010b24 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	8b5b      	ldrh	r3, [r3, #26]
 8010b06:	f023 0304 	bic.w	r3, r3, #4
 8010b0a:	b29a      	uxth	r2, r3
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	2200      	movs	r2, #0
 8010b20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	2200      	movs	r2, #0
 8010b28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010b32:	10db      	asrs	r3, r3, #3
 8010b34:	b21b      	sxth	r3, r3
 8010b36:	b29a      	uxth	r2, r3
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010b3e:	b29b      	uxth	r3, r3
 8010b40:	4413      	add	r3, r2
 8010b42:	b29b      	uxth	r3, r3
 8010b44:	b21a      	sxth	r2, r3
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010b4c:	4b18      	ldr	r3, [pc, #96]	@ (8010bb0 <tcp_receive+0x270>)
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	b29a      	uxth	r2, r3
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b56:	b29b      	uxth	r3, r3
 8010b58:	1ad3      	subs	r3, r2, r3
 8010b5a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	2200      	movs	r2, #0
 8010b60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8010b64:	4b12      	ldr	r3, [pc, #72]	@ (8010bb0 <tcp_receive+0x270>)
 8010b66:	681a      	ldr	r2, [r3, #0]
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	7d1b      	ldrb	r3, [r3, #20]
 8010b70:	2b03      	cmp	r3, #3
 8010b72:	f240 8097 	bls.w	8010ca4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8010b82:	429a      	cmp	r2, r3
 8010b84:	d245      	bcs.n	8010c12 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	8b5b      	ldrh	r3, [r3, #26]
 8010b8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d014      	beq.n	8010bbc <tcp_receive+0x27c>
 8010b92:	2301      	movs	r3, #1
 8010b94:	e013      	b.n	8010bbe <tcp_receive+0x27e>
 8010b96:	bf00      	nop
 8010b98:	080198d0 	.word	0x080198d0
 8010b9c:	08019c00 	.word	0x08019c00
 8010ba0:	0801991c 	.word	0x0801991c
 8010ba4:	08019c1c 	.word	0x08019c1c
 8010ba8:	24007f48 	.word	0x24007f48
 8010bac:	24007f3c 	.word	0x24007f3c
 8010bb0:	24007f40 	.word	0x24007f40
 8010bb4:	24007f2c 	.word	0x24007f2c
 8010bb8:	24007f46 	.word	0x24007f46
 8010bbc:	2302      	movs	r3, #2
 8010bbe:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010bc2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8010bc6:	b29a      	uxth	r2, r3
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010bcc:	fb12 f303 	smulbb	r3, r2, r3
 8010bd0:	b29b      	uxth	r3, r3
 8010bd2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010bd4:	4293      	cmp	r3, r2
 8010bd6:	bf28      	it	cs
 8010bd8:	4613      	movcs	r3, r2
 8010bda:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010be2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010be4:	4413      	add	r3, r2
 8010be6:	b29a      	uxth	r2, r3
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010bee:	429a      	cmp	r2, r3
 8010bf0:	d309      	bcc.n	8010c06 <tcp_receive+0x2c6>
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010bf8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010bfa:	4413      	add	r3, r2
 8010bfc:	b29a      	uxth	r2, r3
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010c04:	e04e      	b.n	8010ca4 <tcp_receive+0x364>
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010c0c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010c10:	e048      	b.n	8010ca4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010c18:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010c1a:	4413      	add	r3, r2
 8010c1c:	b29a      	uxth	r2, r3
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010c24:	429a      	cmp	r2, r3
 8010c26:	d309      	bcc.n	8010c3c <tcp_receive+0x2fc>
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010c2e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010c30:	4413      	add	r3, r2
 8010c32:	b29a      	uxth	r2, r3
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010c3a:	e004      	b.n	8010c46 <tcp_receive+0x306>
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010c42:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010c52:	429a      	cmp	r2, r3
 8010c54:	d326      	bcc.n	8010ca4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010c62:	1ad3      	subs	r3, r2, r3
 8010c64:	b29a      	uxth	r2, r3
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010c76:	4413      	add	r3, r2
 8010c78:	b29a      	uxth	r2, r3
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010c80:	429a      	cmp	r2, r3
 8010c82:	d30a      	bcc.n	8010c9a <tcp_receive+0x35a>
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010c8e:	4413      	add	r3, r2
 8010c90:	b29a      	uxth	r2, r3
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010c98:	e004      	b.n	8010ca4 <tcp_receive+0x364>
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010ca0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010cac:	4a98      	ldr	r2, [pc, #608]	@ (8010f10 <tcp_receive+0x5d0>)
 8010cae:	6878      	ldr	r0, [r7, #4]
 8010cb0:	f7ff fdca 	bl	8010848 <tcp_free_acked_segments>
 8010cb4:	4602      	mov	r2, r0
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010cc2:	4a94      	ldr	r2, [pc, #592]	@ (8010f14 <tcp_receive+0x5d4>)
 8010cc4:	6878      	ldr	r0, [r7, #4]
 8010cc6:	f7ff fdbf 	bl	8010848 <tcp_free_acked_segments>
 8010cca:	4602      	mov	r2, r0
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d104      	bne.n	8010ce2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010cde:	861a      	strh	r2, [r3, #48]	@ 0x30
 8010ce0:	e002      	b.n	8010ce8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	2200      	movs	r2, #0
 8010ce6:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	2200      	movs	r2, #0
 8010cec:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d103      	bne.n	8010cfe <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8010d04:	4b84      	ldr	r3, [pc, #528]	@ (8010f18 <tcp_receive+0x5d8>)
 8010d06:	881b      	ldrh	r3, [r3, #0]
 8010d08:	4413      	add	r3, r2
 8010d0a:	b29a      	uxth	r2, r3
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	8b5b      	ldrh	r3, [r3, #26]
 8010d16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d035      	beq.n	8010d8a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d118      	bne.n	8010d58 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d00c      	beq.n	8010d48 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d36:	68db      	ldr	r3, [r3, #12]
 8010d38:	685b      	ldr	r3, [r3, #4]
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	f7fa fdab 	bl	800b896 <lwip_htonl>
 8010d40:	4603      	mov	r3, r0
 8010d42:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	dc20      	bgt.n	8010d8a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	8b5b      	ldrh	r3, [r3, #26]
 8010d4c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010d50:	b29a      	uxth	r2, r3
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010d56:	e018      	b.n	8010d8a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010d60:	68db      	ldr	r3, [r3, #12]
 8010d62:	685b      	ldr	r3, [r3, #4]
 8010d64:	4618      	mov	r0, r3
 8010d66:	f7fa fd96 	bl	800b896 <lwip_htonl>
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	1ae3      	subs	r3, r4, r3
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	dc0b      	bgt.n	8010d8a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	8b5b      	ldrh	r3, [r3, #26]
 8010d76:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010d7a:	b29a      	uxth	r2, r3
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010d80:	e003      	b.n	8010d8a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010d82:	6878      	ldr	r0, [r7, #4]
 8010d84:	f002 fbc8 	bl	8013518 <tcp_send_empty_ack>
 8010d88:	e000      	b.n	8010d8c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010d8a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d05b      	beq.n	8010e4c <tcp_receive+0x50c>
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010d98:	4b60      	ldr	r3, [pc, #384]	@ (8010f1c <tcp_receive+0x5dc>)
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	1ad3      	subs	r3, r2, r3
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	da54      	bge.n	8010e4c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010da2:	4b5f      	ldr	r3, [pc, #380]	@ (8010f20 <tcp_receive+0x5e0>)
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	b29a      	uxth	r2, r3
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010dac:	b29b      	uxth	r3, r3
 8010dae:	1ad3      	subs	r3, r2, r3
 8010db0:	b29b      	uxth	r3, r3
 8010db2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010db6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010dc0:	10db      	asrs	r3, r3, #3
 8010dc2:	b21b      	sxth	r3, r3
 8010dc4:	b29b      	uxth	r3, r3
 8010dc6:	1ad3      	subs	r3, r2, r3
 8010dc8:	b29b      	uxth	r3, r3
 8010dca:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010dd4:	b29a      	uxth	r2, r3
 8010dd6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8010dda:	4413      	add	r3, r2
 8010ddc:	b29b      	uxth	r3, r3
 8010dde:	b21a      	sxth	r2, r3
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8010de4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	da05      	bge.n	8010df8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010dec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8010df0:	425b      	negs	r3, r3
 8010df2:	b29b      	uxth	r3, r3
 8010df4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010df8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010e02:	109b      	asrs	r3, r3, #2
 8010e04:	b21b      	sxth	r3, r3
 8010e06:	b29b      	uxth	r3, r3
 8010e08:	1ad3      	subs	r3, r2, r3
 8010e0a:	b29b      	uxth	r3, r3
 8010e0c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010e16:	b29a      	uxth	r2, r3
 8010e18:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8010e1c:	4413      	add	r3, r2
 8010e1e:	b29b      	uxth	r3, r3
 8010e20:	b21a      	sxth	r2, r3
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010e2c:	10db      	asrs	r3, r3, #3
 8010e2e:	b21b      	sxth	r3, r3
 8010e30:	b29a      	uxth	r2, r3
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010e38:	b29b      	uxth	r3, r3
 8010e3a:	4413      	add	r3, r2
 8010e3c:	b29b      	uxth	r3, r3
 8010e3e:	b21a      	sxth	r2, r3
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	2200      	movs	r2, #0
 8010e4a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010e4c:	4b35      	ldr	r3, [pc, #212]	@ (8010f24 <tcp_receive+0x5e4>)
 8010e4e:	881b      	ldrh	r3, [r3, #0]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	f000 84df 	beq.w	8011814 <tcp_receive+0xed4>
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	7d1b      	ldrb	r3, [r3, #20]
 8010e5a:	2b06      	cmp	r3, #6
 8010e5c:	f200 84da 	bhi.w	8011814 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010e64:	4b30      	ldr	r3, [pc, #192]	@ (8010f28 <tcp_receive+0x5e8>)
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	1ad3      	subs	r3, r2, r3
 8010e6a:	3b01      	subs	r3, #1
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	f2c0 808f 	blt.w	8010f90 <tcp_receive+0x650>
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010e76:	4b2b      	ldr	r3, [pc, #172]	@ (8010f24 <tcp_receive+0x5e4>)
 8010e78:	881b      	ldrh	r3, [r3, #0]
 8010e7a:	4619      	mov	r1, r3
 8010e7c:	4b2a      	ldr	r3, [pc, #168]	@ (8010f28 <tcp_receive+0x5e8>)
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	440b      	add	r3, r1
 8010e82:	1ad3      	subs	r3, r2, r3
 8010e84:	3301      	adds	r3, #1
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	f300 8082 	bgt.w	8010f90 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010e8c:	4b27      	ldr	r3, [pc, #156]	@ (8010f2c <tcp_receive+0x5ec>)
 8010e8e:	685b      	ldr	r3, [r3, #4]
 8010e90:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010e96:	4b24      	ldr	r3, [pc, #144]	@ (8010f28 <tcp_receive+0x5e8>)
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	1ad3      	subs	r3, r2, r3
 8010e9c:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010e9e:	4b23      	ldr	r3, [pc, #140]	@ (8010f2c <tcp_receive+0x5ec>)
 8010ea0:	685b      	ldr	r3, [r3, #4]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d106      	bne.n	8010eb4 <tcp_receive+0x574>
 8010ea6:	4b22      	ldr	r3, [pc, #136]	@ (8010f30 <tcp_receive+0x5f0>)
 8010ea8:	f240 5294 	movw	r2, #1428	@ 0x594
 8010eac:	4921      	ldr	r1, [pc, #132]	@ (8010f34 <tcp_receive+0x5f4>)
 8010eae:	4822      	ldr	r0, [pc, #136]	@ (8010f38 <tcp_receive+0x5f8>)
 8010eb0:	f005 febe 	bl	8016c30 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010eb6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010eba:	4293      	cmp	r3, r2
 8010ebc:	d906      	bls.n	8010ecc <tcp_receive+0x58c>
 8010ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8010f30 <tcp_receive+0x5f0>)
 8010ec0:	f240 5295 	movw	r2, #1429	@ 0x595
 8010ec4:	491d      	ldr	r1, [pc, #116]	@ (8010f3c <tcp_receive+0x5fc>)
 8010ec6:	481c      	ldr	r0, [pc, #112]	@ (8010f38 <tcp_receive+0x5f8>)
 8010ec8:	f005 feb2 	bl	8016c30 <iprintf>
      off = (u16_t)off32;
 8010ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ece:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010ed2:	4b16      	ldr	r3, [pc, #88]	@ (8010f2c <tcp_receive+0x5ec>)
 8010ed4:	685b      	ldr	r3, [r3, #4]
 8010ed6:	891b      	ldrh	r3, [r3, #8]
 8010ed8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010edc:	429a      	cmp	r2, r3
 8010ede:	d906      	bls.n	8010eee <tcp_receive+0x5ae>
 8010ee0:	4b13      	ldr	r3, [pc, #76]	@ (8010f30 <tcp_receive+0x5f0>)
 8010ee2:	f240 5297 	movw	r2, #1431	@ 0x597
 8010ee6:	4916      	ldr	r1, [pc, #88]	@ (8010f40 <tcp_receive+0x600>)
 8010ee8:	4813      	ldr	r0, [pc, #76]	@ (8010f38 <tcp_receive+0x5f8>)
 8010eea:	f005 fea1 	bl	8016c30 <iprintf>
      inseg.len -= off;
 8010eee:	4b0f      	ldr	r3, [pc, #60]	@ (8010f2c <tcp_receive+0x5ec>)
 8010ef0:	891a      	ldrh	r2, [r3, #8]
 8010ef2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010ef6:	1ad3      	subs	r3, r2, r3
 8010ef8:	b29a      	uxth	r2, r3
 8010efa:	4b0c      	ldr	r3, [pc, #48]	@ (8010f2c <tcp_receive+0x5ec>)
 8010efc:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010efe:	4b0b      	ldr	r3, [pc, #44]	@ (8010f2c <tcp_receive+0x5ec>)
 8010f00:	685b      	ldr	r3, [r3, #4]
 8010f02:	891a      	ldrh	r2, [r3, #8]
 8010f04:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010f08:	1ad3      	subs	r3, r2, r3
 8010f0a:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8010f0c:	e02a      	b.n	8010f64 <tcp_receive+0x624>
 8010f0e:	bf00      	nop
 8010f10:	08019c38 	.word	0x08019c38
 8010f14:	08019c40 	.word	0x08019c40
 8010f18:	24007f44 	.word	0x24007f44
 8010f1c:	24007f40 	.word	0x24007f40
 8010f20:	24007f04 	.word	0x24007f04
 8010f24:	24007f46 	.word	0x24007f46
 8010f28:	24007f3c 	.word	0x24007f3c
 8010f2c:	24007f1c 	.word	0x24007f1c
 8010f30:	080198d0 	.word	0x080198d0
 8010f34:	08019c48 	.word	0x08019c48
 8010f38:	0801991c 	.word	0x0801991c
 8010f3c:	08019c58 	.word	0x08019c58
 8010f40:	08019c68 	.word	0x08019c68
        off -= p->len;
 8010f44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010f46:	895b      	ldrh	r3, [r3, #10]
 8010f48:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010f4c:	1ad3      	subs	r3, r2, r3
 8010f4e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010f52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010f54:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8010f56:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010f58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010f5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8010f64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010f66:	895b      	ldrh	r3, [r3, #10]
 8010f68:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010f6c:	429a      	cmp	r2, r3
 8010f6e:	d8e9      	bhi.n	8010f44 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010f70:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010f74:	4619      	mov	r1, r3
 8010f76:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8010f78:	f7fc f89c 	bl	800d0b4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f80:	4a90      	ldr	r2, [pc, #576]	@ (80111c4 <tcp_receive+0x884>)
 8010f82:	6013      	str	r3, [r2, #0]
 8010f84:	4b90      	ldr	r3, [pc, #576]	@ (80111c8 <tcp_receive+0x888>)
 8010f86:	68db      	ldr	r3, [r3, #12]
 8010f88:	4a8e      	ldr	r2, [pc, #568]	@ (80111c4 <tcp_receive+0x884>)
 8010f8a:	6812      	ldr	r2, [r2, #0]
 8010f8c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010f8e:	e00d      	b.n	8010fac <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010f90:	4b8c      	ldr	r3, [pc, #560]	@ (80111c4 <tcp_receive+0x884>)
 8010f92:	681a      	ldr	r2, [r3, #0]
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f98:	1ad3      	subs	r3, r2, r3
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	da06      	bge.n	8010fac <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	8b5b      	ldrh	r3, [r3, #26]
 8010fa2:	f043 0302 	orr.w	r3, r3, #2
 8010fa6:	b29a      	uxth	r2, r3
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010fac:	4b85      	ldr	r3, [pc, #532]	@ (80111c4 <tcp_receive+0x884>)
 8010fae:	681a      	ldr	r2, [r3, #0]
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fb4:	1ad3      	subs	r3, r2, r3
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	f2c0 8427 	blt.w	801180a <tcp_receive+0xeca>
 8010fbc:	4b81      	ldr	r3, [pc, #516]	@ (80111c4 <tcp_receive+0x884>)
 8010fbe:	681a      	ldr	r2, [r3, #0]
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fc4:	6879      	ldr	r1, [r7, #4]
 8010fc6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010fc8:	440b      	add	r3, r1
 8010fca:	1ad3      	subs	r3, r2, r3
 8010fcc:	3301      	adds	r3, #1
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	f300 841b 	bgt.w	801180a <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010fd8:	4b7a      	ldr	r3, [pc, #488]	@ (80111c4 <tcp_receive+0x884>)
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	429a      	cmp	r2, r3
 8010fde:	f040 8298 	bne.w	8011512 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010fe2:	4b79      	ldr	r3, [pc, #484]	@ (80111c8 <tcp_receive+0x888>)
 8010fe4:	891c      	ldrh	r4, [r3, #8]
 8010fe6:	4b78      	ldr	r3, [pc, #480]	@ (80111c8 <tcp_receive+0x888>)
 8010fe8:	68db      	ldr	r3, [r3, #12]
 8010fea:	899b      	ldrh	r3, [r3, #12]
 8010fec:	b29b      	uxth	r3, r3
 8010fee:	4618      	mov	r0, r3
 8010ff0:	f7fa fc3c 	bl	800b86c <lwip_htons>
 8010ff4:	4603      	mov	r3, r0
 8010ff6:	b2db      	uxtb	r3, r3
 8010ff8:	f003 0303 	and.w	r3, r3, #3
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d001      	beq.n	8011004 <tcp_receive+0x6c4>
 8011000:	2301      	movs	r3, #1
 8011002:	e000      	b.n	8011006 <tcp_receive+0x6c6>
 8011004:	2300      	movs	r3, #0
 8011006:	4423      	add	r3, r4
 8011008:	b29a      	uxth	r2, r3
 801100a:	4b70      	ldr	r3, [pc, #448]	@ (80111cc <tcp_receive+0x88c>)
 801100c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011012:	4b6e      	ldr	r3, [pc, #440]	@ (80111cc <tcp_receive+0x88c>)
 8011014:	881b      	ldrh	r3, [r3, #0]
 8011016:	429a      	cmp	r2, r3
 8011018:	d274      	bcs.n	8011104 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801101a:	4b6b      	ldr	r3, [pc, #428]	@ (80111c8 <tcp_receive+0x888>)
 801101c:	68db      	ldr	r3, [r3, #12]
 801101e:	899b      	ldrh	r3, [r3, #12]
 8011020:	b29b      	uxth	r3, r3
 8011022:	4618      	mov	r0, r3
 8011024:	f7fa fc22 	bl	800b86c <lwip_htons>
 8011028:	4603      	mov	r3, r0
 801102a:	b2db      	uxtb	r3, r3
 801102c:	f003 0301 	and.w	r3, r3, #1
 8011030:	2b00      	cmp	r3, #0
 8011032:	d01e      	beq.n	8011072 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011034:	4b64      	ldr	r3, [pc, #400]	@ (80111c8 <tcp_receive+0x888>)
 8011036:	68db      	ldr	r3, [r3, #12]
 8011038:	899b      	ldrh	r3, [r3, #12]
 801103a:	b29b      	uxth	r3, r3
 801103c:	b21b      	sxth	r3, r3
 801103e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011042:	b21c      	sxth	r4, r3
 8011044:	4b60      	ldr	r3, [pc, #384]	@ (80111c8 <tcp_receive+0x888>)
 8011046:	68db      	ldr	r3, [r3, #12]
 8011048:	899b      	ldrh	r3, [r3, #12]
 801104a:	b29b      	uxth	r3, r3
 801104c:	4618      	mov	r0, r3
 801104e:	f7fa fc0d 	bl	800b86c <lwip_htons>
 8011052:	4603      	mov	r3, r0
 8011054:	b2db      	uxtb	r3, r3
 8011056:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801105a:	b29b      	uxth	r3, r3
 801105c:	4618      	mov	r0, r3
 801105e:	f7fa fc05 	bl	800b86c <lwip_htons>
 8011062:	4603      	mov	r3, r0
 8011064:	b21b      	sxth	r3, r3
 8011066:	4323      	orrs	r3, r4
 8011068:	b21a      	sxth	r2, r3
 801106a:	4b57      	ldr	r3, [pc, #348]	@ (80111c8 <tcp_receive+0x888>)
 801106c:	68db      	ldr	r3, [r3, #12]
 801106e:	b292      	uxth	r2, r2
 8011070:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011076:	4b54      	ldr	r3, [pc, #336]	@ (80111c8 <tcp_receive+0x888>)
 8011078:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801107a:	4b53      	ldr	r3, [pc, #332]	@ (80111c8 <tcp_receive+0x888>)
 801107c:	68db      	ldr	r3, [r3, #12]
 801107e:	899b      	ldrh	r3, [r3, #12]
 8011080:	b29b      	uxth	r3, r3
 8011082:	4618      	mov	r0, r3
 8011084:	f7fa fbf2 	bl	800b86c <lwip_htons>
 8011088:	4603      	mov	r3, r0
 801108a:	b2db      	uxtb	r3, r3
 801108c:	f003 0302 	and.w	r3, r3, #2
 8011090:	2b00      	cmp	r3, #0
 8011092:	d005      	beq.n	80110a0 <tcp_receive+0x760>
            inseg.len -= 1;
 8011094:	4b4c      	ldr	r3, [pc, #304]	@ (80111c8 <tcp_receive+0x888>)
 8011096:	891b      	ldrh	r3, [r3, #8]
 8011098:	3b01      	subs	r3, #1
 801109a:	b29a      	uxth	r2, r3
 801109c:	4b4a      	ldr	r3, [pc, #296]	@ (80111c8 <tcp_receive+0x888>)
 801109e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80110a0:	4b49      	ldr	r3, [pc, #292]	@ (80111c8 <tcp_receive+0x888>)
 80110a2:	685b      	ldr	r3, [r3, #4]
 80110a4:	4a48      	ldr	r2, [pc, #288]	@ (80111c8 <tcp_receive+0x888>)
 80110a6:	8912      	ldrh	r2, [r2, #8]
 80110a8:	4611      	mov	r1, r2
 80110aa:	4618      	mov	r0, r3
 80110ac:	f7fb ff02 	bl	800ceb4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80110b0:	4b45      	ldr	r3, [pc, #276]	@ (80111c8 <tcp_receive+0x888>)
 80110b2:	891c      	ldrh	r4, [r3, #8]
 80110b4:	4b44      	ldr	r3, [pc, #272]	@ (80111c8 <tcp_receive+0x888>)
 80110b6:	68db      	ldr	r3, [r3, #12]
 80110b8:	899b      	ldrh	r3, [r3, #12]
 80110ba:	b29b      	uxth	r3, r3
 80110bc:	4618      	mov	r0, r3
 80110be:	f7fa fbd5 	bl	800b86c <lwip_htons>
 80110c2:	4603      	mov	r3, r0
 80110c4:	b2db      	uxtb	r3, r3
 80110c6:	f003 0303 	and.w	r3, r3, #3
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d001      	beq.n	80110d2 <tcp_receive+0x792>
 80110ce:	2301      	movs	r3, #1
 80110d0:	e000      	b.n	80110d4 <tcp_receive+0x794>
 80110d2:	2300      	movs	r3, #0
 80110d4:	4423      	add	r3, r4
 80110d6:	b29a      	uxth	r2, r3
 80110d8:	4b3c      	ldr	r3, [pc, #240]	@ (80111cc <tcp_receive+0x88c>)
 80110da:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80110dc:	4b3b      	ldr	r3, [pc, #236]	@ (80111cc <tcp_receive+0x88c>)
 80110de:	881b      	ldrh	r3, [r3, #0]
 80110e0:	461a      	mov	r2, r3
 80110e2:	4b38      	ldr	r3, [pc, #224]	@ (80111c4 <tcp_receive+0x884>)
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	441a      	add	r2, r3
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110ec:	6879      	ldr	r1, [r7, #4]
 80110ee:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80110f0:	440b      	add	r3, r1
 80110f2:	429a      	cmp	r2, r3
 80110f4:	d006      	beq.n	8011104 <tcp_receive+0x7c4>
 80110f6:	4b36      	ldr	r3, [pc, #216]	@ (80111d0 <tcp_receive+0x890>)
 80110f8:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 80110fc:	4935      	ldr	r1, [pc, #212]	@ (80111d4 <tcp_receive+0x894>)
 80110fe:	4836      	ldr	r0, [pc, #216]	@ (80111d8 <tcp_receive+0x898>)
 8011100:	f005 fd96 	bl	8016c30 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011108:	2b00      	cmp	r3, #0
 801110a:	f000 80e6 	beq.w	80112da <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801110e:	4b2e      	ldr	r3, [pc, #184]	@ (80111c8 <tcp_receive+0x888>)
 8011110:	68db      	ldr	r3, [r3, #12]
 8011112:	899b      	ldrh	r3, [r3, #12]
 8011114:	b29b      	uxth	r3, r3
 8011116:	4618      	mov	r0, r3
 8011118:	f7fa fba8 	bl	800b86c <lwip_htons>
 801111c:	4603      	mov	r3, r0
 801111e:	b2db      	uxtb	r3, r3
 8011120:	f003 0301 	and.w	r3, r3, #1
 8011124:	2b00      	cmp	r3, #0
 8011126:	d010      	beq.n	801114a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011128:	e00a      	b.n	8011140 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801112e:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011134:	681a      	ldr	r2, [r3, #0]
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 801113a:	68f8      	ldr	r0, [r7, #12]
 801113c:	f7fd fcc5 	bl	800eaca <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011144:	2b00      	cmp	r3, #0
 8011146:	d1f0      	bne.n	801112a <tcp_receive+0x7ea>
 8011148:	e0c7      	b.n	80112da <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801114e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011150:	e051      	b.n	80111f6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011152:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011154:	68db      	ldr	r3, [r3, #12]
 8011156:	899b      	ldrh	r3, [r3, #12]
 8011158:	b29b      	uxth	r3, r3
 801115a:	4618      	mov	r0, r3
 801115c:	f7fa fb86 	bl	800b86c <lwip_htons>
 8011160:	4603      	mov	r3, r0
 8011162:	b2db      	uxtb	r3, r3
 8011164:	f003 0301 	and.w	r3, r3, #1
 8011168:	2b00      	cmp	r3, #0
 801116a:	d03c      	beq.n	80111e6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801116c:	4b16      	ldr	r3, [pc, #88]	@ (80111c8 <tcp_receive+0x888>)
 801116e:	68db      	ldr	r3, [r3, #12]
 8011170:	899b      	ldrh	r3, [r3, #12]
 8011172:	b29b      	uxth	r3, r3
 8011174:	4618      	mov	r0, r3
 8011176:	f7fa fb79 	bl	800b86c <lwip_htons>
 801117a:	4603      	mov	r3, r0
 801117c:	b2db      	uxtb	r3, r3
 801117e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011182:	2b00      	cmp	r3, #0
 8011184:	d12f      	bne.n	80111e6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011186:	4b10      	ldr	r3, [pc, #64]	@ (80111c8 <tcp_receive+0x888>)
 8011188:	68db      	ldr	r3, [r3, #12]
 801118a:	899b      	ldrh	r3, [r3, #12]
 801118c:	b29c      	uxth	r4, r3
 801118e:	2001      	movs	r0, #1
 8011190:	f7fa fb6c 	bl	800b86c <lwip_htons>
 8011194:	4603      	mov	r3, r0
 8011196:	461a      	mov	r2, r3
 8011198:	4b0b      	ldr	r3, [pc, #44]	@ (80111c8 <tcp_receive+0x888>)
 801119a:	68db      	ldr	r3, [r3, #12]
 801119c:	4322      	orrs	r2, r4
 801119e:	b292      	uxth	r2, r2
 80111a0:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80111a2:	4b09      	ldr	r3, [pc, #36]	@ (80111c8 <tcp_receive+0x888>)
 80111a4:	891c      	ldrh	r4, [r3, #8]
 80111a6:	4b08      	ldr	r3, [pc, #32]	@ (80111c8 <tcp_receive+0x888>)
 80111a8:	68db      	ldr	r3, [r3, #12]
 80111aa:	899b      	ldrh	r3, [r3, #12]
 80111ac:	b29b      	uxth	r3, r3
 80111ae:	4618      	mov	r0, r3
 80111b0:	f7fa fb5c 	bl	800b86c <lwip_htons>
 80111b4:	4603      	mov	r3, r0
 80111b6:	b2db      	uxtb	r3, r3
 80111b8:	f003 0303 	and.w	r3, r3, #3
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d00d      	beq.n	80111dc <tcp_receive+0x89c>
 80111c0:	2301      	movs	r3, #1
 80111c2:	e00c      	b.n	80111de <tcp_receive+0x89e>
 80111c4:	24007f3c 	.word	0x24007f3c
 80111c8:	24007f1c 	.word	0x24007f1c
 80111cc:	24007f46 	.word	0x24007f46
 80111d0:	080198d0 	.word	0x080198d0
 80111d4:	08019c78 	.word	0x08019c78
 80111d8:	0801991c 	.word	0x0801991c
 80111dc:	2300      	movs	r3, #0
 80111de:	4423      	add	r3, r4
 80111e0:	b29a      	uxth	r2, r3
 80111e2:	4b98      	ldr	r3, [pc, #608]	@ (8011444 <tcp_receive+0xb04>)
 80111e4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80111e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80111e8:	613b      	str	r3, [r7, #16]
              next = next->next;
 80111ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 80111f0:	6938      	ldr	r0, [r7, #16]
 80111f2:	f7fd fc6a 	bl	800eaca <tcp_seg_free>
            while (next &&
 80111f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d00e      	beq.n	801121a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80111fc:	4b91      	ldr	r3, [pc, #580]	@ (8011444 <tcp_receive+0xb04>)
 80111fe:	881b      	ldrh	r3, [r3, #0]
 8011200:	461a      	mov	r2, r3
 8011202:	4b91      	ldr	r3, [pc, #580]	@ (8011448 <tcp_receive+0xb08>)
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	441a      	add	r2, r3
 8011208:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801120a:	68db      	ldr	r3, [r3, #12]
 801120c:	685b      	ldr	r3, [r3, #4]
 801120e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011210:	8909      	ldrh	r1, [r1, #8]
 8011212:	440b      	add	r3, r1
 8011214:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011216:	2b00      	cmp	r3, #0
 8011218:	da9b      	bge.n	8011152 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801121a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801121c:	2b00      	cmp	r3, #0
 801121e:	d059      	beq.n	80112d4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8011220:	4b88      	ldr	r3, [pc, #544]	@ (8011444 <tcp_receive+0xb04>)
 8011222:	881b      	ldrh	r3, [r3, #0]
 8011224:	461a      	mov	r2, r3
 8011226:	4b88      	ldr	r3, [pc, #544]	@ (8011448 <tcp_receive+0xb08>)
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	441a      	add	r2, r3
 801122c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801122e:	68db      	ldr	r3, [r3, #12]
 8011230:	685b      	ldr	r3, [r3, #4]
 8011232:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011234:	2b00      	cmp	r3, #0
 8011236:	dd4d      	ble.n	80112d4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011238:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801123a:	68db      	ldr	r3, [r3, #12]
 801123c:	685b      	ldr	r3, [r3, #4]
 801123e:	b29a      	uxth	r2, r3
 8011240:	4b81      	ldr	r3, [pc, #516]	@ (8011448 <tcp_receive+0xb08>)
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	b29b      	uxth	r3, r3
 8011246:	1ad3      	subs	r3, r2, r3
 8011248:	b29a      	uxth	r2, r3
 801124a:	4b80      	ldr	r3, [pc, #512]	@ (801144c <tcp_receive+0xb0c>)
 801124c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801124e:	4b7f      	ldr	r3, [pc, #508]	@ (801144c <tcp_receive+0xb0c>)
 8011250:	68db      	ldr	r3, [r3, #12]
 8011252:	899b      	ldrh	r3, [r3, #12]
 8011254:	b29b      	uxth	r3, r3
 8011256:	4618      	mov	r0, r3
 8011258:	f7fa fb08 	bl	800b86c <lwip_htons>
 801125c:	4603      	mov	r3, r0
 801125e:	b2db      	uxtb	r3, r3
 8011260:	f003 0302 	and.w	r3, r3, #2
 8011264:	2b00      	cmp	r3, #0
 8011266:	d005      	beq.n	8011274 <tcp_receive+0x934>
                inseg.len -= 1;
 8011268:	4b78      	ldr	r3, [pc, #480]	@ (801144c <tcp_receive+0xb0c>)
 801126a:	891b      	ldrh	r3, [r3, #8]
 801126c:	3b01      	subs	r3, #1
 801126e:	b29a      	uxth	r2, r3
 8011270:	4b76      	ldr	r3, [pc, #472]	@ (801144c <tcp_receive+0xb0c>)
 8011272:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011274:	4b75      	ldr	r3, [pc, #468]	@ (801144c <tcp_receive+0xb0c>)
 8011276:	685b      	ldr	r3, [r3, #4]
 8011278:	4a74      	ldr	r2, [pc, #464]	@ (801144c <tcp_receive+0xb0c>)
 801127a:	8912      	ldrh	r2, [r2, #8]
 801127c:	4611      	mov	r1, r2
 801127e:	4618      	mov	r0, r3
 8011280:	f7fb fe18 	bl	800ceb4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011284:	4b71      	ldr	r3, [pc, #452]	@ (801144c <tcp_receive+0xb0c>)
 8011286:	891c      	ldrh	r4, [r3, #8]
 8011288:	4b70      	ldr	r3, [pc, #448]	@ (801144c <tcp_receive+0xb0c>)
 801128a:	68db      	ldr	r3, [r3, #12]
 801128c:	899b      	ldrh	r3, [r3, #12]
 801128e:	b29b      	uxth	r3, r3
 8011290:	4618      	mov	r0, r3
 8011292:	f7fa faeb 	bl	800b86c <lwip_htons>
 8011296:	4603      	mov	r3, r0
 8011298:	b2db      	uxtb	r3, r3
 801129a:	f003 0303 	and.w	r3, r3, #3
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d001      	beq.n	80112a6 <tcp_receive+0x966>
 80112a2:	2301      	movs	r3, #1
 80112a4:	e000      	b.n	80112a8 <tcp_receive+0x968>
 80112a6:	2300      	movs	r3, #0
 80112a8:	4423      	add	r3, r4
 80112aa:	b29a      	uxth	r2, r3
 80112ac:	4b65      	ldr	r3, [pc, #404]	@ (8011444 <tcp_receive+0xb04>)
 80112ae:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80112b0:	4b64      	ldr	r3, [pc, #400]	@ (8011444 <tcp_receive+0xb04>)
 80112b2:	881b      	ldrh	r3, [r3, #0]
 80112b4:	461a      	mov	r2, r3
 80112b6:	4b64      	ldr	r3, [pc, #400]	@ (8011448 <tcp_receive+0xb08>)
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	441a      	add	r2, r3
 80112bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80112be:	68db      	ldr	r3, [r3, #12]
 80112c0:	685b      	ldr	r3, [r3, #4]
 80112c2:	429a      	cmp	r2, r3
 80112c4:	d006      	beq.n	80112d4 <tcp_receive+0x994>
 80112c6:	4b62      	ldr	r3, [pc, #392]	@ (8011450 <tcp_receive+0xb10>)
 80112c8:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 80112cc:	4961      	ldr	r1, [pc, #388]	@ (8011454 <tcp_receive+0xb14>)
 80112ce:	4862      	ldr	r0, [pc, #392]	@ (8011458 <tcp_receive+0xb18>)
 80112d0:	f005 fcae 	bl	8016c30 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80112d8:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80112da:	4b5a      	ldr	r3, [pc, #360]	@ (8011444 <tcp_receive+0xb04>)
 80112dc:	881b      	ldrh	r3, [r3, #0]
 80112de:	461a      	mov	r2, r3
 80112e0:	4b59      	ldr	r3, [pc, #356]	@ (8011448 <tcp_receive+0xb08>)
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	441a      	add	r2, r3
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80112ee:	4b55      	ldr	r3, [pc, #340]	@ (8011444 <tcp_receive+0xb04>)
 80112f0:	881b      	ldrh	r3, [r3, #0]
 80112f2:	429a      	cmp	r2, r3
 80112f4:	d206      	bcs.n	8011304 <tcp_receive+0x9c4>
 80112f6:	4b56      	ldr	r3, [pc, #344]	@ (8011450 <tcp_receive+0xb10>)
 80112f8:	f240 6207 	movw	r2, #1543	@ 0x607
 80112fc:	4957      	ldr	r1, [pc, #348]	@ (801145c <tcp_receive+0xb1c>)
 80112fe:	4856      	ldr	r0, [pc, #344]	@ (8011458 <tcp_receive+0xb18>)
 8011300:	f005 fc96 	bl	8016c30 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011308:	4b4e      	ldr	r3, [pc, #312]	@ (8011444 <tcp_receive+0xb04>)
 801130a:	881b      	ldrh	r3, [r3, #0]
 801130c:	1ad3      	subs	r3, r2, r3
 801130e:	b29a      	uxth	r2, r3
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011314:	6878      	ldr	r0, [r7, #4]
 8011316:	f7fc feb1 	bl	800e07c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801131a:	4b4c      	ldr	r3, [pc, #304]	@ (801144c <tcp_receive+0xb0c>)
 801131c:	685b      	ldr	r3, [r3, #4]
 801131e:	891b      	ldrh	r3, [r3, #8]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d006      	beq.n	8011332 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8011324:	4b49      	ldr	r3, [pc, #292]	@ (801144c <tcp_receive+0xb0c>)
 8011326:	685b      	ldr	r3, [r3, #4]
 8011328:	4a4d      	ldr	r2, [pc, #308]	@ (8011460 <tcp_receive+0xb20>)
 801132a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801132c:	4b47      	ldr	r3, [pc, #284]	@ (801144c <tcp_receive+0xb0c>)
 801132e:	2200      	movs	r2, #0
 8011330:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011332:	4b46      	ldr	r3, [pc, #280]	@ (801144c <tcp_receive+0xb0c>)
 8011334:	68db      	ldr	r3, [r3, #12]
 8011336:	899b      	ldrh	r3, [r3, #12]
 8011338:	b29b      	uxth	r3, r3
 801133a:	4618      	mov	r0, r3
 801133c:	f7fa fa96 	bl	800b86c <lwip_htons>
 8011340:	4603      	mov	r3, r0
 8011342:	b2db      	uxtb	r3, r3
 8011344:	f003 0301 	and.w	r3, r3, #1
 8011348:	2b00      	cmp	r3, #0
 801134a:	f000 80b8 	beq.w	80114be <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801134e:	4b45      	ldr	r3, [pc, #276]	@ (8011464 <tcp_receive+0xb24>)
 8011350:	781b      	ldrb	r3, [r3, #0]
 8011352:	f043 0320 	orr.w	r3, r3, #32
 8011356:	b2da      	uxtb	r2, r3
 8011358:	4b42      	ldr	r3, [pc, #264]	@ (8011464 <tcp_receive+0xb24>)
 801135a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801135c:	e0af      	b.n	80114be <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011362:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011368:	68db      	ldr	r3, [r3, #12]
 801136a:	685b      	ldr	r3, [r3, #4]
 801136c:	4a36      	ldr	r2, [pc, #216]	@ (8011448 <tcp_receive+0xb08>)
 801136e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011370:	68bb      	ldr	r3, [r7, #8]
 8011372:	891b      	ldrh	r3, [r3, #8]
 8011374:	461c      	mov	r4, r3
 8011376:	68bb      	ldr	r3, [r7, #8]
 8011378:	68db      	ldr	r3, [r3, #12]
 801137a:	899b      	ldrh	r3, [r3, #12]
 801137c:	b29b      	uxth	r3, r3
 801137e:	4618      	mov	r0, r3
 8011380:	f7fa fa74 	bl	800b86c <lwip_htons>
 8011384:	4603      	mov	r3, r0
 8011386:	b2db      	uxtb	r3, r3
 8011388:	f003 0303 	and.w	r3, r3, #3
 801138c:	2b00      	cmp	r3, #0
 801138e:	d001      	beq.n	8011394 <tcp_receive+0xa54>
 8011390:	2301      	movs	r3, #1
 8011392:	e000      	b.n	8011396 <tcp_receive+0xa56>
 8011394:	2300      	movs	r3, #0
 8011396:	191a      	adds	r2, r3, r4
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801139c:	441a      	add	r2, r3
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80113a6:	461c      	mov	r4, r3
 80113a8:	68bb      	ldr	r3, [r7, #8]
 80113aa:	891b      	ldrh	r3, [r3, #8]
 80113ac:	461d      	mov	r5, r3
 80113ae:	68bb      	ldr	r3, [r7, #8]
 80113b0:	68db      	ldr	r3, [r3, #12]
 80113b2:	899b      	ldrh	r3, [r3, #12]
 80113b4:	b29b      	uxth	r3, r3
 80113b6:	4618      	mov	r0, r3
 80113b8:	f7fa fa58 	bl	800b86c <lwip_htons>
 80113bc:	4603      	mov	r3, r0
 80113be:	b2db      	uxtb	r3, r3
 80113c0:	f003 0303 	and.w	r3, r3, #3
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d001      	beq.n	80113cc <tcp_receive+0xa8c>
 80113c8:	2301      	movs	r3, #1
 80113ca:	e000      	b.n	80113ce <tcp_receive+0xa8e>
 80113cc:	2300      	movs	r3, #0
 80113ce:	442b      	add	r3, r5
 80113d0:	429c      	cmp	r4, r3
 80113d2:	d206      	bcs.n	80113e2 <tcp_receive+0xaa2>
 80113d4:	4b1e      	ldr	r3, [pc, #120]	@ (8011450 <tcp_receive+0xb10>)
 80113d6:	f240 622b 	movw	r2, #1579	@ 0x62b
 80113da:	4923      	ldr	r1, [pc, #140]	@ (8011468 <tcp_receive+0xb28>)
 80113dc:	481e      	ldr	r0, [pc, #120]	@ (8011458 <tcp_receive+0xb18>)
 80113de:	f005 fc27 	bl	8016c30 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80113e2:	68bb      	ldr	r3, [r7, #8]
 80113e4:	891b      	ldrh	r3, [r3, #8]
 80113e6:	461c      	mov	r4, r3
 80113e8:	68bb      	ldr	r3, [r7, #8]
 80113ea:	68db      	ldr	r3, [r3, #12]
 80113ec:	899b      	ldrh	r3, [r3, #12]
 80113ee:	b29b      	uxth	r3, r3
 80113f0:	4618      	mov	r0, r3
 80113f2:	f7fa fa3b 	bl	800b86c <lwip_htons>
 80113f6:	4603      	mov	r3, r0
 80113f8:	b2db      	uxtb	r3, r3
 80113fa:	f003 0303 	and.w	r3, r3, #3
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d001      	beq.n	8011406 <tcp_receive+0xac6>
 8011402:	2301      	movs	r3, #1
 8011404:	e000      	b.n	8011408 <tcp_receive+0xac8>
 8011406:	2300      	movs	r3, #0
 8011408:	1919      	adds	r1, r3, r4
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801140e:	b28b      	uxth	r3, r1
 8011410:	1ad3      	subs	r3, r2, r3
 8011412:	b29a      	uxth	r2, r3
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011418:	6878      	ldr	r0, [r7, #4]
 801141a:	f7fc fe2f 	bl	800e07c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801141e:	68bb      	ldr	r3, [r7, #8]
 8011420:	685b      	ldr	r3, [r3, #4]
 8011422:	891b      	ldrh	r3, [r3, #8]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d028      	beq.n	801147a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011428:	4b0d      	ldr	r3, [pc, #52]	@ (8011460 <tcp_receive+0xb20>)
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	2b00      	cmp	r3, #0
 801142e:	d01d      	beq.n	801146c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8011430:	4b0b      	ldr	r3, [pc, #44]	@ (8011460 <tcp_receive+0xb20>)
 8011432:	681a      	ldr	r2, [r3, #0]
 8011434:	68bb      	ldr	r3, [r7, #8]
 8011436:	685b      	ldr	r3, [r3, #4]
 8011438:	4619      	mov	r1, r3
 801143a:	4610      	mov	r0, r2
 801143c:	f7fb ff8e 	bl	800d35c <pbuf_cat>
 8011440:	e018      	b.n	8011474 <tcp_receive+0xb34>
 8011442:	bf00      	nop
 8011444:	24007f46 	.word	0x24007f46
 8011448:	24007f3c 	.word	0x24007f3c
 801144c:	24007f1c 	.word	0x24007f1c
 8011450:	080198d0 	.word	0x080198d0
 8011454:	08019cb0 	.word	0x08019cb0
 8011458:	0801991c 	.word	0x0801991c
 801145c:	08019cec 	.word	0x08019cec
 8011460:	24007f4c 	.word	0x24007f4c
 8011464:	24007f49 	.word	0x24007f49
 8011468:	08019d0c 	.word	0x08019d0c
            } else {
              recv_data = cseg->p;
 801146c:	68bb      	ldr	r3, [r7, #8]
 801146e:	685b      	ldr	r3, [r3, #4]
 8011470:	4a70      	ldr	r2, [pc, #448]	@ (8011634 <tcp_receive+0xcf4>)
 8011472:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011474:	68bb      	ldr	r3, [r7, #8]
 8011476:	2200      	movs	r2, #0
 8011478:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801147a:	68bb      	ldr	r3, [r7, #8]
 801147c:	68db      	ldr	r3, [r3, #12]
 801147e:	899b      	ldrh	r3, [r3, #12]
 8011480:	b29b      	uxth	r3, r3
 8011482:	4618      	mov	r0, r3
 8011484:	f7fa f9f2 	bl	800b86c <lwip_htons>
 8011488:	4603      	mov	r3, r0
 801148a:	b2db      	uxtb	r3, r3
 801148c:	f003 0301 	and.w	r3, r3, #1
 8011490:	2b00      	cmp	r3, #0
 8011492:	d00d      	beq.n	80114b0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011494:	4b68      	ldr	r3, [pc, #416]	@ (8011638 <tcp_receive+0xcf8>)
 8011496:	781b      	ldrb	r3, [r3, #0]
 8011498:	f043 0320 	orr.w	r3, r3, #32
 801149c:	b2da      	uxtb	r2, r3
 801149e:	4b66      	ldr	r3, [pc, #408]	@ (8011638 <tcp_receive+0xcf8>)
 80114a0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	7d1b      	ldrb	r3, [r3, #20]
 80114a6:	2b04      	cmp	r3, #4
 80114a8:	d102      	bne.n	80114b0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	2207      	movs	r2, #7
 80114ae:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80114b0:	68bb      	ldr	r3, [r7, #8]
 80114b2:	681a      	ldr	r2, [r3, #0]
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 80114b8:	68b8      	ldr	r0, [r7, #8]
 80114ba:	f7fd fb06 	bl	800eaca <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d008      	beq.n	80114d8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80114ca:	68db      	ldr	r3, [r3, #12]
 80114cc:	685a      	ldr	r2, [r3, #4]
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 80114d2:	429a      	cmp	r2, r3
 80114d4:	f43f af43 	beq.w	801135e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	8b5b      	ldrh	r3, [r3, #26]
 80114dc:	f003 0301 	and.w	r3, r3, #1
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d00e      	beq.n	8011502 <tcp_receive+0xbc2>
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	8b5b      	ldrh	r3, [r3, #26]
 80114e8:	f023 0301 	bic.w	r3, r3, #1
 80114ec:	b29a      	uxth	r2, r3
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	835a      	strh	r2, [r3, #26]
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	8b5b      	ldrh	r3, [r3, #26]
 80114f6:	f043 0302 	orr.w	r3, r3, #2
 80114fa:	b29a      	uxth	r2, r3
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011500:	e187      	b.n	8011812 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	8b5b      	ldrh	r3, [r3, #26]
 8011506:	f043 0301 	orr.w	r3, r3, #1
 801150a:	b29a      	uxth	r2, r3
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011510:	e17f      	b.n	8011812 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011516:	2b00      	cmp	r3, #0
 8011518:	d106      	bne.n	8011528 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801151a:	4848      	ldr	r0, [pc, #288]	@ (801163c <tcp_receive+0xcfc>)
 801151c:	f7fd faee 	bl	800eafc <tcp_seg_copy>
 8011520:	4602      	mov	r2, r0
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	675a      	str	r2, [r3, #116]	@ 0x74
 8011526:	e16c      	b.n	8011802 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011528:	2300      	movs	r3, #0
 801152a:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011530:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011532:	e156      	b.n	80117e2 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8011534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011536:	68db      	ldr	r3, [r3, #12]
 8011538:	685a      	ldr	r2, [r3, #4]
 801153a:	4b41      	ldr	r3, [pc, #260]	@ (8011640 <tcp_receive+0xd00>)
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	429a      	cmp	r2, r3
 8011540:	d11d      	bne.n	801157e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011542:	4b3e      	ldr	r3, [pc, #248]	@ (801163c <tcp_receive+0xcfc>)
 8011544:	891a      	ldrh	r2, [r3, #8]
 8011546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011548:	891b      	ldrh	r3, [r3, #8]
 801154a:	429a      	cmp	r2, r3
 801154c:	f240 814e 	bls.w	80117ec <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011550:	483a      	ldr	r0, [pc, #232]	@ (801163c <tcp_receive+0xcfc>)
 8011552:	f7fd fad3 	bl	800eafc <tcp_seg_copy>
 8011556:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011558:	697b      	ldr	r3, [r7, #20]
 801155a:	2b00      	cmp	r3, #0
 801155c:	f000 8148 	beq.w	80117f0 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8011560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011562:	2b00      	cmp	r3, #0
 8011564:	d003      	beq.n	801156e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8011566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011568:	697a      	ldr	r2, [r7, #20]
 801156a:	601a      	str	r2, [r3, #0]
 801156c:	e002      	b.n	8011574 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	697a      	ldr	r2, [r7, #20]
 8011572:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011574:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011576:	6978      	ldr	r0, [r7, #20]
 8011578:	f7ff f8de 	bl	8010738 <tcp_oos_insert_segment>
                }
                break;
 801157c:	e138      	b.n	80117f0 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801157e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011580:	2b00      	cmp	r3, #0
 8011582:	d117      	bne.n	80115b4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011584:	4b2e      	ldr	r3, [pc, #184]	@ (8011640 <tcp_receive+0xd00>)
 8011586:	681a      	ldr	r2, [r3, #0]
 8011588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801158a:	68db      	ldr	r3, [r3, #12]
 801158c:	685b      	ldr	r3, [r3, #4]
 801158e:	1ad3      	subs	r3, r2, r3
 8011590:	2b00      	cmp	r3, #0
 8011592:	da57      	bge.n	8011644 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011594:	4829      	ldr	r0, [pc, #164]	@ (801163c <tcp_receive+0xcfc>)
 8011596:	f7fd fab1 	bl	800eafc <tcp_seg_copy>
 801159a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801159c:	69bb      	ldr	r3, [r7, #24]
 801159e:	2b00      	cmp	r3, #0
 80115a0:	f000 8128 	beq.w	80117f4 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	69ba      	ldr	r2, [r7, #24]
 80115a8:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 80115aa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80115ac:	69b8      	ldr	r0, [r7, #24]
 80115ae:	f7ff f8c3 	bl	8010738 <tcp_oos_insert_segment>
                  }
                  break;
 80115b2:	e11f      	b.n	80117f4 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80115b4:	4b22      	ldr	r3, [pc, #136]	@ (8011640 <tcp_receive+0xd00>)
 80115b6:	681a      	ldr	r2, [r3, #0]
 80115b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80115ba:	68db      	ldr	r3, [r3, #12]
 80115bc:	685b      	ldr	r3, [r3, #4]
 80115be:	1ad3      	subs	r3, r2, r3
 80115c0:	3b01      	subs	r3, #1
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	db3e      	blt.n	8011644 <tcp_receive+0xd04>
 80115c6:	4b1e      	ldr	r3, [pc, #120]	@ (8011640 <tcp_receive+0xd00>)
 80115c8:	681a      	ldr	r2, [r3, #0]
 80115ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115cc:	68db      	ldr	r3, [r3, #12]
 80115ce:	685b      	ldr	r3, [r3, #4]
 80115d0:	1ad3      	subs	r3, r2, r3
 80115d2:	3301      	adds	r3, #1
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	dc35      	bgt.n	8011644 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80115d8:	4818      	ldr	r0, [pc, #96]	@ (801163c <tcp_receive+0xcfc>)
 80115da:	f7fd fa8f 	bl	800eafc <tcp_seg_copy>
 80115de:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80115e0:	69fb      	ldr	r3, [r7, #28]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	f000 8108 	beq.w	80117f8 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80115e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80115ea:	68db      	ldr	r3, [r3, #12]
 80115ec:	685b      	ldr	r3, [r3, #4]
 80115ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80115f0:	8912      	ldrh	r2, [r2, #8]
 80115f2:	441a      	add	r2, r3
 80115f4:	4b12      	ldr	r3, [pc, #72]	@ (8011640 <tcp_receive+0xd00>)
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	1ad3      	subs	r3, r2, r3
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	dd12      	ble.n	8011624 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80115fe:	4b10      	ldr	r3, [pc, #64]	@ (8011640 <tcp_receive+0xd00>)
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	b29a      	uxth	r2, r3
 8011604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011606:	68db      	ldr	r3, [r3, #12]
 8011608:	685b      	ldr	r3, [r3, #4]
 801160a:	b29b      	uxth	r3, r3
 801160c:	1ad3      	subs	r3, r2, r3
 801160e:	b29a      	uxth	r2, r3
 8011610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011612:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011616:	685a      	ldr	r2, [r3, #4]
 8011618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801161a:	891b      	ldrh	r3, [r3, #8]
 801161c:	4619      	mov	r1, r3
 801161e:	4610      	mov	r0, r2
 8011620:	f7fb fc48 	bl	800ceb4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011626:	69fa      	ldr	r2, [r7, #28]
 8011628:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801162a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801162c:	69f8      	ldr	r0, [r7, #28]
 801162e:	f7ff f883 	bl	8010738 <tcp_oos_insert_segment>
                  }
                  break;
 8011632:	e0e1      	b.n	80117f8 <tcp_receive+0xeb8>
 8011634:	24007f4c 	.word	0x24007f4c
 8011638:	24007f49 	.word	0x24007f49
 801163c:	24007f1c 	.word	0x24007f1c
 8011640:	24007f3c 	.word	0x24007f3c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011646:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	2b00      	cmp	r3, #0
 801164e:	f040 80c5 	bne.w	80117dc <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011652:	4b7f      	ldr	r3, [pc, #508]	@ (8011850 <tcp_receive+0xf10>)
 8011654:	681a      	ldr	r2, [r3, #0]
 8011656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011658:	68db      	ldr	r3, [r3, #12]
 801165a:	685b      	ldr	r3, [r3, #4]
 801165c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801165e:	2b00      	cmp	r3, #0
 8011660:	f340 80bc 	ble.w	80117dc <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011666:	68db      	ldr	r3, [r3, #12]
 8011668:	899b      	ldrh	r3, [r3, #12]
 801166a:	b29b      	uxth	r3, r3
 801166c:	4618      	mov	r0, r3
 801166e:	f7fa f8fd 	bl	800b86c <lwip_htons>
 8011672:	4603      	mov	r3, r0
 8011674:	b2db      	uxtb	r3, r3
 8011676:	f003 0301 	and.w	r3, r3, #1
 801167a:	2b00      	cmp	r3, #0
 801167c:	f040 80be 	bne.w	80117fc <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011680:	4874      	ldr	r0, [pc, #464]	@ (8011854 <tcp_receive+0xf14>)
 8011682:	f7fd fa3b 	bl	800eafc <tcp_seg_copy>
 8011686:	4602      	mov	r2, r0
 8011688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801168a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801168c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	2b00      	cmp	r3, #0
 8011692:	f000 80b5 	beq.w	8011800 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011698:	68db      	ldr	r3, [r3, #12]
 801169a:	685b      	ldr	r3, [r3, #4]
 801169c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801169e:	8912      	ldrh	r2, [r2, #8]
 80116a0:	441a      	add	r2, r3
 80116a2:	4b6b      	ldr	r3, [pc, #428]	@ (8011850 <tcp_receive+0xf10>)
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	1ad3      	subs	r3, r2, r3
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	dd12      	ble.n	80116d2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80116ac:	4b68      	ldr	r3, [pc, #416]	@ (8011850 <tcp_receive+0xf10>)
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	b29a      	uxth	r2, r3
 80116b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116b4:	68db      	ldr	r3, [r3, #12]
 80116b6:	685b      	ldr	r3, [r3, #4]
 80116b8:	b29b      	uxth	r3, r3
 80116ba:	1ad3      	subs	r3, r2, r3
 80116bc:	b29a      	uxth	r2, r3
 80116be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116c0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80116c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116c4:	685a      	ldr	r2, [r3, #4]
 80116c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116c8:	891b      	ldrh	r3, [r3, #8]
 80116ca:	4619      	mov	r1, r3
 80116cc:	4610      	mov	r0, r2
 80116ce:	f7fb fbf1 	bl	800ceb4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80116d2:	4b61      	ldr	r3, [pc, #388]	@ (8011858 <tcp_receive+0xf18>)
 80116d4:	881b      	ldrh	r3, [r3, #0]
 80116d6:	461a      	mov	r2, r3
 80116d8:	4b5d      	ldr	r3, [pc, #372]	@ (8011850 <tcp_receive+0xf10>)
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	441a      	add	r2, r3
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116e2:	6879      	ldr	r1, [r7, #4]
 80116e4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80116e6:	440b      	add	r3, r1
 80116e8:	1ad3      	subs	r3, r2, r3
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	f340 8088 	ble.w	8011800 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80116f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	68db      	ldr	r3, [r3, #12]
 80116f6:	899b      	ldrh	r3, [r3, #12]
 80116f8:	b29b      	uxth	r3, r3
 80116fa:	4618      	mov	r0, r3
 80116fc:	f7fa f8b6 	bl	800b86c <lwip_htons>
 8011700:	4603      	mov	r3, r0
 8011702:	b2db      	uxtb	r3, r3
 8011704:	f003 0301 	and.w	r3, r3, #1
 8011708:	2b00      	cmp	r3, #0
 801170a:	d021      	beq.n	8011750 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801170c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	68db      	ldr	r3, [r3, #12]
 8011712:	899b      	ldrh	r3, [r3, #12]
 8011714:	b29b      	uxth	r3, r3
 8011716:	b21b      	sxth	r3, r3
 8011718:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801171c:	b21c      	sxth	r4, r3
 801171e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	68db      	ldr	r3, [r3, #12]
 8011724:	899b      	ldrh	r3, [r3, #12]
 8011726:	b29b      	uxth	r3, r3
 8011728:	4618      	mov	r0, r3
 801172a:	f7fa f89f 	bl	800b86c <lwip_htons>
 801172e:	4603      	mov	r3, r0
 8011730:	b2db      	uxtb	r3, r3
 8011732:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8011736:	b29b      	uxth	r3, r3
 8011738:	4618      	mov	r0, r3
 801173a:	f7fa f897 	bl	800b86c <lwip_htons>
 801173e:	4603      	mov	r3, r0
 8011740:	b21b      	sxth	r3, r3
 8011742:	4323      	orrs	r3, r4
 8011744:	b21a      	sxth	r2, r3
 8011746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	68db      	ldr	r3, [r3, #12]
 801174c:	b292      	uxth	r2, r2
 801174e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011754:	b29a      	uxth	r2, r3
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801175a:	4413      	add	r3, r2
 801175c:	b299      	uxth	r1, r3
 801175e:	4b3c      	ldr	r3, [pc, #240]	@ (8011850 <tcp_receive+0xf10>)
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	b29a      	uxth	r2, r3
 8011764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	1a8a      	subs	r2, r1, r2
 801176a:	b292      	uxth	r2, r2
 801176c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801176e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	685a      	ldr	r2, [r3, #4]
 8011774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	891b      	ldrh	r3, [r3, #8]
 801177a:	4619      	mov	r1, r3
 801177c:	4610      	mov	r0, r2
 801177e:	f7fb fb99 	bl	800ceb4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	891c      	ldrh	r4, [r3, #8]
 8011788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	68db      	ldr	r3, [r3, #12]
 801178e:	899b      	ldrh	r3, [r3, #12]
 8011790:	b29b      	uxth	r3, r3
 8011792:	4618      	mov	r0, r3
 8011794:	f7fa f86a 	bl	800b86c <lwip_htons>
 8011798:	4603      	mov	r3, r0
 801179a:	b2db      	uxtb	r3, r3
 801179c:	f003 0303 	and.w	r3, r3, #3
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d001      	beq.n	80117a8 <tcp_receive+0xe68>
 80117a4:	2301      	movs	r3, #1
 80117a6:	e000      	b.n	80117aa <tcp_receive+0xe6a>
 80117a8:	2300      	movs	r3, #0
 80117aa:	4423      	add	r3, r4
 80117ac:	b29a      	uxth	r2, r3
 80117ae:	4b2a      	ldr	r3, [pc, #168]	@ (8011858 <tcp_receive+0xf18>)
 80117b0:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80117b2:	4b29      	ldr	r3, [pc, #164]	@ (8011858 <tcp_receive+0xf18>)
 80117b4:	881b      	ldrh	r3, [r3, #0]
 80117b6:	461a      	mov	r2, r3
 80117b8:	4b25      	ldr	r3, [pc, #148]	@ (8011850 <tcp_receive+0xf10>)
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	441a      	add	r2, r3
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117c2:	6879      	ldr	r1, [r7, #4]
 80117c4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80117c6:	440b      	add	r3, r1
 80117c8:	429a      	cmp	r2, r3
 80117ca:	d019      	beq.n	8011800 <tcp_receive+0xec0>
 80117cc:	4b23      	ldr	r3, [pc, #140]	@ (801185c <tcp_receive+0xf1c>)
 80117ce:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80117d2:	4923      	ldr	r1, [pc, #140]	@ (8011860 <tcp_receive+0xf20>)
 80117d4:	4823      	ldr	r0, [pc, #140]	@ (8011864 <tcp_receive+0xf24>)
 80117d6:	f005 fa2b 	bl	8016c30 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80117da:	e011      	b.n	8011800 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80117dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80117e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	f47f aea5 	bne.w	8011534 <tcp_receive+0xbf4>
 80117ea:	e00a      	b.n	8011802 <tcp_receive+0xec2>
                break;
 80117ec:	bf00      	nop
 80117ee:	e008      	b.n	8011802 <tcp_receive+0xec2>
                break;
 80117f0:	bf00      	nop
 80117f2:	e006      	b.n	8011802 <tcp_receive+0xec2>
                  break;
 80117f4:	bf00      	nop
 80117f6:	e004      	b.n	8011802 <tcp_receive+0xec2>
                  break;
 80117f8:	bf00      	nop
 80117fa:	e002      	b.n	8011802 <tcp_receive+0xec2>
                  break;
 80117fc:	bf00      	nop
 80117fe:	e000      	b.n	8011802 <tcp_receive+0xec2>
                break;
 8011800:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011802:	6878      	ldr	r0, [r7, #4]
 8011804:	f001 fe88 	bl	8013518 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011808:	e003      	b.n	8011812 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801180a:	6878      	ldr	r0, [r7, #4]
 801180c:	f001 fe84 	bl	8013518 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011810:	e01a      	b.n	8011848 <tcp_receive+0xf08>
 8011812:	e019      	b.n	8011848 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011814:	4b0e      	ldr	r3, [pc, #56]	@ (8011850 <tcp_receive+0xf10>)
 8011816:	681a      	ldr	r2, [r3, #0]
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801181c:	1ad3      	subs	r3, r2, r3
 801181e:	2b00      	cmp	r3, #0
 8011820:	db0a      	blt.n	8011838 <tcp_receive+0xef8>
 8011822:	4b0b      	ldr	r3, [pc, #44]	@ (8011850 <tcp_receive+0xf10>)
 8011824:	681a      	ldr	r2, [r3, #0]
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801182a:	6879      	ldr	r1, [r7, #4]
 801182c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801182e:	440b      	add	r3, r1
 8011830:	1ad3      	subs	r3, r2, r3
 8011832:	3301      	adds	r3, #1
 8011834:	2b00      	cmp	r3, #0
 8011836:	dd07      	ble.n	8011848 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	8b5b      	ldrh	r3, [r3, #26]
 801183c:	f043 0302 	orr.w	r3, r3, #2
 8011840:	b29a      	uxth	r2, r3
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011846:	e7ff      	b.n	8011848 <tcp_receive+0xf08>
 8011848:	bf00      	nop
 801184a:	3750      	adds	r7, #80	@ 0x50
 801184c:	46bd      	mov	sp, r7
 801184e:	bdb0      	pop	{r4, r5, r7, pc}
 8011850:	24007f3c 	.word	0x24007f3c
 8011854:	24007f1c 	.word	0x24007f1c
 8011858:	24007f46 	.word	0x24007f46
 801185c:	080198d0 	.word	0x080198d0
 8011860:	08019c78 	.word	0x08019c78
 8011864:	0801991c 	.word	0x0801991c

08011868 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011868:	b480      	push	{r7}
 801186a:	b083      	sub	sp, #12
 801186c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801186e:	4b15      	ldr	r3, [pc, #84]	@ (80118c4 <tcp_get_next_optbyte+0x5c>)
 8011870:	881b      	ldrh	r3, [r3, #0]
 8011872:	1c5a      	adds	r2, r3, #1
 8011874:	b291      	uxth	r1, r2
 8011876:	4a13      	ldr	r2, [pc, #76]	@ (80118c4 <tcp_get_next_optbyte+0x5c>)
 8011878:	8011      	strh	r1, [r2, #0]
 801187a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801187c:	4b12      	ldr	r3, [pc, #72]	@ (80118c8 <tcp_get_next_optbyte+0x60>)
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	2b00      	cmp	r3, #0
 8011882:	d004      	beq.n	801188e <tcp_get_next_optbyte+0x26>
 8011884:	4b11      	ldr	r3, [pc, #68]	@ (80118cc <tcp_get_next_optbyte+0x64>)
 8011886:	881b      	ldrh	r3, [r3, #0]
 8011888:	88fa      	ldrh	r2, [r7, #6]
 801188a:	429a      	cmp	r2, r3
 801188c:	d208      	bcs.n	80118a0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801188e:	4b10      	ldr	r3, [pc, #64]	@ (80118d0 <tcp_get_next_optbyte+0x68>)
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	3314      	adds	r3, #20
 8011894:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011896:	88fb      	ldrh	r3, [r7, #6]
 8011898:	683a      	ldr	r2, [r7, #0]
 801189a:	4413      	add	r3, r2
 801189c:	781b      	ldrb	r3, [r3, #0]
 801189e:	e00b      	b.n	80118b8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80118a0:	88fb      	ldrh	r3, [r7, #6]
 80118a2:	b2da      	uxtb	r2, r3
 80118a4:	4b09      	ldr	r3, [pc, #36]	@ (80118cc <tcp_get_next_optbyte+0x64>)
 80118a6:	881b      	ldrh	r3, [r3, #0]
 80118a8:	b2db      	uxtb	r3, r3
 80118aa:	1ad3      	subs	r3, r2, r3
 80118ac:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80118ae:	4b06      	ldr	r3, [pc, #24]	@ (80118c8 <tcp_get_next_optbyte+0x60>)
 80118b0:	681a      	ldr	r2, [r3, #0]
 80118b2:	797b      	ldrb	r3, [r7, #5]
 80118b4:	4413      	add	r3, r2
 80118b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80118b8:	4618      	mov	r0, r3
 80118ba:	370c      	adds	r7, #12
 80118bc:	46bd      	mov	sp, r7
 80118be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c2:	4770      	bx	lr
 80118c4:	24007f38 	.word	0x24007f38
 80118c8:	24007f34 	.word	0x24007f34
 80118cc:	24007f32 	.word	0x24007f32
 80118d0:	24007f2c 	.word	0x24007f2c

080118d4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b084      	sub	sp, #16
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d106      	bne.n	80118f0 <tcp_parseopt+0x1c>
 80118e2:	4b32      	ldr	r3, [pc, #200]	@ (80119ac <tcp_parseopt+0xd8>)
 80118e4:	f240 727d 	movw	r2, #1917	@ 0x77d
 80118e8:	4931      	ldr	r1, [pc, #196]	@ (80119b0 <tcp_parseopt+0xdc>)
 80118ea:	4832      	ldr	r0, [pc, #200]	@ (80119b4 <tcp_parseopt+0xe0>)
 80118ec:	f005 f9a0 	bl	8016c30 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80118f0:	4b31      	ldr	r3, [pc, #196]	@ (80119b8 <tcp_parseopt+0xe4>)
 80118f2:	881b      	ldrh	r3, [r3, #0]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d056      	beq.n	80119a6 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80118f8:	4b30      	ldr	r3, [pc, #192]	@ (80119bc <tcp_parseopt+0xe8>)
 80118fa:	2200      	movs	r2, #0
 80118fc:	801a      	strh	r2, [r3, #0]
 80118fe:	e046      	b.n	801198e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8011900:	f7ff ffb2 	bl	8011868 <tcp_get_next_optbyte>
 8011904:	4603      	mov	r3, r0
 8011906:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011908:	7bfb      	ldrb	r3, [r7, #15]
 801190a:	2b02      	cmp	r3, #2
 801190c:	d006      	beq.n	801191c <tcp_parseopt+0x48>
 801190e:	2b02      	cmp	r3, #2
 8011910:	dc2a      	bgt.n	8011968 <tcp_parseopt+0x94>
 8011912:	2b00      	cmp	r3, #0
 8011914:	d042      	beq.n	801199c <tcp_parseopt+0xc8>
 8011916:	2b01      	cmp	r3, #1
 8011918:	d038      	beq.n	801198c <tcp_parseopt+0xb8>
 801191a:	e025      	b.n	8011968 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801191c:	f7ff ffa4 	bl	8011868 <tcp_get_next_optbyte>
 8011920:	4603      	mov	r3, r0
 8011922:	2b04      	cmp	r3, #4
 8011924:	d13c      	bne.n	80119a0 <tcp_parseopt+0xcc>
 8011926:	4b25      	ldr	r3, [pc, #148]	@ (80119bc <tcp_parseopt+0xe8>)
 8011928:	881b      	ldrh	r3, [r3, #0]
 801192a:	3301      	adds	r3, #1
 801192c:	4a22      	ldr	r2, [pc, #136]	@ (80119b8 <tcp_parseopt+0xe4>)
 801192e:	8812      	ldrh	r2, [r2, #0]
 8011930:	4293      	cmp	r3, r2
 8011932:	da35      	bge.n	80119a0 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011934:	f7ff ff98 	bl	8011868 <tcp_get_next_optbyte>
 8011938:	4603      	mov	r3, r0
 801193a:	021b      	lsls	r3, r3, #8
 801193c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801193e:	f7ff ff93 	bl	8011868 <tcp_get_next_optbyte>
 8011942:	4603      	mov	r3, r0
 8011944:	461a      	mov	r2, r3
 8011946:	89bb      	ldrh	r3, [r7, #12]
 8011948:	4313      	orrs	r3, r2
 801194a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801194c:	89bb      	ldrh	r3, [r7, #12]
 801194e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8011952:	d804      	bhi.n	801195e <tcp_parseopt+0x8a>
 8011954:	89bb      	ldrh	r3, [r7, #12]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d001      	beq.n	801195e <tcp_parseopt+0x8a>
 801195a:	89ba      	ldrh	r2, [r7, #12]
 801195c:	e001      	b.n	8011962 <tcp_parseopt+0x8e>
 801195e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8011966:	e012      	b.n	801198e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011968:	f7ff ff7e 	bl	8011868 <tcp_get_next_optbyte>
 801196c:	4603      	mov	r3, r0
 801196e:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011970:	7afb      	ldrb	r3, [r7, #11]
 8011972:	2b01      	cmp	r3, #1
 8011974:	d916      	bls.n	80119a4 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011976:	7afb      	ldrb	r3, [r7, #11]
 8011978:	b29a      	uxth	r2, r3
 801197a:	4b10      	ldr	r3, [pc, #64]	@ (80119bc <tcp_parseopt+0xe8>)
 801197c:	881b      	ldrh	r3, [r3, #0]
 801197e:	4413      	add	r3, r2
 8011980:	b29b      	uxth	r3, r3
 8011982:	3b02      	subs	r3, #2
 8011984:	b29a      	uxth	r2, r3
 8011986:	4b0d      	ldr	r3, [pc, #52]	@ (80119bc <tcp_parseopt+0xe8>)
 8011988:	801a      	strh	r2, [r3, #0]
 801198a:	e000      	b.n	801198e <tcp_parseopt+0xba>
          break;
 801198c:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801198e:	4b0b      	ldr	r3, [pc, #44]	@ (80119bc <tcp_parseopt+0xe8>)
 8011990:	881a      	ldrh	r2, [r3, #0]
 8011992:	4b09      	ldr	r3, [pc, #36]	@ (80119b8 <tcp_parseopt+0xe4>)
 8011994:	881b      	ldrh	r3, [r3, #0]
 8011996:	429a      	cmp	r2, r3
 8011998:	d3b2      	bcc.n	8011900 <tcp_parseopt+0x2c>
 801199a:	e004      	b.n	80119a6 <tcp_parseopt+0xd2>
          return;
 801199c:	bf00      	nop
 801199e:	e002      	b.n	80119a6 <tcp_parseopt+0xd2>
            return;
 80119a0:	bf00      	nop
 80119a2:	e000      	b.n	80119a6 <tcp_parseopt+0xd2>
            return;
 80119a4:	bf00      	nop
      }
    }
  }
}
 80119a6:	3710      	adds	r7, #16
 80119a8:	46bd      	mov	sp, r7
 80119aa:	bd80      	pop	{r7, pc}
 80119ac:	080198d0 	.word	0x080198d0
 80119b0:	08019d34 	.word	0x08019d34
 80119b4:	0801991c 	.word	0x0801991c
 80119b8:	24007f30 	.word	0x24007f30
 80119bc:	24007f38 	.word	0x24007f38

080119c0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80119c0:	b480      	push	{r7}
 80119c2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80119c4:	4b05      	ldr	r3, [pc, #20]	@ (80119dc <tcp_trigger_input_pcb_close+0x1c>)
 80119c6:	781b      	ldrb	r3, [r3, #0]
 80119c8:	f043 0310 	orr.w	r3, r3, #16
 80119cc:	b2da      	uxtb	r2, r3
 80119ce:	4b03      	ldr	r3, [pc, #12]	@ (80119dc <tcp_trigger_input_pcb_close+0x1c>)
 80119d0:	701a      	strb	r2, [r3, #0]
}
 80119d2:	bf00      	nop
 80119d4:	46bd      	mov	sp, r7
 80119d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119da:	4770      	bx	lr
 80119dc:	24007f49 	.word	0x24007f49

080119e0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b084      	sub	sp, #16
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	60f8      	str	r0, [r7, #12]
 80119e8:	60b9      	str	r1, [r7, #8]
 80119ea:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d00a      	beq.n	8011a08 <tcp_route+0x28>
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	7a1b      	ldrb	r3, [r3, #8]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d006      	beq.n	8011a08 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	7a1b      	ldrb	r3, [r3, #8]
 80119fe:	4618      	mov	r0, r3
 8011a00:	f7fb f850 	bl	800caa4 <netif_get_by_index>
 8011a04:	4603      	mov	r3, r0
 8011a06:	e003      	b.n	8011a10 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011a08:	6878      	ldr	r0, [r7, #4]
 8011a0a:	f003 fc6f 	bl	80152ec <ip4_route>
 8011a0e:	4603      	mov	r3, r0
  }
}
 8011a10:	4618      	mov	r0, r3
 8011a12:	3710      	adds	r7, #16
 8011a14:	46bd      	mov	sp, r7
 8011a16:	bd80      	pop	{r7, pc}

08011a18 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011a18:	b590      	push	{r4, r7, lr}
 8011a1a:	b087      	sub	sp, #28
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	60f8      	str	r0, [r7, #12]
 8011a20:	60b9      	str	r1, [r7, #8]
 8011a22:	603b      	str	r3, [r7, #0]
 8011a24:	4613      	mov	r3, r2
 8011a26:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d105      	bne.n	8011a3a <tcp_create_segment+0x22>
 8011a2e:	4b43      	ldr	r3, [pc, #268]	@ (8011b3c <tcp_create_segment+0x124>)
 8011a30:	22a3      	movs	r2, #163	@ 0xa3
 8011a32:	4943      	ldr	r1, [pc, #268]	@ (8011b40 <tcp_create_segment+0x128>)
 8011a34:	4843      	ldr	r0, [pc, #268]	@ (8011b44 <tcp_create_segment+0x12c>)
 8011a36:	f005 f8fb 	bl	8016c30 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011a3a:	68bb      	ldr	r3, [r7, #8]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d105      	bne.n	8011a4c <tcp_create_segment+0x34>
 8011a40:	4b3e      	ldr	r3, [pc, #248]	@ (8011b3c <tcp_create_segment+0x124>)
 8011a42:	22a4      	movs	r2, #164	@ 0xa4
 8011a44:	4940      	ldr	r1, [pc, #256]	@ (8011b48 <tcp_create_segment+0x130>)
 8011a46:	483f      	ldr	r0, [pc, #252]	@ (8011b44 <tcp_create_segment+0x12c>)
 8011a48:	f005 f8f2 	bl	8016c30 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011a4c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011a50:	009b      	lsls	r3, r3, #2
 8011a52:	b2db      	uxtb	r3, r3
 8011a54:	f003 0304 	and.w	r3, r3, #4
 8011a58:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011a5a:	2003      	movs	r0, #3
 8011a5c:	f7fa fc96 	bl	800c38c <memp_malloc>
 8011a60:	6138      	str	r0, [r7, #16]
 8011a62:	693b      	ldr	r3, [r7, #16]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d104      	bne.n	8011a72 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011a68:	68b8      	ldr	r0, [r7, #8]
 8011a6a:	f7fb fba9 	bl	800d1c0 <pbuf_free>
    return NULL;
 8011a6e:	2300      	movs	r3, #0
 8011a70:	e060      	b.n	8011b34 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8011a72:	693b      	ldr	r3, [r7, #16]
 8011a74:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8011a78:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011a7a:	693b      	ldr	r3, [r7, #16]
 8011a7c:	2200      	movs	r2, #0
 8011a7e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011a80:	693b      	ldr	r3, [r7, #16]
 8011a82:	68ba      	ldr	r2, [r7, #8]
 8011a84:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011a86:	68bb      	ldr	r3, [r7, #8]
 8011a88:	891a      	ldrh	r2, [r3, #8]
 8011a8a:	7dfb      	ldrb	r3, [r7, #23]
 8011a8c:	b29b      	uxth	r3, r3
 8011a8e:	429a      	cmp	r2, r3
 8011a90:	d205      	bcs.n	8011a9e <tcp_create_segment+0x86>
 8011a92:	4b2a      	ldr	r3, [pc, #168]	@ (8011b3c <tcp_create_segment+0x124>)
 8011a94:	22b0      	movs	r2, #176	@ 0xb0
 8011a96:	492d      	ldr	r1, [pc, #180]	@ (8011b4c <tcp_create_segment+0x134>)
 8011a98:	482a      	ldr	r0, [pc, #168]	@ (8011b44 <tcp_create_segment+0x12c>)
 8011a9a:	f005 f8c9 	bl	8016c30 <iprintf>
  seg->len = p->tot_len - optlen;
 8011a9e:	68bb      	ldr	r3, [r7, #8]
 8011aa0:	891a      	ldrh	r2, [r3, #8]
 8011aa2:	7dfb      	ldrb	r3, [r7, #23]
 8011aa4:	b29b      	uxth	r3, r3
 8011aa6:	1ad3      	subs	r3, r2, r3
 8011aa8:	b29a      	uxth	r2, r3
 8011aaa:	693b      	ldr	r3, [r7, #16]
 8011aac:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011aae:	2114      	movs	r1, #20
 8011ab0:	68b8      	ldr	r0, [r7, #8]
 8011ab2:	f7fb faef 	bl	800d094 <pbuf_add_header>
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d004      	beq.n	8011ac6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011abc:	6938      	ldr	r0, [r7, #16]
 8011abe:	f7fd f804 	bl	800eaca <tcp_seg_free>
    return NULL;
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	e036      	b.n	8011b34 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011ac6:	693b      	ldr	r3, [r7, #16]
 8011ac8:	685b      	ldr	r3, [r3, #4]
 8011aca:	685a      	ldr	r2, [r3, #4]
 8011acc:	693b      	ldr	r3, [r7, #16]
 8011ace:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	8ada      	ldrh	r2, [r3, #22]
 8011ad4:	693b      	ldr	r3, [r7, #16]
 8011ad6:	68dc      	ldr	r4, [r3, #12]
 8011ad8:	4610      	mov	r0, r2
 8011ada:	f7f9 fec7 	bl	800b86c <lwip_htons>
 8011ade:	4603      	mov	r3, r0
 8011ae0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	8b1a      	ldrh	r2, [r3, #24]
 8011ae6:	693b      	ldr	r3, [r7, #16]
 8011ae8:	68dc      	ldr	r4, [r3, #12]
 8011aea:	4610      	mov	r0, r2
 8011aec:	f7f9 febe 	bl	800b86c <lwip_htons>
 8011af0:	4603      	mov	r3, r0
 8011af2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011af4:	693b      	ldr	r3, [r7, #16]
 8011af6:	68dc      	ldr	r4, [r3, #12]
 8011af8:	6838      	ldr	r0, [r7, #0]
 8011afa:	f7f9 fecc 	bl	800b896 <lwip_htonl>
 8011afe:	4603      	mov	r3, r0
 8011b00:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011b02:	7dfb      	ldrb	r3, [r7, #23]
 8011b04:	089b      	lsrs	r3, r3, #2
 8011b06:	b2db      	uxtb	r3, r3
 8011b08:	3305      	adds	r3, #5
 8011b0a:	b29b      	uxth	r3, r3
 8011b0c:	031b      	lsls	r3, r3, #12
 8011b0e:	b29a      	uxth	r2, r3
 8011b10:	79fb      	ldrb	r3, [r7, #7]
 8011b12:	b29b      	uxth	r3, r3
 8011b14:	4313      	orrs	r3, r2
 8011b16:	b29a      	uxth	r2, r3
 8011b18:	693b      	ldr	r3, [r7, #16]
 8011b1a:	68dc      	ldr	r4, [r3, #12]
 8011b1c:	4610      	mov	r0, r2
 8011b1e:	f7f9 fea5 	bl	800b86c <lwip_htons>
 8011b22:	4603      	mov	r3, r0
 8011b24:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011b26:	693b      	ldr	r3, [r7, #16]
 8011b28:	68db      	ldr	r3, [r3, #12]
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	749a      	strb	r2, [r3, #18]
 8011b2e:	2200      	movs	r2, #0
 8011b30:	74da      	strb	r2, [r3, #19]
  return seg;
 8011b32:	693b      	ldr	r3, [r7, #16]
}
 8011b34:	4618      	mov	r0, r3
 8011b36:	371c      	adds	r7, #28
 8011b38:	46bd      	mov	sp, r7
 8011b3a:	bd90      	pop	{r4, r7, pc}
 8011b3c:	08019d50 	.word	0x08019d50
 8011b40:	08019d84 	.word	0x08019d84
 8011b44:	08019da4 	.word	0x08019da4
 8011b48:	08019dcc 	.word	0x08019dcc
 8011b4c:	08019df0 	.word	0x08019df0

08011b50 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b086      	sub	sp, #24
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	607b      	str	r3, [r7, #4]
 8011b58:	4603      	mov	r3, r0
 8011b5a:	73fb      	strb	r3, [r7, #15]
 8011b5c:	460b      	mov	r3, r1
 8011b5e:	81bb      	strh	r3, [r7, #12]
 8011b60:	4613      	mov	r3, r2
 8011b62:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011b64:	89bb      	ldrh	r3, [r7, #12]
 8011b66:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d105      	bne.n	8011b7a <tcp_pbuf_prealloc+0x2a>
 8011b6e:	4b30      	ldr	r3, [pc, #192]	@ (8011c30 <tcp_pbuf_prealloc+0xe0>)
 8011b70:	22e8      	movs	r2, #232	@ 0xe8
 8011b72:	4930      	ldr	r1, [pc, #192]	@ (8011c34 <tcp_pbuf_prealloc+0xe4>)
 8011b74:	4830      	ldr	r0, [pc, #192]	@ (8011c38 <tcp_pbuf_prealloc+0xe8>)
 8011b76:	f005 f85b 	bl	8016c30 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8011b7a:	6a3b      	ldr	r3, [r7, #32]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d105      	bne.n	8011b8c <tcp_pbuf_prealloc+0x3c>
 8011b80:	4b2b      	ldr	r3, [pc, #172]	@ (8011c30 <tcp_pbuf_prealloc+0xe0>)
 8011b82:	22e9      	movs	r2, #233	@ 0xe9
 8011b84:	492d      	ldr	r1, [pc, #180]	@ (8011c3c <tcp_pbuf_prealloc+0xec>)
 8011b86:	482c      	ldr	r0, [pc, #176]	@ (8011c38 <tcp_pbuf_prealloc+0xe8>)
 8011b88:	f005 f852 	bl	8016c30 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8011b8c:	89ba      	ldrh	r2, [r7, #12]
 8011b8e:	897b      	ldrh	r3, [r7, #10]
 8011b90:	429a      	cmp	r2, r3
 8011b92:	d221      	bcs.n	8011bd8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011b94:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011b98:	f003 0302 	and.w	r3, r3, #2
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d111      	bne.n	8011bc4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011ba0:	6a3b      	ldr	r3, [r7, #32]
 8011ba2:	8b5b      	ldrh	r3, [r3, #26]
 8011ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d115      	bne.n	8011bd8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8011bac:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d007      	beq.n	8011bc4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011bb4:	6a3b      	ldr	r3, [r7, #32]
 8011bb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d103      	bne.n	8011bc4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8011bbc:	6a3b      	ldr	r3, [r7, #32]
 8011bbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d009      	beq.n	8011bd8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011bc4:	89bb      	ldrh	r3, [r7, #12]
 8011bc6:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8011bca:	f023 0203 	bic.w	r2, r3, #3
 8011bce:	897b      	ldrh	r3, [r7, #10]
 8011bd0:	4293      	cmp	r3, r2
 8011bd2:	bf28      	it	cs
 8011bd4:	4613      	movcs	r3, r2
 8011bd6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8011bd8:	8af9      	ldrh	r1, [r7, #22]
 8011bda:	7bfb      	ldrb	r3, [r7, #15]
 8011bdc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011be0:	4618      	mov	r0, r3
 8011be2:	f7fb f809 	bl	800cbf8 <pbuf_alloc>
 8011be6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011be8:	693b      	ldr	r3, [r7, #16]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d101      	bne.n	8011bf2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8011bee:	2300      	movs	r3, #0
 8011bf0:	e019      	b.n	8011c26 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8011bf2:	693b      	ldr	r3, [r7, #16]
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d006      	beq.n	8011c08 <tcp_pbuf_prealloc+0xb8>
 8011bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8011c30 <tcp_pbuf_prealloc+0xe0>)
 8011bfc:	f240 120b 	movw	r2, #267	@ 0x10b
 8011c00:	490f      	ldr	r1, [pc, #60]	@ (8011c40 <tcp_pbuf_prealloc+0xf0>)
 8011c02:	480d      	ldr	r0, [pc, #52]	@ (8011c38 <tcp_pbuf_prealloc+0xe8>)
 8011c04:	f005 f814 	bl	8016c30 <iprintf>
  *oversize = p->len - length;
 8011c08:	693b      	ldr	r3, [r7, #16]
 8011c0a:	895a      	ldrh	r2, [r3, #10]
 8011c0c:	89bb      	ldrh	r3, [r7, #12]
 8011c0e:	1ad3      	subs	r3, r2, r3
 8011c10:	b29a      	uxth	r2, r3
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011c16:	693b      	ldr	r3, [r7, #16]
 8011c18:	89ba      	ldrh	r2, [r7, #12]
 8011c1a:	811a      	strh	r2, [r3, #8]
 8011c1c:	693b      	ldr	r3, [r7, #16]
 8011c1e:	891a      	ldrh	r2, [r3, #8]
 8011c20:	693b      	ldr	r3, [r7, #16]
 8011c22:	815a      	strh	r2, [r3, #10]
  return p;
 8011c24:	693b      	ldr	r3, [r7, #16]
}
 8011c26:	4618      	mov	r0, r3
 8011c28:	3718      	adds	r7, #24
 8011c2a:	46bd      	mov	sp, r7
 8011c2c:	bd80      	pop	{r7, pc}
 8011c2e:	bf00      	nop
 8011c30:	08019d50 	.word	0x08019d50
 8011c34:	08019e08 	.word	0x08019e08
 8011c38:	08019da4 	.word	0x08019da4
 8011c3c:	08019e2c 	.word	0x08019e2c
 8011c40:	08019e4c 	.word	0x08019e4c

08011c44 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011c44:	b580      	push	{r7, lr}
 8011c46:	b082      	sub	sp, #8
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
 8011c4c:	460b      	mov	r3, r1
 8011c4e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d106      	bne.n	8011c64 <tcp_write_checks+0x20>
 8011c56:	4b33      	ldr	r3, [pc, #204]	@ (8011d24 <tcp_write_checks+0xe0>)
 8011c58:	f240 1233 	movw	r2, #307	@ 0x133
 8011c5c:	4932      	ldr	r1, [pc, #200]	@ (8011d28 <tcp_write_checks+0xe4>)
 8011c5e:	4833      	ldr	r0, [pc, #204]	@ (8011d2c <tcp_write_checks+0xe8>)
 8011c60:	f004 ffe6 	bl	8016c30 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	7d1b      	ldrb	r3, [r3, #20]
 8011c68:	2b04      	cmp	r3, #4
 8011c6a:	d00e      	beq.n	8011c8a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011c70:	2b07      	cmp	r3, #7
 8011c72:	d00a      	beq.n	8011c8a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011c78:	2b02      	cmp	r3, #2
 8011c7a:	d006      	beq.n	8011c8a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011c80:	2b03      	cmp	r3, #3
 8011c82:	d002      	beq.n	8011c8a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011c84:	f06f 030a 	mvn.w	r3, #10
 8011c88:	e048      	b.n	8011d1c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8011c8a:	887b      	ldrh	r3, [r7, #2]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d101      	bne.n	8011c94 <tcp_write_checks+0x50>
    return ERR_OK;
 8011c90:	2300      	movs	r3, #0
 8011c92:	e043      	b.n	8011d1c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011c9a:	887a      	ldrh	r2, [r7, #2]
 8011c9c:	429a      	cmp	r2, r3
 8011c9e:	d909      	bls.n	8011cb4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	8b5b      	ldrh	r3, [r3, #26]
 8011ca4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011ca8:	b29a      	uxth	r2, r3
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011cae:	f04f 33ff 	mov.w	r3, #4294967295
 8011cb2:	e033      	b.n	8011d1c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011cba:	2b08      	cmp	r3, #8
 8011cbc:	d909      	bls.n	8011cd2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	8b5b      	ldrh	r3, [r3, #26]
 8011cc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011cc6:	b29a      	uxth	r2, r3
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8011cd0:	e024      	b.n	8011d1c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d00f      	beq.n	8011cfc <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d11a      	bne.n	8011d1a <tcp_write_checks+0xd6>
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d116      	bne.n	8011d1a <tcp_write_checks+0xd6>
 8011cec:	4b0d      	ldr	r3, [pc, #52]	@ (8011d24 <tcp_write_checks+0xe0>)
 8011cee:	f240 1255 	movw	r2, #341	@ 0x155
 8011cf2:	490f      	ldr	r1, [pc, #60]	@ (8011d30 <tcp_write_checks+0xec>)
 8011cf4:	480d      	ldr	r0, [pc, #52]	@ (8011d2c <tcp_write_checks+0xe8>)
 8011cf6:	f004 ff9b 	bl	8016c30 <iprintf>
 8011cfa:	e00e      	b.n	8011d1a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d103      	bne.n	8011d0c <tcp_write_checks+0xc8>
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d006      	beq.n	8011d1a <tcp_write_checks+0xd6>
 8011d0c:	4b05      	ldr	r3, [pc, #20]	@ (8011d24 <tcp_write_checks+0xe0>)
 8011d0e:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8011d12:	4908      	ldr	r1, [pc, #32]	@ (8011d34 <tcp_write_checks+0xf0>)
 8011d14:	4805      	ldr	r0, [pc, #20]	@ (8011d2c <tcp_write_checks+0xe8>)
 8011d16:	f004 ff8b 	bl	8016c30 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8011d1a:	2300      	movs	r3, #0
}
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	3708      	adds	r7, #8
 8011d20:	46bd      	mov	sp, r7
 8011d22:	bd80      	pop	{r7, pc}
 8011d24:	08019d50 	.word	0x08019d50
 8011d28:	08019e60 	.word	0x08019e60
 8011d2c:	08019da4 	.word	0x08019da4
 8011d30:	08019e80 	.word	0x08019e80
 8011d34:	08019ebc 	.word	0x08019ebc

08011d38 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011d38:	b590      	push	{r4, r7, lr}
 8011d3a:	b09b      	sub	sp, #108	@ 0x6c
 8011d3c:	af04      	add	r7, sp, #16
 8011d3e:	60f8      	str	r0, [r7, #12]
 8011d40:	60b9      	str	r1, [r7, #8]
 8011d42:	4611      	mov	r1, r2
 8011d44:	461a      	mov	r2, r3
 8011d46:	460b      	mov	r3, r1
 8011d48:	80fb      	strh	r3, [r7, #6]
 8011d4a:	4613      	mov	r3, r2
 8011d4c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8011d4e:	2300      	movs	r3, #0
 8011d50:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011d52:	2300      	movs	r3, #0
 8011d54:	653b      	str	r3, [r7, #80]	@ 0x50
 8011d56:	2300      	movs	r3, #0
 8011d58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011d5e:	2300      	movs	r3, #0
 8011d60:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011d62:	2300      	movs	r3, #0
 8011d64:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8011d68:	2300      	movs	r3, #0
 8011d6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8011d6e:	2300      	movs	r3, #0
 8011d70:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011d72:	2300      	movs	r3, #0
 8011d74:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011d76:	2300      	movs	r3, #0
 8011d78:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d109      	bne.n	8011d94 <tcp_write+0x5c>
 8011d80:	4ba4      	ldr	r3, [pc, #656]	@ (8012014 <tcp_write+0x2dc>)
 8011d82:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8011d86:	49a4      	ldr	r1, [pc, #656]	@ (8012018 <tcp_write+0x2e0>)
 8011d88:	48a4      	ldr	r0, [pc, #656]	@ (801201c <tcp_write+0x2e4>)
 8011d8a:	f004 ff51 	bl	8016c30 <iprintf>
 8011d8e:	f06f 030f 	mvn.w	r3, #15
 8011d92:	e32a      	b.n	80123ea <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011d9a:	085b      	lsrs	r3, r3, #1
 8011d9c:	b29a      	uxth	r2, r3
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011da2:	4293      	cmp	r3, r2
 8011da4:	bf28      	it	cs
 8011da6:	4613      	movcs	r3, r2
 8011da8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8011daa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d102      	bne.n	8011db6 <tcp_write+0x7e>
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011db4:	e000      	b.n	8011db8 <tcp_write+0x80>
 8011db6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011db8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8011dba:	68bb      	ldr	r3, [r7, #8]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d109      	bne.n	8011dd4 <tcp_write+0x9c>
 8011dc0:	4b94      	ldr	r3, [pc, #592]	@ (8012014 <tcp_write+0x2dc>)
 8011dc2:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8011dc6:	4996      	ldr	r1, [pc, #600]	@ (8012020 <tcp_write+0x2e8>)
 8011dc8:	4894      	ldr	r0, [pc, #592]	@ (801201c <tcp_write+0x2e4>)
 8011dca:	f004 ff31 	bl	8016c30 <iprintf>
 8011dce:	f06f 030f 	mvn.w	r3, #15
 8011dd2:	e30a      	b.n	80123ea <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011dd4:	88fb      	ldrh	r3, [r7, #6]
 8011dd6:	4619      	mov	r1, r3
 8011dd8:	68f8      	ldr	r0, [r7, #12]
 8011dda:	f7ff ff33 	bl	8011c44 <tcp_write_checks>
 8011dde:	4603      	mov	r3, r0
 8011de0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8011de4:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d002      	beq.n	8011df2 <tcp_write+0xba>
    return err;
 8011dec:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8011df0:	e2fb      	b.n	80123ea <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011df8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011dfc:	2300      	movs	r3, #0
 8011dfe:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	f000 80f6 	beq.w	8011ff8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011e10:	653b      	str	r3, [r7, #80]	@ 0x50
 8011e12:	e002      	b.n	8011e1a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8011e14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011e1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d1f8      	bne.n	8011e14 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8011e22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e24:	7a9b      	ldrb	r3, [r3, #10]
 8011e26:	009b      	lsls	r3, r3, #2
 8011e28:	b29b      	uxth	r3, r3
 8011e2a:	f003 0304 	and.w	r3, r3, #4
 8011e2e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011e30:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011e32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e34:	891b      	ldrh	r3, [r3, #8]
 8011e36:	4619      	mov	r1, r3
 8011e38:	8c3b      	ldrh	r3, [r7, #32]
 8011e3a:	440b      	add	r3, r1
 8011e3c:	429a      	cmp	r2, r3
 8011e3e:	da06      	bge.n	8011e4e <tcp_write+0x116>
 8011e40:	4b74      	ldr	r3, [pc, #464]	@ (8012014 <tcp_write+0x2dc>)
 8011e42:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8011e46:	4977      	ldr	r1, [pc, #476]	@ (8012024 <tcp_write+0x2ec>)
 8011e48:	4874      	ldr	r0, [pc, #464]	@ (801201c <tcp_write+0x2e4>)
 8011e4a:	f004 fef1 	bl	8016c30 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8011e4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e50:	891a      	ldrh	r2, [r3, #8]
 8011e52:	8c3b      	ldrh	r3, [r7, #32]
 8011e54:	4413      	add	r3, r2
 8011e56:	b29b      	uxth	r3, r3
 8011e58:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011e5a:	1ad3      	subs	r3, r2, r3
 8011e5c:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011e64:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011e66:	8a7b      	ldrh	r3, [r7, #18]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d026      	beq.n	8011eba <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8011e6c:	8a7b      	ldrh	r3, [r7, #18]
 8011e6e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011e70:	429a      	cmp	r2, r3
 8011e72:	d206      	bcs.n	8011e82 <tcp_write+0x14a>
 8011e74:	4b67      	ldr	r3, [pc, #412]	@ (8012014 <tcp_write+0x2dc>)
 8011e76:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8011e7a:	496b      	ldr	r1, [pc, #428]	@ (8012028 <tcp_write+0x2f0>)
 8011e7c:	4867      	ldr	r0, [pc, #412]	@ (801201c <tcp_write+0x2e4>)
 8011e7e:	f004 fed7 	bl	8016c30 <iprintf>
      seg = last_unsent;
 8011e82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e84:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8011e86:	8a7b      	ldrh	r3, [r7, #18]
 8011e88:	88fa      	ldrh	r2, [r7, #6]
 8011e8a:	4293      	cmp	r3, r2
 8011e8c:	bf28      	it	cs
 8011e8e:	4613      	movcs	r3, r2
 8011e90:	b29b      	uxth	r3, r3
 8011e92:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011e94:	4293      	cmp	r3, r2
 8011e96:	bf28      	it	cs
 8011e98:	4613      	movcs	r3, r2
 8011e9a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8011e9c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011ea0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011ea2:	4413      	add	r3, r2
 8011ea4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8011ea8:	8a7a      	ldrh	r2, [r7, #18]
 8011eaa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011eac:	1ad3      	subs	r3, r2, r3
 8011eae:	b29b      	uxth	r3, r3
 8011eb0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011eb2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011eb4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011eb6:	1ad3      	subs	r3, r2, r3
 8011eb8:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8011eba:	8a7b      	ldrh	r3, [r7, #18]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d00b      	beq.n	8011ed8 <tcp_write+0x1a0>
 8011ec0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011ec4:	88fb      	ldrh	r3, [r7, #6]
 8011ec6:	429a      	cmp	r2, r3
 8011ec8:	d006      	beq.n	8011ed8 <tcp_write+0x1a0>
 8011eca:	4b52      	ldr	r3, [pc, #328]	@ (8012014 <tcp_write+0x2dc>)
 8011ecc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011ed0:	4956      	ldr	r1, [pc, #344]	@ (801202c <tcp_write+0x2f4>)
 8011ed2:	4852      	ldr	r0, [pc, #328]	@ (801201c <tcp_write+0x2e4>)
 8011ed4:	f004 feac 	bl	8016c30 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8011ed8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011edc:	88fb      	ldrh	r3, [r7, #6]
 8011ede:	429a      	cmp	r2, r3
 8011ee0:	f080 8167 	bcs.w	80121b2 <tcp_write+0x47a>
 8011ee4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	f000 8163 	beq.w	80121b2 <tcp_write+0x47a>
 8011eec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011eee:	891b      	ldrh	r3, [r3, #8]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	f000 815e 	beq.w	80121b2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8011ef6:	88fa      	ldrh	r2, [r7, #6]
 8011ef8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011efc:	1ad2      	subs	r2, r2, r3
 8011efe:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011f00:	4293      	cmp	r3, r2
 8011f02:	bfa8      	it	ge
 8011f04:	4613      	movge	r3, r2
 8011f06:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8011f08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011f0c:	797b      	ldrb	r3, [r7, #5]
 8011f0e:	f003 0301 	and.w	r3, r3, #1
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d027      	beq.n	8011f66 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8011f16:	f107 0012 	add.w	r0, r7, #18
 8011f1a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011f1c:	8bf9      	ldrh	r1, [r7, #30]
 8011f1e:	2301      	movs	r3, #1
 8011f20:	9302      	str	r3, [sp, #8]
 8011f22:	797b      	ldrb	r3, [r7, #5]
 8011f24:	9301      	str	r3, [sp, #4]
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	9300      	str	r3, [sp, #0]
 8011f2a:	4603      	mov	r3, r0
 8011f2c:	2000      	movs	r0, #0
 8011f2e:	f7ff fe0f 	bl	8011b50 <tcp_pbuf_prealloc>
 8011f32:	6578      	str	r0, [r7, #84]	@ 0x54
 8011f34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	f000 8225 	beq.w	8012386 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8011f3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011f3e:	6858      	ldr	r0, [r3, #4]
 8011f40:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011f44:	68ba      	ldr	r2, [r7, #8]
 8011f46:	4413      	add	r3, r2
 8011f48:	8bfa      	ldrh	r2, [r7, #30]
 8011f4a:	4619      	mov	r1, r3
 8011f4c:	f004 ffa1 	bl	8016e92 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8011f50:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8011f52:	f7fb f9c3 	bl	800d2dc <pbuf_clen>
 8011f56:	4603      	mov	r3, r0
 8011f58:	461a      	mov	r2, r3
 8011f5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011f5e:	4413      	add	r3, r2
 8011f60:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8011f64:	e041      	b.n	8011fea <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8011f66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011f68:	685b      	ldr	r3, [r3, #4]
 8011f6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8011f6c:	e002      	b.n	8011f74 <tcp_write+0x23c>
 8011f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	637b      	str	r3, [r7, #52]	@ 0x34
 8011f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d1f8      	bne.n	8011f6e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011f7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f7e:	7b1b      	ldrb	r3, [r3, #12]
 8011f80:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d115      	bne.n	8011fb4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8011f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f8a:	685b      	ldr	r3, [r3, #4]
 8011f8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011f8e:	8952      	ldrh	r2, [r2, #10]
 8011f90:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011f92:	68ba      	ldr	r2, [r7, #8]
 8011f94:	429a      	cmp	r2, r3
 8011f96:	d10d      	bne.n	8011fb4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8011f98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d006      	beq.n	8011fae <tcp_write+0x276>
 8011fa0:	4b1c      	ldr	r3, [pc, #112]	@ (8012014 <tcp_write+0x2dc>)
 8011fa2:	f240 2231 	movw	r2, #561	@ 0x231
 8011fa6:	4922      	ldr	r1, [pc, #136]	@ (8012030 <tcp_write+0x2f8>)
 8011fa8:	481c      	ldr	r0, [pc, #112]	@ (801201c <tcp_write+0x2e4>)
 8011faa:	f004 fe41 	bl	8016c30 <iprintf>
          extendlen = seglen;
 8011fae:	8bfb      	ldrh	r3, [r7, #30]
 8011fb0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8011fb2:	e01a      	b.n	8011fea <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011fb4:	8bfb      	ldrh	r3, [r7, #30]
 8011fb6:	2201      	movs	r2, #1
 8011fb8:	4619      	mov	r1, r3
 8011fba:	2000      	movs	r0, #0
 8011fbc:	f7fa fe1c 	bl	800cbf8 <pbuf_alloc>
 8011fc0:	6578      	str	r0, [r7, #84]	@ 0x54
 8011fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	f000 81e0 	beq.w	801238a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8011fca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011fce:	68ba      	ldr	r2, [r7, #8]
 8011fd0:	441a      	add	r2, r3
 8011fd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011fd4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8011fd6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8011fd8:	f7fb f980 	bl	800d2dc <pbuf_clen>
 8011fdc:	4603      	mov	r3, r0
 8011fde:	461a      	mov	r2, r3
 8011fe0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011fe4:	4413      	add	r3, r2
 8011fe6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8011fea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011fee:	8bfb      	ldrh	r3, [r7, #30]
 8011ff0:	4413      	add	r3, r2
 8011ff2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8011ff6:	e0dc      	b.n	80121b2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	f000 80d7 	beq.w	80121b2 <tcp_write+0x47a>
 8012004:	4b03      	ldr	r3, [pc, #12]	@ (8012014 <tcp_write+0x2dc>)
 8012006:	f240 224a 	movw	r2, #586	@ 0x24a
 801200a:	490a      	ldr	r1, [pc, #40]	@ (8012034 <tcp_write+0x2fc>)
 801200c:	4803      	ldr	r0, [pc, #12]	@ (801201c <tcp_write+0x2e4>)
 801200e:	f004 fe0f 	bl	8016c30 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8012012:	e0ce      	b.n	80121b2 <tcp_write+0x47a>
 8012014:	08019d50 	.word	0x08019d50
 8012018:	08019ef0 	.word	0x08019ef0
 801201c:	08019da4 	.word	0x08019da4
 8012020:	08019f08 	.word	0x08019f08
 8012024:	08019f3c 	.word	0x08019f3c
 8012028:	08019f54 	.word	0x08019f54
 801202c:	08019f74 	.word	0x08019f74
 8012030:	08019f94 	.word	0x08019f94
 8012034:	08019fc0 	.word	0x08019fc0
    struct pbuf *p;
    u16_t left = len - pos;
 8012038:	88fa      	ldrh	r2, [r7, #6]
 801203a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801203e:	1ad3      	subs	r3, r2, r3
 8012040:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8012042:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8012046:	b29b      	uxth	r3, r3
 8012048:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801204a:	1ad3      	subs	r3, r2, r3
 801204c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801204e:	8b7a      	ldrh	r2, [r7, #26]
 8012050:	8bbb      	ldrh	r3, [r7, #28]
 8012052:	4293      	cmp	r3, r2
 8012054:	bf28      	it	cs
 8012056:	4613      	movcs	r3, r2
 8012058:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801205a:	797b      	ldrb	r3, [r7, #5]
 801205c:	f003 0301 	and.w	r3, r3, #1
 8012060:	2b00      	cmp	r3, #0
 8012062:	d036      	beq.n	80120d2 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8012064:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8012068:	b29a      	uxth	r2, r3
 801206a:	8b3b      	ldrh	r3, [r7, #24]
 801206c:	4413      	add	r3, r2
 801206e:	b299      	uxth	r1, r3
 8012070:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012072:	2b00      	cmp	r3, #0
 8012074:	bf0c      	ite	eq
 8012076:	2301      	moveq	r3, #1
 8012078:	2300      	movne	r3, #0
 801207a:	b2db      	uxtb	r3, r3
 801207c:	f107 0012 	add.w	r0, r7, #18
 8012080:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012082:	9302      	str	r3, [sp, #8]
 8012084:	797b      	ldrb	r3, [r7, #5]
 8012086:	9301      	str	r3, [sp, #4]
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	9300      	str	r3, [sp, #0]
 801208c:	4603      	mov	r3, r0
 801208e:	2036      	movs	r0, #54	@ 0x36
 8012090:	f7ff fd5e 	bl	8011b50 <tcp_pbuf_prealloc>
 8012094:	6338      	str	r0, [r7, #48]	@ 0x30
 8012096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012098:	2b00      	cmp	r3, #0
 801209a:	f000 8178 	beq.w	801238e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801209e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120a0:	895b      	ldrh	r3, [r3, #10]
 80120a2:	8b3a      	ldrh	r2, [r7, #24]
 80120a4:	429a      	cmp	r2, r3
 80120a6:	d906      	bls.n	80120b6 <tcp_write+0x37e>
 80120a8:	4b8c      	ldr	r3, [pc, #560]	@ (80122dc <tcp_write+0x5a4>)
 80120aa:	f240 2266 	movw	r2, #614	@ 0x266
 80120ae:	498c      	ldr	r1, [pc, #560]	@ (80122e0 <tcp_write+0x5a8>)
 80120b0:	488c      	ldr	r0, [pc, #560]	@ (80122e4 <tcp_write+0x5ac>)
 80120b2:	f004 fdbd 	bl	8016c30 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80120b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120b8:	685a      	ldr	r2, [r3, #4]
 80120ba:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80120be:	18d0      	adds	r0, r2, r3
 80120c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80120c4:	68ba      	ldr	r2, [r7, #8]
 80120c6:	4413      	add	r3, r2
 80120c8:	8b3a      	ldrh	r2, [r7, #24]
 80120ca:	4619      	mov	r1, r3
 80120cc:	f004 fee1 	bl	8016e92 <memcpy>
 80120d0:	e02f      	b.n	8012132 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80120d2:	8a7b      	ldrh	r3, [r7, #18]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d006      	beq.n	80120e6 <tcp_write+0x3ae>
 80120d8:	4b80      	ldr	r3, [pc, #512]	@ (80122dc <tcp_write+0x5a4>)
 80120da:	f240 2271 	movw	r2, #625	@ 0x271
 80120de:	4982      	ldr	r1, [pc, #520]	@ (80122e8 <tcp_write+0x5b0>)
 80120e0:	4880      	ldr	r0, [pc, #512]	@ (80122e4 <tcp_write+0x5ac>)
 80120e2:	f004 fda5 	bl	8016c30 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80120e6:	8b3b      	ldrh	r3, [r7, #24]
 80120e8:	2201      	movs	r2, #1
 80120ea:	4619      	mov	r1, r3
 80120ec:	2036      	movs	r0, #54	@ 0x36
 80120ee:	f7fa fd83 	bl	800cbf8 <pbuf_alloc>
 80120f2:	6178      	str	r0, [r7, #20]
 80120f4:	697b      	ldr	r3, [r7, #20]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	f000 814b 	beq.w	8012392 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80120fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012100:	68ba      	ldr	r2, [r7, #8]
 8012102:	441a      	add	r2, r3
 8012104:	697b      	ldr	r3, [r7, #20]
 8012106:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012108:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801210c:	b29b      	uxth	r3, r3
 801210e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012112:	4619      	mov	r1, r3
 8012114:	2036      	movs	r0, #54	@ 0x36
 8012116:	f7fa fd6f 	bl	800cbf8 <pbuf_alloc>
 801211a:	6338      	str	r0, [r7, #48]	@ 0x30
 801211c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801211e:	2b00      	cmp	r3, #0
 8012120:	d103      	bne.n	801212a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8012122:	6978      	ldr	r0, [r7, #20]
 8012124:	f7fb f84c 	bl	800d1c0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8012128:	e136      	b.n	8012398 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801212a:	6979      	ldr	r1, [r7, #20]
 801212c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801212e:	f7fb f915 	bl	800d35c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8012132:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012134:	f7fb f8d2 	bl	800d2dc <pbuf_clen>
 8012138:	4603      	mov	r3, r0
 801213a:	461a      	mov	r2, r3
 801213c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8012140:	4413      	add	r3, r2
 8012142:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8012146:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801214a:	2b09      	cmp	r3, #9
 801214c:	d903      	bls.n	8012156 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801214e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012150:	f7fb f836 	bl	800d1c0 <pbuf_free>
      goto memerr;
 8012154:	e120      	b.n	8012398 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801215a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801215e:	441a      	add	r2, r3
 8012160:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012164:	9300      	str	r3, [sp, #0]
 8012166:	4613      	mov	r3, r2
 8012168:	2200      	movs	r2, #0
 801216a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801216c:	68f8      	ldr	r0, [r7, #12]
 801216e:	f7ff fc53 	bl	8011a18 <tcp_create_segment>
 8012172:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8012174:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012176:	2b00      	cmp	r3, #0
 8012178:	f000 810d 	beq.w	8012396 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801217c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801217e:	2b00      	cmp	r3, #0
 8012180:	d102      	bne.n	8012188 <tcp_write+0x450>
      queue = seg;
 8012182:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012184:	647b      	str	r3, [r7, #68]	@ 0x44
 8012186:	e00c      	b.n	80121a2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012188:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801218a:	2b00      	cmp	r3, #0
 801218c:	d106      	bne.n	801219c <tcp_write+0x464>
 801218e:	4b53      	ldr	r3, [pc, #332]	@ (80122dc <tcp_write+0x5a4>)
 8012190:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8012194:	4955      	ldr	r1, [pc, #340]	@ (80122ec <tcp_write+0x5b4>)
 8012196:	4853      	ldr	r0, [pc, #332]	@ (80122e4 <tcp_write+0x5ac>)
 8012198:	f004 fd4a 	bl	8016c30 <iprintf>
      prev_seg->next = seg;
 801219c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801219e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80121a0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80121a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80121a4:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80121a6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80121aa:	8b3b      	ldrh	r3, [r7, #24]
 80121ac:	4413      	add	r3, r2
 80121ae:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 80121b2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80121b6:	88fb      	ldrh	r3, [r7, #6]
 80121b8:	429a      	cmp	r2, r3
 80121ba:	f4ff af3d 	bcc.w	8012038 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80121be:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d02c      	beq.n	801221e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80121c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80121c6:	685b      	ldr	r3, [r3, #4]
 80121c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80121ca:	e01e      	b.n	801220a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80121cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121ce:	891a      	ldrh	r2, [r3, #8]
 80121d0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80121d2:	4413      	add	r3, r2
 80121d4:	b29a      	uxth	r2, r3
 80121d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121d8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80121da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d110      	bne.n	8012204 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80121e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121e4:	685b      	ldr	r3, [r3, #4]
 80121e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80121e8:	8952      	ldrh	r2, [r2, #10]
 80121ea:	4413      	add	r3, r2
 80121ec:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80121ee:	68b9      	ldr	r1, [r7, #8]
 80121f0:	4618      	mov	r0, r3
 80121f2:	f004 fe4e 	bl	8016e92 <memcpy>
        p->len += oversize_used;
 80121f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121f8:	895a      	ldrh	r2, [r3, #10]
 80121fa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80121fc:	4413      	add	r3, r2
 80121fe:	b29a      	uxth	r2, r3
 8012200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012202:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801220a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801220c:	2b00      	cmp	r3, #0
 801220e:	d1dd      	bne.n	80121cc <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8012210:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012212:	891a      	ldrh	r2, [r3, #8]
 8012214:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012216:	4413      	add	r3, r2
 8012218:	b29a      	uxth	r2, r3
 801221a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801221c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801221e:	8a7a      	ldrh	r2, [r7, #18]
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8012226:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012228:	2b00      	cmp	r3, #0
 801222a:	d018      	beq.n	801225e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801222c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801222e:	2b00      	cmp	r3, #0
 8012230:	d106      	bne.n	8012240 <tcp_write+0x508>
 8012232:	4b2a      	ldr	r3, [pc, #168]	@ (80122dc <tcp_write+0x5a4>)
 8012234:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8012238:	492d      	ldr	r1, [pc, #180]	@ (80122f0 <tcp_write+0x5b8>)
 801223a:	482a      	ldr	r0, [pc, #168]	@ (80122e4 <tcp_write+0x5ac>)
 801223c:	f004 fcf8 	bl	8016c30 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012240:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012242:	685b      	ldr	r3, [r3, #4]
 8012244:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012246:	4618      	mov	r0, r3
 8012248:	f7fb f888 	bl	800d35c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801224c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801224e:	891a      	ldrh	r2, [r3, #8]
 8012250:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012252:	891b      	ldrh	r3, [r3, #8]
 8012254:	4413      	add	r3, r2
 8012256:	b29a      	uxth	r2, r3
 8012258:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801225a:	811a      	strh	r2, [r3, #8]
 801225c:	e037      	b.n	80122ce <tcp_write+0x596>
  } else if (extendlen > 0) {
 801225e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012260:	2b00      	cmp	r3, #0
 8012262:	d034      	beq.n	80122ce <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012264:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012266:	2b00      	cmp	r3, #0
 8012268:	d003      	beq.n	8012272 <tcp_write+0x53a>
 801226a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801226c:	685b      	ldr	r3, [r3, #4]
 801226e:	2b00      	cmp	r3, #0
 8012270:	d106      	bne.n	8012280 <tcp_write+0x548>
 8012272:	4b1a      	ldr	r3, [pc, #104]	@ (80122dc <tcp_write+0x5a4>)
 8012274:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8012278:	491e      	ldr	r1, [pc, #120]	@ (80122f4 <tcp_write+0x5bc>)
 801227a:	481a      	ldr	r0, [pc, #104]	@ (80122e4 <tcp_write+0x5ac>)
 801227c:	f004 fcd8 	bl	8016c30 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012280:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012282:	685b      	ldr	r3, [r3, #4]
 8012284:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012286:	e009      	b.n	801229c <tcp_write+0x564>
      p->tot_len += extendlen;
 8012288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801228a:	891a      	ldrh	r2, [r3, #8]
 801228c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801228e:	4413      	add	r3, r2
 8012290:	b29a      	uxth	r2, r3
 8012292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012294:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801229c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d1f1      	bne.n	8012288 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80122a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122a6:	891a      	ldrh	r2, [r3, #8]
 80122a8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80122aa:	4413      	add	r3, r2
 80122ac:	b29a      	uxth	r2, r3
 80122ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122b0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80122b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122b4:	895a      	ldrh	r2, [r3, #10]
 80122b6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80122b8:	4413      	add	r3, r2
 80122ba:	b29a      	uxth	r2, r3
 80122bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122be:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80122c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80122c2:	891a      	ldrh	r2, [r3, #8]
 80122c4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80122c6:	4413      	add	r3, r2
 80122c8:	b29a      	uxth	r2, r3
 80122ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80122cc:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80122ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d111      	bne.n	80122f8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80122d8:	66da      	str	r2, [r3, #108]	@ 0x6c
 80122da:	e010      	b.n	80122fe <tcp_write+0x5c6>
 80122dc:	08019d50 	.word	0x08019d50
 80122e0:	08019ff0 	.word	0x08019ff0
 80122e4:	08019da4 	.word	0x08019da4
 80122e8:	0801a030 	.word	0x0801a030
 80122ec:	0801a040 	.word	0x0801a040
 80122f0:	0801a054 	.word	0x0801a054
 80122f4:	0801a08c 	.word	0x0801a08c
  } else {
    last_unsent->next = queue;
 80122f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80122fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80122fc:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8012302:	88fb      	ldrh	r3, [r7, #6]
 8012304:	441a      	add	r2, r3
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8012310:	88fb      	ldrh	r3, [r7, #6]
 8012312:	1ad3      	subs	r3, r2, r3
 8012314:	b29a      	uxth	r2, r3
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8012322:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801232c:	2b00      	cmp	r3, #0
 801232e:	d00e      	beq.n	801234e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012334:	2b00      	cmp	r3, #0
 8012336:	d10a      	bne.n	801234e <tcp_write+0x616>
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801233c:	2b00      	cmp	r3, #0
 801233e:	d106      	bne.n	801234e <tcp_write+0x616>
 8012340:	4b2c      	ldr	r3, [pc, #176]	@ (80123f4 <tcp_write+0x6bc>)
 8012342:	f240 3212 	movw	r2, #786	@ 0x312
 8012346:	492c      	ldr	r1, [pc, #176]	@ (80123f8 <tcp_write+0x6c0>)
 8012348:	482c      	ldr	r0, [pc, #176]	@ (80123fc <tcp_write+0x6c4>)
 801234a:	f004 fc71 	bl	8016c30 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801234e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012350:	2b00      	cmp	r3, #0
 8012352:	d016      	beq.n	8012382 <tcp_write+0x64a>
 8012354:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012356:	68db      	ldr	r3, [r3, #12]
 8012358:	2b00      	cmp	r3, #0
 801235a:	d012      	beq.n	8012382 <tcp_write+0x64a>
 801235c:	797b      	ldrb	r3, [r7, #5]
 801235e:	f003 0302 	and.w	r3, r3, #2
 8012362:	2b00      	cmp	r3, #0
 8012364:	d10d      	bne.n	8012382 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012366:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012368:	68db      	ldr	r3, [r3, #12]
 801236a:	899b      	ldrh	r3, [r3, #12]
 801236c:	b29c      	uxth	r4, r3
 801236e:	2008      	movs	r0, #8
 8012370:	f7f9 fa7c 	bl	800b86c <lwip_htons>
 8012374:	4603      	mov	r3, r0
 8012376:	461a      	mov	r2, r3
 8012378:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801237a:	68db      	ldr	r3, [r3, #12]
 801237c:	4322      	orrs	r2, r4
 801237e:	b292      	uxth	r2, r2
 8012380:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8012382:	2300      	movs	r3, #0
 8012384:	e031      	b.n	80123ea <tcp_write+0x6b2>
          goto memerr;
 8012386:	bf00      	nop
 8012388:	e006      	b.n	8012398 <tcp_write+0x660>
            goto memerr;
 801238a:	bf00      	nop
 801238c:	e004      	b.n	8012398 <tcp_write+0x660>
        goto memerr;
 801238e:	bf00      	nop
 8012390:	e002      	b.n	8012398 <tcp_write+0x660>
        goto memerr;
 8012392:	bf00      	nop
 8012394:	e000      	b.n	8012398 <tcp_write+0x660>
      goto memerr;
 8012396:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	8b5b      	ldrh	r3, [r3, #26]
 801239c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80123a0:	b29a      	uxth	r2, r3
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80123a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d002      	beq.n	80123b2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 80123ac:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80123ae:	f7fa ff07 	bl	800d1c0 <pbuf_free>
  }
  if (queue != NULL) {
 80123b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d002      	beq.n	80123be <tcp_write+0x686>
    tcp_segs_free(queue);
 80123b8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80123ba:	f7fc fb71 	bl	800eaa0 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d00e      	beq.n	80123e6 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d10a      	bne.n	80123e6 <tcp_write+0x6ae>
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d106      	bne.n	80123e6 <tcp_write+0x6ae>
 80123d8:	4b06      	ldr	r3, [pc, #24]	@ (80123f4 <tcp_write+0x6bc>)
 80123da:	f240 3227 	movw	r2, #807	@ 0x327
 80123de:	4906      	ldr	r1, [pc, #24]	@ (80123f8 <tcp_write+0x6c0>)
 80123e0:	4806      	ldr	r0, [pc, #24]	@ (80123fc <tcp_write+0x6c4>)
 80123e2:	f004 fc25 	bl	8016c30 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80123e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80123ea:	4618      	mov	r0, r3
 80123ec:	375c      	adds	r7, #92	@ 0x5c
 80123ee:	46bd      	mov	sp, r7
 80123f0:	bd90      	pop	{r4, r7, pc}
 80123f2:	bf00      	nop
 80123f4:	08019d50 	.word	0x08019d50
 80123f8:	0801a0c4 	.word	0x0801a0c4
 80123fc:	08019da4 	.word	0x08019da4

08012400 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012400:	b590      	push	{r4, r7, lr}
 8012402:	b08b      	sub	sp, #44	@ 0x2c
 8012404:	af02      	add	r7, sp, #8
 8012406:	6078      	str	r0, [r7, #4]
 8012408:	460b      	mov	r3, r1
 801240a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801240c:	2300      	movs	r3, #0
 801240e:	61fb      	str	r3, [r7, #28]
 8012410:	2300      	movs	r3, #0
 8012412:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012414:	2300      	movs	r3, #0
 8012416:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d106      	bne.n	801242c <tcp_split_unsent_seg+0x2c>
 801241e:	4b95      	ldr	r3, [pc, #596]	@ (8012674 <tcp_split_unsent_seg+0x274>)
 8012420:	f240 324b 	movw	r2, #843	@ 0x34b
 8012424:	4994      	ldr	r1, [pc, #592]	@ (8012678 <tcp_split_unsent_seg+0x278>)
 8012426:	4895      	ldr	r0, [pc, #596]	@ (801267c <tcp_split_unsent_seg+0x27c>)
 8012428:	f004 fc02 	bl	8016c30 <iprintf>

  useg = pcb->unsent;
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012430:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8012432:	697b      	ldr	r3, [r7, #20]
 8012434:	2b00      	cmp	r3, #0
 8012436:	d102      	bne.n	801243e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012438:	f04f 33ff 	mov.w	r3, #4294967295
 801243c:	e116      	b.n	801266c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801243e:	887b      	ldrh	r3, [r7, #2]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d109      	bne.n	8012458 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012444:	4b8b      	ldr	r3, [pc, #556]	@ (8012674 <tcp_split_unsent_seg+0x274>)
 8012446:	f240 3253 	movw	r2, #851	@ 0x353
 801244a:	498d      	ldr	r1, [pc, #564]	@ (8012680 <tcp_split_unsent_seg+0x280>)
 801244c:	488b      	ldr	r0, [pc, #556]	@ (801267c <tcp_split_unsent_seg+0x27c>)
 801244e:	f004 fbef 	bl	8016c30 <iprintf>
    return ERR_VAL;
 8012452:	f06f 0305 	mvn.w	r3, #5
 8012456:	e109      	b.n	801266c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012458:	697b      	ldr	r3, [r7, #20]
 801245a:	891b      	ldrh	r3, [r3, #8]
 801245c:	887a      	ldrh	r2, [r7, #2]
 801245e:	429a      	cmp	r2, r3
 8012460:	d301      	bcc.n	8012466 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8012462:	2300      	movs	r3, #0
 8012464:	e102      	b.n	801266c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801246a:	887a      	ldrh	r2, [r7, #2]
 801246c:	429a      	cmp	r2, r3
 801246e:	d906      	bls.n	801247e <tcp_split_unsent_seg+0x7e>
 8012470:	4b80      	ldr	r3, [pc, #512]	@ (8012674 <tcp_split_unsent_seg+0x274>)
 8012472:	f240 325b 	movw	r2, #859	@ 0x35b
 8012476:	4983      	ldr	r1, [pc, #524]	@ (8012684 <tcp_split_unsent_seg+0x284>)
 8012478:	4880      	ldr	r0, [pc, #512]	@ (801267c <tcp_split_unsent_seg+0x27c>)
 801247a:	f004 fbd9 	bl	8016c30 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801247e:	697b      	ldr	r3, [r7, #20]
 8012480:	891b      	ldrh	r3, [r3, #8]
 8012482:	2b00      	cmp	r3, #0
 8012484:	d106      	bne.n	8012494 <tcp_split_unsent_seg+0x94>
 8012486:	4b7b      	ldr	r3, [pc, #492]	@ (8012674 <tcp_split_unsent_seg+0x274>)
 8012488:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 801248c:	497e      	ldr	r1, [pc, #504]	@ (8012688 <tcp_split_unsent_seg+0x288>)
 801248e:	487b      	ldr	r0, [pc, #492]	@ (801267c <tcp_split_unsent_seg+0x27c>)
 8012490:	f004 fbce 	bl	8016c30 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012494:	697b      	ldr	r3, [r7, #20]
 8012496:	7a9b      	ldrb	r3, [r3, #10]
 8012498:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801249a:	7bfb      	ldrb	r3, [r7, #15]
 801249c:	009b      	lsls	r3, r3, #2
 801249e:	b2db      	uxtb	r3, r3
 80124a0:	f003 0304 	and.w	r3, r3, #4
 80124a4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80124a6:	697b      	ldr	r3, [r7, #20]
 80124a8:	891a      	ldrh	r2, [r3, #8]
 80124aa:	887b      	ldrh	r3, [r7, #2]
 80124ac:	1ad3      	subs	r3, r2, r3
 80124ae:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80124b0:	7bbb      	ldrb	r3, [r7, #14]
 80124b2:	b29a      	uxth	r2, r3
 80124b4:	89bb      	ldrh	r3, [r7, #12]
 80124b6:	4413      	add	r3, r2
 80124b8:	b29b      	uxth	r3, r3
 80124ba:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80124be:	4619      	mov	r1, r3
 80124c0:	2036      	movs	r0, #54	@ 0x36
 80124c2:	f7fa fb99 	bl	800cbf8 <pbuf_alloc>
 80124c6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80124c8:	693b      	ldr	r3, [r7, #16]
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	f000 80b7 	beq.w	801263e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80124d0:	697b      	ldr	r3, [r7, #20]
 80124d2:	685b      	ldr	r3, [r3, #4]
 80124d4:	891a      	ldrh	r2, [r3, #8]
 80124d6:	697b      	ldr	r3, [r7, #20]
 80124d8:	891b      	ldrh	r3, [r3, #8]
 80124da:	1ad3      	subs	r3, r2, r3
 80124dc:	b29a      	uxth	r2, r3
 80124de:	887b      	ldrh	r3, [r7, #2]
 80124e0:	4413      	add	r3, r2
 80124e2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80124e4:	697b      	ldr	r3, [r7, #20]
 80124e6:	6858      	ldr	r0, [r3, #4]
 80124e8:	693b      	ldr	r3, [r7, #16]
 80124ea:	685a      	ldr	r2, [r3, #4]
 80124ec:	7bbb      	ldrb	r3, [r7, #14]
 80124ee:	18d1      	adds	r1, r2, r3
 80124f0:	897b      	ldrh	r3, [r7, #10]
 80124f2:	89ba      	ldrh	r2, [r7, #12]
 80124f4:	f7fb f85a 	bl	800d5ac <pbuf_copy_partial>
 80124f8:	4603      	mov	r3, r0
 80124fa:	461a      	mov	r2, r3
 80124fc:	89bb      	ldrh	r3, [r7, #12]
 80124fe:	4293      	cmp	r3, r2
 8012500:	f040 809f 	bne.w	8012642 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012504:	697b      	ldr	r3, [r7, #20]
 8012506:	68db      	ldr	r3, [r3, #12]
 8012508:	899b      	ldrh	r3, [r3, #12]
 801250a:	b29b      	uxth	r3, r3
 801250c:	4618      	mov	r0, r3
 801250e:	f7f9 f9ad 	bl	800b86c <lwip_htons>
 8012512:	4603      	mov	r3, r0
 8012514:	b2db      	uxtb	r3, r3
 8012516:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801251a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801251c:	2300      	movs	r3, #0
 801251e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012520:	7efb      	ldrb	r3, [r7, #27]
 8012522:	f003 0308 	and.w	r3, r3, #8
 8012526:	2b00      	cmp	r3, #0
 8012528:	d007      	beq.n	801253a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801252a:	7efb      	ldrb	r3, [r7, #27]
 801252c:	f023 0308 	bic.w	r3, r3, #8
 8012530:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012532:	7ebb      	ldrb	r3, [r7, #26]
 8012534:	f043 0308 	orr.w	r3, r3, #8
 8012538:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801253a:	7efb      	ldrb	r3, [r7, #27]
 801253c:	f003 0301 	and.w	r3, r3, #1
 8012540:	2b00      	cmp	r3, #0
 8012542:	d007      	beq.n	8012554 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012544:	7efb      	ldrb	r3, [r7, #27]
 8012546:	f023 0301 	bic.w	r3, r3, #1
 801254a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801254c:	7ebb      	ldrb	r3, [r7, #26]
 801254e:	f043 0301 	orr.w	r3, r3, #1
 8012552:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012554:	697b      	ldr	r3, [r7, #20]
 8012556:	68db      	ldr	r3, [r3, #12]
 8012558:	685b      	ldr	r3, [r3, #4]
 801255a:	4618      	mov	r0, r3
 801255c:	f7f9 f99b 	bl	800b896 <lwip_htonl>
 8012560:	4602      	mov	r2, r0
 8012562:	887b      	ldrh	r3, [r7, #2]
 8012564:	18d1      	adds	r1, r2, r3
 8012566:	7eba      	ldrb	r2, [r7, #26]
 8012568:	7bfb      	ldrb	r3, [r7, #15]
 801256a:	9300      	str	r3, [sp, #0]
 801256c:	460b      	mov	r3, r1
 801256e:	6939      	ldr	r1, [r7, #16]
 8012570:	6878      	ldr	r0, [r7, #4]
 8012572:	f7ff fa51 	bl	8011a18 <tcp_create_segment>
 8012576:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012578:	69fb      	ldr	r3, [r7, #28]
 801257a:	2b00      	cmp	r3, #0
 801257c:	d063      	beq.n	8012646 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801257e:	697b      	ldr	r3, [r7, #20]
 8012580:	685b      	ldr	r3, [r3, #4]
 8012582:	4618      	mov	r0, r3
 8012584:	f7fa feaa 	bl	800d2dc <pbuf_clen>
 8012588:	4603      	mov	r3, r0
 801258a:	461a      	mov	r2, r3
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012592:	1a9b      	subs	r3, r3, r2
 8012594:	b29a      	uxth	r2, r3
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801259c:	697b      	ldr	r3, [r7, #20]
 801259e:	6858      	ldr	r0, [r3, #4]
 80125a0:	697b      	ldr	r3, [r7, #20]
 80125a2:	685b      	ldr	r3, [r3, #4]
 80125a4:	891a      	ldrh	r2, [r3, #8]
 80125a6:	89bb      	ldrh	r3, [r7, #12]
 80125a8:	1ad3      	subs	r3, r2, r3
 80125aa:	b29b      	uxth	r3, r3
 80125ac:	4619      	mov	r1, r3
 80125ae:	f7fa fc81 	bl	800ceb4 <pbuf_realloc>
  useg->len -= remainder;
 80125b2:	697b      	ldr	r3, [r7, #20]
 80125b4:	891a      	ldrh	r2, [r3, #8]
 80125b6:	89bb      	ldrh	r3, [r7, #12]
 80125b8:	1ad3      	subs	r3, r2, r3
 80125ba:	b29a      	uxth	r2, r3
 80125bc:	697b      	ldr	r3, [r7, #20]
 80125be:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80125c0:	697b      	ldr	r3, [r7, #20]
 80125c2:	68db      	ldr	r3, [r3, #12]
 80125c4:	899b      	ldrh	r3, [r3, #12]
 80125c6:	b29c      	uxth	r4, r3
 80125c8:	7efb      	ldrb	r3, [r7, #27]
 80125ca:	b29b      	uxth	r3, r3
 80125cc:	4618      	mov	r0, r3
 80125ce:	f7f9 f94d 	bl	800b86c <lwip_htons>
 80125d2:	4603      	mov	r3, r0
 80125d4:	461a      	mov	r2, r3
 80125d6:	697b      	ldr	r3, [r7, #20]
 80125d8:	68db      	ldr	r3, [r3, #12]
 80125da:	4322      	orrs	r2, r4
 80125dc:	b292      	uxth	r2, r2
 80125de:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80125e0:	697b      	ldr	r3, [r7, #20]
 80125e2:	685b      	ldr	r3, [r3, #4]
 80125e4:	4618      	mov	r0, r3
 80125e6:	f7fa fe79 	bl	800d2dc <pbuf_clen>
 80125ea:	4603      	mov	r3, r0
 80125ec:	461a      	mov	r2, r3
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80125f4:	4413      	add	r3, r2
 80125f6:	b29a      	uxth	r2, r3
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80125fe:	69fb      	ldr	r3, [r7, #28]
 8012600:	685b      	ldr	r3, [r3, #4]
 8012602:	4618      	mov	r0, r3
 8012604:	f7fa fe6a 	bl	800d2dc <pbuf_clen>
 8012608:	4603      	mov	r3, r0
 801260a:	461a      	mov	r2, r3
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012612:	4413      	add	r3, r2
 8012614:	b29a      	uxth	r2, r3
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801261c:	697b      	ldr	r3, [r7, #20]
 801261e:	681a      	ldr	r2, [r3, #0]
 8012620:	69fb      	ldr	r3, [r7, #28]
 8012622:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012624:	697b      	ldr	r3, [r7, #20]
 8012626:	69fa      	ldr	r2, [r7, #28]
 8012628:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801262a:	69fb      	ldr	r3, [r7, #28]
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	2b00      	cmp	r3, #0
 8012630:	d103      	bne.n	801263a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	2200      	movs	r2, #0
 8012636:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801263a:	2300      	movs	r3, #0
 801263c:	e016      	b.n	801266c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801263e:	bf00      	nop
 8012640:	e002      	b.n	8012648 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012642:	bf00      	nop
 8012644:	e000      	b.n	8012648 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012646:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012648:	69fb      	ldr	r3, [r7, #28]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d006      	beq.n	801265c <tcp_split_unsent_seg+0x25c>
 801264e:	4b09      	ldr	r3, [pc, #36]	@ (8012674 <tcp_split_unsent_seg+0x274>)
 8012650:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8012654:	490d      	ldr	r1, [pc, #52]	@ (801268c <tcp_split_unsent_seg+0x28c>)
 8012656:	4809      	ldr	r0, [pc, #36]	@ (801267c <tcp_split_unsent_seg+0x27c>)
 8012658:	f004 faea 	bl	8016c30 <iprintf>
  if (p != NULL) {
 801265c:	693b      	ldr	r3, [r7, #16]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d002      	beq.n	8012668 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8012662:	6938      	ldr	r0, [r7, #16]
 8012664:	f7fa fdac 	bl	800d1c0 <pbuf_free>
  }

  return ERR_MEM;
 8012668:	f04f 33ff 	mov.w	r3, #4294967295
}
 801266c:	4618      	mov	r0, r3
 801266e:	3724      	adds	r7, #36	@ 0x24
 8012670:	46bd      	mov	sp, r7
 8012672:	bd90      	pop	{r4, r7, pc}
 8012674:	08019d50 	.word	0x08019d50
 8012678:	0801a0e4 	.word	0x0801a0e4
 801267c:	08019da4 	.word	0x08019da4
 8012680:	0801a108 	.word	0x0801a108
 8012684:	0801a12c 	.word	0x0801a12c
 8012688:	0801a13c 	.word	0x0801a13c
 801268c:	0801a14c 	.word	0x0801a14c

08012690 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012690:	b590      	push	{r4, r7, lr}
 8012692:	b085      	sub	sp, #20
 8012694:	af00      	add	r7, sp, #0
 8012696:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	2b00      	cmp	r3, #0
 801269c:	d106      	bne.n	80126ac <tcp_send_fin+0x1c>
 801269e:	4b21      	ldr	r3, [pc, #132]	@ (8012724 <tcp_send_fin+0x94>)
 80126a0:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 80126a4:	4920      	ldr	r1, [pc, #128]	@ (8012728 <tcp_send_fin+0x98>)
 80126a6:	4821      	ldr	r0, [pc, #132]	@ (801272c <tcp_send_fin+0x9c>)
 80126a8:	f004 fac2 	bl	8016c30 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d02e      	beq.n	8012712 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80126b8:	60fb      	str	r3, [r7, #12]
 80126ba:	e002      	b.n	80126c2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d1f8      	bne.n	80126bc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	68db      	ldr	r3, [r3, #12]
 80126ce:	899b      	ldrh	r3, [r3, #12]
 80126d0:	b29b      	uxth	r3, r3
 80126d2:	4618      	mov	r0, r3
 80126d4:	f7f9 f8ca 	bl	800b86c <lwip_htons>
 80126d8:	4603      	mov	r3, r0
 80126da:	b2db      	uxtb	r3, r3
 80126dc:	f003 0307 	and.w	r3, r3, #7
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d116      	bne.n	8012712 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	68db      	ldr	r3, [r3, #12]
 80126e8:	899b      	ldrh	r3, [r3, #12]
 80126ea:	b29c      	uxth	r4, r3
 80126ec:	2001      	movs	r0, #1
 80126ee:	f7f9 f8bd 	bl	800b86c <lwip_htons>
 80126f2:	4603      	mov	r3, r0
 80126f4:	461a      	mov	r2, r3
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	68db      	ldr	r3, [r3, #12]
 80126fa:	4322      	orrs	r2, r4
 80126fc:	b292      	uxth	r2, r2
 80126fe:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	8b5b      	ldrh	r3, [r3, #26]
 8012704:	f043 0320 	orr.w	r3, r3, #32
 8012708:	b29a      	uxth	r2, r3
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801270e:	2300      	movs	r3, #0
 8012710:	e004      	b.n	801271c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012712:	2101      	movs	r1, #1
 8012714:	6878      	ldr	r0, [r7, #4]
 8012716:	f000 f80b 	bl	8012730 <tcp_enqueue_flags>
 801271a:	4603      	mov	r3, r0
}
 801271c:	4618      	mov	r0, r3
 801271e:	3714      	adds	r7, #20
 8012720:	46bd      	mov	sp, r7
 8012722:	bd90      	pop	{r4, r7, pc}
 8012724:	08019d50 	.word	0x08019d50
 8012728:	0801a158 	.word	0x0801a158
 801272c:	08019da4 	.word	0x08019da4

08012730 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012730:	b580      	push	{r7, lr}
 8012732:	b08a      	sub	sp, #40	@ 0x28
 8012734:	af02      	add	r7, sp, #8
 8012736:	6078      	str	r0, [r7, #4]
 8012738:	460b      	mov	r3, r1
 801273a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801273c:	2300      	movs	r3, #0
 801273e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012740:	2300      	movs	r3, #0
 8012742:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012744:	78fb      	ldrb	r3, [r7, #3]
 8012746:	f003 0303 	and.w	r3, r3, #3
 801274a:	2b00      	cmp	r3, #0
 801274c:	d106      	bne.n	801275c <tcp_enqueue_flags+0x2c>
 801274e:	4b67      	ldr	r3, [pc, #412]	@ (80128ec <tcp_enqueue_flags+0x1bc>)
 8012750:	f240 4211 	movw	r2, #1041	@ 0x411
 8012754:	4966      	ldr	r1, [pc, #408]	@ (80128f0 <tcp_enqueue_flags+0x1c0>)
 8012756:	4867      	ldr	r0, [pc, #412]	@ (80128f4 <tcp_enqueue_flags+0x1c4>)
 8012758:	f004 fa6a 	bl	8016c30 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	2b00      	cmp	r3, #0
 8012760:	d106      	bne.n	8012770 <tcp_enqueue_flags+0x40>
 8012762:	4b62      	ldr	r3, [pc, #392]	@ (80128ec <tcp_enqueue_flags+0x1bc>)
 8012764:	f240 4213 	movw	r2, #1043	@ 0x413
 8012768:	4963      	ldr	r1, [pc, #396]	@ (80128f8 <tcp_enqueue_flags+0x1c8>)
 801276a:	4862      	ldr	r0, [pc, #392]	@ (80128f4 <tcp_enqueue_flags+0x1c4>)
 801276c:	f004 fa60 	bl	8016c30 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012770:	78fb      	ldrb	r3, [r7, #3]
 8012772:	f003 0302 	and.w	r3, r3, #2
 8012776:	2b00      	cmp	r3, #0
 8012778:	d001      	beq.n	801277e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801277a:	2301      	movs	r3, #1
 801277c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801277e:	7ffb      	ldrb	r3, [r7, #31]
 8012780:	009b      	lsls	r3, r3, #2
 8012782:	b2db      	uxtb	r3, r3
 8012784:	f003 0304 	and.w	r3, r3, #4
 8012788:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801278a:	7dfb      	ldrb	r3, [r7, #23]
 801278c:	b29b      	uxth	r3, r3
 801278e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012792:	4619      	mov	r1, r3
 8012794:	2036      	movs	r0, #54	@ 0x36
 8012796:	f7fa fa2f 	bl	800cbf8 <pbuf_alloc>
 801279a:	6138      	str	r0, [r7, #16]
 801279c:	693b      	ldr	r3, [r7, #16]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d109      	bne.n	80127b6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	8b5b      	ldrh	r3, [r3, #26]
 80127a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80127aa:	b29a      	uxth	r2, r3
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80127b0:	f04f 33ff 	mov.w	r3, #4294967295
 80127b4:	e095      	b.n	80128e2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80127b6:	693b      	ldr	r3, [r7, #16]
 80127b8:	895a      	ldrh	r2, [r3, #10]
 80127ba:	7dfb      	ldrb	r3, [r7, #23]
 80127bc:	b29b      	uxth	r3, r3
 80127be:	429a      	cmp	r2, r3
 80127c0:	d206      	bcs.n	80127d0 <tcp_enqueue_flags+0xa0>
 80127c2:	4b4a      	ldr	r3, [pc, #296]	@ (80128ec <tcp_enqueue_flags+0x1bc>)
 80127c4:	f240 4239 	movw	r2, #1081	@ 0x439
 80127c8:	494c      	ldr	r1, [pc, #304]	@ (80128fc <tcp_enqueue_flags+0x1cc>)
 80127ca:	484a      	ldr	r0, [pc, #296]	@ (80128f4 <tcp_enqueue_flags+0x1c4>)
 80127cc:	f004 fa30 	bl	8016c30 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80127d4:	78fa      	ldrb	r2, [r7, #3]
 80127d6:	7ffb      	ldrb	r3, [r7, #31]
 80127d8:	9300      	str	r3, [sp, #0]
 80127da:	460b      	mov	r3, r1
 80127dc:	6939      	ldr	r1, [r7, #16]
 80127de:	6878      	ldr	r0, [r7, #4]
 80127e0:	f7ff f91a 	bl	8011a18 <tcp_create_segment>
 80127e4:	60f8      	str	r0, [r7, #12]
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d109      	bne.n	8012800 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	8b5b      	ldrh	r3, [r3, #26]
 80127f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80127f4:	b29a      	uxth	r2, r3
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80127fa:	f04f 33ff 	mov.w	r3, #4294967295
 80127fe:	e070      	b.n	80128e2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	68db      	ldr	r3, [r3, #12]
 8012804:	f003 0303 	and.w	r3, r3, #3
 8012808:	2b00      	cmp	r3, #0
 801280a:	d006      	beq.n	801281a <tcp_enqueue_flags+0xea>
 801280c:	4b37      	ldr	r3, [pc, #220]	@ (80128ec <tcp_enqueue_flags+0x1bc>)
 801280e:	f240 4242 	movw	r2, #1090	@ 0x442
 8012812:	493b      	ldr	r1, [pc, #236]	@ (8012900 <tcp_enqueue_flags+0x1d0>)
 8012814:	4837      	ldr	r0, [pc, #220]	@ (80128f4 <tcp_enqueue_flags+0x1c4>)
 8012816:	f004 fa0b 	bl	8016c30 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	891b      	ldrh	r3, [r3, #8]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d006      	beq.n	8012830 <tcp_enqueue_flags+0x100>
 8012822:	4b32      	ldr	r3, [pc, #200]	@ (80128ec <tcp_enqueue_flags+0x1bc>)
 8012824:	f240 4243 	movw	r2, #1091	@ 0x443
 8012828:	4936      	ldr	r1, [pc, #216]	@ (8012904 <tcp_enqueue_flags+0x1d4>)
 801282a:	4832      	ldr	r0, [pc, #200]	@ (80128f4 <tcp_enqueue_flags+0x1c4>)
 801282c:	f004 fa00 	bl	8016c30 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012834:	2b00      	cmp	r3, #0
 8012836:	d103      	bne.n	8012840 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	68fa      	ldr	r2, [r7, #12]
 801283c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801283e:	e00d      	b.n	801285c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012844:	61bb      	str	r3, [r7, #24]
 8012846:	e002      	b.n	801284e <tcp_enqueue_flags+0x11e>
 8012848:	69bb      	ldr	r3, [r7, #24]
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	61bb      	str	r3, [r7, #24]
 801284e:	69bb      	ldr	r3, [r7, #24]
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	2b00      	cmp	r3, #0
 8012854:	d1f8      	bne.n	8012848 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012856:	69bb      	ldr	r3, [r7, #24]
 8012858:	68fa      	ldr	r2, [r7, #12]
 801285a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	2200      	movs	r2, #0
 8012860:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012864:	78fb      	ldrb	r3, [r7, #3]
 8012866:	f003 0302 	and.w	r3, r3, #2
 801286a:	2b00      	cmp	r3, #0
 801286c:	d104      	bne.n	8012878 <tcp_enqueue_flags+0x148>
 801286e:	78fb      	ldrb	r3, [r7, #3]
 8012870:	f003 0301 	and.w	r3, r3, #1
 8012874:	2b00      	cmp	r3, #0
 8012876:	d004      	beq.n	8012882 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801287c:	1c5a      	adds	r2, r3, #1
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012882:	78fb      	ldrb	r3, [r7, #3]
 8012884:	f003 0301 	and.w	r3, r3, #1
 8012888:	2b00      	cmp	r3, #0
 801288a:	d006      	beq.n	801289a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	8b5b      	ldrh	r3, [r3, #26]
 8012890:	f043 0320 	orr.w	r3, r3, #32
 8012894:	b29a      	uxth	r2, r3
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	685b      	ldr	r3, [r3, #4]
 801289e:	4618      	mov	r0, r3
 80128a0:	f7fa fd1c 	bl	800d2dc <pbuf_clen>
 80128a4:	4603      	mov	r3, r0
 80128a6:	461a      	mov	r2, r3
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80128ae:	4413      	add	r3, r2
 80128b0:	b29a      	uxth	r2, r3
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d00e      	beq.n	80128e0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d10a      	bne.n	80128e0 <tcp_enqueue_flags+0x1b0>
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d106      	bne.n	80128e0 <tcp_enqueue_flags+0x1b0>
 80128d2:	4b06      	ldr	r3, [pc, #24]	@ (80128ec <tcp_enqueue_flags+0x1bc>)
 80128d4:	f240 4265 	movw	r2, #1125	@ 0x465
 80128d8:	490b      	ldr	r1, [pc, #44]	@ (8012908 <tcp_enqueue_flags+0x1d8>)
 80128da:	4806      	ldr	r0, [pc, #24]	@ (80128f4 <tcp_enqueue_flags+0x1c4>)
 80128dc:	f004 f9a8 	bl	8016c30 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80128e0:	2300      	movs	r3, #0
}
 80128e2:	4618      	mov	r0, r3
 80128e4:	3720      	adds	r7, #32
 80128e6:	46bd      	mov	sp, r7
 80128e8:	bd80      	pop	{r7, pc}
 80128ea:	bf00      	nop
 80128ec:	08019d50 	.word	0x08019d50
 80128f0:	0801a174 	.word	0x0801a174
 80128f4:	08019da4 	.word	0x08019da4
 80128f8:	0801a1cc 	.word	0x0801a1cc
 80128fc:	0801a1ec 	.word	0x0801a1ec
 8012900:	0801a228 	.word	0x0801a228
 8012904:	0801a240 	.word	0x0801a240
 8012908:	0801a26c 	.word	0x0801a26c

0801290c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801290c:	b5b0      	push	{r4, r5, r7, lr}
 801290e:	b08a      	sub	sp, #40	@ 0x28
 8012910:	af00      	add	r7, sp, #0
 8012912:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	2b00      	cmp	r3, #0
 8012918:	d106      	bne.n	8012928 <tcp_output+0x1c>
 801291a:	4b8a      	ldr	r3, [pc, #552]	@ (8012b44 <tcp_output+0x238>)
 801291c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8012920:	4989      	ldr	r1, [pc, #548]	@ (8012b48 <tcp_output+0x23c>)
 8012922:	488a      	ldr	r0, [pc, #552]	@ (8012b4c <tcp_output+0x240>)
 8012924:	f004 f984 	bl	8016c30 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	7d1b      	ldrb	r3, [r3, #20]
 801292c:	2b01      	cmp	r3, #1
 801292e:	d106      	bne.n	801293e <tcp_output+0x32>
 8012930:	4b84      	ldr	r3, [pc, #528]	@ (8012b44 <tcp_output+0x238>)
 8012932:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8012936:	4986      	ldr	r1, [pc, #536]	@ (8012b50 <tcp_output+0x244>)
 8012938:	4884      	ldr	r0, [pc, #528]	@ (8012b4c <tcp_output+0x240>)
 801293a:	f004 f979 	bl	8016c30 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801293e:	4b85      	ldr	r3, [pc, #532]	@ (8012b54 <tcp_output+0x248>)
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	687a      	ldr	r2, [r7, #4]
 8012944:	429a      	cmp	r2, r3
 8012946:	d101      	bne.n	801294c <tcp_output+0x40>
    return ERR_OK;
 8012948:	2300      	movs	r3, #0
 801294a:	e1ce      	b.n	8012cea <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012958:	4293      	cmp	r3, r2
 801295a:	bf28      	it	cs
 801295c:	4613      	movcs	r3, r2
 801295e:	b29b      	uxth	r3, r3
 8012960:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012966:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8012968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801296a:	2b00      	cmp	r3, #0
 801296c:	d10b      	bne.n	8012986 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	8b5b      	ldrh	r3, [r3, #26]
 8012972:	f003 0302 	and.w	r3, r3, #2
 8012976:	2b00      	cmp	r3, #0
 8012978:	f000 81aa 	beq.w	8012cd0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801297c:	6878      	ldr	r0, [r7, #4]
 801297e:	f000 fdcb 	bl	8013518 <tcp_send_empty_ack>
 8012982:	4603      	mov	r3, r0
 8012984:	e1b1      	b.n	8012cea <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012986:	6879      	ldr	r1, [r7, #4]
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	3304      	adds	r3, #4
 801298c:	461a      	mov	r2, r3
 801298e:	6878      	ldr	r0, [r7, #4]
 8012990:	f7ff f826 	bl	80119e0 <tcp_route>
 8012994:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012996:	697b      	ldr	r3, [r7, #20]
 8012998:	2b00      	cmp	r3, #0
 801299a:	d102      	bne.n	80129a2 <tcp_output+0x96>
    return ERR_RTE;
 801299c:	f06f 0303 	mvn.w	r3, #3
 80129a0:	e1a3      	b.n	8012cea <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d003      	beq.n	80129b0 <tcp_output+0xa4>
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d111      	bne.n	80129d4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80129b0:	697b      	ldr	r3, [r7, #20]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d002      	beq.n	80129bc <tcp_output+0xb0>
 80129b6:	697b      	ldr	r3, [r7, #20]
 80129b8:	3304      	adds	r3, #4
 80129ba:	e000      	b.n	80129be <tcp_output+0xb2>
 80129bc:	2300      	movs	r3, #0
 80129be:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80129c0:	693b      	ldr	r3, [r7, #16]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d102      	bne.n	80129cc <tcp_output+0xc0>
      return ERR_RTE;
 80129c6:	f06f 0303 	mvn.w	r3, #3
 80129ca:	e18e      	b.n	8012cea <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80129cc:	693b      	ldr	r3, [r7, #16]
 80129ce:	681a      	ldr	r2, [r3, #0]
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80129d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129d6:	68db      	ldr	r3, [r3, #12]
 80129d8:	685b      	ldr	r3, [r3, #4]
 80129da:	4618      	mov	r0, r3
 80129dc:	f7f8 ff5b 	bl	800b896 <lwip_htonl>
 80129e0:	4602      	mov	r2, r0
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80129e6:	1ad3      	subs	r3, r2, r3
 80129e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80129ea:	8912      	ldrh	r2, [r2, #8]
 80129ec:	4413      	add	r3, r2
 80129ee:	69ba      	ldr	r2, [r7, #24]
 80129f0:	429a      	cmp	r2, r3
 80129f2:	d227      	bcs.n	8012a44 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80129fa:	461a      	mov	r2, r3
 80129fc:	69bb      	ldr	r3, [r7, #24]
 80129fe:	4293      	cmp	r3, r2
 8012a00:	d114      	bne.n	8012a2c <tcp_output+0x120>
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d110      	bne.n	8012a2c <tcp_output+0x120>
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d10b      	bne.n	8012a2c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	2200      	movs	r2, #0
 8012a18:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	2201      	movs	r2, #1
 8012a20:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	2200      	movs	r2, #0
 8012a28:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	8b5b      	ldrh	r3, [r3, #26]
 8012a30:	f003 0302 	and.w	r3, r3, #2
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	f000 814d 	beq.w	8012cd4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8012a3a:	6878      	ldr	r0, [r7, #4]
 8012a3c:	f000 fd6c 	bl	8013518 <tcp_send_empty_ack>
 8012a40:	4603      	mov	r3, r0
 8012a42:	e152      	b.n	8012cea <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	2200      	movs	r2, #0
 8012a48:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012a50:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012a52:	6a3b      	ldr	r3, [r7, #32]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	f000 811c 	beq.w	8012c92 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012a5a:	e002      	b.n	8012a62 <tcp_output+0x156>
 8012a5c:	6a3b      	ldr	r3, [r7, #32]
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	623b      	str	r3, [r7, #32]
 8012a62:	6a3b      	ldr	r3, [r7, #32]
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d1f8      	bne.n	8012a5c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012a6a:	e112      	b.n	8012c92 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a6e:	68db      	ldr	r3, [r3, #12]
 8012a70:	899b      	ldrh	r3, [r3, #12]
 8012a72:	b29b      	uxth	r3, r3
 8012a74:	4618      	mov	r0, r3
 8012a76:	f7f8 fef9 	bl	800b86c <lwip_htons>
 8012a7a:	4603      	mov	r3, r0
 8012a7c:	b2db      	uxtb	r3, r3
 8012a7e:	f003 0304 	and.w	r3, r3, #4
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d006      	beq.n	8012a94 <tcp_output+0x188>
 8012a86:	4b2f      	ldr	r3, [pc, #188]	@ (8012b44 <tcp_output+0x238>)
 8012a88:	f240 5236 	movw	r2, #1334	@ 0x536
 8012a8c:	4932      	ldr	r1, [pc, #200]	@ (8012b58 <tcp_output+0x24c>)
 8012a8e:	482f      	ldr	r0, [pc, #188]	@ (8012b4c <tcp_output+0x240>)
 8012a90:	f004 f8ce 	bl	8016c30 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d01f      	beq.n	8012adc <tcp_output+0x1d0>
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	8b5b      	ldrh	r3, [r3, #26]
 8012aa0:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d119      	bne.n	8012adc <tcp_output+0x1d0>
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d00b      	beq.n	8012ac8 <tcp_output+0x1bc>
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d110      	bne.n	8012adc <tcp_output+0x1d0>
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012abe:	891a      	ldrh	r2, [r3, #8]
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012ac4:	429a      	cmp	r2, r3
 8012ac6:	d209      	bcs.n	8012adc <tcp_output+0x1d0>
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d004      	beq.n	8012adc <tcp_output+0x1d0>
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012ad8:	2b08      	cmp	r3, #8
 8012ada:	d901      	bls.n	8012ae0 <tcp_output+0x1d4>
 8012adc:	2301      	movs	r3, #1
 8012ade:	e000      	b.n	8012ae2 <tcp_output+0x1d6>
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d106      	bne.n	8012af4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	8b5b      	ldrh	r3, [r3, #26]
 8012aea:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	f000 80e4 	beq.w	8012cbc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	7d1b      	ldrb	r3, [r3, #20]
 8012af8:	2b02      	cmp	r3, #2
 8012afa:	d00d      	beq.n	8012b18 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012afe:	68db      	ldr	r3, [r3, #12]
 8012b00:	899b      	ldrh	r3, [r3, #12]
 8012b02:	b29c      	uxth	r4, r3
 8012b04:	2010      	movs	r0, #16
 8012b06:	f7f8 feb1 	bl	800b86c <lwip_htons>
 8012b0a:	4603      	mov	r3, r0
 8012b0c:	461a      	mov	r2, r3
 8012b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b10:	68db      	ldr	r3, [r3, #12]
 8012b12:	4322      	orrs	r2, r4
 8012b14:	b292      	uxth	r2, r2
 8012b16:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012b18:	697a      	ldr	r2, [r7, #20]
 8012b1a:	6879      	ldr	r1, [r7, #4]
 8012b1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012b1e:	f000 f909 	bl	8012d34 <tcp_output_segment>
 8012b22:	4603      	mov	r3, r0
 8012b24:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d016      	beq.n	8012b5c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	8b5b      	ldrh	r3, [r3, #26]
 8012b32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012b36:	b29a      	uxth	r2, r3
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	835a      	strh	r2, [r3, #26]
      return err;
 8012b3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b40:	e0d3      	b.n	8012cea <tcp_output+0x3de>
 8012b42:	bf00      	nop
 8012b44:	08019d50 	.word	0x08019d50
 8012b48:	0801a294 	.word	0x0801a294
 8012b4c:	08019da4 	.word	0x08019da4
 8012b50:	0801a2ac 	.word	0x0801a2ac
 8012b54:	24007f50 	.word	0x24007f50
 8012b58:	0801a2d4 	.word	0x0801a2d4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b5e:	681a      	ldr	r2, [r3, #0]
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	7d1b      	ldrb	r3, [r3, #20]
 8012b68:	2b02      	cmp	r3, #2
 8012b6a:	d006      	beq.n	8012b7a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	8b5b      	ldrh	r3, [r3, #26]
 8012b70:	f023 0303 	bic.w	r3, r3, #3
 8012b74:	b29a      	uxth	r2, r3
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b7c:	68db      	ldr	r3, [r3, #12]
 8012b7e:	685b      	ldr	r3, [r3, #4]
 8012b80:	4618      	mov	r0, r3
 8012b82:	f7f8 fe88 	bl	800b896 <lwip_htonl>
 8012b86:	4604      	mov	r4, r0
 8012b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b8a:	891b      	ldrh	r3, [r3, #8]
 8012b8c:	461d      	mov	r5, r3
 8012b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b90:	68db      	ldr	r3, [r3, #12]
 8012b92:	899b      	ldrh	r3, [r3, #12]
 8012b94:	b29b      	uxth	r3, r3
 8012b96:	4618      	mov	r0, r3
 8012b98:	f7f8 fe68 	bl	800b86c <lwip_htons>
 8012b9c:	4603      	mov	r3, r0
 8012b9e:	b2db      	uxtb	r3, r3
 8012ba0:	f003 0303 	and.w	r3, r3, #3
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d001      	beq.n	8012bac <tcp_output+0x2a0>
 8012ba8:	2301      	movs	r3, #1
 8012baa:	e000      	b.n	8012bae <tcp_output+0x2a2>
 8012bac:	2300      	movs	r3, #0
 8012bae:	442b      	add	r3, r5
 8012bb0:	4423      	add	r3, r4
 8012bb2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012bb8:	68bb      	ldr	r3, [r7, #8]
 8012bba:	1ad3      	subs	r3, r2, r3
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	da02      	bge.n	8012bc6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	68ba      	ldr	r2, [r7, #8]
 8012bc4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bc8:	891b      	ldrh	r3, [r3, #8]
 8012bca:	461c      	mov	r4, r3
 8012bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bce:	68db      	ldr	r3, [r3, #12]
 8012bd0:	899b      	ldrh	r3, [r3, #12]
 8012bd2:	b29b      	uxth	r3, r3
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	f7f8 fe49 	bl	800b86c <lwip_htons>
 8012bda:	4603      	mov	r3, r0
 8012bdc:	b2db      	uxtb	r3, r3
 8012bde:	f003 0303 	and.w	r3, r3, #3
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d001      	beq.n	8012bea <tcp_output+0x2de>
 8012be6:	2301      	movs	r3, #1
 8012be8:	e000      	b.n	8012bec <tcp_output+0x2e0>
 8012bea:	2300      	movs	r3, #0
 8012bec:	4423      	add	r3, r4
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d049      	beq.n	8012c86 <tcp_output+0x37a>
      seg->next = NULL;
 8012bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bf4:	2200      	movs	r2, #0
 8012bf6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d105      	bne.n	8012c0c <tcp_output+0x300>
        pcb->unacked = seg;
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012c04:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8012c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c08:	623b      	str	r3, [r7, #32]
 8012c0a:	e03f      	b.n	8012c8c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c0e:	68db      	ldr	r3, [r3, #12]
 8012c10:	685b      	ldr	r3, [r3, #4]
 8012c12:	4618      	mov	r0, r3
 8012c14:	f7f8 fe3f 	bl	800b896 <lwip_htonl>
 8012c18:	4604      	mov	r4, r0
 8012c1a:	6a3b      	ldr	r3, [r7, #32]
 8012c1c:	68db      	ldr	r3, [r3, #12]
 8012c1e:	685b      	ldr	r3, [r3, #4]
 8012c20:	4618      	mov	r0, r3
 8012c22:	f7f8 fe38 	bl	800b896 <lwip_htonl>
 8012c26:	4603      	mov	r3, r0
 8012c28:	1ae3      	subs	r3, r4, r3
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	da24      	bge.n	8012c78 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	3370      	adds	r3, #112	@ 0x70
 8012c32:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012c34:	e002      	b.n	8012c3c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012c36:	69fb      	ldr	r3, [r7, #28]
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012c3c:	69fb      	ldr	r3, [r7, #28]
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d011      	beq.n	8012c68 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012c44:	69fb      	ldr	r3, [r7, #28]
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	68db      	ldr	r3, [r3, #12]
 8012c4a:	685b      	ldr	r3, [r3, #4]
 8012c4c:	4618      	mov	r0, r3
 8012c4e:	f7f8 fe22 	bl	800b896 <lwip_htonl>
 8012c52:	4604      	mov	r4, r0
 8012c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c56:	68db      	ldr	r3, [r3, #12]
 8012c58:	685b      	ldr	r3, [r3, #4]
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	f7f8 fe1b 	bl	800b896 <lwip_htonl>
 8012c60:	4603      	mov	r3, r0
 8012c62:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	dbe6      	blt.n	8012c36 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012c68:	69fb      	ldr	r3, [r7, #28]
 8012c6a:	681a      	ldr	r2, [r3, #0]
 8012c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c6e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012c70:	69fb      	ldr	r3, [r7, #28]
 8012c72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012c74:	601a      	str	r2, [r3, #0]
 8012c76:	e009      	b.n	8012c8c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012c78:	6a3b      	ldr	r3, [r7, #32]
 8012c7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012c7c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012c7e:	6a3b      	ldr	r3, [r7, #32]
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	623b      	str	r3, [r7, #32]
 8012c84:	e002      	b.n	8012c8c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012c86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012c88:	f7fb ff1f 	bl	800eaca <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012c90:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8012c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d012      	beq.n	8012cbe <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c9a:	68db      	ldr	r3, [r3, #12]
 8012c9c:	685b      	ldr	r3, [r3, #4]
 8012c9e:	4618      	mov	r0, r3
 8012ca0:	f7f8 fdf9 	bl	800b896 <lwip_htonl>
 8012ca4:	4602      	mov	r2, r0
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012caa:	1ad3      	subs	r3, r2, r3
 8012cac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012cae:	8912      	ldrh	r2, [r2, #8]
 8012cb0:	4413      	add	r3, r2
  while (seg != NULL &&
 8012cb2:	69ba      	ldr	r2, [r7, #24]
 8012cb4:	429a      	cmp	r2, r3
 8012cb6:	f4bf aed9 	bcs.w	8012a6c <tcp_output+0x160>
 8012cba:	e000      	b.n	8012cbe <tcp_output+0x3b2>
      break;
 8012cbc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d108      	bne.n	8012cd8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	2200      	movs	r2, #0
 8012cca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8012cce:	e004      	b.n	8012cda <tcp_output+0x3ce>
    goto output_done;
 8012cd0:	bf00      	nop
 8012cd2:	e002      	b.n	8012cda <tcp_output+0x3ce>
    goto output_done;
 8012cd4:	bf00      	nop
 8012cd6:	e000      	b.n	8012cda <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012cd8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	8b5b      	ldrh	r3, [r3, #26]
 8012cde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012ce2:	b29a      	uxth	r2, r3
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012ce8:	2300      	movs	r3, #0
}
 8012cea:	4618      	mov	r0, r3
 8012cec:	3728      	adds	r7, #40	@ 0x28
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	bdb0      	pop	{r4, r5, r7, pc}
 8012cf2:	bf00      	nop

08012cf4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012cf4:	b580      	push	{r7, lr}
 8012cf6:	b082      	sub	sp, #8
 8012cf8:	af00      	add	r7, sp, #0
 8012cfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d106      	bne.n	8012d10 <tcp_output_segment_busy+0x1c>
 8012d02:	4b09      	ldr	r3, [pc, #36]	@ (8012d28 <tcp_output_segment_busy+0x34>)
 8012d04:	f240 529a 	movw	r2, #1434	@ 0x59a
 8012d08:	4908      	ldr	r1, [pc, #32]	@ (8012d2c <tcp_output_segment_busy+0x38>)
 8012d0a:	4809      	ldr	r0, [pc, #36]	@ (8012d30 <tcp_output_segment_busy+0x3c>)
 8012d0c:	f003 ff90 	bl	8016c30 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	685b      	ldr	r3, [r3, #4]
 8012d14:	7b9b      	ldrb	r3, [r3, #14]
 8012d16:	2b01      	cmp	r3, #1
 8012d18:	d001      	beq.n	8012d1e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012d1a:	2301      	movs	r3, #1
 8012d1c:	e000      	b.n	8012d20 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012d1e:	2300      	movs	r3, #0
}
 8012d20:	4618      	mov	r0, r3
 8012d22:	3708      	adds	r7, #8
 8012d24:	46bd      	mov	sp, r7
 8012d26:	bd80      	pop	{r7, pc}
 8012d28:	08019d50 	.word	0x08019d50
 8012d2c:	0801a2ec 	.word	0x0801a2ec
 8012d30:	08019da4 	.word	0x08019da4

08012d34 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012d34:	b5b0      	push	{r4, r5, r7, lr}
 8012d36:	b08c      	sub	sp, #48	@ 0x30
 8012d38:	af04      	add	r7, sp, #16
 8012d3a:	60f8      	str	r0, [r7, #12]
 8012d3c:	60b9      	str	r1, [r7, #8]
 8012d3e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d106      	bne.n	8012d54 <tcp_output_segment+0x20>
 8012d46:	4b64      	ldr	r3, [pc, #400]	@ (8012ed8 <tcp_output_segment+0x1a4>)
 8012d48:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8012d4c:	4963      	ldr	r1, [pc, #396]	@ (8012edc <tcp_output_segment+0x1a8>)
 8012d4e:	4864      	ldr	r0, [pc, #400]	@ (8012ee0 <tcp_output_segment+0x1ac>)
 8012d50:	f003 ff6e 	bl	8016c30 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012d54:	68bb      	ldr	r3, [r7, #8]
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d106      	bne.n	8012d68 <tcp_output_segment+0x34>
 8012d5a:	4b5f      	ldr	r3, [pc, #380]	@ (8012ed8 <tcp_output_segment+0x1a4>)
 8012d5c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8012d60:	4960      	ldr	r1, [pc, #384]	@ (8012ee4 <tcp_output_segment+0x1b0>)
 8012d62:	485f      	ldr	r0, [pc, #380]	@ (8012ee0 <tcp_output_segment+0x1ac>)
 8012d64:	f003 ff64 	bl	8016c30 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d106      	bne.n	8012d7c <tcp_output_segment+0x48>
 8012d6e:	4b5a      	ldr	r3, [pc, #360]	@ (8012ed8 <tcp_output_segment+0x1a4>)
 8012d70:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8012d74:	495c      	ldr	r1, [pc, #368]	@ (8012ee8 <tcp_output_segment+0x1b4>)
 8012d76:	485a      	ldr	r0, [pc, #360]	@ (8012ee0 <tcp_output_segment+0x1ac>)
 8012d78:	f003 ff5a 	bl	8016c30 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012d7c:	68f8      	ldr	r0, [r7, #12]
 8012d7e:	f7ff ffb9 	bl	8012cf4 <tcp_output_segment_busy>
 8012d82:	4603      	mov	r3, r0
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d001      	beq.n	8012d8c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012d88:	2300      	movs	r3, #0
 8012d8a:	e0a1      	b.n	8012ed0 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012d8c:	68bb      	ldr	r3, [r7, #8]
 8012d8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	68dc      	ldr	r4, [r3, #12]
 8012d94:	4610      	mov	r0, r2
 8012d96:	f7f8 fd7e 	bl	800b896 <lwip_htonl>
 8012d9a:	4603      	mov	r3, r0
 8012d9c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012d9e:	68bb      	ldr	r3, [r7, #8]
 8012da0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	68dc      	ldr	r4, [r3, #12]
 8012da6:	4610      	mov	r0, r2
 8012da8:	f7f8 fd60 	bl	800b86c <lwip_htons>
 8012dac:	4603      	mov	r3, r0
 8012dae:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012db0:	68bb      	ldr	r3, [r7, #8]
 8012db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012db4:	68ba      	ldr	r2, [r7, #8]
 8012db6:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8012db8:	441a      	add	r2, r3
 8012dba:	68bb      	ldr	r3, [r7, #8]
 8012dbc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	68db      	ldr	r3, [r3, #12]
 8012dc2:	3314      	adds	r3, #20
 8012dc4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	7a9b      	ldrb	r3, [r3, #10]
 8012dca:	f003 0301 	and.w	r3, r3, #1
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d015      	beq.n	8012dfe <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012dd2:	68bb      	ldr	r3, [r7, #8]
 8012dd4:	3304      	adds	r3, #4
 8012dd6:	461a      	mov	r2, r3
 8012dd8:	6879      	ldr	r1, [r7, #4]
 8012dda:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8012dde:	f7fc fa39 	bl	800f254 <tcp_eff_send_mss_netif>
 8012de2:	4603      	mov	r3, r0
 8012de4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012de6:	8b7b      	ldrh	r3, [r7, #26]
 8012de8:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8012dec:	4618      	mov	r0, r3
 8012dee:	f7f8 fd52 	bl	800b896 <lwip_htonl>
 8012df2:	4602      	mov	r2, r0
 8012df4:	69fb      	ldr	r3, [r7, #28]
 8012df6:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012df8:	69fb      	ldr	r3, [r7, #28]
 8012dfa:	3304      	adds	r3, #4
 8012dfc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012dfe:	68bb      	ldr	r3, [r7, #8]
 8012e00:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	da02      	bge.n	8012e0e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012e08:	68bb      	ldr	r3, [r7, #8]
 8012e0a:	2200      	movs	r2, #0
 8012e0c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8012e0e:	68bb      	ldr	r3, [r7, #8]
 8012e10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d10c      	bne.n	8012e30 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012e16:	4b35      	ldr	r3, [pc, #212]	@ (8012eec <tcp_output_segment+0x1b8>)
 8012e18:	681a      	ldr	r2, [r3, #0]
 8012e1a:	68bb      	ldr	r3, [r7, #8]
 8012e1c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	68db      	ldr	r3, [r3, #12]
 8012e22:	685b      	ldr	r3, [r3, #4]
 8012e24:	4618      	mov	r0, r3
 8012e26:	f7f8 fd36 	bl	800b896 <lwip_htonl>
 8012e2a:	4602      	mov	r2, r0
 8012e2c:	68bb      	ldr	r3, [r7, #8]
 8012e2e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	68da      	ldr	r2, [r3, #12]
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	685b      	ldr	r3, [r3, #4]
 8012e38:	685b      	ldr	r3, [r3, #4]
 8012e3a:	1ad3      	subs	r3, r2, r3
 8012e3c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	685b      	ldr	r3, [r3, #4]
 8012e42:	8959      	ldrh	r1, [r3, #10]
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	685b      	ldr	r3, [r3, #4]
 8012e48:	8b3a      	ldrh	r2, [r7, #24]
 8012e4a:	1a8a      	subs	r2, r1, r2
 8012e4c:	b292      	uxth	r2, r2
 8012e4e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	685b      	ldr	r3, [r3, #4]
 8012e54:	8919      	ldrh	r1, [r3, #8]
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	685b      	ldr	r3, [r3, #4]
 8012e5a:	8b3a      	ldrh	r2, [r7, #24]
 8012e5c:	1a8a      	subs	r2, r1, r2
 8012e5e:	b292      	uxth	r2, r2
 8012e60:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	685b      	ldr	r3, [r3, #4]
 8012e66:	68fa      	ldr	r2, [r7, #12]
 8012e68:	68d2      	ldr	r2, [r2, #12]
 8012e6a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	68db      	ldr	r3, [r3, #12]
 8012e70:	2200      	movs	r2, #0
 8012e72:	741a      	strb	r2, [r3, #16]
 8012e74:	2200      	movs	r2, #0
 8012e76:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	68da      	ldr	r2, [r3, #12]
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	7a9b      	ldrb	r3, [r3, #10]
 8012e80:	f003 0301 	and.w	r3, r3, #1
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d001      	beq.n	8012e8c <tcp_output_segment+0x158>
 8012e88:	2318      	movs	r3, #24
 8012e8a:	e000      	b.n	8012e8e <tcp_output_segment+0x15a>
 8012e8c:	2314      	movs	r3, #20
 8012e8e:	4413      	add	r3, r2
 8012e90:	69fa      	ldr	r2, [r7, #28]
 8012e92:	429a      	cmp	r2, r3
 8012e94:	d006      	beq.n	8012ea4 <tcp_output_segment+0x170>
 8012e96:	4b10      	ldr	r3, [pc, #64]	@ (8012ed8 <tcp_output_segment+0x1a4>)
 8012e98:	f240 621c 	movw	r2, #1564	@ 0x61c
 8012e9c:	4914      	ldr	r1, [pc, #80]	@ (8012ef0 <tcp_output_segment+0x1bc>)
 8012e9e:	4810      	ldr	r0, [pc, #64]	@ (8012ee0 <tcp_output_segment+0x1ac>)
 8012ea0:	f003 fec6 	bl	8016c30 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	6858      	ldr	r0, [r3, #4]
 8012ea8:	68b9      	ldr	r1, [r7, #8]
 8012eaa:	68bb      	ldr	r3, [r7, #8]
 8012eac:	1d1c      	adds	r4, r3, #4
 8012eae:	68bb      	ldr	r3, [r7, #8]
 8012eb0:	7add      	ldrb	r5, [r3, #11]
 8012eb2:	68bb      	ldr	r3, [r7, #8]
 8012eb4:	7a9b      	ldrb	r3, [r3, #10]
 8012eb6:	687a      	ldr	r2, [r7, #4]
 8012eb8:	9202      	str	r2, [sp, #8]
 8012eba:	2206      	movs	r2, #6
 8012ebc:	9201      	str	r2, [sp, #4]
 8012ebe:	9300      	str	r3, [sp, #0]
 8012ec0:	462b      	mov	r3, r5
 8012ec2:	4622      	mov	r2, r4
 8012ec4:	f002 fbd0 	bl	8015668 <ip4_output_if>
 8012ec8:	4603      	mov	r3, r0
 8012eca:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012ecc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	3720      	adds	r7, #32
 8012ed4:	46bd      	mov	sp, r7
 8012ed6:	bdb0      	pop	{r4, r5, r7, pc}
 8012ed8:	08019d50 	.word	0x08019d50
 8012edc:	0801a314 	.word	0x0801a314
 8012ee0:	08019da4 	.word	0x08019da4
 8012ee4:	0801a334 	.word	0x0801a334
 8012ee8:	0801a354 	.word	0x0801a354
 8012eec:	24007f04 	.word	0x24007f04
 8012ef0:	0801a378 	.word	0x0801a378

08012ef4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012ef4:	b5b0      	push	{r4, r5, r7, lr}
 8012ef6:	b084      	sub	sp, #16
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d106      	bne.n	8012f10 <tcp_rexmit_rto_prepare+0x1c>
 8012f02:	4b31      	ldr	r3, [pc, #196]	@ (8012fc8 <tcp_rexmit_rto_prepare+0xd4>)
 8012f04:	f240 6263 	movw	r2, #1635	@ 0x663
 8012f08:	4930      	ldr	r1, [pc, #192]	@ (8012fcc <tcp_rexmit_rto_prepare+0xd8>)
 8012f0a:	4831      	ldr	r0, [pc, #196]	@ (8012fd0 <tcp_rexmit_rto_prepare+0xdc>)
 8012f0c:	f003 fe90 	bl	8016c30 <iprintf>

  if (pcb->unacked == NULL) {
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d102      	bne.n	8012f1e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012f18:	f06f 0305 	mvn.w	r3, #5
 8012f1c:	e050      	b.n	8012fc0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012f22:	60fb      	str	r3, [r7, #12]
 8012f24:	e00b      	b.n	8012f3e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012f26:	68f8      	ldr	r0, [r7, #12]
 8012f28:	f7ff fee4 	bl	8012cf4 <tcp_output_segment_busy>
 8012f2c:	4603      	mov	r3, r0
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d002      	beq.n	8012f38 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012f32:	f06f 0305 	mvn.w	r3, #5
 8012f36:	e043      	b.n	8012fc0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	60fb      	str	r3, [r7, #12]
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d1ef      	bne.n	8012f26 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012f46:	68f8      	ldr	r0, [r7, #12]
 8012f48:	f7ff fed4 	bl	8012cf4 <tcp_output_segment_busy>
 8012f4c:	4603      	mov	r3, r0
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d002      	beq.n	8012f58 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012f52:	f06f 0305 	mvn.w	r3, #5
 8012f56:	e033      	b.n	8012fc0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	8b5b      	ldrh	r3, [r3, #26]
 8012f72:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8012f76:	b29a      	uxth	r2, r3
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	68db      	ldr	r3, [r3, #12]
 8012f80:	685b      	ldr	r3, [r3, #4]
 8012f82:	4618      	mov	r0, r3
 8012f84:	f7f8 fc87 	bl	800b896 <lwip_htonl>
 8012f88:	4604      	mov	r4, r0
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	891b      	ldrh	r3, [r3, #8]
 8012f8e:	461d      	mov	r5, r3
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	68db      	ldr	r3, [r3, #12]
 8012f94:	899b      	ldrh	r3, [r3, #12]
 8012f96:	b29b      	uxth	r3, r3
 8012f98:	4618      	mov	r0, r3
 8012f9a:	f7f8 fc67 	bl	800b86c <lwip_htons>
 8012f9e:	4603      	mov	r3, r0
 8012fa0:	b2db      	uxtb	r3, r3
 8012fa2:	f003 0303 	and.w	r3, r3, #3
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d001      	beq.n	8012fae <tcp_rexmit_rto_prepare+0xba>
 8012faa:	2301      	movs	r3, #1
 8012fac:	e000      	b.n	8012fb0 <tcp_rexmit_rto_prepare+0xbc>
 8012fae:	2300      	movs	r3, #0
 8012fb0:	442b      	add	r3, r5
 8012fb2:	18e2      	adds	r2, r4, r3
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	2200      	movs	r2, #0
 8012fbc:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8012fbe:	2300      	movs	r3, #0
}
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	3710      	adds	r7, #16
 8012fc4:	46bd      	mov	sp, r7
 8012fc6:	bdb0      	pop	{r4, r5, r7, pc}
 8012fc8:	08019d50 	.word	0x08019d50
 8012fcc:	0801a38c 	.word	0x0801a38c
 8012fd0:	08019da4 	.word	0x08019da4

08012fd4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	b082      	sub	sp, #8
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d106      	bne.n	8012ff0 <tcp_rexmit_rto_commit+0x1c>
 8012fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8013018 <tcp_rexmit_rto_commit+0x44>)
 8012fe4:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8012fe8:	490c      	ldr	r1, [pc, #48]	@ (801301c <tcp_rexmit_rto_commit+0x48>)
 8012fea:	480d      	ldr	r0, [pc, #52]	@ (8013020 <tcp_rexmit_rto_commit+0x4c>)
 8012fec:	f003 fe20 	bl	8016c30 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012ff6:	2bff      	cmp	r3, #255	@ 0xff
 8012ff8:	d007      	beq.n	801300a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013000:	3301      	adds	r3, #1
 8013002:	b2da      	uxtb	r2, r3
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801300a:	6878      	ldr	r0, [r7, #4]
 801300c:	f7ff fc7e 	bl	801290c <tcp_output>
}
 8013010:	bf00      	nop
 8013012:	3708      	adds	r7, #8
 8013014:	46bd      	mov	sp, r7
 8013016:	bd80      	pop	{r7, pc}
 8013018:	08019d50 	.word	0x08019d50
 801301c:	0801a3b0 	.word	0x0801a3b0
 8013020:	08019da4 	.word	0x08019da4

08013024 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013024:	b580      	push	{r7, lr}
 8013026:	b082      	sub	sp, #8
 8013028:	af00      	add	r7, sp, #0
 801302a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	2b00      	cmp	r3, #0
 8013030:	d106      	bne.n	8013040 <tcp_rexmit_rto+0x1c>
 8013032:	4b0a      	ldr	r3, [pc, #40]	@ (801305c <tcp_rexmit_rto+0x38>)
 8013034:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8013038:	4909      	ldr	r1, [pc, #36]	@ (8013060 <tcp_rexmit_rto+0x3c>)
 801303a:	480a      	ldr	r0, [pc, #40]	@ (8013064 <tcp_rexmit_rto+0x40>)
 801303c:	f003 fdf8 	bl	8016c30 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013040:	6878      	ldr	r0, [r7, #4]
 8013042:	f7ff ff57 	bl	8012ef4 <tcp_rexmit_rto_prepare>
 8013046:	4603      	mov	r3, r0
 8013048:	2b00      	cmp	r3, #0
 801304a:	d102      	bne.n	8013052 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801304c:	6878      	ldr	r0, [r7, #4]
 801304e:	f7ff ffc1 	bl	8012fd4 <tcp_rexmit_rto_commit>
  }
}
 8013052:	bf00      	nop
 8013054:	3708      	adds	r7, #8
 8013056:	46bd      	mov	sp, r7
 8013058:	bd80      	pop	{r7, pc}
 801305a:	bf00      	nop
 801305c:	08019d50 	.word	0x08019d50
 8013060:	0801a3d4 	.word	0x0801a3d4
 8013064:	08019da4 	.word	0x08019da4

08013068 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013068:	b590      	push	{r4, r7, lr}
 801306a:	b085      	sub	sp, #20
 801306c:	af00      	add	r7, sp, #0
 801306e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	2b00      	cmp	r3, #0
 8013074:	d106      	bne.n	8013084 <tcp_rexmit+0x1c>
 8013076:	4b2f      	ldr	r3, [pc, #188]	@ (8013134 <tcp_rexmit+0xcc>)
 8013078:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 801307c:	492e      	ldr	r1, [pc, #184]	@ (8013138 <tcp_rexmit+0xd0>)
 801307e:	482f      	ldr	r0, [pc, #188]	@ (801313c <tcp_rexmit+0xd4>)
 8013080:	f003 fdd6 	bl	8016c30 <iprintf>

  if (pcb->unacked == NULL) {
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013088:	2b00      	cmp	r3, #0
 801308a:	d102      	bne.n	8013092 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801308c:	f06f 0305 	mvn.w	r3, #5
 8013090:	e04c      	b.n	801312c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013096:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013098:	68b8      	ldr	r0, [r7, #8]
 801309a:	f7ff fe2b 	bl	8012cf4 <tcp_output_segment_busy>
 801309e:	4603      	mov	r3, r0
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d002      	beq.n	80130aa <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80130a4:	f06f 0305 	mvn.w	r3, #5
 80130a8:	e040      	b.n	801312c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80130aa:	68bb      	ldr	r3, [r7, #8]
 80130ac:	681a      	ldr	r2, [r3, #0]
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	336c      	adds	r3, #108	@ 0x6c
 80130b6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80130b8:	e002      	b.n	80130c0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80130c0:	68fb      	ldr	r3, [r7, #12]
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d011      	beq.n	80130ec <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	68db      	ldr	r3, [r3, #12]
 80130ce:	685b      	ldr	r3, [r3, #4]
 80130d0:	4618      	mov	r0, r3
 80130d2:	f7f8 fbe0 	bl	800b896 <lwip_htonl>
 80130d6:	4604      	mov	r4, r0
 80130d8:	68bb      	ldr	r3, [r7, #8]
 80130da:	68db      	ldr	r3, [r3, #12]
 80130dc:	685b      	ldr	r3, [r3, #4]
 80130de:	4618      	mov	r0, r3
 80130e0:	f7f8 fbd9 	bl	800b896 <lwip_htonl>
 80130e4:	4603      	mov	r3, r0
 80130e6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	dbe6      	blt.n	80130ba <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	681a      	ldr	r2, [r3, #0]
 80130f0:	68bb      	ldr	r3, [r7, #8]
 80130f2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	68ba      	ldr	r2, [r7, #8]
 80130f8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80130fa:	68bb      	ldr	r3, [r7, #8]
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d103      	bne.n	801310a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	2200      	movs	r2, #0
 8013106:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013110:	2bff      	cmp	r3, #255	@ 0xff
 8013112:	d007      	beq.n	8013124 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801311a:	3301      	adds	r3, #1
 801311c:	b2da      	uxtb	r2, r3
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	2200      	movs	r2, #0
 8013128:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801312a:	2300      	movs	r3, #0
}
 801312c:	4618      	mov	r0, r3
 801312e:	3714      	adds	r7, #20
 8013130:	46bd      	mov	sp, r7
 8013132:	bd90      	pop	{r4, r7, pc}
 8013134:	08019d50 	.word	0x08019d50
 8013138:	0801a3f0 	.word	0x0801a3f0
 801313c:	08019da4 	.word	0x08019da4

08013140 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013140:	b580      	push	{r7, lr}
 8013142:	b082      	sub	sp, #8
 8013144:	af00      	add	r7, sp, #0
 8013146:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d106      	bne.n	801315c <tcp_rexmit_fast+0x1c>
 801314e:	4b2a      	ldr	r3, [pc, #168]	@ (80131f8 <tcp_rexmit_fast+0xb8>)
 8013150:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8013154:	4929      	ldr	r1, [pc, #164]	@ (80131fc <tcp_rexmit_fast+0xbc>)
 8013156:	482a      	ldr	r0, [pc, #168]	@ (8013200 <tcp_rexmit_fast+0xc0>)
 8013158:	f003 fd6a 	bl	8016c30 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013160:	2b00      	cmp	r3, #0
 8013162:	d045      	beq.n	80131f0 <tcp_rexmit_fast+0xb0>
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	8b5b      	ldrh	r3, [r3, #26]
 8013168:	f003 0304 	and.w	r3, r3, #4
 801316c:	2b00      	cmp	r3, #0
 801316e:	d13f      	bne.n	80131f0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013170:	6878      	ldr	r0, [r7, #4]
 8013172:	f7ff ff79 	bl	8013068 <tcp_rexmit>
 8013176:	4603      	mov	r3, r0
 8013178:	2b00      	cmp	r3, #0
 801317a:	d139      	bne.n	80131f0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013188:	4293      	cmp	r3, r2
 801318a:	bf28      	it	cs
 801318c:	4613      	movcs	r3, r2
 801318e:	b29b      	uxth	r3, r3
 8013190:	2b00      	cmp	r3, #0
 8013192:	da00      	bge.n	8013196 <tcp_rexmit_fast+0x56>
 8013194:	3301      	adds	r3, #1
 8013196:	105b      	asrs	r3, r3, #1
 8013198:	b29a      	uxth	r2, r3
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80131a6:	461a      	mov	r2, r3
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80131ac:	005b      	lsls	r3, r3, #1
 80131ae:	429a      	cmp	r2, r3
 80131b0:	d206      	bcs.n	80131c0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80131b6:	005b      	lsls	r3, r3, #1
 80131b8:	b29a      	uxth	r2, r3
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80131ca:	4619      	mov	r1, r3
 80131cc:	0049      	lsls	r1, r1, #1
 80131ce:	440b      	add	r3, r1
 80131d0:	b29b      	uxth	r3, r3
 80131d2:	4413      	add	r3, r2
 80131d4:	b29a      	uxth	r2, r3
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	8b5b      	ldrh	r3, [r3, #26]
 80131e0:	f043 0304 	orr.w	r3, r3, #4
 80131e4:	b29a      	uxth	r2, r3
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	2200      	movs	r2, #0
 80131ee:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 80131f0:	bf00      	nop
 80131f2:	3708      	adds	r7, #8
 80131f4:	46bd      	mov	sp, r7
 80131f6:	bd80      	pop	{r7, pc}
 80131f8:	08019d50 	.word	0x08019d50
 80131fc:	0801a408 	.word	0x0801a408
 8013200:	08019da4 	.word	0x08019da4

08013204 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013204:	b580      	push	{r7, lr}
 8013206:	b086      	sub	sp, #24
 8013208:	af00      	add	r7, sp, #0
 801320a:	60f8      	str	r0, [r7, #12]
 801320c:	607b      	str	r3, [r7, #4]
 801320e:	460b      	mov	r3, r1
 8013210:	817b      	strh	r3, [r7, #10]
 8013212:	4613      	mov	r3, r2
 8013214:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013216:	897a      	ldrh	r2, [r7, #10]
 8013218:	893b      	ldrh	r3, [r7, #8]
 801321a:	4413      	add	r3, r2
 801321c:	b29b      	uxth	r3, r3
 801321e:	3314      	adds	r3, #20
 8013220:	b29b      	uxth	r3, r3
 8013222:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013226:	4619      	mov	r1, r3
 8013228:	2022      	movs	r0, #34	@ 0x22
 801322a:	f7f9 fce5 	bl	800cbf8 <pbuf_alloc>
 801322e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013230:	697b      	ldr	r3, [r7, #20]
 8013232:	2b00      	cmp	r3, #0
 8013234:	d04d      	beq.n	80132d2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013236:	897b      	ldrh	r3, [r7, #10]
 8013238:	3313      	adds	r3, #19
 801323a:	697a      	ldr	r2, [r7, #20]
 801323c:	8952      	ldrh	r2, [r2, #10]
 801323e:	4293      	cmp	r3, r2
 8013240:	db06      	blt.n	8013250 <tcp_output_alloc_header_common+0x4c>
 8013242:	4b26      	ldr	r3, [pc, #152]	@ (80132dc <tcp_output_alloc_header_common+0xd8>)
 8013244:	f240 7223 	movw	r2, #1827	@ 0x723
 8013248:	4925      	ldr	r1, [pc, #148]	@ (80132e0 <tcp_output_alloc_header_common+0xdc>)
 801324a:	4826      	ldr	r0, [pc, #152]	@ (80132e4 <tcp_output_alloc_header_common+0xe0>)
 801324c:	f003 fcf0 	bl	8016c30 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013250:	697b      	ldr	r3, [r7, #20]
 8013252:	685b      	ldr	r3, [r3, #4]
 8013254:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013256:	8c3b      	ldrh	r3, [r7, #32]
 8013258:	4618      	mov	r0, r3
 801325a:	f7f8 fb07 	bl	800b86c <lwip_htons>
 801325e:	4603      	mov	r3, r0
 8013260:	461a      	mov	r2, r3
 8013262:	693b      	ldr	r3, [r7, #16]
 8013264:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013266:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013268:	4618      	mov	r0, r3
 801326a:	f7f8 faff 	bl	800b86c <lwip_htons>
 801326e:	4603      	mov	r3, r0
 8013270:	461a      	mov	r2, r3
 8013272:	693b      	ldr	r3, [r7, #16]
 8013274:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013276:	693b      	ldr	r3, [r7, #16]
 8013278:	687a      	ldr	r2, [r7, #4]
 801327a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801327c:	68f8      	ldr	r0, [r7, #12]
 801327e:	f7f8 fb0a 	bl	800b896 <lwip_htonl>
 8013282:	4602      	mov	r2, r0
 8013284:	693b      	ldr	r3, [r7, #16]
 8013286:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013288:	897b      	ldrh	r3, [r7, #10]
 801328a:	089b      	lsrs	r3, r3, #2
 801328c:	b29b      	uxth	r3, r3
 801328e:	3305      	adds	r3, #5
 8013290:	b29b      	uxth	r3, r3
 8013292:	031b      	lsls	r3, r3, #12
 8013294:	b29a      	uxth	r2, r3
 8013296:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801329a:	b29b      	uxth	r3, r3
 801329c:	4313      	orrs	r3, r2
 801329e:	b29b      	uxth	r3, r3
 80132a0:	4618      	mov	r0, r3
 80132a2:	f7f8 fae3 	bl	800b86c <lwip_htons>
 80132a6:	4603      	mov	r3, r0
 80132a8:	461a      	mov	r2, r3
 80132aa:	693b      	ldr	r3, [r7, #16]
 80132ac:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80132ae:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80132b0:	4618      	mov	r0, r3
 80132b2:	f7f8 fadb 	bl	800b86c <lwip_htons>
 80132b6:	4603      	mov	r3, r0
 80132b8:	461a      	mov	r2, r3
 80132ba:	693b      	ldr	r3, [r7, #16]
 80132bc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80132be:	693b      	ldr	r3, [r7, #16]
 80132c0:	2200      	movs	r2, #0
 80132c2:	741a      	strb	r2, [r3, #16]
 80132c4:	2200      	movs	r2, #0
 80132c6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80132c8:	693b      	ldr	r3, [r7, #16]
 80132ca:	2200      	movs	r2, #0
 80132cc:	749a      	strb	r2, [r3, #18]
 80132ce:	2200      	movs	r2, #0
 80132d0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80132d2:	697b      	ldr	r3, [r7, #20]
}
 80132d4:	4618      	mov	r0, r3
 80132d6:	3718      	adds	r7, #24
 80132d8:	46bd      	mov	sp, r7
 80132da:	bd80      	pop	{r7, pc}
 80132dc:	08019d50 	.word	0x08019d50
 80132e0:	0801a428 	.word	0x0801a428
 80132e4:	08019da4 	.word	0x08019da4

080132e8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80132e8:	b5b0      	push	{r4, r5, r7, lr}
 80132ea:	b08a      	sub	sp, #40	@ 0x28
 80132ec:	af04      	add	r7, sp, #16
 80132ee:	60f8      	str	r0, [r7, #12]
 80132f0:	607b      	str	r3, [r7, #4]
 80132f2:	460b      	mov	r3, r1
 80132f4:	817b      	strh	r3, [r7, #10]
 80132f6:	4613      	mov	r3, r2
 80132f8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d106      	bne.n	801330e <tcp_output_alloc_header+0x26>
 8013300:	4b15      	ldr	r3, [pc, #84]	@ (8013358 <tcp_output_alloc_header+0x70>)
 8013302:	f240 7242 	movw	r2, #1858	@ 0x742
 8013306:	4915      	ldr	r1, [pc, #84]	@ (801335c <tcp_output_alloc_header+0x74>)
 8013308:	4815      	ldr	r0, [pc, #84]	@ (8013360 <tcp_output_alloc_header+0x78>)
 801330a:	f003 fc91 	bl	8016c30 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	8adb      	ldrh	r3, [r3, #22]
 8013316:	68fa      	ldr	r2, [r7, #12]
 8013318:	8b12      	ldrh	r2, [r2, #24]
 801331a:	68f9      	ldr	r1, [r7, #12]
 801331c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801331e:	893d      	ldrh	r5, [r7, #8]
 8013320:	897c      	ldrh	r4, [r7, #10]
 8013322:	9103      	str	r1, [sp, #12]
 8013324:	2110      	movs	r1, #16
 8013326:	9102      	str	r1, [sp, #8]
 8013328:	9201      	str	r2, [sp, #4]
 801332a:	9300      	str	r3, [sp, #0]
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	462a      	mov	r2, r5
 8013330:	4621      	mov	r1, r4
 8013332:	f7ff ff67 	bl	8013204 <tcp_output_alloc_header_common>
 8013336:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013338:	697b      	ldr	r3, [r7, #20]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d006      	beq.n	801334c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013342:	68fa      	ldr	r2, [r7, #12]
 8013344:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8013346:	441a      	add	r2, r3
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 801334c:	697b      	ldr	r3, [r7, #20]
}
 801334e:	4618      	mov	r0, r3
 8013350:	3718      	adds	r7, #24
 8013352:	46bd      	mov	sp, r7
 8013354:	bdb0      	pop	{r4, r5, r7, pc}
 8013356:	bf00      	nop
 8013358:	08019d50 	.word	0x08019d50
 801335c:	0801a458 	.word	0x0801a458
 8013360:	08019da4 	.word	0x08019da4

08013364 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013364:	b580      	push	{r7, lr}
 8013366:	b088      	sub	sp, #32
 8013368:	af00      	add	r7, sp, #0
 801336a:	60f8      	str	r0, [r7, #12]
 801336c:	60b9      	str	r1, [r7, #8]
 801336e:	4611      	mov	r1, r2
 8013370:	461a      	mov	r2, r3
 8013372:	460b      	mov	r3, r1
 8013374:	71fb      	strb	r3, [r7, #7]
 8013376:	4613      	mov	r3, r2
 8013378:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801337a:	2300      	movs	r3, #0
 801337c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801337e:	68bb      	ldr	r3, [r7, #8]
 8013380:	2b00      	cmp	r3, #0
 8013382:	d106      	bne.n	8013392 <tcp_output_fill_options+0x2e>
 8013384:	4b12      	ldr	r3, [pc, #72]	@ (80133d0 <tcp_output_fill_options+0x6c>)
 8013386:	f240 7256 	movw	r2, #1878	@ 0x756
 801338a:	4912      	ldr	r1, [pc, #72]	@ (80133d4 <tcp_output_fill_options+0x70>)
 801338c:	4812      	ldr	r0, [pc, #72]	@ (80133d8 <tcp_output_fill_options+0x74>)
 801338e:	f003 fc4f 	bl	8016c30 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8013392:	68bb      	ldr	r3, [r7, #8]
 8013394:	685b      	ldr	r3, [r3, #4]
 8013396:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013398:	69bb      	ldr	r3, [r7, #24]
 801339a:	3314      	adds	r3, #20
 801339c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801339e:	8bfb      	ldrh	r3, [r7, #30]
 80133a0:	009b      	lsls	r3, r3, #2
 80133a2:	461a      	mov	r2, r3
 80133a4:	79fb      	ldrb	r3, [r7, #7]
 80133a6:	009b      	lsls	r3, r3, #2
 80133a8:	f003 0304 	and.w	r3, r3, #4
 80133ac:	4413      	add	r3, r2
 80133ae:	3314      	adds	r3, #20
 80133b0:	69ba      	ldr	r2, [r7, #24]
 80133b2:	4413      	add	r3, r2
 80133b4:	697a      	ldr	r2, [r7, #20]
 80133b6:	429a      	cmp	r2, r3
 80133b8:	d006      	beq.n	80133c8 <tcp_output_fill_options+0x64>
 80133ba:	4b05      	ldr	r3, [pc, #20]	@ (80133d0 <tcp_output_fill_options+0x6c>)
 80133bc:	f240 7275 	movw	r2, #1909	@ 0x775
 80133c0:	4906      	ldr	r1, [pc, #24]	@ (80133dc <tcp_output_fill_options+0x78>)
 80133c2:	4805      	ldr	r0, [pc, #20]	@ (80133d8 <tcp_output_fill_options+0x74>)
 80133c4:	f003 fc34 	bl	8016c30 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80133c8:	bf00      	nop
 80133ca:	3720      	adds	r7, #32
 80133cc:	46bd      	mov	sp, r7
 80133ce:	bd80      	pop	{r7, pc}
 80133d0:	08019d50 	.word	0x08019d50
 80133d4:	0801a480 	.word	0x0801a480
 80133d8:	08019da4 	.word	0x08019da4
 80133dc:	0801a378 	.word	0x0801a378

080133e0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80133e0:	b580      	push	{r7, lr}
 80133e2:	b08a      	sub	sp, #40	@ 0x28
 80133e4:	af04      	add	r7, sp, #16
 80133e6:	60f8      	str	r0, [r7, #12]
 80133e8:	60b9      	str	r1, [r7, #8]
 80133ea:	607a      	str	r2, [r7, #4]
 80133ec:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80133ee:	68bb      	ldr	r3, [r7, #8]
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d106      	bne.n	8013402 <tcp_output_control_segment+0x22>
 80133f4:	4b1c      	ldr	r3, [pc, #112]	@ (8013468 <tcp_output_control_segment+0x88>)
 80133f6:	f240 7287 	movw	r2, #1927	@ 0x787
 80133fa:	491c      	ldr	r1, [pc, #112]	@ (801346c <tcp_output_control_segment+0x8c>)
 80133fc:	481c      	ldr	r0, [pc, #112]	@ (8013470 <tcp_output_control_segment+0x90>)
 80133fe:	f003 fc17 	bl	8016c30 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8013402:	683a      	ldr	r2, [r7, #0]
 8013404:	6879      	ldr	r1, [r7, #4]
 8013406:	68f8      	ldr	r0, [r7, #12]
 8013408:	f7fe faea 	bl	80119e0 <tcp_route>
 801340c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801340e:	693b      	ldr	r3, [r7, #16]
 8013410:	2b00      	cmp	r3, #0
 8013412:	d102      	bne.n	801341a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013414:	23fc      	movs	r3, #252	@ 0xfc
 8013416:	75fb      	strb	r3, [r7, #23]
 8013418:	e01c      	b.n	8013454 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	2b00      	cmp	r3, #0
 801341e:	d006      	beq.n	801342e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	7adb      	ldrb	r3, [r3, #11]
 8013424:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	7a9b      	ldrb	r3, [r3, #10]
 801342a:	757b      	strb	r3, [r7, #21]
 801342c:	e003      	b.n	8013436 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801342e:	23ff      	movs	r3, #255	@ 0xff
 8013430:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8013432:	2300      	movs	r3, #0
 8013434:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8013436:	7dba      	ldrb	r2, [r7, #22]
 8013438:	693b      	ldr	r3, [r7, #16]
 801343a:	9302      	str	r3, [sp, #8]
 801343c:	2306      	movs	r3, #6
 801343e:	9301      	str	r3, [sp, #4]
 8013440:	7d7b      	ldrb	r3, [r7, #21]
 8013442:	9300      	str	r3, [sp, #0]
 8013444:	4613      	mov	r3, r2
 8013446:	683a      	ldr	r2, [r7, #0]
 8013448:	6879      	ldr	r1, [r7, #4]
 801344a:	68b8      	ldr	r0, [r7, #8]
 801344c:	f002 f90c 	bl	8015668 <ip4_output_if>
 8013450:	4603      	mov	r3, r0
 8013452:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013454:	68b8      	ldr	r0, [r7, #8]
 8013456:	f7f9 feb3 	bl	800d1c0 <pbuf_free>
  return err;
 801345a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801345e:	4618      	mov	r0, r3
 8013460:	3718      	adds	r7, #24
 8013462:	46bd      	mov	sp, r7
 8013464:	bd80      	pop	{r7, pc}
 8013466:	bf00      	nop
 8013468:	08019d50 	.word	0x08019d50
 801346c:	0801a4a8 	.word	0x0801a4a8
 8013470:	08019da4 	.word	0x08019da4

08013474 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013474:	b590      	push	{r4, r7, lr}
 8013476:	b08b      	sub	sp, #44	@ 0x2c
 8013478:	af04      	add	r7, sp, #16
 801347a:	60f8      	str	r0, [r7, #12]
 801347c:	60b9      	str	r1, [r7, #8]
 801347e:	607a      	str	r2, [r7, #4]
 8013480:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8013482:	683b      	ldr	r3, [r7, #0]
 8013484:	2b00      	cmp	r3, #0
 8013486:	d106      	bne.n	8013496 <tcp_rst+0x22>
 8013488:	4b1f      	ldr	r3, [pc, #124]	@ (8013508 <tcp_rst+0x94>)
 801348a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801348e:	491f      	ldr	r1, [pc, #124]	@ (801350c <tcp_rst+0x98>)
 8013490:	481f      	ldr	r0, [pc, #124]	@ (8013510 <tcp_rst+0x9c>)
 8013492:	f003 fbcd 	bl	8016c30 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013498:	2b00      	cmp	r3, #0
 801349a:	d106      	bne.n	80134aa <tcp_rst+0x36>
 801349c:	4b1a      	ldr	r3, [pc, #104]	@ (8013508 <tcp_rst+0x94>)
 801349e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 80134a2:	491c      	ldr	r1, [pc, #112]	@ (8013514 <tcp_rst+0xa0>)
 80134a4:	481a      	ldr	r0, [pc, #104]	@ (8013510 <tcp_rst+0x9c>)
 80134a6:	f003 fbc3 	bl	8016c30 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80134aa:	2300      	movs	r3, #0
 80134ac:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80134ae:	f246 0308 	movw	r3, #24584	@ 0x6008
 80134b2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80134b4:	7dfb      	ldrb	r3, [r7, #23]
 80134b6:	b29c      	uxth	r4, r3
 80134b8:	68b8      	ldr	r0, [r7, #8]
 80134ba:	f7f8 f9ec 	bl	800b896 <lwip_htonl>
 80134be:	4602      	mov	r2, r0
 80134c0:	8abb      	ldrh	r3, [r7, #20]
 80134c2:	9303      	str	r3, [sp, #12]
 80134c4:	2314      	movs	r3, #20
 80134c6:	9302      	str	r3, [sp, #8]
 80134c8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80134ca:	9301      	str	r3, [sp, #4]
 80134cc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80134ce:	9300      	str	r3, [sp, #0]
 80134d0:	4613      	mov	r3, r2
 80134d2:	2200      	movs	r2, #0
 80134d4:	4621      	mov	r1, r4
 80134d6:	6878      	ldr	r0, [r7, #4]
 80134d8:	f7ff fe94 	bl	8013204 <tcp_output_alloc_header_common>
 80134dc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80134de:	693b      	ldr	r3, [r7, #16]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d00c      	beq.n	80134fe <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80134e4:	7dfb      	ldrb	r3, [r7, #23]
 80134e6:	2200      	movs	r2, #0
 80134e8:	6939      	ldr	r1, [r7, #16]
 80134ea:	68f8      	ldr	r0, [r7, #12]
 80134ec:	f7ff ff3a 	bl	8013364 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80134f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134f2:	683a      	ldr	r2, [r7, #0]
 80134f4:	6939      	ldr	r1, [r7, #16]
 80134f6:	68f8      	ldr	r0, [r7, #12]
 80134f8:	f7ff ff72 	bl	80133e0 <tcp_output_control_segment>
 80134fc:	e000      	b.n	8013500 <tcp_rst+0x8c>
    return;
 80134fe:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013500:	371c      	adds	r7, #28
 8013502:	46bd      	mov	sp, r7
 8013504:	bd90      	pop	{r4, r7, pc}
 8013506:	bf00      	nop
 8013508:	08019d50 	.word	0x08019d50
 801350c:	0801a4d4 	.word	0x0801a4d4
 8013510:	08019da4 	.word	0x08019da4
 8013514:	0801a4f0 	.word	0x0801a4f0

08013518 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013518:	b590      	push	{r4, r7, lr}
 801351a:	b087      	sub	sp, #28
 801351c:	af00      	add	r7, sp, #0
 801351e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013520:	2300      	movs	r3, #0
 8013522:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013524:	2300      	movs	r3, #0
 8013526:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d106      	bne.n	801353c <tcp_send_empty_ack+0x24>
 801352e:	4b28      	ldr	r3, [pc, #160]	@ (80135d0 <tcp_send_empty_ack+0xb8>)
 8013530:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8013534:	4927      	ldr	r1, [pc, #156]	@ (80135d4 <tcp_send_empty_ack+0xbc>)
 8013536:	4828      	ldr	r0, [pc, #160]	@ (80135d8 <tcp_send_empty_ack+0xc0>)
 8013538:	f003 fb7a 	bl	8016c30 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801353c:	7dfb      	ldrb	r3, [r7, #23]
 801353e:	009b      	lsls	r3, r3, #2
 8013540:	b2db      	uxtb	r3, r3
 8013542:	f003 0304 	and.w	r3, r3, #4
 8013546:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013548:	7d7b      	ldrb	r3, [r7, #21]
 801354a:	b29c      	uxth	r4, r3
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013550:	4618      	mov	r0, r3
 8013552:	f7f8 f9a0 	bl	800b896 <lwip_htonl>
 8013556:	4603      	mov	r3, r0
 8013558:	2200      	movs	r2, #0
 801355a:	4621      	mov	r1, r4
 801355c:	6878      	ldr	r0, [r7, #4]
 801355e:	f7ff fec3 	bl	80132e8 <tcp_output_alloc_header>
 8013562:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013564:	693b      	ldr	r3, [r7, #16]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d109      	bne.n	801357e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	8b5b      	ldrh	r3, [r3, #26]
 801356e:	f043 0303 	orr.w	r3, r3, #3
 8013572:	b29a      	uxth	r2, r3
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013578:	f06f 0301 	mvn.w	r3, #1
 801357c:	e023      	b.n	80135c6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801357e:	7dbb      	ldrb	r3, [r7, #22]
 8013580:	7dfa      	ldrb	r2, [r7, #23]
 8013582:	6939      	ldr	r1, [r7, #16]
 8013584:	6878      	ldr	r0, [r7, #4]
 8013586:	f7ff feed 	bl	8013364 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801358a:	687a      	ldr	r2, [r7, #4]
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	3304      	adds	r3, #4
 8013590:	6939      	ldr	r1, [r7, #16]
 8013592:	6878      	ldr	r0, [r7, #4]
 8013594:	f7ff ff24 	bl	80133e0 <tcp_output_control_segment>
 8013598:	4603      	mov	r3, r0
 801359a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801359c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d007      	beq.n	80135b4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	8b5b      	ldrh	r3, [r3, #26]
 80135a8:	f043 0303 	orr.w	r3, r3, #3
 80135ac:	b29a      	uxth	r2, r3
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	835a      	strh	r2, [r3, #26]
 80135b2:	e006      	b.n	80135c2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	8b5b      	ldrh	r3, [r3, #26]
 80135b8:	f023 0303 	bic.w	r3, r3, #3
 80135bc:	b29a      	uxth	r2, r3
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80135c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80135c6:	4618      	mov	r0, r3
 80135c8:	371c      	adds	r7, #28
 80135ca:	46bd      	mov	sp, r7
 80135cc:	bd90      	pop	{r4, r7, pc}
 80135ce:	bf00      	nop
 80135d0:	08019d50 	.word	0x08019d50
 80135d4:	0801a50c 	.word	0x0801a50c
 80135d8:	08019da4 	.word	0x08019da4

080135dc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80135dc:	b590      	push	{r4, r7, lr}
 80135de:	b087      	sub	sp, #28
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80135e4:	2300      	movs	r3, #0
 80135e6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d106      	bne.n	80135fc <tcp_keepalive+0x20>
 80135ee:	4b18      	ldr	r3, [pc, #96]	@ (8013650 <tcp_keepalive+0x74>)
 80135f0:	f640 0224 	movw	r2, #2084	@ 0x824
 80135f4:	4917      	ldr	r1, [pc, #92]	@ (8013654 <tcp_keepalive+0x78>)
 80135f6:	4818      	ldr	r0, [pc, #96]	@ (8013658 <tcp_keepalive+0x7c>)
 80135f8:	f003 fb1a 	bl	8016c30 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80135fc:	7dfb      	ldrb	r3, [r7, #23]
 80135fe:	b29c      	uxth	r4, r3
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013604:	3b01      	subs	r3, #1
 8013606:	4618      	mov	r0, r3
 8013608:	f7f8 f945 	bl	800b896 <lwip_htonl>
 801360c:	4603      	mov	r3, r0
 801360e:	2200      	movs	r2, #0
 8013610:	4621      	mov	r1, r4
 8013612:	6878      	ldr	r0, [r7, #4]
 8013614:	f7ff fe68 	bl	80132e8 <tcp_output_alloc_header>
 8013618:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801361a:	693b      	ldr	r3, [r7, #16]
 801361c:	2b00      	cmp	r3, #0
 801361e:	d102      	bne.n	8013626 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013620:	f04f 33ff 	mov.w	r3, #4294967295
 8013624:	e010      	b.n	8013648 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013626:	7dfb      	ldrb	r3, [r7, #23]
 8013628:	2200      	movs	r2, #0
 801362a:	6939      	ldr	r1, [r7, #16]
 801362c:	6878      	ldr	r0, [r7, #4]
 801362e:	f7ff fe99 	bl	8013364 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013632:	687a      	ldr	r2, [r7, #4]
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	3304      	adds	r3, #4
 8013638:	6939      	ldr	r1, [r7, #16]
 801363a:	6878      	ldr	r0, [r7, #4]
 801363c:	f7ff fed0 	bl	80133e0 <tcp_output_control_segment>
 8013640:	4603      	mov	r3, r0
 8013642:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013644:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013648:	4618      	mov	r0, r3
 801364a:	371c      	adds	r7, #28
 801364c:	46bd      	mov	sp, r7
 801364e:	bd90      	pop	{r4, r7, pc}
 8013650:	08019d50 	.word	0x08019d50
 8013654:	0801a52c 	.word	0x0801a52c
 8013658:	08019da4 	.word	0x08019da4

0801365c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801365c:	b590      	push	{r4, r7, lr}
 801365e:	b08b      	sub	sp, #44	@ 0x2c
 8013660:	af00      	add	r7, sp, #0
 8013662:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013664:	2300      	movs	r3, #0
 8013666:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	2b00      	cmp	r3, #0
 801366e:	d106      	bne.n	801367e <tcp_zero_window_probe+0x22>
 8013670:	4b4c      	ldr	r3, [pc, #304]	@ (80137a4 <tcp_zero_window_probe+0x148>)
 8013672:	f640 024f 	movw	r2, #2127	@ 0x84f
 8013676:	494c      	ldr	r1, [pc, #304]	@ (80137a8 <tcp_zero_window_probe+0x14c>)
 8013678:	484c      	ldr	r0, [pc, #304]	@ (80137ac <tcp_zero_window_probe+0x150>)
 801367a:	f003 fad9 	bl	8016c30 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013682:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013684:	6a3b      	ldr	r3, [r7, #32]
 8013686:	2b00      	cmp	r3, #0
 8013688:	d101      	bne.n	801368e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801368a:	2300      	movs	r3, #0
 801368c:	e086      	b.n	801379c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8013694:	2bff      	cmp	r3, #255	@ 0xff
 8013696:	d007      	beq.n	80136a8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801369e:	3301      	adds	r3, #1
 80136a0:	b2da      	uxtb	r2, r3
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80136a8:	6a3b      	ldr	r3, [r7, #32]
 80136aa:	68db      	ldr	r3, [r3, #12]
 80136ac:	899b      	ldrh	r3, [r3, #12]
 80136ae:	b29b      	uxth	r3, r3
 80136b0:	4618      	mov	r0, r3
 80136b2:	f7f8 f8db 	bl	800b86c <lwip_htons>
 80136b6:	4603      	mov	r3, r0
 80136b8:	b2db      	uxtb	r3, r3
 80136ba:	f003 0301 	and.w	r3, r3, #1
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d005      	beq.n	80136ce <tcp_zero_window_probe+0x72>
 80136c2:	6a3b      	ldr	r3, [r7, #32]
 80136c4:	891b      	ldrh	r3, [r3, #8]
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d101      	bne.n	80136ce <tcp_zero_window_probe+0x72>
 80136ca:	2301      	movs	r3, #1
 80136cc:	e000      	b.n	80136d0 <tcp_zero_window_probe+0x74>
 80136ce:	2300      	movs	r3, #0
 80136d0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80136d2:	7ffb      	ldrb	r3, [r7, #31]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	bf0c      	ite	eq
 80136d8:	2301      	moveq	r3, #1
 80136da:	2300      	movne	r3, #0
 80136dc:	b2db      	uxtb	r3, r3
 80136de:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80136e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80136e4:	b299      	uxth	r1, r3
 80136e6:	6a3b      	ldr	r3, [r7, #32]
 80136e8:	68db      	ldr	r3, [r3, #12]
 80136ea:	685b      	ldr	r3, [r3, #4]
 80136ec:	8bba      	ldrh	r2, [r7, #28]
 80136ee:	6878      	ldr	r0, [r7, #4]
 80136f0:	f7ff fdfa 	bl	80132e8 <tcp_output_alloc_header>
 80136f4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80136f6:	69bb      	ldr	r3, [r7, #24]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d102      	bne.n	8013702 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80136fc:	f04f 33ff 	mov.w	r3, #4294967295
 8013700:	e04c      	b.n	801379c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013702:	69bb      	ldr	r3, [r7, #24]
 8013704:	685b      	ldr	r3, [r3, #4]
 8013706:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013708:	7ffb      	ldrb	r3, [r7, #31]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d011      	beq.n	8013732 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801370e:	697b      	ldr	r3, [r7, #20]
 8013710:	899b      	ldrh	r3, [r3, #12]
 8013712:	b29b      	uxth	r3, r3
 8013714:	b21b      	sxth	r3, r3
 8013716:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801371a:	b21c      	sxth	r4, r3
 801371c:	2011      	movs	r0, #17
 801371e:	f7f8 f8a5 	bl	800b86c <lwip_htons>
 8013722:	4603      	mov	r3, r0
 8013724:	b21b      	sxth	r3, r3
 8013726:	4323      	orrs	r3, r4
 8013728:	b21b      	sxth	r3, r3
 801372a:	b29a      	uxth	r2, r3
 801372c:	697b      	ldr	r3, [r7, #20]
 801372e:	819a      	strh	r2, [r3, #12]
 8013730:	e010      	b.n	8013754 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013732:	69bb      	ldr	r3, [r7, #24]
 8013734:	685b      	ldr	r3, [r3, #4]
 8013736:	3314      	adds	r3, #20
 8013738:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801373a:	6a3b      	ldr	r3, [r7, #32]
 801373c:	6858      	ldr	r0, [r3, #4]
 801373e:	6a3b      	ldr	r3, [r7, #32]
 8013740:	685b      	ldr	r3, [r3, #4]
 8013742:	891a      	ldrh	r2, [r3, #8]
 8013744:	6a3b      	ldr	r3, [r7, #32]
 8013746:	891b      	ldrh	r3, [r3, #8]
 8013748:	1ad3      	subs	r3, r2, r3
 801374a:	b29b      	uxth	r3, r3
 801374c:	2201      	movs	r2, #1
 801374e:	6939      	ldr	r1, [r7, #16]
 8013750:	f7f9 ff2c 	bl	800d5ac <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013754:	6a3b      	ldr	r3, [r7, #32]
 8013756:	68db      	ldr	r3, [r3, #12]
 8013758:	685b      	ldr	r3, [r3, #4]
 801375a:	4618      	mov	r0, r3
 801375c:	f7f8 f89b 	bl	800b896 <lwip_htonl>
 8013760:	4603      	mov	r3, r0
 8013762:	3301      	adds	r3, #1
 8013764:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	1ad3      	subs	r3, r2, r3
 801376e:	2b00      	cmp	r3, #0
 8013770:	da02      	bge.n	8013778 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	68fa      	ldr	r2, [r7, #12]
 8013776:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013778:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801377c:	2200      	movs	r2, #0
 801377e:	69b9      	ldr	r1, [r7, #24]
 8013780:	6878      	ldr	r0, [r7, #4]
 8013782:	f7ff fdef 	bl	8013364 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013786:	687a      	ldr	r2, [r7, #4]
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	3304      	adds	r3, #4
 801378c:	69b9      	ldr	r1, [r7, #24]
 801378e:	6878      	ldr	r0, [r7, #4]
 8013790:	f7ff fe26 	bl	80133e0 <tcp_output_control_segment>
 8013794:	4603      	mov	r3, r0
 8013796:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013798:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801379c:	4618      	mov	r0, r3
 801379e:	372c      	adds	r7, #44	@ 0x2c
 80137a0:	46bd      	mov	sp, r7
 80137a2:	bd90      	pop	{r4, r7, pc}
 80137a4:	08019d50 	.word	0x08019d50
 80137a8:	0801a548 	.word	0x0801a548
 80137ac:	08019da4 	.word	0x08019da4

080137b0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80137b0:	b580      	push	{r7, lr}
 80137b2:	b082      	sub	sp, #8
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80137b8:	f7f9 ffe6 	bl	800d788 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80137bc:	4b0a      	ldr	r3, [pc, #40]	@ (80137e8 <tcpip_tcp_timer+0x38>)
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d103      	bne.n	80137cc <tcpip_tcp_timer+0x1c>
 80137c4:	4b09      	ldr	r3, [pc, #36]	@ (80137ec <tcpip_tcp_timer+0x3c>)
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d005      	beq.n	80137d8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80137cc:	2200      	movs	r2, #0
 80137ce:	4908      	ldr	r1, [pc, #32]	@ (80137f0 <tcpip_tcp_timer+0x40>)
 80137d0:	20fa      	movs	r0, #250	@ 0xfa
 80137d2:	f000 f8f3 	bl	80139bc <sys_timeout>
 80137d6:	e003      	b.n	80137e0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80137d8:	4b06      	ldr	r3, [pc, #24]	@ (80137f4 <tcpip_tcp_timer+0x44>)
 80137da:	2200      	movs	r2, #0
 80137dc:	601a      	str	r2, [r3, #0]
  }
}
 80137de:	bf00      	nop
 80137e0:	bf00      	nop
 80137e2:	3708      	adds	r7, #8
 80137e4:	46bd      	mov	sp, r7
 80137e6:	bd80      	pop	{r7, pc}
 80137e8:	24007f10 	.word	0x24007f10
 80137ec:	24007f14 	.word	0x24007f14
 80137f0:	080137b1 	.word	0x080137b1
 80137f4:	24007f5c 	.word	0x24007f5c

080137f8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80137f8:	b580      	push	{r7, lr}
 80137fa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80137fc:	4b0a      	ldr	r3, [pc, #40]	@ (8013828 <tcp_timer_needed+0x30>)
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	2b00      	cmp	r3, #0
 8013802:	d10f      	bne.n	8013824 <tcp_timer_needed+0x2c>
 8013804:	4b09      	ldr	r3, [pc, #36]	@ (801382c <tcp_timer_needed+0x34>)
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	2b00      	cmp	r3, #0
 801380a:	d103      	bne.n	8013814 <tcp_timer_needed+0x1c>
 801380c:	4b08      	ldr	r3, [pc, #32]	@ (8013830 <tcp_timer_needed+0x38>)
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	2b00      	cmp	r3, #0
 8013812:	d007      	beq.n	8013824 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013814:	4b04      	ldr	r3, [pc, #16]	@ (8013828 <tcp_timer_needed+0x30>)
 8013816:	2201      	movs	r2, #1
 8013818:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801381a:	2200      	movs	r2, #0
 801381c:	4905      	ldr	r1, [pc, #20]	@ (8013834 <tcp_timer_needed+0x3c>)
 801381e:	20fa      	movs	r0, #250	@ 0xfa
 8013820:	f000 f8cc 	bl	80139bc <sys_timeout>
  }
}
 8013824:	bf00      	nop
 8013826:	bd80      	pop	{r7, pc}
 8013828:	24007f5c 	.word	0x24007f5c
 801382c:	24007f10 	.word	0x24007f10
 8013830:	24007f14 	.word	0x24007f14
 8013834:	080137b1 	.word	0x080137b1

08013838 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013838:	b580      	push	{r7, lr}
 801383a:	b086      	sub	sp, #24
 801383c:	af00      	add	r7, sp, #0
 801383e:	60f8      	str	r0, [r7, #12]
 8013840:	60b9      	str	r1, [r7, #8]
 8013842:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013844:	200a      	movs	r0, #10
 8013846:	f7f8 fda1 	bl	800c38c <memp_malloc>
 801384a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801384c:	693b      	ldr	r3, [r7, #16]
 801384e:	2b00      	cmp	r3, #0
 8013850:	d109      	bne.n	8013866 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013852:	693b      	ldr	r3, [r7, #16]
 8013854:	2b00      	cmp	r3, #0
 8013856:	d151      	bne.n	80138fc <sys_timeout_abs+0xc4>
 8013858:	4b2a      	ldr	r3, [pc, #168]	@ (8013904 <sys_timeout_abs+0xcc>)
 801385a:	22be      	movs	r2, #190	@ 0xbe
 801385c:	492a      	ldr	r1, [pc, #168]	@ (8013908 <sys_timeout_abs+0xd0>)
 801385e:	482b      	ldr	r0, [pc, #172]	@ (801390c <sys_timeout_abs+0xd4>)
 8013860:	f003 f9e6 	bl	8016c30 <iprintf>
    return;
 8013864:	e04a      	b.n	80138fc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013866:	693b      	ldr	r3, [r7, #16]
 8013868:	2200      	movs	r2, #0
 801386a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801386c:	693b      	ldr	r3, [r7, #16]
 801386e:	68ba      	ldr	r2, [r7, #8]
 8013870:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013872:	693b      	ldr	r3, [r7, #16]
 8013874:	687a      	ldr	r2, [r7, #4]
 8013876:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013878:	693b      	ldr	r3, [r7, #16]
 801387a:	68fa      	ldr	r2, [r7, #12]
 801387c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801387e:	4b24      	ldr	r3, [pc, #144]	@ (8013910 <sys_timeout_abs+0xd8>)
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d103      	bne.n	801388e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013886:	4a22      	ldr	r2, [pc, #136]	@ (8013910 <sys_timeout_abs+0xd8>)
 8013888:	693b      	ldr	r3, [r7, #16]
 801388a:	6013      	str	r3, [r2, #0]
    return;
 801388c:	e037      	b.n	80138fe <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801388e:	693b      	ldr	r3, [r7, #16]
 8013890:	685a      	ldr	r2, [r3, #4]
 8013892:	4b1f      	ldr	r3, [pc, #124]	@ (8013910 <sys_timeout_abs+0xd8>)
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	685b      	ldr	r3, [r3, #4]
 8013898:	1ad3      	subs	r3, r2, r3
 801389a:	0fdb      	lsrs	r3, r3, #31
 801389c:	f003 0301 	and.w	r3, r3, #1
 80138a0:	b2db      	uxtb	r3, r3
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d007      	beq.n	80138b6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80138a6:	4b1a      	ldr	r3, [pc, #104]	@ (8013910 <sys_timeout_abs+0xd8>)
 80138a8:	681a      	ldr	r2, [r3, #0]
 80138aa:	693b      	ldr	r3, [r7, #16]
 80138ac:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80138ae:	4a18      	ldr	r2, [pc, #96]	@ (8013910 <sys_timeout_abs+0xd8>)
 80138b0:	693b      	ldr	r3, [r7, #16]
 80138b2:	6013      	str	r3, [r2, #0]
 80138b4:	e023      	b.n	80138fe <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80138b6:	4b16      	ldr	r3, [pc, #88]	@ (8013910 <sys_timeout_abs+0xd8>)
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	617b      	str	r3, [r7, #20]
 80138bc:	e01a      	b.n	80138f4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80138be:	697b      	ldr	r3, [r7, #20]
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d00b      	beq.n	80138de <sys_timeout_abs+0xa6>
 80138c6:	693b      	ldr	r3, [r7, #16]
 80138c8:	685a      	ldr	r2, [r3, #4]
 80138ca:	697b      	ldr	r3, [r7, #20]
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	685b      	ldr	r3, [r3, #4]
 80138d0:	1ad3      	subs	r3, r2, r3
 80138d2:	0fdb      	lsrs	r3, r3, #31
 80138d4:	f003 0301 	and.w	r3, r3, #1
 80138d8:	b2db      	uxtb	r3, r3
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d007      	beq.n	80138ee <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80138de:	697b      	ldr	r3, [r7, #20]
 80138e0:	681a      	ldr	r2, [r3, #0]
 80138e2:	693b      	ldr	r3, [r7, #16]
 80138e4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80138e6:	697b      	ldr	r3, [r7, #20]
 80138e8:	693a      	ldr	r2, [r7, #16]
 80138ea:	601a      	str	r2, [r3, #0]
        break;
 80138ec:	e007      	b.n	80138fe <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80138ee:	697b      	ldr	r3, [r7, #20]
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	617b      	str	r3, [r7, #20]
 80138f4:	697b      	ldr	r3, [r7, #20]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d1e1      	bne.n	80138be <sys_timeout_abs+0x86>
 80138fa:	e000      	b.n	80138fe <sys_timeout_abs+0xc6>
    return;
 80138fc:	bf00      	nop
      }
    }
  }
}
 80138fe:	3718      	adds	r7, #24
 8013900:	46bd      	mov	sp, r7
 8013902:	bd80      	pop	{r7, pc}
 8013904:	0801a56c 	.word	0x0801a56c
 8013908:	0801a5a0 	.word	0x0801a5a0
 801390c:	0801a5e0 	.word	0x0801a5e0
 8013910:	24007f54 	.word	0x24007f54

08013914 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013914:	b580      	push	{r7, lr}
 8013916:	b086      	sub	sp, #24
 8013918:	af00      	add	r7, sp, #0
 801391a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013920:	697b      	ldr	r3, [r7, #20]
 8013922:	685b      	ldr	r3, [r3, #4]
 8013924:	4798      	blx	r3

  now = sys_now();
 8013926:	f7f1 fd2f 	bl	8005388 <sys_now>
 801392a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801392c:	697b      	ldr	r3, [r7, #20]
 801392e:	681a      	ldr	r2, [r3, #0]
 8013930:	4b0f      	ldr	r3, [pc, #60]	@ (8013970 <lwip_cyclic_timer+0x5c>)
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	4413      	add	r3, r2
 8013936:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013938:	68fa      	ldr	r2, [r7, #12]
 801393a:	693b      	ldr	r3, [r7, #16]
 801393c:	1ad3      	subs	r3, r2, r3
 801393e:	0fdb      	lsrs	r3, r3, #31
 8013940:	f003 0301 	and.w	r3, r3, #1
 8013944:	b2db      	uxtb	r3, r3
 8013946:	2b00      	cmp	r3, #0
 8013948:	d009      	beq.n	801395e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801394a:	697b      	ldr	r3, [r7, #20]
 801394c:	681a      	ldr	r2, [r3, #0]
 801394e:	693b      	ldr	r3, [r7, #16]
 8013950:	4413      	add	r3, r2
 8013952:	687a      	ldr	r2, [r7, #4]
 8013954:	4907      	ldr	r1, [pc, #28]	@ (8013974 <lwip_cyclic_timer+0x60>)
 8013956:	4618      	mov	r0, r3
 8013958:	f7ff ff6e 	bl	8013838 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801395c:	e004      	b.n	8013968 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801395e:	687a      	ldr	r2, [r7, #4]
 8013960:	4904      	ldr	r1, [pc, #16]	@ (8013974 <lwip_cyclic_timer+0x60>)
 8013962:	68f8      	ldr	r0, [r7, #12]
 8013964:	f7ff ff68 	bl	8013838 <sys_timeout_abs>
}
 8013968:	bf00      	nop
 801396a:	3718      	adds	r7, #24
 801396c:	46bd      	mov	sp, r7
 801396e:	bd80      	pop	{r7, pc}
 8013970:	24007f58 	.word	0x24007f58
 8013974:	08013915 	.word	0x08013915

08013978 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013978:	b580      	push	{r7, lr}
 801397a:	b082      	sub	sp, #8
 801397c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801397e:	2301      	movs	r3, #1
 8013980:	607b      	str	r3, [r7, #4]
 8013982:	e00e      	b.n	80139a2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013984:	4a0b      	ldr	r2, [pc, #44]	@ (80139b4 <sys_timeouts_init+0x3c>)
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	00db      	lsls	r3, r3, #3
 8013990:	4a08      	ldr	r2, [pc, #32]	@ (80139b4 <sys_timeouts_init+0x3c>)
 8013992:	4413      	add	r3, r2
 8013994:	461a      	mov	r2, r3
 8013996:	4908      	ldr	r1, [pc, #32]	@ (80139b8 <sys_timeouts_init+0x40>)
 8013998:	f000 f810 	bl	80139bc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	3301      	adds	r3, #1
 80139a0:	607b      	str	r3, [r7, #4]
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	2b02      	cmp	r3, #2
 80139a6:	d9ed      	bls.n	8013984 <sys_timeouts_init+0xc>
  }
}
 80139a8:	bf00      	nop
 80139aa:	bf00      	nop
 80139ac:	3708      	adds	r7, #8
 80139ae:	46bd      	mov	sp, r7
 80139b0:	bd80      	pop	{r7, pc}
 80139b2:	bf00      	nop
 80139b4:	0801b1b8 	.word	0x0801b1b8
 80139b8:	08013915 	.word	0x08013915

080139bc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80139bc:	b580      	push	{r7, lr}
 80139be:	b086      	sub	sp, #24
 80139c0:	af00      	add	r7, sp, #0
 80139c2:	60f8      	str	r0, [r7, #12]
 80139c4:	60b9      	str	r1, [r7, #8]
 80139c6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80139ce:	d306      	bcc.n	80139de <sys_timeout+0x22>
 80139d0:	4b0a      	ldr	r3, [pc, #40]	@ (80139fc <sys_timeout+0x40>)
 80139d2:	f240 1229 	movw	r2, #297	@ 0x129
 80139d6:	490a      	ldr	r1, [pc, #40]	@ (8013a00 <sys_timeout+0x44>)
 80139d8:	480a      	ldr	r0, [pc, #40]	@ (8013a04 <sys_timeout+0x48>)
 80139da:	f003 f929 	bl	8016c30 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80139de:	f7f1 fcd3 	bl	8005388 <sys_now>
 80139e2:	4602      	mov	r2, r0
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	4413      	add	r3, r2
 80139e8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80139ea:	687a      	ldr	r2, [r7, #4]
 80139ec:	68b9      	ldr	r1, [r7, #8]
 80139ee:	6978      	ldr	r0, [r7, #20]
 80139f0:	f7ff ff22 	bl	8013838 <sys_timeout_abs>
#endif
}
 80139f4:	bf00      	nop
 80139f6:	3718      	adds	r7, #24
 80139f8:	46bd      	mov	sp, r7
 80139fa:	bd80      	pop	{r7, pc}
 80139fc:	0801a56c 	.word	0x0801a56c
 8013a00:	0801a608 	.word	0x0801a608
 8013a04:	0801a5e0 	.word	0x0801a5e0

08013a08 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013a08:	b580      	push	{r7, lr}
 8013a0a:	b084      	sub	sp, #16
 8013a0c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013a0e:	f7f1 fcbb 	bl	8005388 <sys_now>
 8013a12:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013a14:	4b17      	ldr	r3, [pc, #92]	@ (8013a74 <sys_check_timeouts+0x6c>)
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013a1a:	68bb      	ldr	r3, [r7, #8]
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d022      	beq.n	8013a66 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013a20:	68bb      	ldr	r3, [r7, #8]
 8013a22:	685b      	ldr	r3, [r3, #4]
 8013a24:	68fa      	ldr	r2, [r7, #12]
 8013a26:	1ad3      	subs	r3, r2, r3
 8013a28:	0fdb      	lsrs	r3, r3, #31
 8013a2a:	f003 0301 	and.w	r3, r3, #1
 8013a2e:	b2db      	uxtb	r3, r3
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d11a      	bne.n	8013a6a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013a34:	68bb      	ldr	r3, [r7, #8]
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	4a0e      	ldr	r2, [pc, #56]	@ (8013a74 <sys_check_timeouts+0x6c>)
 8013a3a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013a3c:	68bb      	ldr	r3, [r7, #8]
 8013a3e:	689b      	ldr	r3, [r3, #8]
 8013a40:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013a42:	68bb      	ldr	r3, [r7, #8]
 8013a44:	68db      	ldr	r3, [r3, #12]
 8013a46:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013a48:	68bb      	ldr	r3, [r7, #8]
 8013a4a:	685b      	ldr	r3, [r3, #4]
 8013a4c:	4a0a      	ldr	r2, [pc, #40]	@ (8013a78 <sys_check_timeouts+0x70>)
 8013a4e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013a50:	68b9      	ldr	r1, [r7, #8]
 8013a52:	200a      	movs	r0, #10
 8013a54:	f7f8 fd10 	bl	800c478 <memp_free>
    if (handler != NULL) {
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d0da      	beq.n	8013a14 <sys_check_timeouts+0xc>
      handler(arg);
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	6838      	ldr	r0, [r7, #0]
 8013a62:	4798      	blx	r3
  do {
 8013a64:	e7d6      	b.n	8013a14 <sys_check_timeouts+0xc>
      return;
 8013a66:	bf00      	nop
 8013a68:	e000      	b.n	8013a6c <sys_check_timeouts+0x64>
      return;
 8013a6a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013a6c:	3710      	adds	r7, #16
 8013a6e:	46bd      	mov	sp, r7
 8013a70:	bd80      	pop	{r7, pc}
 8013a72:	bf00      	nop
 8013a74:	24007f54 	.word	0x24007f54
 8013a78:	24007f58 	.word	0x24007f58

08013a7c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013a7c:	b580      	push	{r7, lr}
 8013a7e:	b082      	sub	sp, #8
 8013a80:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013a82:	4b16      	ldr	r3, [pc, #88]	@ (8013adc <sys_timeouts_sleeptime+0x60>)
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d102      	bne.n	8013a90 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8013a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8013a8e:	e020      	b.n	8013ad2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013a90:	f7f1 fc7a 	bl	8005388 <sys_now>
 8013a94:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8013a96:	4b11      	ldr	r3, [pc, #68]	@ (8013adc <sys_timeouts_sleeptime+0x60>)
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	685a      	ldr	r2, [r3, #4]
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	1ad3      	subs	r3, r2, r3
 8013aa0:	0fdb      	lsrs	r3, r3, #31
 8013aa2:	f003 0301 	and.w	r3, r3, #1
 8013aa6:	b2db      	uxtb	r3, r3
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d001      	beq.n	8013ab0 <sys_timeouts_sleeptime+0x34>
    return 0;
 8013aac:	2300      	movs	r3, #0
 8013aae:	e010      	b.n	8013ad2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8013adc <sys_timeouts_sleeptime+0x60>)
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	685a      	ldr	r2, [r3, #4]
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	1ad3      	subs	r3, r2, r3
 8013aba:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013abc:	683b      	ldr	r3, [r7, #0]
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	da06      	bge.n	8013ad0 <sys_timeouts_sleeptime+0x54>
 8013ac2:	4b07      	ldr	r3, [pc, #28]	@ (8013ae0 <sys_timeouts_sleeptime+0x64>)
 8013ac4:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8013ac8:	4906      	ldr	r1, [pc, #24]	@ (8013ae4 <sys_timeouts_sleeptime+0x68>)
 8013aca:	4807      	ldr	r0, [pc, #28]	@ (8013ae8 <sys_timeouts_sleeptime+0x6c>)
 8013acc:	f003 f8b0 	bl	8016c30 <iprintf>
    return ret;
 8013ad0:	683b      	ldr	r3, [r7, #0]
  }
}
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	3708      	adds	r7, #8
 8013ad6:	46bd      	mov	sp, r7
 8013ad8:	bd80      	pop	{r7, pc}
 8013ada:	bf00      	nop
 8013adc:	24007f54 	.word	0x24007f54
 8013ae0:	0801a56c 	.word	0x0801a56c
 8013ae4:	0801a640 	.word	0x0801a640
 8013ae8:	0801a5e0 	.word	0x0801a5e0

08013aec <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013aec:	b580      	push	{r7, lr}
 8013aee:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013af0:	f002 ff9e 	bl	8016a30 <rand>
 8013af4:	4603      	mov	r3, r0
 8013af6:	b29b      	uxth	r3, r3
 8013af8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013afc:	b29b      	uxth	r3, r3
 8013afe:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8013b02:	b29a      	uxth	r2, r3
 8013b04:	4b01      	ldr	r3, [pc, #4]	@ (8013b0c <udp_init+0x20>)
 8013b06:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013b08:	bf00      	nop
 8013b0a:	bd80      	pop	{r7, pc}
 8013b0c:	24000030 	.word	0x24000030

08013b10 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013b10:	b480      	push	{r7}
 8013b12:	b083      	sub	sp, #12
 8013b14:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8013b16:	2300      	movs	r3, #0
 8013b18:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8013b1a:	4b17      	ldr	r3, [pc, #92]	@ (8013b78 <udp_new_port+0x68>)
 8013b1c:	881b      	ldrh	r3, [r3, #0]
 8013b1e:	1c5a      	adds	r2, r3, #1
 8013b20:	b291      	uxth	r1, r2
 8013b22:	4a15      	ldr	r2, [pc, #84]	@ (8013b78 <udp_new_port+0x68>)
 8013b24:	8011      	strh	r1, [r2, #0]
 8013b26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013b2a:	4293      	cmp	r3, r2
 8013b2c:	d103      	bne.n	8013b36 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8013b2e:	4b12      	ldr	r3, [pc, #72]	@ (8013b78 <udp_new_port+0x68>)
 8013b30:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8013b34:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013b36:	4b11      	ldr	r3, [pc, #68]	@ (8013b7c <udp_new_port+0x6c>)
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	603b      	str	r3, [r7, #0]
 8013b3c:	e011      	b.n	8013b62 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8013b3e:	683b      	ldr	r3, [r7, #0]
 8013b40:	8a5a      	ldrh	r2, [r3, #18]
 8013b42:	4b0d      	ldr	r3, [pc, #52]	@ (8013b78 <udp_new_port+0x68>)
 8013b44:	881b      	ldrh	r3, [r3, #0]
 8013b46:	429a      	cmp	r2, r3
 8013b48:	d108      	bne.n	8013b5c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8013b4a:	88fb      	ldrh	r3, [r7, #6]
 8013b4c:	3301      	adds	r3, #1
 8013b4e:	80fb      	strh	r3, [r7, #6]
 8013b50:	88fb      	ldrh	r3, [r7, #6]
 8013b52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013b56:	d3e0      	bcc.n	8013b1a <udp_new_port+0xa>
        return 0;
 8013b58:	2300      	movs	r3, #0
 8013b5a:	e007      	b.n	8013b6c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013b5c:	683b      	ldr	r3, [r7, #0]
 8013b5e:	68db      	ldr	r3, [r3, #12]
 8013b60:	603b      	str	r3, [r7, #0]
 8013b62:	683b      	ldr	r3, [r7, #0]
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d1ea      	bne.n	8013b3e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013b68:	4b03      	ldr	r3, [pc, #12]	@ (8013b78 <udp_new_port+0x68>)
 8013b6a:	881b      	ldrh	r3, [r3, #0]
}
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	370c      	adds	r7, #12
 8013b70:	46bd      	mov	sp, r7
 8013b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b76:	4770      	bx	lr
 8013b78:	24000030 	.word	0x24000030
 8013b7c:	24007f60 	.word	0x24007f60

08013b80 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013b80:	b580      	push	{r7, lr}
 8013b82:	b084      	sub	sp, #16
 8013b84:	af00      	add	r7, sp, #0
 8013b86:	60f8      	str	r0, [r7, #12]
 8013b88:	60b9      	str	r1, [r7, #8]
 8013b8a:	4613      	mov	r3, r2
 8013b8c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d105      	bne.n	8013ba0 <udp_input_local_match+0x20>
 8013b94:	4b27      	ldr	r3, [pc, #156]	@ (8013c34 <udp_input_local_match+0xb4>)
 8013b96:	2287      	movs	r2, #135	@ 0x87
 8013b98:	4927      	ldr	r1, [pc, #156]	@ (8013c38 <udp_input_local_match+0xb8>)
 8013b9a:	4828      	ldr	r0, [pc, #160]	@ (8013c3c <udp_input_local_match+0xbc>)
 8013b9c:	f003 f848 	bl	8016c30 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013ba0:	68bb      	ldr	r3, [r7, #8]
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d105      	bne.n	8013bb2 <udp_input_local_match+0x32>
 8013ba6:	4b23      	ldr	r3, [pc, #140]	@ (8013c34 <udp_input_local_match+0xb4>)
 8013ba8:	2288      	movs	r2, #136	@ 0x88
 8013baa:	4925      	ldr	r1, [pc, #148]	@ (8013c40 <udp_input_local_match+0xc0>)
 8013bac:	4823      	ldr	r0, [pc, #140]	@ (8013c3c <udp_input_local_match+0xbc>)
 8013bae:	f003 f83f 	bl	8016c30 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	7a1b      	ldrb	r3, [r3, #8]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d00b      	beq.n	8013bd2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	7a1a      	ldrb	r2, [r3, #8]
 8013bbe:	4b21      	ldr	r3, [pc, #132]	@ (8013c44 <udp_input_local_match+0xc4>)
 8013bc0:	685b      	ldr	r3, [r3, #4]
 8013bc2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013bc6:	3301      	adds	r3, #1
 8013bc8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013bca:	429a      	cmp	r2, r3
 8013bcc:	d001      	beq.n	8013bd2 <udp_input_local_match+0x52>
    return 0;
 8013bce:	2300      	movs	r3, #0
 8013bd0:	e02b      	b.n	8013c2a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013bd2:	79fb      	ldrb	r3, [r7, #7]
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d018      	beq.n	8013c0a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d013      	beq.n	8013c06 <udp_input_local_match+0x86>
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d00f      	beq.n	8013c06 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013be6:	4b17      	ldr	r3, [pc, #92]	@ (8013c44 <udp_input_local_match+0xc4>)
 8013be8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bee:	d00a      	beq.n	8013c06 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	681a      	ldr	r2, [r3, #0]
 8013bf4:	4b13      	ldr	r3, [pc, #76]	@ (8013c44 <udp_input_local_match+0xc4>)
 8013bf6:	695b      	ldr	r3, [r3, #20]
 8013bf8:	405a      	eors	r2, r3
 8013bfa:	68bb      	ldr	r3, [r7, #8]
 8013bfc:	3308      	adds	r3, #8
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d110      	bne.n	8013c28 <udp_input_local_match+0xa8>
          return 1;
 8013c06:	2301      	movs	r3, #1
 8013c08:	e00f      	b.n	8013c2a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d009      	beq.n	8013c24 <udp_input_local_match+0xa4>
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d005      	beq.n	8013c24 <udp_input_local_match+0xa4>
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	681a      	ldr	r2, [r3, #0]
 8013c1c:	4b09      	ldr	r3, [pc, #36]	@ (8013c44 <udp_input_local_match+0xc4>)
 8013c1e:	695b      	ldr	r3, [r3, #20]
 8013c20:	429a      	cmp	r2, r3
 8013c22:	d101      	bne.n	8013c28 <udp_input_local_match+0xa8>
        return 1;
 8013c24:	2301      	movs	r3, #1
 8013c26:	e000      	b.n	8013c2a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013c28:	2300      	movs	r3, #0
}
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	3710      	adds	r7, #16
 8013c2e:	46bd      	mov	sp, r7
 8013c30:	bd80      	pop	{r7, pc}
 8013c32:	bf00      	nop
 8013c34:	0801a654 	.word	0x0801a654
 8013c38:	0801a684 	.word	0x0801a684
 8013c3c:	0801a6a8 	.word	0x0801a6a8
 8013c40:	0801a6d0 	.word	0x0801a6d0
 8013c44:	24004df4 	.word	0x24004df4

08013c48 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013c48:	b590      	push	{r4, r7, lr}
 8013c4a:	b08d      	sub	sp, #52	@ 0x34
 8013c4c:	af02      	add	r7, sp, #8
 8013c4e:	6078      	str	r0, [r7, #4]
 8013c50:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013c52:	2300      	movs	r3, #0
 8013c54:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d105      	bne.n	8013c68 <udp_input+0x20>
 8013c5c:	4b7c      	ldr	r3, [pc, #496]	@ (8013e50 <udp_input+0x208>)
 8013c5e:	22cf      	movs	r2, #207	@ 0xcf
 8013c60:	497c      	ldr	r1, [pc, #496]	@ (8013e54 <udp_input+0x20c>)
 8013c62:	487d      	ldr	r0, [pc, #500]	@ (8013e58 <udp_input+0x210>)
 8013c64:	f002 ffe4 	bl	8016c30 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013c68:	683b      	ldr	r3, [r7, #0]
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d105      	bne.n	8013c7a <udp_input+0x32>
 8013c6e:	4b78      	ldr	r3, [pc, #480]	@ (8013e50 <udp_input+0x208>)
 8013c70:	22d0      	movs	r2, #208	@ 0xd0
 8013c72:	497a      	ldr	r1, [pc, #488]	@ (8013e5c <udp_input+0x214>)
 8013c74:	4878      	ldr	r0, [pc, #480]	@ (8013e58 <udp_input+0x210>)
 8013c76:	f002 ffdb 	bl	8016c30 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	895b      	ldrh	r3, [r3, #10]
 8013c7e:	2b07      	cmp	r3, #7
 8013c80:	d803      	bhi.n	8013c8a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013c82:	6878      	ldr	r0, [r7, #4]
 8013c84:	f7f9 fa9c 	bl	800d1c0 <pbuf_free>
    goto end;
 8013c88:	e0de      	b.n	8013e48 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	685b      	ldr	r3, [r3, #4]
 8013c8e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013c90:	4b73      	ldr	r3, [pc, #460]	@ (8013e60 <udp_input+0x218>)
 8013c92:	695b      	ldr	r3, [r3, #20]
 8013c94:	4a72      	ldr	r2, [pc, #456]	@ (8013e60 <udp_input+0x218>)
 8013c96:	6812      	ldr	r2, [r2, #0]
 8013c98:	4611      	mov	r1, r2
 8013c9a:	4618      	mov	r0, r3
 8013c9c:	f001 fdbc 	bl	8015818 <ip4_addr_isbroadcast_u32>
 8013ca0:	4603      	mov	r3, r0
 8013ca2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013ca4:	697b      	ldr	r3, [r7, #20]
 8013ca6:	881b      	ldrh	r3, [r3, #0]
 8013ca8:	b29b      	uxth	r3, r3
 8013caa:	4618      	mov	r0, r3
 8013cac:	f7f7 fdde 	bl	800b86c <lwip_htons>
 8013cb0:	4603      	mov	r3, r0
 8013cb2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013cb4:	697b      	ldr	r3, [r7, #20]
 8013cb6:	885b      	ldrh	r3, [r3, #2]
 8013cb8:	b29b      	uxth	r3, r3
 8013cba:	4618      	mov	r0, r3
 8013cbc:	f7f7 fdd6 	bl	800b86c <lwip_htons>
 8013cc0:	4603      	mov	r3, r0
 8013cc2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013cc4:	2300      	movs	r3, #0
 8013cc6:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8013cc8:	2300      	movs	r3, #0
 8013cca:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013ccc:	2300      	movs	r3, #0
 8013cce:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013cd0:	4b64      	ldr	r3, [pc, #400]	@ (8013e64 <udp_input+0x21c>)
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8013cd6:	e054      	b.n	8013d82 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cda:	8a5b      	ldrh	r3, [r3, #18]
 8013cdc:	89fa      	ldrh	r2, [r7, #14]
 8013cde:	429a      	cmp	r2, r3
 8013ce0:	d14a      	bne.n	8013d78 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013ce2:	7cfb      	ldrb	r3, [r7, #19]
 8013ce4:	461a      	mov	r2, r3
 8013ce6:	6839      	ldr	r1, [r7, #0]
 8013ce8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013cea:	f7ff ff49 	bl	8013b80 <udp_input_local_match>
 8013cee:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d041      	beq.n	8013d78 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cf6:	7c1b      	ldrb	r3, [r3, #16]
 8013cf8:	f003 0304 	and.w	r3, r3, #4
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d11d      	bne.n	8013d3c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013d00:	69fb      	ldr	r3, [r7, #28]
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d102      	bne.n	8013d0c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d08:	61fb      	str	r3, [r7, #28]
 8013d0a:	e017      	b.n	8013d3c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013d0c:	7cfb      	ldrb	r3, [r7, #19]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d014      	beq.n	8013d3c <udp_input+0xf4>
 8013d12:	4b53      	ldr	r3, [pc, #332]	@ (8013e60 <udp_input+0x218>)
 8013d14:	695b      	ldr	r3, [r3, #20]
 8013d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d1a:	d10f      	bne.n	8013d3c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013d1c:	69fb      	ldr	r3, [r7, #28]
 8013d1e:	681a      	ldr	r2, [r3, #0]
 8013d20:	683b      	ldr	r3, [r7, #0]
 8013d22:	3304      	adds	r3, #4
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	429a      	cmp	r2, r3
 8013d28:	d008      	beq.n	8013d3c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d2c:	681a      	ldr	r2, [r3, #0]
 8013d2e:	683b      	ldr	r3, [r7, #0]
 8013d30:	3304      	adds	r3, #4
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	429a      	cmp	r2, r3
 8013d36:	d101      	bne.n	8013d3c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d3a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d3e:	8a9b      	ldrh	r3, [r3, #20]
 8013d40:	8a3a      	ldrh	r2, [r7, #16]
 8013d42:	429a      	cmp	r2, r3
 8013d44:	d118      	bne.n	8013d78 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d48:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d005      	beq.n	8013d5a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d50:	685a      	ldr	r2, [r3, #4]
 8013d52:	4b43      	ldr	r3, [pc, #268]	@ (8013e60 <udp_input+0x218>)
 8013d54:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013d56:	429a      	cmp	r2, r3
 8013d58:	d10e      	bne.n	8013d78 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013d5a:	6a3b      	ldr	r3, [r7, #32]
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d014      	beq.n	8013d8a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d62:	68da      	ldr	r2, [r3, #12]
 8013d64:	6a3b      	ldr	r3, [r7, #32]
 8013d66:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013d68:	4b3e      	ldr	r3, [pc, #248]	@ (8013e64 <udp_input+0x21c>)
 8013d6a:	681a      	ldr	r2, [r3, #0]
 8013d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d6e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013d70:	4a3c      	ldr	r2, [pc, #240]	@ (8013e64 <udp_input+0x21c>)
 8013d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d74:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013d76:	e008      	b.n	8013d8a <udp_input+0x142>
      }
    }

    prev = pcb;
 8013d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d7a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d7e:	68db      	ldr	r3, [r3, #12]
 8013d80:	627b      	str	r3, [r7, #36]	@ 0x24
 8013d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d1a7      	bne.n	8013cd8 <udp_input+0x90>
 8013d88:	e000      	b.n	8013d8c <udp_input+0x144>
        break;
 8013d8a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d101      	bne.n	8013d96 <udp_input+0x14e>
    pcb = uncon_pcb;
 8013d92:	69fb      	ldr	r3, [r7, #28]
 8013d94:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d002      	beq.n	8013da2 <udp_input+0x15a>
    for_us = 1;
 8013d9c:	2301      	movs	r3, #1
 8013d9e:	76fb      	strb	r3, [r7, #27]
 8013da0:	e00a      	b.n	8013db8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013da2:	683b      	ldr	r3, [r7, #0]
 8013da4:	3304      	adds	r3, #4
 8013da6:	681a      	ldr	r2, [r3, #0]
 8013da8:	4b2d      	ldr	r3, [pc, #180]	@ (8013e60 <udp_input+0x218>)
 8013daa:	695b      	ldr	r3, [r3, #20]
 8013dac:	429a      	cmp	r2, r3
 8013dae:	bf0c      	ite	eq
 8013db0:	2301      	moveq	r3, #1
 8013db2:	2300      	movne	r3, #0
 8013db4:	b2db      	uxtb	r3, r3
 8013db6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013db8:	7efb      	ldrb	r3, [r7, #27]
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d041      	beq.n	8013e42 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013dbe:	2108      	movs	r1, #8
 8013dc0:	6878      	ldr	r0, [r7, #4]
 8013dc2:	f7f9 f977 	bl	800d0b4 <pbuf_remove_header>
 8013dc6:	4603      	mov	r3, r0
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d00a      	beq.n	8013de2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013dcc:	4b20      	ldr	r3, [pc, #128]	@ (8013e50 <udp_input+0x208>)
 8013dce:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8013dd2:	4925      	ldr	r1, [pc, #148]	@ (8013e68 <udp_input+0x220>)
 8013dd4:	4820      	ldr	r0, [pc, #128]	@ (8013e58 <udp_input+0x210>)
 8013dd6:	f002 ff2b 	bl	8016c30 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013dda:	6878      	ldr	r0, [r7, #4]
 8013ddc:	f7f9 f9f0 	bl	800d1c0 <pbuf_free>
      goto end;
 8013de0:	e032      	b.n	8013e48 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d012      	beq.n	8013e0e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dea:	699b      	ldr	r3, [r3, #24]
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d00a      	beq.n	8013e06 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013df2:	699c      	ldr	r4, [r3, #24]
 8013df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013df6:	69d8      	ldr	r0, [r3, #28]
 8013df8:	8a3b      	ldrh	r3, [r7, #16]
 8013dfa:	9300      	str	r3, [sp, #0]
 8013dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8013e6c <udp_input+0x224>)
 8013dfe:	687a      	ldr	r2, [r7, #4]
 8013e00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013e02:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013e04:	e021      	b.n	8013e4a <udp_input+0x202>
        pbuf_free(p);
 8013e06:	6878      	ldr	r0, [r7, #4]
 8013e08:	f7f9 f9da 	bl	800d1c0 <pbuf_free>
        goto end;
 8013e0c:	e01c      	b.n	8013e48 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013e0e:	7cfb      	ldrb	r3, [r7, #19]
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d112      	bne.n	8013e3a <udp_input+0x1f2>
 8013e14:	4b12      	ldr	r3, [pc, #72]	@ (8013e60 <udp_input+0x218>)
 8013e16:	695b      	ldr	r3, [r3, #20]
 8013e18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013e1c:	2be0      	cmp	r3, #224	@ 0xe0
 8013e1e:	d00c      	beq.n	8013e3a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013e20:	4b0f      	ldr	r3, [pc, #60]	@ (8013e60 <udp_input+0x218>)
 8013e22:	899b      	ldrh	r3, [r3, #12]
 8013e24:	3308      	adds	r3, #8
 8013e26:	b29b      	uxth	r3, r3
 8013e28:	b21b      	sxth	r3, r3
 8013e2a:	4619      	mov	r1, r3
 8013e2c:	6878      	ldr	r0, [r7, #4]
 8013e2e:	f7f9 f9b4 	bl	800d19a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013e32:	2103      	movs	r1, #3
 8013e34:	6878      	ldr	r0, [r7, #4]
 8013e36:	f001 f9c5 	bl	80151c4 <icmp_dest_unreach>
      pbuf_free(p);
 8013e3a:	6878      	ldr	r0, [r7, #4]
 8013e3c:	f7f9 f9c0 	bl	800d1c0 <pbuf_free>
  return;
 8013e40:	e003      	b.n	8013e4a <udp_input+0x202>
    pbuf_free(p);
 8013e42:	6878      	ldr	r0, [r7, #4]
 8013e44:	f7f9 f9bc 	bl	800d1c0 <pbuf_free>
  return;
 8013e48:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013e4a:	372c      	adds	r7, #44	@ 0x2c
 8013e4c:	46bd      	mov	sp, r7
 8013e4e:	bd90      	pop	{r4, r7, pc}
 8013e50:	0801a654 	.word	0x0801a654
 8013e54:	0801a6f8 	.word	0x0801a6f8
 8013e58:	0801a6a8 	.word	0x0801a6a8
 8013e5c:	0801a710 	.word	0x0801a710
 8013e60:	24004df4 	.word	0x24004df4
 8013e64:	24007f60 	.word	0x24007f60
 8013e68:	0801a72c 	.word	0x0801a72c
 8013e6c:	24004e04 	.word	0x24004e04

08013e70 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013e70:	b580      	push	{r7, lr}
 8013e72:	b086      	sub	sp, #24
 8013e74:	af00      	add	r7, sp, #0
 8013e76:	60f8      	str	r0, [r7, #12]
 8013e78:	60b9      	str	r1, [r7, #8]
 8013e7a:	4613      	mov	r3, r2
 8013e7c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013e7e:	68bb      	ldr	r3, [r7, #8]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d101      	bne.n	8013e88 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013e84:	4b39      	ldr	r3, [pc, #228]	@ (8013f6c <udp_bind+0xfc>)
 8013e86:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d109      	bne.n	8013ea2 <udp_bind+0x32>
 8013e8e:	4b38      	ldr	r3, [pc, #224]	@ (8013f70 <udp_bind+0x100>)
 8013e90:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8013e94:	4937      	ldr	r1, [pc, #220]	@ (8013f74 <udp_bind+0x104>)
 8013e96:	4838      	ldr	r0, [pc, #224]	@ (8013f78 <udp_bind+0x108>)
 8013e98:	f002 feca 	bl	8016c30 <iprintf>
 8013e9c:	f06f 030f 	mvn.w	r3, #15
 8013ea0:	e060      	b.n	8013f64 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013ea2:	2300      	movs	r3, #0
 8013ea4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013ea6:	4b35      	ldr	r3, [pc, #212]	@ (8013f7c <udp_bind+0x10c>)
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	617b      	str	r3, [r7, #20]
 8013eac:	e009      	b.n	8013ec2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013eae:	68fa      	ldr	r2, [r7, #12]
 8013eb0:	697b      	ldr	r3, [r7, #20]
 8013eb2:	429a      	cmp	r2, r3
 8013eb4:	d102      	bne.n	8013ebc <udp_bind+0x4c>
      rebind = 1;
 8013eb6:	2301      	movs	r3, #1
 8013eb8:	74fb      	strb	r3, [r7, #19]
      break;
 8013eba:	e005      	b.n	8013ec8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013ebc:	697b      	ldr	r3, [r7, #20]
 8013ebe:	68db      	ldr	r3, [r3, #12]
 8013ec0:	617b      	str	r3, [r7, #20]
 8013ec2:	697b      	ldr	r3, [r7, #20]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d1f2      	bne.n	8013eae <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013ec8:	88fb      	ldrh	r3, [r7, #6]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d109      	bne.n	8013ee2 <udp_bind+0x72>
    port = udp_new_port();
 8013ece:	f7ff fe1f 	bl	8013b10 <udp_new_port>
 8013ed2:	4603      	mov	r3, r0
 8013ed4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013ed6:	88fb      	ldrh	r3, [r7, #6]
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d12c      	bne.n	8013f36 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013edc:	f06f 0307 	mvn.w	r3, #7
 8013ee0:	e040      	b.n	8013f64 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013ee2:	4b26      	ldr	r3, [pc, #152]	@ (8013f7c <udp_bind+0x10c>)
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	617b      	str	r3, [r7, #20]
 8013ee8:	e022      	b.n	8013f30 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8013eea:	68fa      	ldr	r2, [r7, #12]
 8013eec:	697b      	ldr	r3, [r7, #20]
 8013eee:	429a      	cmp	r2, r3
 8013ef0:	d01b      	beq.n	8013f2a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013ef2:	697b      	ldr	r3, [r7, #20]
 8013ef4:	8a5b      	ldrh	r3, [r3, #18]
 8013ef6:	88fa      	ldrh	r2, [r7, #6]
 8013ef8:	429a      	cmp	r2, r3
 8013efa:	d116      	bne.n	8013f2a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013efc:	697b      	ldr	r3, [r7, #20]
 8013efe:	681a      	ldr	r2, [r3, #0]
 8013f00:	68bb      	ldr	r3, [r7, #8]
 8013f02:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013f04:	429a      	cmp	r2, r3
 8013f06:	d00d      	beq.n	8013f24 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013f08:	68bb      	ldr	r3, [r7, #8]
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d00a      	beq.n	8013f24 <udp_bind+0xb4>
 8013f0e:	68bb      	ldr	r3, [r7, #8]
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d006      	beq.n	8013f24 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013f16:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d003      	beq.n	8013f24 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013f1c:	697b      	ldr	r3, [r7, #20]
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d102      	bne.n	8013f2a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013f24:	f06f 0307 	mvn.w	r3, #7
 8013f28:	e01c      	b.n	8013f64 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013f2a:	697b      	ldr	r3, [r7, #20]
 8013f2c:	68db      	ldr	r3, [r3, #12]
 8013f2e:	617b      	str	r3, [r7, #20]
 8013f30:	697b      	ldr	r3, [r7, #20]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d1d9      	bne.n	8013eea <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8013f36:	68bb      	ldr	r3, [r7, #8]
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d002      	beq.n	8013f42 <udp_bind+0xd2>
 8013f3c:	68bb      	ldr	r3, [r7, #8]
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	e000      	b.n	8013f44 <udp_bind+0xd4>
 8013f42:	2300      	movs	r3, #0
 8013f44:	68fa      	ldr	r2, [r7, #12]
 8013f46:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	88fa      	ldrh	r2, [r7, #6]
 8013f4c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013f4e:	7cfb      	ldrb	r3, [r7, #19]
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d106      	bne.n	8013f62 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013f54:	4b09      	ldr	r3, [pc, #36]	@ (8013f7c <udp_bind+0x10c>)
 8013f56:	681a      	ldr	r2, [r3, #0]
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013f5c:	4a07      	ldr	r2, [pc, #28]	@ (8013f7c <udp_bind+0x10c>)
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013f62:	2300      	movs	r3, #0
}
 8013f64:	4618      	mov	r0, r3
 8013f66:	3718      	adds	r7, #24
 8013f68:	46bd      	mov	sp, r7
 8013f6a:	bd80      	pop	{r7, pc}
 8013f6c:	0801b1d0 	.word	0x0801b1d0
 8013f70:	0801a654 	.word	0x0801a654
 8013f74:	0801a91c 	.word	0x0801a91c
 8013f78:	0801a6a8 	.word	0x0801a6a8
 8013f7c:	24007f60 	.word	0x24007f60

08013f80 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013f80:	b580      	push	{r7, lr}
 8013f82:	b084      	sub	sp, #16
 8013f84:	af00      	add	r7, sp, #0
 8013f86:	60f8      	str	r0, [r7, #12]
 8013f88:	60b9      	str	r1, [r7, #8]
 8013f8a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d107      	bne.n	8013fa2 <udp_recv+0x22>
 8013f92:	4b08      	ldr	r3, [pc, #32]	@ (8013fb4 <udp_recv+0x34>)
 8013f94:	f240 428a 	movw	r2, #1162	@ 0x48a
 8013f98:	4907      	ldr	r1, [pc, #28]	@ (8013fb8 <udp_recv+0x38>)
 8013f9a:	4808      	ldr	r0, [pc, #32]	@ (8013fbc <udp_recv+0x3c>)
 8013f9c:	f002 fe48 	bl	8016c30 <iprintf>
 8013fa0:	e005      	b.n	8013fae <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	68ba      	ldr	r2, [r7, #8]
 8013fa6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	687a      	ldr	r2, [r7, #4]
 8013fac:	61da      	str	r2, [r3, #28]
}
 8013fae:	3710      	adds	r7, #16
 8013fb0:	46bd      	mov	sp, r7
 8013fb2:	bd80      	pop	{r7, pc}
 8013fb4:	0801a654 	.word	0x0801a654
 8013fb8:	0801a988 	.word	0x0801a988
 8013fbc:	0801a6a8 	.word	0x0801a6a8

08013fc0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013fc0:	b580      	push	{r7, lr}
 8013fc2:	b084      	sub	sp, #16
 8013fc4:	af00      	add	r7, sp, #0
 8013fc6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d107      	bne.n	8013fde <udp_remove+0x1e>
 8013fce:	4b19      	ldr	r3, [pc, #100]	@ (8014034 <udp_remove+0x74>)
 8013fd0:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8013fd4:	4918      	ldr	r1, [pc, #96]	@ (8014038 <udp_remove+0x78>)
 8013fd6:	4819      	ldr	r0, [pc, #100]	@ (801403c <udp_remove+0x7c>)
 8013fd8:	f002 fe2a 	bl	8016c30 <iprintf>
 8013fdc:	e026      	b.n	801402c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8013fde:	4b18      	ldr	r3, [pc, #96]	@ (8014040 <udp_remove+0x80>)
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	687a      	ldr	r2, [r7, #4]
 8013fe4:	429a      	cmp	r2, r3
 8013fe6:	d105      	bne.n	8013ff4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013fe8:	4b15      	ldr	r3, [pc, #84]	@ (8014040 <udp_remove+0x80>)
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	68db      	ldr	r3, [r3, #12]
 8013fee:	4a14      	ldr	r2, [pc, #80]	@ (8014040 <udp_remove+0x80>)
 8013ff0:	6013      	str	r3, [r2, #0]
 8013ff2:	e017      	b.n	8014024 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013ff4:	4b12      	ldr	r3, [pc, #72]	@ (8014040 <udp_remove+0x80>)
 8013ff6:	681b      	ldr	r3, [r3, #0]
 8013ff8:	60fb      	str	r3, [r7, #12]
 8013ffa:	e010      	b.n	801401e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	68db      	ldr	r3, [r3, #12]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d009      	beq.n	8014018 <udp_remove+0x58>
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	68db      	ldr	r3, [r3, #12]
 8014008:	687a      	ldr	r2, [r7, #4]
 801400a:	429a      	cmp	r2, r3
 801400c:	d104      	bne.n	8014018 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	68da      	ldr	r2, [r3, #12]
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	60da      	str	r2, [r3, #12]
        break;
 8014016:	e005      	b.n	8014024 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	68db      	ldr	r3, [r3, #12]
 801401c:	60fb      	str	r3, [r7, #12]
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	2b00      	cmp	r3, #0
 8014022:	d1eb      	bne.n	8013ffc <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8014024:	6879      	ldr	r1, [r7, #4]
 8014026:	2000      	movs	r0, #0
 8014028:	f7f8 fa26 	bl	800c478 <memp_free>
}
 801402c:	3710      	adds	r7, #16
 801402e:	46bd      	mov	sp, r7
 8014030:	bd80      	pop	{r7, pc}
 8014032:	bf00      	nop
 8014034:	0801a654 	.word	0x0801a654
 8014038:	0801a9a0 	.word	0x0801a9a0
 801403c:	0801a6a8 	.word	0x0801a6a8
 8014040:	24007f60 	.word	0x24007f60

08014044 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8014044:	b580      	push	{r7, lr}
 8014046:	b082      	sub	sp, #8
 8014048:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801404a:	2000      	movs	r0, #0
 801404c:	f7f8 f99e 	bl	800c38c <memp_malloc>
 8014050:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	2b00      	cmp	r3, #0
 8014056:	d007      	beq.n	8014068 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8014058:	2220      	movs	r2, #32
 801405a:	2100      	movs	r1, #0
 801405c:	6878      	ldr	r0, [r7, #4]
 801405e:	f002 fe4c 	bl	8016cfa <memset>
    pcb->ttl = UDP_TTL;
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	22ff      	movs	r2, #255	@ 0xff
 8014066:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8014068:	687b      	ldr	r3, [r7, #4]
}
 801406a:	4618      	mov	r0, r3
 801406c:	3708      	adds	r7, #8
 801406e:	46bd      	mov	sp, r7
 8014070:	bd80      	pop	{r7, pc}

08014072 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8014072:	b580      	push	{r7, lr}
 8014074:	b084      	sub	sp, #16
 8014076:	af00      	add	r7, sp, #0
 8014078:	4603      	mov	r3, r0
 801407a:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801407c:	f7ff ffe2 	bl	8014044 <udp_new>
 8014080:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8014082:	68fb      	ldr	r3, [r7, #12]
}
 8014084:	4618      	mov	r0, r3
 8014086:	3710      	adds	r7, #16
 8014088:	46bd      	mov	sp, r7
 801408a:	bd80      	pop	{r7, pc}

0801408c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801408c:	b480      	push	{r7}
 801408e:	b085      	sub	sp, #20
 8014090:	af00      	add	r7, sp, #0
 8014092:	6078      	str	r0, [r7, #4]
 8014094:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	2b00      	cmp	r3, #0
 801409a:	d01e      	beq.n	80140da <udp_netif_ip_addr_changed+0x4e>
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d01a      	beq.n	80140da <udp_netif_ip_addr_changed+0x4e>
 80140a4:	683b      	ldr	r3, [r7, #0]
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d017      	beq.n	80140da <udp_netif_ip_addr_changed+0x4e>
 80140aa:	683b      	ldr	r3, [r7, #0]
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d013      	beq.n	80140da <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80140b2:	4b0d      	ldr	r3, [pc, #52]	@ (80140e8 <udp_netif_ip_addr_changed+0x5c>)
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	60fb      	str	r3, [r7, #12]
 80140b8:	e00c      	b.n	80140d4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	681a      	ldr	r2, [r3, #0]
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	429a      	cmp	r2, r3
 80140c4:	d103      	bne.n	80140ce <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80140c6:	683b      	ldr	r3, [r7, #0]
 80140c8:	681a      	ldr	r2, [r3, #0]
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	68db      	ldr	r3, [r3, #12]
 80140d2:	60fb      	str	r3, [r7, #12]
 80140d4:	68fb      	ldr	r3, [r7, #12]
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d1ef      	bne.n	80140ba <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80140da:	bf00      	nop
 80140dc:	3714      	adds	r7, #20
 80140de:	46bd      	mov	sp, r7
 80140e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e4:	4770      	bx	lr
 80140e6:	bf00      	nop
 80140e8:	24007f60 	.word	0x24007f60

080140ec <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80140ec:	b580      	push	{r7, lr}
 80140ee:	b082      	sub	sp, #8
 80140f0:	af00      	add	r7, sp, #0
 80140f2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80140f4:	4915      	ldr	r1, [pc, #84]	@ (801414c <etharp_free_entry+0x60>)
 80140f6:	687a      	ldr	r2, [r7, #4]
 80140f8:	4613      	mov	r3, r2
 80140fa:	005b      	lsls	r3, r3, #1
 80140fc:	4413      	add	r3, r2
 80140fe:	00db      	lsls	r3, r3, #3
 8014100:	440b      	add	r3, r1
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d013      	beq.n	8014130 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014108:	4910      	ldr	r1, [pc, #64]	@ (801414c <etharp_free_entry+0x60>)
 801410a:	687a      	ldr	r2, [r7, #4]
 801410c:	4613      	mov	r3, r2
 801410e:	005b      	lsls	r3, r3, #1
 8014110:	4413      	add	r3, r2
 8014112:	00db      	lsls	r3, r3, #3
 8014114:	440b      	add	r3, r1
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	4618      	mov	r0, r3
 801411a:	f7f9 f851 	bl	800d1c0 <pbuf_free>
    arp_table[i].q = NULL;
 801411e:	490b      	ldr	r1, [pc, #44]	@ (801414c <etharp_free_entry+0x60>)
 8014120:	687a      	ldr	r2, [r7, #4]
 8014122:	4613      	mov	r3, r2
 8014124:	005b      	lsls	r3, r3, #1
 8014126:	4413      	add	r3, r2
 8014128:	00db      	lsls	r3, r3, #3
 801412a:	440b      	add	r3, r1
 801412c:	2200      	movs	r2, #0
 801412e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014130:	4906      	ldr	r1, [pc, #24]	@ (801414c <etharp_free_entry+0x60>)
 8014132:	687a      	ldr	r2, [r7, #4]
 8014134:	4613      	mov	r3, r2
 8014136:	005b      	lsls	r3, r3, #1
 8014138:	4413      	add	r3, r2
 801413a:	00db      	lsls	r3, r3, #3
 801413c:	440b      	add	r3, r1
 801413e:	3314      	adds	r3, #20
 8014140:	2200      	movs	r2, #0
 8014142:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014144:	bf00      	nop
 8014146:	3708      	adds	r7, #8
 8014148:	46bd      	mov	sp, r7
 801414a:	bd80      	pop	{r7, pc}
 801414c:	24007f64 	.word	0x24007f64

08014150 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014150:	b580      	push	{r7, lr}
 8014152:	b082      	sub	sp, #8
 8014154:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014156:	2300      	movs	r3, #0
 8014158:	607b      	str	r3, [r7, #4]
 801415a:	e096      	b.n	801428a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801415c:	494f      	ldr	r1, [pc, #316]	@ (801429c <etharp_tmr+0x14c>)
 801415e:	687a      	ldr	r2, [r7, #4]
 8014160:	4613      	mov	r3, r2
 8014162:	005b      	lsls	r3, r3, #1
 8014164:	4413      	add	r3, r2
 8014166:	00db      	lsls	r3, r3, #3
 8014168:	440b      	add	r3, r1
 801416a:	3314      	adds	r3, #20
 801416c:	781b      	ldrb	r3, [r3, #0]
 801416e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014170:	78fb      	ldrb	r3, [r7, #3]
 8014172:	2b00      	cmp	r3, #0
 8014174:	f000 8086 	beq.w	8014284 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014178:	4948      	ldr	r1, [pc, #288]	@ (801429c <etharp_tmr+0x14c>)
 801417a:	687a      	ldr	r2, [r7, #4]
 801417c:	4613      	mov	r3, r2
 801417e:	005b      	lsls	r3, r3, #1
 8014180:	4413      	add	r3, r2
 8014182:	00db      	lsls	r3, r3, #3
 8014184:	440b      	add	r3, r1
 8014186:	3312      	adds	r3, #18
 8014188:	881b      	ldrh	r3, [r3, #0]
 801418a:	3301      	adds	r3, #1
 801418c:	b298      	uxth	r0, r3
 801418e:	4943      	ldr	r1, [pc, #268]	@ (801429c <etharp_tmr+0x14c>)
 8014190:	687a      	ldr	r2, [r7, #4]
 8014192:	4613      	mov	r3, r2
 8014194:	005b      	lsls	r3, r3, #1
 8014196:	4413      	add	r3, r2
 8014198:	00db      	lsls	r3, r3, #3
 801419a:	440b      	add	r3, r1
 801419c:	3312      	adds	r3, #18
 801419e:	4602      	mov	r2, r0
 80141a0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80141a2:	493e      	ldr	r1, [pc, #248]	@ (801429c <etharp_tmr+0x14c>)
 80141a4:	687a      	ldr	r2, [r7, #4]
 80141a6:	4613      	mov	r3, r2
 80141a8:	005b      	lsls	r3, r3, #1
 80141aa:	4413      	add	r3, r2
 80141ac:	00db      	lsls	r3, r3, #3
 80141ae:	440b      	add	r3, r1
 80141b0:	3312      	adds	r3, #18
 80141b2:	881b      	ldrh	r3, [r3, #0]
 80141b4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80141b8:	d215      	bcs.n	80141e6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80141ba:	4938      	ldr	r1, [pc, #224]	@ (801429c <etharp_tmr+0x14c>)
 80141bc:	687a      	ldr	r2, [r7, #4]
 80141be:	4613      	mov	r3, r2
 80141c0:	005b      	lsls	r3, r3, #1
 80141c2:	4413      	add	r3, r2
 80141c4:	00db      	lsls	r3, r3, #3
 80141c6:	440b      	add	r3, r1
 80141c8:	3314      	adds	r3, #20
 80141ca:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80141cc:	2b01      	cmp	r3, #1
 80141ce:	d10e      	bne.n	80141ee <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80141d0:	4932      	ldr	r1, [pc, #200]	@ (801429c <etharp_tmr+0x14c>)
 80141d2:	687a      	ldr	r2, [r7, #4]
 80141d4:	4613      	mov	r3, r2
 80141d6:	005b      	lsls	r3, r3, #1
 80141d8:	4413      	add	r3, r2
 80141da:	00db      	lsls	r3, r3, #3
 80141dc:	440b      	add	r3, r1
 80141de:	3312      	adds	r3, #18
 80141e0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80141e2:	2b04      	cmp	r3, #4
 80141e4:	d903      	bls.n	80141ee <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80141e6:	6878      	ldr	r0, [r7, #4]
 80141e8:	f7ff ff80 	bl	80140ec <etharp_free_entry>
 80141ec:	e04a      	b.n	8014284 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80141ee:	492b      	ldr	r1, [pc, #172]	@ (801429c <etharp_tmr+0x14c>)
 80141f0:	687a      	ldr	r2, [r7, #4]
 80141f2:	4613      	mov	r3, r2
 80141f4:	005b      	lsls	r3, r3, #1
 80141f6:	4413      	add	r3, r2
 80141f8:	00db      	lsls	r3, r3, #3
 80141fa:	440b      	add	r3, r1
 80141fc:	3314      	adds	r3, #20
 80141fe:	781b      	ldrb	r3, [r3, #0]
 8014200:	2b03      	cmp	r3, #3
 8014202:	d10a      	bne.n	801421a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014204:	4925      	ldr	r1, [pc, #148]	@ (801429c <etharp_tmr+0x14c>)
 8014206:	687a      	ldr	r2, [r7, #4]
 8014208:	4613      	mov	r3, r2
 801420a:	005b      	lsls	r3, r3, #1
 801420c:	4413      	add	r3, r2
 801420e:	00db      	lsls	r3, r3, #3
 8014210:	440b      	add	r3, r1
 8014212:	3314      	adds	r3, #20
 8014214:	2204      	movs	r2, #4
 8014216:	701a      	strb	r2, [r3, #0]
 8014218:	e034      	b.n	8014284 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801421a:	4920      	ldr	r1, [pc, #128]	@ (801429c <etharp_tmr+0x14c>)
 801421c:	687a      	ldr	r2, [r7, #4]
 801421e:	4613      	mov	r3, r2
 8014220:	005b      	lsls	r3, r3, #1
 8014222:	4413      	add	r3, r2
 8014224:	00db      	lsls	r3, r3, #3
 8014226:	440b      	add	r3, r1
 8014228:	3314      	adds	r3, #20
 801422a:	781b      	ldrb	r3, [r3, #0]
 801422c:	2b04      	cmp	r3, #4
 801422e:	d10a      	bne.n	8014246 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014230:	491a      	ldr	r1, [pc, #104]	@ (801429c <etharp_tmr+0x14c>)
 8014232:	687a      	ldr	r2, [r7, #4]
 8014234:	4613      	mov	r3, r2
 8014236:	005b      	lsls	r3, r3, #1
 8014238:	4413      	add	r3, r2
 801423a:	00db      	lsls	r3, r3, #3
 801423c:	440b      	add	r3, r1
 801423e:	3314      	adds	r3, #20
 8014240:	2202      	movs	r2, #2
 8014242:	701a      	strb	r2, [r3, #0]
 8014244:	e01e      	b.n	8014284 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014246:	4915      	ldr	r1, [pc, #84]	@ (801429c <etharp_tmr+0x14c>)
 8014248:	687a      	ldr	r2, [r7, #4]
 801424a:	4613      	mov	r3, r2
 801424c:	005b      	lsls	r3, r3, #1
 801424e:	4413      	add	r3, r2
 8014250:	00db      	lsls	r3, r3, #3
 8014252:	440b      	add	r3, r1
 8014254:	3314      	adds	r3, #20
 8014256:	781b      	ldrb	r3, [r3, #0]
 8014258:	2b01      	cmp	r3, #1
 801425a:	d113      	bne.n	8014284 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801425c:	490f      	ldr	r1, [pc, #60]	@ (801429c <etharp_tmr+0x14c>)
 801425e:	687a      	ldr	r2, [r7, #4]
 8014260:	4613      	mov	r3, r2
 8014262:	005b      	lsls	r3, r3, #1
 8014264:	4413      	add	r3, r2
 8014266:	00db      	lsls	r3, r3, #3
 8014268:	440b      	add	r3, r1
 801426a:	3308      	adds	r3, #8
 801426c:	6818      	ldr	r0, [r3, #0]
 801426e:	687a      	ldr	r2, [r7, #4]
 8014270:	4613      	mov	r3, r2
 8014272:	005b      	lsls	r3, r3, #1
 8014274:	4413      	add	r3, r2
 8014276:	00db      	lsls	r3, r3, #3
 8014278:	4a08      	ldr	r2, [pc, #32]	@ (801429c <etharp_tmr+0x14c>)
 801427a:	4413      	add	r3, r2
 801427c:	3304      	adds	r3, #4
 801427e:	4619      	mov	r1, r3
 8014280:	f000 fe6e 	bl	8014f60 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	3301      	adds	r3, #1
 8014288:	607b      	str	r3, [r7, #4]
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	2b09      	cmp	r3, #9
 801428e:	f77f af65 	ble.w	801415c <etharp_tmr+0xc>
      }
    }
  }
}
 8014292:	bf00      	nop
 8014294:	bf00      	nop
 8014296:	3708      	adds	r7, #8
 8014298:	46bd      	mov	sp, r7
 801429a:	bd80      	pop	{r7, pc}
 801429c:	24007f64 	.word	0x24007f64

080142a0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80142a0:	b580      	push	{r7, lr}
 80142a2:	b08a      	sub	sp, #40	@ 0x28
 80142a4:	af00      	add	r7, sp, #0
 80142a6:	60f8      	str	r0, [r7, #12]
 80142a8:	460b      	mov	r3, r1
 80142aa:	607a      	str	r2, [r7, #4]
 80142ac:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80142ae:	230a      	movs	r3, #10
 80142b0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80142b2:	230a      	movs	r3, #10
 80142b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80142b6:	230a      	movs	r3, #10
 80142b8:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 80142ba:	2300      	movs	r3, #0
 80142bc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80142be:	230a      	movs	r3, #10
 80142c0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80142c2:	2300      	movs	r3, #0
 80142c4:	83bb      	strh	r3, [r7, #28]
 80142c6:	2300      	movs	r3, #0
 80142c8:	837b      	strh	r3, [r7, #26]
 80142ca:	2300      	movs	r3, #0
 80142cc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80142ce:	2300      	movs	r3, #0
 80142d0:	843b      	strh	r3, [r7, #32]
 80142d2:	e0ae      	b.n	8014432 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80142d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80142d8:	49a6      	ldr	r1, [pc, #664]	@ (8014574 <etharp_find_entry+0x2d4>)
 80142da:	4613      	mov	r3, r2
 80142dc:	005b      	lsls	r3, r3, #1
 80142de:	4413      	add	r3, r2
 80142e0:	00db      	lsls	r3, r3, #3
 80142e2:	440b      	add	r3, r1
 80142e4:	3314      	adds	r3, #20
 80142e6:	781b      	ldrb	r3, [r3, #0]
 80142e8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80142ea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80142ee:	2b0a      	cmp	r3, #10
 80142f0:	d105      	bne.n	80142fe <etharp_find_entry+0x5e>
 80142f2:	7dfb      	ldrb	r3, [r7, #23]
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d102      	bne.n	80142fe <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80142f8:	8c3b      	ldrh	r3, [r7, #32]
 80142fa:	847b      	strh	r3, [r7, #34]	@ 0x22
 80142fc:	e095      	b.n	801442a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80142fe:	7dfb      	ldrb	r3, [r7, #23]
 8014300:	2b00      	cmp	r3, #0
 8014302:	f000 8092 	beq.w	801442a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014306:	7dfb      	ldrb	r3, [r7, #23]
 8014308:	2b01      	cmp	r3, #1
 801430a:	d009      	beq.n	8014320 <etharp_find_entry+0x80>
 801430c:	7dfb      	ldrb	r3, [r7, #23]
 801430e:	2b01      	cmp	r3, #1
 8014310:	d806      	bhi.n	8014320 <etharp_find_entry+0x80>
 8014312:	4b99      	ldr	r3, [pc, #612]	@ (8014578 <etharp_find_entry+0x2d8>)
 8014314:	f240 1223 	movw	r2, #291	@ 0x123
 8014318:	4998      	ldr	r1, [pc, #608]	@ (801457c <etharp_find_entry+0x2dc>)
 801431a:	4899      	ldr	r0, [pc, #612]	@ (8014580 <etharp_find_entry+0x2e0>)
 801431c:	f002 fc88 	bl	8016c30 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	2b00      	cmp	r3, #0
 8014324:	d020      	beq.n	8014368 <etharp_find_entry+0xc8>
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	6819      	ldr	r1, [r3, #0]
 801432a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801432e:	4891      	ldr	r0, [pc, #580]	@ (8014574 <etharp_find_entry+0x2d4>)
 8014330:	4613      	mov	r3, r2
 8014332:	005b      	lsls	r3, r3, #1
 8014334:	4413      	add	r3, r2
 8014336:	00db      	lsls	r3, r3, #3
 8014338:	4403      	add	r3, r0
 801433a:	3304      	adds	r3, #4
 801433c:	681b      	ldr	r3, [r3, #0]
 801433e:	4299      	cmp	r1, r3
 8014340:	d112      	bne.n	8014368 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	2b00      	cmp	r3, #0
 8014346:	d00c      	beq.n	8014362 <etharp_find_entry+0xc2>
 8014348:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801434c:	4989      	ldr	r1, [pc, #548]	@ (8014574 <etharp_find_entry+0x2d4>)
 801434e:	4613      	mov	r3, r2
 8014350:	005b      	lsls	r3, r3, #1
 8014352:	4413      	add	r3, r2
 8014354:	00db      	lsls	r3, r3, #3
 8014356:	440b      	add	r3, r1
 8014358:	3308      	adds	r3, #8
 801435a:	681b      	ldr	r3, [r3, #0]
 801435c:	687a      	ldr	r2, [r7, #4]
 801435e:	429a      	cmp	r2, r3
 8014360:	d102      	bne.n	8014368 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8014362:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014366:	e100      	b.n	801456a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014368:	7dfb      	ldrb	r3, [r7, #23]
 801436a:	2b01      	cmp	r3, #1
 801436c:	d140      	bne.n	80143f0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801436e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014372:	4980      	ldr	r1, [pc, #512]	@ (8014574 <etharp_find_entry+0x2d4>)
 8014374:	4613      	mov	r3, r2
 8014376:	005b      	lsls	r3, r3, #1
 8014378:	4413      	add	r3, r2
 801437a:	00db      	lsls	r3, r3, #3
 801437c:	440b      	add	r3, r1
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	2b00      	cmp	r3, #0
 8014382:	d01a      	beq.n	80143ba <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014384:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014388:	497a      	ldr	r1, [pc, #488]	@ (8014574 <etharp_find_entry+0x2d4>)
 801438a:	4613      	mov	r3, r2
 801438c:	005b      	lsls	r3, r3, #1
 801438e:	4413      	add	r3, r2
 8014390:	00db      	lsls	r3, r3, #3
 8014392:	440b      	add	r3, r1
 8014394:	3312      	adds	r3, #18
 8014396:	881b      	ldrh	r3, [r3, #0]
 8014398:	8bba      	ldrh	r2, [r7, #28]
 801439a:	429a      	cmp	r2, r3
 801439c:	d845      	bhi.n	801442a <etharp_find_entry+0x18a>
            old_queue = i;
 801439e:	8c3b      	ldrh	r3, [r7, #32]
 80143a0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80143a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80143a6:	4973      	ldr	r1, [pc, #460]	@ (8014574 <etharp_find_entry+0x2d4>)
 80143a8:	4613      	mov	r3, r2
 80143aa:	005b      	lsls	r3, r3, #1
 80143ac:	4413      	add	r3, r2
 80143ae:	00db      	lsls	r3, r3, #3
 80143b0:	440b      	add	r3, r1
 80143b2:	3312      	adds	r3, #18
 80143b4:	881b      	ldrh	r3, [r3, #0]
 80143b6:	83bb      	strh	r3, [r7, #28]
 80143b8:	e037      	b.n	801442a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80143ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80143be:	496d      	ldr	r1, [pc, #436]	@ (8014574 <etharp_find_entry+0x2d4>)
 80143c0:	4613      	mov	r3, r2
 80143c2:	005b      	lsls	r3, r3, #1
 80143c4:	4413      	add	r3, r2
 80143c6:	00db      	lsls	r3, r3, #3
 80143c8:	440b      	add	r3, r1
 80143ca:	3312      	adds	r3, #18
 80143cc:	881b      	ldrh	r3, [r3, #0]
 80143ce:	8b7a      	ldrh	r2, [r7, #26]
 80143d0:	429a      	cmp	r2, r3
 80143d2:	d82a      	bhi.n	801442a <etharp_find_entry+0x18a>
            old_pending = i;
 80143d4:	8c3b      	ldrh	r3, [r7, #32]
 80143d6:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 80143d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80143dc:	4965      	ldr	r1, [pc, #404]	@ (8014574 <etharp_find_entry+0x2d4>)
 80143de:	4613      	mov	r3, r2
 80143e0:	005b      	lsls	r3, r3, #1
 80143e2:	4413      	add	r3, r2
 80143e4:	00db      	lsls	r3, r3, #3
 80143e6:	440b      	add	r3, r1
 80143e8:	3312      	adds	r3, #18
 80143ea:	881b      	ldrh	r3, [r3, #0]
 80143ec:	837b      	strh	r3, [r7, #26]
 80143ee:	e01c      	b.n	801442a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80143f0:	7dfb      	ldrb	r3, [r7, #23]
 80143f2:	2b01      	cmp	r3, #1
 80143f4:	d919      	bls.n	801442a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80143f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80143fa:	495e      	ldr	r1, [pc, #376]	@ (8014574 <etharp_find_entry+0x2d4>)
 80143fc:	4613      	mov	r3, r2
 80143fe:	005b      	lsls	r3, r3, #1
 8014400:	4413      	add	r3, r2
 8014402:	00db      	lsls	r3, r3, #3
 8014404:	440b      	add	r3, r1
 8014406:	3312      	adds	r3, #18
 8014408:	881b      	ldrh	r3, [r3, #0]
 801440a:	8b3a      	ldrh	r2, [r7, #24]
 801440c:	429a      	cmp	r2, r3
 801440e:	d80c      	bhi.n	801442a <etharp_find_entry+0x18a>
            old_stable = i;
 8014410:	8c3b      	ldrh	r3, [r7, #32]
 8014412:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8014414:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014418:	4956      	ldr	r1, [pc, #344]	@ (8014574 <etharp_find_entry+0x2d4>)
 801441a:	4613      	mov	r3, r2
 801441c:	005b      	lsls	r3, r3, #1
 801441e:	4413      	add	r3, r2
 8014420:	00db      	lsls	r3, r3, #3
 8014422:	440b      	add	r3, r1
 8014424:	3312      	adds	r3, #18
 8014426:	881b      	ldrh	r3, [r3, #0]
 8014428:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801442a:	8c3b      	ldrh	r3, [r7, #32]
 801442c:	3301      	adds	r3, #1
 801442e:	b29b      	uxth	r3, r3
 8014430:	843b      	strh	r3, [r7, #32]
 8014432:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014436:	2b09      	cmp	r3, #9
 8014438:	f77f af4c 	ble.w	80142d4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801443c:	7afb      	ldrb	r3, [r7, #11]
 801443e:	f003 0302 	and.w	r3, r3, #2
 8014442:	2b00      	cmp	r3, #0
 8014444:	d108      	bne.n	8014458 <etharp_find_entry+0x1b8>
 8014446:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801444a:	2b0a      	cmp	r3, #10
 801444c:	d107      	bne.n	801445e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801444e:	7afb      	ldrb	r3, [r7, #11]
 8014450:	f003 0301 	and.w	r3, r3, #1
 8014454:	2b00      	cmp	r3, #0
 8014456:	d102      	bne.n	801445e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014458:	f04f 33ff 	mov.w	r3, #4294967295
 801445c:	e085      	b.n	801456a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801445e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8014462:	2b09      	cmp	r3, #9
 8014464:	dc02      	bgt.n	801446c <etharp_find_entry+0x1cc>
    i = empty;
 8014466:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014468:	843b      	strh	r3, [r7, #32]
 801446a:	e039      	b.n	80144e0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801446c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8014470:	2b09      	cmp	r3, #9
 8014472:	dc14      	bgt.n	801449e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014474:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014476:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014478:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801447c:	493d      	ldr	r1, [pc, #244]	@ (8014574 <etharp_find_entry+0x2d4>)
 801447e:	4613      	mov	r3, r2
 8014480:	005b      	lsls	r3, r3, #1
 8014482:	4413      	add	r3, r2
 8014484:	00db      	lsls	r3, r3, #3
 8014486:	440b      	add	r3, r1
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	2b00      	cmp	r3, #0
 801448c:	d018      	beq.n	80144c0 <etharp_find_entry+0x220>
 801448e:	4b3a      	ldr	r3, [pc, #232]	@ (8014578 <etharp_find_entry+0x2d8>)
 8014490:	f240 126d 	movw	r2, #365	@ 0x16d
 8014494:	493b      	ldr	r1, [pc, #236]	@ (8014584 <etharp_find_entry+0x2e4>)
 8014496:	483a      	ldr	r0, [pc, #232]	@ (8014580 <etharp_find_entry+0x2e0>)
 8014498:	f002 fbca 	bl	8016c30 <iprintf>
 801449c:	e010      	b.n	80144c0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801449e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80144a2:	2b09      	cmp	r3, #9
 80144a4:	dc02      	bgt.n	80144ac <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80144a6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80144a8:	843b      	strh	r3, [r7, #32]
 80144aa:	e009      	b.n	80144c0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80144ac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80144b0:	2b09      	cmp	r3, #9
 80144b2:	dc02      	bgt.n	80144ba <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80144b4:	8bfb      	ldrh	r3, [r7, #30]
 80144b6:	843b      	strh	r3, [r7, #32]
 80144b8:	e002      	b.n	80144c0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80144ba:	f04f 33ff 	mov.w	r3, #4294967295
 80144be:	e054      	b.n	801456a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80144c0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80144c4:	2b09      	cmp	r3, #9
 80144c6:	dd06      	ble.n	80144d6 <etharp_find_entry+0x236>
 80144c8:	4b2b      	ldr	r3, [pc, #172]	@ (8014578 <etharp_find_entry+0x2d8>)
 80144ca:	f240 127f 	movw	r2, #383	@ 0x17f
 80144ce:	492e      	ldr	r1, [pc, #184]	@ (8014588 <etharp_find_entry+0x2e8>)
 80144d0:	482b      	ldr	r0, [pc, #172]	@ (8014580 <etharp_find_entry+0x2e0>)
 80144d2:	f002 fbad 	bl	8016c30 <iprintf>
    etharp_free_entry(i);
 80144d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80144da:	4618      	mov	r0, r3
 80144dc:	f7ff fe06 	bl	80140ec <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80144e0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80144e4:	2b09      	cmp	r3, #9
 80144e6:	dd06      	ble.n	80144f6 <etharp_find_entry+0x256>
 80144e8:	4b23      	ldr	r3, [pc, #140]	@ (8014578 <etharp_find_entry+0x2d8>)
 80144ea:	f240 1283 	movw	r2, #387	@ 0x183
 80144ee:	4926      	ldr	r1, [pc, #152]	@ (8014588 <etharp_find_entry+0x2e8>)
 80144f0:	4823      	ldr	r0, [pc, #140]	@ (8014580 <etharp_find_entry+0x2e0>)
 80144f2:	f002 fb9d 	bl	8016c30 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80144f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80144fa:	491e      	ldr	r1, [pc, #120]	@ (8014574 <etharp_find_entry+0x2d4>)
 80144fc:	4613      	mov	r3, r2
 80144fe:	005b      	lsls	r3, r3, #1
 8014500:	4413      	add	r3, r2
 8014502:	00db      	lsls	r3, r3, #3
 8014504:	440b      	add	r3, r1
 8014506:	3314      	adds	r3, #20
 8014508:	781b      	ldrb	r3, [r3, #0]
 801450a:	2b00      	cmp	r3, #0
 801450c:	d006      	beq.n	801451c <etharp_find_entry+0x27c>
 801450e:	4b1a      	ldr	r3, [pc, #104]	@ (8014578 <etharp_find_entry+0x2d8>)
 8014510:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8014514:	491d      	ldr	r1, [pc, #116]	@ (801458c <etharp_find_entry+0x2ec>)
 8014516:	481a      	ldr	r0, [pc, #104]	@ (8014580 <etharp_find_entry+0x2e0>)
 8014518:	f002 fb8a 	bl	8016c30 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	2b00      	cmp	r3, #0
 8014520:	d00b      	beq.n	801453a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014522:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014526:	68fb      	ldr	r3, [r7, #12]
 8014528:	6819      	ldr	r1, [r3, #0]
 801452a:	4812      	ldr	r0, [pc, #72]	@ (8014574 <etharp_find_entry+0x2d4>)
 801452c:	4613      	mov	r3, r2
 801452e:	005b      	lsls	r3, r3, #1
 8014530:	4413      	add	r3, r2
 8014532:	00db      	lsls	r3, r3, #3
 8014534:	4403      	add	r3, r0
 8014536:	3304      	adds	r3, #4
 8014538:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801453a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801453e:	490d      	ldr	r1, [pc, #52]	@ (8014574 <etharp_find_entry+0x2d4>)
 8014540:	4613      	mov	r3, r2
 8014542:	005b      	lsls	r3, r3, #1
 8014544:	4413      	add	r3, r2
 8014546:	00db      	lsls	r3, r3, #3
 8014548:	440b      	add	r3, r1
 801454a:	3312      	adds	r3, #18
 801454c:	2200      	movs	r2, #0
 801454e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014550:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014554:	4907      	ldr	r1, [pc, #28]	@ (8014574 <etharp_find_entry+0x2d4>)
 8014556:	4613      	mov	r3, r2
 8014558:	005b      	lsls	r3, r3, #1
 801455a:	4413      	add	r3, r2
 801455c:	00db      	lsls	r3, r3, #3
 801455e:	440b      	add	r3, r1
 8014560:	3308      	adds	r3, #8
 8014562:	687a      	ldr	r2, [r7, #4]
 8014564:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8014566:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801456a:	4618      	mov	r0, r3
 801456c:	3728      	adds	r7, #40	@ 0x28
 801456e:	46bd      	mov	sp, r7
 8014570:	bd80      	pop	{r7, pc}
 8014572:	bf00      	nop
 8014574:	24007f64 	.word	0x24007f64
 8014578:	0801a9b8 	.word	0x0801a9b8
 801457c:	0801a9f0 	.word	0x0801a9f0
 8014580:	0801aa30 	.word	0x0801aa30
 8014584:	0801aa58 	.word	0x0801aa58
 8014588:	0801aa70 	.word	0x0801aa70
 801458c:	0801aa84 	.word	0x0801aa84

08014590 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014590:	b580      	push	{r7, lr}
 8014592:	b088      	sub	sp, #32
 8014594:	af02      	add	r7, sp, #8
 8014596:	60f8      	str	r0, [r7, #12]
 8014598:	60b9      	str	r1, [r7, #8]
 801459a:	607a      	str	r2, [r7, #4]
 801459c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80145a4:	2b06      	cmp	r3, #6
 80145a6:	d006      	beq.n	80145b6 <etharp_update_arp_entry+0x26>
 80145a8:	4b48      	ldr	r3, [pc, #288]	@ (80146cc <etharp_update_arp_entry+0x13c>)
 80145aa:	f240 12a9 	movw	r2, #425	@ 0x1a9
 80145ae:	4948      	ldr	r1, [pc, #288]	@ (80146d0 <etharp_update_arp_entry+0x140>)
 80145b0:	4848      	ldr	r0, [pc, #288]	@ (80146d4 <etharp_update_arp_entry+0x144>)
 80145b2:	f002 fb3d 	bl	8016c30 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80145b6:	68bb      	ldr	r3, [r7, #8]
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d012      	beq.n	80145e2 <etharp_update_arp_entry+0x52>
 80145bc:	68bb      	ldr	r3, [r7, #8]
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d00e      	beq.n	80145e2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80145c4:	68bb      	ldr	r3, [r7, #8]
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	68f9      	ldr	r1, [r7, #12]
 80145ca:	4618      	mov	r0, r3
 80145cc:	f001 f924 	bl	8015818 <ip4_addr_isbroadcast_u32>
 80145d0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d105      	bne.n	80145e2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80145d6:	68bb      	ldr	r3, [r7, #8]
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80145de:	2be0      	cmp	r3, #224	@ 0xe0
 80145e0:	d102      	bne.n	80145e8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80145e2:	f06f 030f 	mvn.w	r3, #15
 80145e6:	e06c      	b.n	80146c2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80145e8:	78fb      	ldrb	r3, [r7, #3]
 80145ea:	68fa      	ldr	r2, [r7, #12]
 80145ec:	4619      	mov	r1, r3
 80145ee:	68b8      	ldr	r0, [r7, #8]
 80145f0:	f7ff fe56 	bl	80142a0 <etharp_find_entry>
 80145f4:	4603      	mov	r3, r0
 80145f6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80145f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	da02      	bge.n	8014606 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014600:	8afb      	ldrh	r3, [r7, #22]
 8014602:	b25b      	sxtb	r3, r3
 8014604:	e05d      	b.n	80146c2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014606:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801460a:	4933      	ldr	r1, [pc, #204]	@ (80146d8 <etharp_update_arp_entry+0x148>)
 801460c:	4613      	mov	r3, r2
 801460e:	005b      	lsls	r3, r3, #1
 8014610:	4413      	add	r3, r2
 8014612:	00db      	lsls	r3, r3, #3
 8014614:	440b      	add	r3, r1
 8014616:	3314      	adds	r3, #20
 8014618:	2202      	movs	r2, #2
 801461a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801461c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014620:	492d      	ldr	r1, [pc, #180]	@ (80146d8 <etharp_update_arp_entry+0x148>)
 8014622:	4613      	mov	r3, r2
 8014624:	005b      	lsls	r3, r3, #1
 8014626:	4413      	add	r3, r2
 8014628:	00db      	lsls	r3, r3, #3
 801462a:	440b      	add	r3, r1
 801462c:	3308      	adds	r3, #8
 801462e:	68fa      	ldr	r2, [r7, #12]
 8014630:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014632:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014636:	4613      	mov	r3, r2
 8014638:	005b      	lsls	r3, r3, #1
 801463a:	4413      	add	r3, r2
 801463c:	00db      	lsls	r3, r3, #3
 801463e:	3308      	adds	r3, #8
 8014640:	4a25      	ldr	r2, [pc, #148]	@ (80146d8 <etharp_update_arp_entry+0x148>)
 8014642:	4413      	add	r3, r2
 8014644:	3304      	adds	r3, #4
 8014646:	2206      	movs	r2, #6
 8014648:	6879      	ldr	r1, [r7, #4]
 801464a:	4618      	mov	r0, r3
 801464c:	f002 fc21 	bl	8016e92 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014650:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014654:	4920      	ldr	r1, [pc, #128]	@ (80146d8 <etharp_update_arp_entry+0x148>)
 8014656:	4613      	mov	r3, r2
 8014658:	005b      	lsls	r3, r3, #1
 801465a:	4413      	add	r3, r2
 801465c:	00db      	lsls	r3, r3, #3
 801465e:	440b      	add	r3, r1
 8014660:	3312      	adds	r3, #18
 8014662:	2200      	movs	r2, #0
 8014664:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014666:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801466a:	491b      	ldr	r1, [pc, #108]	@ (80146d8 <etharp_update_arp_entry+0x148>)
 801466c:	4613      	mov	r3, r2
 801466e:	005b      	lsls	r3, r3, #1
 8014670:	4413      	add	r3, r2
 8014672:	00db      	lsls	r3, r3, #3
 8014674:	440b      	add	r3, r1
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	2b00      	cmp	r3, #0
 801467a:	d021      	beq.n	80146c0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801467c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014680:	4915      	ldr	r1, [pc, #84]	@ (80146d8 <etharp_update_arp_entry+0x148>)
 8014682:	4613      	mov	r3, r2
 8014684:	005b      	lsls	r3, r3, #1
 8014686:	4413      	add	r3, r2
 8014688:	00db      	lsls	r3, r3, #3
 801468a:	440b      	add	r3, r1
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014690:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014694:	4910      	ldr	r1, [pc, #64]	@ (80146d8 <etharp_update_arp_entry+0x148>)
 8014696:	4613      	mov	r3, r2
 8014698:	005b      	lsls	r3, r3, #1
 801469a:	4413      	add	r3, r2
 801469c:	00db      	lsls	r3, r3, #3
 801469e:	440b      	add	r3, r1
 80146a0:	2200      	movs	r2, #0
 80146a2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80146aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80146ae:	9300      	str	r3, [sp, #0]
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	6939      	ldr	r1, [r7, #16]
 80146b4:	68f8      	ldr	r0, [r7, #12]
 80146b6:	f001 ffbd 	bl	8016634 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80146ba:	6938      	ldr	r0, [r7, #16]
 80146bc:	f7f8 fd80 	bl	800d1c0 <pbuf_free>
  }
  return ERR_OK;
 80146c0:	2300      	movs	r3, #0
}
 80146c2:	4618      	mov	r0, r3
 80146c4:	3718      	adds	r7, #24
 80146c6:	46bd      	mov	sp, r7
 80146c8:	bd80      	pop	{r7, pc}
 80146ca:	bf00      	nop
 80146cc:	0801a9b8 	.word	0x0801a9b8
 80146d0:	0801aab0 	.word	0x0801aab0
 80146d4:	0801aa30 	.word	0x0801aa30
 80146d8:	24007f64 	.word	0x24007f64

080146dc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80146dc:	b580      	push	{r7, lr}
 80146de:	b084      	sub	sp, #16
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80146e4:	2300      	movs	r3, #0
 80146e6:	60fb      	str	r3, [r7, #12]
 80146e8:	e01e      	b.n	8014728 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80146ea:	4913      	ldr	r1, [pc, #76]	@ (8014738 <etharp_cleanup_netif+0x5c>)
 80146ec:	68fa      	ldr	r2, [r7, #12]
 80146ee:	4613      	mov	r3, r2
 80146f0:	005b      	lsls	r3, r3, #1
 80146f2:	4413      	add	r3, r2
 80146f4:	00db      	lsls	r3, r3, #3
 80146f6:	440b      	add	r3, r1
 80146f8:	3314      	adds	r3, #20
 80146fa:	781b      	ldrb	r3, [r3, #0]
 80146fc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80146fe:	7afb      	ldrb	r3, [r7, #11]
 8014700:	2b00      	cmp	r3, #0
 8014702:	d00e      	beq.n	8014722 <etharp_cleanup_netif+0x46>
 8014704:	490c      	ldr	r1, [pc, #48]	@ (8014738 <etharp_cleanup_netif+0x5c>)
 8014706:	68fa      	ldr	r2, [r7, #12]
 8014708:	4613      	mov	r3, r2
 801470a:	005b      	lsls	r3, r3, #1
 801470c:	4413      	add	r3, r2
 801470e:	00db      	lsls	r3, r3, #3
 8014710:	440b      	add	r3, r1
 8014712:	3308      	adds	r3, #8
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	687a      	ldr	r2, [r7, #4]
 8014718:	429a      	cmp	r2, r3
 801471a:	d102      	bne.n	8014722 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801471c:	68f8      	ldr	r0, [r7, #12]
 801471e:	f7ff fce5 	bl	80140ec <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	3301      	adds	r3, #1
 8014726:	60fb      	str	r3, [r7, #12]
 8014728:	68fb      	ldr	r3, [r7, #12]
 801472a:	2b09      	cmp	r3, #9
 801472c:	dddd      	ble.n	80146ea <etharp_cleanup_netif+0xe>
    }
  }
}
 801472e:	bf00      	nop
 8014730:	bf00      	nop
 8014732:	3710      	adds	r7, #16
 8014734:	46bd      	mov	sp, r7
 8014736:	bd80      	pop	{r7, pc}
 8014738:	24007f64 	.word	0x24007f64

0801473c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801473c:	b5b0      	push	{r4, r5, r7, lr}
 801473e:	b08a      	sub	sp, #40	@ 0x28
 8014740:	af04      	add	r7, sp, #16
 8014742:	6078      	str	r0, [r7, #4]
 8014744:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014746:	683b      	ldr	r3, [r7, #0]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d107      	bne.n	801475c <etharp_input+0x20>
 801474c:	4b3d      	ldr	r3, [pc, #244]	@ (8014844 <etharp_input+0x108>)
 801474e:	f240 228a 	movw	r2, #650	@ 0x28a
 8014752:	493d      	ldr	r1, [pc, #244]	@ (8014848 <etharp_input+0x10c>)
 8014754:	483d      	ldr	r0, [pc, #244]	@ (801484c <etharp_input+0x110>)
 8014756:	f002 fa6b 	bl	8016c30 <iprintf>
 801475a:	e06f      	b.n	801483c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	685b      	ldr	r3, [r3, #4]
 8014760:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014762:	693b      	ldr	r3, [r7, #16]
 8014764:	881b      	ldrh	r3, [r3, #0]
 8014766:	b29b      	uxth	r3, r3
 8014768:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801476c:	d10c      	bne.n	8014788 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801476e:	693b      	ldr	r3, [r7, #16]
 8014770:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014772:	2b06      	cmp	r3, #6
 8014774:	d108      	bne.n	8014788 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014776:	693b      	ldr	r3, [r7, #16]
 8014778:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801477a:	2b04      	cmp	r3, #4
 801477c:	d104      	bne.n	8014788 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801477e:	693b      	ldr	r3, [r7, #16]
 8014780:	885b      	ldrh	r3, [r3, #2]
 8014782:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014784:	2b08      	cmp	r3, #8
 8014786:	d003      	beq.n	8014790 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014788:	6878      	ldr	r0, [r7, #4]
 801478a:	f7f8 fd19 	bl	800d1c0 <pbuf_free>
    return;
 801478e:	e055      	b.n	801483c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014790:	693b      	ldr	r3, [r7, #16]
 8014792:	330e      	adds	r3, #14
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014798:	693b      	ldr	r3, [r7, #16]
 801479a:	3318      	adds	r3, #24
 801479c:	681b      	ldr	r3, [r3, #0]
 801479e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80147a0:	683b      	ldr	r3, [r7, #0]
 80147a2:	3304      	adds	r3, #4
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	d102      	bne.n	80147b0 <etharp_input+0x74>
    for_us = 0;
 80147aa:	2300      	movs	r3, #0
 80147ac:	75fb      	strb	r3, [r7, #23]
 80147ae:	e009      	b.n	80147c4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80147b0:	68ba      	ldr	r2, [r7, #8]
 80147b2:	683b      	ldr	r3, [r7, #0]
 80147b4:	3304      	adds	r3, #4
 80147b6:	681b      	ldr	r3, [r3, #0]
 80147b8:	429a      	cmp	r2, r3
 80147ba:	bf0c      	ite	eq
 80147bc:	2301      	moveq	r3, #1
 80147be:	2300      	movne	r3, #0
 80147c0:	b2db      	uxtb	r3, r3
 80147c2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80147c4:	693b      	ldr	r3, [r7, #16]
 80147c6:	f103 0208 	add.w	r2, r3, #8
 80147ca:	7dfb      	ldrb	r3, [r7, #23]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d001      	beq.n	80147d4 <etharp_input+0x98>
 80147d0:	2301      	movs	r3, #1
 80147d2:	e000      	b.n	80147d6 <etharp_input+0x9a>
 80147d4:	2302      	movs	r3, #2
 80147d6:	f107 010c 	add.w	r1, r7, #12
 80147da:	6838      	ldr	r0, [r7, #0]
 80147dc:	f7ff fed8 	bl	8014590 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80147e0:	693b      	ldr	r3, [r7, #16]
 80147e2:	88db      	ldrh	r3, [r3, #6]
 80147e4:	b29b      	uxth	r3, r3
 80147e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80147ea:	d003      	beq.n	80147f4 <etharp_input+0xb8>
 80147ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80147f0:	d01e      	beq.n	8014830 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80147f2:	e020      	b.n	8014836 <etharp_input+0xfa>
      if (for_us) {
 80147f4:	7dfb      	ldrb	r3, [r7, #23]
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d01c      	beq.n	8014834 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80147fa:	683b      	ldr	r3, [r7, #0]
 80147fc:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8014800:	693b      	ldr	r3, [r7, #16]
 8014802:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014806:	683b      	ldr	r3, [r7, #0]
 8014808:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801480c:	683b      	ldr	r3, [r7, #0]
 801480e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014810:	693a      	ldr	r2, [r7, #16]
 8014812:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014814:	2102      	movs	r1, #2
 8014816:	9103      	str	r1, [sp, #12]
 8014818:	f107 010c 	add.w	r1, r7, #12
 801481c:	9102      	str	r1, [sp, #8]
 801481e:	9201      	str	r2, [sp, #4]
 8014820:	9300      	str	r3, [sp, #0]
 8014822:	462b      	mov	r3, r5
 8014824:	4622      	mov	r2, r4
 8014826:	4601      	mov	r1, r0
 8014828:	6838      	ldr	r0, [r7, #0]
 801482a:	f000 faeb 	bl	8014e04 <etharp_raw>
      break;
 801482e:	e001      	b.n	8014834 <etharp_input+0xf8>
      break;
 8014830:	bf00      	nop
 8014832:	e000      	b.n	8014836 <etharp_input+0xfa>
      break;
 8014834:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014836:	6878      	ldr	r0, [r7, #4]
 8014838:	f7f8 fcc2 	bl	800d1c0 <pbuf_free>
}
 801483c:	3718      	adds	r7, #24
 801483e:	46bd      	mov	sp, r7
 8014840:	bdb0      	pop	{r4, r5, r7, pc}
 8014842:	bf00      	nop
 8014844:	0801a9b8 	.word	0x0801a9b8
 8014848:	0801ab08 	.word	0x0801ab08
 801484c:	0801aa30 	.word	0x0801aa30

08014850 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014850:	b580      	push	{r7, lr}
 8014852:	b086      	sub	sp, #24
 8014854:	af02      	add	r7, sp, #8
 8014856:	60f8      	str	r0, [r7, #12]
 8014858:	60b9      	str	r1, [r7, #8]
 801485a:	4613      	mov	r3, r2
 801485c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801485e:	79fa      	ldrb	r2, [r7, #7]
 8014860:	4944      	ldr	r1, [pc, #272]	@ (8014974 <etharp_output_to_arp_index+0x124>)
 8014862:	4613      	mov	r3, r2
 8014864:	005b      	lsls	r3, r3, #1
 8014866:	4413      	add	r3, r2
 8014868:	00db      	lsls	r3, r3, #3
 801486a:	440b      	add	r3, r1
 801486c:	3314      	adds	r3, #20
 801486e:	781b      	ldrb	r3, [r3, #0]
 8014870:	2b01      	cmp	r3, #1
 8014872:	d806      	bhi.n	8014882 <etharp_output_to_arp_index+0x32>
 8014874:	4b40      	ldr	r3, [pc, #256]	@ (8014978 <etharp_output_to_arp_index+0x128>)
 8014876:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801487a:	4940      	ldr	r1, [pc, #256]	@ (801497c <etharp_output_to_arp_index+0x12c>)
 801487c:	4840      	ldr	r0, [pc, #256]	@ (8014980 <etharp_output_to_arp_index+0x130>)
 801487e:	f002 f9d7 	bl	8016c30 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014882:	79fa      	ldrb	r2, [r7, #7]
 8014884:	493b      	ldr	r1, [pc, #236]	@ (8014974 <etharp_output_to_arp_index+0x124>)
 8014886:	4613      	mov	r3, r2
 8014888:	005b      	lsls	r3, r3, #1
 801488a:	4413      	add	r3, r2
 801488c:	00db      	lsls	r3, r3, #3
 801488e:	440b      	add	r3, r1
 8014890:	3314      	adds	r3, #20
 8014892:	781b      	ldrb	r3, [r3, #0]
 8014894:	2b02      	cmp	r3, #2
 8014896:	d153      	bne.n	8014940 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014898:	79fa      	ldrb	r2, [r7, #7]
 801489a:	4936      	ldr	r1, [pc, #216]	@ (8014974 <etharp_output_to_arp_index+0x124>)
 801489c:	4613      	mov	r3, r2
 801489e:	005b      	lsls	r3, r3, #1
 80148a0:	4413      	add	r3, r2
 80148a2:	00db      	lsls	r3, r3, #3
 80148a4:	440b      	add	r3, r1
 80148a6:	3312      	adds	r3, #18
 80148a8:	881b      	ldrh	r3, [r3, #0]
 80148aa:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80148ae:	d919      	bls.n	80148e4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80148b0:	79fa      	ldrb	r2, [r7, #7]
 80148b2:	4613      	mov	r3, r2
 80148b4:	005b      	lsls	r3, r3, #1
 80148b6:	4413      	add	r3, r2
 80148b8:	00db      	lsls	r3, r3, #3
 80148ba:	4a2e      	ldr	r2, [pc, #184]	@ (8014974 <etharp_output_to_arp_index+0x124>)
 80148bc:	4413      	add	r3, r2
 80148be:	3304      	adds	r3, #4
 80148c0:	4619      	mov	r1, r3
 80148c2:	68f8      	ldr	r0, [r7, #12]
 80148c4:	f000 fb4c 	bl	8014f60 <etharp_request>
 80148c8:	4603      	mov	r3, r0
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d138      	bne.n	8014940 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80148ce:	79fa      	ldrb	r2, [r7, #7]
 80148d0:	4928      	ldr	r1, [pc, #160]	@ (8014974 <etharp_output_to_arp_index+0x124>)
 80148d2:	4613      	mov	r3, r2
 80148d4:	005b      	lsls	r3, r3, #1
 80148d6:	4413      	add	r3, r2
 80148d8:	00db      	lsls	r3, r3, #3
 80148da:	440b      	add	r3, r1
 80148dc:	3314      	adds	r3, #20
 80148de:	2203      	movs	r2, #3
 80148e0:	701a      	strb	r2, [r3, #0]
 80148e2:	e02d      	b.n	8014940 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80148e4:	79fa      	ldrb	r2, [r7, #7]
 80148e6:	4923      	ldr	r1, [pc, #140]	@ (8014974 <etharp_output_to_arp_index+0x124>)
 80148e8:	4613      	mov	r3, r2
 80148ea:	005b      	lsls	r3, r3, #1
 80148ec:	4413      	add	r3, r2
 80148ee:	00db      	lsls	r3, r3, #3
 80148f0:	440b      	add	r3, r1
 80148f2:	3312      	adds	r3, #18
 80148f4:	881b      	ldrh	r3, [r3, #0]
 80148f6:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80148fa:	d321      	bcc.n	8014940 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80148fc:	79fa      	ldrb	r2, [r7, #7]
 80148fe:	4613      	mov	r3, r2
 8014900:	005b      	lsls	r3, r3, #1
 8014902:	4413      	add	r3, r2
 8014904:	00db      	lsls	r3, r3, #3
 8014906:	4a1b      	ldr	r2, [pc, #108]	@ (8014974 <etharp_output_to_arp_index+0x124>)
 8014908:	4413      	add	r3, r2
 801490a:	1d19      	adds	r1, r3, #4
 801490c:	79fa      	ldrb	r2, [r7, #7]
 801490e:	4613      	mov	r3, r2
 8014910:	005b      	lsls	r3, r3, #1
 8014912:	4413      	add	r3, r2
 8014914:	00db      	lsls	r3, r3, #3
 8014916:	3308      	adds	r3, #8
 8014918:	4a16      	ldr	r2, [pc, #88]	@ (8014974 <etharp_output_to_arp_index+0x124>)
 801491a:	4413      	add	r3, r2
 801491c:	3304      	adds	r3, #4
 801491e:	461a      	mov	r2, r3
 8014920:	68f8      	ldr	r0, [r7, #12]
 8014922:	f000 fafb 	bl	8014f1c <etharp_request_dst>
 8014926:	4603      	mov	r3, r0
 8014928:	2b00      	cmp	r3, #0
 801492a:	d109      	bne.n	8014940 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801492c:	79fa      	ldrb	r2, [r7, #7]
 801492e:	4911      	ldr	r1, [pc, #68]	@ (8014974 <etharp_output_to_arp_index+0x124>)
 8014930:	4613      	mov	r3, r2
 8014932:	005b      	lsls	r3, r3, #1
 8014934:	4413      	add	r3, r2
 8014936:	00db      	lsls	r3, r3, #3
 8014938:	440b      	add	r3, r1
 801493a:	3314      	adds	r3, #20
 801493c:	2203      	movs	r2, #3
 801493e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8014946:	79fa      	ldrb	r2, [r7, #7]
 8014948:	4613      	mov	r3, r2
 801494a:	005b      	lsls	r3, r3, #1
 801494c:	4413      	add	r3, r2
 801494e:	00db      	lsls	r3, r3, #3
 8014950:	3308      	adds	r3, #8
 8014952:	4a08      	ldr	r2, [pc, #32]	@ (8014974 <etharp_output_to_arp_index+0x124>)
 8014954:	4413      	add	r3, r2
 8014956:	3304      	adds	r3, #4
 8014958:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801495c:	9200      	str	r2, [sp, #0]
 801495e:	460a      	mov	r2, r1
 8014960:	68b9      	ldr	r1, [r7, #8]
 8014962:	68f8      	ldr	r0, [r7, #12]
 8014964:	f001 fe66 	bl	8016634 <ethernet_output>
 8014968:	4603      	mov	r3, r0
}
 801496a:	4618      	mov	r0, r3
 801496c:	3710      	adds	r7, #16
 801496e:	46bd      	mov	sp, r7
 8014970:	bd80      	pop	{r7, pc}
 8014972:	bf00      	nop
 8014974:	24007f64 	.word	0x24007f64
 8014978:	0801a9b8 	.word	0x0801a9b8
 801497c:	0801ab28 	.word	0x0801ab28
 8014980:	0801aa30 	.word	0x0801aa30

08014984 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014984:	b580      	push	{r7, lr}
 8014986:	b08a      	sub	sp, #40	@ 0x28
 8014988:	af02      	add	r7, sp, #8
 801498a:	60f8      	str	r0, [r7, #12]
 801498c:	60b9      	str	r1, [r7, #8]
 801498e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	2b00      	cmp	r3, #0
 8014998:	d106      	bne.n	80149a8 <etharp_output+0x24>
 801499a:	4b73      	ldr	r3, [pc, #460]	@ (8014b68 <etharp_output+0x1e4>)
 801499c:	f240 321e 	movw	r2, #798	@ 0x31e
 80149a0:	4972      	ldr	r1, [pc, #456]	@ (8014b6c <etharp_output+0x1e8>)
 80149a2:	4873      	ldr	r0, [pc, #460]	@ (8014b70 <etharp_output+0x1ec>)
 80149a4:	f002 f944 	bl	8016c30 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80149a8:	68bb      	ldr	r3, [r7, #8]
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d106      	bne.n	80149bc <etharp_output+0x38>
 80149ae:	4b6e      	ldr	r3, [pc, #440]	@ (8014b68 <etharp_output+0x1e4>)
 80149b0:	f240 321f 	movw	r2, #799	@ 0x31f
 80149b4:	496f      	ldr	r1, [pc, #444]	@ (8014b74 <etharp_output+0x1f0>)
 80149b6:	486e      	ldr	r0, [pc, #440]	@ (8014b70 <etharp_output+0x1ec>)
 80149b8:	f002 f93a 	bl	8016c30 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d106      	bne.n	80149d0 <etharp_output+0x4c>
 80149c2:	4b69      	ldr	r3, [pc, #420]	@ (8014b68 <etharp_output+0x1e4>)
 80149c4:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80149c8:	496b      	ldr	r1, [pc, #428]	@ (8014b78 <etharp_output+0x1f4>)
 80149ca:	4869      	ldr	r0, [pc, #420]	@ (8014b70 <etharp_output+0x1ec>)
 80149cc:	f002 f930 	bl	8016c30 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	68f9      	ldr	r1, [r7, #12]
 80149d6:	4618      	mov	r0, r3
 80149d8:	f000 ff1e 	bl	8015818 <ip4_addr_isbroadcast_u32>
 80149dc:	4603      	mov	r3, r0
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d002      	beq.n	80149e8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80149e2:	4b66      	ldr	r3, [pc, #408]	@ (8014b7c <etharp_output+0x1f8>)
 80149e4:	61fb      	str	r3, [r7, #28]
 80149e6:	e0af      	b.n	8014b48 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80149f0:	2be0      	cmp	r3, #224	@ 0xe0
 80149f2:	d118      	bne.n	8014a26 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80149f4:	2301      	movs	r3, #1
 80149f6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80149f8:	2300      	movs	r3, #0
 80149fa:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80149fc:	235e      	movs	r3, #94	@ 0x5e
 80149fe:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	3301      	adds	r3, #1
 8014a04:	781b      	ldrb	r3, [r3, #0]
 8014a06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014a0a:	b2db      	uxtb	r3, r3
 8014a0c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	3302      	adds	r3, #2
 8014a12:	781b      	ldrb	r3, [r3, #0]
 8014a14:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	3303      	adds	r3, #3
 8014a1a:	781b      	ldrb	r3, [r3, #0]
 8014a1c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014a1e:	f107 0310 	add.w	r3, r7, #16
 8014a22:	61fb      	str	r3, [r7, #28]
 8014a24:	e090      	b.n	8014b48 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	681a      	ldr	r2, [r3, #0]
 8014a2a:	68fb      	ldr	r3, [r7, #12]
 8014a2c:	3304      	adds	r3, #4
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	405a      	eors	r2, r3
 8014a32:	68fb      	ldr	r3, [r7, #12]
 8014a34:	3308      	adds	r3, #8
 8014a36:	681b      	ldr	r3, [r3, #0]
 8014a38:	4013      	ands	r3, r2
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d012      	beq.n	8014a64 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014a44:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8014a48:	4293      	cmp	r3, r2
 8014a4a:	d00b      	beq.n	8014a64 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014a4c:	68fb      	ldr	r3, [r7, #12]
 8014a4e:	330c      	adds	r3, #12
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d003      	beq.n	8014a5e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	330c      	adds	r3, #12
 8014a5a:	61bb      	str	r3, [r7, #24]
 8014a5c:	e002      	b.n	8014a64 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014a5e:	f06f 0303 	mvn.w	r3, #3
 8014a62:	e07d      	b.n	8014b60 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014a64:	4b46      	ldr	r3, [pc, #280]	@ (8014b80 <etharp_output+0x1fc>)
 8014a66:	781b      	ldrb	r3, [r3, #0]
 8014a68:	4619      	mov	r1, r3
 8014a6a:	4a46      	ldr	r2, [pc, #280]	@ (8014b84 <etharp_output+0x200>)
 8014a6c:	460b      	mov	r3, r1
 8014a6e:	005b      	lsls	r3, r3, #1
 8014a70:	440b      	add	r3, r1
 8014a72:	00db      	lsls	r3, r3, #3
 8014a74:	4413      	add	r3, r2
 8014a76:	3314      	adds	r3, #20
 8014a78:	781b      	ldrb	r3, [r3, #0]
 8014a7a:	2b01      	cmp	r3, #1
 8014a7c:	d925      	bls.n	8014aca <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014a7e:	4b40      	ldr	r3, [pc, #256]	@ (8014b80 <etharp_output+0x1fc>)
 8014a80:	781b      	ldrb	r3, [r3, #0]
 8014a82:	4619      	mov	r1, r3
 8014a84:	4a3f      	ldr	r2, [pc, #252]	@ (8014b84 <etharp_output+0x200>)
 8014a86:	460b      	mov	r3, r1
 8014a88:	005b      	lsls	r3, r3, #1
 8014a8a:	440b      	add	r3, r1
 8014a8c:	00db      	lsls	r3, r3, #3
 8014a8e:	4413      	add	r3, r2
 8014a90:	3308      	adds	r3, #8
 8014a92:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014a94:	68fa      	ldr	r2, [r7, #12]
 8014a96:	429a      	cmp	r2, r3
 8014a98:	d117      	bne.n	8014aca <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014a9a:	69bb      	ldr	r3, [r7, #24]
 8014a9c:	681a      	ldr	r2, [r3, #0]
 8014a9e:	4b38      	ldr	r3, [pc, #224]	@ (8014b80 <etharp_output+0x1fc>)
 8014aa0:	781b      	ldrb	r3, [r3, #0]
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	4937      	ldr	r1, [pc, #220]	@ (8014b84 <etharp_output+0x200>)
 8014aa6:	4603      	mov	r3, r0
 8014aa8:	005b      	lsls	r3, r3, #1
 8014aaa:	4403      	add	r3, r0
 8014aac:	00db      	lsls	r3, r3, #3
 8014aae:	440b      	add	r3, r1
 8014ab0:	3304      	adds	r3, #4
 8014ab2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014ab4:	429a      	cmp	r2, r3
 8014ab6:	d108      	bne.n	8014aca <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014ab8:	4b31      	ldr	r3, [pc, #196]	@ (8014b80 <etharp_output+0x1fc>)
 8014aba:	781b      	ldrb	r3, [r3, #0]
 8014abc:	461a      	mov	r2, r3
 8014abe:	68b9      	ldr	r1, [r7, #8]
 8014ac0:	68f8      	ldr	r0, [r7, #12]
 8014ac2:	f7ff fec5 	bl	8014850 <etharp_output_to_arp_index>
 8014ac6:	4603      	mov	r3, r0
 8014ac8:	e04a      	b.n	8014b60 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014aca:	2300      	movs	r3, #0
 8014acc:	75fb      	strb	r3, [r7, #23]
 8014ace:	e031      	b.n	8014b34 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014ad0:	7dfa      	ldrb	r2, [r7, #23]
 8014ad2:	492c      	ldr	r1, [pc, #176]	@ (8014b84 <etharp_output+0x200>)
 8014ad4:	4613      	mov	r3, r2
 8014ad6:	005b      	lsls	r3, r3, #1
 8014ad8:	4413      	add	r3, r2
 8014ada:	00db      	lsls	r3, r3, #3
 8014adc:	440b      	add	r3, r1
 8014ade:	3314      	adds	r3, #20
 8014ae0:	781b      	ldrb	r3, [r3, #0]
 8014ae2:	2b01      	cmp	r3, #1
 8014ae4:	d923      	bls.n	8014b2e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014ae6:	7dfa      	ldrb	r2, [r7, #23]
 8014ae8:	4926      	ldr	r1, [pc, #152]	@ (8014b84 <etharp_output+0x200>)
 8014aea:	4613      	mov	r3, r2
 8014aec:	005b      	lsls	r3, r3, #1
 8014aee:	4413      	add	r3, r2
 8014af0:	00db      	lsls	r3, r3, #3
 8014af2:	440b      	add	r3, r1
 8014af4:	3308      	adds	r3, #8
 8014af6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014af8:	68fa      	ldr	r2, [r7, #12]
 8014afa:	429a      	cmp	r2, r3
 8014afc:	d117      	bne.n	8014b2e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014afe:	69bb      	ldr	r3, [r7, #24]
 8014b00:	6819      	ldr	r1, [r3, #0]
 8014b02:	7dfa      	ldrb	r2, [r7, #23]
 8014b04:	481f      	ldr	r0, [pc, #124]	@ (8014b84 <etharp_output+0x200>)
 8014b06:	4613      	mov	r3, r2
 8014b08:	005b      	lsls	r3, r3, #1
 8014b0a:	4413      	add	r3, r2
 8014b0c:	00db      	lsls	r3, r3, #3
 8014b0e:	4403      	add	r3, r0
 8014b10:	3304      	adds	r3, #4
 8014b12:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014b14:	4299      	cmp	r1, r3
 8014b16:	d10a      	bne.n	8014b2e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014b18:	4a19      	ldr	r2, [pc, #100]	@ (8014b80 <etharp_output+0x1fc>)
 8014b1a:	7dfb      	ldrb	r3, [r7, #23]
 8014b1c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014b1e:	7dfb      	ldrb	r3, [r7, #23]
 8014b20:	461a      	mov	r2, r3
 8014b22:	68b9      	ldr	r1, [r7, #8]
 8014b24:	68f8      	ldr	r0, [r7, #12]
 8014b26:	f7ff fe93 	bl	8014850 <etharp_output_to_arp_index>
 8014b2a:	4603      	mov	r3, r0
 8014b2c:	e018      	b.n	8014b60 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014b2e:	7dfb      	ldrb	r3, [r7, #23]
 8014b30:	3301      	adds	r3, #1
 8014b32:	75fb      	strb	r3, [r7, #23]
 8014b34:	7dfb      	ldrb	r3, [r7, #23]
 8014b36:	2b09      	cmp	r3, #9
 8014b38:	d9ca      	bls.n	8014ad0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014b3a:	68ba      	ldr	r2, [r7, #8]
 8014b3c:	69b9      	ldr	r1, [r7, #24]
 8014b3e:	68f8      	ldr	r0, [r7, #12]
 8014b40:	f000 f822 	bl	8014b88 <etharp_query>
 8014b44:	4603      	mov	r3, r0
 8014b46:	e00b      	b.n	8014b60 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8014b4e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014b52:	9300      	str	r3, [sp, #0]
 8014b54:	69fb      	ldr	r3, [r7, #28]
 8014b56:	68b9      	ldr	r1, [r7, #8]
 8014b58:	68f8      	ldr	r0, [r7, #12]
 8014b5a:	f001 fd6b 	bl	8016634 <ethernet_output>
 8014b5e:	4603      	mov	r3, r0
}
 8014b60:	4618      	mov	r0, r3
 8014b62:	3720      	adds	r7, #32
 8014b64:	46bd      	mov	sp, r7
 8014b66:	bd80      	pop	{r7, pc}
 8014b68:	0801a9b8 	.word	0x0801a9b8
 8014b6c:	0801ab08 	.word	0x0801ab08
 8014b70:	0801aa30 	.word	0x0801aa30
 8014b74:	0801ab58 	.word	0x0801ab58
 8014b78:	0801aaf8 	.word	0x0801aaf8
 8014b7c:	0801b1d4 	.word	0x0801b1d4
 8014b80:	24008054 	.word	0x24008054
 8014b84:	24007f64 	.word	0x24007f64

08014b88 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014b88:	b580      	push	{r7, lr}
 8014b8a:	b08c      	sub	sp, #48	@ 0x30
 8014b8c:	af02      	add	r7, sp, #8
 8014b8e:	60f8      	str	r0, [r7, #12]
 8014b90:	60b9      	str	r1, [r7, #8]
 8014b92:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	3326      	adds	r3, #38	@ 0x26
 8014b98:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014b9a:	23ff      	movs	r3, #255	@ 0xff
 8014b9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8014ba0:	2300      	movs	r3, #0
 8014ba2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014ba4:	68bb      	ldr	r3, [r7, #8]
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	68f9      	ldr	r1, [r7, #12]
 8014baa:	4618      	mov	r0, r3
 8014bac:	f000 fe34 	bl	8015818 <ip4_addr_isbroadcast_u32>
 8014bb0:	4603      	mov	r3, r0
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d10c      	bne.n	8014bd0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014bb6:	68bb      	ldr	r3, [r7, #8]
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014bbe:	2be0      	cmp	r3, #224	@ 0xe0
 8014bc0:	d006      	beq.n	8014bd0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014bc2:	68bb      	ldr	r3, [r7, #8]
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	d003      	beq.n	8014bd0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014bc8:	68bb      	ldr	r3, [r7, #8]
 8014bca:	681b      	ldr	r3, [r3, #0]
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d102      	bne.n	8014bd6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014bd0:	f06f 030f 	mvn.w	r3, #15
 8014bd4:	e101      	b.n	8014dda <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014bd6:	68fa      	ldr	r2, [r7, #12]
 8014bd8:	2101      	movs	r1, #1
 8014bda:	68b8      	ldr	r0, [r7, #8]
 8014bdc:	f7ff fb60 	bl	80142a0 <etharp_find_entry>
 8014be0:	4603      	mov	r3, r0
 8014be2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014be4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	da02      	bge.n	8014bf2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014bec:	8a7b      	ldrh	r3, [r7, #18]
 8014bee:	b25b      	sxtb	r3, r3
 8014bf0:	e0f3      	b.n	8014dda <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014bf2:	8a7b      	ldrh	r3, [r7, #18]
 8014bf4:	2b7e      	cmp	r3, #126	@ 0x7e
 8014bf6:	d906      	bls.n	8014c06 <etharp_query+0x7e>
 8014bf8:	4b7a      	ldr	r3, [pc, #488]	@ (8014de4 <etharp_query+0x25c>)
 8014bfa:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8014bfe:	497a      	ldr	r1, [pc, #488]	@ (8014de8 <etharp_query+0x260>)
 8014c00:	487a      	ldr	r0, [pc, #488]	@ (8014dec <etharp_query+0x264>)
 8014c02:	f002 f815 	bl	8016c30 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014c06:	8a7b      	ldrh	r3, [r7, #18]
 8014c08:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014c0a:	7c7a      	ldrb	r2, [r7, #17]
 8014c0c:	4978      	ldr	r1, [pc, #480]	@ (8014df0 <etharp_query+0x268>)
 8014c0e:	4613      	mov	r3, r2
 8014c10:	005b      	lsls	r3, r3, #1
 8014c12:	4413      	add	r3, r2
 8014c14:	00db      	lsls	r3, r3, #3
 8014c16:	440b      	add	r3, r1
 8014c18:	3314      	adds	r3, #20
 8014c1a:	781b      	ldrb	r3, [r3, #0]
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d115      	bne.n	8014c4c <etharp_query+0xc4>
    is_new_entry = 1;
 8014c20:	2301      	movs	r3, #1
 8014c22:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014c24:	7c7a      	ldrb	r2, [r7, #17]
 8014c26:	4972      	ldr	r1, [pc, #456]	@ (8014df0 <etharp_query+0x268>)
 8014c28:	4613      	mov	r3, r2
 8014c2a:	005b      	lsls	r3, r3, #1
 8014c2c:	4413      	add	r3, r2
 8014c2e:	00db      	lsls	r3, r3, #3
 8014c30:	440b      	add	r3, r1
 8014c32:	3314      	adds	r3, #20
 8014c34:	2201      	movs	r2, #1
 8014c36:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014c38:	7c7a      	ldrb	r2, [r7, #17]
 8014c3a:	496d      	ldr	r1, [pc, #436]	@ (8014df0 <etharp_query+0x268>)
 8014c3c:	4613      	mov	r3, r2
 8014c3e:	005b      	lsls	r3, r3, #1
 8014c40:	4413      	add	r3, r2
 8014c42:	00db      	lsls	r3, r3, #3
 8014c44:	440b      	add	r3, r1
 8014c46:	3308      	adds	r3, #8
 8014c48:	68fa      	ldr	r2, [r7, #12]
 8014c4a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014c4c:	7c7a      	ldrb	r2, [r7, #17]
 8014c4e:	4968      	ldr	r1, [pc, #416]	@ (8014df0 <etharp_query+0x268>)
 8014c50:	4613      	mov	r3, r2
 8014c52:	005b      	lsls	r3, r3, #1
 8014c54:	4413      	add	r3, r2
 8014c56:	00db      	lsls	r3, r3, #3
 8014c58:	440b      	add	r3, r1
 8014c5a:	3314      	adds	r3, #20
 8014c5c:	781b      	ldrb	r3, [r3, #0]
 8014c5e:	2b01      	cmp	r3, #1
 8014c60:	d011      	beq.n	8014c86 <etharp_query+0xfe>
 8014c62:	7c7a      	ldrb	r2, [r7, #17]
 8014c64:	4962      	ldr	r1, [pc, #392]	@ (8014df0 <etharp_query+0x268>)
 8014c66:	4613      	mov	r3, r2
 8014c68:	005b      	lsls	r3, r3, #1
 8014c6a:	4413      	add	r3, r2
 8014c6c:	00db      	lsls	r3, r3, #3
 8014c6e:	440b      	add	r3, r1
 8014c70:	3314      	adds	r3, #20
 8014c72:	781b      	ldrb	r3, [r3, #0]
 8014c74:	2b01      	cmp	r3, #1
 8014c76:	d806      	bhi.n	8014c86 <etharp_query+0xfe>
 8014c78:	4b5a      	ldr	r3, [pc, #360]	@ (8014de4 <etharp_query+0x25c>)
 8014c7a:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8014c7e:	495d      	ldr	r1, [pc, #372]	@ (8014df4 <etharp_query+0x26c>)
 8014c80:	485a      	ldr	r0, [pc, #360]	@ (8014dec <etharp_query+0x264>)
 8014c82:	f001 ffd5 	bl	8016c30 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014c86:	6a3b      	ldr	r3, [r7, #32]
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d102      	bne.n	8014c92 <etharp_query+0x10a>
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d10c      	bne.n	8014cac <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014c92:	68b9      	ldr	r1, [r7, #8]
 8014c94:	68f8      	ldr	r0, [r7, #12]
 8014c96:	f000 f963 	bl	8014f60 <etharp_request>
 8014c9a:	4603      	mov	r3, r0
 8014c9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d102      	bne.n	8014cac <etharp_query+0x124>
      return result;
 8014ca6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8014caa:	e096      	b.n	8014dda <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d106      	bne.n	8014cc0 <etharp_query+0x138>
 8014cb2:	4b4c      	ldr	r3, [pc, #304]	@ (8014de4 <etharp_query+0x25c>)
 8014cb4:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8014cb8:	494f      	ldr	r1, [pc, #316]	@ (8014df8 <etharp_query+0x270>)
 8014cba:	484c      	ldr	r0, [pc, #304]	@ (8014dec <etharp_query+0x264>)
 8014cbc:	f001 ffb8 	bl	8016c30 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014cc0:	7c7a      	ldrb	r2, [r7, #17]
 8014cc2:	494b      	ldr	r1, [pc, #300]	@ (8014df0 <etharp_query+0x268>)
 8014cc4:	4613      	mov	r3, r2
 8014cc6:	005b      	lsls	r3, r3, #1
 8014cc8:	4413      	add	r3, r2
 8014cca:	00db      	lsls	r3, r3, #3
 8014ccc:	440b      	add	r3, r1
 8014cce:	3314      	adds	r3, #20
 8014cd0:	781b      	ldrb	r3, [r3, #0]
 8014cd2:	2b01      	cmp	r3, #1
 8014cd4:	d917      	bls.n	8014d06 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014cd6:	4a49      	ldr	r2, [pc, #292]	@ (8014dfc <etharp_query+0x274>)
 8014cd8:	7c7b      	ldrb	r3, [r7, #17]
 8014cda:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014cdc:	7c7a      	ldrb	r2, [r7, #17]
 8014cde:	4613      	mov	r3, r2
 8014ce0:	005b      	lsls	r3, r3, #1
 8014ce2:	4413      	add	r3, r2
 8014ce4:	00db      	lsls	r3, r3, #3
 8014ce6:	3308      	adds	r3, #8
 8014ce8:	4a41      	ldr	r2, [pc, #260]	@ (8014df0 <etharp_query+0x268>)
 8014cea:	4413      	add	r3, r2
 8014cec:	3304      	adds	r3, #4
 8014cee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014cf2:	9200      	str	r2, [sp, #0]
 8014cf4:	697a      	ldr	r2, [r7, #20]
 8014cf6:	6879      	ldr	r1, [r7, #4]
 8014cf8:	68f8      	ldr	r0, [r7, #12]
 8014cfa:	f001 fc9b 	bl	8016634 <ethernet_output>
 8014cfe:	4603      	mov	r3, r0
 8014d00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014d04:	e067      	b.n	8014dd6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014d06:	7c7a      	ldrb	r2, [r7, #17]
 8014d08:	4939      	ldr	r1, [pc, #228]	@ (8014df0 <etharp_query+0x268>)
 8014d0a:	4613      	mov	r3, r2
 8014d0c:	005b      	lsls	r3, r3, #1
 8014d0e:	4413      	add	r3, r2
 8014d10:	00db      	lsls	r3, r3, #3
 8014d12:	440b      	add	r3, r1
 8014d14:	3314      	adds	r3, #20
 8014d16:	781b      	ldrb	r3, [r3, #0]
 8014d18:	2b01      	cmp	r3, #1
 8014d1a:	d15c      	bne.n	8014dd6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014d1c:	2300      	movs	r3, #0
 8014d1e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014d24:	e01c      	b.n	8014d60 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014d26:	69fb      	ldr	r3, [r7, #28]
 8014d28:	895a      	ldrh	r2, [r3, #10]
 8014d2a:	69fb      	ldr	r3, [r7, #28]
 8014d2c:	891b      	ldrh	r3, [r3, #8]
 8014d2e:	429a      	cmp	r2, r3
 8014d30:	d10a      	bne.n	8014d48 <etharp_query+0x1c0>
 8014d32:	69fb      	ldr	r3, [r7, #28]
 8014d34:	681b      	ldr	r3, [r3, #0]
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d006      	beq.n	8014d48 <etharp_query+0x1c0>
 8014d3a:	4b2a      	ldr	r3, [pc, #168]	@ (8014de4 <etharp_query+0x25c>)
 8014d3c:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8014d40:	492f      	ldr	r1, [pc, #188]	@ (8014e00 <etharp_query+0x278>)
 8014d42:	482a      	ldr	r0, [pc, #168]	@ (8014dec <etharp_query+0x264>)
 8014d44:	f001 ff74 	bl	8016c30 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014d48:	69fb      	ldr	r3, [r7, #28]
 8014d4a:	7b1b      	ldrb	r3, [r3, #12]
 8014d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d002      	beq.n	8014d5a <etharp_query+0x1d2>
        copy_needed = 1;
 8014d54:	2301      	movs	r3, #1
 8014d56:	61bb      	str	r3, [r7, #24]
        break;
 8014d58:	e005      	b.n	8014d66 <etharp_query+0x1de>
      }
      p = p->next;
 8014d5a:	69fb      	ldr	r3, [r7, #28]
 8014d5c:	681b      	ldr	r3, [r3, #0]
 8014d5e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014d60:	69fb      	ldr	r3, [r7, #28]
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d1df      	bne.n	8014d26 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8014d66:	69bb      	ldr	r3, [r7, #24]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d007      	beq.n	8014d7c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014d6c:	687a      	ldr	r2, [r7, #4]
 8014d6e:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8014d72:	200e      	movs	r0, #14
 8014d74:	f7f8 fc8c 	bl	800d690 <pbuf_clone>
 8014d78:	61f8      	str	r0, [r7, #28]
 8014d7a:	e004      	b.n	8014d86 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014d80:	69f8      	ldr	r0, [r7, #28]
 8014d82:	f7f8 fac3 	bl	800d30c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014d86:	69fb      	ldr	r3, [r7, #28]
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d021      	beq.n	8014dd0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014d8c:	7c7a      	ldrb	r2, [r7, #17]
 8014d8e:	4918      	ldr	r1, [pc, #96]	@ (8014df0 <etharp_query+0x268>)
 8014d90:	4613      	mov	r3, r2
 8014d92:	005b      	lsls	r3, r3, #1
 8014d94:	4413      	add	r3, r2
 8014d96:	00db      	lsls	r3, r3, #3
 8014d98:	440b      	add	r3, r1
 8014d9a:	681b      	ldr	r3, [r3, #0]
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d00a      	beq.n	8014db6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014da0:	7c7a      	ldrb	r2, [r7, #17]
 8014da2:	4913      	ldr	r1, [pc, #76]	@ (8014df0 <etharp_query+0x268>)
 8014da4:	4613      	mov	r3, r2
 8014da6:	005b      	lsls	r3, r3, #1
 8014da8:	4413      	add	r3, r2
 8014daa:	00db      	lsls	r3, r3, #3
 8014dac:	440b      	add	r3, r1
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	4618      	mov	r0, r3
 8014db2:	f7f8 fa05 	bl	800d1c0 <pbuf_free>
      }
      arp_table[i].q = p;
 8014db6:	7c7a      	ldrb	r2, [r7, #17]
 8014db8:	490d      	ldr	r1, [pc, #52]	@ (8014df0 <etharp_query+0x268>)
 8014dba:	4613      	mov	r3, r2
 8014dbc:	005b      	lsls	r3, r3, #1
 8014dbe:	4413      	add	r3, r2
 8014dc0:	00db      	lsls	r3, r3, #3
 8014dc2:	440b      	add	r3, r1
 8014dc4:	69fa      	ldr	r2, [r7, #28]
 8014dc6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014dc8:	2300      	movs	r3, #0
 8014dca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014dce:	e002      	b.n	8014dd6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014dd0:	23ff      	movs	r3, #255	@ 0xff
 8014dd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8014dd6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8014dda:	4618      	mov	r0, r3
 8014ddc:	3728      	adds	r7, #40	@ 0x28
 8014dde:	46bd      	mov	sp, r7
 8014de0:	bd80      	pop	{r7, pc}
 8014de2:	bf00      	nop
 8014de4:	0801a9b8 	.word	0x0801a9b8
 8014de8:	0801ab64 	.word	0x0801ab64
 8014dec:	0801aa30 	.word	0x0801aa30
 8014df0:	24007f64 	.word	0x24007f64
 8014df4:	0801ab74 	.word	0x0801ab74
 8014df8:	0801ab58 	.word	0x0801ab58
 8014dfc:	24008054 	.word	0x24008054
 8014e00:	0801ab9c 	.word	0x0801ab9c

08014e04 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014e04:	b580      	push	{r7, lr}
 8014e06:	b08a      	sub	sp, #40	@ 0x28
 8014e08:	af02      	add	r7, sp, #8
 8014e0a:	60f8      	str	r0, [r7, #12]
 8014e0c:	60b9      	str	r1, [r7, #8]
 8014e0e:	607a      	str	r2, [r7, #4]
 8014e10:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014e12:	2300      	movs	r3, #0
 8014e14:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014e16:	68fb      	ldr	r3, [r7, #12]
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d106      	bne.n	8014e2a <etharp_raw+0x26>
 8014e1c:	4b3a      	ldr	r3, [pc, #232]	@ (8014f08 <etharp_raw+0x104>)
 8014e1e:	f240 4257 	movw	r2, #1111	@ 0x457
 8014e22:	493a      	ldr	r1, [pc, #232]	@ (8014f0c <etharp_raw+0x108>)
 8014e24:	483a      	ldr	r0, [pc, #232]	@ (8014f10 <etharp_raw+0x10c>)
 8014e26:	f001 ff03 	bl	8016c30 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014e2a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014e2e:	211c      	movs	r1, #28
 8014e30:	200e      	movs	r0, #14
 8014e32:	f7f7 fee1 	bl	800cbf8 <pbuf_alloc>
 8014e36:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014e38:	69bb      	ldr	r3, [r7, #24]
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d102      	bne.n	8014e44 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8014e42:	e05d      	b.n	8014f00 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014e44:	69bb      	ldr	r3, [r7, #24]
 8014e46:	895b      	ldrh	r3, [r3, #10]
 8014e48:	2b1b      	cmp	r3, #27
 8014e4a:	d806      	bhi.n	8014e5a <etharp_raw+0x56>
 8014e4c:	4b2e      	ldr	r3, [pc, #184]	@ (8014f08 <etharp_raw+0x104>)
 8014e4e:	f240 4262 	movw	r2, #1122	@ 0x462
 8014e52:	4930      	ldr	r1, [pc, #192]	@ (8014f14 <etharp_raw+0x110>)
 8014e54:	482e      	ldr	r0, [pc, #184]	@ (8014f10 <etharp_raw+0x10c>)
 8014e56:	f001 feeb 	bl	8016c30 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014e5a:	69bb      	ldr	r3, [r7, #24]
 8014e5c:	685b      	ldr	r3, [r3, #4]
 8014e5e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014e60:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8014e62:	4618      	mov	r0, r3
 8014e64:	f7f6 fd02 	bl	800b86c <lwip_htons>
 8014e68:	4603      	mov	r3, r0
 8014e6a:	461a      	mov	r2, r3
 8014e6c:	697b      	ldr	r3, [r7, #20]
 8014e6e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8014e76:	2b06      	cmp	r3, #6
 8014e78:	d006      	beq.n	8014e88 <etharp_raw+0x84>
 8014e7a:	4b23      	ldr	r3, [pc, #140]	@ (8014f08 <etharp_raw+0x104>)
 8014e7c:	f240 4269 	movw	r2, #1129	@ 0x469
 8014e80:	4925      	ldr	r1, [pc, #148]	@ (8014f18 <etharp_raw+0x114>)
 8014e82:	4823      	ldr	r0, [pc, #140]	@ (8014f10 <etharp_raw+0x10c>)
 8014e84:	f001 fed4 	bl	8016c30 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014e88:	697b      	ldr	r3, [r7, #20]
 8014e8a:	3308      	adds	r3, #8
 8014e8c:	2206      	movs	r2, #6
 8014e8e:	6839      	ldr	r1, [r7, #0]
 8014e90:	4618      	mov	r0, r3
 8014e92:	f001 fffe 	bl	8016e92 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014e96:	697b      	ldr	r3, [r7, #20]
 8014e98:	3312      	adds	r3, #18
 8014e9a:	2206      	movs	r2, #6
 8014e9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	f001 fff7 	bl	8016e92 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014ea4:	697b      	ldr	r3, [r7, #20]
 8014ea6:	330e      	adds	r3, #14
 8014ea8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014eaa:	6812      	ldr	r2, [r2, #0]
 8014eac:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014eae:	697b      	ldr	r3, [r7, #20]
 8014eb0:	3318      	adds	r3, #24
 8014eb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014eb4:	6812      	ldr	r2, [r2, #0]
 8014eb6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014eb8:	697b      	ldr	r3, [r7, #20]
 8014eba:	2200      	movs	r2, #0
 8014ebc:	701a      	strb	r2, [r3, #0]
 8014ebe:	2200      	movs	r2, #0
 8014ec0:	f042 0201 	orr.w	r2, r2, #1
 8014ec4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014ec6:	697b      	ldr	r3, [r7, #20]
 8014ec8:	2200      	movs	r2, #0
 8014eca:	f042 0208 	orr.w	r2, r2, #8
 8014ece:	709a      	strb	r2, [r3, #2]
 8014ed0:	2200      	movs	r2, #0
 8014ed2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014ed4:	697b      	ldr	r3, [r7, #20]
 8014ed6:	2206      	movs	r2, #6
 8014ed8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014eda:	697b      	ldr	r3, [r7, #20]
 8014edc:	2204      	movs	r2, #4
 8014ede:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014ee0:	f640 0306 	movw	r3, #2054	@ 0x806
 8014ee4:	9300      	str	r3, [sp, #0]
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	68ba      	ldr	r2, [r7, #8]
 8014eea:	69b9      	ldr	r1, [r7, #24]
 8014eec:	68f8      	ldr	r0, [r7, #12]
 8014eee:	f001 fba1 	bl	8016634 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014ef2:	69b8      	ldr	r0, [r7, #24]
 8014ef4:	f7f8 f964 	bl	800d1c0 <pbuf_free>
  p = NULL;
 8014ef8:	2300      	movs	r3, #0
 8014efa:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014efc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014f00:	4618      	mov	r0, r3
 8014f02:	3720      	adds	r7, #32
 8014f04:	46bd      	mov	sp, r7
 8014f06:	bd80      	pop	{r7, pc}
 8014f08:	0801a9b8 	.word	0x0801a9b8
 8014f0c:	0801ab08 	.word	0x0801ab08
 8014f10:	0801aa30 	.word	0x0801aa30
 8014f14:	0801abb8 	.word	0x0801abb8
 8014f18:	0801abec 	.word	0x0801abec

08014f1c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014f1c:	b580      	push	{r7, lr}
 8014f1e:	b088      	sub	sp, #32
 8014f20:	af04      	add	r7, sp, #16
 8014f22:	60f8      	str	r0, [r7, #12]
 8014f24:	60b9      	str	r1, [r7, #8]
 8014f26:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014f38:	2201      	movs	r2, #1
 8014f3a:	9203      	str	r2, [sp, #12]
 8014f3c:	68ba      	ldr	r2, [r7, #8]
 8014f3e:	9202      	str	r2, [sp, #8]
 8014f40:	4a06      	ldr	r2, [pc, #24]	@ (8014f5c <etharp_request_dst+0x40>)
 8014f42:	9201      	str	r2, [sp, #4]
 8014f44:	9300      	str	r3, [sp, #0]
 8014f46:	4603      	mov	r3, r0
 8014f48:	687a      	ldr	r2, [r7, #4]
 8014f4a:	68f8      	ldr	r0, [r7, #12]
 8014f4c:	f7ff ff5a 	bl	8014e04 <etharp_raw>
 8014f50:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014f52:	4618      	mov	r0, r3
 8014f54:	3710      	adds	r7, #16
 8014f56:	46bd      	mov	sp, r7
 8014f58:	bd80      	pop	{r7, pc}
 8014f5a:	bf00      	nop
 8014f5c:	0801b1dc 	.word	0x0801b1dc

08014f60 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014f60:	b580      	push	{r7, lr}
 8014f62:	b082      	sub	sp, #8
 8014f64:	af00      	add	r7, sp, #0
 8014f66:	6078      	str	r0, [r7, #4]
 8014f68:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014f6a:	4a05      	ldr	r2, [pc, #20]	@ (8014f80 <etharp_request+0x20>)
 8014f6c:	6839      	ldr	r1, [r7, #0]
 8014f6e:	6878      	ldr	r0, [r7, #4]
 8014f70:	f7ff ffd4 	bl	8014f1c <etharp_request_dst>
 8014f74:	4603      	mov	r3, r0
}
 8014f76:	4618      	mov	r0, r3
 8014f78:	3708      	adds	r7, #8
 8014f7a:	46bd      	mov	sp, r7
 8014f7c:	bd80      	pop	{r7, pc}
 8014f7e:	bf00      	nop
 8014f80:	0801b1d4 	.word	0x0801b1d4

08014f84 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014f84:	b580      	push	{r7, lr}
 8014f86:	b08e      	sub	sp, #56	@ 0x38
 8014f88:	af04      	add	r7, sp, #16
 8014f8a:	6078      	str	r0, [r7, #4]
 8014f8c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014f8e:	4b87      	ldr	r3, [pc, #540]	@ (80151ac <icmp_input+0x228>)
 8014f90:	689b      	ldr	r3, [r3, #8]
 8014f92:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f96:	781b      	ldrb	r3, [r3, #0]
 8014f98:	f003 030f 	and.w	r3, r3, #15
 8014f9c:	b2db      	uxtb	r3, r3
 8014f9e:	009b      	lsls	r3, r3, #2
 8014fa0:	b2db      	uxtb	r3, r3
 8014fa2:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8014fa4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014fa6:	2b13      	cmp	r3, #19
 8014fa8:	f240 80e8 	bls.w	801517c <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	895b      	ldrh	r3, [r3, #10]
 8014fb0:	2b03      	cmp	r3, #3
 8014fb2:	f240 80e5 	bls.w	8015180 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	685b      	ldr	r3, [r3, #4]
 8014fba:	781b      	ldrb	r3, [r3, #0]
 8014fbc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014fc0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	f000 80d2 	beq.w	801516e <icmp_input+0x1ea>
 8014fca:	2b08      	cmp	r3, #8
 8014fcc:	f040 80d2 	bne.w	8015174 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014fd0:	4b77      	ldr	r3, [pc, #476]	@ (80151b0 <icmp_input+0x22c>)
 8014fd2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014fd4:	4b75      	ldr	r3, [pc, #468]	@ (80151ac <icmp_input+0x228>)
 8014fd6:	695b      	ldr	r3, [r3, #20]
 8014fd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014fdc:	2be0      	cmp	r3, #224	@ 0xe0
 8014fde:	f000 80d6 	beq.w	801518e <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014fe2:	4b72      	ldr	r3, [pc, #456]	@ (80151ac <icmp_input+0x228>)
 8014fe4:	695b      	ldr	r3, [r3, #20]
 8014fe6:	4a71      	ldr	r2, [pc, #452]	@ (80151ac <icmp_input+0x228>)
 8014fe8:	6812      	ldr	r2, [r2, #0]
 8014fea:	4611      	mov	r1, r2
 8014fec:	4618      	mov	r0, r3
 8014fee:	f000 fc13 	bl	8015818 <ip4_addr_isbroadcast_u32>
 8014ff2:	4603      	mov	r3, r0
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	f040 80cc 	bne.w	8015192 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	891b      	ldrh	r3, [r3, #8]
 8014ffe:	2b07      	cmp	r3, #7
 8015000:	f240 80c0 	bls.w	8015184 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8015004:	6878      	ldr	r0, [r7, #4]
 8015006:	f7f6 fcce 	bl	800b9a6 <inet_chksum_pbuf>
 801500a:	4603      	mov	r3, r0
 801500c:	2b00      	cmp	r3, #0
 801500e:	d003      	beq.n	8015018 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8015010:	6878      	ldr	r0, [r7, #4]
 8015012:	f7f8 f8d5 	bl	800d1c0 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8015016:	e0c5      	b.n	80151a4 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015018:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801501a:	330e      	adds	r3, #14
 801501c:	4619      	mov	r1, r3
 801501e:	6878      	ldr	r0, [r7, #4]
 8015020:	f7f8 f838 	bl	800d094 <pbuf_add_header>
 8015024:	4603      	mov	r3, r0
 8015026:	2b00      	cmp	r3, #0
 8015028:	d04b      	beq.n	80150c2 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	891a      	ldrh	r2, [r3, #8]
 801502e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015030:	4413      	add	r3, r2
 8015032:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	891b      	ldrh	r3, [r3, #8]
 8015038:	8b7a      	ldrh	r2, [r7, #26]
 801503a:	429a      	cmp	r2, r3
 801503c:	f0c0 80ab 	bcc.w	8015196 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8015040:	8b7b      	ldrh	r3, [r7, #26]
 8015042:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015046:	4619      	mov	r1, r3
 8015048:	200e      	movs	r0, #14
 801504a:	f7f7 fdd5 	bl	800cbf8 <pbuf_alloc>
 801504e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8015050:	697b      	ldr	r3, [r7, #20]
 8015052:	2b00      	cmp	r3, #0
 8015054:	f000 80a1 	beq.w	801519a <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015058:	697b      	ldr	r3, [r7, #20]
 801505a:	895b      	ldrh	r3, [r3, #10]
 801505c:	461a      	mov	r2, r3
 801505e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015060:	3308      	adds	r3, #8
 8015062:	429a      	cmp	r2, r3
 8015064:	d203      	bcs.n	801506e <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8015066:	6978      	ldr	r0, [r7, #20]
 8015068:	f7f8 f8aa 	bl	800d1c0 <pbuf_free>
          goto icmperr;
 801506c:	e096      	b.n	801519c <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801506e:	697b      	ldr	r3, [r7, #20]
 8015070:	685b      	ldr	r3, [r3, #4]
 8015072:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8015074:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015076:	4618      	mov	r0, r3
 8015078:	f001 ff0b 	bl	8016e92 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801507c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801507e:	4619      	mov	r1, r3
 8015080:	6978      	ldr	r0, [r7, #20]
 8015082:	f7f8 f817 	bl	800d0b4 <pbuf_remove_header>
 8015086:	4603      	mov	r3, r0
 8015088:	2b00      	cmp	r3, #0
 801508a:	d009      	beq.n	80150a0 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801508c:	4b49      	ldr	r3, [pc, #292]	@ (80151b4 <icmp_input+0x230>)
 801508e:	22b6      	movs	r2, #182	@ 0xb6
 8015090:	4949      	ldr	r1, [pc, #292]	@ (80151b8 <icmp_input+0x234>)
 8015092:	484a      	ldr	r0, [pc, #296]	@ (80151bc <icmp_input+0x238>)
 8015094:	f001 fdcc 	bl	8016c30 <iprintf>
          pbuf_free(r);
 8015098:	6978      	ldr	r0, [r7, #20]
 801509a:	f7f8 f891 	bl	800d1c0 <pbuf_free>
          goto icmperr;
 801509e:	e07d      	b.n	801519c <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80150a0:	6879      	ldr	r1, [r7, #4]
 80150a2:	6978      	ldr	r0, [r7, #20]
 80150a4:	f7f8 f9b0 	bl	800d408 <pbuf_copy>
 80150a8:	4603      	mov	r3, r0
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d003      	beq.n	80150b6 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80150ae:	6978      	ldr	r0, [r7, #20]
 80150b0:	f7f8 f886 	bl	800d1c0 <pbuf_free>
          goto icmperr;
 80150b4:	e072      	b.n	801519c <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 80150b6:	6878      	ldr	r0, [r7, #4]
 80150b8:	f7f8 f882 	bl	800d1c0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80150bc:	697b      	ldr	r3, [r7, #20]
 80150be:	607b      	str	r3, [r7, #4]
 80150c0:	e00f      	b.n	80150e2 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80150c2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80150c4:	330e      	adds	r3, #14
 80150c6:	4619      	mov	r1, r3
 80150c8:	6878      	ldr	r0, [r7, #4]
 80150ca:	f7f7 fff3 	bl	800d0b4 <pbuf_remove_header>
 80150ce:	4603      	mov	r3, r0
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d006      	beq.n	80150e2 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80150d4:	4b37      	ldr	r3, [pc, #220]	@ (80151b4 <icmp_input+0x230>)
 80150d6:	22c7      	movs	r2, #199	@ 0xc7
 80150d8:	4939      	ldr	r1, [pc, #228]	@ (80151c0 <icmp_input+0x23c>)
 80150da:	4838      	ldr	r0, [pc, #224]	@ (80151bc <icmp_input+0x238>)
 80150dc:	f001 fda8 	bl	8016c30 <iprintf>
          goto icmperr;
 80150e0:	e05c      	b.n	801519c <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	685b      	ldr	r3, [r3, #4]
 80150e6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80150e8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80150ea:	4619      	mov	r1, r3
 80150ec:	6878      	ldr	r0, [r7, #4]
 80150ee:	f7f7 ffd1 	bl	800d094 <pbuf_add_header>
 80150f2:	4603      	mov	r3, r0
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d13c      	bne.n	8015172 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	685b      	ldr	r3, [r3, #4]
 80150fc:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80150fe:	69fb      	ldr	r3, [r7, #28]
 8015100:	681a      	ldr	r2, [r3, #0]
 8015102:	68fb      	ldr	r3, [r7, #12]
 8015104:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015106:	4b29      	ldr	r3, [pc, #164]	@ (80151ac <icmp_input+0x228>)
 8015108:	691a      	ldr	r2, [r3, #16]
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801510e:	693b      	ldr	r3, [r7, #16]
 8015110:	2200      	movs	r2, #0
 8015112:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8015114:	693b      	ldr	r3, [r7, #16]
 8015116:	885b      	ldrh	r3, [r3, #2]
 8015118:	b29b      	uxth	r3, r3
 801511a:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801511e:	4293      	cmp	r3, r2
 8015120:	d907      	bls.n	8015132 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8015122:	693b      	ldr	r3, [r7, #16]
 8015124:	885b      	ldrh	r3, [r3, #2]
 8015126:	b29b      	uxth	r3, r3
 8015128:	3309      	adds	r3, #9
 801512a:	b29a      	uxth	r2, r3
 801512c:	693b      	ldr	r3, [r7, #16]
 801512e:	805a      	strh	r2, [r3, #2]
 8015130:	e006      	b.n	8015140 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8015132:	693b      	ldr	r3, [r7, #16]
 8015134:	885b      	ldrh	r3, [r3, #2]
 8015136:	b29b      	uxth	r3, r3
 8015138:	3308      	adds	r3, #8
 801513a:	b29a      	uxth	r2, r3
 801513c:	693b      	ldr	r3, [r7, #16]
 801513e:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8015140:	68fb      	ldr	r3, [r7, #12]
 8015142:	22ff      	movs	r2, #255	@ 0xff
 8015144:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	2200      	movs	r2, #0
 801514a:	729a      	strb	r2, [r3, #10]
 801514c:	2200      	movs	r2, #0
 801514e:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015150:	683b      	ldr	r3, [r7, #0]
 8015152:	9302      	str	r3, [sp, #8]
 8015154:	2301      	movs	r3, #1
 8015156:	9301      	str	r3, [sp, #4]
 8015158:	2300      	movs	r3, #0
 801515a:	9300      	str	r3, [sp, #0]
 801515c:	23ff      	movs	r3, #255	@ 0xff
 801515e:	2200      	movs	r2, #0
 8015160:	69f9      	ldr	r1, [r7, #28]
 8015162:	6878      	ldr	r0, [r7, #4]
 8015164:	f000 fa80 	bl	8015668 <ip4_output_if>
 8015168:	4603      	mov	r3, r0
 801516a:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801516c:	e001      	b.n	8015172 <icmp_input+0x1ee>
      break;
 801516e:	bf00      	nop
 8015170:	e000      	b.n	8015174 <icmp_input+0x1f0>
      break;
 8015172:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8015174:	6878      	ldr	r0, [r7, #4]
 8015176:	f7f8 f823 	bl	800d1c0 <pbuf_free>
  return;
 801517a:	e013      	b.n	80151a4 <icmp_input+0x220>
    goto lenerr;
 801517c:	bf00      	nop
 801517e:	e002      	b.n	8015186 <icmp_input+0x202>
    goto lenerr;
 8015180:	bf00      	nop
 8015182:	e000      	b.n	8015186 <icmp_input+0x202>
        goto lenerr;
 8015184:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015186:	6878      	ldr	r0, [r7, #4]
 8015188:	f7f8 f81a 	bl	800d1c0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801518c:	e00a      	b.n	80151a4 <icmp_input+0x220>
        goto icmperr;
 801518e:	bf00      	nop
 8015190:	e004      	b.n	801519c <icmp_input+0x218>
        goto icmperr;
 8015192:	bf00      	nop
 8015194:	e002      	b.n	801519c <icmp_input+0x218>
          goto icmperr;
 8015196:	bf00      	nop
 8015198:	e000      	b.n	801519c <icmp_input+0x218>
          goto icmperr;
 801519a:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801519c:	6878      	ldr	r0, [r7, #4]
 801519e:	f7f8 f80f 	bl	800d1c0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80151a2:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80151a4:	3728      	adds	r7, #40	@ 0x28
 80151a6:	46bd      	mov	sp, r7
 80151a8:	bd80      	pop	{r7, pc}
 80151aa:	bf00      	nop
 80151ac:	24004df4 	.word	0x24004df4
 80151b0:	24004e08 	.word	0x24004e08
 80151b4:	0801ac30 	.word	0x0801ac30
 80151b8:	0801ac68 	.word	0x0801ac68
 80151bc:	0801aca0 	.word	0x0801aca0
 80151c0:	0801acc8 	.word	0x0801acc8

080151c4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80151c4:	b580      	push	{r7, lr}
 80151c6:	b082      	sub	sp, #8
 80151c8:	af00      	add	r7, sp, #0
 80151ca:	6078      	str	r0, [r7, #4]
 80151cc:	460b      	mov	r3, r1
 80151ce:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80151d0:	78fb      	ldrb	r3, [r7, #3]
 80151d2:	461a      	mov	r2, r3
 80151d4:	2103      	movs	r1, #3
 80151d6:	6878      	ldr	r0, [r7, #4]
 80151d8:	f000 f814 	bl	8015204 <icmp_send_response>
}
 80151dc:	bf00      	nop
 80151de:	3708      	adds	r7, #8
 80151e0:	46bd      	mov	sp, r7
 80151e2:	bd80      	pop	{r7, pc}

080151e4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80151e4:	b580      	push	{r7, lr}
 80151e6:	b082      	sub	sp, #8
 80151e8:	af00      	add	r7, sp, #0
 80151ea:	6078      	str	r0, [r7, #4]
 80151ec:	460b      	mov	r3, r1
 80151ee:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80151f0:	78fb      	ldrb	r3, [r7, #3]
 80151f2:	461a      	mov	r2, r3
 80151f4:	210b      	movs	r1, #11
 80151f6:	6878      	ldr	r0, [r7, #4]
 80151f8:	f000 f804 	bl	8015204 <icmp_send_response>
}
 80151fc:	bf00      	nop
 80151fe:	3708      	adds	r7, #8
 8015200:	46bd      	mov	sp, r7
 8015202:	bd80      	pop	{r7, pc}

08015204 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015204:	b580      	push	{r7, lr}
 8015206:	b08c      	sub	sp, #48	@ 0x30
 8015208:	af04      	add	r7, sp, #16
 801520a:	6078      	str	r0, [r7, #4]
 801520c:	460b      	mov	r3, r1
 801520e:	70fb      	strb	r3, [r7, #3]
 8015210:	4613      	mov	r3, r2
 8015212:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015214:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015218:	2124      	movs	r1, #36	@ 0x24
 801521a:	2022      	movs	r0, #34	@ 0x22
 801521c:	f7f7 fcec 	bl	800cbf8 <pbuf_alloc>
 8015220:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015222:	69fb      	ldr	r3, [r7, #28]
 8015224:	2b00      	cmp	r3, #0
 8015226:	d056      	beq.n	80152d6 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015228:	69fb      	ldr	r3, [r7, #28]
 801522a:	895b      	ldrh	r3, [r3, #10]
 801522c:	2b23      	cmp	r3, #35	@ 0x23
 801522e:	d806      	bhi.n	801523e <icmp_send_response+0x3a>
 8015230:	4b2b      	ldr	r3, [pc, #172]	@ (80152e0 <icmp_send_response+0xdc>)
 8015232:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8015236:	492b      	ldr	r1, [pc, #172]	@ (80152e4 <icmp_send_response+0xe0>)
 8015238:	482b      	ldr	r0, [pc, #172]	@ (80152e8 <icmp_send_response+0xe4>)
 801523a:	f001 fcf9 	bl	8016c30 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	685b      	ldr	r3, [r3, #4]
 8015242:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015244:	69fb      	ldr	r3, [r7, #28]
 8015246:	685b      	ldr	r3, [r3, #4]
 8015248:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801524a:	697b      	ldr	r3, [r7, #20]
 801524c:	78fa      	ldrb	r2, [r7, #3]
 801524e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015250:	697b      	ldr	r3, [r7, #20]
 8015252:	78ba      	ldrb	r2, [r7, #2]
 8015254:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8015256:	697b      	ldr	r3, [r7, #20]
 8015258:	2200      	movs	r2, #0
 801525a:	711a      	strb	r2, [r3, #4]
 801525c:	2200      	movs	r2, #0
 801525e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015260:	697b      	ldr	r3, [r7, #20]
 8015262:	2200      	movs	r2, #0
 8015264:	719a      	strb	r2, [r3, #6]
 8015266:	2200      	movs	r2, #0
 8015268:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801526a:	69fb      	ldr	r3, [r7, #28]
 801526c:	685b      	ldr	r3, [r3, #4]
 801526e:	f103 0008 	add.w	r0, r3, #8
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	685b      	ldr	r3, [r3, #4]
 8015276:	221c      	movs	r2, #28
 8015278:	4619      	mov	r1, r3
 801527a:	f001 fe0a 	bl	8016e92 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801527e:	69bb      	ldr	r3, [r7, #24]
 8015280:	68db      	ldr	r3, [r3, #12]
 8015282:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015284:	f107 030c 	add.w	r3, r7, #12
 8015288:	4618      	mov	r0, r3
 801528a:	f000 f82f 	bl	80152ec <ip4_route>
 801528e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015290:	693b      	ldr	r3, [r7, #16]
 8015292:	2b00      	cmp	r3, #0
 8015294:	d01b      	beq.n	80152ce <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8015296:	697b      	ldr	r3, [r7, #20]
 8015298:	2200      	movs	r2, #0
 801529a:	709a      	strb	r2, [r3, #2]
 801529c:	2200      	movs	r2, #0
 801529e:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80152a0:	69fb      	ldr	r3, [r7, #28]
 80152a2:	895b      	ldrh	r3, [r3, #10]
 80152a4:	4619      	mov	r1, r3
 80152a6:	6978      	ldr	r0, [r7, #20]
 80152a8:	f7f6 fb6b 	bl	800b982 <inet_chksum>
 80152ac:	4603      	mov	r3, r0
 80152ae:	461a      	mov	r2, r3
 80152b0:	697b      	ldr	r3, [r7, #20]
 80152b2:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80152b4:	f107 020c 	add.w	r2, r7, #12
 80152b8:	693b      	ldr	r3, [r7, #16]
 80152ba:	9302      	str	r3, [sp, #8]
 80152bc:	2301      	movs	r3, #1
 80152be:	9301      	str	r3, [sp, #4]
 80152c0:	2300      	movs	r3, #0
 80152c2:	9300      	str	r3, [sp, #0]
 80152c4:	23ff      	movs	r3, #255	@ 0xff
 80152c6:	2100      	movs	r1, #0
 80152c8:	69f8      	ldr	r0, [r7, #28]
 80152ca:	f000 f9cd 	bl	8015668 <ip4_output_if>
  }
  pbuf_free(q);
 80152ce:	69f8      	ldr	r0, [r7, #28]
 80152d0:	f7f7 ff76 	bl	800d1c0 <pbuf_free>
 80152d4:	e000      	b.n	80152d8 <icmp_send_response+0xd4>
    return;
 80152d6:	bf00      	nop
}
 80152d8:	3720      	adds	r7, #32
 80152da:	46bd      	mov	sp, r7
 80152dc:	bd80      	pop	{r7, pc}
 80152de:	bf00      	nop
 80152e0:	0801ac30 	.word	0x0801ac30
 80152e4:	0801acfc 	.word	0x0801acfc
 80152e8:	0801aca0 	.word	0x0801aca0

080152ec <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80152ec:	b480      	push	{r7}
 80152ee:	b085      	sub	sp, #20
 80152f0:	af00      	add	r7, sp, #0
 80152f2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80152f4:	4b33      	ldr	r3, [pc, #204]	@ (80153c4 <ip4_route+0xd8>)
 80152f6:	681b      	ldr	r3, [r3, #0]
 80152f8:	60fb      	str	r3, [r7, #12]
 80152fa:	e036      	b.n	801536a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015302:	f003 0301 	and.w	r3, r3, #1
 8015306:	b2db      	uxtb	r3, r3
 8015308:	2b00      	cmp	r3, #0
 801530a:	d02b      	beq.n	8015364 <ip4_route+0x78>
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015312:	089b      	lsrs	r3, r3, #2
 8015314:	f003 0301 	and.w	r3, r3, #1
 8015318:	b2db      	uxtb	r3, r3
 801531a:	2b00      	cmp	r3, #0
 801531c:	d022      	beq.n	8015364 <ip4_route+0x78>
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	3304      	adds	r3, #4
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	2b00      	cmp	r3, #0
 8015326:	d01d      	beq.n	8015364 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	681a      	ldr	r2, [r3, #0]
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	3304      	adds	r3, #4
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	405a      	eors	r2, r3
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	3308      	adds	r3, #8
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	4013      	ands	r3, r2
 801533c:	2b00      	cmp	r3, #0
 801533e:	d101      	bne.n	8015344 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	e038      	b.n	80153b6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015344:	68fb      	ldr	r3, [r7, #12]
 8015346:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801534a:	f003 0302 	and.w	r3, r3, #2
 801534e:	2b00      	cmp	r3, #0
 8015350:	d108      	bne.n	8015364 <ip4_route+0x78>
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	681a      	ldr	r2, [r3, #0]
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	330c      	adds	r3, #12
 801535a:	681b      	ldr	r3, [r3, #0]
 801535c:	429a      	cmp	r2, r3
 801535e:	d101      	bne.n	8015364 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	e028      	b.n	80153b6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015364:	68fb      	ldr	r3, [r7, #12]
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	60fb      	str	r3, [r7, #12]
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	2b00      	cmp	r3, #0
 801536e:	d1c5      	bne.n	80152fc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015370:	4b15      	ldr	r3, [pc, #84]	@ (80153c8 <ip4_route+0xdc>)
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	2b00      	cmp	r3, #0
 8015376:	d01a      	beq.n	80153ae <ip4_route+0xc2>
 8015378:	4b13      	ldr	r3, [pc, #76]	@ (80153c8 <ip4_route+0xdc>)
 801537a:	681b      	ldr	r3, [r3, #0]
 801537c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015380:	f003 0301 	and.w	r3, r3, #1
 8015384:	2b00      	cmp	r3, #0
 8015386:	d012      	beq.n	80153ae <ip4_route+0xc2>
 8015388:	4b0f      	ldr	r3, [pc, #60]	@ (80153c8 <ip4_route+0xdc>)
 801538a:	681b      	ldr	r3, [r3, #0]
 801538c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015390:	f003 0304 	and.w	r3, r3, #4
 8015394:	2b00      	cmp	r3, #0
 8015396:	d00a      	beq.n	80153ae <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015398:	4b0b      	ldr	r3, [pc, #44]	@ (80153c8 <ip4_route+0xdc>)
 801539a:	681b      	ldr	r3, [r3, #0]
 801539c:	3304      	adds	r3, #4
 801539e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d004      	beq.n	80153ae <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	681b      	ldr	r3, [r3, #0]
 80153a8:	b2db      	uxtb	r3, r3
 80153aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80153ac:	d101      	bne.n	80153b2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80153ae:	2300      	movs	r3, #0
 80153b0:	e001      	b.n	80153b6 <ip4_route+0xca>
  }

  return netif_default;
 80153b2:	4b05      	ldr	r3, [pc, #20]	@ (80153c8 <ip4_route+0xdc>)
 80153b4:	681b      	ldr	r3, [r3, #0]
}
 80153b6:	4618      	mov	r0, r3
 80153b8:	3714      	adds	r7, #20
 80153ba:	46bd      	mov	sp, r7
 80153bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153c0:	4770      	bx	lr
 80153c2:	bf00      	nop
 80153c4:	24007ef8 	.word	0x24007ef8
 80153c8:	24007efc 	.word	0x24007efc

080153cc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80153cc:	b580      	push	{r7, lr}
 80153ce:	b082      	sub	sp, #8
 80153d0:	af00      	add	r7, sp, #0
 80153d2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80153da:	f003 0301 	and.w	r3, r3, #1
 80153de:	b2db      	uxtb	r3, r3
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d016      	beq.n	8015412 <ip4_input_accept+0x46>
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	3304      	adds	r3, #4
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d011      	beq.n	8015412 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80153ee:	4b0b      	ldr	r3, [pc, #44]	@ (801541c <ip4_input_accept+0x50>)
 80153f0:	695a      	ldr	r2, [r3, #20]
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	3304      	adds	r3, #4
 80153f6:	681b      	ldr	r3, [r3, #0]
 80153f8:	429a      	cmp	r2, r3
 80153fa:	d008      	beq.n	801540e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80153fc:	4b07      	ldr	r3, [pc, #28]	@ (801541c <ip4_input_accept+0x50>)
 80153fe:	695b      	ldr	r3, [r3, #20]
 8015400:	6879      	ldr	r1, [r7, #4]
 8015402:	4618      	mov	r0, r3
 8015404:	f000 fa08 	bl	8015818 <ip4_addr_isbroadcast_u32>
 8015408:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801540a:	2b00      	cmp	r3, #0
 801540c:	d001      	beq.n	8015412 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801540e:	2301      	movs	r3, #1
 8015410:	e000      	b.n	8015414 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015412:	2300      	movs	r3, #0
}
 8015414:	4618      	mov	r0, r3
 8015416:	3708      	adds	r7, #8
 8015418:	46bd      	mov	sp, r7
 801541a:	bd80      	pop	{r7, pc}
 801541c:	24004df4 	.word	0x24004df4

08015420 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015420:	b580      	push	{r7, lr}
 8015422:	b086      	sub	sp, #24
 8015424:	af00      	add	r7, sp, #0
 8015426:	6078      	str	r0, [r7, #4]
 8015428:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	685b      	ldr	r3, [r3, #4]
 801542e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8015430:	697b      	ldr	r3, [r7, #20]
 8015432:	781b      	ldrb	r3, [r3, #0]
 8015434:	091b      	lsrs	r3, r3, #4
 8015436:	b2db      	uxtb	r3, r3
 8015438:	2b04      	cmp	r3, #4
 801543a:	d004      	beq.n	8015446 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801543c:	6878      	ldr	r0, [r7, #4]
 801543e:	f7f7 febf 	bl	800d1c0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015442:	2300      	movs	r3, #0
 8015444:	e107      	b.n	8015656 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015446:	697b      	ldr	r3, [r7, #20]
 8015448:	781b      	ldrb	r3, [r3, #0]
 801544a:	f003 030f 	and.w	r3, r3, #15
 801544e:	b2db      	uxtb	r3, r3
 8015450:	009b      	lsls	r3, r3, #2
 8015452:	b2db      	uxtb	r3, r3
 8015454:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015456:	697b      	ldr	r3, [r7, #20]
 8015458:	885b      	ldrh	r3, [r3, #2]
 801545a:	b29b      	uxth	r3, r3
 801545c:	4618      	mov	r0, r3
 801545e:	f7f6 fa05 	bl	800b86c <lwip_htons>
 8015462:	4603      	mov	r3, r0
 8015464:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	891b      	ldrh	r3, [r3, #8]
 801546a:	89ba      	ldrh	r2, [r7, #12]
 801546c:	429a      	cmp	r2, r3
 801546e:	d204      	bcs.n	801547a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8015470:	89bb      	ldrh	r3, [r7, #12]
 8015472:	4619      	mov	r1, r3
 8015474:	6878      	ldr	r0, [r7, #4]
 8015476:	f7f7 fd1d 	bl	800ceb4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	895b      	ldrh	r3, [r3, #10]
 801547e:	89fa      	ldrh	r2, [r7, #14]
 8015480:	429a      	cmp	r2, r3
 8015482:	d807      	bhi.n	8015494 <ip4_input+0x74>
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	891b      	ldrh	r3, [r3, #8]
 8015488:	89ba      	ldrh	r2, [r7, #12]
 801548a:	429a      	cmp	r2, r3
 801548c:	d802      	bhi.n	8015494 <ip4_input+0x74>
 801548e:	89fb      	ldrh	r3, [r7, #14]
 8015490:	2b13      	cmp	r3, #19
 8015492:	d804      	bhi.n	801549e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015494:	6878      	ldr	r0, [r7, #4]
 8015496:	f7f7 fe93 	bl	800d1c0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801549a:	2300      	movs	r3, #0
 801549c:	e0db      	b.n	8015656 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801549e:	697b      	ldr	r3, [r7, #20]
 80154a0:	691b      	ldr	r3, [r3, #16]
 80154a2:	4a6f      	ldr	r2, [pc, #444]	@ (8015660 <ip4_input+0x240>)
 80154a4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80154a6:	697b      	ldr	r3, [r7, #20]
 80154a8:	68db      	ldr	r3, [r3, #12]
 80154aa:	4a6d      	ldr	r2, [pc, #436]	@ (8015660 <ip4_input+0x240>)
 80154ac:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80154ae:	4b6c      	ldr	r3, [pc, #432]	@ (8015660 <ip4_input+0x240>)
 80154b0:	695b      	ldr	r3, [r3, #20]
 80154b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80154b6:	2be0      	cmp	r3, #224	@ 0xe0
 80154b8:	d112      	bne.n	80154e0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80154ba:	683b      	ldr	r3, [r7, #0]
 80154bc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80154c0:	f003 0301 	and.w	r3, r3, #1
 80154c4:	b2db      	uxtb	r3, r3
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d007      	beq.n	80154da <ip4_input+0xba>
 80154ca:	683b      	ldr	r3, [r7, #0]
 80154cc:	3304      	adds	r3, #4
 80154ce:	681b      	ldr	r3, [r3, #0]
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d002      	beq.n	80154da <ip4_input+0xba>
      netif = inp;
 80154d4:	683b      	ldr	r3, [r7, #0]
 80154d6:	613b      	str	r3, [r7, #16]
 80154d8:	e02a      	b.n	8015530 <ip4_input+0x110>
    } else {
      netif = NULL;
 80154da:	2300      	movs	r3, #0
 80154dc:	613b      	str	r3, [r7, #16]
 80154de:	e027      	b.n	8015530 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80154e0:	6838      	ldr	r0, [r7, #0]
 80154e2:	f7ff ff73 	bl	80153cc <ip4_input_accept>
 80154e6:	4603      	mov	r3, r0
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d002      	beq.n	80154f2 <ip4_input+0xd2>
      netif = inp;
 80154ec:	683b      	ldr	r3, [r7, #0]
 80154ee:	613b      	str	r3, [r7, #16]
 80154f0:	e01e      	b.n	8015530 <ip4_input+0x110>
    } else {
      netif = NULL;
 80154f2:	2300      	movs	r3, #0
 80154f4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80154f6:	4b5a      	ldr	r3, [pc, #360]	@ (8015660 <ip4_input+0x240>)
 80154f8:	695b      	ldr	r3, [r3, #20]
 80154fa:	b2db      	uxtb	r3, r3
 80154fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80154fe:	d017      	beq.n	8015530 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015500:	4b58      	ldr	r3, [pc, #352]	@ (8015664 <ip4_input+0x244>)
 8015502:	681b      	ldr	r3, [r3, #0]
 8015504:	613b      	str	r3, [r7, #16]
 8015506:	e00e      	b.n	8015526 <ip4_input+0x106>
          if (netif == inp) {
 8015508:	693a      	ldr	r2, [r7, #16]
 801550a:	683b      	ldr	r3, [r7, #0]
 801550c:	429a      	cmp	r2, r3
 801550e:	d006      	beq.n	801551e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015510:	6938      	ldr	r0, [r7, #16]
 8015512:	f7ff ff5b 	bl	80153cc <ip4_input_accept>
 8015516:	4603      	mov	r3, r0
 8015518:	2b00      	cmp	r3, #0
 801551a:	d108      	bne.n	801552e <ip4_input+0x10e>
 801551c:	e000      	b.n	8015520 <ip4_input+0x100>
            continue;
 801551e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015520:	693b      	ldr	r3, [r7, #16]
 8015522:	681b      	ldr	r3, [r3, #0]
 8015524:	613b      	str	r3, [r7, #16]
 8015526:	693b      	ldr	r3, [r7, #16]
 8015528:	2b00      	cmp	r3, #0
 801552a:	d1ed      	bne.n	8015508 <ip4_input+0xe8>
 801552c:	e000      	b.n	8015530 <ip4_input+0x110>
            break;
 801552e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015530:	4b4b      	ldr	r3, [pc, #300]	@ (8015660 <ip4_input+0x240>)
 8015532:	691b      	ldr	r3, [r3, #16]
 8015534:	6839      	ldr	r1, [r7, #0]
 8015536:	4618      	mov	r0, r3
 8015538:	f000 f96e 	bl	8015818 <ip4_addr_isbroadcast_u32>
 801553c:	4603      	mov	r3, r0
 801553e:	2b00      	cmp	r3, #0
 8015540:	d105      	bne.n	801554e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015542:	4b47      	ldr	r3, [pc, #284]	@ (8015660 <ip4_input+0x240>)
 8015544:	691b      	ldr	r3, [r3, #16]
 8015546:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801554a:	2be0      	cmp	r3, #224	@ 0xe0
 801554c:	d104      	bne.n	8015558 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801554e:	6878      	ldr	r0, [r7, #4]
 8015550:	f7f7 fe36 	bl	800d1c0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015554:	2300      	movs	r3, #0
 8015556:	e07e      	b.n	8015656 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015558:	693b      	ldr	r3, [r7, #16]
 801555a:	2b00      	cmp	r3, #0
 801555c:	d104      	bne.n	8015568 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801555e:	6878      	ldr	r0, [r7, #4]
 8015560:	f7f7 fe2e 	bl	800d1c0 <pbuf_free>
    return ERR_OK;
 8015564:	2300      	movs	r3, #0
 8015566:	e076      	b.n	8015656 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015568:	697b      	ldr	r3, [r7, #20]
 801556a:	88db      	ldrh	r3, [r3, #6]
 801556c:	b29b      	uxth	r3, r3
 801556e:	461a      	mov	r2, r3
 8015570:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8015574:	4013      	ands	r3, r2
 8015576:	2b00      	cmp	r3, #0
 8015578:	d00b      	beq.n	8015592 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801557a:	6878      	ldr	r0, [r7, #4]
 801557c:	f000 fc92 	bl	8015ea4 <ip4_reass>
 8015580:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	2b00      	cmp	r3, #0
 8015586:	d101      	bne.n	801558c <ip4_input+0x16c>
      return ERR_OK;
 8015588:	2300      	movs	r3, #0
 801558a:	e064      	b.n	8015656 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	685b      	ldr	r3, [r3, #4]
 8015590:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015592:	4a33      	ldr	r2, [pc, #204]	@ (8015660 <ip4_input+0x240>)
 8015594:	693b      	ldr	r3, [r7, #16]
 8015596:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015598:	4a31      	ldr	r2, [pc, #196]	@ (8015660 <ip4_input+0x240>)
 801559a:	683b      	ldr	r3, [r7, #0]
 801559c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801559e:	4a30      	ldr	r2, [pc, #192]	@ (8015660 <ip4_input+0x240>)
 80155a0:	697b      	ldr	r3, [r7, #20]
 80155a2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80155a4:	697b      	ldr	r3, [r7, #20]
 80155a6:	781b      	ldrb	r3, [r3, #0]
 80155a8:	f003 030f 	and.w	r3, r3, #15
 80155ac:	b2db      	uxtb	r3, r3
 80155ae:	009b      	lsls	r3, r3, #2
 80155b0:	b2db      	uxtb	r3, r3
 80155b2:	461a      	mov	r2, r3
 80155b4:	4b2a      	ldr	r3, [pc, #168]	@ (8015660 <ip4_input+0x240>)
 80155b6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80155b8:	89fb      	ldrh	r3, [r7, #14]
 80155ba:	4619      	mov	r1, r3
 80155bc:	6878      	ldr	r0, [r7, #4]
 80155be:	f7f7 fd79 	bl	800d0b4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80155c2:	697b      	ldr	r3, [r7, #20]
 80155c4:	7a5b      	ldrb	r3, [r3, #9]
 80155c6:	2b11      	cmp	r3, #17
 80155c8:	d006      	beq.n	80155d8 <ip4_input+0x1b8>
 80155ca:	2b11      	cmp	r3, #17
 80155cc:	dc13      	bgt.n	80155f6 <ip4_input+0x1d6>
 80155ce:	2b01      	cmp	r3, #1
 80155d0:	d00c      	beq.n	80155ec <ip4_input+0x1cc>
 80155d2:	2b06      	cmp	r3, #6
 80155d4:	d005      	beq.n	80155e2 <ip4_input+0x1c2>
 80155d6:	e00e      	b.n	80155f6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80155d8:	6839      	ldr	r1, [r7, #0]
 80155da:	6878      	ldr	r0, [r7, #4]
 80155dc:	f7fe fb34 	bl	8013c48 <udp_input>
        break;
 80155e0:	e026      	b.n	8015630 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80155e2:	6839      	ldr	r1, [r7, #0]
 80155e4:	6878      	ldr	r0, [r7, #4]
 80155e6:	f7f9 fef3 	bl	800f3d0 <tcp_input>
        break;
 80155ea:	e021      	b.n	8015630 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80155ec:	6839      	ldr	r1, [r7, #0]
 80155ee:	6878      	ldr	r0, [r7, #4]
 80155f0:	f7ff fcc8 	bl	8014f84 <icmp_input>
        break;
 80155f4:	e01c      	b.n	8015630 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80155f6:	4b1a      	ldr	r3, [pc, #104]	@ (8015660 <ip4_input+0x240>)
 80155f8:	695b      	ldr	r3, [r3, #20]
 80155fa:	6939      	ldr	r1, [r7, #16]
 80155fc:	4618      	mov	r0, r3
 80155fe:	f000 f90b 	bl	8015818 <ip4_addr_isbroadcast_u32>
 8015602:	4603      	mov	r3, r0
 8015604:	2b00      	cmp	r3, #0
 8015606:	d10f      	bne.n	8015628 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015608:	4b15      	ldr	r3, [pc, #84]	@ (8015660 <ip4_input+0x240>)
 801560a:	695b      	ldr	r3, [r3, #20]
 801560c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015610:	2be0      	cmp	r3, #224	@ 0xe0
 8015612:	d009      	beq.n	8015628 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015614:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015618:	4619      	mov	r1, r3
 801561a:	6878      	ldr	r0, [r7, #4]
 801561c:	f7f7 fdbd 	bl	800d19a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015620:	2102      	movs	r1, #2
 8015622:	6878      	ldr	r0, [r7, #4]
 8015624:	f7ff fdce 	bl	80151c4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015628:	6878      	ldr	r0, [r7, #4]
 801562a:	f7f7 fdc9 	bl	800d1c0 <pbuf_free>
        break;
 801562e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015630:	4b0b      	ldr	r3, [pc, #44]	@ (8015660 <ip4_input+0x240>)
 8015632:	2200      	movs	r2, #0
 8015634:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015636:	4b0a      	ldr	r3, [pc, #40]	@ (8015660 <ip4_input+0x240>)
 8015638:	2200      	movs	r2, #0
 801563a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801563c:	4b08      	ldr	r3, [pc, #32]	@ (8015660 <ip4_input+0x240>)
 801563e:	2200      	movs	r2, #0
 8015640:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015642:	4b07      	ldr	r3, [pc, #28]	@ (8015660 <ip4_input+0x240>)
 8015644:	2200      	movs	r2, #0
 8015646:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015648:	4b05      	ldr	r3, [pc, #20]	@ (8015660 <ip4_input+0x240>)
 801564a:	2200      	movs	r2, #0
 801564c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801564e:	4b04      	ldr	r3, [pc, #16]	@ (8015660 <ip4_input+0x240>)
 8015650:	2200      	movs	r2, #0
 8015652:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015654:	2300      	movs	r3, #0
}
 8015656:	4618      	mov	r0, r3
 8015658:	3718      	adds	r7, #24
 801565a:	46bd      	mov	sp, r7
 801565c:	bd80      	pop	{r7, pc}
 801565e:	bf00      	nop
 8015660:	24004df4 	.word	0x24004df4
 8015664:	24007ef8 	.word	0x24007ef8

08015668 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015668:	b580      	push	{r7, lr}
 801566a:	b08a      	sub	sp, #40	@ 0x28
 801566c:	af04      	add	r7, sp, #16
 801566e:	60f8      	str	r0, [r7, #12]
 8015670:	60b9      	str	r1, [r7, #8]
 8015672:	607a      	str	r2, [r7, #4]
 8015674:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015676:	68bb      	ldr	r3, [r7, #8]
 8015678:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	2b00      	cmp	r3, #0
 801567e:	d009      	beq.n	8015694 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015680:	68bb      	ldr	r3, [r7, #8]
 8015682:	2b00      	cmp	r3, #0
 8015684:	d003      	beq.n	801568e <ip4_output_if+0x26>
 8015686:	68bb      	ldr	r3, [r7, #8]
 8015688:	681b      	ldr	r3, [r3, #0]
 801568a:	2b00      	cmp	r3, #0
 801568c:	d102      	bne.n	8015694 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801568e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015690:	3304      	adds	r3, #4
 8015692:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015694:	78fa      	ldrb	r2, [r7, #3]
 8015696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015698:	9302      	str	r3, [sp, #8]
 801569a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801569e:	9301      	str	r3, [sp, #4]
 80156a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80156a4:	9300      	str	r3, [sp, #0]
 80156a6:	4613      	mov	r3, r2
 80156a8:	687a      	ldr	r2, [r7, #4]
 80156aa:	6979      	ldr	r1, [r7, #20]
 80156ac:	68f8      	ldr	r0, [r7, #12]
 80156ae:	f000 f805 	bl	80156bc <ip4_output_if_src>
 80156b2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80156b4:	4618      	mov	r0, r3
 80156b6:	3718      	adds	r7, #24
 80156b8:	46bd      	mov	sp, r7
 80156ba:	bd80      	pop	{r7, pc}

080156bc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80156bc:	b580      	push	{r7, lr}
 80156be:	b088      	sub	sp, #32
 80156c0:	af00      	add	r7, sp, #0
 80156c2:	60f8      	str	r0, [r7, #12]
 80156c4:	60b9      	str	r1, [r7, #8]
 80156c6:	607a      	str	r2, [r7, #4]
 80156c8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80156ca:	68fb      	ldr	r3, [r7, #12]
 80156cc:	7b9b      	ldrb	r3, [r3, #14]
 80156ce:	2b01      	cmp	r3, #1
 80156d0:	d006      	beq.n	80156e0 <ip4_output_if_src+0x24>
 80156d2:	4b4b      	ldr	r3, [pc, #300]	@ (8015800 <ip4_output_if_src+0x144>)
 80156d4:	f44f 7255 	mov.w	r2, #852	@ 0x354
 80156d8:	494a      	ldr	r1, [pc, #296]	@ (8015804 <ip4_output_if_src+0x148>)
 80156da:	484b      	ldr	r0, [pc, #300]	@ (8015808 <ip4_output_if_src+0x14c>)
 80156dc:	f001 faa8 	bl	8016c30 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d060      	beq.n	80157a8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80156e6:	2314      	movs	r3, #20
 80156e8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80156ea:	2114      	movs	r1, #20
 80156ec:	68f8      	ldr	r0, [r7, #12]
 80156ee:	f7f7 fcd1 	bl	800d094 <pbuf_add_header>
 80156f2:	4603      	mov	r3, r0
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d002      	beq.n	80156fe <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80156f8:	f06f 0301 	mvn.w	r3, #1
 80156fc:	e07c      	b.n	80157f8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80156fe:	68fb      	ldr	r3, [r7, #12]
 8015700:	685b      	ldr	r3, [r3, #4]
 8015702:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	895b      	ldrh	r3, [r3, #10]
 8015708:	2b13      	cmp	r3, #19
 801570a:	d806      	bhi.n	801571a <ip4_output_if_src+0x5e>
 801570c:	4b3c      	ldr	r3, [pc, #240]	@ (8015800 <ip4_output_if_src+0x144>)
 801570e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8015712:	493e      	ldr	r1, [pc, #248]	@ (801580c <ip4_output_if_src+0x150>)
 8015714:	483c      	ldr	r0, [pc, #240]	@ (8015808 <ip4_output_if_src+0x14c>)
 8015716:	f001 fa8b 	bl	8016c30 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801571a:	69fb      	ldr	r3, [r7, #28]
 801571c:	78fa      	ldrb	r2, [r7, #3]
 801571e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015720:	69fb      	ldr	r3, [r7, #28]
 8015722:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8015726:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	681a      	ldr	r2, [r3, #0]
 801572c:	69fb      	ldr	r3, [r7, #28]
 801572e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015730:	8b7b      	ldrh	r3, [r7, #26]
 8015732:	089b      	lsrs	r3, r3, #2
 8015734:	b29b      	uxth	r3, r3
 8015736:	b2db      	uxtb	r3, r3
 8015738:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801573c:	b2da      	uxtb	r2, r3
 801573e:	69fb      	ldr	r3, [r7, #28]
 8015740:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015742:	69fb      	ldr	r3, [r7, #28]
 8015744:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8015748:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801574a:	68fb      	ldr	r3, [r7, #12]
 801574c:	891b      	ldrh	r3, [r3, #8]
 801574e:	4618      	mov	r0, r3
 8015750:	f7f6 f88c 	bl	800b86c <lwip_htons>
 8015754:	4603      	mov	r3, r0
 8015756:	461a      	mov	r2, r3
 8015758:	69fb      	ldr	r3, [r7, #28]
 801575a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801575c:	69fb      	ldr	r3, [r7, #28]
 801575e:	2200      	movs	r2, #0
 8015760:	719a      	strb	r2, [r3, #6]
 8015762:	2200      	movs	r2, #0
 8015764:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015766:	4b2a      	ldr	r3, [pc, #168]	@ (8015810 <ip4_output_if_src+0x154>)
 8015768:	881b      	ldrh	r3, [r3, #0]
 801576a:	4618      	mov	r0, r3
 801576c:	f7f6 f87e 	bl	800b86c <lwip_htons>
 8015770:	4603      	mov	r3, r0
 8015772:	461a      	mov	r2, r3
 8015774:	69fb      	ldr	r3, [r7, #28]
 8015776:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015778:	4b25      	ldr	r3, [pc, #148]	@ (8015810 <ip4_output_if_src+0x154>)
 801577a:	881b      	ldrh	r3, [r3, #0]
 801577c:	3301      	adds	r3, #1
 801577e:	b29a      	uxth	r2, r3
 8015780:	4b23      	ldr	r3, [pc, #140]	@ (8015810 <ip4_output_if_src+0x154>)
 8015782:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015784:	68bb      	ldr	r3, [r7, #8]
 8015786:	2b00      	cmp	r3, #0
 8015788:	d104      	bne.n	8015794 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801578a:	4b22      	ldr	r3, [pc, #136]	@ (8015814 <ip4_output_if_src+0x158>)
 801578c:	681a      	ldr	r2, [r3, #0]
 801578e:	69fb      	ldr	r3, [r7, #28]
 8015790:	60da      	str	r2, [r3, #12]
 8015792:	e003      	b.n	801579c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015794:	68bb      	ldr	r3, [r7, #8]
 8015796:	681a      	ldr	r2, [r3, #0]
 8015798:	69fb      	ldr	r3, [r7, #28]
 801579a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801579c:	69fb      	ldr	r3, [r7, #28]
 801579e:	2200      	movs	r2, #0
 80157a0:	729a      	strb	r2, [r3, #10]
 80157a2:	2200      	movs	r2, #0
 80157a4:	72da      	strb	r2, [r3, #11]
 80157a6:	e00f      	b.n	80157c8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80157a8:	68fb      	ldr	r3, [r7, #12]
 80157aa:	895b      	ldrh	r3, [r3, #10]
 80157ac:	2b13      	cmp	r3, #19
 80157ae:	d802      	bhi.n	80157b6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80157b0:	f06f 0301 	mvn.w	r3, #1
 80157b4:	e020      	b.n	80157f8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	685b      	ldr	r3, [r3, #4]
 80157ba:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80157bc:	69fb      	ldr	r3, [r7, #28]
 80157be:	691b      	ldr	r3, [r3, #16]
 80157c0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80157c2:	f107 0314 	add.w	r3, r7, #20
 80157c6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80157c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157ca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d00c      	beq.n	80157ea <ip4_output_if_src+0x12e>
 80157d0:	68fb      	ldr	r3, [r7, #12]
 80157d2:	891a      	ldrh	r2, [r3, #8]
 80157d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157d6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80157d8:	429a      	cmp	r2, r3
 80157da:	d906      	bls.n	80157ea <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80157dc:	687a      	ldr	r2, [r7, #4]
 80157de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80157e0:	68f8      	ldr	r0, [r7, #12]
 80157e2:	f000 fd53 	bl	801628c <ip4_frag>
 80157e6:	4603      	mov	r3, r0
 80157e8:	e006      	b.n	80157f8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80157ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157ec:	695b      	ldr	r3, [r3, #20]
 80157ee:	687a      	ldr	r2, [r7, #4]
 80157f0:	68f9      	ldr	r1, [r7, #12]
 80157f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80157f4:	4798      	blx	r3
 80157f6:	4603      	mov	r3, r0
}
 80157f8:	4618      	mov	r0, r3
 80157fa:	3720      	adds	r7, #32
 80157fc:	46bd      	mov	sp, r7
 80157fe:	bd80      	pop	{r7, pc}
 8015800:	0801ad28 	.word	0x0801ad28
 8015804:	0801ad5c 	.word	0x0801ad5c
 8015808:	0801ad68 	.word	0x0801ad68
 801580c:	0801ad90 	.word	0x0801ad90
 8015810:	24008056 	.word	0x24008056
 8015814:	0801b1d0 	.word	0x0801b1d0

08015818 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015818:	b480      	push	{r7}
 801581a:	b085      	sub	sp, #20
 801581c:	af00      	add	r7, sp, #0
 801581e:	6078      	str	r0, [r7, #4]
 8015820:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	f1b3 3fff 	cmp.w	r3, #4294967295
 801582c:	d002      	beq.n	8015834 <ip4_addr_isbroadcast_u32+0x1c>
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	2b00      	cmp	r3, #0
 8015832:	d101      	bne.n	8015838 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015834:	2301      	movs	r3, #1
 8015836:	e02a      	b.n	801588e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015838:	683b      	ldr	r3, [r7, #0]
 801583a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801583e:	f003 0302 	and.w	r3, r3, #2
 8015842:	2b00      	cmp	r3, #0
 8015844:	d101      	bne.n	801584a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015846:	2300      	movs	r3, #0
 8015848:	e021      	b.n	801588e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801584a:	683b      	ldr	r3, [r7, #0]
 801584c:	3304      	adds	r3, #4
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	687a      	ldr	r2, [r7, #4]
 8015852:	429a      	cmp	r2, r3
 8015854:	d101      	bne.n	801585a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015856:	2300      	movs	r3, #0
 8015858:	e019      	b.n	801588e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801585a:	68fa      	ldr	r2, [r7, #12]
 801585c:	683b      	ldr	r3, [r7, #0]
 801585e:	3304      	adds	r3, #4
 8015860:	681b      	ldr	r3, [r3, #0]
 8015862:	405a      	eors	r2, r3
 8015864:	683b      	ldr	r3, [r7, #0]
 8015866:	3308      	adds	r3, #8
 8015868:	681b      	ldr	r3, [r3, #0]
 801586a:	4013      	ands	r3, r2
 801586c:	2b00      	cmp	r3, #0
 801586e:	d10d      	bne.n	801588c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015870:	683b      	ldr	r3, [r7, #0]
 8015872:	3308      	adds	r3, #8
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	43da      	mvns	r2, r3
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801587c:	683b      	ldr	r3, [r7, #0]
 801587e:	3308      	adds	r3, #8
 8015880:	681b      	ldr	r3, [r3, #0]
 8015882:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015884:	429a      	cmp	r2, r3
 8015886:	d101      	bne.n	801588c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015888:	2301      	movs	r3, #1
 801588a:	e000      	b.n	801588e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801588c:	2300      	movs	r3, #0
  }
}
 801588e:	4618      	mov	r0, r3
 8015890:	3714      	adds	r7, #20
 8015892:	46bd      	mov	sp, r7
 8015894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015898:	4770      	bx	lr
	...

0801589c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801589c:	b580      	push	{r7, lr}
 801589e:	b084      	sub	sp, #16
 80158a0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80158a2:	2300      	movs	r3, #0
 80158a4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80158a6:	4b12      	ldr	r3, [pc, #72]	@ (80158f0 <ip_reass_tmr+0x54>)
 80158a8:	681b      	ldr	r3, [r3, #0]
 80158aa:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80158ac:	e018      	b.n	80158e0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	7fdb      	ldrb	r3, [r3, #31]
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d00b      	beq.n	80158ce <ip_reass_tmr+0x32>
      r->timer--;
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	7fdb      	ldrb	r3, [r3, #31]
 80158ba:	3b01      	subs	r3, #1
 80158bc:	b2da      	uxtb	r2, r3
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80158c6:	68fb      	ldr	r3, [r7, #12]
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	60fb      	str	r3, [r7, #12]
 80158cc:	e008      	b.n	80158e0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80158d2:	68fb      	ldr	r3, [r7, #12]
 80158d4:	681b      	ldr	r3, [r3, #0]
 80158d6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80158d8:	68b9      	ldr	r1, [r7, #8]
 80158da:	6878      	ldr	r0, [r7, #4]
 80158dc:	f000 f80a 	bl	80158f4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d1e3      	bne.n	80158ae <ip_reass_tmr+0x12>
    }
  }
}
 80158e6:	bf00      	nop
 80158e8:	bf00      	nop
 80158ea:	3710      	adds	r7, #16
 80158ec:	46bd      	mov	sp, r7
 80158ee:	bd80      	pop	{r7, pc}
 80158f0:	24008058 	.word	0x24008058

080158f4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80158f4:	b580      	push	{r7, lr}
 80158f6:	b088      	sub	sp, #32
 80158f8:	af00      	add	r7, sp, #0
 80158fa:	6078      	str	r0, [r7, #4]
 80158fc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80158fe:	2300      	movs	r3, #0
 8015900:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015902:	683a      	ldr	r2, [r7, #0]
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	429a      	cmp	r2, r3
 8015908:	d105      	bne.n	8015916 <ip_reass_free_complete_datagram+0x22>
 801590a:	4b45      	ldr	r3, [pc, #276]	@ (8015a20 <ip_reass_free_complete_datagram+0x12c>)
 801590c:	22ab      	movs	r2, #171	@ 0xab
 801590e:	4945      	ldr	r1, [pc, #276]	@ (8015a24 <ip_reass_free_complete_datagram+0x130>)
 8015910:	4845      	ldr	r0, [pc, #276]	@ (8015a28 <ip_reass_free_complete_datagram+0x134>)
 8015912:	f001 f98d 	bl	8016c30 <iprintf>
  if (prev != NULL) {
 8015916:	683b      	ldr	r3, [r7, #0]
 8015918:	2b00      	cmp	r3, #0
 801591a:	d00a      	beq.n	8015932 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801591c:	683b      	ldr	r3, [r7, #0]
 801591e:	681b      	ldr	r3, [r3, #0]
 8015920:	687a      	ldr	r2, [r7, #4]
 8015922:	429a      	cmp	r2, r3
 8015924:	d005      	beq.n	8015932 <ip_reass_free_complete_datagram+0x3e>
 8015926:	4b3e      	ldr	r3, [pc, #248]	@ (8015a20 <ip_reass_free_complete_datagram+0x12c>)
 8015928:	22ad      	movs	r2, #173	@ 0xad
 801592a:	4940      	ldr	r1, [pc, #256]	@ (8015a2c <ip_reass_free_complete_datagram+0x138>)
 801592c:	483e      	ldr	r0, [pc, #248]	@ (8015a28 <ip_reass_free_complete_datagram+0x134>)
 801592e:	f001 f97f 	bl	8016c30 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	685b      	ldr	r3, [r3, #4]
 8015936:	685b      	ldr	r3, [r3, #4]
 8015938:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801593a:	697b      	ldr	r3, [r7, #20]
 801593c:	889b      	ldrh	r3, [r3, #4]
 801593e:	b29b      	uxth	r3, r3
 8015940:	2b00      	cmp	r3, #0
 8015942:	d12a      	bne.n	801599a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	685b      	ldr	r3, [r3, #4]
 8015948:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801594a:	697b      	ldr	r3, [r7, #20]
 801594c:	681a      	ldr	r2, [r3, #0]
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015952:	69bb      	ldr	r3, [r7, #24]
 8015954:	6858      	ldr	r0, [r3, #4]
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	3308      	adds	r3, #8
 801595a:	2214      	movs	r2, #20
 801595c:	4619      	mov	r1, r3
 801595e:	f001 fa98 	bl	8016e92 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015962:	2101      	movs	r1, #1
 8015964:	69b8      	ldr	r0, [r7, #24]
 8015966:	f7ff fc3d 	bl	80151e4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801596a:	69b8      	ldr	r0, [r7, #24]
 801596c:	f7f7 fcb6 	bl	800d2dc <pbuf_clen>
 8015970:	4603      	mov	r3, r0
 8015972:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015974:	8bfa      	ldrh	r2, [r7, #30]
 8015976:	8a7b      	ldrh	r3, [r7, #18]
 8015978:	4413      	add	r3, r2
 801597a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801597e:	db05      	blt.n	801598c <ip_reass_free_complete_datagram+0x98>
 8015980:	4b27      	ldr	r3, [pc, #156]	@ (8015a20 <ip_reass_free_complete_datagram+0x12c>)
 8015982:	22bc      	movs	r2, #188	@ 0xbc
 8015984:	492a      	ldr	r1, [pc, #168]	@ (8015a30 <ip_reass_free_complete_datagram+0x13c>)
 8015986:	4828      	ldr	r0, [pc, #160]	@ (8015a28 <ip_reass_free_complete_datagram+0x134>)
 8015988:	f001 f952 	bl	8016c30 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801598c:	8bfa      	ldrh	r2, [r7, #30]
 801598e:	8a7b      	ldrh	r3, [r7, #18]
 8015990:	4413      	add	r3, r2
 8015992:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015994:	69b8      	ldr	r0, [r7, #24]
 8015996:	f7f7 fc13 	bl	800d1c0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	685b      	ldr	r3, [r3, #4]
 801599e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80159a0:	e01f      	b.n	80159e2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80159a2:	69bb      	ldr	r3, [r7, #24]
 80159a4:	685b      	ldr	r3, [r3, #4]
 80159a6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80159a8:	69bb      	ldr	r3, [r7, #24]
 80159aa:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80159ac:	697b      	ldr	r3, [r7, #20]
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80159b2:	68f8      	ldr	r0, [r7, #12]
 80159b4:	f7f7 fc92 	bl	800d2dc <pbuf_clen>
 80159b8:	4603      	mov	r3, r0
 80159ba:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80159bc:	8bfa      	ldrh	r2, [r7, #30]
 80159be:	8a7b      	ldrh	r3, [r7, #18]
 80159c0:	4413      	add	r3, r2
 80159c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80159c6:	db05      	blt.n	80159d4 <ip_reass_free_complete_datagram+0xe0>
 80159c8:	4b15      	ldr	r3, [pc, #84]	@ (8015a20 <ip_reass_free_complete_datagram+0x12c>)
 80159ca:	22cc      	movs	r2, #204	@ 0xcc
 80159cc:	4918      	ldr	r1, [pc, #96]	@ (8015a30 <ip_reass_free_complete_datagram+0x13c>)
 80159ce:	4816      	ldr	r0, [pc, #88]	@ (8015a28 <ip_reass_free_complete_datagram+0x134>)
 80159d0:	f001 f92e 	bl	8016c30 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80159d4:	8bfa      	ldrh	r2, [r7, #30]
 80159d6:	8a7b      	ldrh	r3, [r7, #18]
 80159d8:	4413      	add	r3, r2
 80159da:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80159dc:	68f8      	ldr	r0, [r7, #12]
 80159de:	f7f7 fbef 	bl	800d1c0 <pbuf_free>
  while (p != NULL) {
 80159e2:	69bb      	ldr	r3, [r7, #24]
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d1dc      	bne.n	80159a2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80159e8:	6839      	ldr	r1, [r7, #0]
 80159ea:	6878      	ldr	r0, [r7, #4]
 80159ec:	f000 f8c2 	bl	8015b74 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80159f0:	4b10      	ldr	r3, [pc, #64]	@ (8015a34 <ip_reass_free_complete_datagram+0x140>)
 80159f2:	881b      	ldrh	r3, [r3, #0]
 80159f4:	8bfa      	ldrh	r2, [r7, #30]
 80159f6:	429a      	cmp	r2, r3
 80159f8:	d905      	bls.n	8015a06 <ip_reass_free_complete_datagram+0x112>
 80159fa:	4b09      	ldr	r3, [pc, #36]	@ (8015a20 <ip_reass_free_complete_datagram+0x12c>)
 80159fc:	22d2      	movs	r2, #210	@ 0xd2
 80159fe:	490e      	ldr	r1, [pc, #56]	@ (8015a38 <ip_reass_free_complete_datagram+0x144>)
 8015a00:	4809      	ldr	r0, [pc, #36]	@ (8015a28 <ip_reass_free_complete_datagram+0x134>)
 8015a02:	f001 f915 	bl	8016c30 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015a06:	4b0b      	ldr	r3, [pc, #44]	@ (8015a34 <ip_reass_free_complete_datagram+0x140>)
 8015a08:	881a      	ldrh	r2, [r3, #0]
 8015a0a:	8bfb      	ldrh	r3, [r7, #30]
 8015a0c:	1ad3      	subs	r3, r2, r3
 8015a0e:	b29a      	uxth	r2, r3
 8015a10:	4b08      	ldr	r3, [pc, #32]	@ (8015a34 <ip_reass_free_complete_datagram+0x140>)
 8015a12:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015a14:	8bfb      	ldrh	r3, [r7, #30]
}
 8015a16:	4618      	mov	r0, r3
 8015a18:	3720      	adds	r7, #32
 8015a1a:	46bd      	mov	sp, r7
 8015a1c:	bd80      	pop	{r7, pc}
 8015a1e:	bf00      	nop
 8015a20:	0801adc0 	.word	0x0801adc0
 8015a24:	0801adfc 	.word	0x0801adfc
 8015a28:	0801ae08 	.word	0x0801ae08
 8015a2c:	0801ae30 	.word	0x0801ae30
 8015a30:	0801ae44 	.word	0x0801ae44
 8015a34:	2400805c 	.word	0x2400805c
 8015a38:	0801ae64 	.word	0x0801ae64

08015a3c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015a3c:	b580      	push	{r7, lr}
 8015a3e:	b08a      	sub	sp, #40	@ 0x28
 8015a40:	af00      	add	r7, sp, #0
 8015a42:	6078      	str	r0, [r7, #4]
 8015a44:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015a46:	2300      	movs	r3, #0
 8015a48:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015a4a:	2300      	movs	r3, #0
 8015a4c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015a4e:	2300      	movs	r3, #0
 8015a50:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015a52:	2300      	movs	r3, #0
 8015a54:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015a56:	2300      	movs	r3, #0
 8015a58:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015a5a:	4b28      	ldr	r3, [pc, #160]	@ (8015afc <ip_reass_remove_oldest_datagram+0xc0>)
 8015a5c:	681b      	ldr	r3, [r3, #0]
 8015a5e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8015a60:	e030      	b.n	8015ac4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a64:	695a      	ldr	r2, [r3, #20]
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	68db      	ldr	r3, [r3, #12]
 8015a6a:	429a      	cmp	r2, r3
 8015a6c:	d10c      	bne.n	8015a88 <ip_reass_remove_oldest_datagram+0x4c>
 8015a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a70:	699a      	ldr	r2, [r3, #24]
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	691b      	ldr	r3, [r3, #16]
 8015a76:	429a      	cmp	r2, r3
 8015a78:	d106      	bne.n	8015a88 <ip_reass_remove_oldest_datagram+0x4c>
 8015a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a7c:	899a      	ldrh	r2, [r3, #12]
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	889b      	ldrh	r3, [r3, #4]
 8015a82:	b29b      	uxth	r3, r3
 8015a84:	429a      	cmp	r2, r3
 8015a86:	d014      	beq.n	8015ab2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015a88:	693b      	ldr	r3, [r7, #16]
 8015a8a:	3301      	adds	r3, #1
 8015a8c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015a8e:	6a3b      	ldr	r3, [r7, #32]
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d104      	bne.n	8015a9e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a96:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015a98:	69fb      	ldr	r3, [r7, #28]
 8015a9a:	61bb      	str	r3, [r7, #24]
 8015a9c:	e009      	b.n	8015ab2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015aa0:	7fda      	ldrb	r2, [r3, #31]
 8015aa2:	6a3b      	ldr	r3, [r7, #32]
 8015aa4:	7fdb      	ldrb	r3, [r3, #31]
 8015aa6:	429a      	cmp	r2, r3
 8015aa8:	d803      	bhi.n	8015ab2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015aac:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015aae:	69fb      	ldr	r3, [r7, #28]
 8015ab0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	d001      	beq.n	8015abe <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015abc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ac0:	681b      	ldr	r3, [r3, #0]
 8015ac2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8015ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d1cb      	bne.n	8015a62 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015aca:	6a3b      	ldr	r3, [r7, #32]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d008      	beq.n	8015ae2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015ad0:	69b9      	ldr	r1, [r7, #24]
 8015ad2:	6a38      	ldr	r0, [r7, #32]
 8015ad4:	f7ff ff0e 	bl	80158f4 <ip_reass_free_complete_datagram>
 8015ad8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015ada:	697a      	ldr	r2, [r7, #20]
 8015adc:	68fb      	ldr	r3, [r7, #12]
 8015ade:	4413      	add	r3, r2
 8015ae0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015ae2:	697a      	ldr	r2, [r7, #20]
 8015ae4:	683b      	ldr	r3, [r7, #0]
 8015ae6:	429a      	cmp	r2, r3
 8015ae8:	da02      	bge.n	8015af0 <ip_reass_remove_oldest_datagram+0xb4>
 8015aea:	693b      	ldr	r3, [r7, #16]
 8015aec:	2b01      	cmp	r3, #1
 8015aee:	dcac      	bgt.n	8015a4a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015af0:	697b      	ldr	r3, [r7, #20]
}
 8015af2:	4618      	mov	r0, r3
 8015af4:	3728      	adds	r7, #40	@ 0x28
 8015af6:	46bd      	mov	sp, r7
 8015af8:	bd80      	pop	{r7, pc}
 8015afa:	bf00      	nop
 8015afc:	24008058 	.word	0x24008058

08015b00 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015b00:	b580      	push	{r7, lr}
 8015b02:	b084      	sub	sp, #16
 8015b04:	af00      	add	r7, sp, #0
 8015b06:	6078      	str	r0, [r7, #4]
 8015b08:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015b0a:	2004      	movs	r0, #4
 8015b0c:	f7f6 fc3e 	bl	800c38c <memp_malloc>
 8015b10:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d110      	bne.n	8015b3a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015b18:	6839      	ldr	r1, [r7, #0]
 8015b1a:	6878      	ldr	r0, [r7, #4]
 8015b1c:	f7ff ff8e 	bl	8015a3c <ip_reass_remove_oldest_datagram>
 8015b20:	4602      	mov	r2, r0
 8015b22:	683b      	ldr	r3, [r7, #0]
 8015b24:	4293      	cmp	r3, r2
 8015b26:	dc03      	bgt.n	8015b30 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015b28:	2004      	movs	r0, #4
 8015b2a:	f7f6 fc2f 	bl	800c38c <memp_malloc>
 8015b2e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015b30:	68fb      	ldr	r3, [r7, #12]
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d101      	bne.n	8015b3a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015b36:	2300      	movs	r3, #0
 8015b38:	e016      	b.n	8015b68 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015b3a:	2220      	movs	r2, #32
 8015b3c:	2100      	movs	r1, #0
 8015b3e:	68f8      	ldr	r0, [r7, #12]
 8015b40:	f001 f8db 	bl	8016cfa <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015b44:	68fb      	ldr	r3, [r7, #12]
 8015b46:	220f      	movs	r2, #15
 8015b48:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015b4a:	4b09      	ldr	r3, [pc, #36]	@ (8015b70 <ip_reass_enqueue_new_datagram+0x70>)
 8015b4c:	681a      	ldr	r2, [r3, #0]
 8015b4e:	68fb      	ldr	r3, [r7, #12]
 8015b50:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015b52:	4a07      	ldr	r2, [pc, #28]	@ (8015b70 <ip_reass_enqueue_new_datagram+0x70>)
 8015b54:	68fb      	ldr	r3, [r7, #12]
 8015b56:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015b58:	68fb      	ldr	r3, [r7, #12]
 8015b5a:	3308      	adds	r3, #8
 8015b5c:	2214      	movs	r2, #20
 8015b5e:	6879      	ldr	r1, [r7, #4]
 8015b60:	4618      	mov	r0, r3
 8015b62:	f001 f996 	bl	8016e92 <memcpy>
  return ipr;
 8015b66:	68fb      	ldr	r3, [r7, #12]
}
 8015b68:	4618      	mov	r0, r3
 8015b6a:	3710      	adds	r7, #16
 8015b6c:	46bd      	mov	sp, r7
 8015b6e:	bd80      	pop	{r7, pc}
 8015b70:	24008058 	.word	0x24008058

08015b74 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015b74:	b580      	push	{r7, lr}
 8015b76:	b082      	sub	sp, #8
 8015b78:	af00      	add	r7, sp, #0
 8015b7a:	6078      	str	r0, [r7, #4]
 8015b7c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015b7e:	4b10      	ldr	r3, [pc, #64]	@ (8015bc0 <ip_reass_dequeue_datagram+0x4c>)
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	687a      	ldr	r2, [r7, #4]
 8015b84:	429a      	cmp	r2, r3
 8015b86:	d104      	bne.n	8015b92 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	681b      	ldr	r3, [r3, #0]
 8015b8c:	4a0c      	ldr	r2, [pc, #48]	@ (8015bc0 <ip_reass_dequeue_datagram+0x4c>)
 8015b8e:	6013      	str	r3, [r2, #0]
 8015b90:	e00d      	b.n	8015bae <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015b92:	683b      	ldr	r3, [r7, #0]
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d106      	bne.n	8015ba6 <ip_reass_dequeue_datagram+0x32>
 8015b98:	4b0a      	ldr	r3, [pc, #40]	@ (8015bc4 <ip_reass_dequeue_datagram+0x50>)
 8015b9a:	f240 1245 	movw	r2, #325	@ 0x145
 8015b9e:	490a      	ldr	r1, [pc, #40]	@ (8015bc8 <ip_reass_dequeue_datagram+0x54>)
 8015ba0:	480a      	ldr	r0, [pc, #40]	@ (8015bcc <ip_reass_dequeue_datagram+0x58>)
 8015ba2:	f001 f845 	bl	8016c30 <iprintf>
    prev->next = ipr->next;
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	681a      	ldr	r2, [r3, #0]
 8015baa:	683b      	ldr	r3, [r7, #0]
 8015bac:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015bae:	6879      	ldr	r1, [r7, #4]
 8015bb0:	2004      	movs	r0, #4
 8015bb2:	f7f6 fc61 	bl	800c478 <memp_free>
}
 8015bb6:	bf00      	nop
 8015bb8:	3708      	adds	r7, #8
 8015bba:	46bd      	mov	sp, r7
 8015bbc:	bd80      	pop	{r7, pc}
 8015bbe:	bf00      	nop
 8015bc0:	24008058 	.word	0x24008058
 8015bc4:	0801adc0 	.word	0x0801adc0
 8015bc8:	0801ae88 	.word	0x0801ae88
 8015bcc:	0801ae08 	.word	0x0801ae08

08015bd0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015bd0:	b580      	push	{r7, lr}
 8015bd2:	b08c      	sub	sp, #48	@ 0x30
 8015bd4:	af00      	add	r7, sp, #0
 8015bd6:	60f8      	str	r0, [r7, #12]
 8015bd8:	60b9      	str	r1, [r7, #8]
 8015bda:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015bdc:	2300      	movs	r3, #0
 8015bde:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015be0:	2301      	movs	r3, #1
 8015be2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015be4:	68bb      	ldr	r3, [r7, #8]
 8015be6:	685b      	ldr	r3, [r3, #4]
 8015be8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015bea:	69fb      	ldr	r3, [r7, #28]
 8015bec:	885b      	ldrh	r3, [r3, #2]
 8015bee:	b29b      	uxth	r3, r3
 8015bf0:	4618      	mov	r0, r3
 8015bf2:	f7f5 fe3b 	bl	800b86c <lwip_htons>
 8015bf6:	4603      	mov	r3, r0
 8015bf8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015bfa:	69fb      	ldr	r3, [r7, #28]
 8015bfc:	781b      	ldrb	r3, [r3, #0]
 8015bfe:	f003 030f 	and.w	r3, r3, #15
 8015c02:	b2db      	uxtb	r3, r3
 8015c04:	009b      	lsls	r3, r3, #2
 8015c06:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015c08:	7e7b      	ldrb	r3, [r7, #25]
 8015c0a:	b29b      	uxth	r3, r3
 8015c0c:	8b7a      	ldrh	r2, [r7, #26]
 8015c0e:	429a      	cmp	r2, r3
 8015c10:	d202      	bcs.n	8015c18 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015c12:	f04f 33ff 	mov.w	r3, #4294967295
 8015c16:	e135      	b.n	8015e84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015c18:	7e7b      	ldrb	r3, [r7, #25]
 8015c1a:	b29b      	uxth	r3, r3
 8015c1c:	8b7a      	ldrh	r2, [r7, #26]
 8015c1e:	1ad3      	subs	r3, r2, r3
 8015c20:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015c22:	69fb      	ldr	r3, [r7, #28]
 8015c24:	88db      	ldrh	r3, [r3, #6]
 8015c26:	b29b      	uxth	r3, r3
 8015c28:	4618      	mov	r0, r3
 8015c2a:	f7f5 fe1f 	bl	800b86c <lwip_htons>
 8015c2e:	4603      	mov	r3, r0
 8015c30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015c34:	b29b      	uxth	r3, r3
 8015c36:	00db      	lsls	r3, r3, #3
 8015c38:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015c3a:	68bb      	ldr	r3, [r7, #8]
 8015c3c:	685b      	ldr	r3, [r3, #4]
 8015c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8015c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c42:	2200      	movs	r2, #0
 8015c44:	701a      	strb	r2, [r3, #0]
 8015c46:	2200      	movs	r2, #0
 8015c48:	705a      	strb	r2, [r3, #1]
 8015c4a:	2200      	movs	r2, #0
 8015c4c:	709a      	strb	r2, [r3, #2]
 8015c4e:	2200      	movs	r2, #0
 8015c50:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c54:	8afa      	ldrh	r2, [r7, #22]
 8015c56:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015c58:	8afa      	ldrh	r2, [r7, #22]
 8015c5a:	8b7b      	ldrh	r3, [r7, #26]
 8015c5c:	4413      	add	r3, r2
 8015c5e:	b29a      	uxth	r2, r3
 8015c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c62:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c66:	88db      	ldrh	r3, [r3, #6]
 8015c68:	b29b      	uxth	r3, r3
 8015c6a:	8afa      	ldrh	r2, [r7, #22]
 8015c6c:	429a      	cmp	r2, r3
 8015c6e:	d902      	bls.n	8015c76 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015c70:	f04f 33ff 	mov.w	r3, #4294967295
 8015c74:	e106      	b.n	8015e84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015c76:	68fb      	ldr	r3, [r7, #12]
 8015c78:	685b      	ldr	r3, [r3, #4]
 8015c7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8015c7c:	e068      	b.n	8015d50 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c80:	685b      	ldr	r3, [r3, #4]
 8015c82:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c86:	889b      	ldrh	r3, [r3, #4]
 8015c88:	b29a      	uxth	r2, r3
 8015c8a:	693b      	ldr	r3, [r7, #16]
 8015c8c:	889b      	ldrh	r3, [r3, #4]
 8015c8e:	b29b      	uxth	r3, r3
 8015c90:	429a      	cmp	r2, r3
 8015c92:	d235      	bcs.n	8015d00 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015c98:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d020      	beq.n	8015ce2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ca2:	889b      	ldrh	r3, [r3, #4]
 8015ca4:	b29a      	uxth	r2, r3
 8015ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ca8:	88db      	ldrh	r3, [r3, #6]
 8015caa:	b29b      	uxth	r3, r3
 8015cac:	429a      	cmp	r2, r3
 8015cae:	d307      	bcc.n	8015cc0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cb2:	88db      	ldrh	r3, [r3, #6]
 8015cb4:	b29a      	uxth	r2, r3
 8015cb6:	693b      	ldr	r3, [r7, #16]
 8015cb8:	889b      	ldrh	r3, [r3, #4]
 8015cba:	b29b      	uxth	r3, r3
 8015cbc:	429a      	cmp	r2, r3
 8015cbe:	d902      	bls.n	8015cc6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8015cc4:	e0de      	b.n	8015e84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015cc8:	68ba      	ldr	r2, [r7, #8]
 8015cca:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015cce:	88db      	ldrh	r3, [r3, #6]
 8015cd0:	b29a      	uxth	r2, r3
 8015cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cd4:	889b      	ldrh	r3, [r3, #4]
 8015cd6:	b29b      	uxth	r3, r3
 8015cd8:	429a      	cmp	r2, r3
 8015cda:	d03d      	beq.n	8015d58 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015cdc:	2300      	movs	r3, #0
 8015cde:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015ce0:	e03a      	b.n	8015d58 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ce4:	88db      	ldrh	r3, [r3, #6]
 8015ce6:	b29a      	uxth	r2, r3
 8015ce8:	693b      	ldr	r3, [r7, #16]
 8015cea:	889b      	ldrh	r3, [r3, #4]
 8015cec:	b29b      	uxth	r3, r3
 8015cee:	429a      	cmp	r2, r3
 8015cf0:	d902      	bls.n	8015cf8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8015cf6:	e0c5      	b.n	8015e84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	68ba      	ldr	r2, [r7, #8]
 8015cfc:	605a      	str	r2, [r3, #4]
      break;
 8015cfe:	e02b      	b.n	8015d58 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d02:	889b      	ldrh	r3, [r3, #4]
 8015d04:	b29a      	uxth	r2, r3
 8015d06:	693b      	ldr	r3, [r7, #16]
 8015d08:	889b      	ldrh	r3, [r3, #4]
 8015d0a:	b29b      	uxth	r3, r3
 8015d0c:	429a      	cmp	r2, r3
 8015d0e:	d102      	bne.n	8015d16 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015d10:	f04f 33ff 	mov.w	r3, #4294967295
 8015d14:	e0b6      	b.n	8015e84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d18:	889b      	ldrh	r3, [r3, #4]
 8015d1a:	b29a      	uxth	r2, r3
 8015d1c:	693b      	ldr	r3, [r7, #16]
 8015d1e:	88db      	ldrh	r3, [r3, #6]
 8015d20:	b29b      	uxth	r3, r3
 8015d22:	429a      	cmp	r2, r3
 8015d24:	d202      	bcs.n	8015d2c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015d26:	f04f 33ff 	mov.w	r3, #4294967295
 8015d2a:	e0ab      	b.n	8015e84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d009      	beq.n	8015d46 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d34:	88db      	ldrh	r3, [r3, #6]
 8015d36:	b29a      	uxth	r2, r3
 8015d38:	693b      	ldr	r3, [r7, #16]
 8015d3a:	889b      	ldrh	r3, [r3, #4]
 8015d3c:	b29b      	uxth	r3, r3
 8015d3e:	429a      	cmp	r2, r3
 8015d40:	d001      	beq.n	8015d46 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015d42:	2300      	movs	r3, #0
 8015d44:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015d46:	693b      	ldr	r3, [r7, #16]
 8015d48:	681b      	ldr	r3, [r3, #0]
 8015d4a:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8015d4c:	693b      	ldr	r3, [r7, #16]
 8015d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8015d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d193      	bne.n	8015c7e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015d56:	e000      	b.n	8015d5a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015d58:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d12d      	bne.n	8015dbc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d62:	2b00      	cmp	r3, #0
 8015d64:	d01c      	beq.n	8015da0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d68:	88db      	ldrh	r3, [r3, #6]
 8015d6a:	b29a      	uxth	r2, r3
 8015d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d6e:	889b      	ldrh	r3, [r3, #4]
 8015d70:	b29b      	uxth	r3, r3
 8015d72:	429a      	cmp	r2, r3
 8015d74:	d906      	bls.n	8015d84 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015d76:	4b45      	ldr	r3, [pc, #276]	@ (8015e8c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015d78:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8015d7c:	4944      	ldr	r1, [pc, #272]	@ (8015e90 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015d7e:	4845      	ldr	r0, [pc, #276]	@ (8015e94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015d80:	f000 ff56 	bl	8016c30 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d86:	68ba      	ldr	r2, [r7, #8]
 8015d88:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d8c:	88db      	ldrh	r3, [r3, #6]
 8015d8e:	b29a      	uxth	r2, r3
 8015d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d92:	889b      	ldrh	r3, [r3, #4]
 8015d94:	b29b      	uxth	r3, r3
 8015d96:	429a      	cmp	r2, r3
 8015d98:	d010      	beq.n	8015dbc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015d9a:	2300      	movs	r3, #0
 8015d9c:	623b      	str	r3, [r7, #32]
 8015d9e:	e00d      	b.n	8015dbc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015da0:	68fb      	ldr	r3, [r7, #12]
 8015da2:	685b      	ldr	r3, [r3, #4]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d006      	beq.n	8015db6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015da8:	4b38      	ldr	r3, [pc, #224]	@ (8015e8c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015daa:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8015dae:	493a      	ldr	r1, [pc, #232]	@ (8015e98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015db0:	4838      	ldr	r0, [pc, #224]	@ (8015e94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015db2:	f000 ff3d 	bl	8016c30 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015db6:	68fb      	ldr	r3, [r7, #12]
 8015db8:	68ba      	ldr	r2, [r7, #8]
 8015dba:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d105      	bne.n	8015dce <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015dc2:	68fb      	ldr	r3, [r7, #12]
 8015dc4:	7f9b      	ldrb	r3, [r3, #30]
 8015dc6:	f003 0301 	and.w	r3, r3, #1
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d059      	beq.n	8015e82 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015dce:	6a3b      	ldr	r3, [r7, #32]
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d04f      	beq.n	8015e74 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015dd4:	68fb      	ldr	r3, [r7, #12]
 8015dd6:	685b      	ldr	r3, [r3, #4]
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d006      	beq.n	8015dea <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015ddc:	68fb      	ldr	r3, [r7, #12]
 8015dde:	685b      	ldr	r3, [r3, #4]
 8015de0:	685b      	ldr	r3, [r3, #4]
 8015de2:	889b      	ldrh	r3, [r3, #4]
 8015de4:	b29b      	uxth	r3, r3
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d002      	beq.n	8015df0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015dea:	2300      	movs	r3, #0
 8015dec:	623b      	str	r3, [r7, #32]
 8015dee:	e041      	b.n	8015e74 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015df2:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8015df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015df6:	681b      	ldr	r3, [r3, #0]
 8015df8:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8015dfa:	e012      	b.n	8015e22 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015dfe:	685b      	ldr	r3, [r3, #4]
 8015e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8015e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e04:	88db      	ldrh	r3, [r3, #6]
 8015e06:	b29a      	uxth	r2, r3
 8015e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e0a:	889b      	ldrh	r3, [r3, #4]
 8015e0c:	b29b      	uxth	r3, r3
 8015e0e:	429a      	cmp	r2, r3
 8015e10:	d002      	beq.n	8015e18 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015e12:	2300      	movs	r3, #0
 8015e14:	623b      	str	r3, [r7, #32]
            break;
 8015e16:	e007      	b.n	8015e28 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8015e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8015e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d1e9      	bne.n	8015dfc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015e28:	6a3b      	ldr	r3, [r7, #32]
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d022      	beq.n	8015e74 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015e2e:	68fb      	ldr	r3, [r7, #12]
 8015e30:	685b      	ldr	r3, [r3, #4]
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d106      	bne.n	8015e44 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015e36:	4b15      	ldr	r3, [pc, #84]	@ (8015e8c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015e38:	f240 12df 	movw	r2, #479	@ 0x1df
 8015e3c:	4917      	ldr	r1, [pc, #92]	@ (8015e9c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015e3e:	4815      	ldr	r0, [pc, #84]	@ (8015e94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015e40:	f000 fef6 	bl	8016c30 <iprintf>
          LWIP_ASSERT("sanity check",
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	685b      	ldr	r3, [r3, #4]
 8015e48:	685b      	ldr	r3, [r3, #4]
 8015e4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015e4c:	429a      	cmp	r2, r3
 8015e4e:	d106      	bne.n	8015e5e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015e50:	4b0e      	ldr	r3, [pc, #56]	@ (8015e8c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015e52:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8015e56:	4911      	ldr	r1, [pc, #68]	@ (8015e9c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015e58:	480e      	ldr	r0, [pc, #56]	@ (8015e94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015e5a:	f000 fee9 	bl	8016c30 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e60:	681b      	ldr	r3, [r3, #0]
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d006      	beq.n	8015e74 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015e66:	4b09      	ldr	r3, [pc, #36]	@ (8015e8c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015e68:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8015e6c:	490c      	ldr	r1, [pc, #48]	@ (8015ea0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015e6e:	4809      	ldr	r0, [pc, #36]	@ (8015e94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015e70:	f000 fede 	bl	8016c30 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015e74:	6a3b      	ldr	r3, [r7, #32]
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	bf14      	ite	ne
 8015e7a:	2301      	movne	r3, #1
 8015e7c:	2300      	moveq	r3, #0
 8015e7e:	b2db      	uxtb	r3, r3
 8015e80:	e000      	b.n	8015e84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015e82:	2300      	movs	r3, #0
}
 8015e84:	4618      	mov	r0, r3
 8015e86:	3730      	adds	r7, #48	@ 0x30
 8015e88:	46bd      	mov	sp, r7
 8015e8a:	bd80      	pop	{r7, pc}
 8015e8c:	0801adc0 	.word	0x0801adc0
 8015e90:	0801aea4 	.word	0x0801aea4
 8015e94:	0801ae08 	.word	0x0801ae08
 8015e98:	0801aec4 	.word	0x0801aec4
 8015e9c:	0801aefc 	.word	0x0801aefc
 8015ea0:	0801af0c 	.word	0x0801af0c

08015ea4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015ea4:	b580      	push	{r7, lr}
 8015ea6:	b08e      	sub	sp, #56	@ 0x38
 8015ea8:	af00      	add	r7, sp, #0
 8015eaa:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	685b      	ldr	r3, [r3, #4]
 8015eb0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015eb4:	781b      	ldrb	r3, [r3, #0]
 8015eb6:	f003 030f 	and.w	r3, r3, #15
 8015eba:	b2db      	uxtb	r3, r3
 8015ebc:	009b      	lsls	r3, r3, #2
 8015ebe:	b2db      	uxtb	r3, r3
 8015ec0:	2b14      	cmp	r3, #20
 8015ec2:	f040 8171 	bne.w	80161a8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ec8:	88db      	ldrh	r3, [r3, #6]
 8015eca:	b29b      	uxth	r3, r3
 8015ecc:	4618      	mov	r0, r3
 8015ece:	f7f5 fccd 	bl	800b86c <lwip_htons>
 8015ed2:	4603      	mov	r3, r0
 8015ed4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015ed8:	b29b      	uxth	r3, r3
 8015eda:	00db      	lsls	r3, r3, #3
 8015edc:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ee0:	885b      	ldrh	r3, [r3, #2]
 8015ee2:	b29b      	uxth	r3, r3
 8015ee4:	4618      	mov	r0, r3
 8015ee6:	f7f5 fcc1 	bl	800b86c <lwip_htons>
 8015eea:	4603      	mov	r3, r0
 8015eec:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ef0:	781b      	ldrb	r3, [r3, #0]
 8015ef2:	f003 030f 	and.w	r3, r3, #15
 8015ef6:	b2db      	uxtb	r3, r3
 8015ef8:	009b      	lsls	r3, r3, #2
 8015efa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8015efe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015f02:	b29b      	uxth	r3, r3
 8015f04:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8015f06:	429a      	cmp	r2, r3
 8015f08:	f0c0 8150 	bcc.w	80161ac <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015f0c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015f10:	b29b      	uxth	r3, r3
 8015f12:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8015f14:	1ad3      	subs	r3, r2, r3
 8015f16:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015f18:	6878      	ldr	r0, [r7, #4]
 8015f1a:	f7f7 f9df 	bl	800d2dc <pbuf_clen>
 8015f1e:	4603      	mov	r3, r0
 8015f20:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015f22:	4b8c      	ldr	r3, [pc, #560]	@ (8016154 <ip4_reass+0x2b0>)
 8015f24:	881b      	ldrh	r3, [r3, #0]
 8015f26:	461a      	mov	r2, r3
 8015f28:	8c3b      	ldrh	r3, [r7, #32]
 8015f2a:	4413      	add	r3, r2
 8015f2c:	2b0a      	cmp	r3, #10
 8015f2e:	dd10      	ble.n	8015f52 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015f30:	8c3b      	ldrh	r3, [r7, #32]
 8015f32:	4619      	mov	r1, r3
 8015f34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015f36:	f7ff fd81 	bl	8015a3c <ip_reass_remove_oldest_datagram>
 8015f3a:	4603      	mov	r3, r0
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	f000 8137 	beq.w	80161b0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015f42:	4b84      	ldr	r3, [pc, #528]	@ (8016154 <ip4_reass+0x2b0>)
 8015f44:	881b      	ldrh	r3, [r3, #0]
 8015f46:	461a      	mov	r2, r3
 8015f48:	8c3b      	ldrh	r3, [r7, #32]
 8015f4a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015f4c:	2b0a      	cmp	r3, #10
 8015f4e:	f300 812f 	bgt.w	80161b0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015f52:	4b81      	ldr	r3, [pc, #516]	@ (8016158 <ip4_reass+0x2b4>)
 8015f54:	681b      	ldr	r3, [r3, #0]
 8015f56:	633b      	str	r3, [r7, #48]	@ 0x30
 8015f58:	e015      	b.n	8015f86 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f5c:	695a      	ldr	r2, [r3, #20]
 8015f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f60:	68db      	ldr	r3, [r3, #12]
 8015f62:	429a      	cmp	r2, r3
 8015f64:	d10c      	bne.n	8015f80 <ip4_reass+0xdc>
 8015f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f68:	699a      	ldr	r2, [r3, #24]
 8015f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f6c:	691b      	ldr	r3, [r3, #16]
 8015f6e:	429a      	cmp	r2, r3
 8015f70:	d106      	bne.n	8015f80 <ip4_reass+0xdc>
 8015f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f74:	899a      	ldrh	r2, [r3, #12]
 8015f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f78:	889b      	ldrh	r3, [r3, #4]
 8015f7a:	b29b      	uxth	r3, r3
 8015f7c:	429a      	cmp	r2, r3
 8015f7e:	d006      	beq.n	8015f8e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	633b      	str	r3, [r7, #48]	@ 0x30
 8015f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d1e6      	bne.n	8015f5a <ip4_reass+0xb6>
 8015f8c:	e000      	b.n	8015f90 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015f8e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d109      	bne.n	8015faa <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015f96:	8c3b      	ldrh	r3, [r7, #32]
 8015f98:	4619      	mov	r1, r3
 8015f9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015f9c:	f7ff fdb0 	bl	8015b00 <ip_reass_enqueue_new_datagram>
 8015fa0:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d11c      	bne.n	8015fe2 <ip4_reass+0x13e>
      goto nullreturn;
 8015fa8:	e105      	b.n	80161b6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015fac:	88db      	ldrh	r3, [r3, #6]
 8015fae:	b29b      	uxth	r3, r3
 8015fb0:	4618      	mov	r0, r3
 8015fb2:	f7f5 fc5b 	bl	800b86c <lwip_htons>
 8015fb6:	4603      	mov	r3, r0
 8015fb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d110      	bne.n	8015fe2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015fc2:	89db      	ldrh	r3, [r3, #14]
 8015fc4:	4618      	mov	r0, r3
 8015fc6:	f7f5 fc51 	bl	800b86c <lwip_htons>
 8015fca:	4603      	mov	r3, r0
 8015fcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d006      	beq.n	8015fe2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015fd6:	3308      	adds	r3, #8
 8015fd8:	2214      	movs	r2, #20
 8015fda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015fdc:	4618      	mov	r0, r3
 8015fde:	f000 ff58 	bl	8016e92 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015fe4:	88db      	ldrh	r3, [r3, #6]
 8015fe6:	b29b      	uxth	r3, r3
 8015fe8:	f003 0320 	and.w	r3, r3, #32
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	bf0c      	ite	eq
 8015ff0:	2301      	moveq	r3, #1
 8015ff2:	2300      	movne	r3, #0
 8015ff4:	b2db      	uxtb	r3, r3
 8015ff6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015ff8:	69fb      	ldr	r3, [r7, #28]
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d00e      	beq.n	801601c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015ffe:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8016000:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016002:	4413      	add	r3, r2
 8016004:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8016006:	8b7a      	ldrh	r2, [r7, #26]
 8016008:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801600a:	429a      	cmp	r2, r3
 801600c:	f0c0 80a0 	bcc.w	8016150 <ip4_reass+0x2ac>
 8016010:	8b7b      	ldrh	r3, [r7, #26]
 8016012:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8016016:	4293      	cmp	r3, r2
 8016018:	f200 809a 	bhi.w	8016150 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801601c:	69fa      	ldr	r2, [r7, #28]
 801601e:	6879      	ldr	r1, [r7, #4]
 8016020:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016022:	f7ff fdd5 	bl	8015bd0 <ip_reass_chain_frag_into_datagram_and_validate>
 8016026:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016028:	697b      	ldr	r3, [r7, #20]
 801602a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801602e:	f000 809b 	beq.w	8016168 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016032:	4b48      	ldr	r3, [pc, #288]	@ (8016154 <ip4_reass+0x2b0>)
 8016034:	881a      	ldrh	r2, [r3, #0]
 8016036:	8c3b      	ldrh	r3, [r7, #32]
 8016038:	4413      	add	r3, r2
 801603a:	b29a      	uxth	r2, r3
 801603c:	4b45      	ldr	r3, [pc, #276]	@ (8016154 <ip4_reass+0x2b0>)
 801603e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016040:	69fb      	ldr	r3, [r7, #28]
 8016042:	2b00      	cmp	r3, #0
 8016044:	d00d      	beq.n	8016062 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8016046:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8016048:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801604a:	4413      	add	r3, r2
 801604c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801604e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016050:	8a7a      	ldrh	r2, [r7, #18]
 8016052:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016056:	7f9b      	ldrb	r3, [r3, #30]
 8016058:	f043 0301 	orr.w	r3, r3, #1
 801605c:	b2da      	uxtb	r2, r3
 801605e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016060:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016062:	697b      	ldr	r3, [r7, #20]
 8016064:	2b01      	cmp	r3, #1
 8016066:	d171      	bne.n	801614c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801606a:	8b9b      	ldrh	r3, [r3, #28]
 801606c:	3314      	adds	r3, #20
 801606e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016072:	685b      	ldr	r3, [r3, #4]
 8016074:	685b      	ldr	r3, [r3, #4]
 8016076:	681b      	ldr	r3, [r3, #0]
 8016078:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801607a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801607c:	685b      	ldr	r3, [r3, #4]
 801607e:	685b      	ldr	r3, [r3, #4]
 8016080:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016084:	3308      	adds	r3, #8
 8016086:	2214      	movs	r2, #20
 8016088:	4619      	mov	r1, r3
 801608a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801608c:	f000 ff01 	bl	8016e92 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016090:	8a3b      	ldrh	r3, [r7, #16]
 8016092:	4618      	mov	r0, r3
 8016094:	f7f5 fbea 	bl	800b86c <lwip_htons>
 8016098:	4603      	mov	r3, r0
 801609a:	461a      	mov	r2, r3
 801609c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801609e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80160a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80160a2:	2200      	movs	r2, #0
 80160a4:	719a      	strb	r2, [r3, #6]
 80160a6:	2200      	movs	r2, #0
 80160a8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80160aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80160ac:	2200      	movs	r2, #0
 80160ae:	729a      	strb	r2, [r3, #10]
 80160b0:	2200      	movs	r2, #0
 80160b2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80160b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80160b6:	685b      	ldr	r3, [r3, #4]
 80160b8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80160ba:	e00d      	b.n	80160d8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80160bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80160be:	685b      	ldr	r3, [r3, #4]
 80160c0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80160c2:	2114      	movs	r1, #20
 80160c4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80160c6:	f7f6 fff5 	bl	800d0b4 <pbuf_remove_header>
      pbuf_cat(p, r);
 80160ca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80160cc:	6878      	ldr	r0, [r7, #4]
 80160ce:	f7f7 f945 	bl	800d35c <pbuf_cat>
      r = iprh->next_pbuf;
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	681b      	ldr	r3, [r3, #0]
 80160d6:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 80160d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d1ee      	bne.n	80160bc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80160de:	4b1e      	ldr	r3, [pc, #120]	@ (8016158 <ip4_reass+0x2b4>)
 80160e0:	681b      	ldr	r3, [r3, #0]
 80160e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80160e4:	429a      	cmp	r2, r3
 80160e6:	d102      	bne.n	80160ee <ip4_reass+0x24a>
      ipr_prev = NULL;
 80160e8:	2300      	movs	r3, #0
 80160ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80160ec:	e010      	b.n	8016110 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80160ee:	4b1a      	ldr	r3, [pc, #104]	@ (8016158 <ip4_reass+0x2b4>)
 80160f0:	681b      	ldr	r3, [r3, #0]
 80160f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80160f4:	e007      	b.n	8016106 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80160f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160f8:	681b      	ldr	r3, [r3, #0]
 80160fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80160fc:	429a      	cmp	r2, r3
 80160fe:	d006      	beq.n	801610e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016108:	2b00      	cmp	r3, #0
 801610a:	d1f4      	bne.n	80160f6 <ip4_reass+0x252>
 801610c:	e000      	b.n	8016110 <ip4_reass+0x26c>
          break;
 801610e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016110:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016112:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016114:	f7ff fd2e 	bl	8015b74 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016118:	6878      	ldr	r0, [r7, #4]
 801611a:	f7f7 f8df 	bl	800d2dc <pbuf_clen>
 801611e:	4603      	mov	r3, r0
 8016120:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016122:	4b0c      	ldr	r3, [pc, #48]	@ (8016154 <ip4_reass+0x2b0>)
 8016124:	881b      	ldrh	r3, [r3, #0]
 8016126:	8c3a      	ldrh	r2, [r7, #32]
 8016128:	429a      	cmp	r2, r3
 801612a:	d906      	bls.n	801613a <ip4_reass+0x296>
 801612c:	4b0b      	ldr	r3, [pc, #44]	@ (801615c <ip4_reass+0x2b8>)
 801612e:	f240 229b 	movw	r2, #667	@ 0x29b
 8016132:	490b      	ldr	r1, [pc, #44]	@ (8016160 <ip4_reass+0x2bc>)
 8016134:	480b      	ldr	r0, [pc, #44]	@ (8016164 <ip4_reass+0x2c0>)
 8016136:	f000 fd7b 	bl	8016c30 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801613a:	4b06      	ldr	r3, [pc, #24]	@ (8016154 <ip4_reass+0x2b0>)
 801613c:	881a      	ldrh	r2, [r3, #0]
 801613e:	8c3b      	ldrh	r3, [r7, #32]
 8016140:	1ad3      	subs	r3, r2, r3
 8016142:	b29a      	uxth	r2, r3
 8016144:	4b03      	ldr	r3, [pc, #12]	@ (8016154 <ip4_reass+0x2b0>)
 8016146:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	e038      	b.n	80161be <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801614c:	2300      	movs	r3, #0
 801614e:	e036      	b.n	80161be <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8016150:	bf00      	nop
 8016152:	e00a      	b.n	801616a <ip4_reass+0x2c6>
 8016154:	2400805c 	.word	0x2400805c
 8016158:	24008058 	.word	0x24008058
 801615c:	0801adc0 	.word	0x0801adc0
 8016160:	0801af30 	.word	0x0801af30
 8016164:	0801ae08 	.word	0x0801ae08
    goto nullreturn_ipr;
 8016168:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801616a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801616c:	2b00      	cmp	r3, #0
 801616e:	d106      	bne.n	801617e <ip4_reass+0x2da>
 8016170:	4b15      	ldr	r3, [pc, #84]	@ (80161c8 <ip4_reass+0x324>)
 8016172:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8016176:	4915      	ldr	r1, [pc, #84]	@ (80161cc <ip4_reass+0x328>)
 8016178:	4815      	ldr	r0, [pc, #84]	@ (80161d0 <ip4_reass+0x32c>)
 801617a:	f000 fd59 	bl	8016c30 <iprintf>
  if (ipr->p == NULL) {
 801617e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016180:	685b      	ldr	r3, [r3, #4]
 8016182:	2b00      	cmp	r3, #0
 8016184:	d116      	bne.n	80161b4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016186:	4b13      	ldr	r3, [pc, #76]	@ (80161d4 <ip4_reass+0x330>)
 8016188:	681b      	ldr	r3, [r3, #0]
 801618a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801618c:	429a      	cmp	r2, r3
 801618e:	d006      	beq.n	801619e <ip4_reass+0x2fa>
 8016190:	4b0d      	ldr	r3, [pc, #52]	@ (80161c8 <ip4_reass+0x324>)
 8016192:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8016196:	4910      	ldr	r1, [pc, #64]	@ (80161d8 <ip4_reass+0x334>)
 8016198:	480d      	ldr	r0, [pc, #52]	@ (80161d0 <ip4_reass+0x32c>)
 801619a:	f000 fd49 	bl	8016c30 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801619e:	2100      	movs	r1, #0
 80161a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80161a2:	f7ff fce7 	bl	8015b74 <ip_reass_dequeue_datagram>
 80161a6:	e006      	b.n	80161b6 <ip4_reass+0x312>
    goto nullreturn;
 80161a8:	bf00      	nop
 80161aa:	e004      	b.n	80161b6 <ip4_reass+0x312>
    goto nullreturn;
 80161ac:	bf00      	nop
 80161ae:	e002      	b.n	80161b6 <ip4_reass+0x312>
      goto nullreturn;
 80161b0:	bf00      	nop
 80161b2:	e000      	b.n	80161b6 <ip4_reass+0x312>
  }

nullreturn:
 80161b4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80161b6:	6878      	ldr	r0, [r7, #4]
 80161b8:	f7f7 f802 	bl	800d1c0 <pbuf_free>
  return NULL;
 80161bc:	2300      	movs	r3, #0
}
 80161be:	4618      	mov	r0, r3
 80161c0:	3738      	adds	r7, #56	@ 0x38
 80161c2:	46bd      	mov	sp, r7
 80161c4:	bd80      	pop	{r7, pc}
 80161c6:	bf00      	nop
 80161c8:	0801adc0 	.word	0x0801adc0
 80161cc:	0801af4c 	.word	0x0801af4c
 80161d0:	0801ae08 	.word	0x0801ae08
 80161d4:	24008058 	.word	0x24008058
 80161d8:	0801af58 	.word	0x0801af58

080161dc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80161dc:	b580      	push	{r7, lr}
 80161de:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80161e0:	2005      	movs	r0, #5
 80161e2:	f7f6 f8d3 	bl	800c38c <memp_malloc>
 80161e6:	4603      	mov	r3, r0
}
 80161e8:	4618      	mov	r0, r3
 80161ea:	bd80      	pop	{r7, pc}

080161ec <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80161ec:	b580      	push	{r7, lr}
 80161ee:	b082      	sub	sp, #8
 80161f0:	af00      	add	r7, sp, #0
 80161f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d106      	bne.n	8016208 <ip_frag_free_pbuf_custom_ref+0x1c>
 80161fa:	4b07      	ldr	r3, [pc, #28]	@ (8016218 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80161fc:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8016200:	4906      	ldr	r1, [pc, #24]	@ (801621c <ip_frag_free_pbuf_custom_ref+0x30>)
 8016202:	4807      	ldr	r0, [pc, #28]	@ (8016220 <ip_frag_free_pbuf_custom_ref+0x34>)
 8016204:	f000 fd14 	bl	8016c30 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016208:	6879      	ldr	r1, [r7, #4]
 801620a:	2005      	movs	r0, #5
 801620c:	f7f6 f934 	bl	800c478 <memp_free>
}
 8016210:	bf00      	nop
 8016212:	3708      	adds	r7, #8
 8016214:	46bd      	mov	sp, r7
 8016216:	bd80      	pop	{r7, pc}
 8016218:	0801adc0 	.word	0x0801adc0
 801621c:	0801af78 	.word	0x0801af78
 8016220:	0801ae08 	.word	0x0801ae08

08016224 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016224:	b580      	push	{r7, lr}
 8016226:	b084      	sub	sp, #16
 8016228:	af00      	add	r7, sp, #0
 801622a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016230:	68fb      	ldr	r3, [r7, #12]
 8016232:	2b00      	cmp	r3, #0
 8016234:	d106      	bne.n	8016244 <ipfrag_free_pbuf_custom+0x20>
 8016236:	4b11      	ldr	r3, [pc, #68]	@ (801627c <ipfrag_free_pbuf_custom+0x58>)
 8016238:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801623c:	4910      	ldr	r1, [pc, #64]	@ (8016280 <ipfrag_free_pbuf_custom+0x5c>)
 801623e:	4811      	ldr	r0, [pc, #68]	@ (8016284 <ipfrag_free_pbuf_custom+0x60>)
 8016240:	f000 fcf6 	bl	8016c30 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016244:	68fa      	ldr	r2, [r7, #12]
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	429a      	cmp	r2, r3
 801624a:	d006      	beq.n	801625a <ipfrag_free_pbuf_custom+0x36>
 801624c:	4b0b      	ldr	r3, [pc, #44]	@ (801627c <ipfrag_free_pbuf_custom+0x58>)
 801624e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8016252:	490d      	ldr	r1, [pc, #52]	@ (8016288 <ipfrag_free_pbuf_custom+0x64>)
 8016254:	480b      	ldr	r0, [pc, #44]	@ (8016284 <ipfrag_free_pbuf_custom+0x60>)
 8016256:	f000 fceb 	bl	8016c30 <iprintf>
  if (pcr->original != NULL) {
 801625a:	68fb      	ldr	r3, [r7, #12]
 801625c:	695b      	ldr	r3, [r3, #20]
 801625e:	2b00      	cmp	r3, #0
 8016260:	d004      	beq.n	801626c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016262:	68fb      	ldr	r3, [r7, #12]
 8016264:	695b      	ldr	r3, [r3, #20]
 8016266:	4618      	mov	r0, r3
 8016268:	f7f6 ffaa 	bl	800d1c0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801626c:	68f8      	ldr	r0, [r7, #12]
 801626e:	f7ff ffbd 	bl	80161ec <ip_frag_free_pbuf_custom_ref>
}
 8016272:	bf00      	nop
 8016274:	3710      	adds	r7, #16
 8016276:	46bd      	mov	sp, r7
 8016278:	bd80      	pop	{r7, pc}
 801627a:	bf00      	nop
 801627c:	0801adc0 	.word	0x0801adc0
 8016280:	0801af84 	.word	0x0801af84
 8016284:	0801ae08 	.word	0x0801ae08
 8016288:	0801af90 	.word	0x0801af90

0801628c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801628c:	b580      	push	{r7, lr}
 801628e:	b094      	sub	sp, #80	@ 0x50
 8016290:	af02      	add	r7, sp, #8
 8016292:	60f8      	str	r0, [r7, #12]
 8016294:	60b9      	str	r1, [r7, #8]
 8016296:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016298:	2300      	movs	r3, #0
 801629a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801629e:	68bb      	ldr	r3, [r7, #8]
 80162a0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80162a2:	3b14      	subs	r3, #20
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	da00      	bge.n	80162aa <ip4_frag+0x1e>
 80162a8:	3307      	adds	r3, #7
 80162aa:	10db      	asrs	r3, r3, #3
 80162ac:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80162ae:	2314      	movs	r3, #20
 80162b0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	685b      	ldr	r3, [r3, #4]
 80162b6:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 80162b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80162ba:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80162bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162be:	781b      	ldrb	r3, [r3, #0]
 80162c0:	f003 030f 	and.w	r3, r3, #15
 80162c4:	b2db      	uxtb	r3, r3
 80162c6:	009b      	lsls	r3, r3, #2
 80162c8:	b2db      	uxtb	r3, r3
 80162ca:	2b14      	cmp	r3, #20
 80162cc:	d002      	beq.n	80162d4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80162ce:	f06f 0305 	mvn.w	r3, #5
 80162d2:	e110      	b.n	80164f6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	895b      	ldrh	r3, [r3, #10]
 80162d8:	2b13      	cmp	r3, #19
 80162da:	d809      	bhi.n	80162f0 <ip4_frag+0x64>
 80162dc:	4b88      	ldr	r3, [pc, #544]	@ (8016500 <ip4_frag+0x274>)
 80162de:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 80162e2:	4988      	ldr	r1, [pc, #544]	@ (8016504 <ip4_frag+0x278>)
 80162e4:	4888      	ldr	r0, [pc, #544]	@ (8016508 <ip4_frag+0x27c>)
 80162e6:	f000 fca3 	bl	8016c30 <iprintf>
 80162ea:	f06f 0305 	mvn.w	r3, #5
 80162ee:	e102      	b.n	80164f6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80162f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162f2:	88db      	ldrh	r3, [r3, #6]
 80162f4:	b29b      	uxth	r3, r3
 80162f6:	4618      	mov	r0, r3
 80162f8:	f7f5 fab8 	bl	800b86c <lwip_htons>
 80162fc:	4603      	mov	r3, r0
 80162fe:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8016300:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016302:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016306:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801630a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801630c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8016310:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016312:	68fb      	ldr	r3, [r7, #12]
 8016314:	891b      	ldrh	r3, [r3, #8]
 8016316:	3b14      	subs	r3, #20
 8016318:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801631c:	e0e1      	b.n	80164e2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801631e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016320:	00db      	lsls	r3, r3, #3
 8016322:	b29b      	uxth	r3, r3
 8016324:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016328:	4293      	cmp	r3, r2
 801632a:	bf28      	it	cs
 801632c:	4613      	movcs	r3, r2
 801632e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016330:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016334:	2114      	movs	r1, #20
 8016336:	200e      	movs	r0, #14
 8016338:	f7f6 fc5e 	bl	800cbf8 <pbuf_alloc>
 801633c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801633e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016340:	2b00      	cmp	r3, #0
 8016342:	f000 80d5 	beq.w	80164f0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016348:	895b      	ldrh	r3, [r3, #10]
 801634a:	2b13      	cmp	r3, #19
 801634c:	d806      	bhi.n	801635c <ip4_frag+0xd0>
 801634e:	4b6c      	ldr	r3, [pc, #432]	@ (8016500 <ip4_frag+0x274>)
 8016350:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8016354:	496d      	ldr	r1, [pc, #436]	@ (801650c <ip4_frag+0x280>)
 8016356:	486c      	ldr	r0, [pc, #432]	@ (8016508 <ip4_frag+0x27c>)
 8016358:	f000 fc6a 	bl	8016c30 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801635c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801635e:	685b      	ldr	r3, [r3, #4]
 8016360:	2214      	movs	r2, #20
 8016362:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8016364:	4618      	mov	r0, r3
 8016366:	f000 fd94 	bl	8016e92 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801636a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801636c:	685b      	ldr	r3, [r3, #4]
 801636e:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8016370:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016372:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8016376:	e064      	b.n	8016442 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016378:	68fb      	ldr	r3, [r7, #12]
 801637a:	895a      	ldrh	r2, [r3, #10]
 801637c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801637e:	1ad3      	subs	r3, r2, r3
 8016380:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016382:	68fb      	ldr	r3, [r7, #12]
 8016384:	895b      	ldrh	r3, [r3, #10]
 8016386:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8016388:	429a      	cmp	r2, r3
 801638a:	d906      	bls.n	801639a <ip4_frag+0x10e>
 801638c:	4b5c      	ldr	r3, [pc, #368]	@ (8016500 <ip4_frag+0x274>)
 801638e:	f240 322d 	movw	r2, #813	@ 0x32d
 8016392:	495f      	ldr	r1, [pc, #380]	@ (8016510 <ip4_frag+0x284>)
 8016394:	485c      	ldr	r0, [pc, #368]	@ (8016508 <ip4_frag+0x27c>)
 8016396:	f000 fc4b 	bl	8016c30 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801639a:	8bfa      	ldrh	r2, [r7, #30]
 801639c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80163a0:	4293      	cmp	r3, r2
 80163a2:	bf28      	it	cs
 80163a4:	4613      	movcs	r3, r2
 80163a6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80163aa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d105      	bne.n	80163be <ip4_frag+0x132>
        poff = 0;
 80163b2:	2300      	movs	r3, #0
 80163b4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80163b6:	68fb      	ldr	r3, [r7, #12]
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	60fb      	str	r3, [r7, #12]
        continue;
 80163bc:	e041      	b.n	8016442 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80163be:	f7ff ff0d 	bl	80161dc <ip_frag_alloc_pbuf_custom_ref>
 80163c2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80163c4:	69bb      	ldr	r3, [r7, #24]
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d103      	bne.n	80163d2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80163ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80163cc:	f7f6 fef8 	bl	800d1c0 <pbuf_free>
        goto memerr;
 80163d0:	e08f      	b.n	80164f2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80163d2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80163d4:	68fb      	ldr	r3, [r7, #12]
 80163d6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80163d8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80163da:	4413      	add	r3, r2
 80163dc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80163e0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80163e4:	9201      	str	r2, [sp, #4]
 80163e6:	9300      	str	r3, [sp, #0]
 80163e8:	4603      	mov	r3, r0
 80163ea:	2241      	movs	r2, #65	@ 0x41
 80163ec:	2000      	movs	r0, #0
 80163ee:	f7f6 fd2d 	bl	800ce4c <pbuf_alloced_custom>
 80163f2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80163f4:	697b      	ldr	r3, [r7, #20]
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d106      	bne.n	8016408 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80163fa:	69b8      	ldr	r0, [r7, #24]
 80163fc:	f7ff fef6 	bl	80161ec <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016400:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016402:	f7f6 fedd 	bl	800d1c0 <pbuf_free>
        goto memerr;
 8016406:	e074      	b.n	80164f2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016408:	68f8      	ldr	r0, [r7, #12]
 801640a:	f7f6 ff7f 	bl	800d30c <pbuf_ref>
      pcr->original = p;
 801640e:	69bb      	ldr	r3, [r7, #24]
 8016410:	68fa      	ldr	r2, [r7, #12]
 8016412:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016414:	69bb      	ldr	r3, [r7, #24]
 8016416:	4a3f      	ldr	r2, [pc, #252]	@ (8016514 <ip4_frag+0x288>)
 8016418:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801641a:	6979      	ldr	r1, [r7, #20]
 801641c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801641e:	f7f6 ff9d 	bl	800d35c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016422:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8016426:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801642a:	1ad3      	subs	r3, r2, r3
 801642c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8016430:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8016434:	2b00      	cmp	r3, #0
 8016436:	d004      	beq.n	8016442 <ip4_frag+0x1b6>
        poff = 0;
 8016438:	2300      	movs	r3, #0
 801643a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801643c:	68fb      	ldr	r3, [r7, #12]
 801643e:	681b      	ldr	r3, [r3, #0]
 8016440:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016442:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8016446:	2b00      	cmp	r3, #0
 8016448:	d196      	bne.n	8016378 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801644a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801644c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016450:	4413      	add	r3, r2
 8016452:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016454:	68bb      	ldr	r3, [r7, #8]
 8016456:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8016458:	f1a3 0213 	sub.w	r2, r3, #19
 801645c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016460:	429a      	cmp	r2, r3
 8016462:	bfcc      	ite	gt
 8016464:	2301      	movgt	r3, #1
 8016466:	2300      	movle	r3, #0
 8016468:	b2db      	uxtb	r3, r3
 801646a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801646c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016470:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016474:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8016476:	6a3b      	ldr	r3, [r7, #32]
 8016478:	2b00      	cmp	r3, #0
 801647a:	d002      	beq.n	8016482 <ip4_frag+0x1f6>
 801647c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801647e:	2b00      	cmp	r3, #0
 8016480:	d003      	beq.n	801648a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016482:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016484:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8016488:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801648a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801648c:	4618      	mov	r0, r3
 801648e:	f7f5 f9ed 	bl	800b86c <lwip_htons>
 8016492:	4603      	mov	r3, r0
 8016494:	461a      	mov	r2, r3
 8016496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016498:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801649a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801649c:	3314      	adds	r3, #20
 801649e:	b29b      	uxth	r3, r3
 80164a0:	4618      	mov	r0, r3
 80164a2:	f7f5 f9e3 	bl	800b86c <lwip_htons>
 80164a6:	4603      	mov	r3, r0
 80164a8:	461a      	mov	r2, r3
 80164aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80164ac:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80164ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80164b0:	2200      	movs	r2, #0
 80164b2:	729a      	strb	r2, [r3, #10]
 80164b4:	2200      	movs	r2, #0
 80164b6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80164b8:	68bb      	ldr	r3, [r7, #8]
 80164ba:	695b      	ldr	r3, [r3, #20]
 80164bc:	687a      	ldr	r2, [r7, #4]
 80164be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80164c0:	68b8      	ldr	r0, [r7, #8]
 80164c2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80164c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80164c6:	f7f6 fe7b 	bl	800d1c0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80164ca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80164ce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80164d0:	1ad3      	subs	r3, r2, r3
 80164d2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 80164d6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80164da:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80164dc:	4413      	add	r3, r2
 80164de:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 80164e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	f47f af19 	bne.w	801631e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80164ec:	2300      	movs	r3, #0
 80164ee:	e002      	b.n	80164f6 <ip4_frag+0x26a>
      goto memerr;
 80164f0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80164f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80164f6:	4618      	mov	r0, r3
 80164f8:	3748      	adds	r7, #72	@ 0x48
 80164fa:	46bd      	mov	sp, r7
 80164fc:	bd80      	pop	{r7, pc}
 80164fe:	bf00      	nop
 8016500:	0801adc0 	.word	0x0801adc0
 8016504:	0801af9c 	.word	0x0801af9c
 8016508:	0801ae08 	.word	0x0801ae08
 801650c:	0801afb8 	.word	0x0801afb8
 8016510:	0801afd8 	.word	0x0801afd8
 8016514:	08016225 	.word	0x08016225

08016518 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016518:	b580      	push	{r7, lr}
 801651a:	b086      	sub	sp, #24
 801651c:	af00      	add	r7, sp, #0
 801651e:	6078      	str	r0, [r7, #4]
 8016520:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016522:	230e      	movs	r3, #14
 8016524:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	895b      	ldrh	r3, [r3, #10]
 801652a:	2b0e      	cmp	r3, #14
 801652c:	d96e      	bls.n	801660c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	7bdb      	ldrb	r3, [r3, #15]
 8016532:	2b00      	cmp	r3, #0
 8016534:	d106      	bne.n	8016544 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016536:	683b      	ldr	r3, [r7, #0]
 8016538:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801653c:	3301      	adds	r3, #1
 801653e:	b2da      	uxtb	r2, r3
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	685b      	ldr	r3, [r3, #4]
 8016548:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801654a:	693b      	ldr	r3, [r7, #16]
 801654c:	7b1a      	ldrb	r2, [r3, #12]
 801654e:	7b5b      	ldrb	r3, [r3, #13]
 8016550:	021b      	lsls	r3, r3, #8
 8016552:	4313      	orrs	r3, r2
 8016554:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016556:	693b      	ldr	r3, [r7, #16]
 8016558:	781b      	ldrb	r3, [r3, #0]
 801655a:	f003 0301 	and.w	r3, r3, #1
 801655e:	2b00      	cmp	r3, #0
 8016560:	d023      	beq.n	80165aa <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016562:	693b      	ldr	r3, [r7, #16]
 8016564:	781b      	ldrb	r3, [r3, #0]
 8016566:	2b01      	cmp	r3, #1
 8016568:	d10f      	bne.n	801658a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801656a:	693b      	ldr	r3, [r7, #16]
 801656c:	785b      	ldrb	r3, [r3, #1]
 801656e:	2b00      	cmp	r3, #0
 8016570:	d11b      	bne.n	80165aa <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016572:	693b      	ldr	r3, [r7, #16]
 8016574:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016576:	2b5e      	cmp	r3, #94	@ 0x5e
 8016578:	d117      	bne.n	80165aa <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	7b5b      	ldrb	r3, [r3, #13]
 801657e:	f043 0310 	orr.w	r3, r3, #16
 8016582:	b2da      	uxtb	r2, r3
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	735a      	strb	r2, [r3, #13]
 8016588:	e00f      	b.n	80165aa <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801658a:	693b      	ldr	r3, [r7, #16]
 801658c:	2206      	movs	r2, #6
 801658e:	4928      	ldr	r1, [pc, #160]	@ (8016630 <ethernet_input+0x118>)
 8016590:	4618      	mov	r0, r3
 8016592:	f000 fba2 	bl	8016cda <memcmp>
 8016596:	4603      	mov	r3, r0
 8016598:	2b00      	cmp	r3, #0
 801659a:	d106      	bne.n	80165aa <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	7b5b      	ldrb	r3, [r3, #13]
 80165a0:	f043 0308 	orr.w	r3, r3, #8
 80165a4:	b2da      	uxtb	r2, r3
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80165aa:	89fb      	ldrh	r3, [r7, #14]
 80165ac:	2b08      	cmp	r3, #8
 80165ae:	d003      	beq.n	80165b8 <ethernet_input+0xa0>
 80165b0:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 80165b4:	d014      	beq.n	80165e0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80165b6:	e032      	b.n	801661e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80165b8:	683b      	ldr	r3, [r7, #0]
 80165ba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80165be:	f003 0308 	and.w	r3, r3, #8
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d024      	beq.n	8016610 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80165c6:	8afb      	ldrh	r3, [r7, #22]
 80165c8:	4619      	mov	r1, r3
 80165ca:	6878      	ldr	r0, [r7, #4]
 80165cc:	f7f6 fd72 	bl	800d0b4 <pbuf_remove_header>
 80165d0:	4603      	mov	r3, r0
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	d11e      	bne.n	8016614 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80165d6:	6839      	ldr	r1, [r7, #0]
 80165d8:	6878      	ldr	r0, [r7, #4]
 80165da:	f7fe ff21 	bl	8015420 <ip4_input>
      break;
 80165de:	e013      	b.n	8016608 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80165e0:	683b      	ldr	r3, [r7, #0]
 80165e2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80165e6:	f003 0308 	and.w	r3, r3, #8
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d014      	beq.n	8016618 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80165ee:	8afb      	ldrh	r3, [r7, #22]
 80165f0:	4619      	mov	r1, r3
 80165f2:	6878      	ldr	r0, [r7, #4]
 80165f4:	f7f6 fd5e 	bl	800d0b4 <pbuf_remove_header>
 80165f8:	4603      	mov	r3, r0
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d10e      	bne.n	801661c <ethernet_input+0x104>
        etharp_input(p, netif);
 80165fe:	6839      	ldr	r1, [r7, #0]
 8016600:	6878      	ldr	r0, [r7, #4]
 8016602:	f7fe f89b 	bl	801473c <etharp_input>
      break;
 8016606:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016608:	2300      	movs	r3, #0
 801660a:	e00c      	b.n	8016626 <ethernet_input+0x10e>
    goto free_and_return;
 801660c:	bf00      	nop
 801660e:	e006      	b.n	801661e <ethernet_input+0x106>
        goto free_and_return;
 8016610:	bf00      	nop
 8016612:	e004      	b.n	801661e <ethernet_input+0x106>
        goto free_and_return;
 8016614:	bf00      	nop
 8016616:	e002      	b.n	801661e <ethernet_input+0x106>
        goto free_and_return;
 8016618:	bf00      	nop
 801661a:	e000      	b.n	801661e <ethernet_input+0x106>
        goto free_and_return;
 801661c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801661e:	6878      	ldr	r0, [r7, #4]
 8016620:	f7f6 fdce 	bl	800d1c0 <pbuf_free>
  return ERR_OK;
 8016624:	2300      	movs	r3, #0
}
 8016626:	4618      	mov	r0, r3
 8016628:	3718      	adds	r7, #24
 801662a:	46bd      	mov	sp, r7
 801662c:	bd80      	pop	{r7, pc}
 801662e:	bf00      	nop
 8016630:	0801b1d4 	.word	0x0801b1d4

08016634 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016634:	b580      	push	{r7, lr}
 8016636:	b086      	sub	sp, #24
 8016638:	af00      	add	r7, sp, #0
 801663a:	60f8      	str	r0, [r7, #12]
 801663c:	60b9      	str	r1, [r7, #8]
 801663e:	607a      	str	r2, [r7, #4]
 8016640:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016642:	8c3b      	ldrh	r3, [r7, #32]
 8016644:	4618      	mov	r0, r3
 8016646:	f7f5 f911 	bl	800b86c <lwip_htons>
 801664a:	4603      	mov	r3, r0
 801664c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801664e:	210e      	movs	r1, #14
 8016650:	68b8      	ldr	r0, [r7, #8]
 8016652:	f7f6 fd1f 	bl	800d094 <pbuf_add_header>
 8016656:	4603      	mov	r3, r0
 8016658:	2b00      	cmp	r3, #0
 801665a:	d125      	bne.n	80166a8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801665c:	68bb      	ldr	r3, [r7, #8]
 801665e:	685b      	ldr	r3, [r3, #4]
 8016660:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016662:	693b      	ldr	r3, [r7, #16]
 8016664:	8afa      	ldrh	r2, [r7, #22]
 8016666:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016668:	693b      	ldr	r3, [r7, #16]
 801666a:	2206      	movs	r2, #6
 801666c:	6839      	ldr	r1, [r7, #0]
 801666e:	4618      	mov	r0, r3
 8016670:	f000 fc0f 	bl	8016e92 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016674:	693b      	ldr	r3, [r7, #16]
 8016676:	3306      	adds	r3, #6
 8016678:	2206      	movs	r2, #6
 801667a:	6879      	ldr	r1, [r7, #4]
 801667c:	4618      	mov	r0, r3
 801667e:	f000 fc08 	bl	8016e92 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016682:	68fb      	ldr	r3, [r7, #12]
 8016684:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8016688:	2b06      	cmp	r3, #6
 801668a:	d006      	beq.n	801669a <ethernet_output+0x66>
 801668c:	4b0a      	ldr	r3, [pc, #40]	@ (80166b8 <ethernet_output+0x84>)
 801668e:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8016692:	490a      	ldr	r1, [pc, #40]	@ (80166bc <ethernet_output+0x88>)
 8016694:	480a      	ldr	r0, [pc, #40]	@ (80166c0 <ethernet_output+0x8c>)
 8016696:	f000 facb 	bl	8016c30 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801669a:	68fb      	ldr	r3, [r7, #12]
 801669c:	699b      	ldr	r3, [r3, #24]
 801669e:	68b9      	ldr	r1, [r7, #8]
 80166a0:	68f8      	ldr	r0, [r7, #12]
 80166a2:	4798      	blx	r3
 80166a4:	4603      	mov	r3, r0
 80166a6:	e002      	b.n	80166ae <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80166a8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80166aa:	f06f 0301 	mvn.w	r3, #1
}
 80166ae:	4618      	mov	r0, r3
 80166b0:	3718      	adds	r7, #24
 80166b2:	46bd      	mov	sp, r7
 80166b4:	bd80      	pop	{r7, pc}
 80166b6:	bf00      	nop
 80166b8:	0801afe8 	.word	0x0801afe8
 80166bc:	0801b020 	.word	0x0801b020
 80166c0:	0801b054 	.word	0x0801b054

080166c4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80166c4:	b580      	push	{r7, lr}
 80166c6:	b082      	sub	sp, #8
 80166c8:	af00      	add	r7, sp, #0
 80166ca:	6078      	str	r0, [r7, #4]
 80166cc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 80166ce:	683b      	ldr	r3, [r7, #0]
 80166d0:	2200      	movs	r2, #0
 80166d2:	2104      	movs	r1, #4
 80166d4:	4618      	mov	r0, r3
 80166d6:	f7ef fd27 	bl	8006128 <osMessageQueueNew>
 80166da:	4602      	mov	r2, r0
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	681b      	ldr	r3, [r3, #0]
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d102      	bne.n	80166ee <sys_mbox_new+0x2a>
    return ERR_MEM;
 80166e8:	f04f 33ff 	mov.w	r3, #4294967295
 80166ec:	e000      	b.n	80166f0 <sys_mbox_new+0x2c>

  return ERR_OK;
 80166ee:	2300      	movs	r3, #0
}
 80166f0:	4618      	mov	r0, r3
 80166f2:	3708      	adds	r7, #8
 80166f4:	46bd      	mov	sp, r7
 80166f6:	bd80      	pop	{r7, pc}

080166f8 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 80166f8:	b580      	push	{r7, lr}
 80166fa:	b082      	sub	sp, #8
 80166fc:	af00      	add	r7, sp, #0
 80166fe:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	681b      	ldr	r3, [r3, #0]
 8016704:	4618      	mov	r0, r3
 8016706:	f7ef fe41 	bl	800638c <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	4618      	mov	r0, r3
 8016710:	f7ef fe5c 	bl	80063cc <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8016714:	bf00      	nop
 8016716:	3708      	adds	r7, #8
 8016718:	46bd      	mov	sp, r7
 801671a:	bd80      	pop	{r7, pc}

0801671c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801671c:	b580      	push	{r7, lr}
 801671e:	b084      	sub	sp, #16
 8016720:	af00      	add	r7, sp, #0
 8016722:	6078      	str	r0, [r7, #4]
 8016724:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	6818      	ldr	r0, [r3, #0]
 801672a:	4639      	mov	r1, r7
 801672c:	2300      	movs	r3, #0
 801672e:	2200      	movs	r2, #0
 8016730:	f7ef fd6e 	bl	8006210 <osMessageQueuePut>
 8016734:	4603      	mov	r3, r0
 8016736:	2b00      	cmp	r3, #0
 8016738:	d102      	bne.n	8016740 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801673a:	2300      	movs	r3, #0
 801673c:	73fb      	strb	r3, [r7, #15]
 801673e:	e001      	b.n	8016744 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8016740:	23ff      	movs	r3, #255	@ 0xff
 8016742:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8016744:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016748:	4618      	mov	r0, r3
 801674a:	3710      	adds	r7, #16
 801674c:	46bd      	mov	sp, r7
 801674e:	bd80      	pop	{r7, pc}

08016750 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8016750:	b580      	push	{r7, lr}
 8016752:	b086      	sub	sp, #24
 8016754:	af00      	add	r7, sp, #0
 8016756:	60f8      	str	r0, [r7, #12]
 8016758:	60b9      	str	r1, [r7, #8]
 801675a:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801675c:	f7ef f900 	bl	8005960 <osKernelGetTickCount>
 8016760:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	2b00      	cmp	r3, #0
 8016766:	d013      	beq.n	8016790 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8016768:	68fb      	ldr	r3, [r7, #12]
 801676a:	6818      	ldr	r0, [r3, #0]
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	2200      	movs	r2, #0
 8016770:	68b9      	ldr	r1, [r7, #8]
 8016772:	f7ef fdad 	bl	80062d0 <osMessageQueueGet>
 8016776:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8016778:	693b      	ldr	r3, [r7, #16]
 801677a:	2b00      	cmp	r3, #0
 801677c:	d105      	bne.n	801678a <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801677e:	f7ef f8ef 	bl	8005960 <osKernelGetTickCount>
 8016782:	4602      	mov	r2, r0
 8016784:	697b      	ldr	r3, [r7, #20]
 8016786:	1ad3      	subs	r3, r2, r3
 8016788:	e00f      	b.n	80167aa <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801678a:	f04f 33ff 	mov.w	r3, #4294967295
 801678e:	e00c      	b.n	80167aa <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8016790:	68fb      	ldr	r3, [r7, #12]
 8016792:	6818      	ldr	r0, [r3, #0]
 8016794:	f04f 33ff 	mov.w	r3, #4294967295
 8016798:	2200      	movs	r2, #0
 801679a:	68b9      	ldr	r1, [r7, #8]
 801679c:	f7ef fd98 	bl	80062d0 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 80167a0:	f7ef f8de 	bl	8005960 <osKernelGetTickCount>
 80167a4:	4602      	mov	r2, r0
 80167a6:	697b      	ldr	r3, [r7, #20]
 80167a8:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80167aa:	4618      	mov	r0, r3
 80167ac:	3718      	adds	r7, #24
 80167ae:	46bd      	mov	sp, r7
 80167b0:	bd80      	pop	{r7, pc}

080167b2 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80167b2:	b580      	push	{r7, lr}
 80167b4:	b082      	sub	sp, #8
 80167b6:	af00      	add	r7, sp, #0
 80167b8:	6078      	str	r0, [r7, #4]
 80167ba:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	6818      	ldr	r0, [r3, #0]
 80167c0:	2300      	movs	r3, #0
 80167c2:	2200      	movs	r2, #0
 80167c4:	6839      	ldr	r1, [r7, #0]
 80167c6:	f7ef fd83 	bl	80062d0 <osMessageQueueGet>
 80167ca:	4603      	mov	r3, r0
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	d101      	bne.n	80167d4 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 80167d0:	2300      	movs	r3, #0
 80167d2:	e001      	b.n	80167d8 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80167d4:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80167d8:	4618      	mov	r0, r3
 80167da:	3708      	adds	r7, #8
 80167dc:	46bd      	mov	sp, r7
 80167de:	bd80      	pop	{r7, pc}

080167e0 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80167e0:	b480      	push	{r7}
 80167e2:	b083      	sub	sp, #12
 80167e4:	af00      	add	r7, sp, #0
 80167e6:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	681b      	ldr	r3, [r3, #0]
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d101      	bne.n	80167f4 <sys_mbox_valid+0x14>
    return 0;
 80167f0:	2300      	movs	r3, #0
 80167f2:	e000      	b.n	80167f6 <sys_mbox_valid+0x16>
  else
    return 1;
 80167f4:	2301      	movs	r3, #1
}
 80167f6:	4618      	mov	r0, r3
 80167f8:	370c      	adds	r7, #12
 80167fa:	46bd      	mov	sp, r7
 80167fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016800:	4770      	bx	lr

08016802 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8016802:	b480      	push	{r7}
 8016804:	b083      	sub	sp, #12
 8016806:	af00      	add	r7, sp, #0
 8016808:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	2200      	movs	r2, #0
 801680e:	601a      	str	r2, [r3, #0]
}
 8016810:	bf00      	nop
 8016812:	370c      	adds	r7, #12
 8016814:	46bd      	mov	sp, r7
 8016816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801681a:	4770      	bx	lr

0801681c <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801681c:	b580      	push	{r7, lr}
 801681e:	b082      	sub	sp, #8
 8016820:	af00      	add	r7, sp, #0
 8016822:	6078      	str	r0, [r7, #4]
 8016824:	460b      	mov	r3, r1
 8016826:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 8016828:	78fb      	ldrb	r3, [r7, #3]
 801682a:	2200      	movs	r2, #0
 801682c:	4619      	mov	r1, r3
 801682e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8016832:	f7ef fb35 	bl	8005ea0 <osSemaphoreNew>
 8016836:	4602      	mov	r2, r0
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	681b      	ldr	r3, [r3, #0]
 8016840:	2b00      	cmp	r3, #0
 8016842:	d102      	bne.n	801684a <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016844:	f04f 33ff 	mov.w	r3, #4294967295
 8016848:	e009      	b.n	801685e <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801684a:	78fb      	ldrb	r3, [r7, #3]
 801684c:	2b00      	cmp	r3, #0
 801684e:	d105      	bne.n	801685c <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	681b      	ldr	r3, [r3, #0]
 8016854:	2100      	movs	r1, #0
 8016856:	4618      	mov	r0, r3
 8016858:	f7ef fbac 	bl	8005fb4 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801685c:	2300      	movs	r3, #0
}
 801685e:	4618      	mov	r0, r3
 8016860:	3708      	adds	r7, #8
 8016862:	46bd      	mov	sp, r7
 8016864:	bd80      	pop	{r7, pc}

08016866 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8016866:	b580      	push	{r7, lr}
 8016868:	b084      	sub	sp, #16
 801686a:	af00      	add	r7, sp, #0
 801686c:	6078      	str	r0, [r7, #4]
 801686e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 8016870:	f7ef f876 	bl	8005960 <osKernelGetTickCount>
 8016874:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 8016876:	683b      	ldr	r3, [r7, #0]
 8016878:	2b00      	cmp	r3, #0
 801687a:	d011      	beq.n	80168a0 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	681b      	ldr	r3, [r3, #0]
 8016880:	6839      	ldr	r1, [r7, #0]
 8016882:	4618      	mov	r0, r3
 8016884:	f7ef fb96 	bl	8005fb4 <osSemaphoreAcquire>
 8016888:	4603      	mov	r3, r0
 801688a:	2b00      	cmp	r3, #0
 801688c:	d105      	bne.n	801689a <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801688e:	f7ef f867 	bl	8005960 <osKernelGetTickCount>
 8016892:	4602      	mov	r2, r0
 8016894:	68fb      	ldr	r3, [r7, #12]
 8016896:	1ad3      	subs	r3, r2, r3
 8016898:	e012      	b.n	80168c0 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801689a:	f04f 33ff 	mov.w	r3, #4294967295
 801689e:	e00f      	b.n	80168c0 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 80168a0:	bf00      	nop
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	681b      	ldr	r3, [r3, #0]
 80168a6:	f04f 31ff 	mov.w	r1, #4294967295
 80168aa:	4618      	mov	r0, r3
 80168ac:	f7ef fb82 	bl	8005fb4 <osSemaphoreAcquire>
 80168b0:	4603      	mov	r3, r0
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	d1f5      	bne.n	80168a2 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 80168b6:	f7ef f853 	bl	8005960 <osKernelGetTickCount>
 80168ba:	4602      	mov	r2, r0
 80168bc:	68fb      	ldr	r3, [r7, #12]
 80168be:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80168c0:	4618      	mov	r0, r3
 80168c2:	3710      	adds	r7, #16
 80168c4:	46bd      	mov	sp, r7
 80168c6:	bd80      	pop	{r7, pc}

080168c8 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80168c8:	b580      	push	{r7, lr}
 80168ca:	b082      	sub	sp, #8
 80168cc:	af00      	add	r7, sp, #0
 80168ce:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	681b      	ldr	r3, [r3, #0]
 80168d4:	4618      	mov	r0, r3
 80168d6:	f7ef fbbf 	bl	8006058 <osSemaphoreRelease>
}
 80168da:	bf00      	nop
 80168dc:	3708      	adds	r7, #8
 80168de:	46bd      	mov	sp, r7
 80168e0:	bd80      	pop	{r7, pc}

080168e2 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80168e2:	b580      	push	{r7, lr}
 80168e4:	b082      	sub	sp, #8
 80168e6:	af00      	add	r7, sp, #0
 80168e8:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	681b      	ldr	r3, [r3, #0]
 80168ee:	4618      	mov	r0, r3
 80168f0:	f7ef fbf6 	bl	80060e0 <osSemaphoreDelete>
}
 80168f4:	bf00      	nop
 80168f6:	3708      	adds	r7, #8
 80168f8:	46bd      	mov	sp, r7
 80168fa:	bd80      	pop	{r7, pc}

080168fc <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80168fc:	b480      	push	{r7}
 80168fe:	b083      	sub	sp, #12
 8016900:	af00      	add	r7, sp, #0
 8016902:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	681b      	ldr	r3, [r3, #0]
 8016908:	2b00      	cmp	r3, #0
 801690a:	d101      	bne.n	8016910 <sys_sem_valid+0x14>
    return 0;
 801690c:	2300      	movs	r3, #0
 801690e:	e000      	b.n	8016912 <sys_sem_valid+0x16>
  else
    return 1;
 8016910:	2301      	movs	r3, #1
}
 8016912:	4618      	mov	r0, r3
 8016914:	370c      	adds	r7, #12
 8016916:	46bd      	mov	sp, r7
 8016918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801691c:	4770      	bx	lr

0801691e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801691e:	b480      	push	{r7}
 8016920:	b083      	sub	sp, #12
 8016922:	af00      	add	r7, sp, #0
 8016924:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	2200      	movs	r2, #0
 801692a:	601a      	str	r2, [r3, #0]
}
 801692c:	bf00      	nop
 801692e:	370c      	adds	r7, #12
 8016930:	46bd      	mov	sp, r7
 8016932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016936:	4770      	bx	lr

08016938 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8016938:	b580      	push	{r7, lr}
 801693a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801693c:	2000      	movs	r0, #0
 801693e:	f7ef f9a1 	bl	8005c84 <osMutexNew>
 8016942:	4603      	mov	r3, r0
 8016944:	4a01      	ldr	r2, [pc, #4]	@ (801694c <sys_init+0x14>)
 8016946:	6013      	str	r3, [r2, #0]
#endif
}
 8016948:	bf00      	nop
 801694a:	bd80      	pop	{r7, pc}
 801694c:	24008060 	.word	0x24008060

08016950 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8016950:	b580      	push	{r7, lr}
 8016952:	b082      	sub	sp, #8
 8016954:	af00      	add	r7, sp, #0
 8016956:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8016958:	2000      	movs	r0, #0
 801695a:	f7ef f993 	bl	8005c84 <osMutexNew>
 801695e:	4602      	mov	r2, r0
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	2b00      	cmp	r3, #0
 801696a:	d102      	bne.n	8016972 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801696c:	f04f 33ff 	mov.w	r3, #4294967295
 8016970:	e000      	b.n	8016974 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8016972:	2300      	movs	r3, #0
}
 8016974:	4618      	mov	r0, r3
 8016976:	3708      	adds	r7, #8
 8016978:	46bd      	mov	sp, r7
 801697a:	bd80      	pop	{r7, pc}

0801697c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801697c:	b580      	push	{r7, lr}
 801697e:	b082      	sub	sp, #8
 8016980:	af00      	add	r7, sp, #0
 8016982:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	f04f 31ff 	mov.w	r1, #4294967295
 801698c:	4618      	mov	r0, r3
 801698e:	f7ef f9ff 	bl	8005d90 <osMutexAcquire>
#endif
}
 8016992:	bf00      	nop
 8016994:	3708      	adds	r7, #8
 8016996:	46bd      	mov	sp, r7
 8016998:	bd80      	pop	{r7, pc}

0801699a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801699a:	b580      	push	{r7, lr}
 801699c:	b082      	sub	sp, #8
 801699e:	af00      	add	r7, sp, #0
 80169a0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	4618      	mov	r0, r3
 80169a8:	f7ef fa3d 	bl	8005e26 <osMutexRelease>
}
 80169ac:	bf00      	nop
 80169ae:	3708      	adds	r7, #8
 80169b0:	46bd      	mov	sp, r7
 80169b2:	bd80      	pop	{r7, pc}

080169b4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80169b4:	b580      	push	{r7, lr}
 80169b6:	b08e      	sub	sp, #56	@ 0x38
 80169b8:	af00      	add	r7, sp, #0
 80169ba:	60f8      	str	r0, [r7, #12]
 80169bc:	60b9      	str	r1, [r7, #8]
 80169be:	607a      	str	r2, [r7, #4]
 80169c0:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 80169c2:	f107 0314 	add.w	r3, r7, #20
 80169c6:	2224      	movs	r2, #36	@ 0x24
 80169c8:	2100      	movs	r1, #0
 80169ca:	4618      	mov	r0, r3
 80169cc:	f000 f995 	bl	8016cfa <memset>
 80169d0:	68fb      	ldr	r3, [r7, #12]
 80169d2:	617b      	str	r3, [r7, #20]
 80169d4:	683b      	ldr	r3, [r7, #0]
 80169d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80169d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80169da:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 80169dc:	f107 0314 	add.w	r3, r7, #20
 80169e0:	461a      	mov	r2, r3
 80169e2:	6879      	ldr	r1, [r7, #4]
 80169e4:	68b8      	ldr	r0, [r7, #8]
 80169e6:	f7ee ffd0 	bl	800598a <osThreadNew>
 80169ea:	4603      	mov	r3, r0
#endif
}
 80169ec:	4618      	mov	r0, r3
 80169ee:	3738      	adds	r7, #56	@ 0x38
 80169f0:	46bd      	mov	sp, r7
 80169f2:	bd80      	pop	{r7, pc}

080169f4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80169f4:	b580      	push	{r7, lr}
 80169f6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 80169f8:	4b04      	ldr	r3, [pc, #16]	@ (8016a0c <sys_arch_protect+0x18>)
 80169fa:	681b      	ldr	r3, [r3, #0]
 80169fc:	f04f 31ff 	mov.w	r1, #4294967295
 8016a00:	4618      	mov	r0, r3
 8016a02:	f7ef f9c5 	bl	8005d90 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8016a06:	2301      	movs	r3, #1
}
 8016a08:	4618      	mov	r0, r3
 8016a0a:	bd80      	pop	{r7, pc}
 8016a0c:	24008060 	.word	0x24008060

08016a10 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016a10:	b580      	push	{r7, lr}
 8016a12:	b082      	sub	sp, #8
 8016a14:	af00      	add	r7, sp, #0
 8016a16:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016a18:	4b04      	ldr	r3, [pc, #16]	@ (8016a2c <sys_arch_unprotect+0x1c>)
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	4618      	mov	r0, r3
 8016a1e:	f7ef fa02 	bl	8005e26 <osMutexRelease>
}
 8016a22:	bf00      	nop
 8016a24:	3708      	adds	r7, #8
 8016a26:	46bd      	mov	sp, r7
 8016a28:	bd80      	pop	{r7, pc}
 8016a2a:	bf00      	nop
 8016a2c:	24008060 	.word	0x24008060

08016a30 <rand>:
 8016a30:	4b16      	ldr	r3, [pc, #88]	@ (8016a8c <rand+0x5c>)
 8016a32:	b510      	push	{r4, lr}
 8016a34:	681c      	ldr	r4, [r3, #0]
 8016a36:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016a38:	b9b3      	cbnz	r3, 8016a68 <rand+0x38>
 8016a3a:	2018      	movs	r0, #24
 8016a3c:	f000 faa0 	bl	8016f80 <malloc>
 8016a40:	4602      	mov	r2, r0
 8016a42:	6320      	str	r0, [r4, #48]	@ 0x30
 8016a44:	b920      	cbnz	r0, 8016a50 <rand+0x20>
 8016a46:	4b12      	ldr	r3, [pc, #72]	@ (8016a90 <rand+0x60>)
 8016a48:	4812      	ldr	r0, [pc, #72]	@ (8016a94 <rand+0x64>)
 8016a4a:	2152      	movs	r1, #82	@ 0x52
 8016a4c:	f000 fa30 	bl	8016eb0 <__assert_func>
 8016a50:	4911      	ldr	r1, [pc, #68]	@ (8016a98 <rand+0x68>)
 8016a52:	4b12      	ldr	r3, [pc, #72]	@ (8016a9c <rand+0x6c>)
 8016a54:	e9c0 1300 	strd	r1, r3, [r0]
 8016a58:	4b11      	ldr	r3, [pc, #68]	@ (8016aa0 <rand+0x70>)
 8016a5a:	6083      	str	r3, [r0, #8]
 8016a5c:	230b      	movs	r3, #11
 8016a5e:	8183      	strh	r3, [r0, #12]
 8016a60:	2100      	movs	r1, #0
 8016a62:	2001      	movs	r0, #1
 8016a64:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016a68:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016a6a:	480e      	ldr	r0, [pc, #56]	@ (8016aa4 <rand+0x74>)
 8016a6c:	690b      	ldr	r3, [r1, #16]
 8016a6e:	694c      	ldr	r4, [r1, #20]
 8016a70:	4a0d      	ldr	r2, [pc, #52]	@ (8016aa8 <rand+0x78>)
 8016a72:	4358      	muls	r0, r3
 8016a74:	fb02 0004 	mla	r0, r2, r4, r0
 8016a78:	fba3 3202 	umull	r3, r2, r3, r2
 8016a7c:	3301      	adds	r3, #1
 8016a7e:	eb40 0002 	adc.w	r0, r0, r2
 8016a82:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8016a86:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8016a8a:	bd10      	pop	{r4, pc}
 8016a8c:	24000040 	.word	0x24000040
 8016a90:	0801b1e2 	.word	0x0801b1e2
 8016a94:	0801b1f9 	.word	0x0801b1f9
 8016a98:	abcd330e 	.word	0xabcd330e
 8016a9c:	e66d1234 	.word	0xe66d1234
 8016aa0:	0005deec 	.word	0x0005deec
 8016aa4:	5851f42d 	.word	0x5851f42d
 8016aa8:	4c957f2d 	.word	0x4c957f2d

08016aac <std>:
 8016aac:	2300      	movs	r3, #0
 8016aae:	b510      	push	{r4, lr}
 8016ab0:	4604      	mov	r4, r0
 8016ab2:	e9c0 3300 	strd	r3, r3, [r0]
 8016ab6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016aba:	6083      	str	r3, [r0, #8]
 8016abc:	8181      	strh	r1, [r0, #12]
 8016abe:	6643      	str	r3, [r0, #100]	@ 0x64
 8016ac0:	81c2      	strh	r2, [r0, #14]
 8016ac2:	6183      	str	r3, [r0, #24]
 8016ac4:	4619      	mov	r1, r3
 8016ac6:	2208      	movs	r2, #8
 8016ac8:	305c      	adds	r0, #92	@ 0x5c
 8016aca:	f000 f916 	bl	8016cfa <memset>
 8016ace:	4b0d      	ldr	r3, [pc, #52]	@ (8016b04 <std+0x58>)
 8016ad0:	6263      	str	r3, [r4, #36]	@ 0x24
 8016ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8016b08 <std+0x5c>)
 8016ad4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8016b0c <std+0x60>)
 8016ad8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016ada:	4b0d      	ldr	r3, [pc, #52]	@ (8016b10 <std+0x64>)
 8016adc:	6323      	str	r3, [r4, #48]	@ 0x30
 8016ade:	4b0d      	ldr	r3, [pc, #52]	@ (8016b14 <std+0x68>)
 8016ae0:	6224      	str	r4, [r4, #32]
 8016ae2:	429c      	cmp	r4, r3
 8016ae4:	d006      	beq.n	8016af4 <std+0x48>
 8016ae6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016aea:	4294      	cmp	r4, r2
 8016aec:	d002      	beq.n	8016af4 <std+0x48>
 8016aee:	33d0      	adds	r3, #208	@ 0xd0
 8016af0:	429c      	cmp	r4, r3
 8016af2:	d105      	bne.n	8016b00 <std+0x54>
 8016af4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016afc:	f000 b9c6 	b.w	8016e8c <__retarget_lock_init_recursive>
 8016b00:	bd10      	pop	{r4, pc}
 8016b02:	bf00      	nop
 8016b04:	08016c55 	.word	0x08016c55
 8016b08:	08016c77 	.word	0x08016c77
 8016b0c:	08016caf 	.word	0x08016caf
 8016b10:	08016cd3 	.word	0x08016cd3
 8016b14:	24008064 	.word	0x24008064

08016b18 <stdio_exit_handler>:
 8016b18:	4a02      	ldr	r2, [pc, #8]	@ (8016b24 <stdio_exit_handler+0xc>)
 8016b1a:	4903      	ldr	r1, [pc, #12]	@ (8016b28 <stdio_exit_handler+0x10>)
 8016b1c:	4803      	ldr	r0, [pc, #12]	@ (8016b2c <stdio_exit_handler+0x14>)
 8016b1e:	f000 b869 	b.w	8016bf4 <_fwalk_sglue>
 8016b22:	bf00      	nop
 8016b24:	24000034 	.word	0x24000034
 8016b28:	08017795 	.word	0x08017795
 8016b2c:	24000044 	.word	0x24000044

08016b30 <cleanup_stdio>:
 8016b30:	6841      	ldr	r1, [r0, #4]
 8016b32:	4b0c      	ldr	r3, [pc, #48]	@ (8016b64 <cleanup_stdio+0x34>)
 8016b34:	4299      	cmp	r1, r3
 8016b36:	b510      	push	{r4, lr}
 8016b38:	4604      	mov	r4, r0
 8016b3a:	d001      	beq.n	8016b40 <cleanup_stdio+0x10>
 8016b3c:	f000 fe2a 	bl	8017794 <_fflush_r>
 8016b40:	68a1      	ldr	r1, [r4, #8]
 8016b42:	4b09      	ldr	r3, [pc, #36]	@ (8016b68 <cleanup_stdio+0x38>)
 8016b44:	4299      	cmp	r1, r3
 8016b46:	d002      	beq.n	8016b4e <cleanup_stdio+0x1e>
 8016b48:	4620      	mov	r0, r4
 8016b4a:	f000 fe23 	bl	8017794 <_fflush_r>
 8016b4e:	68e1      	ldr	r1, [r4, #12]
 8016b50:	4b06      	ldr	r3, [pc, #24]	@ (8016b6c <cleanup_stdio+0x3c>)
 8016b52:	4299      	cmp	r1, r3
 8016b54:	d004      	beq.n	8016b60 <cleanup_stdio+0x30>
 8016b56:	4620      	mov	r0, r4
 8016b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016b5c:	f000 be1a 	b.w	8017794 <_fflush_r>
 8016b60:	bd10      	pop	{r4, pc}
 8016b62:	bf00      	nop
 8016b64:	24008064 	.word	0x24008064
 8016b68:	240080cc 	.word	0x240080cc
 8016b6c:	24008134 	.word	0x24008134

08016b70 <global_stdio_init.part.0>:
 8016b70:	b510      	push	{r4, lr}
 8016b72:	4b0b      	ldr	r3, [pc, #44]	@ (8016ba0 <global_stdio_init.part.0+0x30>)
 8016b74:	4c0b      	ldr	r4, [pc, #44]	@ (8016ba4 <global_stdio_init.part.0+0x34>)
 8016b76:	4a0c      	ldr	r2, [pc, #48]	@ (8016ba8 <global_stdio_init.part.0+0x38>)
 8016b78:	601a      	str	r2, [r3, #0]
 8016b7a:	4620      	mov	r0, r4
 8016b7c:	2200      	movs	r2, #0
 8016b7e:	2104      	movs	r1, #4
 8016b80:	f7ff ff94 	bl	8016aac <std>
 8016b84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016b88:	2201      	movs	r2, #1
 8016b8a:	2109      	movs	r1, #9
 8016b8c:	f7ff ff8e 	bl	8016aac <std>
 8016b90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016b94:	2202      	movs	r2, #2
 8016b96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016b9a:	2112      	movs	r1, #18
 8016b9c:	f7ff bf86 	b.w	8016aac <std>
 8016ba0:	2400819c 	.word	0x2400819c
 8016ba4:	24008064 	.word	0x24008064
 8016ba8:	08016b19 	.word	0x08016b19

08016bac <__sfp_lock_acquire>:
 8016bac:	4801      	ldr	r0, [pc, #4]	@ (8016bb4 <__sfp_lock_acquire+0x8>)
 8016bae:	f000 b96e 	b.w	8016e8e <__retarget_lock_acquire_recursive>
 8016bb2:	bf00      	nop
 8016bb4:	240081a5 	.word	0x240081a5

08016bb8 <__sfp_lock_release>:
 8016bb8:	4801      	ldr	r0, [pc, #4]	@ (8016bc0 <__sfp_lock_release+0x8>)
 8016bba:	f000 b969 	b.w	8016e90 <__retarget_lock_release_recursive>
 8016bbe:	bf00      	nop
 8016bc0:	240081a5 	.word	0x240081a5

08016bc4 <__sinit>:
 8016bc4:	b510      	push	{r4, lr}
 8016bc6:	4604      	mov	r4, r0
 8016bc8:	f7ff fff0 	bl	8016bac <__sfp_lock_acquire>
 8016bcc:	6a23      	ldr	r3, [r4, #32]
 8016bce:	b11b      	cbz	r3, 8016bd8 <__sinit+0x14>
 8016bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016bd4:	f7ff bff0 	b.w	8016bb8 <__sfp_lock_release>
 8016bd8:	4b04      	ldr	r3, [pc, #16]	@ (8016bec <__sinit+0x28>)
 8016bda:	6223      	str	r3, [r4, #32]
 8016bdc:	4b04      	ldr	r3, [pc, #16]	@ (8016bf0 <__sinit+0x2c>)
 8016bde:	681b      	ldr	r3, [r3, #0]
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	d1f5      	bne.n	8016bd0 <__sinit+0xc>
 8016be4:	f7ff ffc4 	bl	8016b70 <global_stdio_init.part.0>
 8016be8:	e7f2      	b.n	8016bd0 <__sinit+0xc>
 8016bea:	bf00      	nop
 8016bec:	08016b31 	.word	0x08016b31
 8016bf0:	2400819c 	.word	0x2400819c

08016bf4 <_fwalk_sglue>:
 8016bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016bf8:	4607      	mov	r7, r0
 8016bfa:	4688      	mov	r8, r1
 8016bfc:	4614      	mov	r4, r2
 8016bfe:	2600      	movs	r6, #0
 8016c00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016c04:	f1b9 0901 	subs.w	r9, r9, #1
 8016c08:	d505      	bpl.n	8016c16 <_fwalk_sglue+0x22>
 8016c0a:	6824      	ldr	r4, [r4, #0]
 8016c0c:	2c00      	cmp	r4, #0
 8016c0e:	d1f7      	bne.n	8016c00 <_fwalk_sglue+0xc>
 8016c10:	4630      	mov	r0, r6
 8016c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016c16:	89ab      	ldrh	r3, [r5, #12]
 8016c18:	2b01      	cmp	r3, #1
 8016c1a:	d907      	bls.n	8016c2c <_fwalk_sglue+0x38>
 8016c1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016c20:	3301      	adds	r3, #1
 8016c22:	d003      	beq.n	8016c2c <_fwalk_sglue+0x38>
 8016c24:	4629      	mov	r1, r5
 8016c26:	4638      	mov	r0, r7
 8016c28:	47c0      	blx	r8
 8016c2a:	4306      	orrs	r6, r0
 8016c2c:	3568      	adds	r5, #104	@ 0x68
 8016c2e:	e7e9      	b.n	8016c04 <_fwalk_sglue+0x10>

08016c30 <iprintf>:
 8016c30:	b40f      	push	{r0, r1, r2, r3}
 8016c32:	b507      	push	{r0, r1, r2, lr}
 8016c34:	4906      	ldr	r1, [pc, #24]	@ (8016c50 <iprintf+0x20>)
 8016c36:	ab04      	add	r3, sp, #16
 8016c38:	6808      	ldr	r0, [r1, #0]
 8016c3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c3e:	6881      	ldr	r1, [r0, #8]
 8016c40:	9301      	str	r3, [sp, #4]
 8016c42:	f000 fa7d 	bl	8017140 <_vfiprintf_r>
 8016c46:	b003      	add	sp, #12
 8016c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8016c4c:	b004      	add	sp, #16
 8016c4e:	4770      	bx	lr
 8016c50:	24000040 	.word	0x24000040

08016c54 <__sread>:
 8016c54:	b510      	push	{r4, lr}
 8016c56:	460c      	mov	r4, r1
 8016c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c5c:	f000 f8ce 	bl	8016dfc <_read_r>
 8016c60:	2800      	cmp	r0, #0
 8016c62:	bfab      	itete	ge
 8016c64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016c66:	89a3      	ldrhlt	r3, [r4, #12]
 8016c68:	181b      	addge	r3, r3, r0
 8016c6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016c6e:	bfac      	ite	ge
 8016c70:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016c72:	81a3      	strhlt	r3, [r4, #12]
 8016c74:	bd10      	pop	{r4, pc}

08016c76 <__swrite>:
 8016c76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c7a:	461f      	mov	r7, r3
 8016c7c:	898b      	ldrh	r3, [r1, #12]
 8016c7e:	05db      	lsls	r3, r3, #23
 8016c80:	4605      	mov	r5, r0
 8016c82:	460c      	mov	r4, r1
 8016c84:	4616      	mov	r6, r2
 8016c86:	d505      	bpl.n	8016c94 <__swrite+0x1e>
 8016c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c8c:	2302      	movs	r3, #2
 8016c8e:	2200      	movs	r2, #0
 8016c90:	f000 f8a2 	bl	8016dd8 <_lseek_r>
 8016c94:	89a3      	ldrh	r3, [r4, #12]
 8016c96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016c9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016c9e:	81a3      	strh	r3, [r4, #12]
 8016ca0:	4632      	mov	r2, r6
 8016ca2:	463b      	mov	r3, r7
 8016ca4:	4628      	mov	r0, r5
 8016ca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016caa:	f000 b8b9 	b.w	8016e20 <_write_r>

08016cae <__sseek>:
 8016cae:	b510      	push	{r4, lr}
 8016cb0:	460c      	mov	r4, r1
 8016cb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016cb6:	f000 f88f 	bl	8016dd8 <_lseek_r>
 8016cba:	1c43      	adds	r3, r0, #1
 8016cbc:	89a3      	ldrh	r3, [r4, #12]
 8016cbe:	bf15      	itete	ne
 8016cc0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016cc2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016cc6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016cca:	81a3      	strheq	r3, [r4, #12]
 8016ccc:	bf18      	it	ne
 8016cce:	81a3      	strhne	r3, [r4, #12]
 8016cd0:	bd10      	pop	{r4, pc}

08016cd2 <__sclose>:
 8016cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016cd6:	f000 b819 	b.w	8016d0c <_close_r>

08016cda <memcmp>:
 8016cda:	b510      	push	{r4, lr}
 8016cdc:	3901      	subs	r1, #1
 8016cde:	4402      	add	r2, r0
 8016ce0:	4290      	cmp	r0, r2
 8016ce2:	d101      	bne.n	8016ce8 <memcmp+0xe>
 8016ce4:	2000      	movs	r0, #0
 8016ce6:	e005      	b.n	8016cf4 <memcmp+0x1a>
 8016ce8:	7803      	ldrb	r3, [r0, #0]
 8016cea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016cee:	42a3      	cmp	r3, r4
 8016cf0:	d001      	beq.n	8016cf6 <memcmp+0x1c>
 8016cf2:	1b18      	subs	r0, r3, r4
 8016cf4:	bd10      	pop	{r4, pc}
 8016cf6:	3001      	adds	r0, #1
 8016cf8:	e7f2      	b.n	8016ce0 <memcmp+0x6>

08016cfa <memset>:
 8016cfa:	4402      	add	r2, r0
 8016cfc:	4603      	mov	r3, r0
 8016cfe:	4293      	cmp	r3, r2
 8016d00:	d100      	bne.n	8016d04 <memset+0xa>
 8016d02:	4770      	bx	lr
 8016d04:	f803 1b01 	strb.w	r1, [r3], #1
 8016d08:	e7f9      	b.n	8016cfe <memset+0x4>
	...

08016d0c <_close_r>:
 8016d0c:	b538      	push	{r3, r4, r5, lr}
 8016d0e:	4d06      	ldr	r5, [pc, #24]	@ (8016d28 <_close_r+0x1c>)
 8016d10:	2300      	movs	r3, #0
 8016d12:	4604      	mov	r4, r0
 8016d14:	4608      	mov	r0, r1
 8016d16:	602b      	str	r3, [r5, #0]
 8016d18:	f7e9 fe6c 	bl	80009f4 <_close>
 8016d1c:	1c43      	adds	r3, r0, #1
 8016d1e:	d102      	bne.n	8016d26 <_close_r+0x1a>
 8016d20:	682b      	ldr	r3, [r5, #0]
 8016d22:	b103      	cbz	r3, 8016d26 <_close_r+0x1a>
 8016d24:	6023      	str	r3, [r4, #0]
 8016d26:	bd38      	pop	{r3, r4, r5, pc}
 8016d28:	240081a0 	.word	0x240081a0

08016d2c <_reclaim_reent>:
 8016d2c:	4b29      	ldr	r3, [pc, #164]	@ (8016dd4 <_reclaim_reent+0xa8>)
 8016d2e:	681b      	ldr	r3, [r3, #0]
 8016d30:	4283      	cmp	r3, r0
 8016d32:	b570      	push	{r4, r5, r6, lr}
 8016d34:	4604      	mov	r4, r0
 8016d36:	d04b      	beq.n	8016dd0 <_reclaim_reent+0xa4>
 8016d38:	69c3      	ldr	r3, [r0, #28]
 8016d3a:	b1ab      	cbz	r3, 8016d68 <_reclaim_reent+0x3c>
 8016d3c:	68db      	ldr	r3, [r3, #12]
 8016d3e:	b16b      	cbz	r3, 8016d5c <_reclaim_reent+0x30>
 8016d40:	2500      	movs	r5, #0
 8016d42:	69e3      	ldr	r3, [r4, #28]
 8016d44:	68db      	ldr	r3, [r3, #12]
 8016d46:	5959      	ldr	r1, [r3, r5]
 8016d48:	2900      	cmp	r1, #0
 8016d4a:	d13b      	bne.n	8016dc4 <_reclaim_reent+0x98>
 8016d4c:	3504      	adds	r5, #4
 8016d4e:	2d80      	cmp	r5, #128	@ 0x80
 8016d50:	d1f7      	bne.n	8016d42 <_reclaim_reent+0x16>
 8016d52:	69e3      	ldr	r3, [r4, #28]
 8016d54:	4620      	mov	r0, r4
 8016d56:	68d9      	ldr	r1, [r3, #12]
 8016d58:	f000 f8c8 	bl	8016eec <_free_r>
 8016d5c:	69e3      	ldr	r3, [r4, #28]
 8016d5e:	6819      	ldr	r1, [r3, #0]
 8016d60:	b111      	cbz	r1, 8016d68 <_reclaim_reent+0x3c>
 8016d62:	4620      	mov	r0, r4
 8016d64:	f000 f8c2 	bl	8016eec <_free_r>
 8016d68:	6961      	ldr	r1, [r4, #20]
 8016d6a:	b111      	cbz	r1, 8016d72 <_reclaim_reent+0x46>
 8016d6c:	4620      	mov	r0, r4
 8016d6e:	f000 f8bd 	bl	8016eec <_free_r>
 8016d72:	69e1      	ldr	r1, [r4, #28]
 8016d74:	b111      	cbz	r1, 8016d7c <_reclaim_reent+0x50>
 8016d76:	4620      	mov	r0, r4
 8016d78:	f000 f8b8 	bl	8016eec <_free_r>
 8016d7c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016d7e:	b111      	cbz	r1, 8016d86 <_reclaim_reent+0x5a>
 8016d80:	4620      	mov	r0, r4
 8016d82:	f000 f8b3 	bl	8016eec <_free_r>
 8016d86:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016d88:	b111      	cbz	r1, 8016d90 <_reclaim_reent+0x64>
 8016d8a:	4620      	mov	r0, r4
 8016d8c:	f000 f8ae 	bl	8016eec <_free_r>
 8016d90:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8016d92:	b111      	cbz	r1, 8016d9a <_reclaim_reent+0x6e>
 8016d94:	4620      	mov	r0, r4
 8016d96:	f000 f8a9 	bl	8016eec <_free_r>
 8016d9a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8016d9c:	b111      	cbz	r1, 8016da4 <_reclaim_reent+0x78>
 8016d9e:	4620      	mov	r0, r4
 8016da0:	f000 f8a4 	bl	8016eec <_free_r>
 8016da4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8016da6:	b111      	cbz	r1, 8016dae <_reclaim_reent+0x82>
 8016da8:	4620      	mov	r0, r4
 8016daa:	f000 f89f 	bl	8016eec <_free_r>
 8016dae:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8016db0:	b111      	cbz	r1, 8016db8 <_reclaim_reent+0x8c>
 8016db2:	4620      	mov	r0, r4
 8016db4:	f000 f89a 	bl	8016eec <_free_r>
 8016db8:	6a23      	ldr	r3, [r4, #32]
 8016dba:	b14b      	cbz	r3, 8016dd0 <_reclaim_reent+0xa4>
 8016dbc:	4620      	mov	r0, r4
 8016dbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016dc2:	4718      	bx	r3
 8016dc4:	680e      	ldr	r6, [r1, #0]
 8016dc6:	4620      	mov	r0, r4
 8016dc8:	f000 f890 	bl	8016eec <_free_r>
 8016dcc:	4631      	mov	r1, r6
 8016dce:	e7bb      	b.n	8016d48 <_reclaim_reent+0x1c>
 8016dd0:	bd70      	pop	{r4, r5, r6, pc}
 8016dd2:	bf00      	nop
 8016dd4:	24000040 	.word	0x24000040

08016dd8 <_lseek_r>:
 8016dd8:	b538      	push	{r3, r4, r5, lr}
 8016dda:	4d07      	ldr	r5, [pc, #28]	@ (8016df8 <_lseek_r+0x20>)
 8016ddc:	4604      	mov	r4, r0
 8016dde:	4608      	mov	r0, r1
 8016de0:	4611      	mov	r1, r2
 8016de2:	2200      	movs	r2, #0
 8016de4:	602a      	str	r2, [r5, #0]
 8016de6:	461a      	mov	r2, r3
 8016de8:	f7e9 fe2b 	bl	8000a42 <_lseek>
 8016dec:	1c43      	adds	r3, r0, #1
 8016dee:	d102      	bne.n	8016df6 <_lseek_r+0x1e>
 8016df0:	682b      	ldr	r3, [r5, #0]
 8016df2:	b103      	cbz	r3, 8016df6 <_lseek_r+0x1e>
 8016df4:	6023      	str	r3, [r4, #0]
 8016df6:	bd38      	pop	{r3, r4, r5, pc}
 8016df8:	240081a0 	.word	0x240081a0

08016dfc <_read_r>:
 8016dfc:	b538      	push	{r3, r4, r5, lr}
 8016dfe:	4d07      	ldr	r5, [pc, #28]	@ (8016e1c <_read_r+0x20>)
 8016e00:	4604      	mov	r4, r0
 8016e02:	4608      	mov	r0, r1
 8016e04:	4611      	mov	r1, r2
 8016e06:	2200      	movs	r2, #0
 8016e08:	602a      	str	r2, [r5, #0]
 8016e0a:	461a      	mov	r2, r3
 8016e0c:	f7e9 fdb9 	bl	8000982 <_read>
 8016e10:	1c43      	adds	r3, r0, #1
 8016e12:	d102      	bne.n	8016e1a <_read_r+0x1e>
 8016e14:	682b      	ldr	r3, [r5, #0]
 8016e16:	b103      	cbz	r3, 8016e1a <_read_r+0x1e>
 8016e18:	6023      	str	r3, [r4, #0]
 8016e1a:	bd38      	pop	{r3, r4, r5, pc}
 8016e1c:	240081a0 	.word	0x240081a0

08016e20 <_write_r>:
 8016e20:	b538      	push	{r3, r4, r5, lr}
 8016e22:	4d07      	ldr	r5, [pc, #28]	@ (8016e40 <_write_r+0x20>)
 8016e24:	4604      	mov	r4, r0
 8016e26:	4608      	mov	r0, r1
 8016e28:	4611      	mov	r1, r2
 8016e2a:	2200      	movs	r2, #0
 8016e2c:	602a      	str	r2, [r5, #0]
 8016e2e:	461a      	mov	r2, r3
 8016e30:	f7e9 fdc4 	bl	80009bc <_write>
 8016e34:	1c43      	adds	r3, r0, #1
 8016e36:	d102      	bne.n	8016e3e <_write_r+0x1e>
 8016e38:	682b      	ldr	r3, [r5, #0]
 8016e3a:	b103      	cbz	r3, 8016e3e <_write_r+0x1e>
 8016e3c:	6023      	str	r3, [r4, #0]
 8016e3e:	bd38      	pop	{r3, r4, r5, pc}
 8016e40:	240081a0 	.word	0x240081a0

08016e44 <__libc_init_array>:
 8016e44:	b570      	push	{r4, r5, r6, lr}
 8016e46:	4d0d      	ldr	r5, [pc, #52]	@ (8016e7c <__libc_init_array+0x38>)
 8016e48:	4c0d      	ldr	r4, [pc, #52]	@ (8016e80 <__libc_init_array+0x3c>)
 8016e4a:	1b64      	subs	r4, r4, r5
 8016e4c:	10a4      	asrs	r4, r4, #2
 8016e4e:	2600      	movs	r6, #0
 8016e50:	42a6      	cmp	r6, r4
 8016e52:	d109      	bne.n	8016e68 <__libc_init_array+0x24>
 8016e54:	4d0b      	ldr	r5, [pc, #44]	@ (8016e84 <__libc_init_array+0x40>)
 8016e56:	4c0c      	ldr	r4, [pc, #48]	@ (8016e88 <__libc_init_array+0x44>)
 8016e58:	f000 fe4a 	bl	8017af0 <_init>
 8016e5c:	1b64      	subs	r4, r4, r5
 8016e5e:	10a4      	asrs	r4, r4, #2
 8016e60:	2600      	movs	r6, #0
 8016e62:	42a6      	cmp	r6, r4
 8016e64:	d105      	bne.n	8016e72 <__libc_init_array+0x2e>
 8016e66:	bd70      	pop	{r4, r5, r6, pc}
 8016e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8016e6c:	4798      	blx	r3
 8016e6e:	3601      	adds	r6, #1
 8016e70:	e7ee      	b.n	8016e50 <__libc_init_array+0xc>
 8016e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8016e76:	4798      	blx	r3
 8016e78:	3601      	adds	r6, #1
 8016e7a:	e7f2      	b.n	8016e62 <__libc_init_array+0x1e>
 8016e7c:	0801b2c8 	.word	0x0801b2c8
 8016e80:	0801b2c8 	.word	0x0801b2c8
 8016e84:	0801b2c8 	.word	0x0801b2c8
 8016e88:	0801b2cc 	.word	0x0801b2cc

08016e8c <__retarget_lock_init_recursive>:
 8016e8c:	4770      	bx	lr

08016e8e <__retarget_lock_acquire_recursive>:
 8016e8e:	4770      	bx	lr

08016e90 <__retarget_lock_release_recursive>:
 8016e90:	4770      	bx	lr

08016e92 <memcpy>:
 8016e92:	440a      	add	r2, r1
 8016e94:	4291      	cmp	r1, r2
 8016e96:	f100 33ff 	add.w	r3, r0, #4294967295
 8016e9a:	d100      	bne.n	8016e9e <memcpy+0xc>
 8016e9c:	4770      	bx	lr
 8016e9e:	b510      	push	{r4, lr}
 8016ea0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016ea4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016ea8:	4291      	cmp	r1, r2
 8016eaa:	d1f9      	bne.n	8016ea0 <memcpy+0xe>
 8016eac:	bd10      	pop	{r4, pc}
	...

08016eb0 <__assert_func>:
 8016eb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016eb2:	4614      	mov	r4, r2
 8016eb4:	461a      	mov	r2, r3
 8016eb6:	4b09      	ldr	r3, [pc, #36]	@ (8016edc <__assert_func+0x2c>)
 8016eb8:	681b      	ldr	r3, [r3, #0]
 8016eba:	4605      	mov	r5, r0
 8016ebc:	68d8      	ldr	r0, [r3, #12]
 8016ebe:	b954      	cbnz	r4, 8016ed6 <__assert_func+0x26>
 8016ec0:	4b07      	ldr	r3, [pc, #28]	@ (8016ee0 <__assert_func+0x30>)
 8016ec2:	461c      	mov	r4, r3
 8016ec4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016ec8:	9100      	str	r1, [sp, #0]
 8016eca:	462b      	mov	r3, r5
 8016ecc:	4905      	ldr	r1, [pc, #20]	@ (8016ee4 <__assert_func+0x34>)
 8016ece:	f000 fc89 	bl	80177e4 <fiprintf>
 8016ed2:	f000 fd3d 	bl	8017950 <abort>
 8016ed6:	4b04      	ldr	r3, [pc, #16]	@ (8016ee8 <__assert_func+0x38>)
 8016ed8:	e7f4      	b.n	8016ec4 <__assert_func+0x14>
 8016eda:	bf00      	nop
 8016edc:	24000040 	.word	0x24000040
 8016ee0:	0801b28c 	.word	0x0801b28c
 8016ee4:	0801b25e 	.word	0x0801b25e
 8016ee8:	0801b251 	.word	0x0801b251

08016eec <_free_r>:
 8016eec:	b538      	push	{r3, r4, r5, lr}
 8016eee:	4605      	mov	r5, r0
 8016ef0:	2900      	cmp	r1, #0
 8016ef2:	d041      	beq.n	8016f78 <_free_r+0x8c>
 8016ef4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016ef8:	1f0c      	subs	r4, r1, #4
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	bfb8      	it	lt
 8016efe:	18e4      	addlt	r4, r4, r3
 8016f00:	f000 f8e8 	bl	80170d4 <__malloc_lock>
 8016f04:	4a1d      	ldr	r2, [pc, #116]	@ (8016f7c <_free_r+0x90>)
 8016f06:	6813      	ldr	r3, [r2, #0]
 8016f08:	b933      	cbnz	r3, 8016f18 <_free_r+0x2c>
 8016f0a:	6063      	str	r3, [r4, #4]
 8016f0c:	6014      	str	r4, [r2, #0]
 8016f0e:	4628      	mov	r0, r5
 8016f10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016f14:	f000 b8e4 	b.w	80170e0 <__malloc_unlock>
 8016f18:	42a3      	cmp	r3, r4
 8016f1a:	d908      	bls.n	8016f2e <_free_r+0x42>
 8016f1c:	6820      	ldr	r0, [r4, #0]
 8016f1e:	1821      	adds	r1, r4, r0
 8016f20:	428b      	cmp	r3, r1
 8016f22:	bf01      	itttt	eq
 8016f24:	6819      	ldreq	r1, [r3, #0]
 8016f26:	685b      	ldreq	r3, [r3, #4]
 8016f28:	1809      	addeq	r1, r1, r0
 8016f2a:	6021      	streq	r1, [r4, #0]
 8016f2c:	e7ed      	b.n	8016f0a <_free_r+0x1e>
 8016f2e:	461a      	mov	r2, r3
 8016f30:	685b      	ldr	r3, [r3, #4]
 8016f32:	b10b      	cbz	r3, 8016f38 <_free_r+0x4c>
 8016f34:	42a3      	cmp	r3, r4
 8016f36:	d9fa      	bls.n	8016f2e <_free_r+0x42>
 8016f38:	6811      	ldr	r1, [r2, #0]
 8016f3a:	1850      	adds	r0, r2, r1
 8016f3c:	42a0      	cmp	r0, r4
 8016f3e:	d10b      	bne.n	8016f58 <_free_r+0x6c>
 8016f40:	6820      	ldr	r0, [r4, #0]
 8016f42:	4401      	add	r1, r0
 8016f44:	1850      	adds	r0, r2, r1
 8016f46:	4283      	cmp	r3, r0
 8016f48:	6011      	str	r1, [r2, #0]
 8016f4a:	d1e0      	bne.n	8016f0e <_free_r+0x22>
 8016f4c:	6818      	ldr	r0, [r3, #0]
 8016f4e:	685b      	ldr	r3, [r3, #4]
 8016f50:	6053      	str	r3, [r2, #4]
 8016f52:	4408      	add	r0, r1
 8016f54:	6010      	str	r0, [r2, #0]
 8016f56:	e7da      	b.n	8016f0e <_free_r+0x22>
 8016f58:	d902      	bls.n	8016f60 <_free_r+0x74>
 8016f5a:	230c      	movs	r3, #12
 8016f5c:	602b      	str	r3, [r5, #0]
 8016f5e:	e7d6      	b.n	8016f0e <_free_r+0x22>
 8016f60:	6820      	ldr	r0, [r4, #0]
 8016f62:	1821      	adds	r1, r4, r0
 8016f64:	428b      	cmp	r3, r1
 8016f66:	bf04      	itt	eq
 8016f68:	6819      	ldreq	r1, [r3, #0]
 8016f6a:	685b      	ldreq	r3, [r3, #4]
 8016f6c:	6063      	str	r3, [r4, #4]
 8016f6e:	bf04      	itt	eq
 8016f70:	1809      	addeq	r1, r1, r0
 8016f72:	6021      	streq	r1, [r4, #0]
 8016f74:	6054      	str	r4, [r2, #4]
 8016f76:	e7ca      	b.n	8016f0e <_free_r+0x22>
 8016f78:	bd38      	pop	{r3, r4, r5, pc}
 8016f7a:	bf00      	nop
 8016f7c:	240081ac 	.word	0x240081ac

08016f80 <malloc>:
 8016f80:	4b02      	ldr	r3, [pc, #8]	@ (8016f8c <malloc+0xc>)
 8016f82:	4601      	mov	r1, r0
 8016f84:	6818      	ldr	r0, [r3, #0]
 8016f86:	f000 b825 	b.w	8016fd4 <_malloc_r>
 8016f8a:	bf00      	nop
 8016f8c:	24000040 	.word	0x24000040

08016f90 <sbrk_aligned>:
 8016f90:	b570      	push	{r4, r5, r6, lr}
 8016f92:	4e0f      	ldr	r6, [pc, #60]	@ (8016fd0 <sbrk_aligned+0x40>)
 8016f94:	460c      	mov	r4, r1
 8016f96:	6831      	ldr	r1, [r6, #0]
 8016f98:	4605      	mov	r5, r0
 8016f9a:	b911      	cbnz	r1, 8016fa2 <sbrk_aligned+0x12>
 8016f9c:	f000 fcc8 	bl	8017930 <_sbrk_r>
 8016fa0:	6030      	str	r0, [r6, #0]
 8016fa2:	4621      	mov	r1, r4
 8016fa4:	4628      	mov	r0, r5
 8016fa6:	f000 fcc3 	bl	8017930 <_sbrk_r>
 8016faa:	1c43      	adds	r3, r0, #1
 8016fac:	d103      	bne.n	8016fb6 <sbrk_aligned+0x26>
 8016fae:	f04f 34ff 	mov.w	r4, #4294967295
 8016fb2:	4620      	mov	r0, r4
 8016fb4:	bd70      	pop	{r4, r5, r6, pc}
 8016fb6:	1cc4      	adds	r4, r0, #3
 8016fb8:	f024 0403 	bic.w	r4, r4, #3
 8016fbc:	42a0      	cmp	r0, r4
 8016fbe:	d0f8      	beq.n	8016fb2 <sbrk_aligned+0x22>
 8016fc0:	1a21      	subs	r1, r4, r0
 8016fc2:	4628      	mov	r0, r5
 8016fc4:	f000 fcb4 	bl	8017930 <_sbrk_r>
 8016fc8:	3001      	adds	r0, #1
 8016fca:	d1f2      	bne.n	8016fb2 <sbrk_aligned+0x22>
 8016fcc:	e7ef      	b.n	8016fae <sbrk_aligned+0x1e>
 8016fce:	bf00      	nop
 8016fd0:	240081a8 	.word	0x240081a8

08016fd4 <_malloc_r>:
 8016fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016fd8:	1ccd      	adds	r5, r1, #3
 8016fda:	f025 0503 	bic.w	r5, r5, #3
 8016fde:	3508      	adds	r5, #8
 8016fe0:	2d0c      	cmp	r5, #12
 8016fe2:	bf38      	it	cc
 8016fe4:	250c      	movcc	r5, #12
 8016fe6:	2d00      	cmp	r5, #0
 8016fe8:	4606      	mov	r6, r0
 8016fea:	db01      	blt.n	8016ff0 <_malloc_r+0x1c>
 8016fec:	42a9      	cmp	r1, r5
 8016fee:	d904      	bls.n	8016ffa <_malloc_r+0x26>
 8016ff0:	230c      	movs	r3, #12
 8016ff2:	6033      	str	r3, [r6, #0]
 8016ff4:	2000      	movs	r0, #0
 8016ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016ffa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80170d0 <_malloc_r+0xfc>
 8016ffe:	f000 f869 	bl	80170d4 <__malloc_lock>
 8017002:	f8d8 3000 	ldr.w	r3, [r8]
 8017006:	461c      	mov	r4, r3
 8017008:	bb44      	cbnz	r4, 801705c <_malloc_r+0x88>
 801700a:	4629      	mov	r1, r5
 801700c:	4630      	mov	r0, r6
 801700e:	f7ff ffbf 	bl	8016f90 <sbrk_aligned>
 8017012:	1c43      	adds	r3, r0, #1
 8017014:	4604      	mov	r4, r0
 8017016:	d158      	bne.n	80170ca <_malloc_r+0xf6>
 8017018:	f8d8 4000 	ldr.w	r4, [r8]
 801701c:	4627      	mov	r7, r4
 801701e:	2f00      	cmp	r7, #0
 8017020:	d143      	bne.n	80170aa <_malloc_r+0xd6>
 8017022:	2c00      	cmp	r4, #0
 8017024:	d04b      	beq.n	80170be <_malloc_r+0xea>
 8017026:	6823      	ldr	r3, [r4, #0]
 8017028:	4639      	mov	r1, r7
 801702a:	4630      	mov	r0, r6
 801702c:	eb04 0903 	add.w	r9, r4, r3
 8017030:	f000 fc7e 	bl	8017930 <_sbrk_r>
 8017034:	4581      	cmp	r9, r0
 8017036:	d142      	bne.n	80170be <_malloc_r+0xea>
 8017038:	6821      	ldr	r1, [r4, #0]
 801703a:	1a6d      	subs	r5, r5, r1
 801703c:	4629      	mov	r1, r5
 801703e:	4630      	mov	r0, r6
 8017040:	f7ff ffa6 	bl	8016f90 <sbrk_aligned>
 8017044:	3001      	adds	r0, #1
 8017046:	d03a      	beq.n	80170be <_malloc_r+0xea>
 8017048:	6823      	ldr	r3, [r4, #0]
 801704a:	442b      	add	r3, r5
 801704c:	6023      	str	r3, [r4, #0]
 801704e:	f8d8 3000 	ldr.w	r3, [r8]
 8017052:	685a      	ldr	r2, [r3, #4]
 8017054:	bb62      	cbnz	r2, 80170b0 <_malloc_r+0xdc>
 8017056:	f8c8 7000 	str.w	r7, [r8]
 801705a:	e00f      	b.n	801707c <_malloc_r+0xa8>
 801705c:	6822      	ldr	r2, [r4, #0]
 801705e:	1b52      	subs	r2, r2, r5
 8017060:	d420      	bmi.n	80170a4 <_malloc_r+0xd0>
 8017062:	2a0b      	cmp	r2, #11
 8017064:	d917      	bls.n	8017096 <_malloc_r+0xc2>
 8017066:	1961      	adds	r1, r4, r5
 8017068:	42a3      	cmp	r3, r4
 801706a:	6025      	str	r5, [r4, #0]
 801706c:	bf18      	it	ne
 801706e:	6059      	strne	r1, [r3, #4]
 8017070:	6863      	ldr	r3, [r4, #4]
 8017072:	bf08      	it	eq
 8017074:	f8c8 1000 	streq.w	r1, [r8]
 8017078:	5162      	str	r2, [r4, r5]
 801707a:	604b      	str	r3, [r1, #4]
 801707c:	4630      	mov	r0, r6
 801707e:	f000 f82f 	bl	80170e0 <__malloc_unlock>
 8017082:	f104 000b 	add.w	r0, r4, #11
 8017086:	1d23      	adds	r3, r4, #4
 8017088:	f020 0007 	bic.w	r0, r0, #7
 801708c:	1ac2      	subs	r2, r0, r3
 801708e:	bf1c      	itt	ne
 8017090:	1a1b      	subne	r3, r3, r0
 8017092:	50a3      	strne	r3, [r4, r2]
 8017094:	e7af      	b.n	8016ff6 <_malloc_r+0x22>
 8017096:	6862      	ldr	r2, [r4, #4]
 8017098:	42a3      	cmp	r3, r4
 801709a:	bf0c      	ite	eq
 801709c:	f8c8 2000 	streq.w	r2, [r8]
 80170a0:	605a      	strne	r2, [r3, #4]
 80170a2:	e7eb      	b.n	801707c <_malloc_r+0xa8>
 80170a4:	4623      	mov	r3, r4
 80170a6:	6864      	ldr	r4, [r4, #4]
 80170a8:	e7ae      	b.n	8017008 <_malloc_r+0x34>
 80170aa:	463c      	mov	r4, r7
 80170ac:	687f      	ldr	r7, [r7, #4]
 80170ae:	e7b6      	b.n	801701e <_malloc_r+0x4a>
 80170b0:	461a      	mov	r2, r3
 80170b2:	685b      	ldr	r3, [r3, #4]
 80170b4:	42a3      	cmp	r3, r4
 80170b6:	d1fb      	bne.n	80170b0 <_malloc_r+0xdc>
 80170b8:	2300      	movs	r3, #0
 80170ba:	6053      	str	r3, [r2, #4]
 80170bc:	e7de      	b.n	801707c <_malloc_r+0xa8>
 80170be:	230c      	movs	r3, #12
 80170c0:	6033      	str	r3, [r6, #0]
 80170c2:	4630      	mov	r0, r6
 80170c4:	f000 f80c 	bl	80170e0 <__malloc_unlock>
 80170c8:	e794      	b.n	8016ff4 <_malloc_r+0x20>
 80170ca:	6005      	str	r5, [r0, #0]
 80170cc:	e7d6      	b.n	801707c <_malloc_r+0xa8>
 80170ce:	bf00      	nop
 80170d0:	240081ac 	.word	0x240081ac

080170d4 <__malloc_lock>:
 80170d4:	4801      	ldr	r0, [pc, #4]	@ (80170dc <__malloc_lock+0x8>)
 80170d6:	f7ff beda 	b.w	8016e8e <__retarget_lock_acquire_recursive>
 80170da:	bf00      	nop
 80170dc:	240081a4 	.word	0x240081a4

080170e0 <__malloc_unlock>:
 80170e0:	4801      	ldr	r0, [pc, #4]	@ (80170e8 <__malloc_unlock+0x8>)
 80170e2:	f7ff bed5 	b.w	8016e90 <__retarget_lock_release_recursive>
 80170e6:	bf00      	nop
 80170e8:	240081a4 	.word	0x240081a4

080170ec <__sfputc_r>:
 80170ec:	6893      	ldr	r3, [r2, #8]
 80170ee:	3b01      	subs	r3, #1
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	b410      	push	{r4}
 80170f4:	6093      	str	r3, [r2, #8]
 80170f6:	da08      	bge.n	801710a <__sfputc_r+0x1e>
 80170f8:	6994      	ldr	r4, [r2, #24]
 80170fa:	42a3      	cmp	r3, r4
 80170fc:	db01      	blt.n	8017102 <__sfputc_r+0x16>
 80170fe:	290a      	cmp	r1, #10
 8017100:	d103      	bne.n	801710a <__sfputc_r+0x1e>
 8017102:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017106:	f000 bb7f 	b.w	8017808 <__swbuf_r>
 801710a:	6813      	ldr	r3, [r2, #0]
 801710c:	1c58      	adds	r0, r3, #1
 801710e:	6010      	str	r0, [r2, #0]
 8017110:	7019      	strb	r1, [r3, #0]
 8017112:	4608      	mov	r0, r1
 8017114:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017118:	4770      	bx	lr

0801711a <__sfputs_r>:
 801711a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801711c:	4606      	mov	r6, r0
 801711e:	460f      	mov	r7, r1
 8017120:	4614      	mov	r4, r2
 8017122:	18d5      	adds	r5, r2, r3
 8017124:	42ac      	cmp	r4, r5
 8017126:	d101      	bne.n	801712c <__sfputs_r+0x12>
 8017128:	2000      	movs	r0, #0
 801712a:	e007      	b.n	801713c <__sfputs_r+0x22>
 801712c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017130:	463a      	mov	r2, r7
 8017132:	4630      	mov	r0, r6
 8017134:	f7ff ffda 	bl	80170ec <__sfputc_r>
 8017138:	1c43      	adds	r3, r0, #1
 801713a:	d1f3      	bne.n	8017124 <__sfputs_r+0xa>
 801713c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017140 <_vfiprintf_r>:
 8017140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017144:	460d      	mov	r5, r1
 8017146:	b09d      	sub	sp, #116	@ 0x74
 8017148:	4614      	mov	r4, r2
 801714a:	4698      	mov	r8, r3
 801714c:	4606      	mov	r6, r0
 801714e:	b118      	cbz	r0, 8017158 <_vfiprintf_r+0x18>
 8017150:	6a03      	ldr	r3, [r0, #32]
 8017152:	b90b      	cbnz	r3, 8017158 <_vfiprintf_r+0x18>
 8017154:	f7ff fd36 	bl	8016bc4 <__sinit>
 8017158:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801715a:	07d9      	lsls	r1, r3, #31
 801715c:	d405      	bmi.n	801716a <_vfiprintf_r+0x2a>
 801715e:	89ab      	ldrh	r3, [r5, #12]
 8017160:	059a      	lsls	r2, r3, #22
 8017162:	d402      	bmi.n	801716a <_vfiprintf_r+0x2a>
 8017164:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017166:	f7ff fe92 	bl	8016e8e <__retarget_lock_acquire_recursive>
 801716a:	89ab      	ldrh	r3, [r5, #12]
 801716c:	071b      	lsls	r3, r3, #28
 801716e:	d501      	bpl.n	8017174 <_vfiprintf_r+0x34>
 8017170:	692b      	ldr	r3, [r5, #16]
 8017172:	b99b      	cbnz	r3, 801719c <_vfiprintf_r+0x5c>
 8017174:	4629      	mov	r1, r5
 8017176:	4630      	mov	r0, r6
 8017178:	f000 fb84 	bl	8017884 <__swsetup_r>
 801717c:	b170      	cbz	r0, 801719c <_vfiprintf_r+0x5c>
 801717e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017180:	07dc      	lsls	r4, r3, #31
 8017182:	d504      	bpl.n	801718e <_vfiprintf_r+0x4e>
 8017184:	f04f 30ff 	mov.w	r0, #4294967295
 8017188:	b01d      	add	sp, #116	@ 0x74
 801718a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801718e:	89ab      	ldrh	r3, [r5, #12]
 8017190:	0598      	lsls	r0, r3, #22
 8017192:	d4f7      	bmi.n	8017184 <_vfiprintf_r+0x44>
 8017194:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017196:	f7ff fe7b 	bl	8016e90 <__retarget_lock_release_recursive>
 801719a:	e7f3      	b.n	8017184 <_vfiprintf_r+0x44>
 801719c:	2300      	movs	r3, #0
 801719e:	9309      	str	r3, [sp, #36]	@ 0x24
 80171a0:	2320      	movs	r3, #32
 80171a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80171a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80171aa:	2330      	movs	r3, #48	@ 0x30
 80171ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801735c <_vfiprintf_r+0x21c>
 80171b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80171b4:	f04f 0901 	mov.w	r9, #1
 80171b8:	4623      	mov	r3, r4
 80171ba:	469a      	mov	sl, r3
 80171bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80171c0:	b10a      	cbz	r2, 80171c6 <_vfiprintf_r+0x86>
 80171c2:	2a25      	cmp	r2, #37	@ 0x25
 80171c4:	d1f9      	bne.n	80171ba <_vfiprintf_r+0x7a>
 80171c6:	ebba 0b04 	subs.w	fp, sl, r4
 80171ca:	d00b      	beq.n	80171e4 <_vfiprintf_r+0xa4>
 80171cc:	465b      	mov	r3, fp
 80171ce:	4622      	mov	r2, r4
 80171d0:	4629      	mov	r1, r5
 80171d2:	4630      	mov	r0, r6
 80171d4:	f7ff ffa1 	bl	801711a <__sfputs_r>
 80171d8:	3001      	adds	r0, #1
 80171da:	f000 80a7 	beq.w	801732c <_vfiprintf_r+0x1ec>
 80171de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80171e0:	445a      	add	r2, fp
 80171e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80171e4:	f89a 3000 	ldrb.w	r3, [sl]
 80171e8:	2b00      	cmp	r3, #0
 80171ea:	f000 809f 	beq.w	801732c <_vfiprintf_r+0x1ec>
 80171ee:	2300      	movs	r3, #0
 80171f0:	f04f 32ff 	mov.w	r2, #4294967295
 80171f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80171f8:	f10a 0a01 	add.w	sl, sl, #1
 80171fc:	9304      	str	r3, [sp, #16]
 80171fe:	9307      	str	r3, [sp, #28]
 8017200:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017204:	931a      	str	r3, [sp, #104]	@ 0x68
 8017206:	4654      	mov	r4, sl
 8017208:	2205      	movs	r2, #5
 801720a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801720e:	4853      	ldr	r0, [pc, #332]	@ (801735c <_vfiprintf_r+0x21c>)
 8017210:	f7e9 f87e 	bl	8000310 <memchr>
 8017214:	9a04      	ldr	r2, [sp, #16]
 8017216:	b9d8      	cbnz	r0, 8017250 <_vfiprintf_r+0x110>
 8017218:	06d1      	lsls	r1, r2, #27
 801721a:	bf44      	itt	mi
 801721c:	2320      	movmi	r3, #32
 801721e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017222:	0713      	lsls	r3, r2, #28
 8017224:	bf44      	itt	mi
 8017226:	232b      	movmi	r3, #43	@ 0x2b
 8017228:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801722c:	f89a 3000 	ldrb.w	r3, [sl]
 8017230:	2b2a      	cmp	r3, #42	@ 0x2a
 8017232:	d015      	beq.n	8017260 <_vfiprintf_r+0x120>
 8017234:	9a07      	ldr	r2, [sp, #28]
 8017236:	4654      	mov	r4, sl
 8017238:	2000      	movs	r0, #0
 801723a:	f04f 0c0a 	mov.w	ip, #10
 801723e:	4621      	mov	r1, r4
 8017240:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017244:	3b30      	subs	r3, #48	@ 0x30
 8017246:	2b09      	cmp	r3, #9
 8017248:	d94b      	bls.n	80172e2 <_vfiprintf_r+0x1a2>
 801724a:	b1b0      	cbz	r0, 801727a <_vfiprintf_r+0x13a>
 801724c:	9207      	str	r2, [sp, #28]
 801724e:	e014      	b.n	801727a <_vfiprintf_r+0x13a>
 8017250:	eba0 0308 	sub.w	r3, r0, r8
 8017254:	fa09 f303 	lsl.w	r3, r9, r3
 8017258:	4313      	orrs	r3, r2
 801725a:	9304      	str	r3, [sp, #16]
 801725c:	46a2      	mov	sl, r4
 801725e:	e7d2      	b.n	8017206 <_vfiprintf_r+0xc6>
 8017260:	9b03      	ldr	r3, [sp, #12]
 8017262:	1d19      	adds	r1, r3, #4
 8017264:	681b      	ldr	r3, [r3, #0]
 8017266:	9103      	str	r1, [sp, #12]
 8017268:	2b00      	cmp	r3, #0
 801726a:	bfbb      	ittet	lt
 801726c:	425b      	neglt	r3, r3
 801726e:	f042 0202 	orrlt.w	r2, r2, #2
 8017272:	9307      	strge	r3, [sp, #28]
 8017274:	9307      	strlt	r3, [sp, #28]
 8017276:	bfb8      	it	lt
 8017278:	9204      	strlt	r2, [sp, #16]
 801727a:	7823      	ldrb	r3, [r4, #0]
 801727c:	2b2e      	cmp	r3, #46	@ 0x2e
 801727e:	d10a      	bne.n	8017296 <_vfiprintf_r+0x156>
 8017280:	7863      	ldrb	r3, [r4, #1]
 8017282:	2b2a      	cmp	r3, #42	@ 0x2a
 8017284:	d132      	bne.n	80172ec <_vfiprintf_r+0x1ac>
 8017286:	9b03      	ldr	r3, [sp, #12]
 8017288:	1d1a      	adds	r2, r3, #4
 801728a:	681b      	ldr	r3, [r3, #0]
 801728c:	9203      	str	r2, [sp, #12]
 801728e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017292:	3402      	adds	r4, #2
 8017294:	9305      	str	r3, [sp, #20]
 8017296:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801736c <_vfiprintf_r+0x22c>
 801729a:	7821      	ldrb	r1, [r4, #0]
 801729c:	2203      	movs	r2, #3
 801729e:	4650      	mov	r0, sl
 80172a0:	f7e9 f836 	bl	8000310 <memchr>
 80172a4:	b138      	cbz	r0, 80172b6 <_vfiprintf_r+0x176>
 80172a6:	9b04      	ldr	r3, [sp, #16]
 80172a8:	eba0 000a 	sub.w	r0, r0, sl
 80172ac:	2240      	movs	r2, #64	@ 0x40
 80172ae:	4082      	lsls	r2, r0
 80172b0:	4313      	orrs	r3, r2
 80172b2:	3401      	adds	r4, #1
 80172b4:	9304      	str	r3, [sp, #16]
 80172b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80172ba:	4829      	ldr	r0, [pc, #164]	@ (8017360 <_vfiprintf_r+0x220>)
 80172bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80172c0:	2206      	movs	r2, #6
 80172c2:	f7e9 f825 	bl	8000310 <memchr>
 80172c6:	2800      	cmp	r0, #0
 80172c8:	d03f      	beq.n	801734a <_vfiprintf_r+0x20a>
 80172ca:	4b26      	ldr	r3, [pc, #152]	@ (8017364 <_vfiprintf_r+0x224>)
 80172cc:	bb1b      	cbnz	r3, 8017316 <_vfiprintf_r+0x1d6>
 80172ce:	9b03      	ldr	r3, [sp, #12]
 80172d0:	3307      	adds	r3, #7
 80172d2:	f023 0307 	bic.w	r3, r3, #7
 80172d6:	3308      	adds	r3, #8
 80172d8:	9303      	str	r3, [sp, #12]
 80172da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80172dc:	443b      	add	r3, r7
 80172de:	9309      	str	r3, [sp, #36]	@ 0x24
 80172e0:	e76a      	b.n	80171b8 <_vfiprintf_r+0x78>
 80172e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80172e6:	460c      	mov	r4, r1
 80172e8:	2001      	movs	r0, #1
 80172ea:	e7a8      	b.n	801723e <_vfiprintf_r+0xfe>
 80172ec:	2300      	movs	r3, #0
 80172ee:	3401      	adds	r4, #1
 80172f0:	9305      	str	r3, [sp, #20]
 80172f2:	4619      	mov	r1, r3
 80172f4:	f04f 0c0a 	mov.w	ip, #10
 80172f8:	4620      	mov	r0, r4
 80172fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80172fe:	3a30      	subs	r2, #48	@ 0x30
 8017300:	2a09      	cmp	r2, #9
 8017302:	d903      	bls.n	801730c <_vfiprintf_r+0x1cc>
 8017304:	2b00      	cmp	r3, #0
 8017306:	d0c6      	beq.n	8017296 <_vfiprintf_r+0x156>
 8017308:	9105      	str	r1, [sp, #20]
 801730a:	e7c4      	b.n	8017296 <_vfiprintf_r+0x156>
 801730c:	fb0c 2101 	mla	r1, ip, r1, r2
 8017310:	4604      	mov	r4, r0
 8017312:	2301      	movs	r3, #1
 8017314:	e7f0      	b.n	80172f8 <_vfiprintf_r+0x1b8>
 8017316:	ab03      	add	r3, sp, #12
 8017318:	9300      	str	r3, [sp, #0]
 801731a:	462a      	mov	r2, r5
 801731c:	4b12      	ldr	r3, [pc, #72]	@ (8017368 <_vfiprintf_r+0x228>)
 801731e:	a904      	add	r1, sp, #16
 8017320:	4630      	mov	r0, r6
 8017322:	f3af 8000 	nop.w
 8017326:	4607      	mov	r7, r0
 8017328:	1c78      	adds	r0, r7, #1
 801732a:	d1d6      	bne.n	80172da <_vfiprintf_r+0x19a>
 801732c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801732e:	07d9      	lsls	r1, r3, #31
 8017330:	d405      	bmi.n	801733e <_vfiprintf_r+0x1fe>
 8017332:	89ab      	ldrh	r3, [r5, #12]
 8017334:	059a      	lsls	r2, r3, #22
 8017336:	d402      	bmi.n	801733e <_vfiprintf_r+0x1fe>
 8017338:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801733a:	f7ff fda9 	bl	8016e90 <__retarget_lock_release_recursive>
 801733e:	89ab      	ldrh	r3, [r5, #12]
 8017340:	065b      	lsls	r3, r3, #25
 8017342:	f53f af1f 	bmi.w	8017184 <_vfiprintf_r+0x44>
 8017346:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017348:	e71e      	b.n	8017188 <_vfiprintf_r+0x48>
 801734a:	ab03      	add	r3, sp, #12
 801734c:	9300      	str	r3, [sp, #0]
 801734e:	462a      	mov	r2, r5
 8017350:	4b05      	ldr	r3, [pc, #20]	@ (8017368 <_vfiprintf_r+0x228>)
 8017352:	a904      	add	r1, sp, #16
 8017354:	4630      	mov	r0, r6
 8017356:	f000 f879 	bl	801744c <_printf_i>
 801735a:	e7e4      	b.n	8017326 <_vfiprintf_r+0x1e6>
 801735c:	0801b28d 	.word	0x0801b28d
 8017360:	0801b297 	.word	0x0801b297
 8017364:	00000000 	.word	0x00000000
 8017368:	0801711b 	.word	0x0801711b
 801736c:	0801b293 	.word	0x0801b293

08017370 <_printf_common>:
 8017370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017374:	4616      	mov	r6, r2
 8017376:	4698      	mov	r8, r3
 8017378:	688a      	ldr	r2, [r1, #8]
 801737a:	690b      	ldr	r3, [r1, #16]
 801737c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017380:	4293      	cmp	r3, r2
 8017382:	bfb8      	it	lt
 8017384:	4613      	movlt	r3, r2
 8017386:	6033      	str	r3, [r6, #0]
 8017388:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801738c:	4607      	mov	r7, r0
 801738e:	460c      	mov	r4, r1
 8017390:	b10a      	cbz	r2, 8017396 <_printf_common+0x26>
 8017392:	3301      	adds	r3, #1
 8017394:	6033      	str	r3, [r6, #0]
 8017396:	6823      	ldr	r3, [r4, #0]
 8017398:	0699      	lsls	r1, r3, #26
 801739a:	bf42      	ittt	mi
 801739c:	6833      	ldrmi	r3, [r6, #0]
 801739e:	3302      	addmi	r3, #2
 80173a0:	6033      	strmi	r3, [r6, #0]
 80173a2:	6825      	ldr	r5, [r4, #0]
 80173a4:	f015 0506 	ands.w	r5, r5, #6
 80173a8:	d106      	bne.n	80173b8 <_printf_common+0x48>
 80173aa:	f104 0a19 	add.w	sl, r4, #25
 80173ae:	68e3      	ldr	r3, [r4, #12]
 80173b0:	6832      	ldr	r2, [r6, #0]
 80173b2:	1a9b      	subs	r3, r3, r2
 80173b4:	42ab      	cmp	r3, r5
 80173b6:	dc26      	bgt.n	8017406 <_printf_common+0x96>
 80173b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80173bc:	6822      	ldr	r2, [r4, #0]
 80173be:	3b00      	subs	r3, #0
 80173c0:	bf18      	it	ne
 80173c2:	2301      	movne	r3, #1
 80173c4:	0692      	lsls	r2, r2, #26
 80173c6:	d42b      	bmi.n	8017420 <_printf_common+0xb0>
 80173c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80173cc:	4641      	mov	r1, r8
 80173ce:	4638      	mov	r0, r7
 80173d0:	47c8      	blx	r9
 80173d2:	3001      	adds	r0, #1
 80173d4:	d01e      	beq.n	8017414 <_printf_common+0xa4>
 80173d6:	6823      	ldr	r3, [r4, #0]
 80173d8:	6922      	ldr	r2, [r4, #16]
 80173da:	f003 0306 	and.w	r3, r3, #6
 80173de:	2b04      	cmp	r3, #4
 80173e0:	bf02      	ittt	eq
 80173e2:	68e5      	ldreq	r5, [r4, #12]
 80173e4:	6833      	ldreq	r3, [r6, #0]
 80173e6:	1aed      	subeq	r5, r5, r3
 80173e8:	68a3      	ldr	r3, [r4, #8]
 80173ea:	bf0c      	ite	eq
 80173ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80173f0:	2500      	movne	r5, #0
 80173f2:	4293      	cmp	r3, r2
 80173f4:	bfc4      	itt	gt
 80173f6:	1a9b      	subgt	r3, r3, r2
 80173f8:	18ed      	addgt	r5, r5, r3
 80173fa:	2600      	movs	r6, #0
 80173fc:	341a      	adds	r4, #26
 80173fe:	42b5      	cmp	r5, r6
 8017400:	d11a      	bne.n	8017438 <_printf_common+0xc8>
 8017402:	2000      	movs	r0, #0
 8017404:	e008      	b.n	8017418 <_printf_common+0xa8>
 8017406:	2301      	movs	r3, #1
 8017408:	4652      	mov	r2, sl
 801740a:	4641      	mov	r1, r8
 801740c:	4638      	mov	r0, r7
 801740e:	47c8      	blx	r9
 8017410:	3001      	adds	r0, #1
 8017412:	d103      	bne.n	801741c <_printf_common+0xac>
 8017414:	f04f 30ff 	mov.w	r0, #4294967295
 8017418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801741c:	3501      	adds	r5, #1
 801741e:	e7c6      	b.n	80173ae <_printf_common+0x3e>
 8017420:	18e1      	adds	r1, r4, r3
 8017422:	1c5a      	adds	r2, r3, #1
 8017424:	2030      	movs	r0, #48	@ 0x30
 8017426:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801742a:	4422      	add	r2, r4
 801742c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017430:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017434:	3302      	adds	r3, #2
 8017436:	e7c7      	b.n	80173c8 <_printf_common+0x58>
 8017438:	2301      	movs	r3, #1
 801743a:	4622      	mov	r2, r4
 801743c:	4641      	mov	r1, r8
 801743e:	4638      	mov	r0, r7
 8017440:	47c8      	blx	r9
 8017442:	3001      	adds	r0, #1
 8017444:	d0e6      	beq.n	8017414 <_printf_common+0xa4>
 8017446:	3601      	adds	r6, #1
 8017448:	e7d9      	b.n	80173fe <_printf_common+0x8e>
	...

0801744c <_printf_i>:
 801744c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017450:	7e0f      	ldrb	r7, [r1, #24]
 8017452:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017454:	2f78      	cmp	r7, #120	@ 0x78
 8017456:	4691      	mov	r9, r2
 8017458:	4680      	mov	r8, r0
 801745a:	460c      	mov	r4, r1
 801745c:	469a      	mov	sl, r3
 801745e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017462:	d807      	bhi.n	8017474 <_printf_i+0x28>
 8017464:	2f62      	cmp	r7, #98	@ 0x62
 8017466:	d80a      	bhi.n	801747e <_printf_i+0x32>
 8017468:	2f00      	cmp	r7, #0
 801746a:	f000 80d2 	beq.w	8017612 <_printf_i+0x1c6>
 801746e:	2f58      	cmp	r7, #88	@ 0x58
 8017470:	f000 80b9 	beq.w	80175e6 <_printf_i+0x19a>
 8017474:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017478:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801747c:	e03a      	b.n	80174f4 <_printf_i+0xa8>
 801747e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017482:	2b15      	cmp	r3, #21
 8017484:	d8f6      	bhi.n	8017474 <_printf_i+0x28>
 8017486:	a101      	add	r1, pc, #4	@ (adr r1, 801748c <_printf_i+0x40>)
 8017488:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801748c:	080174e5 	.word	0x080174e5
 8017490:	080174f9 	.word	0x080174f9
 8017494:	08017475 	.word	0x08017475
 8017498:	08017475 	.word	0x08017475
 801749c:	08017475 	.word	0x08017475
 80174a0:	08017475 	.word	0x08017475
 80174a4:	080174f9 	.word	0x080174f9
 80174a8:	08017475 	.word	0x08017475
 80174ac:	08017475 	.word	0x08017475
 80174b0:	08017475 	.word	0x08017475
 80174b4:	08017475 	.word	0x08017475
 80174b8:	080175f9 	.word	0x080175f9
 80174bc:	08017523 	.word	0x08017523
 80174c0:	080175b3 	.word	0x080175b3
 80174c4:	08017475 	.word	0x08017475
 80174c8:	08017475 	.word	0x08017475
 80174cc:	0801761b 	.word	0x0801761b
 80174d0:	08017475 	.word	0x08017475
 80174d4:	08017523 	.word	0x08017523
 80174d8:	08017475 	.word	0x08017475
 80174dc:	08017475 	.word	0x08017475
 80174e0:	080175bb 	.word	0x080175bb
 80174e4:	6833      	ldr	r3, [r6, #0]
 80174e6:	1d1a      	adds	r2, r3, #4
 80174e8:	681b      	ldr	r3, [r3, #0]
 80174ea:	6032      	str	r2, [r6, #0]
 80174ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80174f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80174f4:	2301      	movs	r3, #1
 80174f6:	e09d      	b.n	8017634 <_printf_i+0x1e8>
 80174f8:	6833      	ldr	r3, [r6, #0]
 80174fa:	6820      	ldr	r0, [r4, #0]
 80174fc:	1d19      	adds	r1, r3, #4
 80174fe:	6031      	str	r1, [r6, #0]
 8017500:	0606      	lsls	r6, r0, #24
 8017502:	d501      	bpl.n	8017508 <_printf_i+0xbc>
 8017504:	681d      	ldr	r5, [r3, #0]
 8017506:	e003      	b.n	8017510 <_printf_i+0xc4>
 8017508:	0645      	lsls	r5, r0, #25
 801750a:	d5fb      	bpl.n	8017504 <_printf_i+0xb8>
 801750c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017510:	2d00      	cmp	r5, #0
 8017512:	da03      	bge.n	801751c <_printf_i+0xd0>
 8017514:	232d      	movs	r3, #45	@ 0x2d
 8017516:	426d      	negs	r5, r5
 8017518:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801751c:	4859      	ldr	r0, [pc, #356]	@ (8017684 <_printf_i+0x238>)
 801751e:	230a      	movs	r3, #10
 8017520:	e011      	b.n	8017546 <_printf_i+0xfa>
 8017522:	6821      	ldr	r1, [r4, #0]
 8017524:	6833      	ldr	r3, [r6, #0]
 8017526:	0608      	lsls	r0, r1, #24
 8017528:	f853 5b04 	ldr.w	r5, [r3], #4
 801752c:	d402      	bmi.n	8017534 <_printf_i+0xe8>
 801752e:	0649      	lsls	r1, r1, #25
 8017530:	bf48      	it	mi
 8017532:	b2ad      	uxthmi	r5, r5
 8017534:	2f6f      	cmp	r7, #111	@ 0x6f
 8017536:	4853      	ldr	r0, [pc, #332]	@ (8017684 <_printf_i+0x238>)
 8017538:	6033      	str	r3, [r6, #0]
 801753a:	bf14      	ite	ne
 801753c:	230a      	movne	r3, #10
 801753e:	2308      	moveq	r3, #8
 8017540:	2100      	movs	r1, #0
 8017542:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017546:	6866      	ldr	r6, [r4, #4]
 8017548:	60a6      	str	r6, [r4, #8]
 801754a:	2e00      	cmp	r6, #0
 801754c:	bfa2      	ittt	ge
 801754e:	6821      	ldrge	r1, [r4, #0]
 8017550:	f021 0104 	bicge.w	r1, r1, #4
 8017554:	6021      	strge	r1, [r4, #0]
 8017556:	b90d      	cbnz	r5, 801755c <_printf_i+0x110>
 8017558:	2e00      	cmp	r6, #0
 801755a:	d04b      	beq.n	80175f4 <_printf_i+0x1a8>
 801755c:	4616      	mov	r6, r2
 801755e:	fbb5 f1f3 	udiv	r1, r5, r3
 8017562:	fb03 5711 	mls	r7, r3, r1, r5
 8017566:	5dc7      	ldrb	r7, [r0, r7]
 8017568:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801756c:	462f      	mov	r7, r5
 801756e:	42bb      	cmp	r3, r7
 8017570:	460d      	mov	r5, r1
 8017572:	d9f4      	bls.n	801755e <_printf_i+0x112>
 8017574:	2b08      	cmp	r3, #8
 8017576:	d10b      	bne.n	8017590 <_printf_i+0x144>
 8017578:	6823      	ldr	r3, [r4, #0]
 801757a:	07df      	lsls	r7, r3, #31
 801757c:	d508      	bpl.n	8017590 <_printf_i+0x144>
 801757e:	6923      	ldr	r3, [r4, #16]
 8017580:	6861      	ldr	r1, [r4, #4]
 8017582:	4299      	cmp	r1, r3
 8017584:	bfde      	ittt	le
 8017586:	2330      	movle	r3, #48	@ 0x30
 8017588:	f806 3c01 	strble.w	r3, [r6, #-1]
 801758c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017590:	1b92      	subs	r2, r2, r6
 8017592:	6122      	str	r2, [r4, #16]
 8017594:	f8cd a000 	str.w	sl, [sp]
 8017598:	464b      	mov	r3, r9
 801759a:	aa03      	add	r2, sp, #12
 801759c:	4621      	mov	r1, r4
 801759e:	4640      	mov	r0, r8
 80175a0:	f7ff fee6 	bl	8017370 <_printf_common>
 80175a4:	3001      	adds	r0, #1
 80175a6:	d14a      	bne.n	801763e <_printf_i+0x1f2>
 80175a8:	f04f 30ff 	mov.w	r0, #4294967295
 80175ac:	b004      	add	sp, #16
 80175ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175b2:	6823      	ldr	r3, [r4, #0]
 80175b4:	f043 0320 	orr.w	r3, r3, #32
 80175b8:	6023      	str	r3, [r4, #0]
 80175ba:	4833      	ldr	r0, [pc, #204]	@ (8017688 <_printf_i+0x23c>)
 80175bc:	2778      	movs	r7, #120	@ 0x78
 80175be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80175c2:	6823      	ldr	r3, [r4, #0]
 80175c4:	6831      	ldr	r1, [r6, #0]
 80175c6:	061f      	lsls	r7, r3, #24
 80175c8:	f851 5b04 	ldr.w	r5, [r1], #4
 80175cc:	d402      	bmi.n	80175d4 <_printf_i+0x188>
 80175ce:	065f      	lsls	r7, r3, #25
 80175d0:	bf48      	it	mi
 80175d2:	b2ad      	uxthmi	r5, r5
 80175d4:	6031      	str	r1, [r6, #0]
 80175d6:	07d9      	lsls	r1, r3, #31
 80175d8:	bf44      	itt	mi
 80175da:	f043 0320 	orrmi.w	r3, r3, #32
 80175de:	6023      	strmi	r3, [r4, #0]
 80175e0:	b11d      	cbz	r5, 80175ea <_printf_i+0x19e>
 80175e2:	2310      	movs	r3, #16
 80175e4:	e7ac      	b.n	8017540 <_printf_i+0xf4>
 80175e6:	4827      	ldr	r0, [pc, #156]	@ (8017684 <_printf_i+0x238>)
 80175e8:	e7e9      	b.n	80175be <_printf_i+0x172>
 80175ea:	6823      	ldr	r3, [r4, #0]
 80175ec:	f023 0320 	bic.w	r3, r3, #32
 80175f0:	6023      	str	r3, [r4, #0]
 80175f2:	e7f6      	b.n	80175e2 <_printf_i+0x196>
 80175f4:	4616      	mov	r6, r2
 80175f6:	e7bd      	b.n	8017574 <_printf_i+0x128>
 80175f8:	6833      	ldr	r3, [r6, #0]
 80175fa:	6825      	ldr	r5, [r4, #0]
 80175fc:	6961      	ldr	r1, [r4, #20]
 80175fe:	1d18      	adds	r0, r3, #4
 8017600:	6030      	str	r0, [r6, #0]
 8017602:	062e      	lsls	r6, r5, #24
 8017604:	681b      	ldr	r3, [r3, #0]
 8017606:	d501      	bpl.n	801760c <_printf_i+0x1c0>
 8017608:	6019      	str	r1, [r3, #0]
 801760a:	e002      	b.n	8017612 <_printf_i+0x1c6>
 801760c:	0668      	lsls	r0, r5, #25
 801760e:	d5fb      	bpl.n	8017608 <_printf_i+0x1bc>
 8017610:	8019      	strh	r1, [r3, #0]
 8017612:	2300      	movs	r3, #0
 8017614:	6123      	str	r3, [r4, #16]
 8017616:	4616      	mov	r6, r2
 8017618:	e7bc      	b.n	8017594 <_printf_i+0x148>
 801761a:	6833      	ldr	r3, [r6, #0]
 801761c:	1d1a      	adds	r2, r3, #4
 801761e:	6032      	str	r2, [r6, #0]
 8017620:	681e      	ldr	r6, [r3, #0]
 8017622:	6862      	ldr	r2, [r4, #4]
 8017624:	2100      	movs	r1, #0
 8017626:	4630      	mov	r0, r6
 8017628:	f7e8 fe72 	bl	8000310 <memchr>
 801762c:	b108      	cbz	r0, 8017632 <_printf_i+0x1e6>
 801762e:	1b80      	subs	r0, r0, r6
 8017630:	6060      	str	r0, [r4, #4]
 8017632:	6863      	ldr	r3, [r4, #4]
 8017634:	6123      	str	r3, [r4, #16]
 8017636:	2300      	movs	r3, #0
 8017638:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801763c:	e7aa      	b.n	8017594 <_printf_i+0x148>
 801763e:	6923      	ldr	r3, [r4, #16]
 8017640:	4632      	mov	r2, r6
 8017642:	4649      	mov	r1, r9
 8017644:	4640      	mov	r0, r8
 8017646:	47d0      	blx	sl
 8017648:	3001      	adds	r0, #1
 801764a:	d0ad      	beq.n	80175a8 <_printf_i+0x15c>
 801764c:	6823      	ldr	r3, [r4, #0]
 801764e:	079b      	lsls	r3, r3, #30
 8017650:	d413      	bmi.n	801767a <_printf_i+0x22e>
 8017652:	68e0      	ldr	r0, [r4, #12]
 8017654:	9b03      	ldr	r3, [sp, #12]
 8017656:	4298      	cmp	r0, r3
 8017658:	bfb8      	it	lt
 801765a:	4618      	movlt	r0, r3
 801765c:	e7a6      	b.n	80175ac <_printf_i+0x160>
 801765e:	2301      	movs	r3, #1
 8017660:	4632      	mov	r2, r6
 8017662:	4649      	mov	r1, r9
 8017664:	4640      	mov	r0, r8
 8017666:	47d0      	blx	sl
 8017668:	3001      	adds	r0, #1
 801766a:	d09d      	beq.n	80175a8 <_printf_i+0x15c>
 801766c:	3501      	adds	r5, #1
 801766e:	68e3      	ldr	r3, [r4, #12]
 8017670:	9903      	ldr	r1, [sp, #12]
 8017672:	1a5b      	subs	r3, r3, r1
 8017674:	42ab      	cmp	r3, r5
 8017676:	dcf2      	bgt.n	801765e <_printf_i+0x212>
 8017678:	e7eb      	b.n	8017652 <_printf_i+0x206>
 801767a:	2500      	movs	r5, #0
 801767c:	f104 0619 	add.w	r6, r4, #25
 8017680:	e7f5      	b.n	801766e <_printf_i+0x222>
 8017682:	bf00      	nop
 8017684:	0801b29e 	.word	0x0801b29e
 8017688:	0801b2af 	.word	0x0801b2af

0801768c <__sflush_r>:
 801768c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017694:	0716      	lsls	r6, r2, #28
 8017696:	4605      	mov	r5, r0
 8017698:	460c      	mov	r4, r1
 801769a:	d454      	bmi.n	8017746 <__sflush_r+0xba>
 801769c:	684b      	ldr	r3, [r1, #4]
 801769e:	2b00      	cmp	r3, #0
 80176a0:	dc02      	bgt.n	80176a8 <__sflush_r+0x1c>
 80176a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	dd48      	ble.n	801773a <__sflush_r+0xae>
 80176a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80176aa:	2e00      	cmp	r6, #0
 80176ac:	d045      	beq.n	801773a <__sflush_r+0xae>
 80176ae:	2300      	movs	r3, #0
 80176b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80176b4:	682f      	ldr	r7, [r5, #0]
 80176b6:	6a21      	ldr	r1, [r4, #32]
 80176b8:	602b      	str	r3, [r5, #0]
 80176ba:	d030      	beq.n	801771e <__sflush_r+0x92>
 80176bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80176be:	89a3      	ldrh	r3, [r4, #12]
 80176c0:	0759      	lsls	r1, r3, #29
 80176c2:	d505      	bpl.n	80176d0 <__sflush_r+0x44>
 80176c4:	6863      	ldr	r3, [r4, #4]
 80176c6:	1ad2      	subs	r2, r2, r3
 80176c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80176ca:	b10b      	cbz	r3, 80176d0 <__sflush_r+0x44>
 80176cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80176ce:	1ad2      	subs	r2, r2, r3
 80176d0:	2300      	movs	r3, #0
 80176d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80176d4:	6a21      	ldr	r1, [r4, #32]
 80176d6:	4628      	mov	r0, r5
 80176d8:	47b0      	blx	r6
 80176da:	1c43      	adds	r3, r0, #1
 80176dc:	89a3      	ldrh	r3, [r4, #12]
 80176de:	d106      	bne.n	80176ee <__sflush_r+0x62>
 80176e0:	6829      	ldr	r1, [r5, #0]
 80176e2:	291d      	cmp	r1, #29
 80176e4:	d82b      	bhi.n	801773e <__sflush_r+0xb2>
 80176e6:	4a2a      	ldr	r2, [pc, #168]	@ (8017790 <__sflush_r+0x104>)
 80176e8:	410a      	asrs	r2, r1
 80176ea:	07d6      	lsls	r6, r2, #31
 80176ec:	d427      	bmi.n	801773e <__sflush_r+0xb2>
 80176ee:	2200      	movs	r2, #0
 80176f0:	6062      	str	r2, [r4, #4]
 80176f2:	04d9      	lsls	r1, r3, #19
 80176f4:	6922      	ldr	r2, [r4, #16]
 80176f6:	6022      	str	r2, [r4, #0]
 80176f8:	d504      	bpl.n	8017704 <__sflush_r+0x78>
 80176fa:	1c42      	adds	r2, r0, #1
 80176fc:	d101      	bne.n	8017702 <__sflush_r+0x76>
 80176fe:	682b      	ldr	r3, [r5, #0]
 8017700:	b903      	cbnz	r3, 8017704 <__sflush_r+0x78>
 8017702:	6560      	str	r0, [r4, #84]	@ 0x54
 8017704:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017706:	602f      	str	r7, [r5, #0]
 8017708:	b1b9      	cbz	r1, 801773a <__sflush_r+0xae>
 801770a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801770e:	4299      	cmp	r1, r3
 8017710:	d002      	beq.n	8017718 <__sflush_r+0x8c>
 8017712:	4628      	mov	r0, r5
 8017714:	f7ff fbea 	bl	8016eec <_free_r>
 8017718:	2300      	movs	r3, #0
 801771a:	6363      	str	r3, [r4, #52]	@ 0x34
 801771c:	e00d      	b.n	801773a <__sflush_r+0xae>
 801771e:	2301      	movs	r3, #1
 8017720:	4628      	mov	r0, r5
 8017722:	47b0      	blx	r6
 8017724:	4602      	mov	r2, r0
 8017726:	1c50      	adds	r0, r2, #1
 8017728:	d1c9      	bne.n	80176be <__sflush_r+0x32>
 801772a:	682b      	ldr	r3, [r5, #0]
 801772c:	2b00      	cmp	r3, #0
 801772e:	d0c6      	beq.n	80176be <__sflush_r+0x32>
 8017730:	2b1d      	cmp	r3, #29
 8017732:	d001      	beq.n	8017738 <__sflush_r+0xac>
 8017734:	2b16      	cmp	r3, #22
 8017736:	d11e      	bne.n	8017776 <__sflush_r+0xea>
 8017738:	602f      	str	r7, [r5, #0]
 801773a:	2000      	movs	r0, #0
 801773c:	e022      	b.n	8017784 <__sflush_r+0xf8>
 801773e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017742:	b21b      	sxth	r3, r3
 8017744:	e01b      	b.n	801777e <__sflush_r+0xf2>
 8017746:	690f      	ldr	r7, [r1, #16]
 8017748:	2f00      	cmp	r7, #0
 801774a:	d0f6      	beq.n	801773a <__sflush_r+0xae>
 801774c:	0793      	lsls	r3, r2, #30
 801774e:	680e      	ldr	r6, [r1, #0]
 8017750:	bf08      	it	eq
 8017752:	694b      	ldreq	r3, [r1, #20]
 8017754:	600f      	str	r7, [r1, #0]
 8017756:	bf18      	it	ne
 8017758:	2300      	movne	r3, #0
 801775a:	eba6 0807 	sub.w	r8, r6, r7
 801775e:	608b      	str	r3, [r1, #8]
 8017760:	f1b8 0f00 	cmp.w	r8, #0
 8017764:	dde9      	ble.n	801773a <__sflush_r+0xae>
 8017766:	6a21      	ldr	r1, [r4, #32]
 8017768:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801776a:	4643      	mov	r3, r8
 801776c:	463a      	mov	r2, r7
 801776e:	4628      	mov	r0, r5
 8017770:	47b0      	blx	r6
 8017772:	2800      	cmp	r0, #0
 8017774:	dc08      	bgt.n	8017788 <__sflush_r+0xfc>
 8017776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801777a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801777e:	81a3      	strh	r3, [r4, #12]
 8017780:	f04f 30ff 	mov.w	r0, #4294967295
 8017784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017788:	4407      	add	r7, r0
 801778a:	eba8 0800 	sub.w	r8, r8, r0
 801778e:	e7e7      	b.n	8017760 <__sflush_r+0xd4>
 8017790:	dfbffffe 	.word	0xdfbffffe

08017794 <_fflush_r>:
 8017794:	b538      	push	{r3, r4, r5, lr}
 8017796:	690b      	ldr	r3, [r1, #16]
 8017798:	4605      	mov	r5, r0
 801779a:	460c      	mov	r4, r1
 801779c:	b913      	cbnz	r3, 80177a4 <_fflush_r+0x10>
 801779e:	2500      	movs	r5, #0
 80177a0:	4628      	mov	r0, r5
 80177a2:	bd38      	pop	{r3, r4, r5, pc}
 80177a4:	b118      	cbz	r0, 80177ae <_fflush_r+0x1a>
 80177a6:	6a03      	ldr	r3, [r0, #32]
 80177a8:	b90b      	cbnz	r3, 80177ae <_fflush_r+0x1a>
 80177aa:	f7ff fa0b 	bl	8016bc4 <__sinit>
 80177ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	d0f3      	beq.n	801779e <_fflush_r+0xa>
 80177b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80177b8:	07d0      	lsls	r0, r2, #31
 80177ba:	d404      	bmi.n	80177c6 <_fflush_r+0x32>
 80177bc:	0599      	lsls	r1, r3, #22
 80177be:	d402      	bmi.n	80177c6 <_fflush_r+0x32>
 80177c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80177c2:	f7ff fb64 	bl	8016e8e <__retarget_lock_acquire_recursive>
 80177c6:	4628      	mov	r0, r5
 80177c8:	4621      	mov	r1, r4
 80177ca:	f7ff ff5f 	bl	801768c <__sflush_r>
 80177ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80177d0:	07da      	lsls	r2, r3, #31
 80177d2:	4605      	mov	r5, r0
 80177d4:	d4e4      	bmi.n	80177a0 <_fflush_r+0xc>
 80177d6:	89a3      	ldrh	r3, [r4, #12]
 80177d8:	059b      	lsls	r3, r3, #22
 80177da:	d4e1      	bmi.n	80177a0 <_fflush_r+0xc>
 80177dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80177de:	f7ff fb57 	bl	8016e90 <__retarget_lock_release_recursive>
 80177e2:	e7dd      	b.n	80177a0 <_fflush_r+0xc>

080177e4 <fiprintf>:
 80177e4:	b40e      	push	{r1, r2, r3}
 80177e6:	b503      	push	{r0, r1, lr}
 80177e8:	4601      	mov	r1, r0
 80177ea:	ab03      	add	r3, sp, #12
 80177ec:	4805      	ldr	r0, [pc, #20]	@ (8017804 <fiprintf+0x20>)
 80177ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80177f2:	6800      	ldr	r0, [r0, #0]
 80177f4:	9301      	str	r3, [sp, #4]
 80177f6:	f7ff fca3 	bl	8017140 <_vfiprintf_r>
 80177fa:	b002      	add	sp, #8
 80177fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8017800:	b003      	add	sp, #12
 8017802:	4770      	bx	lr
 8017804:	24000040 	.word	0x24000040

08017808 <__swbuf_r>:
 8017808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801780a:	460e      	mov	r6, r1
 801780c:	4614      	mov	r4, r2
 801780e:	4605      	mov	r5, r0
 8017810:	b118      	cbz	r0, 801781a <__swbuf_r+0x12>
 8017812:	6a03      	ldr	r3, [r0, #32]
 8017814:	b90b      	cbnz	r3, 801781a <__swbuf_r+0x12>
 8017816:	f7ff f9d5 	bl	8016bc4 <__sinit>
 801781a:	69a3      	ldr	r3, [r4, #24]
 801781c:	60a3      	str	r3, [r4, #8]
 801781e:	89a3      	ldrh	r3, [r4, #12]
 8017820:	071a      	lsls	r2, r3, #28
 8017822:	d501      	bpl.n	8017828 <__swbuf_r+0x20>
 8017824:	6923      	ldr	r3, [r4, #16]
 8017826:	b943      	cbnz	r3, 801783a <__swbuf_r+0x32>
 8017828:	4621      	mov	r1, r4
 801782a:	4628      	mov	r0, r5
 801782c:	f000 f82a 	bl	8017884 <__swsetup_r>
 8017830:	b118      	cbz	r0, 801783a <__swbuf_r+0x32>
 8017832:	f04f 37ff 	mov.w	r7, #4294967295
 8017836:	4638      	mov	r0, r7
 8017838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801783a:	6823      	ldr	r3, [r4, #0]
 801783c:	6922      	ldr	r2, [r4, #16]
 801783e:	1a98      	subs	r0, r3, r2
 8017840:	6963      	ldr	r3, [r4, #20]
 8017842:	b2f6      	uxtb	r6, r6
 8017844:	4283      	cmp	r3, r0
 8017846:	4637      	mov	r7, r6
 8017848:	dc05      	bgt.n	8017856 <__swbuf_r+0x4e>
 801784a:	4621      	mov	r1, r4
 801784c:	4628      	mov	r0, r5
 801784e:	f7ff ffa1 	bl	8017794 <_fflush_r>
 8017852:	2800      	cmp	r0, #0
 8017854:	d1ed      	bne.n	8017832 <__swbuf_r+0x2a>
 8017856:	68a3      	ldr	r3, [r4, #8]
 8017858:	3b01      	subs	r3, #1
 801785a:	60a3      	str	r3, [r4, #8]
 801785c:	6823      	ldr	r3, [r4, #0]
 801785e:	1c5a      	adds	r2, r3, #1
 8017860:	6022      	str	r2, [r4, #0]
 8017862:	701e      	strb	r6, [r3, #0]
 8017864:	6962      	ldr	r2, [r4, #20]
 8017866:	1c43      	adds	r3, r0, #1
 8017868:	429a      	cmp	r2, r3
 801786a:	d004      	beq.n	8017876 <__swbuf_r+0x6e>
 801786c:	89a3      	ldrh	r3, [r4, #12]
 801786e:	07db      	lsls	r3, r3, #31
 8017870:	d5e1      	bpl.n	8017836 <__swbuf_r+0x2e>
 8017872:	2e0a      	cmp	r6, #10
 8017874:	d1df      	bne.n	8017836 <__swbuf_r+0x2e>
 8017876:	4621      	mov	r1, r4
 8017878:	4628      	mov	r0, r5
 801787a:	f7ff ff8b 	bl	8017794 <_fflush_r>
 801787e:	2800      	cmp	r0, #0
 8017880:	d0d9      	beq.n	8017836 <__swbuf_r+0x2e>
 8017882:	e7d6      	b.n	8017832 <__swbuf_r+0x2a>

08017884 <__swsetup_r>:
 8017884:	b538      	push	{r3, r4, r5, lr}
 8017886:	4b29      	ldr	r3, [pc, #164]	@ (801792c <__swsetup_r+0xa8>)
 8017888:	4605      	mov	r5, r0
 801788a:	6818      	ldr	r0, [r3, #0]
 801788c:	460c      	mov	r4, r1
 801788e:	b118      	cbz	r0, 8017898 <__swsetup_r+0x14>
 8017890:	6a03      	ldr	r3, [r0, #32]
 8017892:	b90b      	cbnz	r3, 8017898 <__swsetup_r+0x14>
 8017894:	f7ff f996 	bl	8016bc4 <__sinit>
 8017898:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801789c:	0719      	lsls	r1, r3, #28
 801789e:	d422      	bmi.n	80178e6 <__swsetup_r+0x62>
 80178a0:	06da      	lsls	r2, r3, #27
 80178a2:	d407      	bmi.n	80178b4 <__swsetup_r+0x30>
 80178a4:	2209      	movs	r2, #9
 80178a6:	602a      	str	r2, [r5, #0]
 80178a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80178ac:	81a3      	strh	r3, [r4, #12]
 80178ae:	f04f 30ff 	mov.w	r0, #4294967295
 80178b2:	e033      	b.n	801791c <__swsetup_r+0x98>
 80178b4:	0758      	lsls	r0, r3, #29
 80178b6:	d512      	bpl.n	80178de <__swsetup_r+0x5a>
 80178b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80178ba:	b141      	cbz	r1, 80178ce <__swsetup_r+0x4a>
 80178bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80178c0:	4299      	cmp	r1, r3
 80178c2:	d002      	beq.n	80178ca <__swsetup_r+0x46>
 80178c4:	4628      	mov	r0, r5
 80178c6:	f7ff fb11 	bl	8016eec <_free_r>
 80178ca:	2300      	movs	r3, #0
 80178cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80178ce:	89a3      	ldrh	r3, [r4, #12]
 80178d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80178d4:	81a3      	strh	r3, [r4, #12]
 80178d6:	2300      	movs	r3, #0
 80178d8:	6063      	str	r3, [r4, #4]
 80178da:	6923      	ldr	r3, [r4, #16]
 80178dc:	6023      	str	r3, [r4, #0]
 80178de:	89a3      	ldrh	r3, [r4, #12]
 80178e0:	f043 0308 	orr.w	r3, r3, #8
 80178e4:	81a3      	strh	r3, [r4, #12]
 80178e6:	6923      	ldr	r3, [r4, #16]
 80178e8:	b94b      	cbnz	r3, 80178fe <__swsetup_r+0x7a>
 80178ea:	89a3      	ldrh	r3, [r4, #12]
 80178ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80178f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80178f4:	d003      	beq.n	80178fe <__swsetup_r+0x7a>
 80178f6:	4621      	mov	r1, r4
 80178f8:	4628      	mov	r0, r5
 80178fa:	f000 f856 	bl	80179aa <__smakebuf_r>
 80178fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017902:	f013 0201 	ands.w	r2, r3, #1
 8017906:	d00a      	beq.n	801791e <__swsetup_r+0x9a>
 8017908:	2200      	movs	r2, #0
 801790a:	60a2      	str	r2, [r4, #8]
 801790c:	6962      	ldr	r2, [r4, #20]
 801790e:	4252      	negs	r2, r2
 8017910:	61a2      	str	r2, [r4, #24]
 8017912:	6922      	ldr	r2, [r4, #16]
 8017914:	b942      	cbnz	r2, 8017928 <__swsetup_r+0xa4>
 8017916:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801791a:	d1c5      	bne.n	80178a8 <__swsetup_r+0x24>
 801791c:	bd38      	pop	{r3, r4, r5, pc}
 801791e:	0799      	lsls	r1, r3, #30
 8017920:	bf58      	it	pl
 8017922:	6962      	ldrpl	r2, [r4, #20]
 8017924:	60a2      	str	r2, [r4, #8]
 8017926:	e7f4      	b.n	8017912 <__swsetup_r+0x8e>
 8017928:	2000      	movs	r0, #0
 801792a:	e7f7      	b.n	801791c <__swsetup_r+0x98>
 801792c:	24000040 	.word	0x24000040

08017930 <_sbrk_r>:
 8017930:	b538      	push	{r3, r4, r5, lr}
 8017932:	4d06      	ldr	r5, [pc, #24]	@ (801794c <_sbrk_r+0x1c>)
 8017934:	2300      	movs	r3, #0
 8017936:	4604      	mov	r4, r0
 8017938:	4608      	mov	r0, r1
 801793a:	602b      	str	r3, [r5, #0]
 801793c:	f7e9 f88e 	bl	8000a5c <_sbrk>
 8017940:	1c43      	adds	r3, r0, #1
 8017942:	d102      	bne.n	801794a <_sbrk_r+0x1a>
 8017944:	682b      	ldr	r3, [r5, #0]
 8017946:	b103      	cbz	r3, 801794a <_sbrk_r+0x1a>
 8017948:	6023      	str	r3, [r4, #0]
 801794a:	bd38      	pop	{r3, r4, r5, pc}
 801794c:	240081a0 	.word	0x240081a0

08017950 <abort>:
 8017950:	b508      	push	{r3, lr}
 8017952:	2006      	movs	r0, #6
 8017954:	f000 f88e 	bl	8017a74 <raise>
 8017958:	2001      	movs	r0, #1
 801795a:	f7e9 f807 	bl	800096c <_exit>

0801795e <__swhatbuf_r>:
 801795e:	b570      	push	{r4, r5, r6, lr}
 8017960:	460c      	mov	r4, r1
 8017962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017966:	2900      	cmp	r1, #0
 8017968:	b096      	sub	sp, #88	@ 0x58
 801796a:	4615      	mov	r5, r2
 801796c:	461e      	mov	r6, r3
 801796e:	da0d      	bge.n	801798c <__swhatbuf_r+0x2e>
 8017970:	89a3      	ldrh	r3, [r4, #12]
 8017972:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017976:	f04f 0100 	mov.w	r1, #0
 801797a:	bf14      	ite	ne
 801797c:	2340      	movne	r3, #64	@ 0x40
 801797e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017982:	2000      	movs	r0, #0
 8017984:	6031      	str	r1, [r6, #0]
 8017986:	602b      	str	r3, [r5, #0]
 8017988:	b016      	add	sp, #88	@ 0x58
 801798a:	bd70      	pop	{r4, r5, r6, pc}
 801798c:	466a      	mov	r2, sp
 801798e:	f000 f879 	bl	8017a84 <_fstat_r>
 8017992:	2800      	cmp	r0, #0
 8017994:	dbec      	blt.n	8017970 <__swhatbuf_r+0x12>
 8017996:	9901      	ldr	r1, [sp, #4]
 8017998:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801799c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80179a0:	4259      	negs	r1, r3
 80179a2:	4159      	adcs	r1, r3
 80179a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80179a8:	e7eb      	b.n	8017982 <__swhatbuf_r+0x24>

080179aa <__smakebuf_r>:
 80179aa:	898b      	ldrh	r3, [r1, #12]
 80179ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80179ae:	079d      	lsls	r5, r3, #30
 80179b0:	4606      	mov	r6, r0
 80179b2:	460c      	mov	r4, r1
 80179b4:	d507      	bpl.n	80179c6 <__smakebuf_r+0x1c>
 80179b6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80179ba:	6023      	str	r3, [r4, #0]
 80179bc:	6123      	str	r3, [r4, #16]
 80179be:	2301      	movs	r3, #1
 80179c0:	6163      	str	r3, [r4, #20]
 80179c2:	b003      	add	sp, #12
 80179c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80179c6:	ab01      	add	r3, sp, #4
 80179c8:	466a      	mov	r2, sp
 80179ca:	f7ff ffc8 	bl	801795e <__swhatbuf_r>
 80179ce:	9f00      	ldr	r7, [sp, #0]
 80179d0:	4605      	mov	r5, r0
 80179d2:	4639      	mov	r1, r7
 80179d4:	4630      	mov	r0, r6
 80179d6:	f7ff fafd 	bl	8016fd4 <_malloc_r>
 80179da:	b948      	cbnz	r0, 80179f0 <__smakebuf_r+0x46>
 80179dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80179e0:	059a      	lsls	r2, r3, #22
 80179e2:	d4ee      	bmi.n	80179c2 <__smakebuf_r+0x18>
 80179e4:	f023 0303 	bic.w	r3, r3, #3
 80179e8:	f043 0302 	orr.w	r3, r3, #2
 80179ec:	81a3      	strh	r3, [r4, #12]
 80179ee:	e7e2      	b.n	80179b6 <__smakebuf_r+0xc>
 80179f0:	89a3      	ldrh	r3, [r4, #12]
 80179f2:	6020      	str	r0, [r4, #0]
 80179f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80179f8:	81a3      	strh	r3, [r4, #12]
 80179fa:	9b01      	ldr	r3, [sp, #4]
 80179fc:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017a00:	b15b      	cbz	r3, 8017a1a <__smakebuf_r+0x70>
 8017a02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017a06:	4630      	mov	r0, r6
 8017a08:	f000 f84e 	bl	8017aa8 <_isatty_r>
 8017a0c:	b128      	cbz	r0, 8017a1a <__smakebuf_r+0x70>
 8017a0e:	89a3      	ldrh	r3, [r4, #12]
 8017a10:	f023 0303 	bic.w	r3, r3, #3
 8017a14:	f043 0301 	orr.w	r3, r3, #1
 8017a18:	81a3      	strh	r3, [r4, #12]
 8017a1a:	89a3      	ldrh	r3, [r4, #12]
 8017a1c:	431d      	orrs	r5, r3
 8017a1e:	81a5      	strh	r5, [r4, #12]
 8017a20:	e7cf      	b.n	80179c2 <__smakebuf_r+0x18>

08017a22 <_raise_r>:
 8017a22:	291f      	cmp	r1, #31
 8017a24:	b538      	push	{r3, r4, r5, lr}
 8017a26:	4605      	mov	r5, r0
 8017a28:	460c      	mov	r4, r1
 8017a2a:	d904      	bls.n	8017a36 <_raise_r+0x14>
 8017a2c:	2316      	movs	r3, #22
 8017a2e:	6003      	str	r3, [r0, #0]
 8017a30:	f04f 30ff 	mov.w	r0, #4294967295
 8017a34:	bd38      	pop	{r3, r4, r5, pc}
 8017a36:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017a38:	b112      	cbz	r2, 8017a40 <_raise_r+0x1e>
 8017a3a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017a3e:	b94b      	cbnz	r3, 8017a54 <_raise_r+0x32>
 8017a40:	4628      	mov	r0, r5
 8017a42:	f000 f853 	bl	8017aec <_getpid_r>
 8017a46:	4622      	mov	r2, r4
 8017a48:	4601      	mov	r1, r0
 8017a4a:	4628      	mov	r0, r5
 8017a4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017a50:	f000 b83a 	b.w	8017ac8 <_kill_r>
 8017a54:	2b01      	cmp	r3, #1
 8017a56:	d00a      	beq.n	8017a6e <_raise_r+0x4c>
 8017a58:	1c59      	adds	r1, r3, #1
 8017a5a:	d103      	bne.n	8017a64 <_raise_r+0x42>
 8017a5c:	2316      	movs	r3, #22
 8017a5e:	6003      	str	r3, [r0, #0]
 8017a60:	2001      	movs	r0, #1
 8017a62:	e7e7      	b.n	8017a34 <_raise_r+0x12>
 8017a64:	2100      	movs	r1, #0
 8017a66:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017a6a:	4620      	mov	r0, r4
 8017a6c:	4798      	blx	r3
 8017a6e:	2000      	movs	r0, #0
 8017a70:	e7e0      	b.n	8017a34 <_raise_r+0x12>
	...

08017a74 <raise>:
 8017a74:	4b02      	ldr	r3, [pc, #8]	@ (8017a80 <raise+0xc>)
 8017a76:	4601      	mov	r1, r0
 8017a78:	6818      	ldr	r0, [r3, #0]
 8017a7a:	f7ff bfd2 	b.w	8017a22 <_raise_r>
 8017a7e:	bf00      	nop
 8017a80:	24000040 	.word	0x24000040

08017a84 <_fstat_r>:
 8017a84:	b538      	push	{r3, r4, r5, lr}
 8017a86:	4d07      	ldr	r5, [pc, #28]	@ (8017aa4 <_fstat_r+0x20>)
 8017a88:	2300      	movs	r3, #0
 8017a8a:	4604      	mov	r4, r0
 8017a8c:	4608      	mov	r0, r1
 8017a8e:	4611      	mov	r1, r2
 8017a90:	602b      	str	r3, [r5, #0]
 8017a92:	f7e8 ffbb 	bl	8000a0c <_fstat>
 8017a96:	1c43      	adds	r3, r0, #1
 8017a98:	d102      	bne.n	8017aa0 <_fstat_r+0x1c>
 8017a9a:	682b      	ldr	r3, [r5, #0]
 8017a9c:	b103      	cbz	r3, 8017aa0 <_fstat_r+0x1c>
 8017a9e:	6023      	str	r3, [r4, #0]
 8017aa0:	bd38      	pop	{r3, r4, r5, pc}
 8017aa2:	bf00      	nop
 8017aa4:	240081a0 	.word	0x240081a0

08017aa8 <_isatty_r>:
 8017aa8:	b538      	push	{r3, r4, r5, lr}
 8017aaa:	4d06      	ldr	r5, [pc, #24]	@ (8017ac4 <_isatty_r+0x1c>)
 8017aac:	2300      	movs	r3, #0
 8017aae:	4604      	mov	r4, r0
 8017ab0:	4608      	mov	r0, r1
 8017ab2:	602b      	str	r3, [r5, #0]
 8017ab4:	f7e8 ffba 	bl	8000a2c <_isatty>
 8017ab8:	1c43      	adds	r3, r0, #1
 8017aba:	d102      	bne.n	8017ac2 <_isatty_r+0x1a>
 8017abc:	682b      	ldr	r3, [r5, #0]
 8017abe:	b103      	cbz	r3, 8017ac2 <_isatty_r+0x1a>
 8017ac0:	6023      	str	r3, [r4, #0]
 8017ac2:	bd38      	pop	{r3, r4, r5, pc}
 8017ac4:	240081a0 	.word	0x240081a0

08017ac8 <_kill_r>:
 8017ac8:	b538      	push	{r3, r4, r5, lr}
 8017aca:	4d07      	ldr	r5, [pc, #28]	@ (8017ae8 <_kill_r+0x20>)
 8017acc:	2300      	movs	r3, #0
 8017ace:	4604      	mov	r4, r0
 8017ad0:	4608      	mov	r0, r1
 8017ad2:	4611      	mov	r1, r2
 8017ad4:	602b      	str	r3, [r5, #0]
 8017ad6:	f7e8 ff37 	bl	8000948 <_kill>
 8017ada:	1c43      	adds	r3, r0, #1
 8017adc:	d102      	bne.n	8017ae4 <_kill_r+0x1c>
 8017ade:	682b      	ldr	r3, [r5, #0]
 8017ae0:	b103      	cbz	r3, 8017ae4 <_kill_r+0x1c>
 8017ae2:	6023      	str	r3, [r4, #0]
 8017ae4:	bd38      	pop	{r3, r4, r5, pc}
 8017ae6:	bf00      	nop
 8017ae8:	240081a0 	.word	0x240081a0

08017aec <_getpid_r>:
 8017aec:	f7e8 bf24 	b.w	8000938 <_getpid>

08017af0 <_init>:
 8017af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017af2:	bf00      	nop
 8017af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017af6:	bc08      	pop	{r3}
 8017af8:	469e      	mov	lr, r3
 8017afa:	4770      	bx	lr

08017afc <_fini>:
 8017afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017afe:	bf00      	nop
 8017b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017b02:	bc08      	pop	{r3}
 8017b04:	469e      	mov	lr, r3
 8017b06:	4770      	bx	lr
